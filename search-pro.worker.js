const{entries:V}=Object,{fromEntries:et}=Object,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":2122,\"nextId\":2122,\"documentIds\":{\"0\":\"1\",\"1\":\"2\",\"2\":\"2#一、安装\",\"3\":\"2#二、配置\",\"4\":\"2#三、使用-git\",\"5\":\"2#_1-查看当前仓库的状态\",\"6\":\"2#_2-初始化仓库\",\"7\":\"2#_3-文件状态\",\"8\":\"2#_4-常用的命令\",\"9\":\"2#四、分支\",\"10\":\"2#_1-基本操作\",\"11\":\"2#_2-变基-rebase\",\"12\":\"2#五、远程仓库-remote\",\"13\":\"2#_1-远程库的操作的命令\",\"14\":\"2#_2-tag-标签\",\"15\":\"2#_3-gitignore\",\"16\":\"2#_4-github-的静态页面\",\"17\":\"2#六、常规工作流\",\"18\":\"2@0\",\"19\":\"2@1\",\"20\":\"3\",\"21\":\"3#一、模块化发展史\",\"22\":\"3#_1-第一阶段\",\"23\":\"3#_2-第二阶段\",\"24\":\"3#_3-第三阶段\",\"25\":\"3#_4-第四阶段\",\"26\":\"3#二、之前的解决方案\",\"27\":\"3#_1-全局-function-模式\",\"28\":\"3#_2-namespace-模式\",\"29\":\"3#_3-iife-模式\",\"30\":\"3#_4-iife-模式增强\",\"31\":\"3#_5-页面加载多个-js-的问题\",\"32\":\"3#三、commonjs\",\"33\":\"3#_1-下载安装-node-js\",\"34\":\"3#_2-创建项目结构\",\"35\":\"3#_3-模块化编码\",\"36\":\"3#_4-通过-node-运行-app-js\",\"37\":\"3#_5-commonjs-的-工作原理\",\"38\":\"3#四、amd\",\"39\":\"3#_1-下载-require-js\",\"40\":\"3#_2-创建项目结构-1\",\"41\":\"3#_3-定义模块代码\",\"42\":\"3#_4-应用主入口-main-js\",\"43\":\"3#_5-页面使用模块\",\"44\":\"3#_6-使用第三方基于-require-js-的框架-jquery\",\"45\":\"3#_7-使用第三方不基于-require-js-的框架-angular-angular-messages\",\"46\":\"3#五、es6\",\"47\":\"3#_1-模块的引入\",\"48\":\"3#_2-模块的基本导出和导入\",\"49\":\"3#基本导出\",\"50\":\"3#基本导入\",\"51\":\"3#_3-默认导出\",\"52\":\"3#_4-默认导入\",\"53\":\"3@0\",\"54\":\"3@1\",\"55\":\"4\",\"56\":\"4#一、概念介绍\",\"57\":\"4#_1-包是什么\",\"58\":\"4#_2-包管理工具\",\"59\":\"4#_3-包加载的基本流程\",\"60\":\"4#_3-常用的包管理工具\",\"61\":\"4#二、npm\",\"62\":\"4#_1-npm-的安装\",\"63\":\"4#_2-npm-基本使用\",\"64\":\"4#初始化\",\"65\":\"4#搜索包\",\"66\":\"4#下载安装包\",\"67\":\"4#_3-配置镜像源\",\"68\":\"4#直接配置\",\"69\":\"4#工具配置\",\"70\":\"4#使用-cnpm-替换-npm\",\"71\":\"4#_4-生产环境与开发环境\",\"72\":\"4#_5-生产依赖与开发依赖\",\"73\":\"4#_6-全局安装\",\"74\":\"4#_7-安装包依赖\",\"75\":\"4#_8-安装指定版本的包\",\"76\":\"4#_9-删除依赖\",\"77\":\"4#_10-配置命令别名\",\"78\":\"4#_11-npx\",\"79\":\"4#三、cnpm\",\"80\":\"4#介绍\",\"81\":\"4#安装\",\"82\":\"4#操作命令\",\"83\":\"4#四、yarn\",\"84\":\"4#yarn-介绍\",\"85\":\"4#yarn-特点\",\"86\":\"4#yarn-安装\",\"87\":\"4#yarn-常用命令\",\"88\":\"4#yarn-配置淘宝镜像\",\"89\":\"4#npm-和-yarn-选择\",\"90\":\"4#五、管理发布包\",\"91\":\"4#创建与发布\",\"92\":\"4#更新包\",\"93\":\"4#删除包\",\"94\":\"4#六、扩展内容\",\"95\":\"4@0\",\"96\":\"4@1\",\"97\":\"5\",\"98\":\"5@0\",\"99\":\"6\",\"100\":\"6@0\",\"101\":\"7\",\"102\":\"7@0\",\"103\":\"7@1\",\"104\":\"8\",\"105\":\"8@0\",\"106\":\"9\",\"107\":\"9@0\",\"108\":\"10\",\"109\":\"11\",\"110\":\"11@0\",\"111\":\"12\",\"112\":\"12@0\",\"113\":\"13\",\"114\":\"13@0\",\"115\":\"14\",\"116\":\"14#一、浏览器端的模块化\",\"117\":\"14#二、根本原因\",\"118\":\"14#三、解决办法\",\"119\":\"14#四、常见的构建工具\",\"120\":\"14@0\",\"121\":\"14@1\",\"122\":\"15\",\"123\":\"15#一、webpack-的安装\",\"124\":\"15#二、使用\",\"125\":\"15@0\",\"126\":\"15@1\",\"127\":\"16\",\"128\":\"16#一、html-webpack-plugin\",\"129\":\"16#二、clean-webpack-plugin\",\"130\":\"16@0\",\"131\":\"16@1\",\"132\":\"17\",\"133\":\"17#开发服务器\",\"134\":\"17#跨域代理\",\"135\":\"17@0\",\"136\":\"17@1\",\"137\":\"18\",\"138\":\"18#loader\",\"139\":\"18@0\",\"140\":\"18@1\",\"141\":\"19\",\"142\":\"19#一、图片\",\"143\":\"19#二、字体\",\"144\":\"19@0\",\"145\":\"19@1\",\"146\":\"20\",\"147\":\"20#一、babel-的安装\",\"148\":\"20#二、使用\",\"149\":\"20#三、webpack-中使用-babel\",\"150\":\"20#四、优化-babel-loader\",\"151\":\"20@0\",\"152\":\"20@1\",\"153\":\"21\",\"154\":\"21#webpack-构建流程\",\"155\":\"21#简易复现\",\"156\":\"21#loader-和-plugin-的区别\",\"157\":\"21#文件监听原理\",\"158\":\"21#webpack-的热更新原理\",\"159\":\"21#文件指纹是什么\",\"160\":\"21@0\",\"161\":\"21@1\",\"162\":\"23\",\"163\":\"23#一、数据类型\",\"164\":\"23#二、运算符\",\"165\":\"23#_1-算数运算符\",\"166\":\"23#_2-比较运算符\",\"167\":\"23#三、流程控制\",\"168\":\"23#四、类\",\"169\":\"26\",\"170\":\"26#一、简介\",\"171\":\"26#_1-mongodb-是什么\",\"172\":\"26#_2-数据库是什么\",\"173\":\"26#_3-数据库的作用\",\"174\":\"26#_4-数据库管理数据的特点\",\"175\":\"26#_5-为什么选择-mongodb\",\"176\":\"26#二、核心概念\",\"177\":\"26#_1-下载安装与启动\",\"178\":\"26#_2-命令行交互\",\"179\":\"26#_3-数据库命令\",\"180\":\"26#_4-集合命令\",\"181\":\"26#_5-文档命令\",\"182\":\"26#_6-命令汇总\",\"183\":\"26#_7-应用场景\",\"184\":\"26#新增\",\"185\":\"26#删除\",\"186\":\"26#更新\",\"187\":\"26#查询\",\"188\":\"26#三、mongoose\",\"189\":\"26#_1-介绍\",\"190\":\"26#_2-安装\",\"191\":\"26#_3-使用流程\",\"192\":\"26#_4-字段类型\",\"193\":\"26#_5-字段值验证\",\"194\":\"26#必填项\",\"195\":\"26#默认值\",\"196\":\"26#枚举值\",\"197\":\"26#唯一值\",\"198\":\"26#自定义匹配\",\"199\":\"26#_6-curd\",\"200\":\"26#增加\",\"201\":\"26#删除-1\",\"202\":\"26#更新-1\",\"203\":\"26#查询-1\",\"204\":\"26#_7-条件控制\",\"205\":\"26#运算符\",\"206\":\"26#逻辑运算\",\"207\":\"26#正则匹配\",\"208\":\"26#_8-个性化读取\",\"209\":\"26#字段筛选\",\"210\":\"26#数据排序\",\"211\":\"26#数据截取\",\"212\":\"26#_9-模块化\",\"213\":\"26#四、图形化管理工具\",\"214\":\"27\",\"215\":\"27#一、定义\",\"216\":\"27#二、node-js-的组成\",\"217\":\"27#三、node-js-的应用\",\"218\":\"27#_1-bff-中间层\",\"219\":\"27#_2-服务端渲染\",\"220\":\"27#_3-做小型服务、小型网站的后端-基于-express、koa-框架\",\"221\":\"27#_4-做项目构建工具\",\"222\":\"27#_5-做-pc-客户端软件-基于-electron-框架\",\"223\":\"27#_6-知名度较高的-node-js-开源项目\",\"224\":\"27#四、node-js-的特点\",\"225\":\"27#五、使用-node-js-时的劣势\",\"226\":\"28\",\"227\":\"28#一、安装包安装\",\"228\":\"28#二、nvm安装\",\"229\":\"28#_1-nvm的常用命令\",\"230\":\"29\",\"231\":\"29#一、介绍\",\"232\":\"29#_1-什么是模块化与模块\",\"233\":\"29#_2-什么是模块化项目\",\"234\":\"29#_3-模块化好处\",\"235\":\"29#二、模块暴露数据\",\"236\":\"29#_1-模块初体验\",\"237\":\"29#_2-暴露数据\",\"238\":\"29#三、导入-引入-模块\",\"239\":\"29#四、导入模块的基本流程\",\"240\":\"29#五、commonjs-规范\",\"241\":\"30\",\"242\":\"30#一、fs文件系统\",\"243\":\"30#_1-文件写入\",\"244\":\"30#writefile-异步写入\",\"245\":\"30#writefilesync-同步写入\",\"246\":\"30#appendfile-appendfilesync-追加写入\",\"247\":\"30#createwritestream-流式写入\",\"248\":\"30#写入文件的场景\",\"249\":\"30#_2-文件读取\",\"250\":\"30#readfile-异步读取\",\"251\":\"30#readfilesync-同步读取\",\"252\":\"30#createreadstream-流式读取\",\"253\":\"30#读取文件应用场景\",\"254\":\"30#_3-文件移动与重命名\",\"255\":\"30#_4-文件删除\",\"256\":\"30#_5-文件夹操作\",\"257\":\"30#mkdir-创建文件夹\",\"258\":\"30#readdir-读取文件夹\",\"259\":\"30#rmdir-删除文件夹\",\"260\":\"30#_6-查看资源状态\",\"261\":\"30#_7-相对路径问题\",\"262\":\"30#_8-dirname\",\"263\":\"30#_9-练习\",\"264\":\"30#二、path模块\",\"265\":\"30#三、http模块\",\"266\":\"30#_1-概念\",\"267\":\"30#_2-请求报文的组成\",\"268\":\"30#http-的请求行\",\"269\":\"30#http-请求头\",\"270\":\"30#http-的请求体\",\"271\":\"30#_3-响应报文的组成\",\"272\":\"30#_4-创建-http-服务\",\"273\":\"30#操作步骤\",\"274\":\"30#测试\",\"275\":\"30#注意事项\",\"276\":\"30#_5-浏览器查看-http-报文\",\"277\":\"30#查看请求行与请求头\",\"278\":\"30#查看请求体\",\"279\":\"30#查看-url-查询字符串\",\"280\":\"30#查看响应行与响应头\",\"281\":\"30#查看响应体\",\"282\":\"30#_6-获取-http-请求报文\",\"283\":\"30#提取-http-报文的请求体\",\"284\":\"30#提取-http-报文中-url的路径-与-查询字符串\",\"285\":\"30#练习\",\"286\":\"30#_7-设置-http-响应报文\",\"287\":\"30#练习-1\",\"288\":\"30#_8-静态资源服务\",\"289\":\"30#_9-网站根目录或静态资源目录\",\"290\":\"30#_10-网页中的-url\",\"291\":\"30#绝对路径\",\"292\":\"30#相对路径\",\"293\":\"30#网页中使用-url-的场景小结\",\"294\":\"30#_11-设置资源类型-mime类型\",\"295\":\"30#_12-get-和-post-请求场景小结\",\"296\":\"30#_13-get和post请求的区别-实现层面\",\"297\":\"31\",\"298\":\"31#一、express-介绍\",\"299\":\"31#二、express-使用\",\"300\":\"31#_1-express-下载\",\"301\":\"31#_2-express-初体验\",\"302\":\"31#三、express-路由\",\"303\":\"31#_1-什么是路由\",\"304\":\"31#_2-路由的使用\",\"305\":\"31#_3-获取请求参数\",\"306\":\"31#_4-获取路由参数\",\"307\":\"31#四、express-响应设置\",\"308\":\"31#五、express-中间件\",\"309\":\"31#_1-什么是中间件\",\"310\":\"31#_2-中间件的作用\",\"311\":\"31#_3-中间件的类型\",\"312\":\"31#_4-定义全局中间件\",\"313\":\"31#声明中间件函数\",\"314\":\"31#多个全局中间件\",\"315\":\"31#定义路由中间件\",\"316\":\"31#_5-静态资源中间件\",\"317\":\"31#_6-获取请求体数据\",\"318\":\"31#六、router\",\"319\":\"31#_1-什么是-router\",\"320\":\"31#_2-router-作用\",\"321\":\"31#_3-router-使用\",\"322\":\"31#七、ejs-模板引擎\",\"323\":\"31#_1-什么是模板引擎\",\"324\":\"31#_2-什么是-ejs\",\"325\":\"31#_3-ejs-初体验\",\"326\":\"31#下载安装ejs\",\"327\":\"31#代码示例\",\"328\":\"31#_4-ejs-常用语法\",\"329\":\"31#_5-在express中使用ejs\",\"330\":\"31#八、express脚手架\",\"331\":\"31#_1-安装express-generator\",\"332\":\"31#_2-创建应用\",\"333\":\"32\",\"334\":\"32#一、简介\",\"335\":\"32#_1-接口是什么\",\"336\":\"32#_2-接口的作用\",\"337\":\"32#_3-接口的开发与调用\",\"338\":\"32#_4-接口的组成\",\"339\":\"32#二、restful-api\",\"340\":\"32#三、json-server\",\"341\":\"32#四、接口测试工具\",\"342\":\"33\",\"343\":\"33#一、介绍\",\"344\":\"33#二、cookie\",\"345\":\"33#_1-cookie-是什么\",\"346\":\"33#_2-cookie-的特点\",\"347\":\"33#_3-cookie-的运行流程\",\"348\":\"33#_4-浏览器操作-cookie\",\"349\":\"33#_5-cookie-的代码操作\",\"350\":\"33#_6-cookie加密\",\"351\":\"33#三、session\",\"352\":\"33#_1-session-是什么\",\"353\":\"33#_2-为什么要用session\",\"354\":\"33#_3-session-运行流程\",\"355\":\"33#_4-session-的代码操作\",\"356\":\"33#_5-session-和-cookie-的区别\",\"357\":\"33#四、token\",\"358\":\"33#_1-token-是什么\",\"359\":\"33#_2-token-的作用\",\"360\":\"33#_3-token-的工作流程\",\"361\":\"33#_4-token-的特点\",\"362\":\"33#_5-token-和-session-的区别\",\"363\":\"33#五、jwt\",\"364\":\"33#_1-jwt的构成\",\"365\":\"33#header\",\"366\":\"33#playload\",\"367\":\"33#signature\",\"368\":\"33#_2-jwt-认证流程\",\"369\":\"33#_3-token-和-jwt-的区别\",\"370\":\"33#六、附录\",\"371\":\"33#_1-本地域名\",\"372\":\"33#操作流程\",\"373\":\"33#原理\",\"374\":\"36\",\"375\":\"36#一、语言基础\",\"376\":\"36#_1-文件结构\",\"377\":\"36#_2-模块\",\"378\":\"36#_3-模块导入方式\",\"379\":\"36#_4-模块的搜索路径\",\"380\":\"36#二、变量\",\"381\":\"36#三、数据类型\",\"382\":\"36#_1-number\",\"383\":\"36#_2-string\",\"384\":\"36#转义符\",\"385\":\"36#屏幕-i-o-及格式化\",\"386\":\"36#手动拼接格式化\",\"387\":\"36#占位符格式化\",\"388\":\"36#str-format格式化\",\"389\":\"36#f-string\",\"390\":\"36#_3-list\",\"391\":\"36#_4-tuple\",\"392\":\"36#_5-set\",\"393\":\"36#_6-dictionary\",\"394\":\"36#四、-运算符\",\"395\":\"36#_1-算数运算符\",\"396\":\"36#_2-赋值运算符\",\"397\":\"36#_3-逻辑运算符\",\"398\":\"36#_4-比较运算符\",\"399\":\"36#_5-位运算符\",\"400\":\"36#_6-三目运算符\",\"401\":\"36#五、流程控制\",\"402\":\"36#六、函数\",\"403\":\"36#七、错误与异常\",\"404\":\"36#八、文件操作\",\"405\":\"36#九、类\",\"406\":\"36#十、系统调度\",\"407\":\"36#_1-进程与线程\",\"408\":\"36#_2-线程\",\"409\":\"37\",\"410\":\"37#冒泡排序\",\"411\":\"37#选择排序\",\"412\":\"37#插入排序\",\"413\":\"37#希尔排序\",\"414\":\"37#归并排序\",\"415\":\"37#快速排序\",\"416\":\"37#堆排序\",\"417\":\"37#计数排序\",\"418\":\"37#桶排序\",\"419\":\"37#基数排序\",\"420\":\"38\",\"421\":\"38#代码\",\"422\":\"38#测试\",\"423\":\"39\",\"424\":\"39#代码\",\"425\":\"39#测试\",\"426\":\"40\",\"427\":\"40#一、模拟apply\",\"428\":\"40#代码\",\"429\":\"40#测试\",\"430\":\"40#二、模拟call\",\"431\":\"40#三、模拟bind\",\"432\":\"40#代码-1\",\"433\":\"40#测试-1\",\"434\":\"41\",\"435\":\"41#一、foreach\",\"436\":\"41#代码\",\"437\":\"41#二、reduce\",\"438\":\"41#代码-1\",\"439\":\"41#测试\",\"440\":\"41#三、filter\",\"441\":\"41#代码-2\",\"442\":\"41#四、map\",\"443\":\"41#代码-3\",\"444\":\"42\",\"445\":\"42#一、array-from\",\"446\":\"42#二、array-prototype-slice-call\",\"447\":\"42#三、拓展运算符\",\"448\":\"43\",\"449\":\"43#es6-flat\",\"450\":\"43#reduce-递归\",\"451\":\"43#reduce模拟原生flat\",\"452\":\"43#模拟栈\",\"453\":\"43#简单写法\",\"454\":\"44\",\"455\":\"44#es6的set去重\",\"456\":\"44#循环遍历\",\"457\":\"44#filter\",\"458\":\"44#reduce\",\"459\":\"45\",\"460\":\"45#一、防抖\",\"461\":\"45#二、节流\",\"462\":\"46\",\"463\":\"46#一、柯里化\",\"464\":\"46#二、实现add-1-2-3-4\",\"465\":\"47\",\"466\":\"47#一、圣杯模式\",\"467\":\"47#二、使用object-create\",\"468\":\"48\",\"469\":\"48#一、浅拷贝\",\"470\":\"48#二、深拷贝\",\"471\":\"48#_1-json-stringify\",\"472\":\"48#_2-循环递归\",\"473\":\"49\",\"474\":\"49#代码\",\"475\":\"50\",\"476\":\"50#代码\",\"477\":\"51\",\"478\":\"51#一、图片懒加载\",\"479\":\"51#二、滚动加载\",\"480\":\"51#三、渲染大量数据不卡住页面\",\"481\":\"52\",\"482\":\"52#一、模板语法\",\"483\":\"52#二、虚拟dom转真实dom\",\"484\":\"53\",\"485\":\"53#定义\",\"486\":\"53#arguments对象实现\",\"487\":\"53#利用对象和闭包\",\"488\":\"53#可选参数实现\",\"489\":\"54\",\"490\":\"54#一、题意\",\"491\":\"54#二、解法\",\"492\":\"55\",\"493\":\"55#题目一\",\"494\":\"55#题目二\",\"495\":\"56\",\"496\":\"56#代码\",\"497\":\"57\",\"498\":\"57#类的实现\",\"499\":\"57#请求的并发控制\",\"500\":\"58\",\"501\":\"58#代码实现\",\"502\":\"59\",\"503\":\"59#一、页面死循环卡死时如何上报错误\",\"504\":\"59#_1-设置最大执行时间限制\",\"505\":\"59#_2-心跳检测\",\"506\":\"59#二、中间层方案\",\"507\":\"59#_1-1-node作为中间层模式\",\"508\":\"59#_1-2-负载均衡器-nginx\",\"509\":\"59#三、前端鉴权方案\",\"510\":\"59#四、扫码登录方案\",\"511\":\"59#五、首屏性能提升方案\",\"512\":\"59#六、长列表无限滚动方案\",\"513\":\"60\",\"514\":\"60#一、-分类\",\"515\":\"60#二、-选择器\",\"516\":\"60#_1-常用选择器\",\"517\":\"60#_2-复合选择器\",\"518\":\"60#_3-关系选择器\",\"519\":\"60#_4-属性选择器\",\"520\":\"60#_5-伪类\",\"521\":\"60#_6-伪元素选择器\",\"522\":\"60#_7-层叠规则-选择器优先级\",\"523\":\"60#_1-比较重要性\",\"524\":\"60#_2-比较特殊性\",\"525\":\"60#_3-比较源次序\",\"526\":\"60#三、-声明块\",\"527\":\"60#_1-样式的继承\",\"528\":\"60#_2-属性值的计算过程\",\"529\":\"60#_1-确定声名值\",\"530\":\"60#_2-层叠冲突\",\"531\":\"60#_3-使用继承\",\"532\":\"60#_4-使用默认值\",\"533\":\"60#_5-a-元素为什么不继承父元素的颜色\",\"534\":\"60#_3-长度单位\",\"535\":\"60#_4-颜色单位\",\"536\":\"60@0\",\"537\":\"60@1\",\"538\":\"61\",\"539\":\"61#一、-标准流-normal-flow\",\"540\":\"61#_1-元素在标准流中的特点\",\"541\":\"61#_2-元素脱离标准流的特点\",\"542\":\"61#二、-盒模型-box-model\",\"543\":\"61#_1-内容区-content\",\"544\":\"61#_2-边框-border\",\"545\":\"61#_3-内边距-padding\",\"546\":\"61#_4-外边距-margin\",\"547\":\"61#_5-盒子尺寸\",\"548\":\"61#_6-盒模型的显示\",\"549\":\"61@0\",\"550\":\"61@1\",\"551\":\"62\",\"552\":\"62#一、常规流布局\",\"553\":\"62#_1-盒子的水平布局\",\"554\":\"62#调整的情况\",\"555\":\"62#举例说明\",\"556\":\"62#多个-auto-自动调整说明\",\"557\":\"62#_2-垂直方向的布局\",\"558\":\"62#_3-外边距重叠\",\"559\":\"62#二、浮动-float\",\"560\":\"62#_1-设置元素的浮动\",\"561\":\"62#_2-浮动的特点\",\"562\":\"62#_3-浮动带来的问题\",\"563\":\"62#_4-解决方案\",\"564\":\"62#_1-bfc-block-formatting-context-块级格式化上下文\",\"565\":\"62#_2-clear\",\"566\":\"62#_3-最终解决方案\",\"567\":\"62#三、定位-position\",\"568\":\"62#_1-属性\",\"569\":\"62#_2-相对定位\",\"570\":\"62#_3-绝对定位\",\"571\":\"62#_4-固定定位\",\"572\":\"62#_5-粘滞定位\",\"573\":\"62#四、绝对定位元素的布局\",\"574\":\"62#_1-当发生过度约束\",\"575\":\"62#_2-元素的层级\",\"576\":\"62#五、堆叠上下文-stack-context\",\"577\":\"62#_1-创建堆叠上下文的元素\",\"578\":\"62#_2-同一个堆叠上下文中元素在-z-轴上的排列\",\"579\":\"62#六、常见的整体布局\",\"580\":\"62#_1-两栏或者三栏布局\",\"581\":\"62#_2-等高布局\",\"582\":\"62#伪等高\",\"583\":\"62#真等高\",\"584\":\"62#七、弹性盒-flex\",\"585\":\"62#_1-弹性容器\",\"586\":\"62#_2-更改主轴方向\",\"587\":\"62#_3-主轴换行\",\"588\":\"62#_4-主轴排列\",\"589\":\"62#_5-辅轴排列\",\"590\":\"62#_6-辅轴多轴线排列\",\"591\":\"62#_7-弹性元素伸缩\",\"592\":\"62#_8-简写属性\",\"593\":\"62#_9-order\",\"594\":\"62#八、元素居中总结\",\"595\":\"62#_1-水平居中\",\"596\":\"62#行盒-行块盒-水平居中\",\"597\":\"62#常规块盒水平居中\",\"598\":\"62#绝对定位元素的水平居中\",\"599\":\"62#弹性元素的水平居中\",\"600\":\"62#_2-垂直居中\",\"601\":\"62#单行文本的垂直居中\",\"602\":\"62#行块盒或块盒内多行文本的垂直居中\",\"603\":\"62#绝对定位的垂直居中\",\"604\":\"62#弹性元素的垂直居中\",\"605\":\"62#九、网格-grid\",\"606\":\"62@0\",\"607\":\"62@1\",\"608\":\"63\",\"609\":\"63#一、视觉类样式\",\"610\":\"63#_1-默认样式\",\"611\":\"63#_2-轮廓\",\"612\":\"63#_3-圆角\",\"613\":\"63#_4-盒子阴影\",\"614\":\"63#_5-文字阴影\",\"615\":\"63#二、-变形-transform\",\"616\":\"63#_1-translate-平移\",\"617\":\"63#_2-rotate-旋转\",\"618\":\"63#_3-scale-缩放\",\"619\":\"63#_4-改变变形原点\",\"620\":\"63#三、字体\",\"621\":\"63#_1-字体相关的样式\",\"622\":\"63#_2-图标字体-iconfont\",\"623\":\"63#fontawesome\",\"624\":\"63#阿里的字体库-iconfont\",\"625\":\"63#_3-文本样式\",\"626\":\"63#四、背景\",\"627\":\"63#_1-背景颜色\",\"628\":\"63#_2-背景图片\",\"629\":\"63#_3-控制背景平铺行为\",\"630\":\"63#_4-背景图片的位置\",\"631\":\"63#_5-背景图片的偏移量计算的原点\",\"632\":\"63#_6-背景的范围\",\"633\":\"63#_7-背景图片的大小\",\"634\":\"63#_8-背景图片是否跟随元素移动\",\"635\":\"63#_9-背景相关的简写属性\",\"636\":\"63#_10-渐变\",\"637\":\"63@0\",\"638\":\"63@1\",\"639\":\"64\",\"640\":\"64#一、animation\",\"641\":\"64#_1-过渡-transition\",\"642\":\"64#_2-动画\",\"643\":\"64#关键帧的设置\",\"644\":\"64#动画的设置\",\"645\":\"64#二、移动端开发\",\"646\":\"64#_1-像素\",\"647\":\"64#_2-视口-viewport\",\"648\":\"64#视口分类\",\"649\":\"64#_3-像素比\",\"650\":\"64#_4-移动端单位\",\"651\":\"64#三、响应式布局\",\"652\":\"64@0\",\"653\":\"64@1\",\"654\":\"65\",\"655\":\"65#一、前置知识\",\"656\":\"65#_1-网页结构\",\"657\":\"65#_2-html-页面的基本结构\",\"658\":\"65#二、实体\",\"659\":\"65#三、meta-元素-元数据\",\"660\":\"65#四、-语义化标签\",\"661\":\"65#_1-块级元素\",\"662\":\"65#_2-内联元素\",\"663\":\"65#_3-列表\",\"664\":\"65#_4-超链接\",\"665\":\"65#_5-缩略语\",\"666\":\"65#_6-图片标签\",\"667\":\"65#_7-内联框架\",\"668\":\"65#_8-音视频\",\"669\":\"65#_9-表格\",\"670\":\"65#_10-表单\",\"671\":\"65#_11-嵌入元素\",\"672\":\"65#_1-object\",\"673\":\"65#_2-embed\",\"674\":\"65#_3-更加兼容的做法\",\"675\":\"65#_12-script-标签\",\"676\":\"65@0\",\"677\":\"65@1\",\"678\":\"66\",\"679\":\"66#一、定义\",\"680\":\"66#_1-attribute\",\"681\":\"66#_2-property\",\"682\":\"66#二、布尔值属性与非布尔值属性\",\"683\":\"66#三、attribute-和-property-的同步关系-预定义属性\",\"684\":\"66#四、操作对象\",\"685\":\"66#五、attribute-的一些方法\",\"686\":\"66#六、总结\",\"687\":\"66@0\",\"688\":\"66@1\",\"689\":\"67\",\"690\":\"67#一、html5-和之前的一些区别\",\"691\":\"67#_1-文档类型说明\",\"692\":\"67#_2-根元素\",\"693\":\"67#_3-head-元素\",\"694\":\"67#二、语义化标签\",\"695\":\"67#三、其他新增标签\",\"696\":\"67#_1-状态标签\",\"697\":\"67#_2-列表标签\",\"698\":\"67#_3-注释标签\",\"699\":\"67#_4-标记标签\",\"700\":\"67#四、canvas-的基本用法\",\"701\":\"67#_1-什么是-canvas-画布\",\"702\":\"67#_2-替换内容\",\"703\":\"67#_3-canvas-标签属性\",\"704\":\"67#_4-渲染上下文\",\"705\":\"67#五、canvas-绘制矩形-默认-api\",\"706\":\"67#_1-绘制矩形\",\"707\":\"67#_2-strokerect-时-边框像素渲染问题\",\"708\":\"67#_3-添加样式和颜色\",\"709\":\"67#六、canvas-绘制路径\",\"710\":\"67#_1-步骤\",\"711\":\"67#_2-路径流程的-api\",\"712\":\"67#_3-样式容器和样式栈\",\"713\":\"67#_4-canvas-编写的基本模板\",\"714\":\"67#_5-绘制矩形\",\"715\":\"67#_6-绘制曲线\",\"716\":\"67#canvas-绘制圆形\",\"717\":\"67#canvas-绘制弧线\",\"718\":\"67#canvas-绘制二次贝塞尔曲线\",\"719\":\"67#canvas-绘制三次贝塞尔曲线\",\"720\":\"67#七、canvas-中的变换\",\"721\":\"67#八、canvas-绘制图片\",\"722\":\"67#_1-插入图片\",\"723\":\"67#_2-设置背景\",\"724\":\"67#_3-渐变\",\"725\":\"67#canvas-渐变-线性渐变\",\"726\":\"67#canvas-渐变-径向渐变\",\"727\":\"67#_4-飞鸟实例实现\",\"728\":\"67#九、canvas-绘制文本\",\"729\":\"67#_1-在-canvas-中绘制文本\",\"730\":\"67#_2-文本样式\",\"731\":\"67#_3-measuretext\",\"732\":\"67#_4-canvas-中文本水平垂直居中\",\"733\":\"67#_5-阴影-文本阴影-盒模型阴影\",\"734\":\"67#十、canvas-像素操作\",\"735\":\"67#_1-canvas-中的像素操作\",\"736\":\"67#_2-像素数据\",\"737\":\"67#_3-imagedata-对象\",\"738\":\"67#_4-写入像素数据\",\"739\":\"67#_5-创建-imagedata-对象\",\"740\":\"67#_6-马赛克案例\",\"741\":\"67#十一、canvas-其他-api\",\"742\":\"67#_1-全局透明度的设置\",\"743\":\"67#_2-覆盖合成\",\"744\":\"67#_3-将画布导出为图像\",\"745\":\"67#_4-事件操作\",\"746\":\"67#十二、多媒体音视频\",\"747\":\"67#_1-html5-标签\",\"748\":\"67#_2-video-标签的属性\",\"749\":\"67#_3-audio-标签的属性\",\"750\":\"67#_4-音视频的-js-相关属性\",\"751\":\"67#_5-音视频-js-相关函数\",\"752\":\"67#_6-js-相关事件\",\"753\":\"67#十三、表单\",\"754\":\"67#_1-表单的不变\",\"755\":\"67#_2-表单的变动\",\"756\":\"67#html5-之前的表单\",\"757\":\"67#_2-新增表单控件\",\"758\":\"67#_3-新增表单属性\",\"759\":\"67#_4-表单验证反馈\",\"760\":\"67#八种验证类型\",\"761\":\"67#_5-关闭验证\",\"762\":\"67#十四、html-5-拖放\",\"763\":\"67#_1-源对象和目标对象\",\"764\":\"67#_2-拖放相关-api\",\"765\":\"67#_3-datatransfer-对象\",\"766\":\"67#十五、web-storage\",\"767\":\"67#_1-cookie-存储机制的优缺点\",\"768\":\"67#_2-为什么要用-web-storage\",\"769\":\"67#_3-使用-web-storage\",\"770\":\"67#_4-storage-事件\",\"771\":\"67#十六、本地文件读取\",\"772\":\"67#_1-选择文件\",\"773\":\"67#_2-读取文件\",\"774\":\"67@0\",\"775\":\"67@1\",\"776\":\"68\",\"777\":\"68#一、语言基础\",\"778\":\"68#二、变量\",\"779\":\"68#_1-声明变量\",\"780\":\"68#_2-变量的赋值与初始化\",\"781\":\"68#_3-使用-var-声明变量\",\"782\":\"68#重复声明\",\"783\":\"68#遗漏声明\",\"784\":\"68#_4-作用域\",\"785\":\"68#全局作用域\",\"786\":\"68#局部作用域\",\"787\":\"68#三、数据类型\",\"788\":\"68#_1-string\",\"789\":\"68#字符串介绍\",\"790\":\"68#字符串模板\",\"791\":\"68#_2-number\",\"792\":\"68#整数\",\"793\":\"68#实数\",\"794\":\"68#数值范围-扩展\",\"795\":\"68#nan\",\"796\":\"68#_3-boolean\",\"797\":\"68#_4-null\",\"798\":\"68#_5-undefined\",\"799\":\"68#_6-bigint\",\"800\":\"68#_7-symbol\",\"801\":\"68#_8-类型的转换\",\"802\":\"68#四、运算符\",\"803\":\"68#_1-算数运算符\",\"804\":\"68#_2-一元运算符\",\"805\":\"68#赋值运算符\",\"806\":\"68#递增和递减\",\"807\":\"68#_3-逻辑运算符\",\"808\":\"68#_1-与\",\"809\":\"68#_2-或\",\"810\":\"68#_3-非\",\"811\":\"68#_4-比较运算符\",\"812\":\"68#_1-关系运算符\",\"813\":\"68#_2-相等和不相等\",\"814\":\"68#_3-全等和不全等\",\"815\":\"68#_5-三目运算符\",\"816\":\"68#_6-运算符的优先级\",\"817\":\"68#五、流程控制\",\"818\":\"68#_1-条件判断语句\",\"819\":\"68#_2-条件分支语句\",\"820\":\"68#_3-while-循环\",\"821\":\"68#_4-for-循环\",\"822\":\"68#遍历数组\",\"823\":\"68#_5-break-和-continue\",\"824\":\"68#break\",\"825\":\"68#continue\",\"826\":\"68#六、对象\",\"827\":\"68#_1-创建对象\",\"828\":\"68#_2-访问对象属性\",\"829\":\"68#_3-删除对象属性\",\"830\":\"68#_4-对象常用属性和方法\",\"831\":\"68#_5-嵌套对象\",\"832\":\"68#_6-对象的解构\",\"833\":\"68#_7-对象作为函数参数-扩展\",\"834\":\"68#_8-this-关键字\",\"835\":\"68#_9-命名空间-扩展\",\"836\":\"68#_10-速写属性与速写函数\",\"837\":\"68#七、数组\",\"838\":\"68#_1-概念\",\"839\":\"68#_2-创建数组\",\"840\":\"68#构造函数创建数组\",\"841\":\"68#静态方法创建数组\",\"842\":\"68#字面量创建数组\",\"843\":\"68#_3-数组赋值\",\"844\":\"68#_4-访问数组元素\",\"845\":\"68#_5-删除元素\",\"846\":\"68#_6-数组的遍历\",\"847\":\"68#_7-解构数组\",\"848\":\"68#_8-多维数组\",\"849\":\"68#_9-扩展运算符\",\"850\":\"68#八、数组属性和方法\",\"851\":\"68#_1-数组相关属性\",\"852\":\"68#_2-数组相关方法\",\"853\":\"68#添加删除方法\",\"854\":\"68#操作方法\",\"855\":\"68#数组重排序方法\",\"856\":\"68#位置方法\",\"857\":\"68#过滤方法\",\"858\":\"68#九、集合\",\"859\":\"68#_1-什么是集合\",\"860\":\"68#_2-创建集合\",\"861\":\"68#_3-给集合添加值\",\"862\":\"68#_4-集合相关属性和方法\",\"863\":\"68#_5-遍历集合\",\"864\":\"68#_6-集合转数组\",\"865\":\"68#_7-弱集合-扩展\",\"866\":\"68#十、映射\",\"867\":\"68#_1-什么是映射\",\"868\":\"68#_2-创建映射\",\"869\":\"68#_3-映射相关属性和方法\",\"870\":\"68#_4-映射的遍历\",\"871\":\"68#_5-映射转为数组\",\"872\":\"68#_6-弱映射-扩展\",\"873\":\"68#十一、date-对象\",\"874\":\"68#_1-时间戳\",\"875\":\"68#_2-静态方法-扩展\",\"876\":\"68#_3-日期对象构造函数\",\"877\":\"68#_4-实例方法\",\"878\":\"68#十二、math\",\"879\":\"68#_1-属性\",\"880\":\"68#_2-方法\",\"881\":\"68#min-和max\",\"882\":\"68#舍入方法ceil-floor-和round\",\"883\":\"68#随机数方法\",\"884\":\"68#其他方法\",\"885\":\"68#十三、string-对象\",\"886\":\"68#_1-属性-1\",\"887\":\"68#_2-方法-1\",\"888\":\"68#访问特定字符\",\"889\":\"68#字符串操作方法\",\"890\":\"68#字符串位置方法\",\"891\":\"68#获取部分字符串\",\"892\":\"68#字符串大小写转换方法\",\"893\":\"68#字符串补全\",\"894\":\"68#参数可以传递正则表达式的方法\",\"895\":\"68#十四、json\",\"896\":\"68#_1-json-对象转为字符串\",\"897\":\"68#_2-字符串转为-json-对象\",\"898\":\"68#十五、正则表达式\",\"899\":\"68#_1-创建正则表达式对象\",\"900\":\"68#regexp-构造函数构建正则表达式\",\"901\":\"68#字面量构建正则表达式\",\"902\":\"68#_2-元字符\",\"903\":\"68#_3-字符组元字符\",\"904\":\"68#简记\",\"905\":\"68#任意字符\",\"906\":\"68#_4-量词相关元字符\",\"907\":\"68#贪婪模式-扩展\",\"908\":\"68#懒惰模式-扩展\",\"909\":\"68#_5-括号相关元字符\",\"910\":\"68#分组\",\"911\":\"68#捕获\",\"912\":\"68#反向引用-扩展\",\"913\":\"68#非捕获-扩展\",\"914\":\"68#_6-选择相关元字符\",\"915\":\"68#_7-断言相关元字符-扩展\",\"916\":\"68#单词边界\",\"917\":\"68#起始结束\",\"918\":\"68#环视\",\"919\":\"68#_8-模式修正符\",\"920\":\"68#_9-优先级\",\"921\":\"68#_10-局限性\",\"922\":\"68#_11-正则表达式属性和方法\",\"923\":\"68#实例属性\",\"924\":\"68#构造函数属性-扩展\",\"925\":\"68#实例方法\",\"926\":\"68#十六、函数\",\"927\":\"68#_1-声明函数的方式\",\"928\":\"68#构造器声明函数\",\"929\":\"68#函数表达式声明函数\",\"930\":\"68#字面量声明函数\",\"931\":\"68#_2-函数的参数设置\",\"932\":\"68#arguments-参数\",\"933\":\"68#不定参数\",\"934\":\"68#默认参数\",\"935\":\"68#_3-函数的返回值\",\"936\":\"68#_4-作用域问题\",\"937\":\"68#全局作用域-1\",\"938\":\"68#函数作用域\",\"939\":\"68#_5-变量提升\",\"940\":\"68#_6-函数提升\",\"941\":\"68#_7-箭头函数\",\"942\":\"68#箭头函数的优点\",\"943\":\"68#_8-回调函数\",\"944\":\"68#内置回调函数介绍\",\"945\":\"68#迭代方法\",\"946\":\"68#归并方法-扩展\",\"947\":\"68#链式调用\",\"948\":\"68#_9-立即执行函数\",\"949\":\"68#_10-函数属性和方法\",\"950\":\"68#name属性\",\"951\":\"68#length属性\",\"952\":\"68#caller属性-扩展\",\"953\":\"68#callee属性-扩展\",\"954\":\"68#十四、-严格模式\",\"955\":\"68#_1-经典真题\",\"956\":\"68#_2-什么是严格模式\",\"957\":\"68#_3-开启严格模式\",\"958\":\"68#_4-严格模式和普通模式区别\",\"959\":\"68#_5-真题解答\",\"960\":\"68@0\",\"961\":\"68@1\",\"962\":\"69\",\"963\":\"69#一、数据类型的分类和判断\",\"964\":\"69#_1-分类\",\"965\":\"69#基本-值-类型\",\"966\":\"69#对象-引用-类型\",\"967\":\"69#_2-判断总结\",\"968\":\"69#二、数据类型的相互转换\",\"969\":\"69#_1-类型转换规则\",\"970\":\"69#原始-数字\",\"971\":\"69#所有-bool\",\"972\":\"69#原始-字符串\",\"973\":\"69#对象-原始\",\"974\":\"69#_2-数据运算符\",\"975\":\"69#算术运算符-、-、-、\",\"976\":\"69#比较运算符-、-、\",\"977\":\"69#逻辑运算符\",\"978\":\"69#_3-面试题\",\"979\":\"69#三、原始值和引用值的区别\",\"980\":\"69#_1-简单值-原始值\",\"981\":\"69#_2-复杂值-引用值\",\"982\":\"69#_3-访问方式\",\"983\":\"69#_4-比较方式\",\"984\":\"69#_5-动态属性\",\"985\":\"69#_6-变量赋值\",\"986\":\"69#四、let、const、var-的区别\",\"987\":\"69#var-关键字\",\"988\":\"69#let-关键字\",\"989\":\"69#const-关键字\",\"990\":\"69#五、this-的指向\",\"991\":\"69#_1-全局环境中的-this\",\"992\":\"69#_2-上下文对象调用中的-this\",\"993\":\"69#_3-this-指向绑定事件的元素\",\"994\":\"69#_4-改变-this-指向\",\"995\":\"69#call、apply、bind方法修改-this-指向\",\"996\":\"69#_2-箭头函数的-this-指向\",\"997\":\"69#六、数据-变量-内存的理解\",\"998\":\"69#_1-什么是数据\",\"999\":\"69#_2-什么是变量\",\"1000\":\"69#_3-什么是内存\",\"1001\":\"69#_4-内存-数据-变量三者之间的关系\",\"1002\":\"69#七、js-引擎如何管理内存\",\"1003\":\"69@0\",\"1004\":\"69@1\",\"1005\":\"70\",\"1006\":\"70#一、原型与原型链\",\"1007\":\"70#_1-成分组成\",\"1008\":\"70#_2-显式原型与隐式原型的关系\",\"1009\":\"70#_3-原型链\",\"1010\":\"70#_4-出现原因\",\"1011\":\"70#二、执行上下文与执行上下文栈\",\"1012\":\"70#_1-声明提前现象\",\"1013\":\"70#_2-执行上下文的理解\",\"1014\":\"70#_3-生命周期\",\"1015\":\"70#_4-执行上下文创建和执行的过程\",\"1016\":\"70#三、作用域与作用域链\",\"1017\":\"70#_1-概念理解\",\"1018\":\"70#_2-分类\",\"1019\":\"70#_3-作用\",\"1020\":\"70#_4-区别作用域与执行上下文\",\"1021\":\"70#_5-面试题\",\"1022\":\"70#四、闭包\",\"1023\":\"70#_1-概念理解-1\",\"1024\":\"70#_2-作用\",\"1025\":\"70#_3-一个简单的闭包程序\",\"1026\":\"70#五、内存溢出与内存泄露\",\"1027\":\"70#_1-什么是内存泄露\",\"1028\":\"70#_2-javascript-中的垃圾回收\",\"1029\":\"70#_3-标记清除\",\"1030\":\"70#_4-引用计数\",\"1031\":\"70#_5-真题解答\",\"1032\":\"70#六、高阶函数\",\"1033\":\"70#_1-概念\",\"1034\":\"70#_2-函数防抖与函数节流\",\"1035\":\"70#函数防抖-debounce\",\"1036\":\"70#函数节流-throttle\",\"1037\":\"70#区别\",\"1038\":\"70#_3-分时函数\",\"1039\":\"70#_4-柯里化\",\"1040\":\"70#_5-函数管道\",\"1041\":\"70@0\",\"1042\":\"70@1\",\"1043\":\"71\",\"1044\":\"71#一、创建对象\",\"1045\":\"71#_1-object-构造函数模式\",\"1046\":\"71#_2-对象字面量模式\",\"1047\":\"71#_3-工厂函数模式-不常用\",\"1048\":\"71#_4-自定义构造函数模式\",\"1049\":\"71#_5-构造函数-原型的组合模式\",\"1050\":\"71#二、对象与原型的相关方法\",\"1051\":\"71#_1-object-的-api\",\"1052\":\"71#object-is\",\"1053\":\"71#object-assign\",\"1054\":\"71#object-getownpropertynames-的枚举顺序\",\"1055\":\"71#object-setprototypeof\",\"1056\":\"71#object-getprototypeof\",\"1057\":\"71#object-fromentries\",\"1058\":\"71#object-entries\",\"1059\":\"71#object-defineproperty\",\"1060\":\"71#object-defineproperties\",\"1061\":\"71#keys、values、entries\",\"1062\":\"71#_2-原型相关属性和方法\",\"1063\":\"71#prototype-和-proto\",\"1064\":\"71#constructor\",\"1065\":\"71#instanceof-操作符\",\"1066\":\"71#isprototypeof\",\"1067\":\"71#hasownproperty\",\"1068\":\"71#三、继承模式\",\"1069\":\"71#_1-原型链继承\",\"1070\":\"71#_2-借用构造函数-假\",\"1071\":\"71#_3-组合继承\",\"1072\":\"71#_4-圣杯模式\",\"1073\":\"71#_5-new-操作符都做了哪些事\",\"1074\":\"71@0\",\"1075\":\"71@1\",\"1076\":\"72\",\"1077\":\"72#一、浏览器引入-javascript\",\"1078\":\"72#_1-直接在-html-文件中引入\",\"1079\":\"72#_2-调用外部-javascript-文件\",\"1080\":\"72#_3-使用-a-标记的-href-属性\",\"1081\":\"72#_4-事件里面直接书写-javascript-代码\",\"1082\":\"72#二、bom-基本介绍\",\"1083\":\"72#_1-什么是-bom\",\"1084\":\"72#_2-bom-与-dom-的关系\",\"1085\":\"72#三、window-对象\",\"1086\":\"72#_1-window-对象基本介绍\",\"1087\":\"72#_2-常见属性\",\"1088\":\"72#_3-常用方法\",\"1089\":\"72#四、navigator-对象\",\"1090\":\"72#_1-navigator-对象介绍\",\"1091\":\"72#_2-navigator-对象属性\",\"1092\":\"72#五、location-对象\",\"1093\":\"72#_1-常见属性\",\"1094\":\"72#_2-常见方法\",\"1095\":\"72#六、history-对象\",\"1096\":\"72#_1-常见属性-1\",\"1097\":\"72#_2-常见方法-1\",\"1098\":\"72#七、screen-对象\",\"1099\":\"72#八、geolocation\",\"1100\":\"72#_1-geolocation-的应用场景\",\"1101\":\"72#_2-位置信息的表示方式\",\"1102\":\"72#_3-使用-geolocation-api\",\"1103\":\"72#九、notification\",\"1104\":\"72#_1-为什么需要-notification\",\"1105\":\"72#_2-使用-notification-来实现用户通知\",\"1106\":\"72@0\",\"1107\":\"72@1\",\"1108\":\"73\",\"1109\":\"73#一、document-object-model-文档对象模型。\",\"1110\":\"73#二、-节点\",\"1111\":\"73#_1-文档节点-document\",\"1112\":\"73#_2-元素节点-element\",\"1113\":\"73#_3-属性节点-attribute\",\"1114\":\"73#_4-文本节点-text\",\"1115\":\"73#三、-dom-对-html-的增删改\",\"1116\":\"73#创建元素节点对象\",\"1117\":\"73#创建文本节点对象\",\"1118\":\"73#将某节点设置为另一节点的子节点\",\"1119\":\"73#在指定的子节点前插入新的子节点\",\"1120\":\"73#文档碎片\",\"1121\":\"73#可以删除一个子节点\",\"1122\":\"73#使用指定的子节点替换已有的子节点\",\"1123\":\"73#克隆节点\",\"1124\":\"73#使用-innerhtml-完成-dom-的增删改的相关操作\",\"1125\":\"73#四、-dom-操作属性和类\",\"1126\":\"73#五、-dom-修改元素的样式\",\"1127\":\"73#方式一-元素-style-样式名-新的样式值\",\"1128\":\"73#方式二-元素-currentstyle-样式名\",\"1129\":\"73#方式三-getcomputedstyle-使用这个方法来获取元素当前的样式\",\"1130\":\"73#方式四-document-stylesheets-来获取到一个网页中所有样式表的引用。\",\"1131\":\"73#六、一些-api-的记录\",\"1132\":\"73#_1-page-visible-api\",\"1133\":\"73@0\",\"1134\":\"73@1\",\"1135\":\"74\",\"1136\":\"74#一、事件与事件流\",\"1137\":\"74#_1-事件介绍\",\"1138\":\"74#_2-事件流介绍\",\"1139\":\"74#_3-事件冒泡\",\"1140\":\"74#_4-事件捕获\",\"1141\":\"74#_5-dom-事件流\",\"1142\":\"74#二、事件监听器\",\"1143\":\"74#_1-html-事件监听器\",\"1144\":\"74#_2-dom-0-级事件监听器\",\"1145\":\"74#_3-dom-2-级事件监听器\",\"1146\":\"74#_4-删除事件监听器\",\"1147\":\"74#三、事件类型\",\"1148\":\"74#_1-鼠标事件\",\"1149\":\"74#_2-键盘事件\",\"1150\":\"74#_3-页面事件\",\"1151\":\"74#四、事件对象\",\"1152\":\"74#_1-通用的事件对象属性\",\"1153\":\"74#_2-鼠标事件的事件对象\",\"1154\":\"74#_3-键盘事件的事件对象\",\"1155\":\"74#_4-阻止冒泡\",\"1156\":\"74#_5-阻止默认行为\",\"1157\":\"74#_6-事件流-扩展\",\"1158\":\"74#五、事件委托\",\"1159\":\"74#六、剪贴板事件\",\"1160\":\"74#_1-剪贴板事件基本介绍\",\"1161\":\"74#_2-对象方法\",\"1162\":\"74#_3-实际应用\",\"1163\":\"74#七、一些-event-的记录\",\"1164\":\"74@0\",\"1165\":\"74@1\",\"1166\":\"75\",\"1167\":\"75#一、线程与进程\",\"1168\":\"75#_1-进程\",\"1169\":\"75#_2-线程\",\"1170\":\"75#_3-关系\",\"1171\":\"75#二、浏览器内核模块组成\",\"1172\":\"75#_1-主线程-渲染\",\"1173\":\"75#_2-分线程-浏览器执行-不一定在同一进程中\",\"1174\":\"75#三、js-线程\",\"1175\":\"75#四、定时器问题\",\"1176\":\"75#五、事件处理机制\",\"1177\":\"75#_1-代码分类\",\"1178\":\"75#_2-js-引擎执行代码基本流程\",\"1179\":\"75#_3-模型的-2-个重要组成部分\",\"1180\":\"75#_4-模型的运转流程\",\"1181\":\"75#_5-任务存在优先级么\",\"1182\":\"75#六、h5-web-workers\",\"1183\":\"75@0\",\"1184\":\"75@1\",\"1185\":\"76\",\"1186\":\"76#generator和yield的基本使用\",\"1187\":\"76#async和await\",\"1188\":\"76#练习\",\"1189\":\"76#总结\",\"1190\":\"76@0\",\"1191\":\"76@1\",\"1192\":\"77\",\"1193\":\"77#一、jquery-简介\",\"1194\":\"77#_1-什么是-jquery\",\"1195\":\"77#_2-jquery-的特点\",\"1196\":\"77#_3-jquery-的版本\",\"1197\":\"77#二、jquery-核心方法\",\"1198\":\"77#_1-jquery-方法\",\"1199\":\"77#_2-each-方法\",\"1200\":\"77#_3-document-ready-方法\",\"1201\":\"77#_4-extend-方法\",\"1202\":\"77#_5-其他常用属性和方法\",\"1203\":\"77#三、jquery-选择器\",\"1204\":\"77#四、jquery-的筛选方法\",\"1205\":\"77#五、jquery-中操作属性的方法\",\"1206\":\"77#六、jquery-中操作-css-的方法\",\"1207\":\"77#offset-和-position\",\"1208\":\"77#七、jquery-的文档处理方法\",\"1209\":\"77#_1-增加节点\",\"1210\":\"77#_2-替换节点\",\"1211\":\"77#_3-删除节点\",\"1212\":\"77#_4-包裹\",\"1213\":\"77#_5-clone\",\"1214\":\"77#八、-jquery-的事件处理\",\"1215\":\"77#_1-ready-方法\",\"1216\":\"77#_2-on-和-off\",\"1217\":\"77#_3-hover\",\"1218\":\"77#_4-其他的事件处理方法\",\"1219\":\"77#_5-jquery-中的-event-对象\",\"1220\":\"77#九、实现动画的方法\",\"1221\":\"77#_1-show、hide、toggle\",\"1222\":\"77#_2-slidedown、slideup、slidetoggle\",\"1223\":\"77#_3-fadein、fadeout、fadeto、fadetoggle\",\"1224\":\"77#_4-animate\",\"1225\":\"77#_5-停止动画\",\"1226\":\"77#十、-jquery-的-ajax-方法\",\"1227\":\"77#_1-ajax-方法\",\"1228\":\"77#_2-get-方法\",\"1229\":\"77#_3-post-方法\",\"1230\":\"77#_4-load-方法\",\"1231\":\"77#_5-serialize-和-serializearray-方法\",\"1232\":\"77#十一、jquery-的链式调用\",\"1233\":\"77#十二、jquery-性能优化\",\"1234\":\"77#_1-总是从-id-选择器开始继承\",\"1235\":\"77#_2-尽量在-class-前面加上元素名\",\"1236\":\"77#_3-尽量使用-id-选择器替代-class-选择器\",\"1237\":\"77#_4-在适当的时候选择链式操作\",\"1238\":\"77#_5-将-jquery-对象缓存起来使用-并在变量名前面加上\",\"1239\":\"77#_6-限制直接操作-dom-的次数\",\"1240\":\"77#_7-js-代码尽量推迟到-window-onload-事件中进行\",\"1241\":\"77#_8-尽量使用事件委托机制\",\"1242\":\"77#_9-使用事件委托时用-delegate-或-on-来替代-live\",\"1243\":\"77#_10-能使用子代选择器就不要使用后代选择器\",\"1244\":\"77@0\",\"1245\":\"77@1\",\"1246\":\"78\",\"1247\":\"78#一、sass-简介\",\"1248\":\"78#二、sass-与-css-写法的差异\",\"1249\":\"78#_1-sass-语法格式\",\"1250\":\"78#_2-scss-语法格式\",\"1251\":\"78#三、前置知识\",\"1252\":\"78#_1-error\",\"1253\":\"78#_2-warn\",\"1254\":\"78#_3-debug\",\"1255\":\"78#_4-注释\",\"1256\":\"78#_5-嵌套\",\"1257\":\"78#属性嵌套\",\"1258\":\"78#四、变量\",\"1259\":\"78#_1-使用场合\",\"1260\":\"78#_2-默认变量\",\"1261\":\"78#_3-全局变量和局部变量\",\"1262\":\"78#_4-插值\",\"1263\":\"78#五、数据类型\",\"1264\":\"78#_1-number\",\"1265\":\"78#_2-string\",\"1266\":\"78#_3-color\",\"1267\":\"78#_4-list\",\"1268\":\"78#访问某个元素\",\"1269\":\"78#遍历列表\",\"1270\":\"78#追加元素\",\"1271\":\"78#查找元素的索引\",\"1272\":\"78#列表的不可变性\",\"1273\":\"78#参数列表\",\"1274\":\"78#_5-boolean\",\"1275\":\"78#_6-null\",\"1276\":\"78#_7-map\",\"1277\":\"78#访问-map-的值\",\"1278\":\"78#遍历-map\",\"1279\":\"78#修改-map\",\"1280\":\"78#合并-map\",\"1281\":\"78#不可变性\",\"1282\":\"78#_8-function\",\"1283\":\"78#六、流程控制\",\"1284\":\"78#_1-if-else\",\"1285\":\"78#_2-for\",\"1286\":\"78#_3-while\",\"1287\":\"78#_4-each\",\"1288\":\"78#遍历-list\",\"1289\":\"78#遍历-map-1\",\"1290\":\"78#解构-list-中的-list\",\"1291\":\"78#七、混合宏-mixin\",\"1292\":\"78#_1-声明混合宏\",\"1293\":\"78#_2-调用混合宏\",\"1294\":\"78#_3-混合宏的参数-传一个不带值的参数\",\"1295\":\"78#_4-混合宏的参数-传一个带值的参数\",\"1296\":\"78#_5-混合宏的参数-传多个参数\",\"1297\":\"78#八、继承-extend\",\"1298\":\"78#九、占位符\",\"1299\":\"78#十、使用分析\",\"1300\":\"78#十一、sass-的模块化\",\"1301\":\"78#_1-use\",\"1302\":\"78#使用成员\",\"1303\":\"78#自定义命名空间名称\",\"1304\":\"78#去除命名空间\",\"1305\":\"78#私有成员\",\"1306\":\"78#引入时的配置\",\"1307\":\"78#使用-mixin\",\"1308\":\"78#查找模块\",\"1309\":\"78#_2-forward\",\"1310\":\"78#转发时添加前缀\",\"1311\":\"78#控制成员可见性\",\"1312\":\"78#转发时配置模块的成员\",\"1313\":\"78#_3-import\",\"1314\":\"78#嵌套的-import\",\"1315\":\"78#在-sass-中导入-css-并编译\",\"1316\":\"78#纯-css-导入语句-不编译\",\"1317\":\"78#import-中使用插值\",\"1318\":\"78#import-与模块\",\"1319\":\"78#只供-import-使用的文件-import-only-files\",\"1320\":\"78#使用-import-导入时配置模块成员\",\"1321\":\"78@0\",\"1322\":\"78@1\",\"1323\":\"79\",\"1324\":\"79#一、简介\",\"1325\":\"79#二、注释\",\"1326\":\"79#三、变量\",\"1327\":\"79#_1-基本使用\",\"1328\":\"79#_2-变量插值\",\"1329\":\"79#_3-延迟加载\",\"1330\":\"79#_4-属性名变量\",\"1331\":\"79#四、嵌套\",\"1332\":\"79#五、父选择器\",\"1333\":\"79#六、混合-mixins\",\"1334\":\"79#_1-普通混合\",\"1335\":\"79#_2-带参数的混合\",\"1336\":\"79#_3-命名参数\",\"1337\":\"79#_4-匹配模式\",\"1338\":\"79#七、运算\",\"1339\":\"79#八、继承\",\"1340\":\"79#extend-all\",\"1341\":\"79#九、避免编译\",\"1342\":\"79@0\",\"1343\":\"79@1\",\"1344\":\"80\",\"1345\":\"80#一、vue-核心\",\"1346\":\"80#_1-mvvm-模型\",\"1347\":\"80#_1-m-模型-model\",\"1348\":\"80#_2-v-视图-view\",\"1349\":\"80#_3-vm-视图模型-viewmodel\",\"1350\":\"80#_4-初识-vue\",\"1351\":\"80#_2-vue-模板写法\",\"1352\":\"80#_1-插值语法\",\"1353\":\"80#_2-指令语法\",\"1354\":\"80#_3-数据绑定\",\"1355\":\"80#_1-单向绑定-v-bind\",\"1356\":\"80#_2-双向绑定-v-model\",\"1357\":\"80#_3-收集表单数据\",\"1358\":\"80#_4-父子间通信\",\"1359\":\"80#_4-el-与-data-的两种写法\",\"1360\":\"80#_1-el-的-2-种写法\",\"1361\":\"80#_2-data-的-2-种写法\",\"1362\":\"80#_3-重要原则\",\"1363\":\"80#_5-数据代理\",\"1364\":\"80#_1-object-defineproperty-方法\",\"1365\":\"80#_2-数据代理\",\"1366\":\"80#_3-vue-中的数据代理\",\"1367\":\"80#_6-事件处理\",\"1368\":\"80#_1-绑定事件\",\"1369\":\"80#_2-事件修饰符\",\"1370\":\"80#_3-键盘事件\",\"1371\":\"80#_7-计算属性\",\"1372\":\"80#_1-定义\",\"1373\":\"80#_2-原理\",\"1374\":\"80#_3-优势\",\"1375\":\"80#_4-计算属性中-get-函数什么时候执行\",\"1376\":\"80#_5-使用\",\"1377\":\"80#_8-侦听-监视-属性\",\"1378\":\"80#_1-侦听的不同配置项\",\"1379\":\"80#_2-深度监视\",\"1380\":\"80#_3-两种不同写法与简写形式\",\"1381\":\"80#_9-computed-和-watch-之间的区别\",\"1382\":\"80#_1-区别\",\"1383\":\"80#_2-两个重要的原则\",\"1384\":\"80#_10-绑定样式\",\"1385\":\"80#_1-class-样式\",\"1386\":\"80#_2-style-样式\",\"1387\":\"80#_11-条件渲染\",\"1388\":\"80#_1-v-if\",\"1389\":\"80#_2-v-show\",\"1390\":\"80#_3-注意\",\"1391\":\"80#_12-列表渲染\",\"1392\":\"80#_1-基本使用\",\"1393\":\"80#_2-列表过滤\",\"1394\":\"80#_3-key-的原理\",\"1395\":\"80#_4-列表排序\",\"1396\":\"80#_5-vue-监视数据的原理\",\"1397\":\"80#_13-过滤器\",\"1398\":\"80#_14-一些其他的内置指令\",\"1399\":\"80#_1-v-text\",\"1400\":\"80#_2-v-html\",\"1401\":\"80#_3-v-cloak-没有值\",\"1402\":\"80#_4-v-once-没有值\",\"1403\":\"80#_5-v-pre-没有值\",\"1404\":\"80#_15-现有指令总结\",\"1405\":\"80#_16-自定义指令\",\"1406\":\"80#_1-定义语法\",\"1407\":\"80#_2-配置对象中常用的-3-个回调\",\"1408\":\"80#_3-备注\",\"1409\":\"80#_17-vue-的生命周期\",\"1410\":\"80#_1-常用的生命周期钩子\",\"1411\":\"80#_2-关于销毁-vue-实例\",\"1412\":\"80#二、-组件化编程\",\"1413\":\"80#_1-为什么要使用组件化编程\",\"1414\":\"80#_2-基本使用\",\"1415\":\"80#_1-定义组件-创建组件\",\"1416\":\"80#_2-注册组件\",\"1417\":\"80#_3-使用组件-写组件标签\",\"1418\":\"80#_3-几个注意点\",\"1419\":\"80#_1-组件名\",\"1420\":\"80#_2-关于组件标签\",\"1421\":\"80#_3-创建组件的简写方式\",\"1422\":\"80#_4-组件的嵌套\",\"1423\":\"80#_5-关于-vuecomponent\",\"1424\":\"80#_6-vuecomponent和vue的关系\",\"1425\":\"80#三、-vue-脚手架\",\"1426\":\"80#_1-安装\",\"1427\":\"80#_2-目录结构\",\"1428\":\"80#_3-ref-属性\",\"1429\":\"80#_4-props-配置项\",\"1430\":\"80#相关的-api\",\"1431\":\"80#_5-mixin-混入\",\"1432\":\"80#_6-plugins-插件\",\"1433\":\"80#_7-scoped-样式\",\"1434\":\"80#_8-lang-属性\",\"1435\":\"80#_9-组件化编码流程\",\"1436\":\"80#_10-webstorage\",\"1437\":\"80#_11-组件的自定义事件\",\"1438\":\"80#_12-全局事件总线-globaleventbus\",\"1439\":\"80#_13-消息订阅与发布-pubsub\",\"1440\":\"80#_14-vue-nexttick\",\"1441\":\"80#_15-vue-封装的过渡与动画\",\"1442\":\"80#四、-vue-中的-ajax\",\"1443\":\"80#_1-vue-脚手架配置代理\",\"1444\":\"80#方法一\",\"1445\":\"80#方法二\",\"1446\":\"80#_2-slot-插槽\",\"1447\":\"80#五、-vuex\",\"1448\":\"80#_1-概念\",\"1449\":\"80#_2-何时使用\",\"1450\":\"80#_3-搭建-vuex-环境\",\"1451\":\"80#_4-基本使用\",\"1452\":\"80#_5-getters-的使用\",\"1453\":\"80#_6-四个-map-方法的使用\",\"1454\":\"80#_7-模块化-命名空间\",\"1455\":\"80#六、-路由\",\"1456\":\"80#_1-基本使用-1\",\"1457\":\"80#_2-几个注意点\",\"1458\":\"80#_3-嵌套路由-多级路由\",\"1459\":\"80#_4-路由的-query-参数\",\"1460\":\"80#_5-命名路由\",\"1461\":\"80#_6-路由的-params-参数\",\"1462\":\"80#_7-路由的-props-配置\",\"1463\":\"80#_8-router-link-的-replace-属性\",\"1464\":\"80#_9-编程式路由导航\",\"1465\":\"80#_10-缓存路由组件\",\"1466\":\"80#_11-两个新的生命周期钩子\",\"1467\":\"80#_12-路由守卫\",\"1468\":\"80#_13-路由器的两种工作模式\",\"1469\":\"80#七、vue-ui-组件库\",\"1470\":\"80#_1-移动端常用-ui-组件库\",\"1471\":\"80#_2-pc-端常用-ui-组件库\",\"1472\":\"80@0\",\"1473\":\"80@1\",\"1474\":\"81\",\"1475\":\"81#vue3-简介\",\"1476\":\"81#vue3-带来了什么\",\"1477\":\"81#_1-性能的提升\",\"1478\":\"81#_2-源码的升级\",\"1479\":\"81#_3-拥抱-typescript\",\"1480\":\"81#_4-新的特性\",\"1481\":\"81#一、创建-vue3-0-工程\",\"1482\":\"81#_1-使用-vue-cli-创建\",\"1483\":\"81#_2-使用-vite-创建\",\"1484\":\"81#_3-vue3-的-main-js\",\"1485\":\"81#二、常用-composition-api\",\"1486\":\"81#_1-拉开序幕的-setup\",\"1487\":\"81#_2-ref-函数\",\"1488\":\"81#_3-reactive-函数\",\"1489\":\"81#_4-vue3-0-中的响应式原理\",\"1490\":\"81#vue2-x-的响应式\",\"1491\":\"81#vue3-0-的响应式\",\"1492\":\"81#_5-reactive-对比-ref\",\"1493\":\"81#_6-setup-的两个注意点\",\"1494\":\"81#_7-slot-插槽\",\"1495\":\"81#_8-计算属性与监视\",\"1496\":\"81#_1-computed-函数\",\"1497\":\"81#_2-watch-函数\",\"1498\":\"81#_3-watcheffect-函数\",\"1499\":\"81#_4-ref-属性的问题\",\"1500\":\"81#_9-生命周期\",\"1501\":\"81#_10-自定义-hook-函数\",\"1502\":\"81#_11-toref\",\"1503\":\"81#三、其它-composition-api\",\"1504\":\"81#_1-shallowreactive-与-shallowref\",\"1505\":\"81#_2-readonly-与-shallowreadonly\",\"1506\":\"81#_3-toraw-与-markraw\",\"1507\":\"81#_4-customref\",\"1508\":\"81#_5-provide-与-inject\",\"1509\":\"81#_6-响应式数据的判断\",\"1510\":\"81#四、composition-api-的优势\",\"1511\":\"81#_1-options-api-存在的问题\",\"1512\":\"81#_2-composition-api-的优势\",\"1513\":\"81#五、新的组件\",\"1514\":\"81#_1-fragment\",\"1515\":\"81#_2-teleport\",\"1516\":\"81#_3-suspense\",\"1517\":\"81#六、其他\",\"1518\":\"81#_1-全局-api-的转移\",\"1519\":\"81#_2-其他改变\",\"1520\":\"81@0\",\"1521\":\"81@1\",\"1522\":\"82\",\"1523\":\"82@0\",\"1524\":\"82@1\",\"1525\":\"83\",\"1526\":\"83#一、浏览器是如何渲染页面的\",\"1527\":\"83#二、什么是-reflow\",\"1528\":\"83#三、什么是-repaint\",\"1529\":\"83#四、为什么-transform-的效率高\",\"1530\":\"83#五、浏览器输入-url-地址之后\",\"1531\":\"83@0\",\"1532\":\"83@1\",\"1533\":\"84\",\"1534\":\"84#来自服务器的缓存指令\",\"1535\":\"84#来自客户端的缓存指令\",\"1536\":\"84#缓存有效\",\"1537\":\"84#缓存无效\",\"1538\":\"84#细节\",\"1539\":\"84#cache-control\",\"1540\":\"84#expires\",\"1541\":\"84#记录缓存时的有效期\",\"1542\":\"84#pragma\",\"1543\":\"84#使用-hash-或版本号\",\"1544\":\"84#服务器视角\",\"1545\":\"84#浏览器视角\",\"1546\":\"84@0\",\"1547\":\"84@1\",\"1548\":\"85\",\"1549\":\"85@0\",\"1550\":\"85@1\",\"1551\":\"86\",\"1552\":\"86#一、浏览器的进程模型\",\"1553\":\"86#_1-何为进程\",\"1554\":\"86#_2-何为线程\",\"1555\":\"86#_3-浏览器有哪些进程和线程\",\"1556\":\"86#二、渲染主线程是如何工作的\",\"1557\":\"86#三、若干解释\",\"1558\":\"86#何为异步\",\"1559\":\"86#js-为何会阻碍渲染\",\"1560\":\"86#任务有优先级吗\",\"1561\":\"86@0\",\"1562\":\"86@1\",\"1563\":\"87\",\"1564\":\"88\",\"1565\":\"88@0\",\"1566\":\"88@1\",\"1567\":\"89\",\"1568\":\"89#一、用户代理\",\"1569\":\"89#_1-自动发出请求的能力\",\"1570\":\"89#_2-自动解析响应的能力\",\"1571\":\"89#_3-基本流程\",\"1572\":\"89#二、ajax\",\"1573\":\"89#_1-express-的简单使用\",\"1574\":\"89#_2-原生-ajax-的实现\",\"1575\":\"89#_1-服务端的基本流程\",\"1576\":\"89#_2-get-请求\",\"1577\":\"89#_3-post-请求\",\"1578\":\"89#_4-服务端响应-json-格式的数据\",\"1579\":\"89#_5-ie-缓存问题\",\"1580\":\"89#_6-超时与网络异常\",\"1581\":\"89#_7-取消请求\",\"1582\":\"89#_8-重复请求问题\",\"1583\":\"89#_3-axios-ajax-的实现\",\"1584\":\"89#_1-get-请求\",\"1585\":\"89#_2-post-请求\",\"1586\":\"89#_3-通用方法\",\"1587\":\"89#_4-fetch-ajax-的实现\",\"1588\":\"89#三、实战\",\"1589\":\"89#_1-请求并获取响应数据\",\"1590\":\"89#_2-上传文件并监控进度\",\"1591\":\"89#准备工作-启动本地文件上传服务器\",\"1592\":\"89#上传接口\",\"1593\":\"89#_3-登录和鉴权\",\"1594\":\"89#接口参考\",\"1595\":\"89#思考\",\"1596\":\"89@0\",\"1597\":\"89@1\",\"1598\":\"90\",\"1599\":\"90#一、同源策略及跨域问题\",\"1600\":\"90#_1-同源和异源\",\"1601\":\"90#_2-跨域出现的场景\",\"1602\":\"90#_3-网络中的跨域\",\"1603\":\"90#_4-浏览器如何限制异源请求\",\"1604\":\"90#二、解决方案\",\"1605\":\"90#_1-cors\",\"1606\":\"90#请求分类\",\"1607\":\"90#简单请求\",\"1608\":\"90#预检请求-preflight\",\"1609\":\"90#练习\",\"1610\":\"90#对简单请求的验证\",\"1611\":\"90#对预检请求的验证\",\"1612\":\"90#细节-1-关于-cookie\",\"1613\":\"90#细节-2-关于跨域获取响应头\",\"1614\":\"90#_2-jsonp\",\"1615\":\"90#_3-代理\",\"1616\":\"90#_4-如何选择\",\"1617\":\"90@0\",\"1618\":\"90@1\",\"1619\":\"91\",\"1620\":\"91#一、分层模型\",\"1621\":\"91#_1-分层的意义\",\"1622\":\"91#_2-五层网络模型\",\"1623\":\"91#_3-数据的传输\",\"1624\":\"91#_4-四层、五层、七层\",\"1625\":\"91#二、应用层协议\",\"1626\":\"91#_1-url\",\"1627\":\"91#_2-http\",\"1628\":\"91#_1-传递消息的模式\",\"1629\":\"91#_2-传递消息的格式\",\"1630\":\"91#_3-试一试\",\"1631\":\"91#_4-熟悉关键信息\",\"1632\":\"91#请求方法\",\"1633\":\"91#请求头-host\",\"1634\":\"91#请求头-content-type\",\"1635\":\"91#响应码\",\"1636\":\"91#响应头-content-type\",\"1637\":\"91#三、答疑环节\",\"1638\":\"91#长连接\",\"1639\":\"91#url-编码\",\"1640\":\"91#ssr-和-csr\",\"1641\":\"91@0\",\"1642\":\"91@1\",\"1643\":\"92\",\"1644\":\"92#一、websocket-基础知识\",\"1645\":\"92#_1-短轮询-short-polling\",\"1646\":\"92#_2-长轮询-long-polling\",\"1647\":\"92#_3-websocket\",\"1648\":\"92#_4-握手\",\"1649\":\"92#二、面试题\",\"1650\":\"92#三、常用库\",\"1651\":\"92@0\",\"1652\":\"92@1\",\"1653\":\"93\",\"1654\":\"93#一、导入数据集\",\"1655\":\"93#_1-处理数据集\",\"1656\":\"93#_2-集成的数据集\",\"1657\":\"93#二、优化算法\",\"1658\":\"93#_1-训练优化中的问题\",\"1659\":\"93#_2-优化算法\",\"1660\":\"93#三、网络层结构\",\"1661\":\"93#_1-展平层\",\"1662\":\"93#_2-卷积层\",\"1663\":\"93#_3-池化层\",\"1664\":\"93#_4-dropout\",\"1665\":\"93#_5-batchnorm\",\"1666\":\"93#_6-relu\",\"1667\":\"93#_7-反卷积层\",\"1668\":\"93#四、参数访问\",\"1669\":\"93#_1-named-parameters-或parameters\",\"1670\":\"93#_2-model-layer-weight\",\"1671\":\"93#_3-state-dict\",\"1672\":\"93#五、保存和读取模型参数\",\"1673\":\"93#_1-保存和读取\",\"1674\":\"93#_2-查看数据结构\",\"1675\":\"93#六、gpu-相关\",\"1676\":\"93#_1-将模型参数放在-gpu\",\"1677\":\"93#_2-切换模型模式\",\"1678\":\"93#七、注意力机制\",\"1679\":\"93#八、一些通用函数\",\"1680\":\"93#_1-训练函数\",\"1681\":\"93@0\",\"1682\":\"93@1\",\"1683\":\"94\",\"1684\":\"94#一、-看题顺序\",\"1685\":\"94#二、阅读技巧\",\"1686\":\"94#_1-总分结构\",\"1687\":\"94#背景引入\",\"1688\":\"94#举例说明\",\"1689\":\"94#原因解释\",\"1690\":\"94#正反论证\",\"1691\":\"94#观点援引\",\"1692\":\"94#_2-并列结构\",\"1693\":\"94#_3-其他关注\",\"1694\":\"94#三、具体题型\",\"1695\":\"94#_1-中心理解\",\"1696\":\"94#_2-标题填入\",\"1697\":\"94#_3-语句填空\",\"1698\":\"94#_4-接语选择\",\"1699\":\"94#_5-语句排序\",\"1700\":\"94#_6-词句理解\",\"1701\":\"94#_7-细节判断\",\"1702\":\"94#_8-逻辑填空\",\"1703\":\"94#_9-篇章阅读\",\"1704\":\"94#四、日常积累\",\"1705\":\"94#_1-相近成语\",\"1706\":\"94@0\",\"1707\":\"94@1\",\"1708\":\"95\",\"1709\":\"95#一、-速算技巧\",\"1710\":\"95#_1-加法技巧\",\"1711\":\"95#尾数法\",\"1712\":\"95#高位叠加\",\"1713\":\"95#_2-减法技巧\",\"1714\":\"95#整数基准值\",\"1715\":\"95#分段法\",\"1716\":\"95#_3-乘法技巧\",\"1717\":\"95#百分互换\",\"1718\":\"95#乘法拆分\",\"1719\":\"95#_4-除法技巧\",\"1720\":\"95#拆分法\",\"1721\":\"95#直除法\",\"1722\":\"95#_5-415-份数法\",\"1723\":\"95#_6-假设分配法\",\"1724\":\"95#二、abrx\",\"1725\":\"95#_1-基本概念\",\"1726\":\"95#_2-基期考法\",\"1727\":\"95#_3-现期考法\",\"1728\":\"95#_4-增长率\",\"1729\":\"95#_5-增长量\",\"1730\":\"95#三、比重\",\"1731\":\"95#_1-单期比重之现期比重\",\"1732\":\"95#_2-单期比重之基期比重\",\"1733\":\"95#_3-单期比重之隔级比重\",\"1734\":\"95#_4-两期比重变化之比重趋势\",\"1735\":\"95#_5-两期比重比较之比重差\",\"1736\":\"95#四、比较类\",\"1737\":\"95#_1-比值大小比较\",\"1738\":\"95#_2-增量大小比较\",\"1739\":\"95#五、盐水类\",\"1740\":\"95#_1-盐水题目识别特征\",\"1741\":\"95#_2-三浓度排序\",\"1742\":\"95#_3-已知-3a-求量之比\",\"1743\":\"95#_4-已知-2a-和量之比求第三-a\",\"1744\":\"95#六、平均倍数类\",\"1745\":\"95#_1-平均数\",\"1746\":\"95#_2-倍数\",\"1747\":\"95#_3-年均增长量\",\"1748\":\"95#_4-年均增长率\",\"1749\":\"95#七、特殊题型\",\"1750\":\"95#_1-拉动增长和增量贡献率\",\"1751\":\"95#_2-容斥问题\",\"1752\":\"95#八、常见思维陷阱\",\"1753\":\"95#九、整体总结\",\"1754\":\"95@0\",\"1755\":\"95@1\",\"1756\":\"96\",\"1757\":\"96#一、定义判断\",\"1758\":\"96#二、类比推理\",\"1759\":\"96#三、图形推理\",\"1760\":\"96#四、逻辑判断\",\"1761\":\"96#_1-逻辑论证\",\"1762\":\"96#_2-翻译推理\",\"1763\":\"96#_3-分析推理\",\"1764\":\"96@0\",\"1765\":\"96@1\",\"1766\":\"97\",\"1767\":\"97#题目描述\",\"1768\":\"97#测试用例\",\"1769\":\"97#代码\",\"1770\":\"97@0\",\"1771\":\"97@1\",\"1772\":\"98\",\"1773\":\"98@0\",\"1774\":\"98@1\",\"1775\":\"99\",\"1776\":\"99#一、promise-规范\",\"1777\":\"99#二、手写-promise\",\"1778\":\"99#三、promise-all\",\"1779\":\"99#四、面试题\",\"1780\":\"99@0\",\"1781\":\"99@1\",\"1782\":\"100\",\"1783\":\"100#一、响应式\",\"1784\":\"100#_1-对象的响应式\",\"1785\":\"100#_2-数组的响应式\",\"1786\":\"100#_3-相关-api\",\"1787\":\"100#二、diff-算法\",\"1788\":\"100#_1-虚拟-dom\",\"1789\":\"100#_2-diff-算法\",\"1790\":\"100#三、模板编译\",\"1791\":\"100#_1-模板解析\",\"1792\":\"100#html-解析器\",\"1793\":\"100#文本解析器\",\"1794\":\"100#过滤器解析器\",\"1795\":\"100#_2-优化阶段\",\"1796\":\"100#_3-代码生成\",\"1797\":\"100#举例\",\"1798\":\"100#四、生命周期\",\"1799\":\"100#_1-初始化整体流程\",\"1800\":\"100#_2-初始化生命周期\",\"1801\":\"100#_3-初始化事件\",\"1802\":\"100#举例说明\",\"1803\":\"100#_4-初始化-inject\",\"1804\":\"100#_5-初始化-state\",\"1805\":\"100#_6-模板编译\",\"1806\":\"100#_7-模板挂载\",\"1807\":\"100#_8-销毁阶段\",\"1808\":\"100#五、实例方法\",\"1809\":\"100#_1-数据相关\",\"1810\":\"100#vm-watch\",\"1811\":\"100#vm-set\",\"1812\":\"100#vm-delete\",\"1813\":\"100#_2-事件相关\",\"1814\":\"100#vm-on\",\"1815\":\"100#vm-emit\",\"1816\":\"100#vm-off\",\"1817\":\"100#vm-once\",\"1818\":\"100#_3-生命周期相关\",\"1819\":\"100#vm-mount\",\"1820\":\"100#vm-destory\",\"1821\":\"100#vm-forceupdate\",\"1822\":\"100#vm-nexttick\",\"1823\":\"100#六、全局-api\",\"1824\":\"100#_1-vue-use\",\"1825\":\"100#_2-vue-extend\",\"1826\":\"100#_3-vue-mixin\",\"1827\":\"100#_4-vue-observable-object\",\"1828\":\"100#_5-directive、filter、component\",\"1829\":\"100@0\",\"1830\":\"100@1\",\"1831\":\"101\",\"1832\":\"101#一、组件挂载\",\"1833\":\"101#二、生成-vnode\",\"1834\":\"101#_1-组件占位符-vnode-数据结构\",\"1835\":\"101#_2-渲染-vnode-数据结构\",\"1836\":\"101#三、data\",\"1837\":\"101#四、props\",\"1838\":\"101#_1-子组件获取传入的props数据\",\"1839\":\"101#_2-props-的初始化\",\"1840\":\"101#_3-props-更新\",\"1841\":\"101#传给子组件的是基本数据类型\",\"1842\":\"101#传给子组件的是对象\",\"1843\":\"101#五、computed\",\"1844\":\"101#_1-初始化\",\"1845\":\"101#组件computed的初始化\",\"1846\":\"101#根实例computed的初始化\",\"1847\":\"101#computed-watcher-和-render-watcher的区别\",\"1848\":\"101#_2-响应\",\"1849\":\"101#依赖收集\",\"1850\":\"101#通知更新\",\"1851\":\"101#六、watch\",\"1852\":\"101#_1-初始化-1\",\"1853\":\"101#_2-响应-1\",\"1854\":\"101#依赖收集-1\",\"1855\":\"101#通知更新-1\",\"1856\":\"101#_3-computed-和-watch-的区别\",\"1857\":\"101#computed\",\"1858\":\"101#watch\",\"1859\":\"101#_4-computed-的响应原理\",\"1860\":\"101#_5-watch-的响应原理\",\"1861\":\"101#七、methods\",\"1862\":\"101#八、patch\",\"1863\":\"101#九、总览\",\"1864\":\"101#_1-options\",\"1865\":\"101#_2-实例属性\",\"1866\":\"101#_3-虚拟-dom\",\"1867\":\"101#十、单文件组件\",\"1868\":\"101@0\",\"1869\":\"101@1\",\"1870\":\"102\",\"1871\":\"102#一、vue-整体方向的选择-权衡\",\"1872\":\"102#_1-声明式-or-命令式\",\"1873\":\"102#_2-虚拟-dom-的选择\",\"1874\":\"102#_3-运行时-or-编译时\",\"1875\":\"102#二、-框架设计的核心要素\",\"1876\":\"102#三、vue3-的设计思路\",\"1877\":\"102#_1-描述-ui\",\"1878\":\"102#_2-渲染器\",\"1879\":\"102#_3-组件\",\"1880\":\"102#_4-编译器\",\"1881\":\"102#_5-页面渲染流程\",\"1882\":\"102@0\",\"1883\":\"102@1\",\"1884\":\"103\",\"1885\":\"103#一、-响应式数据与副作用函数\",\"1886\":\"103#二、-完成响应式的基本思路\",\"1887\":\"103#三、-较完善响应式的实现\",\"1888\":\"103#_1-硬编码\",\"1889\":\"103#_2-桶-结构的重新设计\",\"1890\":\"103#_3-cleanup\",\"1891\":\"103#_4-使-effect-可嵌套\",\"1892\":\"103#_5-解决读写操作一起时的无限递归\",\"1893\":\"103#_6-完成可调度性\",\"1894\":\"103#_7-副作用函数的懒加载\",\"1895\":\"103#_8-getter-的实现\",\"1896\":\"103#四、-计算属性-computed-的实现\",\"1897\":\"103#五、watch-的实现\",\"1898\":\"103@0\",\"1899\":\"103@1\",\"1900\":\"104\",\"1901\":\"104#一、-理解-proxy-和-reflect\",\"1902\":\"104#_1-target-key\",\"1903\":\"104#_2-理解-js-对象和-proxy-工作原理\",\"1904\":\"104#二、代理函数的完善\",\"1905\":\"104#_1-in操作符的拦截\",\"1906\":\"104#_2-for-in操作符的拦截\",\"1907\":\"104#_3-代理-delete-操作符\",\"1908\":\"104#三、合理触发响应\",\"1909\":\"104#_1-减少不必要的响应\",\"1910\":\"104#_2-原型链继承问题\",\"1911\":\"104#四、浅响应和深响应\",\"1912\":\"104#_1-实现深响应\",\"1913\":\"104#_2-完成深浅响应\",\"1914\":\"104#五、只读和浅只读\",\"1915\":\"104#六、代理数组\",\"1916\":\"104#_1-数组的索引与-length\",\"1917\":\"104#响应数组下标的变化\",\"1918\":\"104#响应-length-的变化\",\"1919\":\"104#_2-遍历数组\",\"1920\":\"104#响应使用for-in遍历数组\",\"1921\":\"104#响应使用for-of遍历数组\",\"1922\":\"104#_3-重写部分数组的查找方法\",\"1923\":\"104#includes-的边界考虑\",\"1924\":\"104#其他方法\",\"1925\":\"104#_4-重写会修改数组长度的方法\",\"1926\":\"104#七、代理-set-和-map\",\"1927\":\"104#_1-如何代理-set-和-map\",\"1928\":\"104#_2-建立响应式\",\"1929\":\"104#_3-避免污染原始数据\",\"1930\":\"104#_4-处理-foreach\",\"1931\":\"104#_5-迭代器方法\",\"1932\":\"104#_6-values-与-keys-方法\",\"1933\":\"104@0\",\"1934\":\"104@1\",\"1935\":\"105\",\"1936\":\"105#_1-引入-ref\",\"1937\":\"105#_2-响应丢失问题\",\"1938\":\"105#_3-自动脱-ref\",\"1939\":\"105@0\",\"1940\":\"105@1\",\"1941\":\"106\",\"1942\":\"106#一、-渲染器的基本概念\",\"1943\":\"106#_1-与响应式的关系\",\"1944\":\"106#_2-render-函数的基本实现\",\"1945\":\"106#二、-渲染器的设计\",\"1946\":\"106#_1-抽离-api\",\"1947\":\"106#_2-渲染器的挂载操作\",\"1948\":\"106#挂载元素\",\"1949\":\"106#挂载属性\",\"1950\":\"106#_3-渲染器的卸载操作\",\"1951\":\"106#_4-patch\",\"1952\":\"106#三、渲染组件\",\"1953\":\"106#_1-定义组件\",\"1954\":\"106#_2-mountcomponent\",\"1955\":\"106#_3-patchcomponent\",\"1956\":\"106#_4-渲染上下文对象\",\"1957\":\"106@0\",\"1958\":\"106@1\",\"1959\":\"107\",\"1960\":\"107#一、简单-diff\",\"1961\":\"107#_1-不考虑-dom-复用\",\"1962\":\"107#_2-考虑-dom-复用\",\"1963\":\"107#二、双端-diff\",\"1964\":\"107#_1-简单-diff-存在的问题\",\"1965\":\"107#_2-双端-diff-的理想情况\",\"1966\":\"107#_3-双端-diff-的非理想情况\",\"1967\":\"107#三、快速-diff\",\"1968\":\"107#_1-特殊情况\",\"1969\":\"107#_2-一般情况处理\",\"1970\":\"107@0\",\"1971\":\"107@1\",\"1972\":\"108\",\"1973\":\"108#一、-解析器\",\"1974\":\"108#_1-分阶段实现\",\"1975\":\"108#二、转换器\",\"1976\":\"108#_1-深度优先遍历\",\"1977\":\"108#_2-插件化架构\",\"1978\":\"108#_3-ast-的转换\",\"1979\":\"108#三、生成器\",\"1980\":\"108@0\",\"1981\":\"108@1\",\"1982\":\"109\",\"1983\":\"109#一、基础响应式\",\"1984\":\"109#_1-注册副作用函数\",\"1985\":\"109#_2-响应式的代理操作\",\"1986\":\"109#_3-计算属性\",\"1987\":\"109#_4-watch\",\"1988\":\"109#二、非原始值响应式\",\"1989\":\"109#_1-读取操作\",\"1990\":\"109#_2-完善\",\"1991\":\"109#_3-深浅响应\",\"1992\":\"109#_4-深浅只读\",\"1993\":\"109#_5-代理数组\",\"1994\":\"109@0\",\"1995\":\"109@1\",\"1996\":\"110\",\"1997\":\"110#一、整体渲染流程\",\"1998\":\"110#二、createapp\",\"1999\":\"110#二、mount\",\"2000\":\"110#_1-mountcomponent\",\"2001\":\"110#_2-setupcomponent\",\"2002\":\"110#_3-setuprendereffect\",\"2003\":\"110#三、总结\",\"2004\":\"110@0\",\"2005\":\"110@1\",\"2006\":\"111\",\"2007\":\"111#一、pinia-基础使用\",\"2008\":\"111#_1-vue3-vite-安装\",\"2009\":\"111#_2-pinia-安装与使用\",\"2010\":\"111#_3-main-ts-注入-use\",\"2011\":\"111#_4-创建-pinia-模块\",\"2012\":\"111#_5-index-ts\",\"2013\":\"111#_6-在组件中使用-pinia\",\"2014\":\"111#_7-最终显示\",\"2015\":\"111#_8-需求总结\",\"2016\":\"111#二、实现-createpinia\",\"2017\":\"111#三、实现-definestore\",\"2018\":\"111#_1-基本结构\",\"2019\":\"111#_2-参数情况\",\"2020\":\"111#_3-createsetupstore\",\"2021\":\"111#_4-createoptionsstore\",\"2022\":\"111@0\",\"2023\":\"111@1\",\"2024\":\"112\",\"2025\":\"112#一、基本用法\",\"2026\":\"112#二、路由注册\",\"2027\":\"112#三、vuerouter-实例化\",\"2028\":\"112#_1-matcher-对象\",\"2029\":\"112#_2-history-对象\",\"2030\":\"112#四、全局组件\",\"2031\":\"112#_1-router-view\",\"2032\":\"112#_2-router-link\",\"2033\":\"112#五、总结\",\"2034\":\"112#_1-路由变化触发组件重渲染\",\"2035\":\"112#_2-3-x-与-4-x-版本的区别\",\"2036\":\"112@0\",\"2037\":\"112@1\",\"2038\":\"113\",\"2039\":\"113#一、createrouter-结构解析\",\"2040\":\"113#_1-准备工作\",\"2041\":\"113#_2-整体结构分析\",\"2042\":\"113#_3-创建-matcher\",\"2043\":\"113#_4-处理导航守卫\",\"2044\":\"113#_5-currentroute-声明\",\"2045\":\"113#_6-处理-params\",\"2046\":\"113#_7-定义各种方法\",\"2047\":\"113#_8-router-对象\",\"2048\":\"113#二、history-基础知识\",\"2049\":\"113#_1-hash-模式\",\"2050\":\"113#_2-html5-模式\",\"2051\":\"113#_3-location-对象\",\"2052\":\"113#三、createwebhistory-结构拆解\",\"2053\":\"113#_1-整体结构分析\",\"2054\":\"113#_2-标准化-base\",\"2055\":\"113#_3-后续操作\",\"2056\":\"113#四、usehistorystatenavigation-结构解析\",\"2057\":\"113#_1-整体结构\",\"2058\":\"113#_2-代码拆解\",\"2059\":\"113#五、usehistorylisteners-结构解析\",\"2060\":\"113#_1-整体结构-1\",\"2061\":\"113#_2-代码拆解-1\",\"2062\":\"113#六、routerlink-组件解析\",\"2063\":\"113#_1-compatconfig\",\"2064\":\"113#_2-props\",\"2065\":\"113#_3-uselink\",\"2066\":\"113#_4-setup\",\"2067\":\"113#七、routerview-源码解析\",\"2068\":\"113#_1-depth-深度\",\"2069\":\"113#_2-watch\",\"2070\":\"113#_3-return\",\"2071\":\"113#八、导航守卫流程解析\",\"2072\":\"113#_1-导航守卫相关源码\",\"2073\":\"113#extractchangingrecords\",\"2074\":\"113#extractcomponentsguards\",\"2075\":\"113#guardtopromisefn\",\"2076\":\"113#runguardqueue\",\"2077\":\"113#_2-导航守卫执行流程\",\"2078\":\"113#beforerouteleave\",\"2079\":\"113#beforeeach\",\"2080\":\"113#beforerouteupdate\",\"2081\":\"113#beforeenter\",\"2082\":\"113#beforerouterenter\",\"2083\":\"113#beforeresolve\",\"2084\":\"113#aftereach\",\"2085\":\"113@0\",\"2086\":\"113@1\",\"2087\":\"114\",\"2088\":\"114#防御手段\",\"2089\":\"114@0\",\"2090\":\"114@1\",\"2091\":\"115\",\"2092\":\"115@0\",\"2093\":\"115@1\",\"2094\":\"117\",\"2095\":\"117#防御方式\",\"2096\":\"117@0\",\"2097\":\"117@1\",\"2098\":\"118\",\"2099\":\"118#对称加密\",\"2100\":\"118#非对称加密\",\"2101\":\"118#摘要-哈希-散列\",\"2102\":\"118@0\",\"2103\":\"118@1\",\"2104\":\"119\",\"2105\":\"120\",\"2106\":\"121\",\"2107\":\"122\",\"2108\":\"123\",\"2109\":\"124\",\"2110\":\"125\",\"2111\":\"126\",\"2112\":\"127\",\"2113\":\"128\",\"2114\":\"129\",\"2115\":\"130\",\"2116\":\"131\",\"2117\":\"132\",\"2118\":\"133\",\"2119\":\"134\",\"2120\":\"135\",\"2121\":\"136\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,2],\"1\":[1],\"2\":[2,11],\"3\":[2,14],\"4\":[3],\"5\":[2,2],\"6\":[2,2],\"7\":[2,37],\"8\":[2,17],\"9\":[2],\"10\":[2,38],\"11\":[4,39],\"12\":[4,43],\"13\":[2,36],\"14\":[3,28],\"15\":[2,67],\"16\":[3,15],\"17\":[2,59],\"18\":[null,null,1],\"19\":[null,null,1],\"20\":[1],\"21\":[2],\"22\":[2,30],\"23\":[2,54],\"24\":[2,119],\"25\":[2,87],\"26\":[2],\"27\":[4,40],\"28\":[3,40],\"29\":[3,58],\"30\":[3,50],\"31\":[4,20],\"32\":[2],\"33\":[4],\"34\":[2,16],\"35\":[2,35],\"36\":[6,3],\"37\":[4,97],\"38\":[2],\"39\":[4,14],\"40\":[2,10],\"41\":[2,27],\"42\":[4,15],\"43\":[2,10],\"44\":[7,32],\"45\":[8,63],\"46\":[2,28],\"47\":[2,22],\"48\":[2,4],\"49\":[1,37],\"50\":[1,36],\"51\":[2,19],\"52\":[2,25],\"53\":[null,null,1],\"54\":[null,null,2],\"55\":[1,2],\"56\":[2],\"57\":[2,9],\"58\":[2,16],\"59\":[2,46],\"60\":[2,4],\"61\":[2,12],\"62\":[3,16],\"63\":[3],\"64\":[1,80],\"65\":[1,14],\"66\":[1,41],\"67\":[2,21],\"68\":[1,17],\"69\":[1,26],\"70\":[4],\"71\":[2,66],\"72\":[2,44],\"73\":[2,21],\"74\":[2,13],\"75\":[2,13],\"76\":[2,10],\"77\":[2,29],\"78\":[2,12],\"79\":[2],\"80\":[1,15],\"81\":[1,11],\"82\":[1,23],\"83\":[2,2],\"84\":[2,13],\"85\":[2,14],\"86\":[2,6],\"87\":[2,35],\"88\":[2,12],\"89\":[4,18],\"90\":[2],\"91\":[1,37],\"92\":[1,11],\"93\":[1,21],\"94\":[2,44],\"95\":[null,null,1],\"96\":[null,null,1],\"97\":[1],\"98\":[null,null,1],\"99\":[1],\"100\":[null,null,1],\"101\":[1],\"102\":[null,null,1],\"103\":[null,null,3],\"104\":[1],\"105\":[null,null,1],\"106\":[1],\"107\":[null,null,1],\"108\":[1,2],\"109\":[1],\"110\":[null,null,1],\"111\":[1],\"112\":[null,null,1],\"113\":[1],\"114\":[null,null,1],\"115\":[1],\"116\":[2,33],\"117\":[2,40],\"118\":[2,11],\"119\":[2,7],\"120\":[null,null,1],\"121\":[null,null,2],\"122\":[2,90],\"123\":[3,26],\"124\":[2,92],\"125\":[null,null,1],\"126\":[null,null,2],\"127\":[1],\"128\":[2,65],\"129\":[1,57],\"130\":[null,null,1],\"131\":[null,null,2],\"132\":[1],\"133\":[1,57],\"134\":[1,44],\"135\":[null,null,1],\"136\":[null,null,2],\"137\":[1],\"138\":[1,96],\"139\":[null,null,1],\"140\":[null,null,2],\"141\":[1],\"142\":[2,118],\"143\":[2,72],\"144\":[null,null,1],\"145\":[null,null,2],\"146\":[1,33],\"147\":[3,16],\"148\":[2,111],\"149\":[2,77],\"150\":[4,51],\"151\":[null,null,1],\"152\":[null,null,2],\"153\":[1,3],\"154\":[2,53],\"155\":[1,165],\"156\":[4,207],\"157\":[1,17],\"158\":[2,63],\"159\":[1,38],\"160\":[null,null,1],\"161\":[null,null,2],\"162\":[2],\"163\":[2],\"164\":[2],\"165\":[2,28],\"166\":[2,14],\"167\":[2],\"168\":[2],\"169\":[1],\"170\":[2],\"171\":[3,8],\"172\":[2,5],\"173\":[2,12],\"174\":[2,5],\"175\":[3,5],\"176\":[2,97],\"177\":[2,60],\"178\":[2,3],\"179\":[2,14],\"180\":[2,14],\"181\":[2,24],\"182\":[2,8],\"183\":[2],\"184\":[1,8],\"185\":[1,6],\"186\":[1,4],\"187\":[1,6],\"188\":[2],\"189\":[2,27],\"190\":[2,3],\"191\":[2,84],\"192\":[2,28],\"193\":[2,5],\"194\":[1,7],\"195\":[1,7],\"196\":[1,8],\"197\":[1,6],\"198\":[1,15],\"199\":[2,10],\"200\":[1,67],\"201\":[1,20],\"202\":[1,22],\"203\":[1,25],\"204\":[2],\"205\":[1,38],\"206\":[1,35],\"207\":[1,25],\"208\":[2],\"209\":[1,24],\"210\":[1,20],\"211\":[1,19],\"212\":[2,111],\"213\":[2,19],\"214\":[1],\"215\":[2,24],\"216\":[4,46],\"217\":[4,16],\"218\":[3,64],\"219\":[2,105],\"220\":[8,24],\"221\":[2,8],\"222\":[8,49],\"223\":[5,50],\"224\":[4,37],\"225\":[5,6],\"226\":[1],\"227\":[2,15],\"228\":[2,29],\"229\":[2,19],\"230\":[3],\"231\":[2],\"232\":[3,8],\"233\":[3,2],\"234\":[2,4],\"235\":[2],\"236\":[2,22],\"237\":[2,20],\"238\":[4,55],\"239\":[2,56],\"240\":[3,16],\"241\":[1,21],\"242\":[2,32],\"243\":[2,17],\"244\":[2,34],\"245\":[2,46],\"246\":[3,32],\"247\":[2,34],\"248\":[1,14],\"249\":[2,11],\"250\":[2,30],\"251\":[2,23],\"252\":[2,39],\"253\":[1,10],\"254\":[2,36],\"255\":[2,41],\"256\":[2,20],\"257\":[2,47],\"258\":[2,33],\"259\":[2,55],\"260\":[2,50],\"261\":[2,26],\"262\":[2,38],\"263\":[2,75],\"264\":[2,63],\"265\":[2],\"266\":[2,25],\"267\":[2,4],\"268\":[1,30],\"269\":[2,49],\"270\":[2,18],\"271\":[2,61],\"272\":[3,5],\"273\":[1,44],\"274\":[1,6],\"275\":[1,50],\"276\":[4,2],\"277\":[1,2],\"278\":[1,2],\"279\":[2,2],\"280\":[1,2],\"281\":[1,2],\"282\":[4,74],\"283\":[3,39],\"284\":[6,61],\"285\":[1,57],\"286\":[3,52],\"287\":[1,120],\"288\":[2,15],\"289\":[2,16],\"290\":[2,6],\"291\":[1,21],\"292\":[1,29],\"293\":[2,16],\"294\":[4,105],\"295\":[3,28],\"296\":[5,24],\"297\":[1],\"298\":[3,22],\"299\":[3],\"300\":[3,8],\"301\":[3,43],\"302\":[3],\"303\":[2,2],\"304\":[2,57],\"305\":[2,45],\"306\":[2,18],\"307\":[3,76],\"308\":[3],\"309\":[2,21],\"310\":[2,4],\"311\":[2,2],\"312\":[2,3],\"313\":[1,22],\"314\":[1,14],\"315\":[1,13],\"316\":[2,45],\"317\":[2,48],\"318\":[2],\"319\":[3,8],\"320\":[3,2],\"321\":[3,44],\"322\":[3,1],\"323\":[2,3],\"324\":[3,12],\"325\":[3],\"326\":[1,3],\"327\":[1,29],\"328\":[3,23],\"329\":[2,83],\"330\":[2],\"331\":[3,46],\"332\":[2,51],\"333\":[1],\"334\":[2],\"335\":[2,20],\"336\":[2,4],\"337\":[2,12],\"338\":[2,18],\"339\":[3,52],\"340\":[3,43],\"341\":[2,11],\"342\":[1],\"343\":[2,53],\"344\":[2],\"345\":[3,110],\"346\":[3,23],\"347\":[3,10],\"348\":[3,8],\"349\":[3,64],\"350\":[2,105],\"351\":[2],\"352\":[3,14],\"353\":[3,18],\"354\":[3,17],\"355\":[3,139],\"356\":[5,42],\"357\":[2],\"358\":[3,12],\"359\":[3,4],\"360\":[3,48],\"361\":[3,13],\"362\":[5,63],\"363\":[2,26],\"364\":[2,15],\"365\":[1,16],\"366\":[1,43],\"367\":[1,26],\"368\":[3,86],\"369\":[5,26],\"370\":[2],\"371\":[2,3],\"372\":[1,17],\"373\":[1,27],\"374\":[1],\"375\":[2],\"376\":[2,18],\"377\":[2,60],\"378\":[2,35],\"379\":[2,47],\"380\":[2,16],\"381\":[2,28],\"382\":[2,57],\"383\":[2,28],\"384\":[1,96],\"385\":[4,34],\"386\":[1,36],\"387\":[1,19],\"388\":[2,81],\"389\":[2,49],\"390\":[2,47],\"391\":[2,22],\"392\":[2,20],\"393\":[2,26],\"394\":[2],\"395\":[2,108],\"396\":[2,29],\"397\":[2,29],\"398\":[2,51],\"399\":[2,18],\"400\":[2,13],\"401\":[2,68],\"402\":[2,294],\"403\":[2,68],\"404\":[2,97],\"405\":[2,249],\"406\":[2],\"407\":[2,21],\"408\":[2,189],\"409\":[1,1],\"410\":[1,27],\"411\":[1,28],\"412\":[1,26],\"413\":[1,32],\"414\":[1,40],\"415\":[1,39],\"416\":[1,47],\"417\":[1,39],\"418\":[1,70],\"419\":[1,69],\"420\":[1],\"421\":[1,28],\"422\":[1,24],\"423\":[1],\"424\":[1,22],\"425\":[1,6],\"426\":[3],\"427\":[2],\"428\":[1,38],\"429\":[1,14],\"430\":[2,25],\"431\":[2],\"432\":[1,26],\"433\":[1,25],\"434\":[1],\"435\":[2],\"436\":[1,39],\"437\":[2],\"438\":[1,50],\"439\":[1,20],\"440\":[2],\"441\":[1,41],\"442\":[2],\"443\":[1,45],\"444\":[1],\"445\":[3,6],\"446\":[6,8],\"447\":[2,4],\"448\":[1],\"449\":[2,20],\"450\":[3,11],\"451\":[1,21],\"452\":[1,26],\"453\":[1,18],\"454\":[1],\"455\":[1,12],\"456\":[1,21],\"457\":[1,12],\"458\":[1,20],\"459\":[1],\"460\":[2,16],\"461\":[2,18],\"462\":[1],\"463\":[2,22],\"464\":[7,19],\"465\":[1],\"466\":[2,28],\"467\":[3,13],\"468\":[1],\"469\":[2,31],\"470\":[2],\"471\":[4,23],\"472\":[2,46],\"473\":[1],\"474\":[1,37],\"475\":[1],\"476\":[1,56],\"477\":[1],\"478\":[2,36],\"479\":[2,17],\"480\":[2,37],\"481\":[1],\"482\":[2,47],\"483\":[2,30],\"484\":[1],\"485\":[1,11],\"486\":[1,37],\"487\":[1,65],\"488\":[1,30],\"489\":[1],\"490\":[2,19],\"491\":[2,31],\"492\":[1],\"493\":[1,62],\"494\":[1,45],\"495\":[1],\"496\":[1,34],\"497\":[1],\"498\":[1,49],\"499\":[1,40],\"500\":[1],\"501\":[1,40],\"502\":[1],\"503\":[2],\"504\":[2,30],\"505\":[2,12],\"506\":[2],\"507\":[2,46],\"508\":[4,15],\"509\":[2,5],\"510\":[2,5],\"511\":[2,5],\"512\":[2,2],\"513\":[1,4],\"514\":[2,18],\"515\":[2,11],\"516\":[2,25],\"517\":[2,23],\"518\":[2,26],\"519\":[2,43],\"520\":[2,82],\"521\":[2,27],\"522\":[4,9],\"523\":[3,5],\"524\":[3,32],\"525\":[3,1],\"526\":[2],\"527\":[2,14],\"528\":[2,13],\"529\":[3,6],\"530\":[3,4],\"531\":[3,4],\"532\":[3,13],\"533\":[4,22],\"534\":[2,33],\"535\":[2,59],\"536\":[null,null,1],\"537\":[null,null,3],\"538\":[1],\"539\":[5,36],\"540\":[2,45],\"541\":[2,16],\"542\":[5,17],\"543\":[4,22],\"544\":[4,35],\"545\":[4,23],\"546\":[4,40],\"547\":[2,23],\"548\":[2,76],\"549\":[null,null,1],\"550\":[null,null,3],\"551\":[1],\"552\":[2,38],\"553\":[2,17],\"554\":[1,17],\"555\":[1,24],\"556\":[3,14],\"557\":[2,33],\"558\":[2,24],\"559\":[4,1],\"560\":[2,17],\"561\":[2,26],\"562\":[2,12],\"563\":[2],\"564\":[7,60],\"565\":[3,27],\"566\":[3,25],\"567\":[4,1],\"568\":[2,15],\"569\":[2,36],\"570\":[2,26],\"571\":[2,7],\"572\":[2,19],\"573\":[2,15],\"574\":[2,34],\"575\":[2,12],\"576\":[5,11],\"577\":[2,8],\"578\":[4,29],\"579\":[2],\"580\":[2,107],\"581\":[2],\"582\":[1,67],\"583\":[1,5],\"584\":[4,8],\"585\":[2,7],\"586\":[2,20],\"587\":[2,17],\"588\":[2,28],\"589\":[2,25],\"590\":[2,13],\"591\":[2,36],\"592\":[2,19],\"593\":[2,5],\"594\":[2,1],\"595\":[2],\"596\":[3,6],\"597\":[1,8],\"598\":[1,12],\"599\":[1,7],\"600\":[2],\"601\":[1,5],\"602\":[1,15],\"603\":[1,12],\"604\":[1,7],\"605\":[4,8],\"606\":[null,null,1],\"607\":[null,null,6],\"608\":[1],\"609\":[2,8],\"610\":[2,13],\"611\":[2,7],\"612\":[2,16],\"613\":[2,26],\"614\":[2,5],\"615\":[4,5],\"616\":[3,44],\"617\":[3,22],\"618\":[3,9],\"619\":[2,29],\"620\":[2],\"621\":[2,104],\"622\":[4,12],\"623\":[1,80],\"624\":[3,8],\"625\":[2,44],\"626\":[2],\"627\":[2,4],\"628\":[2,18],\"629\":[2,12],\"630\":[2,18],\"631\":[2,13],\"632\":[2,11],\"633\":[2,22],\"634\":[2,13],\"635\":[2,25],\"636\":[2,69],\"637\":[null,null,1],\"638\":[null,null,5],\"639\":[2],\"640\":[2,8],\"641\":[4,72],\"642\":[2,8],\"643\":[1,17],\"644\":[1,54],\"645\":[2],\"646\":[2,27],\"647\":[4],\"648\":[1,33],\"649\":[2,69],\"650\":[2,53],\"651\":[2,58],\"652\":[null,null,1],\"653\":[null,null,4],\"654\":[1],\"655\":[2],\"656\":[2,6],\"657\":[3,31],\"658\":[2,25],\"659\":[5,51],\"660\":[2],\"661\":[2,18],\"662\":[2,39],\"663\":[2,6],\"664\":[2,39],\"665\":[2,17],\"666\":[2,70],\"667\":[2,19],\"668\":[2,37],\"669\":[2,68],\"670\":[2,76],\"671\":[2,9],\"672\":[3,25],\"673\":[3,14],\"674\":[3,25],\"675\":[3,28],\"676\":[null,null,1],\"677\":[null,null,1],\"678\":[1],\"679\":[2],\"680\":[2,32],\"681\":[2,75],\"682\":[2,5],\"683\":[7,18],\"684\":[2,6],\"685\":[3,38],\"686\":[2,5],\"687\":[null,null,1],\"688\":[null,null,1],\"689\":[1],\"690\":[3],\"691\":[2,30],\"692\":[2,25],\"693\":[3,30],\"694\":[2,67],\"695\":[2],\"696\":[2,64],\"697\":[2,62],\"698\":[2,5],\"699\":[2,2],\"700\":[3],\"701\":[5,25],\"702\":[2,17],\"703\":[3,31],\"704\":[2,24],\"705\":[6,6],\"706\":[2,34],\"707\":[4,19],\"708\":[2,51],\"709\":[3,3],\"710\":[2,7],\"711\":[3,85],\"712\":[2,14],\"713\":[3,20],\"714\":[2,16],\"715\":[2],\"716\":[2,41],\"717\":[2,23],\"718\":[2,15],\"719\":[2,21],\"720\":[3,43],\"721\":[3],\"722\":[2,22],\"723\":[2,10],\"724\":[2],\"725\":[4,46],\"726\":[4,35],\"727\":[2,41],\"728\":[3],\"729\":[4,10],\"730\":[2,44],\"731\":[2,7],\"732\":[3,27],\"733\":[5,27],\"734\":[3],\"735\":[3,10],\"736\":[2,17],\"737\":[3,32],\"738\":[2,7],\"739\":[4,8],\"740\":[2,63],\"741\":[4],\"742\":[2,14],\"743\":[2,27],\"744\":[2,8],\"745\":[2,17],\"746\":[2,17],\"747\":[3,48],\"748\":[3,44],\"749\":[3,19],\"750\":[4,44],\"751\":[4,13],\"752\":[3,99],\"753\":[2],\"754\":[2,21],\"755\":[2],\"756\":[2,63],\"757\":[2,46],\"758\":[2,41],\"759\":[2,14],\"760\":[1,34],\"761\":[2,9],\"762\":[4,23],\"763\":[2,23],\"764\":[3,136],\"765\":[3,192],\"766\":[3,15],\"767\":[3,51],\"768\":[4,75],\"769\":[4,95],\"770\":[3,117],\"771\":[2,55],\"772\":[2,131],\"773\":[2,176],\"774\":[null,null,1],\"775\":[null,null,3],\"776\":[1],\"777\":[2,38],\"778\":[2,6],\"779\":[2,30],\"780\":[2,22],\"781\":[4,19],\"782\":[1,22],\"783\":[1,17],\"784\":[2,4],\"785\":[1,11],\"786\":[1,33],\"787\":[2,21],\"788\":[2],\"789\":[1,79],\"790\":[1,72],\"791\":[2,3],\"792\":[1,40],\"793\":[1,20],\"794\":[3,63],\"795\":[1,42],\"796\":[2,55],\"797\":[2,29],\"798\":[2,20],\"799\":[1],\"800\":[1],\"801\":[2,71],\"802\":[2],\"803\":[2,27],\"804\":[2,5],\"805\":[1,21],\"806\":[1,66],\"807\":[2,2],\"808\":[2,39],\"809\":[3,37],\"810\":[2,37],\"811\":[2],\"812\":[2,55],\"813\":[2,27],\"814\":[2,12],\"815\":[2,14],\"816\":[2,54],\"817\":[2,10],\"818\":[2,18],\"819\":[2,23],\"820\":[3,16],\"821\":[3,31],\"822\":[1,30],\"823\":[4],\"824\":[1,24],\"825\":[1,5],\"826\":[2,14],\"827\":[2,31],\"828\":[2,158],\"829\":[2,31],\"830\":[2,109],\"831\":[2,20],\"832\":[2,52],\"833\":[4,49],\"834\":[3,43],\"835\":[4,44],\"836\":[2,31],\"837\":[2],\"838\":[2,16],\"839\":[2],\"840\":[1,10],\"841\":[1,34],\"842\":[1,25],\"843\":[2,34],\"844\":[2,19],\"845\":[2,18],\"846\":[2,86],\"847\":[2,32],\"848\":[2,34],\"849\":[2,35],\"850\":[2],\"851\":[2,21],\"852\":[2],\"853\":[1,37],\"854\":[1,91],\"855\":[1,58],\"856\":[1,54],\"857\":[1,59],\"858\":[2,11],\"859\":[2,18],\"860\":[2,19],\"861\":[2,39],\"862\":[2,28],\"863\":[2,42],\"864\":[2,30],\"865\":[4,86],\"866\":[2,11],\"867\":[2,32],\"868\":[2,52],\"869\":[2,34],\"870\":[2,26],\"871\":[2,22],\"872\":[4,17],\"873\":[3,3],\"874\":[2,42],\"875\":[4,107],\"876\":[2,75],\"877\":[2,178],\"878\":[2,5],\"879\":[2,34],\"880\":[2],\"881\":[1,13],\"882\":[2,15],\"883\":[1,55],\"884\":[1,35],\"885\":[3],\"886\":[2,2],\"887\":[2],\"888\":[1,33],\"889\":[1,43],\"890\":[1,33],\"891\":[1,39],\"892\":[1,11],\"893\":[1,24],\"894\":[1,45],\"895\":[2,82],\"896\":[3,27],\"897\":[4,35],\"898\":[2,9],\"899\":[2],\"900\":[2,8],\"901\":[1,25],\"902\":[2,62],\"903\":[2,36],\"904\":[1,47],\"905\":[1,29],\"906\":[2,48],\"907\":[3,24],\"908\":[3,31],\"909\":[2,6],\"910\":[1,43],\"911\":[1,108],\"912\":[3,57],\"913\":[3,51],\"914\":[2,38],\"915\":[4,15],\"916\":[1,51],\"917\":[1,31],\"918\":[1,123],\"919\":[2,50],\"920\":[2,39],\"921\":[2,33],\"922\":[2,9],\"923\":[1,68],\"924\":[3,79],\"925\":[1,158],\"926\":[2,18],\"927\":[2],\"928\":[1,10],\"929\":[1,11],\"930\":[1,7],\"931\":[2,49],\"932\":[2,32],\"933\":[1,32],\"934\":[1,38],\"935\":[2,22],\"936\":[2,11],\"937\":[1,19],\"938\":[1,19],\"939\":[2,40],\"940\":[2,31],\"941\":[2,41],\"942\":[1,13],\"943\":[2,47],\"944\":[1,42],\"945\":[1,67],\"946\":[3,65],\"947\":[1,50],\"948\":[2,99],\"949\":[2],\"950\":[1,12],\"951\":[1,32],\"952\":[3,31],\"953\":[3,40],\"954\":[2],\"955\":[2,5],\"956\":[2,57],\"957\":[2,54],\"958\":[2,152],\"959\":[2,25],\"960\":[null,null,1],\"961\":[null,null,1],\"962\":[1],\"963\":[2],\"964\":[2],\"965\":[3,17],\"966\":[3,8],\"967\":[2,47],\"968\":[2],\"969\":[2],\"970\":[2,12],\"971\":[2,9],\"972\":[2,8],\"973\":[2,6],\"974\":[2],\"975\":[3,12],\"976\":[5,30],\"977\":[1,4],\"978\":[2,17],\"979\":[2],\"980\":[4,151],\"981\":[4,33],\"982\":[2,24],\"983\":[2,32],\"984\":[2,29],\"985\":[2,18],\"986\":[5],\"987\":[2,12],\"988\":[2,4],\"989\":[2,11],\"990\":[3,53],\"991\":[3,55],\"992\":[3,52],\"993\":[3,72],\"994\":[4],\"995\":[3,346],\"996\":[4,111],\"997\":[4],\"998\":[3,7],\"999\":[3,3],\"1000\":[3,12],\"1001\":[4,7],\"1002\":[4,11],\"1003\":[null,null,1],\"1004\":[null,null,2],\"1005\":[1],\"1006\":[2],\"1007\":[2,22],\"1008\":[2,16],\"1009\":[2,33],\"1010\":[2,7],\"1011\":[2],\"1012\":[2,29],\"1013\":[2,26],\"1014\":[2,11],\"1015\":[2,119],\"1016\":[2,6],\"1017\":[2,7],\"1018\":[2,19],\"1019\":[2,12],\"1020\":[2,27],\"1021\":[2,23],\"1022\":[2],\"1023\":[2,67],\"1024\":[2,4],\"1025\":[2,67],\"1026\":[2],\"1027\":[2,19],\"1028\":[3,71],\"1029\":[2,49],\"1030\":[2,67],\"1031\":[2,43],\"1032\":[2],\"1033\":[2,35],\"1034\":[2,49],\"1035\":[3,41],\"1036\":[3,36],\"1037\":[1,7],\"1038\":[2,59],\"1039\":[2,70],\"1040\":[2,55],\"1041\":[null,null,1],\"1042\":[null,null,4],\"1043\":[1],\"1044\":[2],\"1045\":[3,10],\"1046\":[2,10],\"1047\":[4,27],\"1048\":[2,23],\"1049\":[4,17],\"1050\":[2],\"1051\":[4],\"1052\":[2,11],\"1053\":[2,33],\"1054\":[3,33],\"1055\":[2,24],\"1056\":[3,17],\"1057\":[2,30],\"1058\":[2,29],\"1059\":[2,39],\"1060\":[2,26],\"1061\":[3,14],\"1062\":[2],\"1063\":[2,35],\"1064\":[1,20],\"1065\":[2,25],\"1066\":[1,26],\"1067\":[2,27],\"1068\":[2],\"1069\":[2,19],\"1070\":[4,21],\"1071\":[2,33],\"1072\":[2,32],\"1073\":[3,19],\"1074\":[null,null,1],\"1075\":[null,null,2],\"1076\":[1],\"1077\":[3,10],\"1078\":[4,34],\"1079\":[4,22],\"1080\":[6,19],\"1081\":[4,24],\"1082\":[3],\"1083\":[3,31],\"1084\":[5,54],\"1085\":[3],\"1086\":[3,75],\"1087\":[2,179],\"1088\":[2,232],\"1089\":[3],\"1090\":[3,7],\"1091\":[3,79],\"1092\":[3,22],\"1093\":[2,105],\"1094\":[2,62],\"1095\":[3,9],\"1096\":[2,25],\"1097\":[2,28],\"1098\":[3,79],\"1099\":[2,27],\"1100\":[3,27],\"1101\":[2,37],\"1102\":[4,89],\"1103\":[2],\"1104\":[3,63],\"1105\":[4,165],\"1106\":[null,null,1],\"1107\":[null,null,1],\"1108\":[1],\"1109\":[6,21],\"1110\":[2],\"1111\":[4,18],\"1112\":[4,187],\"1113\":[4,8],\"1114\":[4,8],\"1115\":[5,5],\"1116\":[1,5],\"1117\":[1,5],\"1118\":[1,6],\"1119\":[1,6],\"1120\":[1,73],\"1121\":[1,23],\"1122\":[1,6],\"1123\":[1,83],\"1124\":[5,98],\"1125\":[3,48],\"1126\":[3],\"1127\":[7,28],\"1128\":[4,8],\"1129\":[3,20],\"1130\":[5,7],\"1131\":[4,4],\"1132\":[4,25],\"1133\":[null,null,1],\"1134\":[null,null,1],\"1135\":[1,24],\"1136\":[2],\"1137\":[2,52],\"1138\":[2,24],\"1139\":[2,101],\"1140\":[2,105],\"1141\":[3,42],\"1142\":[2,11],\"1143\":[3,35],\"1144\":[4,42],\"1145\":[4,61],\"1146\":[2,60],\"1147\":[2,14],\"1148\":[2,117],\"1149\":[2,59],\"1150\":[2,115],\"1151\":[2,55],\"1152\":[2,82],\"1153\":[2,166],\"1154\":[2,119],\"1155\":[2,104],\"1156\":[2,116],\"1157\":[4,45],\"1158\":[2,114],\"1159\":[2],\"1160\":[2,85],\"1161\":[2,126],\"1162\":[2,64],\"1163\":[4,11],\"1164\":[null,null,1],\"1165\":[null,null,1],\"1166\":[1],\"1167\":[2],\"1168\":[2,29],\"1169\":[3,5],\"1170\":[2,3],\"1171\":[2],\"1172\":[4,21],\"1173\":[5,9],\"1174\":[3,8],\"1175\":[2,4],\"1176\":[2],\"1177\":[2,10],\"1178\":[3,3],\"1179\":[4,2],\"1180\":[2,29],\"1181\":[3,94],\"1182\":[4,59],\"1183\":[null,null,1],\"1184\":[null,null,4],\"1185\":[1],\"1186\":[2,34],\"1187\":[1,57],\"1188\":[1,33],\"1189\":[1,21],\"1190\":[null,null,1],\"1191\":[null,null,1],\"1192\":[1],\"1193\":[3,25],\"1194\":[3,62],\"1195\":[3,29],\"1196\":[3,25],\"1197\":[3,7],\"1198\":[3,76],\"1199\":[3,39],\"1200\":[4,38],\"1201\":[3,103],\"1202\":[2,12],\"1203\":[3,44],\"1204\":[3,66],\"1205\":[3,108],\"1206\":[5,42],\"1207\":[3,67],\"1208\":[3,77],\"1209\":[2,40],\"1210\":[2,12],\"1211\":[2,19],\"1212\":[2,11],\"1213\":[2,20],\"1214\":[3,65],\"1215\":[3,22],\"1216\":[4,65],\"1217\":[2,14],\"1218\":[2,16],\"1219\":[5,107],\"1220\":[2,17],\"1221\":[4,23],\"1222\":[4,12],\"1223\":[5,14],\"1224\":[2,86],\"1225\":[2,66],\"1226\":[5,13],\"1227\":[3,31],\"1228\":[3,13],\"1229\":[3,13],\"1230\":[3,11],\"1231\":[5,47],\"1232\":[3,114],\"1233\":[3,4],\"1234\":[4,14],\"1235\":[4,8],\"1236\":[6,15],\"1237\":[2,18],\"1238\":[5,19],\"1239\":[4,52],\"1240\":[6,23],\"1241\":[2,8],\"1242\":[7,7],\"1243\":[2,20],\"1244\":[null,null,1],\"1245\":[null,null,1],\"1246\":[2],\"1247\":[3,40],\"1248\":[5,19],\"1249\":[3,32],\"1250\":[3,39],\"1251\":[2,6],\"1252\":[2,33],\"1253\":[2,10],\"1254\":[2,8],\"1255\":[2,28],\"1256\":[2],\"1257\":[1,16],\"1258\":[2,3],\"1259\":[2,63],\"1260\":[2,40],\"1261\":[2,46],\"1262\":[2,43],\"1263\":[2,7],\"1264\":[1,35],\"1265\":[1,70],\"1266\":[1,41],\"1267\":[1,47],\"1268\":[1,19],\"1269\":[1,21],\"1270\":[1,25],\"1271\":[1,20],\"1272\":[1,21],\"1273\":[1,46],\"1274\":[1,51],\"1275\":[1,40],\"1276\":[1,34],\"1277\":[3,24],\"1278\":[2,20],\"1279\":[2,25],\"1280\":[2,23],\"1281\":[1,14],\"1282\":[1,28],\"1283\":[2,20],\"1284\":[2,50],\"1285\":[2,22],\"1286\":[2,31],\"1287\":[2,12],\"1288\":[2,15],\"1289\":[2,20],\"1290\":[3,64],\"1291\":[3,5],\"1292\":[2,9],\"1293\":[2,13],\"1294\":[3,11],\"1295\":[3,13],\"1296\":[3,18],\"1297\":[3,28],\"1298\":[2,35],\"1299\":[2,81],\"1300\":[3,26],\"1301\":[2,32],\"1302\":[1,43],\"1303\":[1,10],\"1304\":[1,11],\"1305\":[1,26],\"1306\":[1,31],\"1307\":[2,53],\"1308\":[1,56],\"1309\":[2,87],\"1310\":[1,32],\"1311\":[1,21],\"1312\":[1,30],\"1313\":[2,101],\"1314\":[1,40],\"1315\":[5,42],\"1316\":[5,25],\"1317\":[1,26],\"1318\":[1,34],\"1319\":[6,56],\"1320\":[2,39],\"1321\":[null,null,1],\"1322\":[null,null,1],\"1323\":[1],\"1324\":[2,31],\"1325\":[2,12],\"1326\":[2],\"1327\":[2,9],\"1328\":[2,43],\"1329\":[2,13],\"1330\":[2,7],\"1331\":[2,13],\"1332\":[2,36],\"1333\":[4,7],\"1334\":[2,14],\"1335\":[2,22],\"1336\":[2,13],\"1337\":[2,18],\"1338\":[2,33],\"1339\":[2,13],\"1340\":[3,19],\"1341\":[2,20],\"1342\":[null,null,1],\"1343\":[null,null,1],\"1344\":[1],\"1345\":[3],\"1346\":[3],\"1347\":[5,3],\"1348\":[5,13],\"1349\":[5,17],\"1350\":[4,31],\"1351\":[3],\"1352\":[3,52],\"1353\":[3,126],\"1354\":[2,34],\"1355\":[5,2],\"1356\":[5,47],\"1357\":[3,107],\"1358\":[3,175],\"1359\":[5],\"1360\":[6,20],\"1361\":[5,17],\"1362\":[3,9],\"1363\":[2],\"1364\":[5,42],\"1365\":[3,18],\"1366\":[4,39],\"1367\":[2],\"1368\":[3,148],\"1369\":[3,46],\"1370\":[3,95],\"1371\":[2],\"1372\":[3,4],\"1373\":[3,4],\"1374\":[3,11],\"1375\":[5,3],\"1376\":[3,35],\"1377\":[4,7],\"1378\":[3,15],\"1379\":[3,29],\"1380\":[3,24],\"1381\":[5,4],\"1382\":[3,10],\"1383\":[3,23],\"1384\":[2],\"1385\":[4,42],\"1386\":[4,9],\"1387\":[2],\"1388\":[4,53],\"1389\":[4,13],\"1390\":[3,7],\"1391\":[2],\"1392\":[3,71],\"1393\":[3,65],\"1394\":[4,93],\"1395\":[3,27],\"1396\":[4,84],\"1397\":[2,51],\"1398\":[2],\"1399\":[4,8],\"1400\":[4,22],\"1401\":[5,25],\"1402\":[5,8],\"1403\":[5,8],\"1404\":[2,35],\"1405\":[2],\"1406\":[3,18],\"1407\":[5,122],\"1408\":[3,14],\"1409\":[3,1],\"1410\":[3,14],\"1411\":[5,17],\"1412\":[2],\"1413\":[2,6],\"1414\":[2],\"1415\":[4,48],\"1416\":[3,19],\"1417\":[4,3],\"1418\":[2],\"1419\":[3,28],\"1420\":[3,10],\"1421\":[3,10],\"1422\":[2,28],\"1423\":[3,88],\"1424\":[3,24],\"1425\":[3,15],\"1426\":[2,24],\"1427\":[2,88],\"1428\":[3,98],\"1429\":[3,60],\"1430\":[2,33],\"1431\":[3,43],\"1432\":[3,33],\"1433\":[3,68],\"1434\":[3,12],\"1435\":[2,17],\"1436\":[2,46],\"1437\":[2,58],\"1438\":[4,35],\"1439\":[4,43],\"1440\":[2,14],\"1441\":[3,73],\"1442\":[4,13],\"1443\":[3],\"1444\":[1,23],\"1445\":[1,67],\"1446\":[3,160],\"1447\":[1],\"1448\":[2,14],\"1449\":[3,7],\"1450\":[4,45],\"1451\":[2,57],\"1452\":[3,22],\"1453\":[4,55],\"1454\":[2,70],\"1455\":[1,16],\"1456\":[2,48],\"1457\":[2,13],\"1458\":[4,24],\"1459\":[4,26],\"1460\":[2,35],\"1461\":[4,43],\"1462\":[4,36],\"1463\":[4,14],\"1464\":[2,24],\"1465\":[2,20],\"1466\":[2,7],\"1467\":[2,55],\"1468\":[2,42],\"1469\":[4],\"1470\":[4,4],\"1471\":[5,4],\"1472\":[null,null,1],\"1473\":[null,null,2],\"1474\":[1],\"1475\":[2,38],\"1476\":[2],\"1477\":[2,9],\"1478\":[2,11],\"1479\":[3,3],\"1480\":[2,27],\"1481\":[5],\"1482\":[5,30],\"1483\":[4,41],\"1484\":[5,20],\"1485\":[4,70],\"1486\":[3,116],\"1487\":[3,38],\"1488\":[3,59],\"1489\":[4],\"1490\":[3,25],\"1491\":[3,44],\"1492\":[4,35],\"1493\":[3,105],\"1494\":[3,50],\"1495\":[2],\"1496\":[3,32],\"1497\":[3,51],\"1498\":[3,61],\"1499\":[3,104],\"1500\":[2,30],\"1501\":[4,25],\"1502\":[2,20],\"1503\":[4],\"1504\":[4,14],\"1505\":[4,11],\"1506\":[4,16],\"1507\":[2,54],\"1508\":[4,29],\"1509\":[2,14],\"1510\":[4],\"1511\":[4,8],\"1512\":[4,4],\"1513\":[2],\"1514\":[2,10],\"1515\":[2,55],\"1516\":[2,36],\"1517\":[2],\"1518\":[4,47],\"1519\":[2,74],\"1520\":[null,null,1],\"1521\":[null,null,2],\"1522\":[1],\"1523\":[null,null,1],\"1524\":[null,null,1],\"1525\":[1],\"1526\":[2,157],\"1527\":[4,21],\"1528\":[4,10],\"1529\":[5,15],\"1530\":[4,92],\"1531\":[null,null,1],\"1532\":[null,null,1],\"1533\":[1,24],\"1534\":[1,59],\"1535\":[1,35],\"1536\":[1,13],\"1537\":[1,88],\"1538\":[1,2],\"1539\":[2,49],\"1540\":[1,18],\"1541\":[1,27],\"1542\":[1,19],\"1543\":[3,46],\"1544\":[1,4],\"1545\":[1,3],\"1546\":[null,null,1],\"1547\":[null,null,1],\"1548\":[1],\"1549\":[null,null,1],\"1550\":[null,null,3],\"1551\":[1],\"1552\":[2],\"1553\":[3,7],\"1554\":[3,14],\"1555\":[3,34],\"1556\":[3,59],\"1557\":[2],\"1558\":[2,61],\"1559\":[3,33],\"1560\":[2,102],\"1561\":[null,null,1],\"1562\":[null,null,1],\"1563\":[1],\"1564\":[1],\"1565\":[null,null,1],\"1566\":[null,null,5],\"1567\":[1],\"1568\":[2,13],\"1569\":[2,92],\"1570\":[2,46],\"1571\":[2,10],\"1572\":[2,66],\"1573\":[3,42],\"1574\":[4],\"1575\":[2,72],\"1576\":[3,81],\"1577\":[3,73],\"1578\":[4,38],\"1579\":[3,26],\"1580\":[2,22],\"1581\":[2,26],\"1582\":[2,44],\"1583\":[4,25],\"1584\":[3,38],\"1585\":[3,23],\"1586\":[2,44],\"1587\":[4,46],\"1588\":[2],\"1589\":[2,14],\"1590\":[2],\"1591\":[2,22],\"1592\":[1,37],\"1593\":[2,19],\"1594\":[1,16],\"1595\":[1,10],\"1596\":[null,null,1],\"1597\":[null,null,2],\"1598\":[1],\"1599\":[2,14],\"1600\":[2,27],\"1601\":[2,24],\"1602\":[2,16],\"1603\":[3,9],\"1604\":[2],\"1605\":[2,22],\"1606\":[1,9],\"1607\":[1,38],\"1608\":[3,2],\"1609\":[1,27],\"1610\":[1,2],\"1611\":[1,6],\"1612\":[4,46],\"1613\":[3,26],\"1614\":[2,22],\"1615\":[2,17],\"1616\":[2,8],\"1617\":[null,null,1],\"1618\":[null,null,4],\"1619\":[1],\"1620\":[2],\"1621\":[2,46],\"1622\":[2,10],\"1623\":[2,2],\"1624\":[4,2],\"1625\":[2],\"1626\":[2,32],\"1627\":[2,14],\"1628\":[2,12],\"1629\":[2,10],\"1630\":[2,29],\"1631\":[2],\"1632\":[1,32],\"1633\":[2,8],\"1634\":[2,28],\"1635\":[1,67],\"1636\":[2,21],\"1637\":[2],\"1638\":[1,4],\"1639\":[2,15],\"1640\":[3,15],\"1641\":[null,null,1],\"1642\":[null,null,1],\"1643\":[1],\"1644\":[3,37],\"1645\":[4,25],\"1646\":[4,50],\"1647\":[2,56],\"1648\":[2,56],\"1649\":[2,81],\"1650\":[2,3],\"1651\":[null,null,1],\"1652\":[null,null,2],\"1653\":[1],\"1654\":[2],\"1655\":[2,213],\"1656\":[2,78],\"1657\":[2],\"1658\":[2,53],\"1659\":[2,86],\"1660\":[2],\"1661\":[2,60],\"1662\":[2,69],\"1663\":[2,105],\"1664\":[2,28],\"1665\":[2,88],\"1666\":[2,79],\"1667\":[2,98],\"1668\":[2],\"1669\":[2,50],\"1670\":[2,33],\"1671\":[2,47],\"1672\":[2],\"1673\":[2,77],\"1674\":[2,40],\"1675\":[3,25],\"1676\":[3,18],\"1677\":[2,20],\"1678\":[2,48],\"1679\":[2],\"1680\":[2,94],\"1681\":[null,null,1],\"1682\":[null,null,1],\"1683\":[1],\"1684\":[2,13],\"1685\":[2,23],\"1686\":[2,20],\"1687\":[1,10],\"1688\":[1,7],\"1689\":[1,8],\"1690\":[1,9],\"1691\":[1,9],\"1692\":[2,6],\"1693\":[2,7],\"1694\":[2],\"1695\":[2,7],\"1696\":[2,6],\"1697\":[2,8],\"1698\":[2,14],\"1699\":[2,10],\"1700\":[2,4],\"1701\":[2,6],\"1702\":[2,22],\"1703\":[2,5],\"1704\":[2],\"1705\":[2,55],\"1706\":[null,null,1],\"1707\":[null,null,1],\"1708\":[1],\"1709\":[2],\"1710\":[2],\"1711\":[1,35],\"1712\":[1,26],\"1713\":[2],\"1714\":[1,11],\"1715\":[1,11],\"1716\":[2],\"1717\":[1,6],\"1718\":[1,25],\"1719\":[2],\"1720\":[1,35],\"1721\":[1,22],\"1722\":[3,56],\"1723\":[2,88],\"1724\":[2],\"1725\":[2,19],\"1726\":[2,22],\"1727\":[2,18],\"1728\":[2,40],\"1729\":[2,22],\"1730\":[2],\"1731\":[2,29],\"1732\":[2,14],\"1733\":[2,12],\"1734\":[2,10],\"1735\":[2,24],\"1736\":[2,6],\"1737\":[2,38],\"1738\":[2,17],\"1739\":[2],\"1740\":[2,34],\"1741\":[2,11],\"1742\":[4,15],\"1743\":[5,13],\"1744\":[2],\"1745\":[2,34],\"1746\":[2,29],\"1747\":[2,22],\"1748\":[2,27],\"1749\":[2],\"1750\":[2,13],\"1751\":[2,33],\"1752\":[2,28],\"1753\":[2,54],\"1754\":[null,null,1],\"1755\":[null,null,1],\"1756\":[1],\"1757\":[2,13],\"1758\":[2,2],\"1759\":[2],\"1760\":[2],\"1761\":[2,1],\"1762\":[2,1],\"1763\":[2,1],\"1764\":[null,null,1],\"1765\":[null,null,1],\"1766\":[3],\"1767\":[1,9],\"1768\":[1,19],\"1769\":[1,50],\"1770\":[null,null,1],\"1771\":[null,null,1],\"1772\":[1,37],\"1773\":[null,null,1],\"1774\":[null,null,1],\"1775\":[1],\"1776\":[3,47],\"1777\":[3,121],\"1778\":[3,50],\"1779\":[2,48],\"1780\":[null,null,1],\"1781\":[null,null,1],\"1782\":[3,50],\"1783\":[2,9],\"1784\":[2,83],\"1785\":[2,121],\"1786\":[3,112],\"1787\":[3],\"1788\":[3,119],\"1789\":[3,257],\"1790\":[2,50],\"1791\":[2,114],\"1792\":[2,363],\"1793\":[1,79],\"1794\":[1,106],\"1795\":[2,118],\"1796\":[2,85],\"1797\":[1,112],\"1798\":[2,1],\"1799\":[2,138],\"1800\":[2,54],\"1801\":[2,17],\"1802\":[1,162],\"1803\":[3,130],\"1804\":[3,303],\"1805\":[2,108],\"1806\":[2,78],\"1807\":[2,75],\"1808\":[2,6],\"1809\":[2,10],\"1810\":[2,35],\"1811\":[1],\"1812\":[1],\"1813\":[2,12],\"1814\":[2,28],\"1815\":[2,39],\"1816\":[2,44],\"1817\":[2,23],\"1818\":[2,14],\"1819\":[1],\"1820\":[1],\"1821\":[2,24],\"1822\":[2,94],\"1823\":[3],\"1824\":[3,57],\"1825\":[3,128],\"1826\":[3,18],\"1827\":[5,35],\"1828\":[4,57],\"1829\":[null,null,1],\"1830\":[null,null,1],\"1831\":[3],\"1832\":[2,2],\"1833\":[3,4],\"1834\":[4,90],\"1835\":[4,61],\"1836\":[2,64],\"1837\":[2],\"1838\":[3,32],\"1839\":[3,2],\"1840\":[3,32],\"1841\":[1,25],\"1842\":[1,34],\"1843\":[2],\"1844\":[2],\"1845\":[2,24],\"1846\":[2,9],\"1847\":[2,21],\"1848\":[2],\"1849\":[1,38],\"1850\":[1,13],\"1851\":[2],\"1852\":[2,5],\"1853\":[2],\"1854\":[1,45],\"1855\":[1,48],\"1856\":[5],\"1857\":[1,12],\"1858\":[1,15],\"1859\":[3,22],\"1860\":[3,24],\"1861\":[2,14],\"1862\":[2,71],\"1863\":[2,2],\"1864\":[2,62],\"1865\":[2,44],\"1866\":[3,13],\"1867\":[2,12],\"1868\":[null,null,1],\"1869\":[null,null,1],\"1870\":[3,5],\"1871\":[5],\"1872\":[4,40],\"1873\":[4,23],\"1874\":[4,27],\"1875\":[2,21],\"1876\":[3],\"1877\":[3,38],\"1878\":[2,62],\"1879\":[2,60],\"1880\":[2,35],\"1881\":[2],\"1882\":[null,null,1],\"1883\":[null,null,1],\"1884\":[2],\"1885\":[2,5],\"1886\":[2,52],\"1887\":[2],\"1888\":[2,60],\"1889\":[3,107],\"1890\":[2,128],\"1891\":[4,57],\"1892\":[2,54],\"1893\":[2,70],\"1894\":[2,46],\"1895\":[3,36],\"1896\":[4,83],\"1897\":[3,194],\"1898\":[null,null,1],\"1899\":[null,null,1],\"1900\":[2,5],\"1901\":[5,22],\"1902\":[4,80],\"1903\":[6,38],\"1904\":[2,14],\"1905\":[2,32],\"1906\":[2,112],\"1907\":[3,28],\"1908\":[2],\"1909\":[2,53],\"1910\":[2,94],\"1911\":[2,29],\"1912\":[2,33],\"1913\":[2,39],\"1914\":[2,82],\"1915\":[2,42],\"1916\":[3,19],\"1917\":[1,98],\"1918\":[3,75],\"1919\":[2],\"1920\":[2,34],\"1921\":[2,67],\"1922\":[2,19],\"1923\":[2,119],\"1924\":[1,43],\"1925\":[2,111],\"1926\":[5,65],\"1927\":[5,89],\"1928\":[2,78],\"1929\":[2,127],\"1930\":[3,90],\"1931\":[2,80],\"1932\":[5,109],\"1933\":[null,null,1],\"1934\":[null,null,1],\"1935\":[2,26],\"1936\":[3,40],\"1937\":[2,71],\"1938\":[3,69],\"1939\":[null,null,1],\"1940\":[null,null,1],\"1941\":[2],\"1942\":[2],\"1943\":[2,25],\"1944\":[3,61],\"1945\":[2],\"1946\":[3,28],\"1947\":[2],\"1948\":[1,68],\"1949\":[1,123],\"1950\":[2,21],\"1951\":[2,132],\"1952\":[2],\"1953\":[2,80],\"1954\":[2,294],\"1955\":[2,63],\"1956\":[2,74],\"1957\":[null,null,1],\"1958\":[null,null,1],\"1959\":[3,10],\"1960\":[3],\"1961\":[4,36],\"1962\":[4,154],\"1963\":[3],\"1964\":[4,24],\"1965\":[4,72],\"1966\":[4,93],\"1967\":[3],\"1968\":[2,72],\"1969\":[2,146],\"1970\":[null,null,1],\"1971\":[null,null,1],\"1972\":[2,33],\"1973\":[2,2],\"1974\":[2,207],\"1975\":[2,59],\"1976\":[2,38],\"1977\":[2,123],\"1978\":[3,107],\"1979\":[2,123],\"1980\":[null,null,1],\"1981\":[null,null,1],\"1982\":[1],\"1983\":[2],\"1984\":[2,46],\"1985\":[2,53],\"1986\":[2,36],\"1987\":[2,69],\"1988\":[2],\"1989\":[2,13],\"1990\":[2,71],\"1991\":[2,38],\"1992\":[2,43],\"1993\":[2,166],\"1994\":[null,null,1],\"1995\":[null,null,1],\"1996\":[1],\"1997\":[2,61],\"1998\":[2,70],\"1999\":[2],\"2000\":[2,41],\"2001\":[2,86],\"2002\":[2,120],\"2003\":[2,16],\"2004\":[null,null,1],\"2005\":[null,null,1],\"2006\":[3,4],\"2007\":[3],\"2008\":[3,11],\"2009\":[3,4],\"2010\":[5,17],\"2011\":[4,13],\"2012\":[3,32],\"2013\":[3,27],\"2014\":[2,2],\"2015\":[2,29],\"2016\":[3,124],\"2017\":[3],\"2018\":[2,16],\"2019\":[2,100],\"2020\":[2,67],\"2021\":[2,34],\"2022\":[null,null,1],\"2023\":[null,null,1],\"2024\":[3,5],\"2025\":[2,37],\"2026\":[2,89],\"2027\":[3,50],\"2028\":[3,100],\"2029\":[3,223],\"2030\":[2,43],\"2031\":[3,127],\"2032\":[3,59],\"2033\":[2,9],\"2034\":[2,100],\"2035\":[6,57],\"2036\":[null,null,1],\"2037\":[null,null,1],\"2038\":[4,10],\"2039\":[3],\"2040\":[2,91],\"2041\":[2,143],\"2042\":[3,81],\"2043\":[2,84],\"2044\":[3,61],\"2045\":[3,92],\"2046\":[2,30],\"2047\":[3,294],\"2048\":[3,57],\"2049\":[3,49],\"2050\":[3,179],\"2051\":[3,78],\"2052\":[3,25],\"2053\":[2,109],\"2054\":[3,71],\"2055\":[2,78],\"2056\":[3],\"2057\":[2,48],\"2058\":[2,390],\"2059\":[3,18],\"2060\":[2,55],\"2061\":[2,290],\"2062\":[3,51],\"2063\":[2,54],\"2064\":[2,57],\"2065\":[2,293],\"2066\":[2,60],\"2067\":[3,30],\"2068\":[3,155],\"2069\":[2,126],\"2070\":[2,125],\"2071\":[2,82],\"2072\":[2,61],\"2073\":[1,86],\"2074\":[1,85],\"2075\":[1,132],\"2076\":[1,28],\"2077\":[2],\"2078\":[1,30],\"2079\":[1,29],\"2080\":[1,35],\"2081\":[1,34],\"2082\":[1,21],\"2083\":[1,26],\"2084\":[1,31],\"2085\":[null,null,1],\"2086\":[null,null,1],\"2087\":[2,47],\"2088\":[1,99],\"2089\":[null,null,1],\"2090\":[null,null,2],\"2091\":[2,116],\"2092\":[null,null,1],\"2093\":[null,null,2],\"2094\":[2,14],\"2095\":[1,53],\"2096\":[null,null,1],\"2097\":[null,null,2],\"2098\":[1],\"2099\":[1,46],\"2100\":[1,43],\"2101\":[3,67],\"2102\":[null,null,1],\"2103\":[null,null,2],\"2104\":[1,3],\"2105\":[1],\"2106\":[2],\"2107\":[2],\"2108\":[1],\"2109\":[1],\"2110\":[1],\"2111\":[2],\"2112\":[1],\"2113\":[1],\"2114\":[1],\"2115\":[1],\"2116\":[1],\"2117\":[1],\"2118\":[1],\"2119\":[1],\"2120\":[1],\"2121\":[2]},\"averageFieldLength\":[2.2649919969494827,38.281883986315464,0.4859800357635146],\"storedFields\":{\"0\":{\"h\":\"介绍页\",\"t\":[\"将你的个人介绍和档案放置在此处。\"]},\"1\":{\"h\":\"Git管理\"},\"2\":{\"h\":\"一、安装\",\"t\":[\"阿里的 git 镜像站：https://npm.taobao.org/mirrors/git-for-windows/，下载安装即可\"]},\"3\":{\"h\":\"二、配置\",\"t\":[\"配置 name 和 email（标识自己身份）\",\"git config --global user.name \\\"xxxx\\\" git config --global user.email \\\"xxx@xxx.xxx\\\"\",\"查看当前的 Git 配置\",\"git config --list\"]},\"4\":{\"h\":\"三、使用 git\"},\"5\":{\"h\":\"1. 查看当前仓库的状态\",\"t\":[\"git status\"]},\"6\":{\"h\":\"2. 初始化仓库\",\"t\":[\"git init\"]},\"7\":{\"h\":\"3. 文件状态\",\"t\":[\"未跟踪\",\"文件没有被 git 所管理\",\"已跟踪\",\"文件已经被 git 所管理\",\"暂存，文件修改已经保存，但是尚未提交到 git 仓库\",\"未修改，表示磁盘中的文件和 git 仓库中的文件相同，没有修改\",\"已修改，表示磁盘中的文件已被修改，和 git 仓库中文件不同\",\"可以使用git status来查看文件的状态\",\"未跟踪 → 暂存\",\"git add <filename> 将文件切换到暂存的状态 git add * 将所有已修改（未跟踪）的文件暂存\",\"暂存 → 未修改（将本地修改的代码提交到仓库与之同步）\",\"git commit -m \\\"xxxx\\\" 将暂存的文件存储到仓库中 git commit -a -m \\\"xxxx\\\" 提交所有已修改的文件（未跟踪的文件不会提交）\",\"未修改 → 修改\",\"修改代码后，文件会变为修改状态\"]},\"8\":{\"h\":\"4. 常用的命令\",\"t\":[\"重置文件\",\"git restore <filename> # 恢复文件 git restore --staged <filename> # 取消暂存状态（不取消操作）\",\"删除文件\",\"git rm <filename> # 删除文件 git rm <filename> -f # 强制删除\",\"移动文件\",\"git mv from to # 移动文件 重命名文件\"]},\"9\":{\"h\":\"四、分支\"},\"10\":{\"h\":\"1. 基本操作\",\"t\":[\"git 在存储文件时，每一次代码的提交都会创建一个与之对应的节点（存档），git 就是通过一个一个的节点来记录代码的状态的。节点会构成一个树状结构，树状结构就意味着这个树会存在分支，默认情况下仓库只有一个分支，命名为 master。在使用 git 时，可以创建多个分支，分支与分支之间相互独立，在一个分支上修改代码不会影响其他的分支。\",\"git branch # 查看当前分支 # 在新的分支上完成功能 git branch <branch name> # 创建新的分支 git switch <branch name> # 切换分支 git switch -c <branch name> # 创建并切换分支 # 当功能开发完成时首先切回主分支，然后合并新开发功能的分支 # 测试没有问题后，将原有开发分支删除 git merge <branch name> # 和并分支 git branch -d <branch name> # 删除分支\",\"在开发中，都是在自己的分支上编写代码，代码编写完成后，再将自己的分支合并到主分支中。\"]},\"11\":{\"h\":\"2. 变基（rebase）\",\"t\":[\"在开发中除了通过 merge 来合并分支外，还可以通过变基来完成分支的合并。\",\"我们通过 merge 合并分支时，在提交记录中会将所有的分支创建和分支合并的过程全部都显示出来，这样当项目比较复杂，开发过程比较波折时，我必须要反复的创建、合并、删除分支。这样一来将会使得我们代码的提交记录变得极为混乱。\",\" git rebase master\",\"原理（变基时发生了什么）：\",\"当我们发起变基时，git 会首先找到两条分支的最近的共同祖先\",\"对比当前分支相对于祖先的历史提交，并且将它们提取出来存储到一个临时文件中\",\"将当前部分指向目标的基底\",\"以当前基底开始，重新执行历史操作\",\"先将自己分支上的修改保存起来，在主分支新的代码之后重新进行这些操作（自己的改变先按兵不动，将新的代码拿过来再尝试将自己的修改应用到新代码中）\",\"image-20230427172648863\",\"变基和 merge 对于合并分支来说最终的结果是一样的！但是变基会使得代码的提交记录更整洁更清晰！注意！大部分情况下合并和变基是可以互换的，但是如果分支已经提交给了远程仓库，那么这时尽量不要变基。\"]},\"12\":{\"h\":\"五、远程仓库（remote）\",\"t\":[\"目前我们对于 git 所有操作都是在本地进行的。在开发中显然不能这样的，这时我们就需要一个远程的 git 仓库。远程的 git 仓库和本地的本质没有什么区别，不同点在于远程的仓库可以被多人同时访问使用，方便我们协同开发。在实际工作中，git 的服务器通常由公司搭建内部使用或是购买一些公共的私有 git 服务器。我们学习阶段，直接使用一些开放的公共 git 仓库。目前我们常用的库有两个：GitHub 和 Gitee（码云）\",\"将本地库上传 git：\",\"git remote add origin https://github.com/lilichao/git-demo.git # git remote add <remote name> <url> git branch -M main # 修改分支的名字的为main git push -u origin main # git push [remote] [branch] # git push 将代码上传服务器上\",\"将本地库上传 gitee：\",\"git remote add gitee https://gitee.com/ymhold/vue-course.git git push -u gitee main\"]},\"13\":{\"h\":\"1. 远程库的操作的命令\",\"t\":[\"git remote # 列出当前的关联的远程库 git remote add <远程库名> <url> # 关联远程仓库 git remote remove <远程库名> # 删除关联的远程库 git push -u <远程库名> <分支名> # 向远程库推送代码，并和当前分支关联 git push <远程库> <本地分支>:<远程分支> git clone <url> # 从远程库下载代码 git push # 如果本地的版本低于远程库，push默认是推不上去 git fetch # 要想推送成功，必须先确保本地库和远程库的版本一致，fetch它会从远程仓库下载所有代码，但是它不会将代码和当前分支自动合并 # 使用fetch拉取代码后，必须要手动对代码进行合并 git merge <远程库名/远程分支> git pull # 从服务器上拉取代码并自动合并\",\"注意：推送代码之前，一定要先从远程库中拉取最新的代码\"]},\"14\":{\"h\":\"2. tag 标签\",\"t\":[\"当头指针没有执行某个分支的头部时，这种状态我们称为分离头指针（HEAD detached），分离头指针的状态下也可以操作代码，但是这些操作不会出现在任何的分支上，所以注意不要再分离头指针的状态下来操作仓库。\",\"如果非得要回到后边的节点对代码进行操作，则可以选择创建分支后再操作\",\"git switch -c <分支名> <提交id>\",\"可以为提交记录设置标签，设置标签以后，可以通过标签快速的识别出不同的开发节点：\",\"git tag git tag 版本 git tag 版本 提交id git push 远程仓库 标签名 git push 远程仓库 --tags git tag -d 标签名 # 删除标签 git push 远程仓库 --delete 标签名 # 删除远程标签\"]},\"15\":{\"h\":\"3. gitignore\",\"t\":[\"默认情况下，git 会监视项目中所有内容，但是有些内容比如 node_modules 目录中的内容，我们不希望它被 git 所管理。我们可以在项目目录中添加一个.gitignore文件，来设置那些需要 git 忽略的文件。\",\"# Numerous always-ignore extensions *.bak *.patch *.diff *.err # temp file for git conflict merging *.orig *.log *.rej *.swo *.swp *.zip *.vi *~ *.sass-cache *.tmp.html *.dump # OS or Editor folders .DS_Store ._* .cache .project .settings .tmproj *.esproj *.sublime-project *.sublime-workspace nbproject thumbs.db *.iml # Folders to ignore .hg .svn .CVS .idea node_modules/ jscoverage_lib/ bower_components/ dist/\"]},\"16\":{\"h\":\"4. github 的静态页面\",\"t\":[\"在 github 中，可以将自己的静态页面直接部署到 github 中，它会给我们提供一个地址使得我们的页面变成一个真正的网站，可以供用户访问。\",\"要求： \",\"静态页面的分支必须叫做：gh-pages\",\"如果希望页面可以通过 xxx.github.io 访问，则需要将库的名字配置为 xxx.github.io\"]},\"17\":{\"h\":\"六、常规工作流\",\"t\":[\"将远程仓库复制到本地\",\"git clone https://github.com/example/example.git\",\"新建一个自己的分支\",\"git checkout -b my-feature or git switch -c my-feature\",\"修改代码（添加功能、修改 bug...），此时可以通过下述命令查看代码变化（非必须）\",\"git diff\",\"添加改变到暂存区\",\"git add <changed_file>\",\"将改变提交到本地 git 仓库\",\"git commit -m 'fix xxx'\",\"如果此时远程仓库没有更新，可以将改变提交到远程仓库\",\"git push origin my-feature\",\"如果此时远程仓库存在更新，则本地的版本低于远程库，push 默认推不上去，此时需要先同步远程仓库的变化\",\"git checkout main // git switch main git pull origin master\",\"然后切回自己的分支合并自己的修改与最新代码，当出现冲突的时候选择需要保留的代码\",\"git checkout my-feature // git switch my-feature git rebase main\",\"最后将做出的修改推送到远程仓库\",\"git push -f origin my-feature\",\"请求 pull request\",\"仓库维护者审查代码之后执行 squash and merge，将分支上的改变合并为一个改变并合并，删除远程分支\",\"我们同样要删除本地的分支并拉取最新的代码\",\"git branch -D my-feature git pull origin master\"]},\"18\":{\"c\":[\"前端\"]},\"19\":{\"c\":[\"Git\"]},\"20\":{\"h\":\"模块化编程\"},\"21\":{\"h\":\"一、模块化发展史\"},\"22\":{\"h\":\"1. 第一阶段\",\"t\":[\"在 JavaScript 语言刚刚诞生的时候，它仅仅用于实现页面中的一些小效果。那个时候，一个页面所用到的 JS 可能只有区区几百行的代码。\",\"在这种情况下，语言本身所存在的一些缺陷往往被大家有意的忽略，因为程序的规模实在太小，只要开发人员小心谨慎，往往不会造成什么问题。\",\"在这个阶段，也不存在专业的前端工程师，由于前端要做的事情实在太少，因此这一部分工作往往由后端工程师顺带完成\",\"第一阶段发生的大事件：\",\"1996 年，NetScape 将 JavaScript 语言提交给欧洲的一个标准制定阻止 ECMA（欧洲计算机制造商协会）\",\"1998 年，NetScape 在与微软浏览器 IE 的竞争中失利，宣布破产\"]},\"23\":{\"h\":\"2. 第二阶段\",\"t\":[\"ajax 的出现，逐渐改变了 JavaScript 在浏览器中扮演的角色。现在，它不仅可以实现小的效果，还可以和服务器之间进行交互，以更好的体验来改变数据。JS 代码的数量开始逐渐增长，从最初的几百行，到后来的几万行，前端程序逐渐变得复杂。后端开发者压力逐渐增加，致使一些公司开始招募专业的前端开发者。\",\"但此时，前端开发者的待遇远不及后端开发者，因为前端开发者承担的开发任务相对于后端开发来说，还是比较简单的，通过短短一个月的时间集训，就可以成为满足前端开发的需要。\",\"究其根本原因，是因为前端开发还有几个大的问题没有解决，这些问题都严重的制约了前端程序的规模进一步扩大：\",\"浏览器解释执行 JS 的速度太慢\",\"用户端的电脑配置不足\",\"更多的代码带来了全局变量污染、依赖关系混乱等问题\",\"上面三个问题，就像是阿喀琉斯之踵，成为前端开发挥之不去的阴影和原罪。在这个阶段，前端开发处在一个非常尴尬的境地，它在传统的开发模式和前后端分离之间无助的徘徊。\",\"第二阶段的大事件：\",\"IE 浏览器制霸市场后，几乎不再更新\",\"ES4.0 流产，导致 JS 语言 10 年间几乎毫无变化\",\"2008 年 ES5 发布，仅解决了一些 JS API 不足的糟糕局面\"]},\"24\":{\"h\":\"3. 第三阶段\",\"t\":[\"时间继续向前推移，到了 2008 年，谷歌的 V8 引擎发布，将 JS 的执行速度推上了一个新的台阶，甚至可以和后端语言媲美。摩尔定律持续发酵，个人电脑的配置开始飞跃，突然间，制约前端发展的两大问题得以解决，此时，只剩下最后一个问题还在负隅顽抗，即 全局变量污染和依赖混乱 的问题，解决了它，前端便可以突破一切障碍，未来无可限量。\",\"于是，全世界的前端开发者在社区中激烈的讨论，想要为这个问题寻求解决之道......\",\"2008 年，有一个名叫 Ryan Dahl 小伙子正在为一件事焦头烂额，它需要在服务器端手写一个高性能的 web 服务，该服务对于性能要求之高，以至于目前市面上已有的 web 服务产品都满足不了需求。\",\"经过分析，它确定，如果要实现高性能，那么必须要尽可能的减少线程，而要减少线程，避免不了要实用异步的处理方案。一开始，他打算自己实用 C/C++语言来编写，可是这一过程实在太痛苦。\",\"就在他一筹莫展的时候，谷歌 V8 引擎的发布引起了他的注意，他突然发现，JS 不就是最好的实现 web 服务的语言吗？它天生就是单线程，并且是基于异步的！有了 V8 引擎的支撑，它的执行速度完全可以撑起一个服务器。而且 V8 是鼎鼎大名的谷歌公司发布的，谷歌一定会不断的优化 V8，有这种又省钱又省力的好事，我干嘛还要自己去写呢？\",\"于是，它基于开源的 V8 引擎，对源代码作了一些修改，便快速的完成了该项目。2009 年，Ryan 推出了该 web 服务项目，命名为 nodejs。\",\"从此，JS 第一次堂堂正正的入主后端，不再是必须附属于浏览器的“玩具”语言了。也是从此刻开始，人们认识到，JS（ES）是一门真正的语言，它依附于运行环境（运行时）（宿主程序）而执行。\",\"nodejs 的诞生，便把 JS 中的最后一个问题放到了台前，即 全局变量污染和依赖混乱 问题。要知道，nodejs 是服务器端，如果不解决这个问题，分模块开发就无从实现，而模块化开发是所有后端程序必不可少的内容。\",\"经过社区的激烈讨论，最终，形成了一个模块化方案，即鼎鼎大名的 CommonJS ，该方案，彻底解决了全局变量污染和依赖混乱的问题。该方案一出，立即被 nodejs 支持，于是，nodejs 成为了第一个为 JS 语言实现模块化的平台，为前端接下来的迅猛发展奠定了实践基础。\",\"该阶段发生的大事件：\",\"2008 年，V8 发布\",\"IE 的市场逐步被 firefox 和 chrome 蚕食，现已无力回天\",\"2009 年，nodejs 发布，并附带 commonjs 模块化标准\"]},\"25\":{\"h\":\"4. 第四阶段\",\"t\":[\"CommonJS 的出现打开了前端开发者的思路，既然后端可以使用模块化的 JS，作为 JS 语言的老东家浏览器为什么不行呢？于是，开始有人想办法把 CommonJS 运用到浏览器中，可是这里面存在诸多的困难。办法总比困难多，有些开发者就想，既然 CommonJS 运用到浏览器困难，我们干嘛不自己重新定一个模块化的标准出来，难道就一定要用 CommonJS 标准吗？\",\"于是很快，AMD 规范出炉，它解决的问题和 CommonJS 一样，但是可以更好的适应浏览器环境；相继的，CMD 规范出炉，它对 AMD 规范进行了改进，这些行为，都受到了 ECMA 官方的密切关注......，2015 年，ES6 发布，它提出了官方的模块化解决方案 —— ES6 模块化\",\"从此以后，模块化成为了 JS 本身特有的性质，这门语言终于有了和其他语言较量的资本，成为了可以编写大型应用的正式语言。于此同时，很多开发者、技术厂商早已预见到 JS 的无穷潜力，于是有了下面的故事\",\"既然 JS 也能编写大型应用，那么自然也需要像其他语言那样有解决复杂问题的开发框架 \",\"Angular、React、Vue 等前端开发框架出现\",\"Express、Koa 等后端开发框架出现\",\"各种后端数据库驱动出现\",\"要开发大型应用，自然少不了各种实用的第三方库的支持 \",\"npm 包管理器出现，实用第三方库变得极其方便\",\"webpack 等构建工具出现，专门用于打包和部署\",\"既然 JS 可以放到服务器环境，为什么不能放到其他终端环境呢？ \",\"Electron 发布，可以使用 JS 语言开发桌面应用程序\",\"RN 和 Vuex 等技术发布，可以使用 JS 语言编写移动端应用程序\",\"各种小程序出现，可以使用 JS 编写依附于其他应用的小程序\",\"目前还有很多厂商致力于将 JS 应用到各种其他的终端设备，最终形成大前端生态\",\"可以看到，模块化的出现，是 JS 通向大型应用的基石，学习好模块化，变具备了编写大型应用的基本功。\"]},\"26\":{\"h\":\"二、之前的解决方案\"},\"27\":{\"h\":\"1. 全局 function 模式\",\"t\":[\"module1.js\",\"//数据 let data = 'atguigu.com'; //操作数据的函数 function foo() { console.log(`foo() ${data}`); } function bar() { console.log(`bar() ${data}`); }\",\"module2.js\",\"let data2 = 'other data'; function foo() { //与另一个模块中的函数冲突了 console.log(`foo() ${data2}`); }\",\"test1.html\",\"<script type=\\\"text/javascript\\\" src=\\\"module1.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"module2.js\\\"></script> <script type=\\\"text/javascript\\\"> let data = '修改后的数据'; foo(); bar(); </script>\",\"全局函数模式: 将不同的功能封装成不同的全局函数\",\"问题: Global 被污染了, 很容易引起命名冲突\"]},\"28\":{\"h\":\"2. namespace 模式\",\"t\":[\"module1.js\",\"let myModule = { data: 'atguigu.com', foo() { console.log(`foo() ${this.data}`); }, bar() { console.log(`bar() ${this.data}`); }, };\",\"module2.js\",\"let myModule2 = { data: 'atguigu.com2222', foo() { console.log(`foo() ${this.data}`); }, bar() { console.log(`bar() ${this.data}`); }, };\",\"test2.html\",\"<script type=\\\"text/javascript\\\" src=\\\"module1.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"module2.js\\\"></script> <script type=\\\"text/javascript\\\"> myModule.foo(); myModule.bar(); myModule2.foo(); myModule2.bar(); myModule.data = 'other data'; //能直接修改模块内部的数据 myModule.foo(); </script>\",\"namespace 模式: 简单对象封装\",\"作用: 减少了全局变量\",\"问题: 不安全\"]},\"29\":{\"h\":\"3. IIFE 模式\",\"t\":[\"module3.js\",\"(function (window) { //数据 let data = 'atguigu.com'; //操作数据的函数 function foo() { //用于暴露有函数 console.log(`foo() ${data}`); } function bar() { //用于暴露有函数 console.log(`bar() ${data}`); otherFun(); //内部调用 } function otherFun() { //内部私有的函数 console.log('otherFun()'); } //暴露行为 window.myModule = { foo, bar }; })(window);\",\"test3.html\",\"<script type=\\\"text/javascript\\\" src=\\\"module3.js\\\"></script> <script type=\\\"text/javascript\\\"> myModule.foo(); myModule.bar(); //myModule.otherFun() //myModule.otherFun is not a function console.log(myModule.data); //undefined 不能访问模块内部数据 myModule.data = 'xxxx'; //不是修改的模块内部的data myModule.foo(); //没有改变 </script>\",\"IIFE 模式: 匿名函数自调用(闭包)\",\"IIFE : immediately-invoked function expression(立即调用函数表达式)\",\"作用: 数据是私有的, 外部只能通过暴露的方法操作\",\"问题: 如果当前这个模块依赖另一个模块怎么办?\"]},\"30\":{\"h\":\"4. IIFE 模式增强\",\"t\":[\"引入 jquery 到项目中\",\"module4.js\",\"(function (window, $) { //数据 let data = 'atguigu.com'; //操作数据的函数 function foo() { //用于暴露有函数 console.log(`foo() ${data}`); $('body').css('background', 'red'); } function bar() { //用于暴露有函数 console.log(`bar() ${data}`); otherFun(); //内部调用 } function otherFun() { //内部私有的函数 console.log('otherFun()'); } //暴露行为 window.myModule = { foo, bar }; })(window, jQuery);\",\"test4.html\",\"<script type=\\\"text/javascript\\\" src=\\\"jquery-1.10.1.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"module4.js\\\"></script> <script type=\\\"text/javascript\\\"> myModule.foo(); </script>\",\"IIFE 模式增强 : 引入依赖\",\"这就是现代模块实现的基石\"]},\"31\":{\"h\":\"5. 页面加载多个 js 的问题\",\"t\":[\"页面:\",\"<script type=\\\"text/javascript\\\" src=\\\"module1.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"module2.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"module3.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"module4.js\\\"></script>\",\"一个页面需要引入多个 js 文件\",\"问题: \",\"请求过多\",\"依赖模糊\",\"难以维护\",\"这些问题可以通过现代模块化编码和项目构建来解决\"]},\"32\":{\"h\":\"三、CommonJS\"},\"33\":{\"h\":\"1. 下载安装 node.js\"},\"34\":{\"h\":\"2. 创建项目结构\",\"t\":[\"|-modules |-module1.js |-module2.js |-module3.js |-app.js |-package.json { \\\"name\\\": \\\"commonJS-node\\\", \\\"version\\\": \\\"1.0.0\\\" }\"]},\"35\":{\"h\":\"3. 模块化编码\",\"t\":[\"module1.js\",\"module.exports = { foo() { console.log('moudle1 foo()'); }, };\",\"module2.js\",\"module.exports = function () { console.log('module2()'); };\",\"module3.js\",\"exports.foo = function () { console.log('module3 foo()'); }; exports.bar = function () { console.log('module3 bar()'); };\",\"app.js\",\"/** 1. 定义暴露模块: module.exports = value; exports.xxx = value; 2. 引入模块: var module = require(模块名或模块路径); */ 'use strict'; //引用模块 let module1 = require('./modules/module1'); let module2 = require('./modules/module2'); let module3 = require('./modules/module3'); let fs = require('fs'); //使用模块 module1.foo(); module2(); module3.foo(); module3.bar(); fs.readFile('app.js', function (error, data) { console.log(data.toString()); });\"]},\"36\":{\"h\":\"4. 通过 node 运行 app.js\",\"t\":[\"node app.js\"]},\"37\":{\"h\":\"5. CommonJS 的 工作原理\",\"t\":[\"伪代码\",\"function require(modulePath) { //1,根据传递的模块路径，得到模块完整的绝对路径 var moduleId = getModuleId(modulePath); //2.判断缓存 if (cache[moduleId]) { return cache[moduleId]; } //3.真正运行模块代码的辅助函数 function __require(exports, require, module, __filename, __dirname) { //目标模块的代码在这里 } //4.准备并运行铺助函数 var module = { exports: {}, }; var exports = module.exports; //得到模块文件的绝对路径 var __filename = moduleId; //得到模块所在目录的绝对路径 var __dirname = getDirname(__filename); __require.call(exports, exports, require, module, __filename, __dirname); //5.缓存module.exports cache[moduleId] = module.exports; //6.返回module.exports return module.exports; }\",\"模块文件中的this指向exports，exports是module.exports的引用\",\"最后返回的是module.exports\",\"当使用require(模块路径)导入一个模块时，node 会做以下两件事情（不考虑模块缓存）：\",\"通过模块路径找到本机文件，并读取文件内容\",\"将文件中的代码放入到一个函数环境中执行，并将执行后module.exports的值作为require函数的返回结果\",\"正是这两个步骤，使得 CommonJS 在 node 端可以良好的被支持。可以认为，CommonJS 是同步的 ，必须要等到加载完文件并执行完代码后才能继续向后执行。\",\"当浏览器遇到CommonJS\",\"当想要把CommonJS放到浏览器端时，就遇到了一些挑战\",\"浏览器要加载 JS 文件，需要远程从服务器读取，而网络传输的效率远远低于 node 环境中读取本地文件的效率。由于CommonJS是同步的，这会极大的降低运行性能。\",\"如果需要读取 JS 文件内容并把它放入到一个环境中执行，需要浏览器厂商的支持，可是浏览器厂商不愿意提供支持，最大的原因是CommonJS属于社区标准，并非官方标准。\",\"新的规范\",\"基于以上两点原因，浏览器无法支持模块化。可这并不代表模块化不能在浏览器中实现，要在浏览器中实现模块化，只要能解决上面的两个问题就行了。\",\"解决办法其实很简单：\",\"远程加载 JS 浪费了时间？做成 异步 即可，加载完成后调用一个回调就行了\",\"模块中的代码需要放置到函数中执行？编写模块时，直接放函数中就行了\",\"基于这种简单有效的思路，出现了 AMD 和 CMD 规范，有效的解决了浏览器模块化的问题。\"]},\"38\":{\"h\":\"四、AMD\"},\"39\":{\"h\":\"1. 下载 require.js\",\"t\":[\"官网: http://www.requirejs.cn/\",\"github : https://github.com/requirejs/requirejs\",\"将 require.js 导入项目: js/libs/require.js \"]},\"40\":{\"h\":\"2. 创建项目结构\",\"t\":[\"|-js |-libs |-require.js |-modules |-alerter.js |-dataService.js |-main.js |-index.html\"]},\"41\":{\"h\":\"3. 定义模块代码\",\"t\":[\"dataService.js\",\"//没有依赖 define(function () { let msg = 'hello world'; function getMsg() { return msg.toUpperCase(); } return { getMsg }; });\",\"alerter.js\",\"//有依赖模块 define(['dataService', 'jquery'], function (dataService, $) { let name = 'Tom2'; function showMsg() { $('body').css('background', 'gray'); alert(dataService.getMsg() + ', ' + name); } return { showMsg }; });\"]},\"42\":{\"h\":\"4. 应用主入口-main.js\",\"t\":[\"(function () { //配置 require.config({ //基本路径 baseUrl: 'js/', //模块标识名与模块路径映射 paths: { alerter: 'modules/alerter', dataService: 'modules/dataService', }, }); //引入使用模块 require(['alerter'], function (alerter) { alerter.showMsg(); }); })();\"]},\"43\":{\"h\":\"5. 页面使用模块\",\"t\":[\"<script data-main=\\\"js/main\\\" src=\\\"js/libs/require.js\\\"></script>\"]},\"44\":{\"h\":\"6. 使用第三方基于 require.js 的框架(jquery)\",\"t\":[\"将 jquery 的库文件导入到项目:\",\"js/libs/jquery-1.10.1.js\",\"在 main.js 中配置 jquery 路径\",\"paths: { 'jquery': 'libs/jquery-1.10.1' }\",\"在 alerter.js 中使用 jquery\",\"define(['dataService', 'jquery'], function (dataService, $) { var name = 'jack'; function showMsg() { $('body').css({ background: 'red' }); alert(name + ' ' + dataService.getMsg()); } return { showMsg }; });\"]},\"45\":{\"h\":\"7. 使用第三方不基于 require.js 的框架(angular/angular-messages)\",\"t\":[\"将 angular.js 和 angular-messages.js 导入项目\",\"js/libs/angular.js\",\"js/libs/angular-messages.js\",\"在 main.js 中配置\",\"(function () { require.config({ //基本路径 baseUrl: 'js/', //模块标识名与模块路径映射 paths: { //第三方库 jquery: 'libs/jquery-1.10.1', angular: 'libs/angular', 'angular-messages': 'libs/angular-messages', //自定义模块 alerter: 'modules/alerter', dataService: 'modules/dataService', }, /* 配置不兼容AMD的模块 exports : 指定导出的模块名 deps : 指定所有依赖的模块的数组 */ shim: { angular: { exports: 'angular', }, 'angular-messages': { exports: 'angular-messages', deps: ['angular'], }, }, }); //引入使用模块 require(['alerter', 'angular', 'angular-messages'], function (alerter, angular) { alerter.showMsg(); angular.module('myApp', ['ngMessages']); angular.bootstrap(document, ['myApp']); }); })();\",\"页面:\",\"<form name=\\\"myForm\\\"> 用户名: <input type=\\\"text\\\" name=\\\"username\\\" ng-model=\\\"username\\\" ng-required=\\\"true\\\" /> <div style=\\\"color: red;\\\" ng-show=\\\"myForm.username.$dirty&&myForm.username.$invalid\\\"> 用户名是必须的 </div> </form>\"]},\"46\":{\"h\":\"五、ES6\",\"t\":[\"ECMA 组织参考了众多社区模块化标准，终于在 2015 年，随着 ES6 发布了官方的模块化标准，后成为 ES6 模块化\",\"ES6 模块化具有以下的特点\",\"使用依赖 预声明 的方式导入模块 \",\"依赖延迟声明 \",\"优点：某些时候可以提高效率\",\"缺点：无法在一开始确定模块依赖关系（比较模糊）\",\"依赖预声明 \",\"优点：在一开始可以确定模块依赖关系\",\"缺点：某些时候效率较低\",\"灵活的多种导入导出方式\",\"规范的路径表示法：所有路径必须以./或../开头\"]},\"47\":{\"h\":\"1. 模块的引入\",\"t\":[\"注意：这一部分非模块化标准\",\"目前，浏览器使用以下方式引入一个 ES6 模块文件\",\"<script src=\\\"入口文件\\\" type=\\\"module\\\">\",\"浏览器对于带有type=\\\"module\\\"的<script>，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，等同于打开了<script>标签的 defer 属性。\"]},\"48\":{\"h\":\"2. 模块的基本导出和导入\",\"t\":[\"ES6 中的模块导入导出分为两种：\",\"基本导入导出\",\"默认导入导出\"]},\"49\":{\"h\":\"基本导出\",\"t\":[\"类似于 exports.xxx = xxxx，基本导出可以有多个，每个必须有名称，基本导出的语法如下：\",\"export 声明表达式\",\"如：\",\"export var a = 1; export function test(){} export class Person(){} //注意必须是一个声明表达式，下面的做法是错误的 //var b = 1; //export b; //由于不是声明表达式，直接导出b会错误 //export 3\",\"或\",\"export { 具名符号 };\",\"var username = 'abc'; var age = 18; export { username, age }; //注意这里的 {} 并不是指对象，而是具名导出的特殊语法 // 其实具名导出，就相当于 //export var username = \\\"abc\\\"; //export var age = 18;\",\"由于基本导出必须具有名称，所以要求导出内容必须跟上 声明表达式 或 具名符号\"]},\"50\":{\"h\":\"基本导入\",\"t\":[\"由于使用的是 依赖预加载 ，简单来说浏览器 如果发现代码中有 import语句，会提前加载。因此，导入任何其他模块，导入代码必须放置到所有代码之前，对于基本导出，如果要进行导入，使用下面的代码\",\"import { 导入的符号列表 } from '模块路径';\",\"注意以下细节：\",\"导入时，可以通过关键字as对导入的符号进行重命名 \",\"比如 import {name as username,age as age1} from '模块路径'\",\"导入时使用的符号是常量，不可修改 \",\"比如 import {age} from \\\"模块路径\\\" 然后再修改 age 的值的话，会报错，不允许修改模块中变量的值\",\"可以使用*号导入所有的基本导出，形成一个对象 \",\"比如 import * as a from \\\"模块路径\\\"\"]},\"51\":{\"h\":\"3. 默认导出\",\"t\":[\"每个模块，除了允许有多个基本导出之外，还允许有一个默认导出，默认导出类似于 CommonJS 中的module.exports，由于只有一个，因此无需具名，具体的语法是\",\"export default 默认导出的数据;\",\"或\",\"export { 默认导出的数据 as default };\",\"由于每个模块仅允许有一个默认导出，因此，每个模块不能出现多个默认导出语句。\"]},\"52\":{\"h\":\"4. 默认导入\",\"t\":[\"需要想要导入一个模块的默认导出，需要使用下面的语法\",\"import 接收变量名 from '模块路径';\",\"类似于 CommonJS 中的\",\"var 接收变量名 = require('模块路径');\",\"由于默认导入时变量名是自行定义的，因此没有别名一说，如果希望同时导入某个模块的默认导出和基本导出，可以使用下面的语法\",\"import 接收默认导出的变量, { 接收基本导出的变量 } from '模块路径';\",\"注：如果使用*号，会将所有基本导出和默认导出聚合到一个对象中，默认导出会作为属性 default 存在\"]},\"53\":{\"c\":[\"前端\"]},\"54\":{\"c\":[\"模块化\",\"esm\"]},\"55\":{\"h\":\"包管理工具\",\"t\":[\"06_包管理工具\"]},\"56\":{\"h\":\"一、概念介绍\"},\"57\":{\"h\":\"1. 包是什么\",\"t\":[\"『包』英文单词是 package ，代表了一组特定功能的源码集合，就是将一些预先设计好的功能或者说 API 封装到一个文件夹，提供给开发者使用。\"]},\"58\":{\"h\":\"2. 包管理工具\",\"t\":[\"管理『包』的应用软件，可以对「包」进行 下载安装 ， 更新 ， 删除， 上传等操作\",\"借助包管理工具，可以快速开发项目，提升开发效率\",\"包管理工具是一个通用的概念，很多编程语言都有包管理工具，所以 掌握好包管理工具非常重要\"]},\"59\":{\"h\":\"3. 包加载的基本流程\",\"t\":[\"nodejs 对 npm 支持非常良好\",\"当使用 nodejs 导入模块时，如果模块路径不是以 ./ 或 ../ 开头，则 node 会认为导入的模块来自于 node_modules 目录，例如：\",\"var _ = require('lodash');\",\"优先在当前文件夹下 node_modules 中寻找同名的文件夹 \",\"找到该第三方包中的package.json文件，并且找到里面的main属性对应的入口模块，该入口模块即为加载的第三方模块。\",\"如果在要加载的第三方包中没有找到package.json文件或者是package.json文件中没有main属性，则默认加载第三方包中的index.js文件。\",\"如果在加载第三方模块的文件的同级目录没有找到node_modules文件夹，或者以上所有情况都没有找到，则跳到第 2 步继续查找。\",\"在上级目录中下的 node_modules 中寻找同名的文件夹，直至找到磁盘根目录，如果一直找到该模块的磁盘根路径都没有找到，则会报错：can not find module xxx。\"]},\"60\":{\"h\":\"3. 常用的包管理工具\",\"t\":[\"下面列举了前端常用的包管理工具\",\"npm\",\"yarn\",\"cnpm\"]},\"61\":{\"h\":\"二、npm\",\"t\":[\"npm 全称 Node Package Manager ，翻译为中文意思是『Node 的包管理工具』\",\"npm 是 node.js 官方内置的包管理工具，是 必须要掌握住的工具\"]},\"62\":{\"h\":\"1. npm 的安装\",\"t\":[\"node.js 在安装时会 自动安装 npm ，所以如果你已经安装了 node.js，可以直接使用 npm\",\"可以通过 npm -v 查看版本号测试，如果显示版本号说明安装成功，反之安装失败\",\"06_包管理工具\",\"查看版本时可能与上图版本号不一样，不过不影响正常使用\"]},\"63\":{\"h\":\"2. npm 基本使用\"},\"64\":{\"h\":\"初始化\",\"t\":[\"创建一个空目录，然后以此目录作为工作目录 启动命令行工具，执行 npm init\",\"06_包管理工具\",\"npm init 命令的作用是将文件夹初始化为一个『包』， 交互式创建 package.json 文件\",\"package.json 是包的配置文件，每个包都必须要有 package.json\",\"package.json 内容示例：\",\"{ \\\"name\\\": \\\"01_npm\\\", \\\"version\\\": \\\"1.0.0\\\", \\\"description\\\": \\\"\\\", \\\"main\\\": \\\"index.js\\\", \\\"scripts\\\": { \\\"test\\\": \\\"echo \\\\\\\"Error: no test specified\\\\\\\" && exit 1\\\" }, \\\"author\\\": \\\"\\\", \\\"license\\\": \\\"ISC\\\" }\",\"属性翻译\",\"{ \\\"name\\\": \\\"1-npm\\\", #包的名字 \\\"version\\\": \\\"1.0.0\\\", #包的版本 \\\"description\\\": \\\"\\\", #包的描述 \\\"main\\\": \\\"index.js\\\", #包的入口文件 \\\"scripts\\\": { #脚本配置 \\\"test\\\": \\\"echo \\\\\\\"Error: no test specified\\\\\\\" && exit 1\\\" }, \\\"author\\\": \\\"\\\", #作者 \\\"license\\\": \\\"ISC\\\" #开源证书 }\",\"初始化的过程中还有一些注意事项：\",\"package name (包名) 不能使用中文、大写，默认值是文件夹的名称，所以文件夹名称也不能使用中文和大写\",\"version (版本号)要求 x.x.x 的形式定义，x 必须是数字，默认值是 1.0.0\",\"ISC 证书与 MIT 证书功能上是相同的，关于开源证书扩展阅读 http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html\",\"package.json 可以手动创建与修改\",\"使用 npm init -y 或者 npm init --yes 极速创建 package.json\"]},\"65\":{\"h\":\"搜索包\",\"t\":[\"搜索包的方式有两种\",\"命令行 『npm s/search 关键字』\",\"网站搜索 网址是 https://www.npmjs.com/（推荐）\"]},\"66\":{\"h\":\"下载安装包\",\"t\":[\"我们可以通过 npm install 和 npm i 命令安装包\",\"# 格式 npm install <包名> npm i <包名> # 示例 npm install uniq npm i uniq\",\"运行之后文件夹下会增加两个资源\",\"node_modules 文件夹 存放下载的包\",\"package-lock.json 包的锁文件，用来锁定包的版本\",\"安装 uniq 之后， uniq 就是当前这个包的一个 依赖包 ，有时会简称为 依赖\",\"比如我们创建一个包名字为 A，A 中安装了包名字是 B，我们就说 B 是 A 的一个依赖包，也会说 A 依赖 B\",\"如果本地安装的包带有 CLI，npm 会将它的 CLI 脚本文件放置到node_modules/.bin下，使用命令npx 命令名即可调用\"]},\"67\":{\"h\":\"3. 配置镜像源\",\"t\":[\"由于 npm 默认的下载地址在国外，有时候会被墙，导致无法下载或者下载很慢。因此，我们可以尝试切换成，从其他的镜像源下载 npm 包。\",\"切换镜像源，有下面这几种方式：\",\"方式 1：临时切换镜像源。\",\"方式 2：切换镜像源\",\"方式 3：通过 NRM 切换镜像源（最为推荐的方式）。\",\"方式 4：cnpm\"]},\"68\":{\"h\":\"直接配置\",\"t\":[\"npm i express --registry https://registry.npmmirror.com/\",\"安装指定包的时候，追加 --registry参数。\",\"npm config set registry https://registry.npmmirror.com/\",\"执行上述命令后，以后下载所有 npm 包的时候，都会改为使用淘宝的镜像源。\"]},\"69\":{\"h\":\"工具配置\",\"t\":[\"使用 nrm 配置 npm 的镜像地址\",\"安装 nrm\",\"npm i -g nrm\",\"查看可选的源\",\"nrm ls\",\"修改镜像\",\"nrm use taobao\",\"检查是否配置成功（选做）\",\"npm config list\",\"检查 registry 地址是否为 https://registry.npmmirror.com/ , 如果 是 则表明成功\"]},\"70\":{\"h\":\"使用 cnpm 替换 npm\"},\"71\":{\"h\":\"4. 生产环境与开发环境\",\"t\":[\"开发环境 是程序员 专门用来写代码 的环境，一般是指程序员的电脑，开发环境的项目一般 只能程序员自己访问\",\"生产环境 是项目 代码正式运行 的环境，一般是指正式的服务器电脑，生产环境的项目一般 每个客户都可以访问\",\"如何优雅的让 node 知道处于什么环境，是极其重要的\",\"比如，我们有如下的 js 代码：\",\"index.js:\",\"var a = '没有环境变量'; console.log(process.env.NODE_ENV); if (process.env.NODE_ENV === 'development') { a = '开发环境'; } else if (process.env.NODE_ENV === 'production') { a = '生产环境'; } else if (process.env.NODE_ENV === 'test') { a = '测试环境'; } console.log(a);\",\"这段代码的意思，就是检测系统环境的NODE_ENV值，来判定 node 程序处于何种环境\",\"当然，不同系统环境，配置环境变量各不相同，所以，我们必须使用第三方包来帮助我们进行配置\",\"下载第三方包 cross-env，这种使用命令行的，肯定是开发依赖，所以，我们直接下载开发依赖即可\",\"npm i -D cross-env\",\"在package.json中加入如下代码\",\"\\\"scripts\\\": { \\\"start\\\": \\\"cross-env NODE_ENV=development node index.js\\\", \\\"build\\\": \\\"cross-env NODE_ENV=production node index.js\\\", \\\"test\\\": \\\"cross-env NODE_ENV=test node index.js\\\" },\"]},\"72\":{\"h\":\"5. 生产依赖与开发依赖\",\"t\":[\"我们可以在安装时设置选项来区分 依赖的类型，目前分为两类：\",\"类型\",\"命令\",\"补充\",\"生产依赖\",\"npm i -S uniq npm i --save uniq\",\"-S 等效于 --save，-S 是默认选项包信息保存在 package.json 中 dependencies 属性\",\"开发依赖\",\"npm i -D lessnpm i --save-dev less\",\"-D 等效于 --save-dev包信息保存在 package.json 中 devDependencies 属性\",\"举个例子方便大家理解，比如说做蛋炒饭需要大米，油，葱，鸡蛋，锅，煤气，铲子等\",\"其中锅， 煤气， 铲子属于开发依赖，只在制作阶段使用\",\"而 大米， 油， 葱， 鸡蛋属于生产依赖，在制作与最终食用都会用到\",\"所以 开发依赖 是只在开发阶段使用的依赖包，而 生产依赖 是开发阶段和最终上线运行阶段都用到的依赖包\"]},\"73\":{\"h\":\"6. 全局安装\",\"t\":[\"我们可以执行安装选项 -g 进行全局安装\",\"npm i -g nodemon\",\"全局安装完成之后就可以在命令行的任何位置运行 nodemon 命令\",\"该命令的作用是 自动重启 node 应用程序\",\"说明：\",\"全局安装的命令不受工作目录位置影响\",\"可以通过 npm root -g 可以查看全局安装包的位置\",\"不是所有的包都适合全局安装，只有全局类的工具才适合，可以通过查看包的官方文档来确定安装方式，这里先不必太纠结\"]},\"74\":{\"h\":\"7. 安装包依赖\",\"t\":[\"在项目协作中有一个常用的命令就是 npm i，通过该命令可以依据 package.json 和 package-lock.json 的依赖声明安装项目依赖\",\"npm i npm install\",\"node_modules 文件夹大多数情况都不会存入版本库\"]},\"75\":{\"h\":\"8. 安装指定版本的包\",\"t\":[\"项目中可能会遇到版本不匹配的情况，有时就需要安装指定版本的包，可以使用下面的命令的\",\"## 格式 npm i <包名@版本号> ## 示例 npm i jquery@1.11.2\"]},\"76\":{\"h\":\"9. 删除依赖\",\"t\":[\"项目中可能需要删除某些不需要的包，可以使用下面的命令\",\"## 局部删除 npm remove uniq npm r uniq ## 全局删除 npm remove -g nodemon\"]},\"77\":{\"h\":\"10. 配置命令别名\",\"t\":[\"通过配置命令别名可以更简单的执行命令\",\"配置 package.json 中的 scripts 属性\",\"{ ... \\\"scripts\\\": { \\\"server\\\": \\\"node server.js\\\", \\\"start\\\": \\\"node index.js\\\", }, ... }\",\"配置完成之后，可以使用别名执行命令\",\"npm run server npm run start\",\"不过 start 别名比较特别，使用时可以省略 run\",\"npm start\",\"补充说明：\",\"npm start 是项目中常用的一个命令，一般用来启动项目\",\"npm run 有自动向上级目录查找的特性，跟 require 函数也一样\",\"对于陌生的项目，我们可以通过查看 scripts 属性来参考项目的一些操作\"]},\"78\":{\"h\":\"11. npx\",\"t\":[\"npm 从 5.2 版开始，增加了 npx 命令，具体使用参考npx 使用教程 - 阮一峰的网络日志 \"]},\"79\":{\"h\":\"三、cnpm\"},\"80\":{\"h\":\"介绍\",\"t\":[\"cnpm 是一个淘宝构建的npmjs.com的完整镜像，也称为『淘宝镜像』，网址https://npmmirror.com/ cnpm 服务部署在国内 阿里云服务器上，可以提高包的下载速度\",\"官方也提供了一个全局工具包 cnpm ，操作命令与 npm 大体相同\"]},\"81\":{\"h\":\"安装\",\"t\":[\"我们可以通过 npm 来安装 cnpm 工具\",\"npm install -g cnpm --registry=https://registry.npmmirror.com\"]},\"82\":{\"h\":\"操作命令\",\"t\":[\"功能\",\"命令\",\"初始化\",\"cnpm init / cnpm init\",\"安装包\",\"cnpm i uniqcnpm i -S uniqcnpm i -D uniqcnpm i -g nodemon\",\"安装项目依赖\",\"cnpm i\",\"删除\",\"cnpm r uniq\",\"虽然 cnpm 可以提高速度，但是 npm 也可以通过淘宝镜像进行加速，所以 npm 的使用率还是高于 cnpm\"]},\"83\":{\"h\":\"四、yarn\",\"t\":[\"06_包管理工具\"]},\"84\":{\"h\":\"yarn 介绍\",\"t\":[\"yarn 是由 Facebook 在 2016 年推出的新的 Javascript 包管理工具，官方网址：https://yarnpkg.com/\"]},\"85\":{\"h\":\"yarn 特点\",\"t\":[\"yarn 官方宣称的一些特点\",\"速度超快：yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。 同时利用并行下载以最大化资源利用率，因此安装速度更快\",\"超级安全：在执行代码之前，yarn 会通过算法校验每个安装包的完整性\",\"超级可靠：使用详细、简洁的锁文件格式和明确的安装算法，yarn 能够保证在不同系统上无差异的工作\"]},\"86\":{\"h\":\"yarn 安装\",\"t\":[\"我们可以使用 npm 安装 yarn\",\"npm i -g yarn\"]},\"87\":{\"h\":\"yarn 常用命令\",\"t\":[\"功能\",\"命令\",\"初始化\",\"yarn init / yarn init -y\",\"安装包\",\"yarn add uniq 生产依赖yarn add less --dev 开发依赖yarn global add nodemon 全局安装\",\"删除包\",\"yarn remove uniq 删除项目依赖包yarn global remove nodemon 全局删除包\",\"安装项目依赖\",\"yarn\",\"运行命令别名\",\"yarn <别名> # 不需要添加 run\",\"思考题：\",\"这里有个小问题就是 全局安装的包不可用，yarn 全局安装包的位置可以通过 yarn global bin来查看，\",\"那你有没有办法使 yarn 全局安装的包能够正常运行？\",\"配置 path 环境\"]},\"88\":{\"h\":\"yarn 配置淘宝镜像\",\"t\":[\"可以通过如下命令配置淘宝镜像\",\"yarn config set registry https://registry.npmmirror.com/\",\"可以通过 yarn config list 查看 yarn 的配置项\"]},\"89\":{\"h\":\"npm 和 yarn 选择\",\"t\":[\"大家可以根据不同的场景进行选择\",\"个人项目\",\"如果是个人项目，哪个工具都可以，可以根据自己的喜好来选择\",\"公司项目如果是公司要根据项目代码来选择，可以 通过锁文件判断 项目的包管理工具\",\"npm 的锁文件为 package-lock.json\",\"yarn 的锁文件为 yarn.lock\",\"包管理工具 不要混着用，切记，切记，切记\"]},\"90\":{\"h\":\"五、管理发布包\"},\"91\":{\"h\":\"创建与发布\",\"t\":[\"我们可以将自己开发的工具包发布到 npm 服务上，方便自己和其他开发者使用，操作步骤如下：\",\"创建文件夹，并创建文件 index.js， 在文件中声明函数，使用 module.exports 暴露\",\"npm 初始化工具包，package.json 填写包的信息 (包的名字是唯一的)\",\"注册账号 https://www.npmjs.com/signup\",\"激活账号 （ 一定要激活账号 ）\",\"修改为官方的官方镜像 (命令行中运行 nrm use npm )\",\"命令行下 npm login 填写相关用户信息\",\"命令行下 npm publish 提交包 👌\"]},\"92\":{\"h\":\"更新包\",\"t\":[\"后续可以对自己发布的包进行更新，操作步骤如下\",\"更新包中的代码\",\"测试代码是否可用\",\"修改 package.json 中的版本号\",\"发布更新\",\"npm publish\"]},\"93\":{\"h\":\"删除包\",\"t\":[\"执行如下命令删除包\",\"npm unpublish --force\",\"删除包需要满足一定的条件， https://docs.npmjs.com/policies/unpublish\",\"你是包的作者\",\"发布小于 24 小时\",\"大于 24 小时后，没有其他包依赖，并且每周小于 300 下载量，并且只有一个维护者\"]},\"94\":{\"h\":\"六、扩展内容\",\"t\":[\"在很多语言中都有包管理工具，比如：\",\"语言\",\"包管理工具\",\"PHP\",\"composer\",\"Python\",\"pip\",\"Java\",\"maven\",\"Go\",\"go mod\",\"JavaScript\",\"npm/yarn/cnpm/other\",\"Ruby\",\"rubyGems\",\"除了编程语言领域有包管理工具之外，操作系统层面也存在包管理工具，不过这个包指的是『软件包』\",\"操作系统\",\"包管理工具\",\"网址\",\"Centos\",\"yum\",\"https://packages.debian.org/stable/\",\"Ubuntu\",\"apt\",\"https://packages.ubuntu.com/\",\"MacOS\",\"homebrew\",\"https://brew.sh/\",\"Windows\",\"chocolatey\",\"https://chocolatey.org/\"]},\"95\":{\"c\":[\"前端\"]},\"96\":{\"c\":[\"包管理工具\"]},\"97\":{\"h\":\"效率协作\"},\"98\":{\"c\":[\"效率协作\"]},\"99\":{\"h\":\"服务端\"},\"100\":{\"c\":[\"服务端\"]},\"101\":{\"h\":\"算法与手写\"},\"102\":{\"c\":[\"算法与手写\"]},\"103\":{\"c\":[\"数据结构\",\"解决方案\",\"手写\"]},\"104\":{\"h\":\"语言基础\"},\"105\":{\"c\":[\"前端\"]},\"106\":{\"h\":\"浏览器通信\"},\"107\":{\"c\":[\"浏览器通信\"]},\"108\":{\"h\":\"小记\",\"t\":[\"根本懒得写……\"]},\"109\":{\"h\":\"论文\"},\"110\":{\"c\":[\"论文公考\"]},\"111\":{\"h\":\"文档教程\"},\"112\":{\"c\":[\"文档教程\"]},\"113\":{\"h\":\"源码解析\"},\"114\":{\"c\":[\"源码解析\"]},\"115\":{\"h\":\"浏览器端实现模块化的问题\"},\"116\":{\"h\":\"一、浏览器端的模块化\",\"t\":[\"问题：\",\"效率问题：精细的模块划分带来了更多的 JS 文件，更多的 JS 文件带来了更多的请求，降低了页面访问效率\",\"兼容性问题：浏览器目前仅支持 ES6 的模块化标准，并且还存在兼容性问题\",\"工具问题：浏览器不支持 npm 下载的第三方包\",\"这些仅仅是前端工程化的一个缩影\",\"当开发一个具有规模的程序，你将遇到非常多的非业务问题，这些问题包括：执行效率、兼容性、代码的可维护性可扩展性、团队协作、测试等等等等，我们将这些问题称之为工程问题。工程问题与业务无关，但它深刻的影响到开发进度，如果没有一个好的工具解决这些问题，将使得开发进度变得极其缓慢，同时也让开发者陷入技术的泥潭。\"]},\"117\":{\"h\":\"二、根本原因\",\"t\":[\"思考：上面提到的问题，为什么在 node 端没有那么明显，反而到了浏览器端变得如此严重呢？\",\"答：在 node 端，运行的 JS 文件在本地，因此可以本地读取文件，它的效率比浏览器远程传输文件高的多\",\"根本原因：在浏览器端，开发时态（devtime）和运行时态（runtime）的侧重点不一样\",\"开发时态，devtime：\",\"模块划分越细越好\",\"支持多种模块化标准\",\"支持 npm 或其他包管理器下载的模块\",\"能够解决其他工程化的问题\",\"运行时态，runtime：\",\"文件越少越好\",\"文件体积越小越好\",\"代码内容越乱越好\",\"所有浏览器都要兼容\",\"能够解决其他运行时的问题，主要是执行效率问题\",\"这种差异在小项目中表现的并不明显，可是一旦项目形成规模，就越来越明显，如果不解决这些问题，前端项目形成规模只能是空谈。\",\"开发人员和浏览器喜欢的代码是不同的\"]},\"118\":{\"h\":\"三、解决办法\",\"t\":[\"既然开发时态和运行时态面临的局面有巨大的差异，因此，我们需要有一个工具，这个工具能够让开发者专心的在开发时态写代码，然后利用这个工具将开发时态编写的代码转换为运行时态需要的东西。\",\"这样的工具，叫做构建工具\",\"这样一来，开发者就可以专注于开发时态的代码结构，而不用担心运行时态遇到的问题了。\"]},\"119\":{\"h\":\"四、常见的构建工具\",\"t\":[\"webpack\",\"vite\",\"grunt\",\"gulp\",\"browserify\",\"fis\",\"其他\"]},\"120\":{\"c\":[\"前端\"]},\"121\":{\"c\":[\"模块化\",\"webpack\"]},\"122\":{\"h\":\"webpack 简介\",\"t\":[\"webpack 是基于模块化的打包（构建）工具，它把一切视为模块\",\"它通过一个开发时态的 入口模块 为起点，分析出所有的依赖关系，然后经过一系列的过程（压缩、合并），最终生成运行时态的文件。\",\"webpack 的特点：\",\"为前端工程化而生：webpack 致力于解决前端工程化，特别是浏览器端工程化中遇到的问题，让开发者集中注意力编写业务代码，而把工程化过程中的问题全部交给 webpack 来处理\",\"简单易用：支持零配置，可以不用写任何一行额外的代码就使用 webpack\",\"强大的生态：webpack 是非常灵活、可以扩展的，webpack 本身的功能并不多，但它提供了一些可以扩展其功能的机制，使得一些第三方库可以融于到 webpack 中\",\"基于 nodejs：由于 webpack 在构建的过程中需要 读取文件 ，因此它是运行在node环境中的\",\"基于模块化：webpack 在构建过程中要分析依赖关系，方式是通过模块化导入语句进行分析的，它支持各种模块化标准，包括但不限于 CommonJS、ES6 Module\",\"构建其实是工程化、自动化思想在前端开发中的体现，将一系列流程用代码去实现，让代码自动化地执行这一系列复杂的流程。\",\"构建可以实现如下内容：\",\"代码转换：将 TypeScript/ES6 编译成 JavaScript、将 SCSS 编译成 CSS 等。\",\"文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等。\",\"代码分割：提取多个页面的公共代码，提取首屏不需要执行部分代码让其异步加载。\",\"模块合并：在采用模块化的项目里会有很多个模块和文件，需要通过构建功能将模块分类合并成一个文件。\",\"自动刷新：监听本地源代码变化，自动重新构建、刷新浏览器。\",\"代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。\",\"自动发布：更新代码后，自动构建出线上发布代码并传输给发布系统。\",\"官网上有这么一段话来介绍 webpack：\",\"webpack 是一个现代 JavaScript 应用程序的模块打包器（module bundler）。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。\",\"webpack 官方文档地址：https://www.webpackjs.com/concepts/\"]},\"123\":{\"h\":\"一、webpack 的安装\",\"t\":[\"webpack 通过 npm 安装，它提供了两个包：\",\"webpack：核心包，包含了 webpack 构建过程中要用到的所有 api\",\"webpack-cli：提供一个简单的 cli 命令，它调用了 webpack 核心包的 api，来完成构建过程\",\"安装方式：\",\"全局安装：可以全局使用 webpack 命令，但是无法为不同项目对应不同的 webpack 版本\",\"本地安装：推荐，每个项目都使用自己的 webpack 版本进行构建\",\"npm i -D webpack webpack-cli\"]},\"124\":{\"h\":\"二、使用\",\"t\":[\"webpack\",\"示例：\",\"对应目录： \",\"其中 src 目录用来存放源文件\",\"index.js 文件内容\",\"import module_1 from './module1'; import module_2 from './module2'; import module_3 from './module3'; module_1(); module_2(); module_3();\",\"各个 module.js 文件内容\",\"// module1.js 文件内容 export default function module_1() { console.log(\\\"这是module_1模块\\\"); } // module2.js 文件内容 export default function module_2() { console.log(\\\"这是module_2模块\\\"); } // module3.js 文件内容 export default function module_3() { console.log(\\\"这是module_3模块\\\"); }\",\"默认情况下，在当前工程目录下执行webpack会以./src/index.js作为入口文件分析依赖关系，打包到./dist/main.js文件中\",\"执行webpack，出现下面的提示：\",\"我们也可以通过 webpack 的配置文件，来精确控制 webpack 的打包\",\"在根目录下创建 webpack.config.js 配置文件\",\"const path = require('path'); module.exports = { mode: 'development', // development production生成文件的方式 devtool: 'source-map', // ** 方便调试 ** entry: './src/index.js', // 入口文件 // 出口文件 output: { path: path.resolve(__dirname, 'dist'), // 必须是绝对路径 filename: 'app.js', }, };\",\"其中：\",\"entry:源文件的入口文件\",\"output:webpack 打包之后生成文件的路径 \",\"path:打包生成文件的绝对路径\",\"filename:生成文件的名字\",\"mode:打包模式，development 开发模式 production 生成模式，这会影响最终生成文件的内容格式\",\"devtool:由于经过 webpack 打包之后，源文件并不易读，因此当运行发生错误的时候，我们更加希望能看到源代码中的错误，而不是转换后代码的错误。也就是说错误的时候会直接帮我们提示在真正代码的位置中出现的问题，而不是编译之后的代码\",\"我们还可以在package.json文件的脚本中修改运行 webpack 的执行命令\",\"... \\\"scripts\\\": { \\\"dev\\\":\\\"webpack\\\" }, ...\",\"之后要运行 webpack，我们可以直接执行 npm run dev 命令\"]},\"125\":{\"c\":[\"前端\"]},\"126\":{\"c\":[\"模块化\",\"webpack\"]},\"127\":{\"h\":\"常用基本插件\"},\"128\":{\"h\":\"一、\",\"t\":[\"在前端迅速发展的今天，许多没有太多技术含量并且感觉是在浪费时间的事情，就可以交给构建工具来做，例如：我们去手动创建 index.html，手动引入打包好的 js 文件等操作，都可以叫 webpack来做，来帮助我们提升效率。\",\"因此，你只需要理解，插件其实就是 webpack 的一些扩展功能，旨在帮助我们提示效率的工具。\",\"首先，我们在我们的项目中安装 html-webpack-plugin 插件，命令如下：\",\"npm i -D html-webpack-plugin\",\"接下来在 webpack.config.js中引入 html-webpack-plugin插件，并添加 plugins 配置，如下：\",\"引入 html-webpack-plugin 插件：\",\"const HtmlWebpackPlugin = require('html-webpack-plugin');\",\"添加 plugins 配置信息：\",\"plugins: [ //添加插件 new HtmlWebpackPlugin(), ];\",\"接下来我们删除之前打包好的 dist 目录，重新运行npm run dev，运行结果如下：\",\"如果是要为已有的 html 文件引入打包好的 js 文件，可以进行如下的设置：\",\"plugins: [ // 添加插件 new HtmlWebpackPlugin( // 在这个插件内部，可以指定模版和自定义生成的文件名 { filename: 'main.html', // 生成的 html 文件的名称 template: 'src/index.html', // 模板文件存在的位置 } ), ];\"]},\"129\":{\"h\":\"\",\"t\":[\"当我们的 src目录下的原文件发生了更改，这个时候就需要重新打包。但是在重新打包之前，需要先把之前打好的包给删除掉（即 dist 目录），每次手动删除非常的麻烦，所以此时可以使用 clean-webpack-plugin插件。\",\"首先，还是需要安装此插件：\",\"npm install -D clean-webpack-plugin\",\"接下来在 webpack.config.js 文件中引入此插件，并添加到 plugins 所对应的数组里面，如下：\",\"// 引入clean-webpack-plugin插件 const { CleanWebpackPlugin } = require('clean-webpack-plugin'); plugins: [ //....其他插件 new CleanWebpackPlugin(), ];\",\"配置之后，每次我们运行npm run dev，就会将之前的 dist 目录删除掉，然后重新生成新的 dist 目录。\",\"注：使用 clean-webpack-plugin 这个插件时，必须首字母大写，否则会报错。\",\"在 Webpack5 中清除输出目录开箱可用，无须安装 clean-webpack-plugin\",\"module.exports = { mode: 'production', output: { clean: true, }, };\"]},\"130\":{\"c\":[\"前端\"]},\"131\":{\"c\":[\"模块化\",\"webpack\"]},\"132\":{\"h\":\"开发服务器\"},\"133\":{\"h\":\"开发服务器\",\"t\":[\"在开发阶段，目前遇到的问题是打包、运行、调试过程过于繁琐，回顾一下我们的操作流程：\",\"编写代码\",\"控制台运行命令完成打包\",\"打开页面查看效果\",\"继续编写代码，回到步骤 2\",\"并且，我们往往希望把最终生成的代码和页面部署到服务器上，来模拟真实环境\",\"为了解决这些问题，webpack 官方制作了一个单独的库：webpack-dev-server\",\"首先需要在项目中安装 webpack-dev-server，安装命令为:\",\"npm i -D webpack-dev-server\",\"接下来需要在 webpack.config.js进行如下常见的配置：\",\"devServer:{ open: true, // 打包后是否自动打开 port: 8090, // 指定端口号 }\",\"针对webpack-dev-server的配置，参考：https://www.webpackjs.com/configuration/dev-server/\",\"在 package.json 中添加如下代码：\",\"\\\"scripts\\\": { //...其他配置 \\\"dev\\\": \\\"webpack\\\", \\\"start\\\": \\\"webpack-dev-server\\\" },\",\"添加之后我们就可以使用npm start来启动 webpack-dev-server。\",\"最后需要提出需要注意的一点是，webpack-dev-server 是将资源打包至内存当中，所以可以很快的提供实时刷新功能。其实类似于就是我们之前使用的nodemon的功能，而且更加强大。\"]},\"134\":{\"h\":\"跨域代理\",\"t\":[\"如果你有单独的后端开发服务器 API，并且希望在同域名下发送 API 请求 ，那么代理某些 URL 会很有用。\",\"dev-server 使用了非常强大的 http-proxy-middleware 包\",\"devServer:{ open: true, // 打包后是否自动打开 port: 8090, // 指定端口号 proxy: { \\\"/api\\\": { target: \\\"http://127.0.0.1:3001\\\", changeOrigin: true, pathRewrite: {\\\"^/api\\\" : \\\"/\\\"} } } },\",\"前端访问代码：\",\"async function test() { let result = await fetch('/api/user'); let json = await result.json(); console.log(json); } test();\"]},\"135\":{\"c\":[\"前端\"]},\"136\":{\"c\":[\"模块化\",\"webpack\"]},\"137\":{\"h\":\"loader\"},\"138\":{\"h\":\"loader\",\"t\":[\"loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。\",\"本质上，webpack loader 将所有类型的文件，转换为应用程序的依赖图可以直接引用的模块。\",\"在更高层面，在 webpack 的配置中 loader 有两个目标。\",\"识别出应该被对应的 loader 进行转换的那些文件。(使用 test 属性)\",\"转换这些文件，从而使其能够被添加到依赖图中（并且最终添加到 bundle 中）（use 属性）\",\"有了 loader，webpack 就会把非 js 文件也看成是模块，并且可以引用它\",\"来看一个具体的示例，在 src 下面创建 index.css\",\"代码如下：\",\"body { background: skyblue; font-family: 'Roboto', sans-serif; }\",\"接下来在 index.js 中来引入该 css 文件，如下：\",\"index.js\",\"import module_1 from './module1'; import module_2 from './module2'; import module_3 from './module3'; //引入css模块 import './index.css';\",\"然后输入npm run dev进行打包操作，会发现出现打包失败，在错误提示中提醒我们需要相应的 loader。\",\"回到项目根目录，安装 css-loader 和 style-loader。其中 css-loader 负责把 css 文件打包到 js 中，style-loader 让 style 样式加入到 index.html 结构中。如下：\",\"npm i -D css-loader style-loader\",\"接下来在 webpack.config.js中添加相应的配置信息，如下：\",\"module: { rules: [ { test: /\\\\.css$/, use: ['style-loader', 'css-loader'], }, ]; }\",\"webpack 的 loader 执行顺序自后往前\",\"其中 test 属性对应的是一个正则表达式，代表要处理的文件类型，后面的 use 属性代表所要使用的 loader 文件。\",\"执行命令npm run dev 或者 npm start，可以看到样式打包成功。\"]},\"139\":{\"c\":[\"前端\"]},\"140\":{\"c\":[\"模块化\",\"webpack\"]},\"141\":{\"h\":\"打包图片与字体\"},\"142\":{\"h\":\"一、图片\",\"t\":[\"在这一点上，webpack4 与 webpack5 的版本会有很大区别，webpack5 新增了一种资源模块(asset module)\",\"资源模块\",\"资源模块(asset module)是一种模块类型，它允许使用资源文件（字体，图标等）而无需配置额外 loader。\",\"在 webpack 5 之前，通常使用：\",\"raw-loader 将文件导入为字符串\",\"url-loader 将文件作为 data URI 内联到 bundle 中\",\"file-loader 将文件发送到输出目录\",\"当然上面这几个 loader 你都需要 npm 去单独下载\",\"资源模块类型(asset module type)，通过添加 4 种新的模块类型(type)，来替换所有这些 loader：\",\"asset/resource 发送一个单独的文件并导出 URL。之前通过使用 file-loader 实现。\",\"asset/inline 导出一个资源的 data URI。之前通过使用 url-loader 实现。\",\"asset/source 导出资源的源代码。之前通过使用 raw-loader 实现。\",\"asset 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 url-loader，并且配置资源体积限制实现。\",\"当在 webpack 5 中使用旧的 assets loader（如 file-loader/url-loader/raw-loader 等）和 asset 模块时，你可能想停止当前 asset 模块的处理，并再次启动处理，这可能会导致 asset 重复，你可以通过将 asset 模块的类型设置为 'javascript/auto' 来解决。\",\"webpack.config.js\",\"//... module: { rules: [ { test: /\\\\.css$/, use: [\\\"style-loader\\\", \\\"css-loader\\\"], }, { test: /\\\\.(jpg|png|gif|bmp|webp|jpeg)$/i, use: [ { loader: \\\"file-loader\\\", options: { esModule: false, //file-loader 4.X 默认为true name: \\\"images/[name].[ext]\\\", }, }, ], type: \\\"javascript/auto\\\", // webpack 5中启用file-loader }, ], }, //...\",\"当然我们可以使用 webpack 5 直接打包图片\",\"module: { rules: [ { test: /\\\\.(jpg|png|gif|bmp|webp|jpeg)$/i, type: 'asset/resource' } ] },\",\"默认情况下，asset/resource 模块以 [hash][ext][query] 文件名发送到输出目录。\",\"可以通过在 webpack 配置中设置 output.assetModuleFilename 来修改此模板字符串：\",\"webpack.config.js\",\"const path = require('path'); module.exports = { entry: './src/index.js', output: { filename: 'index.js', path: path.resolve(__dirname, 'dist'), assetModuleFilename: 'images/[hash][ext][query]', }, module: { rules: [ { test: /\\\\.(jpg|png|gif|bmp|webp|jpeg)$/i, type: 'asset/resource', }, ], }, };\",\"打包存放路径和名字，也能像下面这种写法：\",\"{ test: /\\\\.(jpg|png|gif|bmp|webp|jpeg)$/i, type: 'asset/resource', generator: { filename: 'images/[hash][ext][query]' } },\"]},\"143\":{\"h\":\"二、字体\",\"t\":[\"在网页应用中，我们还会经常用到其他的字体。例如 font-awesome 就提供了一个基于 CSS 3 的字库，我们可以使用到里面的各种字体图标。\",\"首先 通过 npm 安装 font-awesome 字体图标库：\",\"npm install font-awesome\",\"安装完字体文件库之后，首先在 index.js 中引入字体，然后在 index.html 中使用字体，如下： src/index.js\",\"// 引入带有字体的css文件，用来测试webpack是否支持字体大包 import 'font-awesome/css/font-awesome.css';\",\"src/index.html\",\"<div id=\\\"app\\\"> <i class=\\\"fa fa-bath\\\" aria-hidden=\\\"true\\\"></i> <i class=\\\"fa fa-envelope-open\\\" aria-hidden=\\\"true\\\"></i> <i class=\\\"fa fa-microchip\\\" aria-hidden=\\\"true\\\"></i> <i class=\\\"fa fa-user-circle-o\\\" aria-hidden=\\\"true\\\"></i> </div>\",\"最后，我们可以再webpack.config.js中加入字体打包的配置\",\"module: { rules: [ //....其他配置 { test: /\\\\.(woff|woff2|eot|ttf|otf)$/i, type: 'asset/resource', generator: { filename: 'fonts/[hash][ext][query]' } } ], },\"]},\"144\":{\"c\":[\"前端\"]},\"145\":{\"c\":[\"模块化\",\"webpack\"]},\"146\":{\"h\":\"babel\",\"t\":[\"babel 一词来自于希伯来语，直译为巴别塔\",\"巴别塔象征的统一的国度、统一的语言\",\"而今天的 JS 世界缺少一座巴别塔，不同版本的浏览器能识别的 ES 标准并不相同，就导致了开发者面对不同版本的浏览器要使用不同的语言，和古巴比伦一样，前端开发也面临着这样的困境。\",\"babel 的出现，就是用于解决这样的问题，它是一个编译器，可以把不同标准书写的语言，编译为统一的、能被各种浏览器识别的语言\",\"由于语言的转换工作灵活多样，babel 的做法和 postcss、webpack 差不多，它本身仅提供一些分析功能，真正的转换需要依托于插件完成 \",\"babel 官网地址：https://www.babeljs.cn/\"]},\"147\":{\"h\":\"一、babel 的安装\",\"t\":[\"babel 可以和构建工具联合使用，也可以独立使用\",\"如果要独立的使用 babel，需要安装下面两个库：\",\"@babel/core：babel 核心库，提供了编译所需的所有 api\",\"@babel/cli：提供一个命令行工具，调用核心库的 api 完成编译\",\"npm i -D @babel/core @babel/cli\"]},\"148\":{\"h\":\"二、使用\",\"t\":[\"在项目的 src 目录中创建babelTest.js文件，输入如下简单代码：\",\"() => console.log('hello babel！');\",\"在命令行的运行 babel 命令，将上面 js 代码中的 ES6 的语法转换为 ES5 的语法\",\"./node_modules/.bin/babel ./src/babelTest.js\",\"要node_modules去找babel命令实在太麻烦，我们可以直接使用 npm 脚本简化：\",\"\\\"scripts\\\": { \\\"build\\\": \\\"babel ./src/babelTest.js\\\" },\",\"后面我们直接运行 npm run build 就直接编译了babelTest.js文件\",\"可以看到此时并没有将我们的 ES 6 语法编译成 ES 5 语法。原因很简单，babel 是基于插件的，做不同的事情需要不同的插件，这样才能让 babel 非常灵活并且强大。\",\"所以接下来我们安装相应的编译箭头函数的插件，如下：\",\"npm i babel-plugin-transform-es2015-arrow-functions\",\"除了安装插件以外，还需要在项目根目录下面创建 babel的配置文件，如下：\",\"文件里面书写如下的配置信息：\",\"{ \\\"plugins\\\": [ \\\"transform-es2015-arrow-functions\\\" ] }\",\"执行npm run build，可以看到我们的 ES 6 代码已经成功被编译为了 ES 5 的代码：\",\"接下来，我们去修改 babelTest.js 文件，增加其他的 ES 6 语法，如下：\",\"() => console.log('hello babel！'); class demo {}\",\"接下来执行npm run build\",\"但是class 并没有被编译。这个原因和前面我们遇到的一样，它需要安装另一个插件才能让 babel 工作起来，要不然就什么都不做。所以我们安装相应的插件：\",\"npm install --save-dev babel-plugin-transform-es2015-classes\",\"然后 .babelrc 配置文件也要进行相应的配置，如下：\",\"{ \\\"plugins\\\": [ \\\"transform-es2015-arrow-functions\\\", \\\"transform-es2015-classes\\\" ] }\",\"执行npm run build，结果如下：images\",\"通过插件的学习，我们知道了 babel 要去解析转换 ES 6 语法，需要安装对应的插件，我们只是使用到了两个 ES 6 的语法就装了两个插件，当我们需要使用很多 ES 6 语法的时候，那就需要装非常多的插件，这样显得非常麻烦，那么有没有简便点的方法呢？\",\"babel 通过 preset 来解决我们上面提出的问题，preset 叫做预设，意思就是说预先设置一些常用的语法配置，把一批常用的相关的插件打包来满足我们的开发。\",\"安装预设：\",\"npm i @babel/preset-env\",\"babel 有多种预设，最常见的预设是@babel/preset-env\",\"@babel/preset-env可以让你使用最新的 JS 语法，而无需针对每种语法转换设置具体的插件\",\"配置\",\"{ \\\"presets\\\": [ \\\"@babel/preset-env\\\" ] }\"]},\"149\":{\"h\":\"三、 中使用\",\"t\":[\"回到 webpack-demo 目录，修改 webpack-demo 下的 index.js，加入下面一段 ES 6 代码：\",\"// 测试 ES 6 是否被编译成 ES 5 () => console.log('hello babel!!!');\",\"然后运行命令查看结果：\",\"npm run dev\",\"在打包出来的 app.js 文件中进行查看，可以看到我们所写的 ES 6 代码原样输出，webpack 并没有把 ES 6 代码编译成 ES 5。\",\"要让 ES 6 代码被编译，我们需要借助 babel 的力量，这里我们需要安装 babel-loader 和 babel-core 以及处理 ES 6 语法的预设，babel-loader 的作用就是将 ES 6 代码送给 babel-core 处理，babel-core 就是 babel 工作的核心 api。\",\"安装 babel-core 和 babel-loader 以及处理 ES 6 的预设：\",\"npm install babel-loader @babel/core @babel/preset-env\",\"在 webpack-demo 目录中新建 .babelrc 文件，增加 babel 配置：\",\"{ \\\"presets\\\": [ \\\"@babel/preset-env\\\" ] }\",\"接下来需要在 webpack.config.js 文件中增加配置项，在 rules 规则数字中增加下面代码：\",\"{ test: /\\\\.js$/, use:['babel-loader'] }\",\"运行npm run dev命令打包\",\"在打包好的 js 代码中我们查看到，原来的 ES 6 代码已经成功转换成 ES 5 代码了：\",\"// 测试 ES 6 是否被编译成 ES 5 (function () { return console.log('hello babel!!!'); });\"]},\"150\":{\"h\":\"四、优化 babel-loader\",\"t\":[\"当我们写这个正则表达式/.js$/的时候，表示所有 js 文件都会被送 babel-loader 加载，然后由 babel-core 处理一边，这里包括我们安装的很多第三方包，你会发现 node_modules 文件夹下会有很多的 js 文件，但是这些 js 文件已经由开发者打包好了我们可以直接使用的，并不需要我们再去处理一遍。因此，如果 babel-loader 再去处理的话，会浪费太多的时间，导致 webpack 打包编译很慢，我们现在需要优化它。\",\"具体的做法是排除不需要再次编译的，让 babel-loader 只处理我们开发的源文件，因此，我们需要修改 webpack.config.js 中的配置：\",\"{ test: /\\\\.js$/, use:['babel-loader'], exclude: path.resolve(__dirname, 'node_modules') },\",\"其中，exclude: path.resolve(__dirname, 'node_modules')这条语句表示排除 node_modules 这个文件夹，因为这个文件夹下放的都是第三方包，并不需要我们再次用 babel 去编译了。\",\"再次运行npm run dev去打包的时候会发现已经快很多了。\"]},\"151\":{\"c\":[\"前端\"]},\"152\":{\"c\":[\"模块化\",\"webpack\"]},\"153\":{\"h\":\"webpack打包原理\",\"t\":[\"原链接 | 掘金\"]},\"154\":{\"h\":\"webpack 构建流程\",\"t\":[\"Webpack 的运行流程是一个串行的过程,从启动到结束会依次执行以下流程 :\",\"初始化参数：从配置文件和 Shell 语句中读取与合并参数,得出最终的参数。\",\"开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译。\",\"确定入口：根据配置中的 entry 找出所有的入口文件。\",\"编译模块：从入口文件出发,调用所有配置的 Loader 对模块进行翻译,再找出该模块依赖的模块,再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理。\",\"完成模块编译：在经过第 4 步使用 Loader 翻译完所有模块后,得到了每个模块被翻译后的最终内容以及它们之间的依赖关系。\",\"输出资源：根据入口和模块之间的依赖关系,组装成一个个包含多个模块的 Chunk,再把每个 Chunk 转换成一个单独的文件加入到输出列表,这步是可以修改输出内容的最后机会。\",\"输出完成：在确定好输出内容后,根据配置确定输出的路径和文件名,把文件内容写入到文件系统。\",\"在以上过程中,Webpack 会在特定的时间点广播出特定的事件,插件在监听到感兴趣的事件后会执行特定的逻辑,并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。\"]},\"155\":{\"h\":\"简易复现\",\"t\":[\"compiler.js\",\"模块数组 modules\",\"[ { filename, // 文件路径,可以作为每个模块的唯一标识符 dependecies, // 依赖对象,保存着依赖模块路径 code, // 文件内容 }, { filename, // 文件路径,可以作为每个模块的唯一标识符 dependecies, // 依赖对象,保存着依赖模块路径 code, // 文件内容 }, ...... ]\",\"依赖关系图示例\",\"{ './src/index.js': { dependecies: { './hello.js': './src/hello.js' }, code: '\\\"use strict\\\";\\\\n\\\\nvar _hello = require(\\\"./hello.js\\\");\\\\n\\\\ndocument.write((0, _hello.say)(\\\"webpack\\\"));' }, './src/hello.js': { dependecies: {}, code: '\\\"use strict\\\";\\\\n\\\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\\\n value: true\\\\n});\\\\nexports.say = say;\\\\n\\\\nfunction say(name) {\\\\n return \\\"hello \\\".concat(name);\\\\n}' } }\",\"根据生成的关系依赖图输出bundle.js文件\",\"const fs = require('fs'); const path = require('path'); const Parser = require('./Parser'); class Compiler { // options: webpack的配置对象 constructor(options) { const { entry, output } = options; this.entry = entry; // 入口 this.output = output; // 出口 this.modules = []; // 模块 } // 构建启动 run() { const info = this.build(this.entry); this.modules.push(info); this.modules.forEach(({ dependecies }) => { // 判断有依赖对象,递归解析所有依赖项 if (dependecies) { for (const dependency in dependecies) { this.modules.push(this.build(dependecies[dependency])); } } }); // 生成依赖关系图 const dependencyGraph = this.modules.reduce( (graph, item) => ({ ...graph, // 使用文件路径作为每个模块的唯一标识符,保存对应模块的依赖对象和文件内容 [item.filename]: { dependecies: item.dependecies, code: item.code, }, }), {} ); this.generate(dependencyGraph); } build(filename) { const { getAst, getDependecies, getCode } = Parser; const ast = getAst(filename); const dependecies = getDependecies(ast, filename); const code = getCode(ast); return { filename, // 文件路径,可以作为每个模块的唯一标识符 dependecies, // 依赖对象,保存着依赖模块路径 code, // 文件内容 }; } // 重写 require函数,输出bundle generate(code) { // 输出文件路径 const filePath = path.join(this.output.path, this.output.filename); const bundle = `(function(graph){ function require(moduleId){ function localRequire(relativePath){ return require(graph[moduleId].dependecies[relativePath]) } var exports = {}; (function(require,exports,code){ eval(code) })(localRequire,exports,graph[moduleId].code); return exports; } require('${this.entry}') })(${JSON.stringify(code)})`; // 把文件内容写入到文件系统 fs.writeFileSync(filePath, bundle, 'utf-8'); } } module.exports = Compiler;\",\"前提：已经准备好生成的 依赖关系图\",\"目标：生成一个 IIFE (匿名闭包)，可以执行所有书写的 js 脚本\",\"困难：代码中含有require，export，浏览器无法识别\",\"做法：自定义 require 和 export 传递给代码执行器（作为参数）\",\"Parser.js\",\"AST 树（用于解析依赖）\",\"依赖模块（包含依赖的路径）\",\"转换过的代码\",\"const fs = require('fs'); const path = require('path'); const parser = require('@babel/parser'); const traverse = require('@babel/traverse').default; const { transformFromAst } = require('@babel/core'); const Parser = { //解析入口文件,获取 AST getAst: (path) => { // 读取入口文件 const content = fs.readFileSync(path, 'utf-8'); // 将文件内容转为AST抽象语法树 return parser.parse(content, { sourceType: 'module', }); }, //找出所有依赖模块 getDependecies: (ast, filename) => { const dependecies = {}; // 遍历所有的 import 模块,存入dependecies traverse(ast, { // 类型为 ImportDeclaration 的 AST 节点 (即为import 语句) // node.source.value 当前导入声明的来源 ImportDeclaration({ node }) { const dirname = path.dirname(filename); // 保存依赖模块路径,之后生成依赖关系图需要用到 const filepath = './' + path.join(dirname, node.source.value); dependecies[node.source.value] = filepath; }, }); return dependecies; }, //将 AST 语法树转换为浏览器可执行代码 getCode: (ast) => { const { code } = transformFromAst(ast, null, { presets: ['@babel/preset-env'], }); return code; }, }; module.exports = Parser;\"]},\"156\":{\"h\":\"Loader 和 Plugin 的区别\",\"t\":[\"Loader 本质就是一个函数，在该函数中对接收到的内容进行转换，返回转换后的结果。 因为 Webpack 只认识 JavaScript，所以 Loader 就成了翻译官，对其他类型的资源进行转译的预处理工作。\",\"src/raw-loader.js\",\"module.exports = function (source) { const json = JSON.stringify(source) .replace(/\\\\u2028/g, '\\\\\\\\u2028') // 为了安全起见, ES6模板字符串的问题 .replace(/\\\\u2029/g, '\\\\\\\\u2029'); return `export default ${json}`; };\",\"Plugin 就是插件，基于事件流框架 Tapable，插件可以扩展 Webpack 的功能，在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。\",\"/* 必须是一个类 必须要有一个 apply 函数 要调用 complier API 来影响打包结果 */ class LicenseWebpackPlugin { constructor(parmas) { console.log(parmas); } apply(complier) { complier.hooks.emit.tapAsync('LicenseWebpackPlugin', (compliation, cb) => { console.log(compliation.assets); compliation.assets['LICENSE'] = { source: function () { return ` The MIT License (MIT) Copyright (c) 2013-present, Yuxi (Evan) You Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. `; }, }; cb(); }); } } module.exports = LicenseWebpackPlugin;\",\"Loader 在 module.rules 中配置，作为模块的解析规则，类型为数组。每一项都是一个 Object，内部包含了 test(类型文件)、loader、options (参数)等属性。\",\"Plugin 在 plugins 中单独配置，类型为数组，每一项是一个 Plugin 的 实例 ，参数都通过构造函数传入。\"]},\"157\":{\"h\":\"文件监听原理\",\"t\":[\"原理：轮询判断文件的最后编辑时间是否变化，变化后根据配置的时间执行重新打包\",\"Webpack 开启监听模式，有两种方式：\",\"启动 webpack 命令时，带上 --watch 参数\",\"在配置 webpack.config.js 中设置 watch:true\"]},\"158\":{\"h\":\"Webpack 的热更新原理\",\"t\":[\"HMR 的核心就是客户端从服务端拉取更新后的文件，准确的说是 chunk diff (chunk 需要更新的部分)，实际上 WDS 与浏览器之间维护了一个 Websocket（下图 4），当本地资源发生变化时，WDS 会向浏览器推送更新，并带上重新构建后的 hash。然后客户端会向 WDS 发起 Ajax 请求来获取更改内容(文件列表、hash)，这样客户端就可以再借助这些信息继续向 WDS 发起 jsonp 请求获取该 chunk 的增量更新。\",\"img\",\"watch①：在 webpack 的 watch 模式下，文件系统中某一个文件发生修改，webpack 监听到文件变化，根据配置文件对模块 重新编译打包 ，并将打包后的代码通过简单的 JavaScript 对象保存在内存中。\",\"watch③：webpack-dev-server 对文件变化的一个监控，变化后会通知浏览器端对应用进行 刷新 。\",\"socket④：WDS 与浏览器之间维护了一个 Websocket，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，最主要信息还是新模块的 hash 值。\",\"webpack-dev-server 修改了 webpack 配置中的 entry 属性，在里面添加了 webpack-dev-client 的代码，这样在最后的 bundle.js 文件中就会有接收 websocket 消息的代码了。\",\"img\"]},\"159\":{\"h\":\"文件指纹是什么\",\"t\":[\"文件指纹是打包后输出的文件名的后缀。\",\"Hash：和整个项目的构建相关，只要项目文件有修改，整个项目构建的 hash 值就会更改\",\"Chunkhash：和 Webpack 打包的 chunk 有关，不同的 entry 会生出不同的 chunkhash\",\"Contenthash：根据文件内容来定义 hash，文件内容不变，则 contenthash 不变\",\"设置指纹\",\"js：output 中 filename 直接设置\",\"css：借助插件 MiniCssExtractPlugin 设置 filename。\",\"图片：file-loader 的 name\"]},\"160\":{\"c\":[\"前端\"]},\"161\":{\"c\":[\"模块化\",\"webpack\"]},\"162\":{\"h\":\"c#入门教程\"},\"163\":{\"h\":\"一、数据类型\"},\"164\":{\"h\":\"二、运算符\"},\"165\":{\"h\":\"1. 算数运算符\",\"t\":[\"常见的算数运算符有加减乘除和求余运算。在所有预定义简单数学类型上执行标准的算数运算。\",\"int x1=5+6; int x2=12-3; int x3=3*4; int x4=10/3; double d1=5.0+6.0; double d2=12.0-3.0; double d3 =3.0*4.0; double d4=10.0/3.0; byte b1 =5 +6; sbyte sb1 =6*5; int a = 1 % 3 // 1\"]},\"166\":{\"h\":\"2. 比较运算符\",\"t\":[\"常见的关系运算符有小于，大于，小于等于，大于等于，带有关系或相等运算符的二元表达式返回bool类型的值。\",\"和JS这种弱类型语言不同，关系运算符并不能用于字符串之间的比较，但是可以比较字符串之间的相等性（会比较他们的长度和内容，都相同时则认定两者相同，即使它们占用不同的内存），这种比较我们成为 深比较 。\"]},\"167\":{\"h\":\"三、流程控制\"},\"168\":{\"h\":\"四、类\"},\"169\":{\"h\":\"MongoDB\"},\"170\":{\"h\":\"一、简介\"},\"171\":{\"h\":\"1. Mongodb 是什么\",\"t\":[\"MongoDB 是一个基于分布式文件存储的数据库，官方地址 https://www.mongodb.com/\"]},\"172\":{\"h\":\"2. 数据库是什么\",\"t\":[\"数据库（DataBase）是按照数据结构来组织、存储和管理数据的 应用程序\"]},\"173\":{\"h\":\"3. 数据库的作用\",\"t\":[\"数据库的主要作用就是 管理数据，对数据进行 增（c）、删（d）、改（u）、查（r）\"]},\"174\":{\"h\":\"4. 数据库管理数据的特点\",\"t\":[\"相比于纯文件管理数据，数据库管理数据有如下特点：\",\"速度更快\",\"扩展性更强\",\"安全性更强\"]},\"175\":{\"h\":\"5. 为什么选择 Mongodb\",\"t\":[\"操作语法与 JavaScript 类似，容易上手，学习成本低\"]},\"176\":{\"h\":\"二、核心概念\",\"t\":[\"Mongodb 中有三个重要概念需要掌握\",\"数据库（database） 数据库是一个数据仓库，数据库服务下可以创建很多数据库，数据库中可以存放很多集合\",\"集合（collection） 集合类似于 JS 中的数组，在集合中可以存放很多文档\",\"文档（document） 文档是数据库中的最小单位，类似于 JS 中的对象\",\"JSON 文件示例：\",\"{ \\\"accounts\\\": [ { \\\"id\\\": \\\"3-YLju5f3\\\", \\\"title\\\": \\\"买电脑\\\", \\\"time\\\": \\\"2023-02-08\\\", \\\"type\\\": \\\"-1\\\", \\\"account\\\": \\\"5500\\\", \\\"remarks\\\": \\\"为了上网课\\\" }, { \\\"id\\\": \\\"3-YLju5f4\\\", \\\"title\\\": \\\"请女朋友吃饭\\\", \\\"time\\\": \\\"2023-02-08\\\", \\\"type\\\": \\\"-1\\\", \\\"account\\\": \\\"214\\\", \\\"remarks\\\": \\\"情人节聚餐\\\" }, { \\\"id\\\": \\\"mRQiD4s3K\\\", \\\"title\\\": \\\"发工资\\\", \\\"time\\\": \\\"2023-02-19\\\", \\\"type\\\": \\\"1\\\", \\\"account\\\": \\\"4396\\\", \\\"remarks\\\": \\\"终于发工资啦!~~\\\" } ], \\\"users\\\":[ { \\\"id\\\": 1, \\\"name\\\": \\\"zhangsan\\\", \\\"age\\\": 18 }, { \\\"id\\\": 2, \\\"name\\\": \\\"lisi\\\", \\\"age\\\": 20 }, { \\\"id\\\": 3, \\\"name\\\": \\\"wangwu\\\", \\\"age\\\": 22 } ] }\",\"大家可以通过 JSON 文件来理解 Mongodb 中的概念\",\"一个 JSON 文件 好比是一个 数据库，一个 Mongodb 服务下可以有 N 个数据库\",\"JSON 文件中的 一级属性的数组值 好比是 集合\",\"数组中的对象好比是 文档\",\"对象中的属性有时也称之为 字段\",\"SQL术语/概念\",\"MongoDB术语/概念\",\"解释/说明\",\"database\",\"database\",\"数据库\",\"table\",\"collection\",\"数据库表/集合\",\"row\",\"document\",\"数据记录行/文档\",\"column\",\"field\",\"数据字段/域\",\"index\",\"index\",\"索引\",\"table joins\",\"表连接,MongoDB不支持\",\"primary key\",\"primary key\",\"主键,MongoDB自动将_id字段设置为主键\",\"一般情况下\",\"一个项目使用一个数据库\",\"一个集合会存储同一种类型的数据\"]},\"177\":{\"h\":\"1. 下载安装与启动\",\"t\":[\"下载地址： https://www.mongodb.com/try/download/community\",\"建议选择 zip 类型， 通用性更强\",\"使用msi类型安装时会安装MongoDB的二进制文件和默认的配置文件，同时可以选择将mongodb添加到系统服务中实现开机自动启动。\",\"配置步骤如下:\",\"1> 将压缩包移动到 `C:\\\\Program Files` 下，然后解压 2> 创建 `C:\\\\data\\\\db` 目录，mongodb 会将数据默认保存在这个文件夹 3> 以 mongodb 中 bin 目录作为工作目录，启动命令行 4> 运行命令 `mongod` \",\"09_mongodb\",\"看到最后的 waiting for connections 则表明服务 已经启动成功\",\"然后可以使用 mongo 命令连接本机的 mongodb 服务\",\"09_mongodb\",\"注意：\",\"为了方便后续方便使用 mongod 命令，可以将 bin 目录配置到环境变量 Path 中\",\"千万不要选中服务端窗口的内容，选中会停止服务，可以 敲回车 取消选中\"]},\"178\":{\"h\":\"2. 命令行交互\",\"t\":[\"命令行交互一般是学习数据库的第一步，不过这些命令在后续用的比较少，所以大家了解即可\"]},\"179\":{\"h\":\"3. 数据库命令\",\"t\":[\"显示所有的数据库\",\"show dbs show databases\",\"切换到指定的数据库，如果数据库不存在会自动创建数据库\",\"use 数据库名\",\"查看当前操作的数据库\",\"db\",\"删除当前数据库\",\"use 库名 db.dropDatabase()\"]},\"180\":{\"h\":\"4. 集合命令\",\"t\":[\"创建集合\",\"db.createCollection('集合名称')\",\"显示当前数据库中的所有集合\",\"show collections\",\"删除某个集合\",\"db.集合名.drop()\",\"重命名集合\",\"db.集合名.renameCollection('newName')\"]},\"181\":{\"h\":\"5. 文档命令\",\"t\":[\"插入文档\",\"db.集合名.insert(文档对象);\",\"查询文档\",\"db.集合名.find(查询条件)\",\"_id 是 mongodb 自动生成的唯一编号，用来唯一标识文档\",\"更新文档\",\"db.集合名.update(查询条件,新的文档) db.集合名.update({name:'张三'},{$set:{age:19}})\",\"删除文档\",\"db.集合名.remove(查询条件)\"]},\"182\":{\"h\":\"6. 命令汇总\",\"t\":[\"数据库\",\"集合\",\"2\",\"文档\",\"3\",\"4\",\"5\",\"6\"]},\"183\":{\"h\":\"7. 应用场景\"},\"184\":{\"h\":\"新增\",\"t\":[\"用户注册\",\"发布视频\",\"发布商品\",\"发朋友圈\",\"发评论\",\"发微博\",\"发弹幕\",\".......\"]},\"185\":{\"h\":\"删除\",\"t\":[\"删除评论\",\"删除商品\",\"删除文章\",\"删除视频\",\"删除微博\",\"......\"]},\"186\":{\"h\":\"更新\",\"t\":[\"更新个人信息\",\"修改商品价格\",\"修改文章内容\",\"......\"]},\"187\":{\"h\":\"查询\",\"t\":[\"商品列表\",\"视频列表\",\"朋友圈列表\",\"微博列表\",\"搜索功能\",\"......\"]},\"188\":{\"h\":\"三、Mongoose\"},\"189\":{\"h\":\"1. 介绍\",\"t\":[\"官网 http://www.mongoosejs.net/\",\"Mongoose是一个让我们可以通过Node来操作MongoDB的模块。\",\"Mongoose是一个对象文档模型(ODM)库,它对Node原生的MongoDB模块进行了进一步的优化封装，并提供了更多的功能。在大多数情况下，它被用来把结构化的模式应用到一个MongoDB集合，并提供了验证和类型转换等功能\",\"mongoose中的对象： \",\"Schema 模式对象（Schema对象定义约束了数据库中的文档结构）\",\"Model 模型对象（Model对象作为集合中的所有文档的表示，相当于MongoDB数据库中的集合collection）\",\"Document 文档对象（Document表示集合中的具体文档，相当于集合中的一个具体的文档）\"]},\"190\":{\"h\":\"2. 安装\",\"t\":[\"npm i mongoose\"]},\"191\":{\"h\":\"3. 使用流程\",\"t\":[\" //1. 导入 mongoose const mongoose = require('mongoose'); //2. 连接数据库 //当连接的数据库不存在，插入文档时会自动创建此数据库，如果端口号是默认端口号(27017)则可以省略不写 mongoose.connect('mongodb://127.0.0.1:27017/bilibili'); // 数据库名称 //3. 设置连接回调 //连接成功 once 一次 事件回调函数只执行一次 mongoose.connection.once('open', () => { console.log('连接成功'); //4. 创建文档结构对象 // 设置集合中文档的属性以及属性值的类型 let BookSchema = new mongoose.Schema({ title: String, author: String, price: Number }); //5. 创建文档模型对象 对文档操作的封装对象 mongoose会使用集合名称的复数，创建集合 let BookModel = mongoose.model('book', BookSchema); //6. 插入文档 BookModel.create({ title: '西游记', author: '吴承恩', price: 19.9 }, (err, data) => { // 判断是否有错误 if (err) throw err; //输出 data 对象 如果没有出错，则输出插入后的文档对象 console.log(data); //7. 断开连接 关闭数据链接 (项目运行过程中，不会添加该代码) mongoose.disconnect(); }); }); //连接出错 mongoose.connection.once('error', () => { console.log('连接出错~~'); }) //连接关闭 mongoose.connection.once('close', () => { console.log('连接关闭'); })\",\"MongoDB数据库，一般情况下，只需要连接一次，连接一次后，除非项目停止服务器关闭，否则连接一般不会断开\"]},\"192\":{\"h\":\"4. 字段类型\",\"t\":[\"文档结构可选的常用字段类型列表\",\"类型\",\"描述\",\"String\",\"字符串\",\"Number\",\"数字\",\"Boolean\",\"布尔值\",\"Array\",\"数组，也可以使用 [] 来标识\",\"Date\",\"日期\",\"Buffer\",\"Buffer 对象\",\"Mixed\",\"任意类型，需要使用 mongoose.Schema.Types.Mixed 指定\",\"ObjectId\",\"对象 ID，需要使用 mongoose.Schema.Types.ObjectId 指定\",\"Decimal128\",\"高精度数字，需要使用 mongoose.Schema.Types.Decimal128 指定\"]},\"193\":{\"h\":\"5. 字段值验证\",\"t\":[\"Mongoose 有一些内建验证器，可以对字段值进行验证，在定义Schema时使用。\"]},\"194\":{\"h\":\"必填项\",\"t\":[\"title: { type: String, required: true // 设置必填项 },\"]},\"195\":{\"h\":\"默认值\",\"t\":[\"author: { type: String, default: '匿名' //默认值 },\"]},\"196\":{\"h\":\"枚举值\",\"t\":[\"gender: { type: String, enum: ['男','女'] //设置的值必须是数组中的 },\"]},\"197\":{\"h\":\"唯一值\",\"t\":[\"username: { type: String, unique: true },\"]},\"198\":{\"h\":\"自定义匹配\",\"t\":[\"name:{ type:String, validate:nameLength }, function nameLength(){}\",\"validate实际上是一个函数，函数的参数代表当前字段，返回true表示通过验证，返回false表示未通过验证\",\"unique 需要 重建集合 才能有效果\",\"永远不要相信用户的输入\"]},\"199\":{\"h\":\"6. CURD\",\"t\":[\"数据库的基本操作包括四个，增加（create），删除（delete），修改（update），查（read）\"]},\"200\":{\"h\":\"增加\",\"t\":[\"插入一条\",\"SongModel.create({ title:'给我一首歌的时间', author: 'Jay' }, function(err, data){ //错误 console.log(err); //插入后的数据对象 console.log(data); });\",\"批量插入\",\"//1.引入mongoose const mongoose = require('mongoose'); //2.连接mongodb数据库 mongoose.connect('mongodb://127.0.0.1:27017/project'); //3.设置连接的回调 mongoose.connection.on('open',()=>{ //4.声明文档结构 const PhoneSchema = new mongoose.Schema({ brand:String, color:String, price:Number, tags:Array }) //6.创建模型对象 const PhoneModel = mongoose.model('phone',PhoneSchema); PhoneModel.insertMany([ { brand:'华为', color:'灰色', price:2399, tags:['电量大','屏幕大','信号好'] }, { brand:'小米', color:'白色', price:2099, tags:['电量大','屏幕大','信号好'] } ],(err,data)=>{ if(err) throw err; console.log('写入成功'); mongoose.connection.close(); }) })\"]},\"201\":{\"h\":\"删除\",\"t\":[\"删除一条数据\",\"SongModel.deleteOne({_id:'5dd65f32be6401035cb5b1ed'}, function(err){ if(err) throw err; console.log('删除成功'); mongoose.connection.close(); });\",\"批量删除\",\"SongModel.deleteMany({author:'Jay'}, function(err){ if(err) throw err; console.log('删除成功'); mongoose.connection.close(); });\"]},\"202\":{\"h\":\"更新\",\"t\":[\"更新一条数据\",\"//{author: 'JJ Lin'}, {$set:{author: '林俊杰'}}命令行中需要加$set SongModel.updateOne({author: 'JJ Lin'}, {author: '林俊杰'}, function (err) { if(err) throw err; mongoose.connection.close(); });\",\"批量更新数据\",\"SongModel.updateMany({author: 'Leehom Wang'}, {author: '王力宏'}, function (err) { if(err) throw err; mongoose.connection.close(); });\"]},\"203\":{\"h\":\"查询\",\"t\":[\"查询一条数据\",\"SongModel.findOne({author: '王力宏'}, function(err, data){ if(err) throw err; console.log(data); mongoose.connection.close(); }); //根据 id 查询数据 SongModel.findById('5dd662b5381fc316b44ce167',function(err, data){ if(err) throw err; console.log(data); mongoose.connection.close(); });\",\"批量查询数据\",\"//不加条件查询 SongModel.find(function(err, data){ if(err) throw err; console.log(data); mongoose.connection.close(); }); //加条件查询 SongModel.find({author: '王力宏'}, function(err, data){ if(err) throw err; console.log(data); mongoose.connection.close(); });\"]},\"204\":{\"h\":\"7. 条件控制\"},\"205\":{\"h\":\"运算符\",\"t\":[\"在 mongodb 不能 > < >= <= !== 等运算符，需要使用替代符号\",\">使用 $gt\",\"< 使用 $lt\",\"= 使用 $gte\",\"<= 使用 $lte\",\"!== 使用 $ne\",\"db.students.find({id:{$gt:3}}); id号比3大的所有的记录 // 价格小于 20 的图书 BookModel.find({ price: { $lt: 20 } }, (err, data) => { if (err) { console.log('读取失败~~~') return } console.log(data) })\"]},\"206\":{\"h\":\"逻辑运算\",\"t\":[\"$or 逻辑或的情况\",\"db.students.find({$or:[{age:18},{age:24}]}); // 曹雪芹 或者 余华的书 BookModel.find({ $or: [{ author: '曹雪芹' }, { author: '余华' }] }, (err, data)=>{ if (err) { console.log('读取失败~~~') return } console.log(data) })\",\"$and 逻辑与的情况\",\"db.students.find({$and: [{age: {$lt:20}}, {age: {$gt: 15}}]}); // 价格大于 30 且 小于 70 BookModel.find({ $and: [{ price: { $gt: 30 } }, { price: { $lt: 70 } }] }, (err, data) => { if (err) { console.log('读取失败~~~') return } console.log(data) })\"]},\"207\":{\"h\":\"正则匹配\",\"t\":[\"条件中可以直接使用 JS 的正则语法，通过正则可以进行模糊查询\",\"db.students.find({name:/imissyou/}); 正则表达式，搜索书籍名称中带有 '三' 的图书 BookModel.find({ name: /三/ }, (err, data) => { if (err) { console.log('读取失败~~~') return } console.log(data) }) BookModel.find({ name: new RegExp('三') }, (err, data) => { if (err) { console.log('读取失败~~~') return } console.log(data) })\"]},\"208\":{\"h\":\"8. 个性化读取\"},\"209\":{\"h\":\"字段筛选\",\"t\":[\"//0:不要的字段 //1:要的字段 SongModel.find().select({_id:0,title:1}).exec(function(err,data){ if(err) throw err; console.log(data); mongoose.connection.close(); });\",\"回调不可省略，但是可以使用exec() 简写\",\"SongModel.find().select({_id:0,title:1}).exec()\"]},\"210\":{\"h\":\"数据排序\",\"t\":[\"// sort 排序 // 1:升序 // -1:倒序 SongModel.find().sort({hot:1}).exec(function(err,data){ if(err) throw err; console.log(data); mongoose.connection.close(); });\"]},\"211\":{\"h\":\"数据截取\",\"t\":[\"//skip 跳过 limit 限定 SongModel.find().skip(10).limit(10).exec(function(err,data){ if(err) throw err; console.log(data); mongoose.connection.close(); });\"]},\"212\":{\"h\":\"9. 模块化\",\"t\":[\"将现有的代码进行合理的拆分\",\"02_mongoose模块化 ├── config │ └── config.js ├── db │ └── db.js ├── models │ ├── BookModel.js │ └── MovieModel.js ├── index.js └── test.js\",\"其中config保存数据库连接时的相关配置。\",\"//配置文件 module.exports = { DBHOST: '127.0.0.1', DBPORT: 27017, DBNAME: 'bilibili', USER: '', PASSWORD: '' }\",\"db则用来保存数据库连接时的通用代码，这样我们以后只需要写成功或失败连接后的回调逻辑即可。\",\"/** * * @param {*} success 数据库连接成功的回调 * @param {*} error 数据库连接失败的回调 */ module.exports = function (success, error) { //判断 error 为其设置默认值 if(typeof error !== 'function'){ error = () => { console.log('连接失败~~~'); } } //1. 安装 mongoose //2. 导入 mongoose const mongoose = require('mongoose'); //导入 配置文件 const {DBHOST, DBPORT, DBNAME} = require('../config/config.js'); //设置 strictQuery 为 true mongoose.set('strictQuery', true); //3. 连接 mongodb 服务 数据库的名称 mongoose.connect(`mongodb://${DBHOST}:${DBPORT}/${DBNAME}`); //4. 设置回调 // 设置连接成功的回调 mongoose.connection.once('open', () => { success(); }); // 设置连接错误的回调 mongoose.connection.on('error', () => { error(); }); //设置连接关闭的回调 mongoose.connection.on('close', () => { console.log('连接关闭'); }); }\",\"models中用来保存集合的Schema配置\",\"const mongoose = require('mongoose'); //设置集合中文档的属性以及属性值的类型 let BookSchema = new mongoose.Schema({ name: String, author: String, price: Number }); //创建模型对象 对文档操作的封装对象 let BookModel = mongoose.model('books', BookSchema); //暴露模型对象 module.exports = BookModel;\",\"index.js（主要书写）\",\"//导入 mongoose const mongoose = require('mongoose'); //导入 db 文件 const db = require('./db/db'); //导入 BookModel const BookModel = require('./models/BookModel'); // 调用函数 db(() => { //7. 新增 BookModel.create({ name: '西游记', author: '吴承恩', price: 19.9 }, (err, data) => { //判断是否有错误 if(err) { console.log(err); return; } //如果没有出错, 则输出插入后的文档对象 console.log(data); }); }, () => { console.log('连接失败...'); });\"]},\"213\":{\"h\":\"四、图形化管理工具\",\"t\":[\"我们可以使用图形化的管理工具来对 Mongodb 进行交互，这里列出两个图形化工具\",\"Robo 3T 免费 https://github.com/Studio3T/robomongo/releases\",\"Navicat 收费 https://www.navicat.com.cn/\"]},\"214\":{\"h\":\"nodejs简介\"},\"215\":{\"h\":\"一、定义\",\"t\":[\"Node.js是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O的模型，使其轻量又高效。Node.js 的包管理工具 npm 是全球最大的开源库生态系统。\",\"Node.js 不是一门语言，也不是 JavaScript 的框架，也不是像Nginx一样的Web服务器 ，Node.js 是 JavaScript 在服务器端的运行环境（平台）。\"]},\"216\":{\"h\":\"二、Node.js 的组成\",\"t\":[\"在 Node.js 里运行 JavaScript，跟在 Chrome 里运行 JavaScript 有什么不同？\",\"二者采用的是同样的 JS 引擎。在 Node.js 里写 JS，和在前端写 JS，几乎没有不同。在写法上的区别在于：Node.js 没有浏览器、页面标签相关的 API，但是新增了一些 Node.js 相关的 API。通俗来说，对于开发者而言，在前端写 JS 是用于控制浏览器；而 Node.js 环境写 JS 可以控制整个计算机。\",\"我们知道，JavaScript 的组成分为三个部分：\",\"ECMAScript\",\"DOM：标签元素相关的API\",\"BOM：浏览器相关的API\",\"ECMAScript 是 JS 的语法；DOM 和 BOM 浏览器端为 JS 提供的 API。\",\"而 Node.js 的组成分为：\",\"ECMAScript。ECMAScript 的所有语法在 Node 环境中都可以使用。\",\"Node 环境提供的一些附加 API(包括文件、网络等相关的 API)。\"]},\"217\":{\"h\":\"三、Node.js 的应用\",\"t\":[\"Node.js 拥有强大的开发者社区，现在已经发展出比较成熟的技术体系，以及庞大的生态。它被广泛地应用在 Web 服务、开发工作流、客户端应用等诸多领域。其中，在 Web 服务领域，业界对 Node.js 的接受程度最高。\"]},\"218\":{\"h\":\"1. BFF 中间层\",\"t\":[\"BFF，即 Backend For Frontend（服务于前端的后端）。玉伯在《从前端技术进化到体验科技》这篇文章中点出了 BFF 层的概念：\",\"BFF 模式下，整体分工很清晰，后端通过 Java/C++ 等语言负责服务实现，理想情况下给前端提供的是基于领域模型的 RPC 接口，前端则在 BFF 层直接调用服务端 RPC 接口拿到数据，按需加工消费数据，并实现人机交互。基于 BFF 模式的研发，很适合拥有前端技术背景的全栈型工程师。这种模式的好处很明显，后端可以专注于业务领域，更多从领域模型的视角去思考问题，页面视角的数据则交给前端型全栈工程师去搞定。领域模型与页面数据是两种思维模式，通过 BFF 可以很好地解耦开，让彼此更专业高效。\",\"在 Web 服务里，搭建一个中间层，前端访问中间层的接口，中间层再访问后台的 Java/C++ 服务。这类服务的特点是不需要太强的服务器运算能力，但对程序的灵活性有较高的要求。这两个特点，正好和 Node.js 的优势相吻合。Node.js 非常适合用来做 BFF 层，优势如下：\",\"对于前端来说：让前端有能力自由组装后台数据，这样可以减少大量的业务沟通成本，加快业务的迭代速度；并且，前端同学能够自主决定与后台的通讯方式。\",\"对于后台和运维来说，好处是：安全性（不会把主服务器暴露在外面）、降低主服务器的复杂度等。\"]},\"219\":{\"h\":\"2. 服务端渲染\",\"t\":[\"客户端渲染（CSR / Client side render）：前端通过一大堆接口请求数据，然后通过 JS 动态处理和生成页面结构和展示。优点是前后端分离、减小服务器压力、局部刷新。缺点是不利于 SEO（你的页面是通过 Ajax 异步进行内容的获取，而抓取工具并不会等待异步完成）、首屏渲染慢。\",\"服务端渲染（SSR / Server Side Render）：服务器返回的不是接口数据，而是一整个页面（或整个楼层）的 HTML 字符串，浏览器直接显示即可。也就是说，在服务器端直接就渲染好了，然后一次性打包返回给前端。优点是有利于 SEO、首屏渲染很快。\",\"总结： 搜索引擎优化 + 首屏速度优化 = 服务端渲染。\",\"备注：这里的「服务端渲染」只是让 Node.js 做中间层，并不是传统意义上的服务端渲染。\",\"参考链接：\",\"Vue 服务端渲染的概念\",\"https://blog.csdn.net/u012036171/article/details/88833200\",\"https://juejin.im/post/5c068fd8f265da61524d2abc\",\"方应杭\",\"历史回顾：\",\"（1）一开始，页面很简单，html 是后端渲染的（比如PHP、ASP、JSP等方式）。后端发现页面中的 js 好麻烦（虽然简单，但是坑多），于是让公司招聘专门写 js 的人，简称「前端切图仔」。\",\"（2）随着 Node.js 和前端 MVC 的兴起，以及前端越来越复杂，慢慢演变成了「前后端分离」。\",\"（3）前端的 SPA 应用流行之后，发现 SEO 问题很大，而且首屏渲染速度很慢，但是自己选的路再难走也要走下去，于是用 Node.js 在服务端渲染被看成是一条出路。\",\"（4）以前在一起的时候，是后端做部分前端的工作；现在在一起的时候，是前端做部分后端的工作。\"]},\"220\":{\"h\":\"3. 做小型服务、小型网站的后端（基于 Express、Koa 框架）\",\"t\":[\"现在很多公司的后台管理系统，都是用 Node.js 来开发接口，毕竟，后台管理系统对性能和并发的要求不是太高。有了 Node.js 之后，通过 JS 直接操作 DB，做增删改查，生成接口，极大降低了前端同学的学习门槛。\",\"当然，有时候做 Node.js 开发，是因为：后台人力不够，所以把后台开发的一部分工作量，转移给前端同学。\"]},\"221\":{\"h\":\"4. 做项目构建工具\",\"t\":[\"前端正在广泛使用的构建工具 gulp、Webpack，就是基于 Node.js 来实现的。\"]},\"222\":{\"h\":\"5. 做 PC 客户端软件（基于 Electron 框架）\",\"t\":[\"Electron 框架就是基于 Node.js 的，可以用来开发客户端软件。\",\"Electron 原名为 Atom Shell，是由 GitHub 开发的一个开源框架。Electron 以 Node.js 作为运行时（runtime），以 chromium 作为渲染引擎，使开发者可以使用 JS 这种前端技术栈开来发跨平台的桌面GUI应用程序。\",\"我们常用的代码编辑器 VS Code ， 就是基于 Electron 框架来开发的。其他使用 Electron 进行开发的知名应用还有：Skype、GitHub Desktop、Slack、WhatsApp等。\",\"还有一个例子是：电子游戏直播网站 Twitch，号称是国外游戏直播的鼻祖，它在 PC 端的客户端软件，就是用 Electron 框架的。你会发现，Twitch 的网站视觉，和 PC 端的视觉，几乎是一样的。如果两端都采用 JS 语言，就可以极大的复用现有的工程。\"]},\"223\":{\"h\":\"6. 知名度较高的 Node.js 开源项目\",\"t\":[\"image-20221102140856507\",\"express：Node.js 中著名的 web 服务框架。\",\"Koa：下一代的 Node.js 的 Web 服务框架。所谓的“下一代”是相对于 Express 而言的。\",\"Egg：2016 年，阿里巴巴研发了知名的 Egg.js 开源项目，号称企业级 Web 服务框架。Egg.js 是基于 Koa 开发的。\",\"mocha：是现在最流行的 JavaScript 测试框架，在浏览器和 Node 环境都可以使用。\",\"PM2：node 多进程管理。\",\"jade：非常优秀的模板引擎，不仅限于 js 语言。\",\"CoffeeScript：用简洁的方式展示 JavaScript 优秀的部分。\",\"Atom：编辑器。\",\"VS Code：最酷炫的编辑器。\",\"socket.io：实时通信框架。\"]},\"224\":{\"h\":\"四、Node.js 的特点\",\"t\":[\"异步、非阻塞 IO 模型\",\"事件循环\",\"单线程\",\"总结：轻量和高效\",\"Node.js 的性能和效率非常高。\",\"传统的 Java 语言是一个请求开启一个线程，当请求处理完毕后就关闭这个线程。而 Node.js 则完全没有采用这种模型，它本质上就是一个单线程。\",\"你可能会疑问：一个线程如何服务于大量的请求、如何处理高并发的呢？这是因为，Node.js 采用的是异步的、非阻塞的模型。\",\"这里所谓的“单线程”，指的是 Node 的主线程只有一个。为了确保主线程不被阻塞，主线程是用于接收客户端请求。但不会处理具体的任务。而 Node 的背后还有一个线程池，线程池会处理长时间运行的任务（比如 IO 操作、网络操作）。线程池里的任务是通过队列和事件循环的机制来执行。\"]},\"225\":{\"h\":\"五、使用 Node.js 时的劣势\",\"t\":[\"程序运行不稳定，可能会出现服务不可用的情况\",\"程序运行效率较低，每秒的请求数维持在一个较低的水平\",\"前端同学对服务器端的技术不太熟悉。\"]},\"226\":{\"h\":\"nodeJS安装\"},\"227\":{\"h\":\"一、安装包安装\",\"t\":[\"到 Node.js 的官网下载安装包：\",\"也可以在https://nodejs.org/en/download/releases/ 里下载历史版本。\",\"后续如果需要安装其他版本，直接下载最新的安装包，覆盖安装即可。\"]},\"228\":{\"h\":\"二、NVM安装\",\"t\":[\"NVM：node.js version manager，用来管理 node 的版本。\",\"我们可以先安装 NVM，然后通过 NVM 安装 Node.js。Windows 安装的 Node.js 的教程参考nvm for windows 下载、安装及使用。\",\"下载之后可以在文件目录下的settings.txt文件中，添加如下两行，修改镜像源。\",\"node_mirror: https://npmmirror.com/mirrors/node/ npm_mirror: https://npmmirror.com/mirrors/npm/\"]},\"229\":{\"h\":\"1. NVM的常用命令\",\"t\":[\"# 查看当前使用的nvm版本 nvm --version # 查看本地安装的所有的 Node.js 版本： nvm list # 安装指定版本的 Node.js： nvm install 版本号 # 卸载指定版本 Node.js： nvm uninstall 版本号 # 切换使用指定版本的 node： nvm use 版本号 # 可下载的所有 Node 版本： nvm list available\"]},\"230\":{\"h\":\"Node.js 模块化\"},\"231\":{\"h\":\"一、介绍\"},\"232\":{\"h\":\"1. 什么是模块化与模块 ?\",\"t\":[\"将一个复杂的程序文件依据一定规则（规范）拆分成多个文件的过程称之为 模块化\",\"其中拆分出的 每个文件就是一个模块，模块的内部数据是私有的，不过模块可以暴露内部数据以便其他模块使用\"]},\"233\":{\"h\":\"2. 什么是模块化项目 ?\",\"t\":[\"编码时是按照模块一个一个编码的， 整个项目就是一个模块化的项目\"]},\"234\":{\"h\":\"3. 模块化好处\",\"t\":[\"下面是模块化的一些好处：\",\"防止命名冲突\",\"高复用性\",\"高维护性\"]},\"235\":{\"h\":\"二、模块暴露数据\"},\"236\":{\"h\":\"1. 模块初体验\",\"t\":[\"可以通过下面的操作步骤，快速体验模块化\",\"创建 me.js\",\"//声明函数 function tiemo(){ console.log('贴膜....'); } //暴露数据 module.exports = tiemo;\",\"创建 index.js\",\"//导入模块 const tiemo = require('./me.js'); //调用函数 tiemo(); //=> 贴膜....\"]},\"237\":{\"h\":\"2. 暴露数据\",\"t\":[\"模块暴露数据的方式有两种：\",\"module.exports = value\",\"exports.name = value\",\"使用时有几点注意：\",\"module.exports 可以暴露 任意 数据\",\"不能使用 exports = value 的形式暴露数据，模块内部 module 与 exports 的隐式关系 exports = module.exports = {} ，require 返回的是目标模块中 module.exports 的值\",\"05_NodeJS模块化\"]},\"238\":{\"h\":\"三、导入（引入）模块\",\"t\":[\"在模块中使用 require 传入文件路径即可引入文件\",\"const test = require('./me.js')\",\"require 使用的一些注意事项：\",\"对于自己创建的模块，导入时路径建议写 相对路径，且不能省略 ./ 和 ../\",\"js 和 json 文件导入时可以不用写后缀，c/c++编写的 node 扩展文件也可以不写后缀，但是一般用不到，直接使用 node 的 require() 方法即可将 JSON 文件转换成 JS 对象\",\"如果导入其他类型的文件，会以 js 文件进行处理\",\"如果导入的路径是个文件夹，则会 首先 检测该文件夹下 package.json 文件中 main 属性对应的文件，\",\"如果存在则导入，反之如果文件不存在会报错。\",\"如果 main 属性不存在，或者 package.json 不存在，则会尝试导入文件夹下的 index.js 和 index.json，\",\"如果还是没找到，就会报错\",\"导入 node.js 内置模块时，直接 require 模块的名字即可，无需加 ./ 和 ../\"]},\"239\":{\"h\":\"四、导入模块的基本流程\",\"t\":[\"这里我们介绍一下 require 导入 自定义模块 的基本流程\",\"将相对路径转为绝对路径，定位目标文件\",\"缓存检测\",\"读取目标文件代码\",\"包裹为一个函数并执行（自执行函数）。通过 arguments.callee.toString() 查看自执行函数\",\"缓存模块的值\",\"返回 module.exports 的值\",\"/** * 伪代码 */ function require(file){ //1. 将相对路径转为绝对路径，定位目标文件 let absolutePath = path.resolve(__dirname, file); //2. 缓存检测 if(caches[absolutePath]){ return caches[absolutePath]; } //3. 读取文件的代码 let code = fs.readFileSync(absolutePath).toString(); //4. 包裹为一个函数 然后执行 let module = {}; let exports = module.exports = {}; (function (exports, require, module, __filename, __dirname) { const test = { name: '尚硅谷' } module.exports = test; //输出 console.log(arguments.callee.toString()); })(exports, require, module, __filename, __dirname) //5. 缓存结果 caches[absolutePath] = module.exports; //6. 返回 module.exports 的值 return module.exports; }\",\"05_NodeJS模块化\"]},\"240\":{\"h\":\"五、CommonJS 规范\",\"t\":[\"module.exports 、exports 以及 require 这些都是 CommonJS 模块化规范中的内容。\",\"而 Node.js 是实现了 CommonJS 模块化规范，二者关系有点像 JavaScript 与 ECMAScript\"]},\"241\":{\"h\":\"nodejs内置模块\",\"t\":[\"Node.js的API文档（中文）：https://nodejs.cn/api/\",\"Node.js 应用由模块组成，采用 CommonJS 模块规范。Node.js中的模块分为三种：\",\"内置模块\",\"第三方模块\",\"自定义模块\",\"关于 Node.js 的内置模块和常见API，可以看官方文档，下面介绍几种常用的模块。\"]},\"242\":{\"h\":\"一、fs文件系统\",\"t\":[\"fs 全称为 file system ，称之为 文件系统 ，是 Node.js 中的 内置模块 ，可以对计算机中的磁盘进行操作。\",\"Node.js 中的同步和异步的区别\",\"fs模块对文件的几乎所有操作都有同步和异步两种形式。例如：readFileSync()和readFile() 。\",\"区别：\",\"同步调用会阻塞代码的执行，异步则不会。\",\"异步调用会将 读取任务 下达到任务队列，直到任务执行完成才会回调。\",\"异常处理方面：同步必须使用 try catch 方式，异步可以通过回调函数的第一个参数。【重要】\"]},\"243\":{\"h\":\"1. 文件写入\",\"t\":[\"文件写入就是将 数据 保存到 文件 中，我们可以使用如下几个方法来实现该效果\",\"方法\",\"说明\",\"writeFile\",\"异步写入\",\"writeFileSync\",\"同步写入\",\"appendFile / appendFileSync\",\"追加写入\",\"createWriteStream\",\"流式写入\"]},\"244\":{\"h\":\"writeFile 异步写入\",\"t\":[\"语法： fs.writeFile(file, data[, options], callback)\",\"参数说明：\",\"file 文件名\",\"data 待写入的数据\",\"options 选项设置 （可选）\",\"callback 写入回调\",\"返回值： undefined\",\"代码示例：\",\"const fs = require('fs') // 将 [三人行，必有我师焉。] 写入到当前文件夹下的 [座右铭.txt] 文件中 fs.writeFile('./座右铭.txt', '三人行，必有我师焉。', err =>{ if(err) throw err; console.log('写入成功') })\"]},\"245\":{\"h\":\"writeFileSync 同步写入\",\"t\":[\"语法:fs.writeFileSync(file, data[, options])\",\"参数与 fs.writeFile 大体一致，只是没有 callback 参数\",\"返回值：undefined\",\"代码示例：\",\"try{ fs.writeFileSync('./座右铭.txt', '三人行，必有我师焉。') console.log('文件写入成功'); }catch(e){ console.log(e) }\",\"如果文件不存在，则创建文件；如果文件存在，则覆盖文件内容；\",\"Node.js 中的磁盘操作是由其他 线程 完成的，结果的处理有两种模式:\",\"同步处理 JavaScript 主线程 会等待 其线程的执行结果，然后再继续执行主线程的代码，效率较低\",\"异步处理 JavaScript 主线程 不会等待 其线程的执行结果，直接执行后续的主线程代码，效率较好\"]},\"246\":{\"h\":\"appendFile/appendFileSync 追加写入\",\"t\":[\"appendFile 作用是在文件尾部追加内容，appendFile 语法与 writeFile 语法完全相同\",\"语法:\",\"fs.appendFile(file, data[, options], callback)\",\"fs.appendFileSync(file, data[, options])\",\"返回值：二者都为 undefined\",\"实例代码：\",\"fs.append('./座右铭.txt', '则其善者而从之，其不善者而改之。', err =>{ if(err) throw err console.log('追加成功') }) fs.appendFileSync('./座右铭.txt','\\\\r\\\\n温故而知新，可以为师矣')\"]},\"247\":{\"h\":\"createWriteStream 流式写入\",\"t\":[\"语法：fs.createWriteStream(path[, options])\",\"参数说明：\",\"path 文件路径\",\"options 选项配置（ 可选 ）\",\"**返回值: **Object\",\"代码示例：\",\"let ws = fs.createWriteStream('./观书有感.txt') //写入数据到流 ws.write('半亩方塘一鉴开\\\\r\\\\n') ws.write('天光云影共徘徊\\\\r\\\\n') ws.write('问渠那得清如许\\\\r\\\\n') ws.write('为有源头活水来\\\\r\\\\n') //关闭写入流，表明已没有数据要被写入可写流 ws.end()\",\"程序打开一个文件是需要消耗资源的，流式写入可以减少打开关闭文件的次数。\",\"流式写入方式适用于 大文件写入或者频繁写入的场景，writeFile适合于 写入频率较低的场景\"]},\"248\":{\"h\":\"写入文件的场景\",\"t\":[\"文件写入 在计算机中是一个非常常见的操作，下面的场景都用到了文件写入\",\"下载文件\",\"安装软件\",\"保存程序日志，如 Git\",\"编辑器保存文件\",\"视频录制\",\"当 需要持久化保存数据 的时候，应该想到 文件写入\"]},\"249\":{\"h\":\"2. 文件读取\",\"t\":[\"文件读取顾名思义，就是通过程序从文件中取出其中的数据，我们可以使用如下几种方式：\",\"方法\",\"说明\",\"readFile\",\"异步读取\",\"readFileSync\",\"同步读取\",\"createReadStream\",\"流式读取\"]},\"250\":{\"h\":\"readFile 异步读取\",\"t\":[\"语法: fs.readFile(path[, options], callback)\",\"参数说明：\",\"path 文件路径\",\"options 选项配置\",\"callback 回调函数\",\"返 回 值 ：undefined\",\"代码示例：\",\"// 导入 fs 模块 fs.readFile('./座右铭.txt', (error,data) =>{ if(err) throw err console.log(data) }) fs.readFile('./座右铭.txt', 'uft-8', (error,data) =>{ if(err) throw err console.log(data) })\"]},\"251\":{\"h\":\"readFileSync 同步读取\",\"t\":[\"语法：fs.readFileSync(path[, options])\",\"参数说明：\",\"path 文件路径\",\"options 选项配置\",\"返 回 值 ：string | Buffer\",\"代码示例：\",\"let data = fs.readFileSync('./座右铭.txt') let data = fs.readFileSync('./座右铭.txt', 'utf-8')\"]},\"252\":{\"h\":\"createReadStream 流式读取\",\"t\":[\"语法：fs.createReadStream(path[, options])\",\"参数说明：\",\"path 文件路径\",\"options 选项配置（ 可选 ）\",\"返回值：Object\",\"代码示例：\",\"// 创建读取流对象 let rs = fs.createReadStream('./观书有感.txt') // 每次取出 64k 数据后执行一次 data 回调 // 绑定一个 data 事件 chunk 块儿 大块儿 rs.on('data', chunk =>{ console.log(chunk) console.log(chunk.length) }) // 读取完毕后，执行 end 回调 (可选事件) rs.on('end', () =>{ console.log('读取完毕') })\"]},\"253\":{\"h\":\"读取文件应用场景\",\"t\":[\"电脑开机\",\"程序运行\",\"编辑器打开文件\",\"查看图片\",\"播放视频\",\"播放音乐\",\"Git 查看日志\",\"上传文件\",\"查看聊天记录\"]},\"254\":{\"h\":\"3. 文件移动与重命名\",\"t\":[\"在 Node.js 中，我们可以使用 rename 或 renameSync 来移动或重命名 文件或文件夹\",\"语法：\",\"fs.rename(oldPath, newPath, callback)\",\"fs.renameSync(oldPath, newPath)\",\"参数说明：\",\"oldPath 文件当前的路径\",\"newPath 文件新的路径\",\"callback 操作后的回调\",\"代码示例：\",\"fs.rename('./观书有感.txt', './论语/观书有感.txt', err =>{ if(err) throw err console.log('移动完成') }) fs.renameSync('./座右铭.txt', './论语/.我的座右铭.txt')\",\"注: 如果还是移动到当前路径，但是修改了名字，就是重命名了\"]},\"255\":{\"h\":\"4. 文件删除\",\"t\":[\"在 Node.js 中，我们可以使用 unlink 或 unlinkSync 来删除文件\",\"语法:\",\"fs.unlink(path, callback)\",\"fs.unlinkSync(path)\",\"参数说明：\",\"path 文件路径\",\"callback 操作后的回调\",\"代码示例：\",\"const fs = require('fs') fs.unlink('./test.txt', err =>{ if(err) throw err console.log('删除成功') }) fs.unlinkSync('./test2.txt') // 调用 rm 方法 14.4 同步 rmSync fs.rm('./论语.txt', err => { if (err) { console.log('删除失败') return } console.log('删除成功') })\"]},\"256\":{\"h\":\"5. 文件夹操作\",\"t\":[\"借助 Node.js 的能力，我们可以对文件夹进行 创建 、读取 、删除 等操作\",\"方法\",\"说明\",\"mkdir / mkdirSync\",\"创建文件夹\",\"readdir / readdirSync\",\"读取文件夹\",\"rmdir / rmdirSync\",\"删除文件夹\"]},\"257\":{\"h\":\"mkdir 创建文件夹\",\"t\":[\"在 Node.js 中，我们可以使用 mkdir 或 mkdirSync 来创建文件夹\",\"语法:\",\"fs.mkdir(path[, options], callback)\",\"fs.mkdirSync(path[, options])\",\"参数说明：\",\"path 文件夹路径\",\"options 选项配置（ 可选 ）\",\"callback 操作后的回调\",\"示例代码：\",\"// 异步创建文件夹 mk make 制作 dir directory 文件夹 fs.mkdir('./page', err =>{ if(err) throw err console.log('创建成功') }) // 递归异步创建 fs.mkdir('./1/2/3', {recursive: true}, err =>{ if(err) throw err console.log('递归创建成功') }) // 递归同步创建文件夹 fs.mkdirSync('./x/y/z', {recursive: true})\"]},\"258\":{\"h\":\"readdir 读取文件夹\",\"t\":[\"在 Node.js 中，我们可以使用 readdir 或 readdirSync 来读取文件夹\",\"语法：\",\"fs.readdir(path[, options], callback)\",\"fs.readdirSync(path[, options])\",\"参数说明：\",\"path 文件夹路径\",\"options 选项配置（ 可选 ）\",\"callback 操作后的回调\",\"示例代码：\",\"// 异步读取 fs.readdir('./论语', (err, data) => { if(err) throw err console.log(data) }) // 同步读取 let data = fs.readdirSync('./论语') console.log(data)\"]},\"259\":{\"h\":\"rmdir 删除文件夹\",\"t\":[\"在 Node.js 中，我们可以使用 rmdir 或 rmdirSync 来删除文件夹\",\"语法：\",\"fs.rmdir(path[, options], callback)\",\"fs.redirSync(path[, options])\",\"参数说明：\",\"path 文件夹路径\",\"options 选项配置（ 可选 ）\",\"callback 操作后的回调\",\"示例代码：\",\"// 异步删除文件夹 rm remove 移除 fs.rmdir('./page', err => { if(err) throw err console.log('删除成功') }) //异步递归删除文件夹 不推荐 //=>DeprecationWarning: In future versions of Node.js, fs.rmdir(path, { recursive: true }) will be removed. Use fs.rm(path, { recursive: true }) instead fs.rmdirSync('./1', {recursive: true}, err => { if(err){ console.log(err) return } console.log('递归删除') }) //同步递归删除文件夹 fs.rmdirSync('./x', {recursive: true}) // 建议使用 fs.rm('./a', { recursive: true }, err => { if (err) { console.log(err) return } console.log('删除成功') })\"]},\"260\":{\"h\":\"6. 查看资源状态\",\"t\":[\"在 Node.js 中，我们可以使用 stat 或 statSync 来查看资源的详细信息\",\"语法：\",\"fs.stat(path[, options], callback)\",\"fs.statSync(path[, options])\",\"参数说明：\",\"path 文件夹路径\",\"options 选项配置（ 可选 ）\",\"callback 操作后的回调\",\"示例代码：\",\"// 异步获取状态 // stat 方法 status 缩写 状态 fs.stat('/data.txt', (err, data) =>{ if(err) throw err console.log(data) }) // 同步获取状态 let data = fs.statSync('./data.txt')\",\"image-20230321144242912\",\"结果值对象结构：\",\"size 文件体积\",\"birthtime 创建时间\",\"mtime 最后修改时间\",\"isFile 检测是否为文件\",\"isDirectory 检测是否为文件夹\",\"....\"]},\"261\":{\"h\":\"7. 相对路径问题\",\"t\":[\"fs 模块对资源进行操作时，路径的写法有两种：\",\"相对路径\",\"./座右铭.txt 当前目录下的 座右铭.txt\",\"座右铭.txt 等效于上面的写法\",\"../座右铭.txt 当前目录的上一级目录中的 座右铭.txt\",\"绝对路径\",\"D:/Program Files windows 系统下的绝对路径\",\"/user/bin Linux 系统下的绝对路径\",\"相对路径中所谓的 当前目录 ，指的是 命名行的工作目录 ，而并非是文件的所在目录\",\"所以当命名行的工作目录与文件所在目录不一致时，会出现一些 Bug\"]},\"262\":{\"h\":\"8. __dirname\",\"t\":[\"__dirname 与 require 类似，都是 Node.js 环境中的 '全局' 变量\",\"__dirname 保存着 当前文件夹所在目录的绝对路径，可以使用 __dirname 与文件名拼接成绝对路径\",\"代码示例:\",\"//=>__dirname + '/data.txt' === 'D:\\\\\\\\Desktop\\\\\\\\Node\\\\\\\\code\\\\\\\\03-fs模块/data.txt' let data = fs.readFileSync(__dirname + '/data.txt') console.log(data)\",\"使用 fs 模块的时候，尽量使用 __dirname 路径转换为绝对路径，这样可以避免相对路径产生的 Bug\"]},\"263\":{\"h\":\"9. 练习\",\"t\":[\"编写一个 JS 文件，实现复制文件的功能\",\"/* * 需求: * 复制 资料文件夹下的 [笑看风云.mp4] */ // 导入 fs 模块 const fs = require('fs') // 方式一 readFile // 读取文件内容 let data = fs.readFileSync('./资料/笑看风云.mp4') // 写入文件 fs.writeFileSync('./资料/笑看风云2.mp4', data) // 方式二 流式操作 // 创建读取流对象 const rs = fs.createReadStream('./资料/笑看风云.mp4') // 创建一个写入流对象 const ws = fs.createWriteStream('./资料/笑看风云3.mp4') // 绑定data事件 // 理想状态下，读取 64k 就写入 64 k，这样消耗的内存最少，实际上读取的速度大于写入的速度 rs.on('data', chunk => { ws.write(chunk) }) // 绑定data事件 ==== rs.pipe(ws)\",\"文件重命名\",\"// 1. 导入 fs 模块 const fs = require('fs') // 读取 03-fs模块 文件夹 const files = fs.readdirSync('../03-fs模块') // 遍历数组 files.forEach(item => { // 判断 let [num, name] = item.split('-') if (num < 10) { num = '0' + num } // 创建新的文件名 let newName = num + '-' + name // 重命名 fs.renameSync(`../03-fs模块/${item}`, `../03-fs模块/${newName}`) })\"]},\"264\":{\"h\":\"二、path模块\",\"t\":[\"path 模块提供了 操作路径 的功能，我们将介绍如下几个较为常用的几个 API：\",\"API\",\"说明\",\"path.resolve\",\"拼接规范的绝对路径 常用\",\"path.sep\",\"获取操作系统的路径分隔符\",\"path.parse\",\"解析路径并返回对象\",\"path.basename\",\"获取路径的文件名（带后缀）\",\"path.dirname\",\"获取路径的目录名\",\"path.extname\",\"获得路径的扩展名\",\"代码示例：\",\"const fs = require('fs') const path = require('path') // 写入文件 fs.writeFileSync(__dirname + '/index.html', 'love') console.log(__dirname + '/index.html') //=>D:\\\\Desktop\\\\Node\\\\code\\\\04-path/index.html // resolve 解决问题 拼接绝对路径 console.log(path.resolve(__dirname, './index.html')) //=>D:\\\\Desktop\\\\Node\\\\code\\\\04-path\\\\index.html console.log(path.resolve(__dirname, 'index.html')) //=>D:\\\\Desktop\\\\Node\\\\code\\\\04-path\\\\index.html console.log(path.resolve(__dirname, '/index.html', './test')) //=>D:\\\\index.html\\\\test // sep 获取路径分隔符 console.log(path.sep) //=> window \\\\ linux / // parse 方法 __filename '全局变量' console.log(__filename) //=>文件的绝对路径 //=>D:\\\\Desktop\\\\Node\\\\code\\\\04-path\\\\01-path.js // 解析路径 let str = 'D:\\\\\\\\Desktop\\\\\\\\Node\\\\\\\\code\\\\\\\\04-path\\\\\\\\01-path.js' console.log(path.parse(str)) /* { root: 'D:\\\\\\\\', dir: 'D:\\\\\\\\Desktop\\\\\\\\Node\\\\\\\\code\\\\\\\\04-path', base: '01-path.js', ext: '.js', name: '01-path' } */ // 获取路径基础名称 console.log(path.basename(str)) console.log(path.basename(str),'.js') //01-path.js //01-path // 获取路径的目录名 console.log(path.dirname(str)) //D:\\\\\\\\Desktop\\\\\\\\Node\\\\\\\\code\\\\\\\\04-path // 获取路径的拓展名 console.log(path.extname(str)) //.js\"]},\"265\":{\"h\":\"三、HTTP模块\"},\"266\":{\"h\":\"1. 概念\",\"t\":[\"HTTP（hypertext transport protocol）协议；中文叫 超文本传输协议，是一种基于TCP/IP的应用层通信协议\",\"这个协议详细规定了 浏览器 和 万维网 服务器 之间互相通信的规则\",\"协议中主要规定了两个方面的内容:\",\"客户端：用来向服务器发送数据，可以被称之为 请求报文\",\"服务端：向客户端返回数据，可以被称之为 响应报文\",\"报文：可以简单理解为就是一堆字符串\"]},\"267\":{\"h\":\"2. 请求报文的组成\",\"t\":[\"请求行\",\"请求头\",\"空行\",\"请求体\"]},\"268\":{\"h\":\"的请求行\",\"t\":[\"请求方法（get、post、put、delete等）\",\"请求 URL（统一资源定位器）\",\"例如：http://www.baidu.com/index.html?a=100&b=200#logo\",\"http: 协议 (https、ftp、ssh等)\",\"www.baidu.com 域名\",\"80 端口号\",\"/index.html 路径\",\"a=100&b=200 查询字符串\",\"#logo 哈希 (锚点链接)\",\"HTTP协议版本号\"]},\"269\":{\"h\":\"HTTP 请求头\",\"t\":[\"格式：『头名：头值』\",\"常见的请求头有：\",\"请求头\",\"解释\",\"Host\",\"主机名\",\"Connection\",\"连接的设置 keep-alive（保持连接）；close（关闭连接）\",\"Cache-Control\",\"缓存控制 max-age = 0 （没有缓存）\",\"Upgrade-Insecure-Requests\",\"将网页中的http请求转化为 https 请求（很少用）老网站升级\",\"User-Agent\",\"用户代理，客户端字符串标识，服务器可以通过这个标识来识别这个请求来自哪个客户端 ，一般在PC端和手机端的区分\",\"Accept\",\"设置浏览器接收的数据类型\",\"Accept-Encoding\",\"设置接收的压缩方式\",\"Accept-Language\",\"设置接收的语言 q=0.7 为喜好系数，满分为1\",\"Cookie\",\"后面单独讲\"]},\"270\":{\"h\":\"HTTP 的请求体\",\"t\":[\"请求体内容的格式是非常灵活的，\",\"（可以是空）==> GET请求，\",\"（也可以是字符串，还可以是JSON）===> POST请求\",\"例如：\",\"字符串：keywords=手机&price=2000\",\"JSON：{\\\"keywords\\\":\\\"手机\\\",\\\"price\\\":2000}\"]},\"271\":{\"h\":\"3. 响应报文的组成\",\"t\":[\"响应行: HTTP/1.1 200 OK\",\"HTTP/1.1：HTTP协议版本号\",\"200：响应状态码 404 Not Found 500 Internal Server Error\",\"还有一些状态码，参考：https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status\",\"OK：响应状态描述\",\"响应状态码 和 响应字符串 关系是 一一对应 的。\",\"响应头\",\"Cache-Control: 缓存控制 private 私有的，只允许客户端缓存数据\",\"Connection: 链接设置\",\"Content-Type:text/html;charset=utf-8: 设置响应体的数据类型以及字符集,响应体为html，字符集utf-8\",\"Content-Length: 响应体的长度，单位为字节\",\"空行\",\"响应体\",\"响应体内容的类型是非常灵活的，常见的类型有 HTML、CSS、JS、图片、JSON\"]},\"272\":{\"h\":\"4. 创建 服务\",\"t\":[\"使用 nodejs 创建 HTTP 服务\"]},\"273\":{\"h\":\"操作步骤\",\"t\":[\"//1. 导入 http 模块 const http = require('http'); //2. 创建服务对象 create 创建 server 服务 // request 意为请求. 是对请求报文的封装对象, 通过 request 对象可以获得请求报文的数据 // response 意为响应. 是对响应报文的封装对象, 通过 response 对象可以设置响应报文 const server = http.createServer((request, response) => { // 设置响应体 response.end('Hello HTTP server'); }); //=>返回结果是一个对象 //3. 监听端口, 启动服务 server.listen(9000, () => { console.log('服务已经启动, 端口 9000 监听中...'); });\",\"http.createServer 里的回调函数的执行时机： 当接收到 HTTP 请求的时候，就会执行\"]},\"274\":{\"h\":\"测试\",\"t\":[\"浏览器请求对应端口\",\"http://127.0.0.1:9000\"]},\"275\":{\"h\":\"注意事项\",\"t\":[\"命令行 ctrl + c 停止服务\",\"当服务启动后，更新代码 必须重启服务才能生效\",\"响应内容中文乱码的解决办法\",\"// 设置响应头 response.setHeader('content-type','text/html;charset=utf-8');\",\"端口号被占用\",\"Error: listen EADDRINUSE: address already in use :::9000\",\"1）关闭当前正在运行监听端口的服务 （ 使用较多 ）\",\"2）修改其他端口号\",\"HTTP 协议默认端口是 80 。HTTPS 协议的默认端口是 443, HTTP 服务开发常用端口有 3000，8080，8090，9000 等\",\"如果端口被其他程序占用，可以使用 资源监视器 找到占用端口的程序，然后使用 任务管理器 关闭对应的程序\"]},\"276\":{\"h\":\"5. 浏览器查看 HTTP 报文\",\"t\":[\"04_HTTP协议\"]},\"277\":{\"h\":\"查看请求行与请求头\",\"t\":[\"04_HTTP协议\"]},\"278\":{\"h\":\"查看请求体\",\"t\":[\"8-2\"]},\"279\":{\"h\":\"查看 查询字符串\",\"t\":[\"8-3\"]},\"280\":{\"h\":\"查看响应行与响应头\",\"t\":[\"8-4\"]},\"281\":{\"h\":\"查看响应体\",\"t\":[\"8-5\"]},\"282\":{\"h\":\"6. 获取 HTTP 请求报文\",\"t\":[\"含义\",\"语法\",\"重点掌握\",\"请求方法\",\"request.method\",\"*****\",\"请求版本\",\"request.httpVersion\",\"请求路径\",\"request.url\",\"*****\",\"URL 路径\",\"require('url').parse(request.url).pathname\",\"*****\",\"URL 查询字符串\",\"require('url').parse(request.url, true).query\",\"*****\",\"请求头\",\"request.headers\",\"*****\",\"请求体\",\"request.on('data', function(chunk){})request.on('end', function(){})\",\"// 1. 导入 http 模块 const http = require('http') // 2. 创建服务对象 const server = http.createServer((request, response) => { // 获取请求的方法 console.log(request.method) //=>GET // 获取请求的 url console.log(request.url) // 只包含 url 中的 路径 与查询字符串 // 获取 http 协议的版本号 console.log(request.httpVersion) //=> 1.1 // 获取 http 的请求头 console.log(request.headers) //=>结果是一个对象 response.end('http') //=>设置响应体 }) // 3. 监听端口，启动服务 server.listen(9000, () => { console.log('服务已经启动...') })\",\"注意事项：\",\"request.url 只能获取路径以及查询字符串，无法获取 URL 中的域名以及协议的内容\",\"request.headers 将请求信息转化成一个对象，并将属性名都转化成了『小写』\",\"关于路径：如果访问网站的时候，只填写了 IP 地址或者是域名信息，此时请求的路径为『 / 』\",\"关于 favicon.ico：这个请求是属于浏览器自动发送的请求\"]},\"283\":{\"h\":\"提取 http 报文的请求体\",\"t\":[\"// 1. 导入 http 模块 const http = require('http') // 2. 创建服务对象 const server = http.createServer((request, response) => { // 1. 声明一个变量 let body = '' // 2. 绑定 data 事件 request.on('data', chunk => { body += chunk }) // 3. 绑定 end 事件 request.on('end', () => { console.log(body) //=>'username=111&password=111' // 响应 response.end('Hello Http') //=>设置响应体 }) }) // 3. 监听端口，启动服务 server.listen(9000, () => { console.log('服务已经启动...') })\"]},\"284\":{\"h\":\"提取 http 报文中 url的路径 与 查询字符串\",\"t\":[\"// 导入 http 模块 const http = require('http') // 1. 导入 url 模块 const url = require('url') // 创建服务对象 const server = http.createServer((request, response) => { // 2. 解析 request.url console.log(request.url) //=>/search?keyword=h5 // 使用 parse 解析 request.url 的内容 // true 将 query 属性将会设置为一个 对象 let res = url.parse(request.url, true) console.log(res) // 如下图所示，为一个对象 // 路径 let pathname = res.pathname // 查询字符串 let keyword = res.query.keyword console.log(keyword) //=>h5 response.end('url') }) // 监听端口，启动服务 server.listen(9000, () => { console.log('服务已经启动...') })\",\"image-20230322162535711\",\"// 导入 http 模块 const http = require('http') // 创建服务对象 const server = http.createServer((request, response) => { // 实例化 url 对象 // let url = new URL('/search?a=100&b=200','http://127.0.0.1:9000') let url = new URL(request.url, 'http://127.0.0.1') console.log(url) //=>如图所示，为一个对象 // 输出路径 console.log(url.pathname) //=>/search // 输出 keyword 查询字符串 console.log(url.searchParams.get('a')) //=> 100 response.end('url new') }) // 监听端口，启动服务 server.listen(9000, () => { console.log('服务已经启动...') })\",\"image-20230322162034273\"]},\"285\":{\"h\":\"练习\",\"t\":[\"按照以下要求搭建 HTTP 服务\",\"请求类型**(方法)**\",\"请求地址\",\"响应体结果\",\"get\",\"/login\",\"登录页面\",\"get\",\"/reg\",\"注册页面\",\"//1、引入http模块 const http = require(\\\"http\\\"); //2、建立服务 const server = http.createServer((request,response)=>{ let {url, method} = request; //对象的解构赋值 //设置响应头信息 //解决中文乱码 response.setHeader(\\\"Content-Type\\\",\\\"text/html;charset=utf-8\\\") if(url == \\\"/register\\\" && method == \\\"GET\\\"){ response.end(\\\"注册页面\\\"); }else if(url==\\\"/login\\\" && method == \\\"GET\\\"){ response.end(\\\"登录页面\\\"); }else{ response.end(\\\"<h1>404 Not Found</h1>\\\") } }) //3、监听端口 server.listen(8000,()=>{ console.log('服务启动中....'); })\"]},\"286\":{\"h\":\"7. 设置 响应报文\",\"t\":[\"作用\",\"语法\",\"设置响应状态码\",\"response.statusCode\",\"设置响应状态描述\",\"response.statusMessage （ 用的非常少 ）\",\"设置响应头信息\",\"response.setHeader('头名', '头值') (可以自定义)\",\"设置响应体\",\"response.write('xx')response.end('xxx')\",\"// 1. 设置响应状态码 response.statusCode = 203 // 2. 响应状态的描述 response.statusMessage = 'i love you' // 3. 响应头 response.setHeader('content-type', 'text/html;charset=utf-8') // 自定义响应头 response.setHeader('myHeader', 'test test') // 设置多个同名的响应头 response.setHeader('test', ['a', 'b', 'c'])\",\"// write 和 end 的两种使用情况： // 1. write 和 end 的结合使用 响应体相对分散 response.write('xx'); response.write('xx'); response.write('xx'); response.end(); //每一个请求，在处理的时候必须要执行 end 方法的 //2. 单独使用 end 方法 响应体相对集中 response.end('xxx');\"]},\"287\":{\"h\":\"练习\",\"t\":[\"搭建 HTTP 服务，响应一个 4 行 3 列的表格，并且要求表格有 隔行换色效果 ，且 点击 单元格能 高亮显示\",\"方法一\",\"// 导入 http 模块 const http = require('http') const fs = require('fs') // 创建服务对象 const server = http.createServer((request, response) => { response.setHeader('content-type', 'text/html;charset=utf-8') response.end(` <!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>Document</title> <style> td { padding: 20px 40px; } table tr:nth-child(odd) { background-color: #aef; } table tr:nth-child(even) { background-color: #fcb; } table, td { border-collapse: collapse; } </style> </head> <body> <table border=\\\"1\\\"> <tr> <td></td> <td></td> <td></td> </tr> <tr> <td></td> <td></td> <td></td> </tr> <tr> <td></td> <td></td> <td></td> </tr> <tr> <td></td> <td></td> <td></td> </tr> </table> <script> const tds = document.querySelectorAll('td') tds.forEach(item => { item.addEventListener('click', function () { this.style.backgroundColor = '#000' }) }) </script> </body> </html> `) }) // 监听端口，启动服务器 server.listen(9000, () => { console.log('服务器已经启动...') })\",\"方法二\",\"// 导入 http 模块 const http = require('http') const fs = require('fs') // 创建服务对象 const server = http.createServer((request, response) => { response.setHeader('content-type', 'text/html;charset=utf-8') // 读取文件内容 let html = fs.readFileSync(__dirname + '/table.html') // end 方法的参数可以是字符串也可以是Buffer response.end(html) }) // 监听端口，启动服务器 server.listen(9000, () => { console.log('服务器已经启动...') })\",\"table.html\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>Document</title> <style> td { padding: 20px 40px; } table tr:nth-child(odd) { background-color: #aef; } table tr:nth-child(even) { background-color: #fcb; } table, td { border-collapse: collapse; } </style> </head> <body> <table border=\\\"1\\\"> <tr> <td></td> <td></td> <td></td> </tr> <tr> <td></td> <td></td> <td></td> </tr> <tr> <td></td> <td></td> <td></td> </tr> <tr> <td></td> <td></td> <td></td> </tr> </table> <script> const tds = document.querySelectorAll('td') tds.forEach(item => { item.addEventListener('click', function () { this.style.backgroundColor = '#000' }) }) </script> </body> </html>\"]},\"288\":{\"h\":\"8. 静态资源服务\",\"t\":[\"静态资源 是指 内容长时间不发生改变的资源 ，例如图片，视频，CSS 文件，JS文件，HTML文件，字体文件等\",\"动态资源 是指 内容经常更新的资源 ，例如百度首页，网易首页，京东搜索列表页面等\"]},\"289\":{\"h\":\"9. 网站根目录或静态资源目录\",\"t\":[\"HTTP 服务在哪个文件夹中寻找静态资源，那个文件夹就是 静态资源目录 ，也称之为 网站根目录\",\"思考：vscode 中使用 live-server 访问 HTML 时， 它启动的服务中网站根目录是谁？\",\"该文件所处的文件夹\"]},\"290\":{\"h\":\"10. 网页中的\",\"t\":[\"网页中的 URL 主要分为两大类：相对路径 与 绝对路径\"]},\"291\":{\"h\":\"绝对路径\",\"t\":[\"绝对路径可靠性强，而且相对容易理解，在项目中运用较多\",\"形式\",\"特点\",\"http://atguigu.com/web\",\"直接向目标资源发送请求，容易理解。网站的外链会用到此形式\",\"//atguigu.com/web\",\"与页面 URL 的协议拼接形成完整 URL 再发送请求。大型网站用的比较多\",\"/web\",\"与页面 URL 的协议、主机名、端口拼接形成完整 URL 再发送请求。中小型网站\"]},\"292\":{\"h\":\"相对路径\",\"t\":[\"相对路径在发送请求时，需要与当前页面 URL 路径进行 计算 ，得到完整 URL 后，再发送请求，学习阶段用的较多\",\"例如当前网页 url 为 http://www.atguigu.com/course/h5.html\",\"形式\",\"最终的 URL\",\"./css/app.css\",\"http://www.atguigu.com/course/css/app.css\",\"js/app.js\",\"http://www.atguigu.com/course/js/app.js\",\"../img/logo.png\",\"http://www.atguigu.com/img/logo.png\",\"../../mp4/show.mp4\",\"http://www.atguigu.com/mp4/show.mp4\"]},\"293\":{\"h\":\"网页中使用 的场景小结\",\"t\":[\"包括但不限于如下场景：\",\"a 标签 href\",\"link 标签 href\",\"script 标签 src\",\"img 标签 src\",\"video audio 标签 src\",\"form 中的 action\",\"AJAX 请求中的 URL\"]},\"294\":{\"h\":\"11. 设置资源类型（ 类型）\",\"t\":[\"媒体类型（通常称为 Multipurpose Internet Mail Extensions 或 MIME 类型 ）是一种标准，用来表示文档、文件或字节流的性质和格式。\",\"mime 类型结构： [type]/[subType] 例如： text/html text/css image/jpeg image/png application/json\",\"HTTP 服务可以设置响应头 Content-Type 来表明响应体的 MIME 类型，浏览器会根据该类型决定如何处理资源\",\"下面是常见文件对应的 mime 类型\",\"html: 'text/html', css: 'text/css', js: 'text/javascript', png: 'image/png', jpg: 'image/jpeg', gif: 'image/gif', mp4: 'video/mp4', mp3: 'audio/mpeg', json: 'application/json'\",\"对于未知的资源类型，可以选择 application/octet-stream 类型，浏览器在遇到该类型的响应时，会对响应体内容进行独立存储，也就是我们常见的 下载 效果\",\"require('http').createServer((request,response)=>{ //获取请求的方法已经路径 let {url,method} = request; //判断请求方式以及请求路径 if(method == \\\"GET\\\" && url == \\\"/index.html\\\"){ //需要响应文件中的内容 let data = require('fs').readFileSync( dirname + '/index.html'); response.end(data); }else if(method == \\\"GET\\\" && url == \\\"/css/app.css\\\"){ //需要响应文件中的内容 let data = require('fs').readFileSync( dirname + '/public/css/app.css'); response.end(data); }else if(method == \\\"GET\\\" && url == \\\"/js/app.js\\\"){ //需要响应文件中的内容 let data = require('fs').readFileSync( dirname + '/public/js/app.js'); response.end(data); }else{ //404响应 response.statusCode = 404; response.end(\\\"<h1>404 Not Found</h1>\\\"); } }).listen(80,()=>{ console.log('80端口正在启动中....'); })\",\"很明显上面的代码，当只要有一个请求路径就需要进行判断，显然这种方式不够完美，那么我们需要封装\",\"require('http').createServer((request,response)=>{ //获取请求的方法已经路径 let {url,method} = request; //文件夹路径 根路径 let rootDir = dirname + '/public'; //拼接文件路径 let filePath = rootDir + url; //读取文件内容 fs.readFile(filePath,(err,data)=>{ //判断 if(err){ //如果出现错误，响应404状态码 response.statusCode = 404; response.end('<h1>404 Not Found</h1>'); }else{ //响应文件内容 response.end(data); } }) }).listen(80,()=>{ console.log('80端口正在启动中....'); })\"]},\"295\":{\"h\":\"12. GET POST\",\"t\":[\"GET 请求的情况：\",\"在地址栏直接输入 url 访问\",\"点击 a 链接\",\"link 标签引入 css\",\"script 标签引入 js\",\"img 标签引入图片\",\"form 标签中的 method 为 get （不区分大小写）\",\"ajax 中的 get 请求\",\"POST 请求的情况：\",\"form 标签中的 method 为 post（不区分大小写）\",\"AJAX 的 post 请求\"]},\"296\":{\"h\":\"13. 和 请求的区别（实现层面）\",\"t\":[\"GET 和 POST 是 HTTP 协议请求的两种方式。\",\"GET 主要用来获取数据，POST 主要用来提交数据\",\"GET 带参数请求是将参数缀到 URL 之后，在地址栏中输入 url 访问网站就是 GET 请求，POST 带参数请求是将参数放到请求体中\",\"POST 请求相对 GET 安全一些，因为在浏览器中参数会暴露在地址栏\",\"GET 请求大小有限制，一般为 2K，而 POST 请求则没有\"]},\"297\":{\"h\":\"express\"},\"298\":{\"h\":\"一、express 介绍\",\"t\":[\"express 是一个基于 Node.js 平台的极简、灵活的 WEB 应用开发框架，官方网址： https://www.expressjs.com.cn/\",\"简单来说，express 是一个封装好的工具包，封装了很多功能，便于我们开发 WEB 应用(HTTP 服务)\"]},\"299\":{\"h\":\"二、express 使用\"},\"300\":{\"h\":\"1. express 下载\",\"t\":[\"express 本身是一个 npm 包，所以可以通过 npm 安装\",\"npm init npm i express\"]},\"301\":{\"h\":\"2. express 初体验\",\"t\":[\"大家可以按照这个步骤进行操作：\",\"创建 JS 文件，键入如下代码\",\"//1. 导入 express const express = require('express'); //2. 创建应用对象 const app = express(); //3. 创建路由规则 app.get('/home', (req, res) => { res.end('hello express server'); }); //4. 监听端口 启动服务 app.listen(3000, () =>{ console.log('服务已经启动, 端口监听为 3000...'); });\",\"命令行下执行该脚本\",\"node <文件名> # 或者 nodemon <文件名>\",\"然后在浏览器就可以访问 http://127.0.0.1:3000/home 👌\"]},\"302\":{\"h\":\"三、express 路由\"},\"303\":{\"h\":\"1. 什么是路由\",\"t\":[\"官方定义： 路由确定了应用程序如何响应客户端对特定端点的请求\"]},\"304\":{\"h\":\"2. 路由的使用\",\"t\":[\"一个路由的组成有 请求方法， 路径 和 回调函数 组成\",\"express 中提供了一系列方法，可以很方便的使用路由，使用格式如下：\",\"app.<method>(path，callback)\",\"代码示例：\",\"//导入 express const express = require('express'); //创建应用对象 const app = express(); //创建 get 路由 app.get('/home', (req, res) => { res.send('网站首页'); }); //首页路由 app.get('/', (req,res) => { res.send('我才是真正的首页'); }); //创建 post 路由 app.post('/login', (req, res) => { res.send('登录成功'); }); //匹配所有的请求方法 app.all('/search', (req, res) => { res.send('1 秒钟为您找到相关结果约 100,000,000 个'); }); //自定义 404 路由 app.all(\\\"*\\\", (req, res) => { res.send('<h1>404 Not Found</h1>') }); //监听端口 启动服务 app.listen(3000, () =>{ console.log('服务已经启动, 端口监听为 3000'); });\",\"路径的匹配可以使用正则表达式\"]},\"305\":{\"h\":\"3. 获取请求参数\",\"t\":[\"express 框架封装了一些 API 来方便获取请求报文中的数据，并且兼容原生 HTTP 模块的获取方式\",\"//导入 express const express = require('express'); //创建应用对象 const app = express(); //获取请求的路由规则 app.get('/request', (req, res) => { // 1. 获取报文的方式与原生 HTTP 获取方式是兼容的 console.log(req.method); console.log(req.url); console.log(req.httpVersion); console.log(req.headers); // 2. express 独有的获取报文的方式 // 获取路径 console.log(req.path) //获取查询字符串 console.log(req.query); // 『相对重要』对象形式返回所有的查询字符串 // 获取指定的请求头 console.log(req.get('host')); res.send('请求报文的获取'); }); //启动服务 app.listen(3000, () => { console.log('启动成功....') })\"]},\"306\":{\"h\":\"4. 获取路由参数\",\"t\":[\"路由参数指的是 URL 路径中的参数（数据）\",\"app.get('/:id.html', (req, res) => { res.send('商品详情, 商品 id 为' + req.params.id); });\"]},\"307\":{\"h\":\"四、express 响应设置\",\"t\":[\"express 框架封装了一些 API 来方便给客户端响应数据，并且兼容原生 HTTP 模块的获取方式\",\"方法\",\"描述\",\"res.download()\",\"提示要下载的文件。\",\"res.end（）\",\"结束响应过程。\",\"res.json（）\",\"发送JSON响应。\",\"res.jsonp（）\",\"发送带有JSONP支持的JSON响应。\",\"res.redirect（）\",\"重定向请求。\",\"res.render（）\",\"渲染视图模板。\",\"res.send（）\",\"发送各种类型的响应。\",\"res.sendFile（）\",\"将文件作为八位字节流发送。\",\"res.sendStatus（）\",\"设置响应状态代码，并将其字符串表示形式发送为响应正文。\",\"//获取请求的路由规则 app.get(\\\"/response\\\", (req, res) => { //1. express 中设置响应的方式兼容 HTTP 模块的方式 res.statusCode = 404; res.statusMessage = 'xxx'; res.setHeader('abc','xyz'); res.write('响应体'); res.end('xxx'); //2. express 的响应方法 res.status(500); //设置响应状态码 res.set('xxx','yyy');//设置响应头 res.send('中文响应不乱码');//设置响应体 //连贯操作 res.status(404).set('xxx','yyy').send('你好朋友') //3. 其他响应 res.redirect('http://atguigu.com')//重定向 res.download('./package.json');//下载响应 res.json();//响应 JSON res.sendFile(__dirname + '/home.html') //响应文件内容 });\"]},\"308\":{\"h\":\"五、express 中间件\"},\"309\":{\"h\":\"1. 什么是中间件\",\"t\":[\"中间件（Middleware）本质是一个回调函数，一个中间件处理完，再传递给下一个中间件。App实例在运行过程中，会调用一系列的中间件。每个中间件可以从App实例，接收三个参数，依次为request对象（代表HTTP请求）、response对象（代表HTTP回应），next回调函数（代表下一个中间件）。每个中间件都可以对HTTP请求（request对象）进行加工，并且决定是否调用next方法，将request对象再传给下一个中间件。\"]},\"310\":{\"h\":\"2. 中间件的作用\",\"t\":[\"中间件的作用 就是 使用函数封装公共操作，简化代码\"]},\"311\":{\"h\":\"3. 中间件的类型\",\"t\":[\"全局中间件\",\"路由中间件\"]},\"312\":{\"h\":\"4. 定义全局中间件\",\"t\":[\"每一个请求 到达服务端之后 都会执行全局中间件函数\"]},\"313\":{\"h\":\"声明中间件函数\",\"t\":[\"let recordMiddleware = function(request,response,next){ //实现功能代码 //..... //执行next函数(当如果希望执行完中间件函数之后，仍然继续执行路由中的回调函数，必须调用next) next(); }\",\"08_express框架\",\"应用中间件\",\"app.use(recordMiddleware)\",\"声明时可以直接将匿名函数传递给 use\",\"app.use(function (request, response, next) { console.log('定义第一个中间件'); next(); })\"]},\"314\":{\"h\":\"多个全局中间件\",\"t\":[\"express 允许使用 app.use() 定义多个全局中间件\",\"app.use(function (request, response, next) { console.log('定义第一个中间件'); next(); }) app.use(function (request, response, next) { console.log('定义第二个中间件'); next(); })\"]},\"315\":{\"h\":\"定义路由中间件\",\"t\":[\"如果只需要对某一些路由进行功能封装，则就需要路由中间件\",\"调用格式如下：\",\"app.get('/路径',`中间件函数`,(request,response)=>{ }); app.get('/路径',`中间件函数1`,`中间件函数2`,(request,response)=>{ });\"]},\"316\":{\"h\":\"5. 静态资源中间件\",\"t\":[\"express 内置处理静态资源的中间件\",\"//引入express框架 const express = require('express'); //创建服务对象 const app = express(); //静态资源中间件的设置，将当前文件夹下的public目录作为网站的根目录 //当然这个目录中都是一些静态资源 app.use(express.static('./public')); //如果访问的内容经常变化，还是需要设置路由 //但是，在这里有一个问题，如果public目录下有index.html文件，单独也有index.html的路由 //则谁书写在前，优先执行谁 app.get('/index.html',(request,response)=>{ respsonse.send('首页'); }); //监听端口 app.listen(3000,()=>{ console.log('3000 端口启动....'); });\",\"注意事项:\",\"index.html 文件为默认打开的资源\",\"如果静态资源与路由规则同时匹配，谁先匹配谁就响应\",\"路由响应动态资源，静态资源中间件响应静态资源\"]},\"317\":{\"h\":\"6. 获取请求体数据\",\"t\":[\"Express 自从 4.16.0 版本开始，内置了 body 解析，我们只需要将内置的中间件引入，就可以在req的对象上添加body。\",\"使用方法:\",\"const express = require('express'); const app = express(); // 解析 JSON 格式的请求体的中间件 app.use(express.json()) // 解析 querystring 格式请求体的中间件 app.use(express.urlencoded({ extended: false }))\",\"使用 request.body 来获取请求体数据\",\"app.post('/login', (request,response)=>{ //获取请求体数据 //console.log(request.body); //用户名 console.log(request.body.username); //密码 console.log(request.body.userpass); response.send('获取请求体数据'); });\",\"获取到的请求体数据：\",\"[Object: null prototype] { username: 'admin', userpass: '123456' }\"]},\"318\":{\"h\":\"六、Router\"},\"319\":{\"h\":\"1. 什么是 Router\",\"t\":[\"express 中的 Router 是一个完整的中间件和路由系统，可以看做是一个小型的 app 对象。\"]},\"320\":{\"h\":\"2. Router 作用\",\"t\":[\"对路由进行模块化，更好的管理路由\"]},\"321\":{\"h\":\"3. Router 使用\",\"t\":[\"创建独立的 JS 文件（homeRouter.js）\",\"//1. 导入 express const express = require('express'); //2. 创建路由器对象 const router = express.Router(); //3. 在 router 对象身上添加路由 router.get('/', (req, res) => { res.send('首页'); }) router.get('/cart', (req, res) => { res.send('购物车'); }); //4. 暴露 module.exports = router;\",\"主文件\",\"const express = require('express'); const app = express(); //5.引入子路由文件 const homeRouter = require('./routes/homeRouter'); //6.设置和使用中间件 app.use(homeRouter); app.listen(3000,()=>{ console.log('3000 端口启动....'); })\"]},\"322\":{\"h\":\"七、EJS 模板引擎\",\"t\":[\"在服务端进行网页与数据的拼接\"]},\"323\":{\"h\":\"1. 什么是模板引擎\",\"t\":[\"模板引擎是分离 用户界面和业务数据 的一种技术\"]},\"324\":{\"h\":\"2. 什么是 EJS\",\"t\":[\"EJS 是一个高效的 Javascript 的模板引擎 官网: https://ejs.co/ 中文站： https://ejs.bootcss.com/\"]},\"325\":{\"h\":\"3. EJS 初体验\"},\"326\":{\"h\":\"下载安装EJS\",\"t\":[\"npm i ejs\"]},\"327\":{\"h\":\"代码示例\",\"t\":[\"//1.引入ejs const ejs = require('ejs'); //2.定义数据 let person = ['张三','李四','王二麻子']; //3.ejs解析模板返回结构 //<%= %> 是ejs解析内容的标记，作用是输出当前表达式的执行结构 //\\\"<%= %>\\\"可以直接输出变量或表达式的值，变量或表达式的值将作为一个字符串在浏览器中输出。 let html = ejs.render(‘<%= person.join(\\\",\\\") %>’, {person:person}); //4.输出结果 console.log(html);\"]},\"328\":{\"h\":\"4. EJS 常用语法\",\"t\":[\"执行JS代码\",\"<% code %>\",\"输出转义的数据到模板上\",\"<%= code %>\",\"输出非转义的数据到模板上\",\"<%- code %>\",\"<% '脚本' 标签，用于流程控制，无输出。 <%_ 删除其前面的空格符 <%= 输出数据到模板（输出是转义 HTML 标签） <%- 输出非转义的数据到模板 <%# 注释标签，不执行、不输出内容 <%% 输出字符串 '<%' %> 一般结束标签 -%> 删除紧随其后的换行符 _%> 将结束标签后面的空格符删除\"]},\"329\":{\"h\":\"5. 在express中使用ejs\",\"t\":[\"// 导入 express const express = require('express') const path = require('path') // 创建应用对象 const app = express() // 1. 设置模板引擎 app.set('view engine', 'ejs') // pug twing // 2. 设置模板文件的存放位置 // 模板文件: 具有模板语法内容的文件 app.set('views', path.resolve(__dirname, './views')) // 创建路由 app.get('/home', (req, res) => { // 3. render 响应 // res.render('模板的文件名','数据') let title = 'Hello World' res.render('home', { title }) // 4. 会去找views目录下的home.ejs文件 }) // 监听端口，启动服务 app.listen(3000, () => { console.log('服务器已启动~~~~') })\",\"views/home.ejs\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>Document</title> </head> <body> <h2> <%=title %> </h2> </body> </html>\"]},\"330\":{\"h\":\"八、express脚手架\"},\"331\":{\"h\":\"1. 安装express-generator\",\"t\":[\"npm i -g express-generator\",\"可通过express -h查看命令行的指令含义\",\"express -h\",\"Options: --version 输出版本号 -e, --ejs 添加对 ejs 模板引擎的支持 --pug 添加对 pug 模板引擎的支持 --hbs 添加对 handlebars 模板引擎的支持 -H, --hogan 添加对 hogan.js 模板引擎的支持 -v, --view <engine> 添加对视图引擎（view） <engine> 的支持 (ejs|hbs|hjs|jade|pug|twig|vash) （默认是 jade 模板引擎） --no-view 创建不带视图引擎的项目 -c, --css <engine> 添加样式表引擎 <engine> 的支持 (less|stylus|compass|sass) （默认是普通的 css 文件） --git 添加 .gitignore -f, --force 强制在非空目录下创建 -h, --help 输出使用方法\"]},\"332\":{\"h\":\"2. 创建应用\",\"t\":[\"express -e myapp\",\"进入app，并安装依赖\",\"cd myapp npm i\",\"此时，myapp文件夹下的结构如下所示：\",\"myapp ├── bin │ └── www │ ├── node_modules │ ├── public │ ├── images │ ├── javascripts │ └── stylesheets │ └── style.css ├── routes │ ├── index.js │ └── users.js ├── views │ ├── error.ejs │ └── index.ejs ├── package.json └── app.js\",\"bin: 启动目录，里面包含了一个启动文件www ，默认监听端口是 3000 (直接node www执行即可)\",\"node_modules：依赖的模块包\",\"public：存放静态资源\",\"routes：路由操作\",\"views：存放ejs模板引擎\",\"app.js：主文件\",\"package.json：项目描述文件\",\"我们后续主要对routes（路由）、views（模板）、public（静态资源）作修改。\"]},\"333\":{\"h\":\"接口\"},\"334\":{\"h\":\"一、简介\"},\"335\":{\"h\":\"1. 接口是什么\",\"t\":[\"接口是 前后端通信的桥梁\",\"简单理解：一个接口就是 服务中的一个路由规则 ，根据请求响应结果\",\"接口的英文单词是 API (Application Program Interface)，所以有时也称之为 API 接口\",\"这里的接口指的是『数据接口』， 与编程语言（Java，Go 等）中的接口语法不同\"]},\"336\":{\"h\":\"2. 接口的作用\",\"t\":[\"实现 前后端通信\",\"image-20230327163353386\"]},\"337\":{\"h\":\"3. 接口的开发与调用\",\"t\":[\"大多数接口都是由 后端工程师 开发的， 开发语言不限\",\"一般情况下接口都是由 前端工程师 调用的，但有时 后端工程师也会调用接口 ，比如短信接口，支付接口 等\"]},\"338\":{\"h\":\"4. 接口的组成\",\"t\":[\"一个接口一般由如下几个部分组成\",\"请求方法\",\"接口地址（URL）\",\"请求参数\",\"响应结果\",\"一个接口示例 https://www.free-api.com/doc/325\",\"体验一下： https://api.asilu.com/idcard/?id=371522199111299668\"]},\"339\":{\"h\":\"二、RESTful API\",\"t\":[\"RESTful API 是一种特殊风格的接口，主要特点有如下几个：\",\"URL 中的路径表示 资源，路径中不能有 动词，例如create , delete , update 等这些都不能有\",\"操作资源要与 HTTP 请求方法 对应\",\"操作结果要与 HTTP 响应状态码 对应\",\"规则示例：\",\"操作\",\"请求类型\",\"URL\",\"返回\",\"新增歌曲\",\"POST\",\"/song\",\"返回新生成的歌曲信息\",\"删除歌曲\",\"DELETE\",\"/song/10\",\"返回一个空文档\",\"修改歌曲\",\"PUT\",\"/song/10\",\"返回更新后的歌曲信息\",\"修改歌曲\",\"PATCH\",\"/song/10\",\"返回更新后的歌曲信息\",\"获取所有歌曲\",\"GET\",\"/song\",\"返回歌曲列表数组\",\"获取单个歌曲\",\"GET\",\"/song/10\",\"返回单个歌曲信息\",\"扩展阅读： https://www.ruanyifeng.com/blog/2014/05/restful_api.html\",\"可以根据MVC的结构对业务代码进行进一步的拆分\"]},\"340\":{\"h\":\"三、json-server\",\"t\":[\"json-server 本身是一个 JS 编写的工具包，可以快速搭建 RESTful API 服务\",\"官方地址: https://github.com/typicode/json-server\",\"操作步骤：\",\"全局安装 json-server\",\"npm i -g json-server\",\"创建 JSON 文件（db.json），编写基本结构\",\"{ \\\"song\\\": [ { \\\"id\\\": 1, \\\"name\\\": \\\"干杯\\\", \\\"singer\\\": \\\"五月天\\\" }, { \\\"id\\\": 2, \\\"name\\\": \\\"当\\\", \\\"singer\\\": \\\"动力火车\\\" }, { \\\"id\\\": 3, \\\"name\\\": \\\"不能说的秘密\\\", \\\"singer\\\": \\\"周杰伦\\\" } ] }\",\"以 JSON 文件所在文件夹作为工作目录，执行如下命令\",\"json-server --watch db.json\",\"默认监听端口为 3000\"]},\"341\":{\"h\":\"四、接口测试工具\",\"t\":[\"介绍几个接口测试工具\",\"apipost https://www.apipost.cn/ (中文)\",\"apifox https://www.apifox.cn/ (中文)\",\"postman https://www.postman.com/ (英文)\"]},\"342\":{\"h\":\"会话控制\"},\"343\":{\"h\":\"一、介绍\",\"t\":[\"所谓会话控制就是 对会话进行控制\",\"HTTP 是一种无状态的协议，它没有办法区分多次的请求是否来自于同一个客户端， 无法区分用户\",\"而产品中又大量存在的这样的需求，所以我们需要通过 会话控制 来解决该问题\",\"常见的会话控制技术（授权）有三种：\",\"cookie\",\"session\",\"token\",\"什么是授权（Authorization）\",\"用户授予第三方应用访问该用户某些资源的权限\",\"你在安装手机应用的时候，APP 会询问是否允许授予权限（访问相册、地理位置等权限）\",\"你在访问微信小程序时，当登录时，小程序会询问是否允许授予权限（获取昵称、头像、地区、性别等个人信息）\",\"什么是凭证（Credentials）\",\"实现认证和授权的前提是需要一种媒介（证书） 来标记访问者的身份\",\"在互联网应用中，一般网站（如掘金）会有两种模式，游客模式和登录模式。游客模式下，可以正常浏览网站上面的文章，一旦想要点赞/收藏/分享文章，就需要登录或者注册账号。当用户登录成功后，服务器会给该用户使用的浏览器颁发一个令牌（token），这个令牌用来表明你的身份，每次浏览器发送请求时会带上这个令牌，就可以使用游客模式下无法使用的功能。\"]},\"344\":{\"h\":\"二、cookie\"},\"345\":{\"h\":\"1. cookie 是什么\",\"t\":[\"cookie 存储在客户端： cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。\",\"cookie 是不可跨域的： 每个 cookie 都会绑定单一的域名，无法在别的域名下获取使用，一级域名和二级域名之间是允许共享使用的（靠的是 domain）\",\"域名\",\"cookie\",\"www.baidu.com\",\"a=100; b=200\",\"www.bilibili.com\",\"xid=1020abce121; hm=112411213\",\"jd.com\",\"x=100; ocw=12414cce\",\"属性\",\"说明\",\"name=value\",\"键值对，设置 Cookie 的名称及相对应的值，都必须是字符串类型。如果值为 Unicode 字符，需要为字符编码。如果值为二进制数据，则需要使用 BASE64 编码。\",\"domain\",\"指定 cookie 所属域名，默认是当前域名\",\"path\",\"指定 cookie 在哪个路径（路由）下生效，默认是 '/'。\",\"如果设置为 /abc，则只有 /abc 下的路由可以访问到该 cookie，如：/abc/read。\",\"maxAge\",\"cookie 失效的时间，单位秒。如果为整数，则该 cookie 在 maxAge 秒后失效。如果为负数，该 cookie 为临时 cookie ，关闭浏览器即失效，浏览器也不会以任何形式保存该 cookie 。如果为 0，表示删除该 cookie 。默认为 -1。- 比 expires 好用。\",\"expires\",\"过期时间，在设置的某个时间点后该 cookie 就会失效。\",\"一般浏览器的 cookie 都是默认储存的，当关闭浏览器结束这个会话的时候，这个 cookie 也就会被删除\",\"secure\",\"该 cookie 是否仅被使用安全协议传输。安全协议有 HTTPS，SSL等，在网络上传输数据之前先将数据加密。默认为false。\",\"当 secure 值为 true 时，cookie 在 HTTP 中是无效，在 HTTPS 中才有效\",\"httpOnly\",\"如果给某个 cookie 设置了 httpOnly 属性，则无法通过 JS 脚本 读取到该 cookie 的信息，但还是能通过 Application 中手动修改 cookie，所以只是在一定程度上可以防止 XSS 攻击，不是绝对的安全\"]},\"346\":{\"h\":\"2. cookie 的特点\",\"t\":[\"浏览器向服务器发送请求时，会自动将 当前域名下 可用的 cookie 设置在请求头中，然后传递给服务器,这个请求头的名字也叫 cookie ，所以将 cookie 理解为一个 HTTP 的请求头也是可以的\",\"11_会话控制\",\"cookie保存在浏览器本地，只要不过期关闭浏览器也会存在。\",\"正常情况下cookie不加密，用户可轻松看到\",\"用户可以删除或者禁用cookie\",\"cookie可以被篡改\",\"cookie可用于攻击\",\"cookie存储量很小，大小一般是4k\"]},\"347\":{\"h\":\"3. cookie 的运行流程\",\"t\":[\"填写账号和密码校验身份，校验通过后下发 cookie\",\" 有了 cookie 之后，后续向服务器发送请求时，就会 自动携带 cookie\",\"image-20230327214554199\"]},\"348\":{\"h\":\"4. 浏览器操作 cookie\",\"t\":[\"浏览器操作 cookie 的操作，使用相对较少，大家了解即可\",\"禁用所有 cookie\",\"删除 cookie\",\"查看 cookie\"]},\"349\":{\"h\":\"5. cookie 的代码操作\",\"t\":[\"express 中可以使用 cookie-parser 进行处理\",\"安装 cookie-parser\",\"npm i cookie-parser\",\"使用\",\"const express =require('express'); //2. 引入 cookieParser 包 const cookieParser = require('cookie-parser'); const app = express(); //3. 设置 cookieParser 中间件 app.use(cookieParser()); //4-1 设置 cookie app.get('/set-cookie', (request, response) => { // 不带时效性，会在浏览器关闭的时候，销毁 response.cookie('username','wangwu'); // 带时效性 response.cookie('email','23123456@qq.com', {maxAge: 5*60*1000 }); //响应 response.send('Cookie的设置'); }); //4-2 读取 cookie app.get('/get-cookie', (request, response) => { //读取 cookie console.log(request.cookies); //响应体 response.send('Cookie的读取'); }); //4-3 删除cookie app.get('/delete-cookie', (request, response) => { //删除 response.clearCookie('username'); //响应 response.send('cookie 的清除'); }); //4. 启动服务 app.listen(3000, () => { console.log('服务已经启动....'); });\",\"不同浏览器中的 cookie 是相互独立的，不共享\"]},\"350\":{\"h\":\"6. cookie加密\",\"t\":[\"cookie 的值是通过加密( 签名 )而不是加密(加密算法)得到的。签名仅仅是在原始的值基础上用一个密钥计算得到的一段字符串，用来防止cookie被篡改。即对原始值进行哈希签名后，再将签名信息拼接在原始值后面形成一个新的值作为cookie的值。例如：name=s%3Azhangshan.6YpZuibNaHr0Ye827gn%2FZsWJ7y18MzB6gEWkFgCJCDc，其中包含的签名信息是：.6YpZuibNaHr0Ye827gn%2FZsWJ7y18MzB6gEWkFgCJCDc。当客户端主动更改了cookie值时，例如将name的值从zhangshan改为lisi，那么此时得到的cookie的值为name=s%3Alisi.6YpZuibNaHr0Ye827gn%2FZsWJ7y18MzB6gEWkFgCJCDc，但此时签名信息并没有发生任何改变。而服务端内部根据原始的值和签名密钥重新计算出来的签名信息是针对老的原始值计算得到的。因此，服务端在解析这个cookie时会重新计算一遍签名信息，如果这个计算结果与原cookie中的签名信息不一样，就说明这个cookie已经被篡改过了。因此，签名信息的目的就是为了防止cookie被篡改导致的安全问题。\",\"cookie-parser 提供了签名功能，我们只需要在res.cookie中对option对象的signed属性设置设置成true即可。\",\"const express = require(\\\"express\\\"); const cookieParser = require(\\\"cookie-parser\\\"); var app = express(); app.use(cookieParser('secret'));//签名 （加密） 要指定秘钥 ，什么名字都行，列如：\\\"xiaoxuesheng\\\" app.get(\\\"/\\\",function(req,res){ res.send(\\\"主页\\\"); }); //获取cookie //当设置signed为true时，获取cookie时使用req.signedCookies app.use(function(req,res,next){ console.log(req.signedCookies.name); next(); }); //设置cookie app.use(function(req,res,next){ console.log(res.cookie(\\\"name\\\",\\\"zhangsan\\\",{httpOnly: true,maxAge: 200000,signed: true})); res.end(\\\"cookie为：\\\"+req.signedCookies.name); }); app.listen(3000);\",\"使用 cookie 时需要考虑的问题\",\"因为存储在客户端，容易被客户端篡改，使用前需要验证合法性\",\"不要存储敏感数据，比如用户密码，账户余额\",\"使用 httpOnly 在一定程度上提高安全性\",\"尽量减少 cookie 的体积，能存储的数据量不能超过 4kb\",\"设置正确的 domain 和 path，减少数据传输\",\"cookie 无法跨域（默认，通过设置SameSite属性可以实现跨域）\",\"一个浏览器针对一个网站最多存 20 个Cookie，浏览器一般只允许存放 300 个Cookie\",\"移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token\"]},\"351\":{\"h\":\"三、session\"},\"352\":{\"h\":\"1. session 是什么\",\"t\":[\"Session是另一种记录客户状态的机制，不同的是Cookie保存在 客户端浏览器 中，而Session保存在 服务器上 。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。session是一种特殊的cookie 。cookie是保存在客户端的，而session是保存在服务端。\"]},\"353\":{\"h\":\"2. 为什么要用session?\",\"t\":[\"由于cookie 存在客户端，而且它本身存储的尺寸大小也有限，最关键是用户可以是可见的，并可以随意的修改，很不安全。那如何又要安全，又可以方便的全局读取信息呢？于是，这个时候，一种新的存储会话机制：session 诞生了。\",\"不在cookie中存取敏感信息，转而在服务器端建立映射表，将生成的key在cookie中传输，服务器拿到key后在映射表中查找来确定用户的登录状态。\"]},\"354\":{\"h\":\"3. session 运行流程\",\"t\":[\"填写账号和密码校验身份，校验通过后创建 session 信息，然后将 session_id 的值通过响应头返回给浏览器\",\"image-20230327222810111\",\"有了cookie，下次发送请求时会自动携带cookie，服务器通过 cookie 中的 session_id 的值确定用 户的身份\",\"image-20230327223550720\"]},\"355\":{\"h\":\"4. session 的代码操作\",\"t\":[\"express 中可以使用 express-session 对 session 进行操作\",\"安装express-session包\",\"npm i express-session\",\"使用\",\"const express = require('express'); //2. 引入 express-session connect-mongo const session = require(\\\"express-session\\\"); const MongoStore = require('connect-mongo'); const app = express(); //3. 设置 session 的中间件 //app.use(session(options)); app.use(session({ name: 'sid', //设置cookie的name，默认值是：connect.sid genid: req => genuuid(), // 默认使用uid-safe这个库自动生成id secret: 'atguigu', //参与加密的字符串（又称签名） 加盐 saveUninitialized: false, //是否为每次请求都设置一个cookie用来存储session的id resave: true, //是否在每次请求时重新保存session //自动在mongodb中创建一个数据库存储session，并且过期时间也会同步刷新 store: MongoStore.create({ mongoUrl: 'mongodb://127.0.0.1:27017/project' //数据库的连接配置 ttl: 1000 * 60 * 10 // 过期时间 }), cookie: { httpOnly: true, // 开启后前端无法通过 JS 操作 maxAge: 1000 * 300 // 这一条 是控制 sessionID 的过期时间的！！！ }, })) // 授权中间件，在这个之后的路由，除了错误处理，都是需要授权的。 app.use((req, res, next) => { //排除login相关的路由和接口（因为login就不需要重定向到login了） if (req.url.includes(\\\"login\\\")) { next() return } if (req.session.user) { //重新设置以下sesssion req.session.mydate = Date.now()//加这个设置才能访问刷新过期时间 next() } else { //是接口, 就返回错误码 //不是接口，就重定向（因为ajax请求是不能重定向的，只能前端接收错误码做处理） req.url.includes(\\\"api\\\") ? res.status(401).json({ ok: 0 }) : res.redirect(\\\"/login\\\") } }) //创建 session session的设置 app.get('/login', (req, res) => { //设置session req.session.username = 'zhangsan'; req.session.email = 'zhangsan@qq.com' res.send('登录成功'); }) //获取 session app.get('/home', (req, res) => { console.log(req.session.username); // 检测 session 是否存在用户数据 if (req.session.username) { res.send(`你好 ${req.session.username}`); }else{ res.send('登录 注册'); } }) //销毁 session app.get('/logout', (req, res) => { //销毁session // res.send('设置session'); req.session.destroy(() => { res.send('成功退出'); }); }); app.listen(3000, () => { console.log('服务已经启动, 端口 ' + 3000 + ' 监听中...'); });\"]},\"356\":{\"h\":\"5. session 和 cookie 的区别\",\"t\":[\"cookie 和 session 的区别主要有如下几点：\",\"存在的位置\",\"cookie：浏览器端\",\"session：服务端\",\"安全性\",\"cookie 是以明文的方式存放在客户端的，安全性相对较低\",\"session 存放于服务器中，所以安全性 相对 较好\",\"网络传输量\",\"cookie 设置内容过多会增大报文体积， 会影响传输效率\",\"session 数据存储在服务器，只是通过 cookie 传递 id，所以不影响传输效率\",\"存储限制\",\"浏览器限制单个 cookie 保存的数据不能超过 4K ，且单个域名下的存储数量也有限制，只支持存字符串数据\",\"session 数据存储在服务器中，所以没有这些限制，它可以存任意数据类型\",\"有效期\",\"Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能。\",\"Session 一般失效时间较短，客户端关闭（默认情况下）或者 Session 超时都会失效。\"]},\"357\":{\"h\":\"四、token\"},\"358\":{\"h\":\"1. token 是什么\",\"t\":[\"token 是服务端生成并返回给 HTTP 客户端的一串加密字符串， token 中保存着用户信息\",\"token 不属于 http 标准，完全由前后端协商而定，但 cookie 属于 http 标准\"]},\"359\":{\"h\":\"2. token 的作用\",\"t\":[\"实现会话控制，可以识别用户的身份，主要用于移动端 APP\"]},\"360\":{\"h\":\"3. token 的工作流程\",\"t\":[\"填写账号和密码校验身份，校验通过后响应 token，token 一般是在响应体中返回给客户端的\",\" 后续发送请求时，需要手动将 token 添加在请求报文中( cookie是自动携带的 )，一般是放在请求头中 \",\"客户端使用用户名跟密码请求登录\",\"服务端收到请求，去验证用户名与密码\",\"验证成功后，服务端会签发一个 token 并把这个 token 发送给客户端\",\"客户端收到 token 以后，会把它存储起来，比如放在 cookie 里或者 localStorage 里\",\"客户端每次向服务端请求资源的时候需要带着服务端签发的 token。\",\"服务端收到请求，然后去验证客户端请求里面带着的 token ，如果验证成功，就向客户端返回请求的数据\",\"每一次请求都需要携带 token，需要把 token 放到 HTTP 的 Header 里\",\"基于 token 的用户认证是一种 服务端无状态 的认证方式，服务端不用存放 token 数据。用解析 token 的计算时间换取 session 的存储空间，从而减轻服务器的压力，减少频繁的查询数据库\",\"token 完全由应用管理，所以它可以避开同源策略\"]},\"361\":{\"h\":\"4. token 的特点\",\"t\":[\"服务端压力更小\",\"数据存储在客户端\",\"相对更安全\",\"数据加密\",\"可以避免 CSRF（跨站请求伪造）\",\"扩展性更强\",\"服务间可以 共享 （session存在服务端，集群中不同服务器之间的session不共享）\",\"增加服务节点更简单\"]},\"362\":{\"h\":\"5. Token 和 Session 的区别\",\"t\":[\"Session 是一种记录服务器和客户端会话状态的机制，使服务端有状态化，可以记录会话信息。而 Token 是令牌，访问资源接口（API）时所需要的资源凭证。Token 使服务端无状态化，不会存储会话信息。\",\"Session 和 Token 并不矛盾，作为身份认证 Token 安全性比 Session 好，因为每一个请求都有签名还能防止监听以及重放攻击，而 Session 就必须依赖链路层来保障通讯安全了。如果你需要实现有状态的会话，仍然可以增加 Session 来在服务器端保存一些状态。\",\"所谓 Session 认证只是简单的把 User 信息存储到 Session 里，因为 SessionID 的不可预测性，暂且认为是安全的。而 Token ，如果指的是 OAuth Token 或类似的机制的话，提供的是 认证 和 授权 ，认证是针对用户，授权是针对 App 。其目的是让某 App 有权利访问某用户的信息。这里的 Token 是唯一的。不可以转移到其它 App上，也不可以转到其它用户上。Session 只提供一种简单的认证，即只要有此 SessionID ，即认为有此 User 的全部权利。是需要严格保密的，这个数据应该只保存在站方，不应该共享给其它网站或者第三方 App。所以简单来说：如果你的用户数据可能需要和第三方共享，或者允许第三方调用 API 接口，用 Token 。如果永远只是自己的网站，自己的 App，用什么就无所谓了。\"]},\"363\":{\"h\":\"五、JWT\",\"t\":[\"JWT（JSON Web Token ）是目前最流行的跨域认证解决方案，可用于基于 token 的身份验证。\",\"JWT 是为了在网络应用环境间传递声明而执行的一种基于 JSON 的开放标准（RFC 7519）。JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的- 用户身份信息，以便于从资源服务器获取资源。比如用在用户登录上。\",\"可以使用 HMAC 算法或者是 RSA 的公/私秘钥对 JWT 进行签名。因为数字签名的存在，这些传递的信息是可信的。\"]},\"364\":{\"h\":\"1. JWT的构成\",\"t\":[\"JWT是由三段信息构成的，将这三段信息文本用.链接一起就构成了Jwt字符串。就像这样:\",\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\",\"第一部分我们称它为头部（header),第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)，第三部分是签证（signature).\"]},\"365\":{\"h\":\"header\",\"t\":[\"jwt的头部承载两部分信息：\",\"声明类型，这里是jwt\",\"声明加密的算法 通常直接使用 HMAC SHA256\",\"完整的头部就像下面这样的JSON：\",\"{ 'typ': 'JWT', 'alg': 'HS256' }\",\"然后将头部进行base64加密（该加密是可以对称解密的),构成了第一部分.\",\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9\"]},\"366\":{\"h\":\"playload\",\"t\":[\"载荷就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分\",\"标准中注册的声明\",\"公共的声明\",\"私有的声明\",\"标准中注册的声明 (建议但不强制使用) ：\",\"iss: jwt签发者\",\"sub: jwt所面向的用户\",\"aud: 接收jwt的一方\",\"exp: jwt的过期时间，这个过期时间必须要大于签发时间\",\"nbf: 定义在什么时间之前，该jwt都是不可用的.\",\"iat: jwt的签发时间\",\"jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。\",\"公共的声明 ： 公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.\",\"私有的声明 ： 私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。\",\"定义一个payload:\",\"{ \\\"sub\\\": \\\"1234567890\\\", \\\"name\\\": \\\"John Doe\\\", \\\"admin\\\": true }\",\"然后将其进行base64加密，得到Jwt的第二部分。\",\"eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9\"]},\"367\":{\"h\":\"signature\",\"t\":[\"jwt的第三部分是一个签证信息，这个签证信息由三部分组成：\",\"header (base64后的)\",\"payload (base64后的)\",\"secret\",\"这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分。\",\"将这三部分用.连接成一个完整的字符串,构成了最终的jwt:\",\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\",\"注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。\"]},\"368\":{\"h\":\"2. JWT 认证流程\",\"t\":[\"首先，前端通过Web表单将自己的用户名和密码发送到后端的接口，这个过程一般是一个POST请求。建议的方式是通过SSL加密的传输(HTTPS)，从而避免敏感信息被嗅探 后端核对用户名和密码成功后，将包含用户信息的数据作为JWT的Payload，将其与JWT Header分别进行Base64编码拼接后签名，形成一个JWT Token，形成的JWT Token就是一个如同lll.zzz.xxx的字符串 后端将JWT Token字符串作为登录成功的结果返回给前端。前端可以将返回的结果保存在浏览器中，退出登录时删除保存的JWT Token即可 前端在每次请求时将JWT Token放入HTTP请求头中的Authorization属性中(解决XSS和XSRF问题) 后端检查前端传过来的JWT Token，验证其有效性，比如检查签名是否正确、是否过期、token的接收方是否是自己等等 验证通过后，后端解析出JWT Token中包含的用户信息，进行其他逻辑操作(一般是根据用户信息得到权限等)，返回结果。\",\"我们可以使用 jsonwebtoken 包 来操作 token\",\"//导入 jsonwebtoken const jwt = require('jsonwebtoken'); //创建 token // jwt.sign(数据, 加密字符串, 配置对象) let token = jwt.sign({ username: 'zhangsan' }, 'atguigu', { expiresIn: 60 //单位是 秒 }) //解析 token // jwt.verify(token,加密字符串，回调函数) jwt.verify(token, 'atguigu', (err, data) => { if(err){ console.log('校验失败~~'); return } console.log(data);// { username: '张三', iat: (创建时间), exp:(过期时间)} })\",\"扩展阅读： https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html\"]},\"369\":{\"h\":\"3. Token 和 JWT 的区别\",\"t\":[\"相同：\",\"都是访问资源的令牌\",\"都可以记录用户的信息\",\"都是使服务端无状态化\",\"都是只有验证成功后，客户端才能访问服务端上受保护的资源\",\"区别：\",\"Token：服务端验证客户端发送过来的 Token 时，还需要查询数据库获取用户信息，然后验证 Token 是否有效。\",\"JWT： 将 Token 和 Payload 加密后存储于客户端，服务端只需要使用密钥解密进行校验（校验也是 JWT 自己实现的）即可，不需要查询或者减少查询数据库，因为 JWT 自包含了用户信息和加密的数据。\"]},\"370\":{\"h\":\"六、附录\"},\"371\":{\"h\":\"1. 本地域名\",\"t\":[\"所谓本地域名就是 只能在本机使用的域名，一般在开发阶段使用\"]},\"372\":{\"h\":\"操作流程\",\"t\":[\"编辑文件 C:\\\\Windows\\\\System32\\\\drivers\\\\etc\\\\hosts\",\"127.0.0.1 www.baidu.com\",\"如果修改失败，可以修改该文件的权限\",\"11_会话控制\"]},\"373\":{\"h\":\"原理\",\"t\":[\"在地址栏输入 域名 之后，浏览器会先进行 DNS（Domain Name System）查询，获取该域名对应的 IP 地 址 请求会发送到 DNS 服务器，可以 根据域名返回 IP 地址\",\"可以通过 ipconfig /all 查看本机的 DNS 服务器\",\"hosts 文件也可以设置域名与 IP 的映射关系，在发送请求前，可以通过该文件获取域名的 IP 地址\"]},\"374\":{\"h\":\"python学习笔记\"},\"375\":{\"h\":\"一、语言基础\"},\"376\":{\"h\":\"1. 文件结构\",\"t\":[\"Python 的文件结构可以分为 代码、模块、包\",\"包：放置模块的文件夹\",\"模块：支持导入功能的，以.py 结尾的代码文件\",\"代码\",\"在每个包文件夹里都必须包含一个__init__.py 文件。该文件的作用是，告诉 Python 环境该文件夹是一个包。__init__.py 可以是一个空文件。\"]},\"377\":{\"h\":\"2. 模块\",\"t\":[\"Python 中的模块可以分为内置模块、自定义模块和第三方模块三类。\",\"内置模块：Python 中本来就有的模块；\",\"自定义模块：自己开发的模块；\",\"第三方模块：需要单独下载、安装并导入的模块。（pip、conda等包管理工具下载的包）\",\"模块除了被引用以外，还会有自己的属性可供调用者查看。\",\"import time #引入 time 模块 print(time.__name__) #模块名字。输出：time print(time.__doc__) #详细说明。输出：This module provides various…… print(time.__package__) #包名。因为是内置模块，包名为空，所以输出为空 print(time.__loader__) #加载的类名。输出：<class '_frozen_importlib.BuiltinImporter'> print(time.__spec__) #简介。输出：ModuleSpec(name='time', ……\",\"在 Python 中，模块的名字属性会根据不同的使用场景发生变化。当模块被导入到其他模块 时，__name__的值为模块本身的名字；而当该模块自己独立运行时，__name__的值会变为 __main__，借由这一点，我们常用此来执行一些单元测试代码：\",\"if __name__ == '__main__': 执行单元测试代码\",\"这样只有直接运行此文件时才会执行单元测试代码。\"]},\"378\":{\"h\":\"3. 模块导入方式\",\"t\":[\"import 模块名 as 别名 from 模块名 import（函数、变量） from 模块名 import *\",\"使用 from import *方式导入模块时，如果当前模块里已经包含其中某个函数，就会发生名字冲突\",\"当发生名字冲突时，系统会找离该函数最近的代码定义来执行（就近）\",\"当模块的文件名属于以下两种情况时，上面的导入方式不奏效，需要使用__import__函数\",\"模块的文件名中带 空格\",\"模块的文件名以 数字开头\",\"yuyinutils = __import__(\\\"9-24 yuyinutils\\\") days = __import__(\\\"9days\\\")\",\"在模块与当前代码不在同一路径的情况下，导入模块\",\"下一级目录：import 包名.模块名 \",\"上一级目录：import ..模块名\",\"import model3.getenv as getenv import ..train\"]},\"379\":{\"h\":\"4. 模块的搜索路径\",\"t\":[\"当导入名为 train 的模块时，解释器会先尝试从内置模块匹配；如果没找到，则将在 sys.path 记录的所有目录中搜索 train.py 文件。变量 sys.path 是一个字符串列表，它为解释器指定了模块的搜索路径。sys.path 包括：\",\"当前程序所在目录；\",\"标准库的安装目录（例如：pythom35\\\\\\\\lib\\\\\\\\site-packages）；\",\"操作系统环境变量 PythonPATH 所包含的目录\",\"在编写代码时，也可以通过列表操作来对 sys.path 进行读写，例如：\",\"import sys # 引入 sys 库 print(sys.path) #将 sys.path 打印出来 sys.path.append('d:// lib//Python') #在 sys.path 里添加一条路径\",\"对 sys.path 的修改，只在本次程序内有效，系统并不会将 sys.path 永久保存。如想永久生效， 还需在环境变量里进行配置。\"]},\"380\":{\"h\":\"二、变量\",\"t\":[\"在python中声明变量时不需要任何关键字，但是定义与赋值必须同步进行，Python内部会根据所赋变量的类型来创建该变量。\",\"一些常用的帮助函数：\",\"help(int) # 用来查询类或者类型具体的说明文档 dir(list) # 用来查询类或者类型的所有属性 id(a) # 查看a变量的标识（可以理解为该对象的内存地址） type(a) # 查看该变量的数据类型\"]},\"381\":{\"h\":\"三、数据类型\",\"t\":[\"Python 中有六个标准的数据类型：\",\"Number（数字）\",\"String（字符串）\",\"List（列表）\",\"Tuple（元组）\",\"Set（集合）\",\"Dictionary（字典）\",\"Python3 的六个标准数据类型中：\",\"不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；\",\"可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）\",\"可变数据和不可变数据的“变”是相对于 引用地址 来说的，不是不能改变其数据，而是改变数据的时候会不会改变变量的引用地址。\"]},\"382\":{\"h\":\"1. Number\",\"t\":[\"Python 中的 number 类型是一个数值类型的合集，具体又可以细分为 int（整型）、float（浮点型）、bool（布尔型）、complex（复数）等类型。\",\"a, b, c, d = 32.6, 58, True,8+7j ##定义四个变量 a、b、c、d，为它们赋予不同类型的值 print(type(a), type(b), type(c), type(d)) #将这四个变量的类型打印出来 // <class 'float'> <class 'int'> <class 'bool'> <class 'complex'>\",\"在 Python 中，等号赋值是指直接将对象的内存指针赋值：\",\"x=23 y=45 print(\\\"x,y:\\\",id(x),id(y),x,y) // x,y: 1725105328 1725106032 23 45 x=y print(\\\"x,y:\\\",id(x),id(y),x,y) // x,y: 1725106032 1725106032 45 45\",\"x 与 y 在赋值之前各自有自己的指针，而当赋值之后，x 与 y 不仅有相同的值， 而且还有相同的指针；而之前x=23所指向的内存地址依然存在，当系统判断没有变量引用该内存地址时，系统会使用内存回收机制，按设定好的规则回收该部分内存地址。\",\"缓存重用机制：按照某种规则将一些对象存在缓存中，调用时直接访问缓存。\"]},\"383\":{\"h\":\"2. String\",\"t\":[\"字符串大体可以分为两类：\",\"单行字符串：使用单引号（‘’）、双引号（\\\"\\\"）来表示。\",\"a='line1line2' # a 为单行字符串，内容必须在同一行 # a 为单行字符串的另一种写法。如果隔行了，需要用\\\\来连接下一行 a='line1\\\\ line2'\",\"多行字符块：也叫多行字符串，用三个（双或单）引号来表示。如：\\\"\\\"\\\"xxx\\\"\\\"\\\"。\",\"#b 为多行字符串 b='''line1 line2 line3'''\",\"每行之间可以直接用回车符分开\"]},\"384\":{\"h\":\"转义符\",\"t\":[\"转义字符\",\"描述\",\"\\\\(在行尾时)\",\"续行符\",\"\\\\\\\\\",\"反斜杠符号\",\"\\\\'\",\"单引号\",\"\\\\\\\"\",\"双引号\",\"\\\\a\",\"响铃\",\"\\\\b\",\"退格（Backspace）\",\"\\\\e\",\"转义\",\"\\\\000\",\"空\",\"\\\\n\",\"换行\",\"\\\\v\",\"纵向制表符\",\"\\\\t\",\"横向制表符\",\"\\\\r\",\"回车\",\"\\\\f\",\"换页\",\"\\\\oyy\",\"八进制数 yy 代表的字符。例如：\\\\o12 代表换行\",\"\\\\xyy\",\"十进制数 yy 代表的字符。例如：\\\\x0a 代表换行\",\"\\\\other\",\"其他的字符以普通格式输出\",\"字符串的转义是默认发生的，有时我们不想进行转义，而是获得原字符串，这时就需要进行反转义：\",\"要在字符串前面加一个“r”或者“R”\",\"aa= 'line\\\\tline' #aa 里面含有转义字符\\\\t，在第二个 line 之前 print(aa) #将 aa 输出：lineline（为横向制表符，由 Tab 键输出） bb= R'line\\\\tline' #bb 里面含有转义字符\\\\t，同时前面加一个 R，关闭转义功能 print(bb) #将 bb 输出：line\\\\tline\",\"使用函数 repr(str)将字符串 aa（含有转义字符的字符串）转换成原字符串（raw string）\",\"aa= 'line\\\\tline' # aa 里面含有转义字符\\\\t print(repr(aa)) # 使用repr 函数将 aa 的原始字符串输出： line\\\\tline\",\"上述两种方式的原理都是相同的，都是在字符串 str 中查找反斜杠 “\\\\”字符。如果能找到，就在该字符前面再加一个反斜杠“\\\\”，组成两个反斜杠字符“\\\\\\\\”，这样两个个反斜杠字符“\\\\\\\\”生成的字符串会转义成一个反斜杠字符“\\\\”，这 样就会把原来 str 中那个不需要转义的反斜杠“\\\\”输出来了。\",\"知识拓展\",\"在字符串前面加上“b”，将字符串转成二进制字符串。\",\"在字符串前面加上“u”，将字符串转成 Unicode 编码的字符串。\"]},\"385\":{\"h\":\"屏幕 I/O 及格式化\",\"t\":[\"字符串格式化（输出）： 加号、占位符\",\"image-20230918171944425\",\"%m.nf 这种形式的占位符，m 代表设定的总位数，n 代表设定的小数点后的位数\",\"总长为 8，小数点后为 2，实际长度不足，需要前补空格 输出：□□□23.45 总长为 8，小数点后为 4，小数点后位数不足，会在小数点后面补 0 输出：□23.4500 总长为 2，小数点后为 0，总长度比实际整数长度还小，总长度失效 输出：223 总长为 6，小数点后为 4，总长度 6 小于实际长度 7，总长度失效 输出：23.4500\"]},\"386\":{\"h\":\"手动拼接格式化\",\"t\":[\"str.ljust(n)、str.rjust(n)、str.center(n)\",\"str.rjust(n)的作用是将字符串靠右对齐，其中的参数 n 代表输出的长度。\",\"如果字符串不足这个长度，则默认在左边填充空格。\",\"如果字符串的长度大于 n，则令 n 失效，并不会截断字符串，而是把字符串全部显示\",\"x=5 #定义个整型数 5 print(“:”,str(x).rjust(2), str(x*x).rjust(3), end=', ') #占两位，以右对齐的方式输出 x 本身；占 3 位，以右对齐的方式输出 x*x；结尾用逗号 print(str(x*x*x*10).rjust(4)) #占 4 位，以右对齐的方式输出 x*x*x，结尾用默认的回车 # result: : □5 □25, □125\"]},\"387\":{\"h\":\"占位符格式化\",\"t\":[\"'占位符' %（要替换占位符的内容）\",\"x=5 #定义一个整型数 5 print(\\\":\\\",'%2d %3d,%4d'%(x, x*x, x*x*x)) #在模板中放置 3 个占位符，并指定输出长度 : □5 □25, □125\",\"占位符出场的先后顺序必须与后面的具体内容相匹配\"]},\"388\":{\"h\":\"Str.format格式化\",\"t\":[\"'{0：2d}'.format(内容)\",\"x=5 #定义一个整型数 5 print(\\\":\\\",'{0:2d} {1:3d}, {2:4d} {0:4d}'.format(x, x*x, x*x*x)) #将 x、 x*x、 x*x*x三个数值按照字符串模板的格式输出 # : □5 □25, □125 □□□5\",\"每个大括号里的第一项用于维护与后面具体内容的对应关系，其数值与 format 函数中元素的索引相对应\",\"在字符串模板中，冒号后面的格式为：[补齐字符][对齐方式][宽度]\",\"print('{0:=>10d}'.format(5)) #右对齐，输出长度为 10 的整数，用=填充：=========5 print('{0:&<10.3f}'.format(0.5)) #左对齐，输出长度为 10 的浮点数，用&填充：0.500&&&&& print('{0:-^10}'.format(\\\"hello\\\")) #居中对齐，输出长度为10 值的字符串，用-填充：--hello---\",\"对齐方式：’<’、’>’、’^’左右中\",\"简洁写法：省略格式要求，{}里只标明索引\",\"结合list或tuple：.format(*list or *tuple)，其中*的意思是解包参数列表，即将 tuple 或 list 中的内容解包出来，作为参数传入到函数 format 中\",\"mylist = [5,25,125] #定义一个列表变量 print(\\\":\\\",'{0} {1}, {2} {0}'.format(*mylist)) #模板中直接指定后面列表变量里具体元素的顺序即可\",\"结合字典：数字索引替代为字典具体标号索引（**dict）\",\"d = {'x':5, 'xx':25, 'xxx':125} #定义一个字典 print('x is {x}, xx is {xx}, xxx is {xxx}.'.format(**d)) #在模板中，只需填入字典里对应的名称即可\"]},\"389\":{\"h\":\"f-string\",\"t\":[\"f-string 是 python3.6 之后版本添加的，称之为字面量格式化字符串，是新的格式化字符串的语法。\",\"f-string 格式化字符串以 f 开头，后面跟着字符串，字符串中的表达式用大括号 {} 包起来，它会将变量或表达式计算后的值替换进去。\",\"name = 'Runoob' print(f'Hello {name}') # 替换变量 # 'Hello Runoob' print(f'{1+2}') # 使用表达式 # '3' w = {'name': 'Runoob', 'url': 'www.runoob.com'} print(f'{w[\\\"name\\\"]}: {w[\\\"url\\\"]}') # 'Runoob: www.runoob.com'\",\"序列类型包括 字符串、列表、元组、集合和字典 ，但集合和字典不支持如下操作。\",\"序列的基本操作：连接（+）、重复（*）、检索（s[i]）、反检索(index函数)、切片（[起始：结束：步长]）\",\"字符串不能被改变。\"]},\"390\":{\"h\":\"3. list\",\"t\":[\"列表是最常用的 Python 数据类型，它可以作为一个方括号内的逗号分隔值出现。列表的数据项不需要具有相同的类型。创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。\",\"li = [1,tt,3.4,\\\"yes\\\",[1,2]] # 实现空列表 li=[]\",\"extend将列表中的每个元素加入到a后面，且没有返回值。\",\"append将列表作为一个整体对象加入到a后面。\",\"+号连接和extend效果相同，效率较低，会重新生成列表。\",\"gc.collect() #回收内存地址\",\"实现队列：insert（0，x）+pop\",\"实现栈：append+pop\",\"![img](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image004.jpg)\"]},\"391\":{\"h\":\"4. tuple\",\"t\":[\"List的只读版，元组内部元素不能修改。\",\"描述：小括号括起来 ----（16，20）\",\"tuple 的元素不可改变，但它可以包含可变的对象，比如 list 列表，并且 可变对象内部的 内容也是可以修改的。\",\"在定义包含 1 个元素的 tuple 时，需要在元素后面加一个逗号tup =(20,)\"]},\"392\":{\"h\":\"5. set\",\"t\":[\"无序、不重复，作用于数据清洗\",\"描述：用大括号括起来 ---{‘hello’，‘python’}\",\"要想定义一个空的 set 变量，就必须要使用 set 函数。\",\"运算：差、并、交、in\",\"Frozenset：不可变集合 ---元组对于列表\"]},\"393\":{\"h\":\"6. dictionary\",\"t\":[\"无序集合，键值对形式出现\",\"关键字不可变且唯一（同一字典）\",\"描述：大括号括起来，里面是键值对形式 --{‘hello’：1，‘good’：2}\",\"dictionary[关键字]=值 ---在键值对中，值的类型是可以被任意修改的\",\"list2 = sorted(d2.keys()) --sorted 函数将字典中的 key 转成 list。\",\"--d2.values\"]},\"394\":{\"h\":\"四、 运算符\"},\"395\":{\"h\":\"1. 算数运算符\",\"t\":[\"运算符\",\"描述\",\"+\",\"加\",\"-\",\"减\",\"*\",\"乘\",\"/\",\"除，会生成浮点数结果\",\"%\",\"取模（余数）\",\"**或pow(x,y)\",\"幂。例如：3**4 等价与 pow(3,4)，即 3 的 4 次方\",\"//\",\"取整除\",\"abs(x)\",\"取绝对值\",\"int(x,[base])\",\"将 x 转换为整型。 x 可以是字符串或其他数字；base 是可选参数，默认为 10，表示将字符串 x 以 10 进制转化为整数。 当 base 被赋值时，x 必须是字符串；当 x 为浮点数时，转成的整数会将小数点后面全部舍掉。 如果想要更精确的转化，推荐用 math 库里面的 floor 和 ceil 函数来明确转换方式\",\"float(x)\",\"将 x 转换为浮点型\",\"complex(re,im)\",\"生成复数。re 为实数部分，im 为虚数部分。 例如：complex(8,7)，则生成一个复数 8+7j\",\"c.conjugate()\",\"取 c 的共轭复数，假如 c=8+7j，则 c.conjugate() = 8-7j\",\"divmod(x, y)\",\"返回商和余数。例如：divmod(13, 4) = (3, 1)\",\"a=20 b=-3 print(a+b) #加号运算，输出：17 print(a-b) #减号运算，输出：23 print(a*b) #乘号运算，输出：-60 print(a/b) #除号运算，输出：-6.666666666666667 print(a%b) #取余运算，输出：-1 print(a**b) #幂运算，输出：0.000125 print(a//b) #整除运算，输出：-7 print(abs(b)) #绝对值运算，输出：3 print(int(\\\"1010\\\",2)) #将字符串以二进制转换成整数，输出：10 print(float(\\\"3.14\\\")) #将字符串换成浮点数，输出：3.14 c =complex(a,b) #生成复数，输出：(20-3j) print(c) print(c.conjugate()) #计算共轭复数，输出：(20+3j) print(divmod(a, b)) #计算除数与余数，输出：(-7, -1)\"]},\"396\":{\"h\":\"2. 赋值运算符\",\"t\":[\"运算符\",\"描述\",\"+=\",\"加。例如：a+=b 等价于 a=a+b\",\"-=\",\"减。例如：a-=b 等价于 a=a-b\",\"*=\",\"乘。例如：a*=b 等价于 a=a*b\",\"/=\",\"除。例如：a/=b 等价于 a=a/b\",\"%=\",\"取模。例如：a%=b 等价于 a=a%b\",\"**=\",\"幂。例如：a**=b 等价于 a=a**b\",\"//=\",\"取整除。例如：a//=b 等价于 a=a//b\",\"a=9;b=3 a+=b #加。等价于 a=a+b print(a) #输出：12 a=9;b=3 a-=b #加。等价于 a=a-b print(a) #输出：6 a=9;b=3 a*=b #加。等价于 a=a*b print(a) #输出：27 a=9;b=3 a/=b #加。等价于 a=a/b print(a) #输出：3.0 a=9;b=3 a%=b #加。等价于 a=a%b print(a) #输出：0 a=9;b=3 a**=b #加。等价于 a=a**b print(a) #输出：729 a=9;b=3 a//=b #加。等价于 a=a//b print(a) #输出：3\"]},\"397\":{\"h\":\"3. 逻辑运算符\",\"t\":[\"运算符\",\"描述\",\"and\",\"取“与”。左右都为 True，结果才为 True\",\"Or\",\"取“或”。左右有一个为 True，结果就为 True\",\"not 或 ！\",\"取“反”。如果是 True 结果就为 False\",\"and 是一个短路运算符。它只有在第一个运算数为 True 时，才会计算第二个运算数的值。\",\"or 是一个短路运算符。它只有在第一个运算数为 False 时，才会计算第二个运算数的值。\",\"not 的优先级比其他类型的运算符现低。not a == b 相当于 not (a == b)；而 a == not b 是错误的。\"]},\"398\":{\"h\":\"4. 比较运算符\",\"t\":[\"运算符\",\"描述\",\"==\",\"等于\",\"!= 或者 <>\",\"不等于\",\">\",\"大于\",\"<\",\"小于\",\">=\",\"大于等于\",\"<=\",\"小于等于\",\"is\",\"指针等于\",\"is not\",\"指针不等于\",\"a=3 b=5 c=None print(a==b) #等于比较，输出：False print(a!=b) #不等于比较，输出：True print(a>b) #大于比较，输出：False print(a<b) #小于比较，输出：True print(a>=b) #大于等于比较，输出：False print(a<=b) #小于等于比较，输出：True print(a is b) #指针等于比较，输出：False print(a is not b) #指针不等于比较，输出：True print(c is None) #None 值等于比较，输出：True\",\"“==”只是判断两个对象的内容是否相等，而 is 函数不仅比较内容是否相等，还比较指针是否相等。\"]},\"399\":{\"h\":\"5. 位运算符\",\"t\":[\"运算符\",\"描述\",\"&\",\"按位与\",\"|\",\"按位或\",\"~\",\"按位非（取反）\",\"^\",\"按位异或\",\"<<\",\"按位左移\",\">>\",\"按位右移\",\"左移n位可以近似看为：a*2的n次方\",\"右移n位可以近似看为：a/2的n次方\"]},\"400\":{\"h\":\"6. 三目运算符\",\"t\":[\"条件表达式?语句1:语句2;\",\"条件运算符在执行时，首先对条件表达式进行求值，如果该值为true，则执行语句1，并返回执行结果；如果该值为false，则执行语句2，并返回执行结果。\",\"如果条件的表达式的求值结果是一个非布尔值，会将其转换为布尔值然后再运算。\"]},\"401\":{\"h\":\"五、流程控制\",\"t\":[\"流程控制：if、while、for循环\",\"If else 简洁写法：c = [a,b][a<b] --后假，赋值a；后真，赋值b\",\"for循环：执行语句对 for 后面的序列数据进行了修改时，使用切片的方 法为该序列数据做一个副本。 --for item in words[:]:\",\"range 中的参数默认是从 0 开始，要头不要尾--range（起始，结束，步长）\",\"内置函数zip：--传入zip的参数采取相应位置一一对应的方式组合成元组， 所以长度多出来的部分舍弃。Zip后类型位zip类型\",\"--当 zip 对象被转化为元组或列表后，就会自动销毁。\",\"--在zip对象前加*完成unzip，即将zip生成的数据返回\",\"--for 循环中，直接可以从 zip 对象取出每个迭代的元素\",\"内置函数 enumerate：将序列类型的数据生成带序号的新序列数据（0开始）\",\"--生成新序列的每个元素都是一个元组\",\"--enumerate的第一个返回值在循环里同时也起到计数的作 用，可以直接当作循环的次数来使用。\",\"break、continue、pass ：break停止；continue跳过进入下一次循环。\",\"列表推导式：colors = ['r' if item == 0 else 'b' for item in Y[:]]\",\"t = [ tuple(r) for r in m ]\"]},\"402\":{\"h\":\"六、函数\",\"t\":[\"函数本质上是对象，使用callable函数查看函数是否可以被调用\",\"6.1函数定义\",\"def 函数名(参数 1, 参数 2, ……, 参数 N):\",\"6.2文档字符串\",\"开始位置字符串，用来说明函数的功能及调用方法\",\"6.3函数参数的定义方式和调用方式\",\"\\\\1. 列表方式：按照形参顺序；传入指定形参\",\"\\\\2. 星号方式：在星号的后面的参数都必须要指定参数名称\",\"\\\\3. 带默认实参方式：有默认值的形参必须放在没有默认值的形参后面\",\"\\\\4. 通过元组或列表的解包参数的方式：只有一个被定义为元组的形参\",\"def recoder (*person):\",\"函数调用--任意多实参：传入顺序与内部顺序一一对应，且无法修 改\",\"--传入列表或元组：在列表或元组前加一个*\",\"\\\\5. 通过字典的解包参数方式：def recoder (**person):\",\"函数调用--传入指定形参：必须为形参指定名称\",\"​ --传入字典：在字典变量前加**\",\"4、5总结：\",\"使用解包参数的函数，不能对参数修改；而使用列表传值的函数，是可 以对参数进行修改的。\",\"\\\\6. 混合使用：\",\"--字典和元组的解包参数，同时作为形参来接收实参：根据实参是 否指定形参来决定由哪个来接收。同时传入时，不指定形参的实 参在前，指定形参的实参在后。\",\"--元组和单个参数混合时，为单个参数指定形参。\",\"--元组、单个形参和字典混合时，将字典放在最后。\",\"\\\\7. 检查参数：if not isinstance(age, (int, str)):\",\"isinstance 函数的作用是检查变量的类型\",\"6.4 函数分类\",\"6.4.1匿名函数\",\"Lambda 参数 1，参数 2…:表达式 -- r=lambda x,y:x*y\",\"表达式的内容只能是一句话的函数，且不能存在 return 关键字\",\"（1）匿名函数与reduce函数组合\",\"reduce(function, sequence, [initial])\",\"--每次调用传入两个参数：sequence序列的当前元素，上一元 素为回调函数中的返回值。\",\"print(reduce (lambda x,y:x + y,range(1,101) ) )\",\"适用于归并性任务（序列数据的归并处理）\",\"（2）匿名函数与 map 函数的组合\",\"map(function, sequence[, sequence, ……])\",\"--函数返回值为一个 map 对象。在使用时，得用 list 或 tuple 等函数进行转化。\",\"使用 map 函数处理一个序列数据：\",\"--t = map(lambda x: x ** 2,[1, 2, 3, 4, 5] )\",\"使用 map 函数处理多个序列数据：\",\"--t = map(lambda x,y: x+y,[1, 2, 3, 4, 5],[1, 2, 4, 5] )\",\"适用于映射性任务\",\"（3）匿名函数与 filter 函数的组合\",\"filter(function or None, sequence)\",\"--filter 函数会把序列对象中的元素依次放到 filter 的处理 函数中。如果返回 True，就留下，反之就舍去\",\"--filter 函数的返回值是一个 filter 类型，需要将其转成列 表或元组等序列才可以使用。\",\"t=filter(lambda x:x%2==0, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\",\"适用于过滤性任务\",\"6.4.2 偏函数\",\"对原函数的二次封装，类似于面向对象中的父类与子类的关系。\",\"from functools import partial\",\"partial(func, *args, **keywords)\",\"偏函数的作用：为其原函数指定一些默认的参数，转化为另一个 带有剩余参数的函数对象，从而实现了截取函数功能（偏向）效果。\",\"6.4.3 递归函数\",\"6.4.4 eval 与 exec 函数\",\"用来执行一个字符串形式的 Python 代码（代码以字符串的形式提 供），相当于一个 Python 的解释器。\",\"区别：eval 执行完要返回结果，而 exec 执行完不返回结果\",\"定义：eval、exec（expression, globals=None, locals=None）\",\"--globals和locals是执行语句的作用域，两参数不存在时 默认全局，都存在时locals优先级较高。\",\"--系统会将当前环境中的__builtins__复制到自己提供的 globals 中。\",\"--执行语句需要是字符串格式，repr（s）、‘s ’转字符 串均可，但是str（s）不行。(s为字符串变量)\",\"6.4.5 生成器函数\",\"生成器函数返回本次计算结果，用完立即销毁，节约内存。\",\"生成器函数使用yield语句返回。\",\"生成器表达式：“for 循环列表推导式”外层是方括号，而生成器 表达式外层是圆括号。 --myGen = ( x*x for x in range(3) )\",\"生成器 myGen 的值在打印输出之后就不在了\",\"6.4.6工厂函数（面向对象）\",\"普通：对原始函数进行封装，固化部分参数。\",\"----：偏函数利用关键词调用partial（参数=‘’）\",\"工厂函数则另外构建函数在函数体内指定参数。\",\"闭合函数：由自由变量与嵌套函数组成，将固化参数作为自由变量， 原始函数作为嵌套函数。\",\"![QQ截图20210909102202](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image006.gif)\",\"---fun.closure 记录自由变量的参数对象地址。\",\"---解决封装函数过多的问题（普通的工厂函数）。\",\"装饰器：在原有的函数外面再包装一层函数，使新函数在返回原有 函数之前实现一些其他的功能。\",\"![1](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image008.gif)\",\"---装饰器本质是一个闭合函数，该闭合函数的自由变量是 一个函数。大大加强代码的重用性与扩展性。\",\"---在不改变原有代码实现的基础上，添加新的实现功能\",\"高级修饰器：1.使用字典和元组的解包参数来作为形参。这样得到 的装饰器便可以适用于各种不同参数的函数。\",\"2.在原有的通用参数装饰器外面再封装一层函数接受 外部变量。\",\"@修饰符：在定义原函数时就可以为其指定修饰器函数\",\"普通装饰器：\",\"![2](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif)\",\"可接收参数的装饰器的定义：\",\"@ isadmin (userid='user')\",\"装饰器在装饰函数时，改变了函数本身的名称，解决方案：\",\"\\\\1. wrapper.name = fn.name\",\"\\\\2. ![3](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif)\",\"组合装饰：多个装饰器并用，将不同的装饰器使用@符号一行一行的 堆叠起来。\",\"多装饰器的载入顺序是从下往上的。在调用时，执行的 函数顺序是从上往下的。\",\"同作用域下默认参数被覆盖问题：\",\"使用循环生成多个工厂函数时的问题\",\"![4](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image014.gif)\",\"6.5 变量的作用域\",\"由高到低排列，依次为 L→E→G→B，俗称 LEGB 原则\",\"global 语句：在本地作用域L或嵌套作用域E下对全局变量进行操作。\",\"Global a #获取全局变量a\",\"nonlocal 语句：使用 nonlocal 语句，会在本地作用域以外按照优先级 的顺序逐级去寻找声明的变量，并引用该变量\"]},\"403\":{\"h\":\"七、错误与异常\",\"t\":[\"错误：语法错误与运行时错误（异常-exception）\",\"异常处理：为了避免程序退出，使用捕获异常的方式获取这个异常的名 称，再通过其他的逻辑代码让程序继续运行。\",\"异常定义： ![QQ截图20210909160129](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image016.gif)\",\"--else语句必须放在所有的except语句后面\",\"--如果 except 后面没有跟异常名，则必须放在所有捕获异常的语句之后\",\"--except Exception as e: print(e) 输出未知异常\",\"--输出异常的详细信息：print(sys.exc_info())（元组类型）错误信息\",\"traceback.print_tb(sys.exc_info()[2])追踪错 误行\",\"traceback.print_exc()上述两个都有\",\"上述均需提前引入相信模块\",\"创建异常：即抛出异常 --raise 异常类型 字符串（抛出异常）\",\"--通过 except 关键字来捕获该异常（输出异常）\",\"异常的处理（清理）：finally不管异常发生与否都会执行\",\"判定条件的正确性（断言）：检验自己的判断是对还是错\",\"--assert 1!=1 表达式为假时报异常\",\"--assert 1!=1,(\\\"1 不等于 1，报错\\\")\",\"--上述表达式为错误信息\"]},\"404\":{\"h\":\"八、文件操作\",\"t\":[\"基本操作：系统级操作（删除、修改权限） 应用级操作（写入、读取）\",\"删除文件：os.remove('a.txt')\",\"读写文件：1.打开文件：open（文件名，mode）\",\"![1](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif)\",\"把文件对象当作迭代器来读取:for line in f: print(line)\",\"2.具体读写：f.read() f.write()\",\"--文件对象的 write 方法只是把当前的内容缓存到了内存 里，并没有真正写入到文件.在调用 close 时，系统自动 将缓存里的内容写进了文件。\",\"3.关闭文件：f.close()\",\"4.流程简化：with语句：适用于类似文件操作的这种（具有事 先、事中、事后三个明显阶段）任务。\",\"with open('a.txt','wb+') as f:\",\"支持 with 语法的对象必须有一个__enter__方法 和一个__exit__方法\",\"字符串与二进制的相互转化：![2](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image020.gif)\",\"![3](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif)\",\"序列化：pickle函数：dumps 与 loads，实现基于内存的 Python 对象与二 进制互转； dump 与 load，实现基于文件的 Python 对象与二进制 互转。\",\"基于内存：\",\"![4](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image024.gif)\",\"基于文件：\",\"dump(obj, file）--文件必须有 write 方法，并且支持写入二进制 数据。\",\"load(file） --对象必须有两个方法——read()和 readline。\"]},\"405\":{\"h\":\"九、类\",\"t\":[\"9.1基本术语\",\"类（class）：具有相同属性和方法对象的集合。\",\"类变量：公用变量。一般不作为实例变量使用。\",\"实例变量：作用于当前实例，定义在方法中。\",\"![QQ截图20210911092353](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image026.gif)\",\"![1](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image028.gif)\",\"![2](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image030.gif)·定义类方法需要有默认形参self，调用时则不需要传入。\",\"·类使用时先实例化对象，然后调用对象方法实现具体功能。\",\"·类的两个内置属性：doc：类的文档字符串\",\"dict：该类的所有属性\",\"![3](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image032.gif)\",\"·添加动态属性（实例变量）\",\"·删除动态属性：del Anna.name\",\"·限制合法的可添加动态属性：slots = ('name', 'age')\",\"9.2类的实例化\",\"![4](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image034.gif)\",\"·类带有初始值的实例化，函数功能为为成员变量赋值，没有输出。\",\"·实例化类时，即使没有初始值也会调用__init__函数\",\"·__init__函数，若有除 self 以外的参数，则实例化该类时就必须输 入与__init__函数 对应的参数，否则就会报错。\",\"9.3成员函数分类和调用\",\"默认的成员方法：面向类的实例化对象\",\"![1](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image036.gif)\",\"·先实例化对象，然后：实例化对象.方法（）\",\"·向类的函数中传入对象\",\"![2](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image038.gif)\",\"·将成员函数定义在类外，在类中对其进行指定，调用同上。\",\"![3](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image040.gif)\",\"·类内的成员互访：需要在方法前加上self.\",\"类方法：面向当前类，使用在实例化前与类进行交互，但不和其实例进行交 互的函数方法上。\",\"![4](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image042.gif)\",\"·类方法的第一个参数必须是 cls（用来指代该类）\",\"·调用类方法时，需要使用“类名.类方法名”的方式，区别于默认成员 方法“实例化对象.类方法名”方式。\",\"·@classmethod 装饰的方法不能使用实例属性，只能是类属性。\",\"静态方法：等同于普通函数，只是被封装在类中，独立于整个类。\",\"![5](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image044.gif)\",\"·第一个参数没有任何要求，调用方式两种皆可。\",\"·运行不会影响类的属性。\",\"9.4数据成员的分类和区别\",\"类变量属于静态数据，而实例变量属于动态数据。\",\"删除实例化对象：del 实例化对象\",\"常见错误：类和类的实例都可以访问类变量，但只有类可以修改类变量； 如果使用类的实例来修改类变量，那么python会自动给生成 一个与类变量同名的实例变量，而当实例变量与类变量同名， 系统会以实例变量优先。\",\"为了解决上述错误，引入类变量的私有化，通过将类变量隐藏起来，避 免上述错误中自动生成同名的实例变量，从而避免覆盖掉类变量。\",\"9.5类变量的私有化类属性\",\"原理：将私有化变量改名（__MyClass__Occupation）\",\"实现：1.__Occupation = \\\"scientist\\\"（在变量名前加两下划线）\",\"2.使用装饰器技术（@property）\",\"![2](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image046.gif)![1](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image048.gif)调用时直接对myc.Occupation进行操作即可。\",\"通过使用“装饰器+私有变量”的方式，既避免了上述错误，同时使得类 的实例可以真正地自由修改类变量。\",\"9.6实现子类\",\"对于全部都遵守的共性，用父类来描述；对于满足部分共性的对象，用 多个子类来描述。\",\"继承的实现：\",\"·单、多继承(访问派生类属性时的搜索规则采用基类顺序深度优先)\",\"class DerivedClassName(FatherClassName，[FatherClassName2]):\",\"·继承其他模块的基类\",\"class DerivedClassName(module.FatherClassName):\",\"子类方法的覆写：子类方法与父类方法重名时，父类方法失效。\",\"·常见方式：在子类中，执行自己的覆写方法的同时，也要调用一下父 类的被覆写的方法。\",\"![3](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image050.gif)super函数：通过 super 函数来保证父类的方法只被执行一次。\",\"·子类方法中调用了父类方法时，若继承关系比较复杂，有可能父类函 数被自动执行多次。\",\"![4](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image052.gif)\",\"·使用 super 函数时，对父类的方法调用会自动传入 self。无需再传 入 self，否则会报错。\",\"9.7常用的内置函数\",\"判断实例（isinstance）：isinstance(object, class_name)\",\"判断对象是否是类的实例\",\"判断子类（issubclass）：issubclass(class1, class2)\",\"判断类1是否是类2的子类\",\"判断类实例中是否含有某个属性：hasattr(obj, attribute，/)\",\"获得类实例中的某个属性：getattr(obj, attribute[, default])\",\"设置类实例中的某个属性值：setattr(obj, attribute, value, /)\",\"9.8重载运算符（在运算操作的基础上添加其他功能）\",\"在类中定义并实现一个与运算符对应的处理方法。在两个对象进行运算 符操作时，系统就会调用类中的具体方法来处理。\",\"只有重载时运算符操作才会运行。\",\"9.9包装与代理\",\"包装：包装类包含被包装类的实例(类似于函数的装饰类，不改变原始类， 应对新的需求对功能进行拓展)\",\"![5](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image054.gif)\",\"代理：将包装类变成一个属性的“代理”。 这使得访问包装类的属性等 同于访问被包装类的属性。\",\"![6](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image056.gif)\",\"getattr：在属性存在时返回属性的值，属性不存在时调用此函数。\",\"9.10自定义异常类\",\"class MyEpt(Exception):类名为异常类型，继承exception类，作为自 定义异常的基类。\",\"class MyEptInput(MyEpt):作为自定义基类的派生类\",\"![7](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image058.gif)\",\"·自定义基类需要放在所有派生类后面。\",\"9.11支持 with 语法的自定义类\",\"要想实现这个功能，需重载两个方法：__enter__方法、__exit__方法\",\"![8](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image060.gif)\"]},\"406\":{\"h\":\"十、系统调度\"},\"407\":{\"h\":\"1. 进程与线程\",\"t\":[\"进程，是应用程序的执行实例（比如 Windows 下某个运行起来的 exe 软件）；线程是进程中的执行单元，是进程的一部分。\",\"线程主抓中央处理器执行代码的过程，其余的资源的保护和管理由进程去完成。 一个进程可以由一个或一个以上的线程组成。 线程与进程，又可以理解为对 CPU 时间段的描述：线程是 CPU 调度的最小单位，进程是 CPU 资源分配的最小单位。\"]},\"408\":{\"h\":\"2. 线程\",\"t\":[\"Python 中有关线程开发的部分，被单独封装到一个模块中：threading 模块。\",\"class threading.Thread(group=None, target=None, name=None,args=(), kwargs={}, *, daemon=None)\",\"方法：run，start，join，isAlive，getName，setName\",\"常用函数：threading.current_thread()：查看当前进程\",\"threading.enumerate：返回一个正运行线程的 list\",\"threading.activeCount：返回正在运行的线程数量\",\"创建子线程：1.实例化原始类，target传参绑定处理函数，调用start方法。\",\"t = threading.Thread(target=handle, args=(i,))\",\"2.派生新子类，重载run方法，实例化新类，调用start 方法。\",\"解决数据不同步问题：1.互斥锁：将某段代码保护起来，只允许一次由 一个线程执行。\",\"lock = threading.RLock() 锁的实例化\",\"lock.acquire() 加锁\",\"lock.release() 解锁\",\"2.信号量：带计数的线程同步机制\",\"semaphore = threading.Semaphore(0)实例化\",\"semaphore.acquire() 计数器-1\",\"semaphore.release() 计数器+1\",\"3.边界信号量：信号量基础上添加了计数器的上 限校验。\",\"semaphore = threading. BoundedSemaphore (1)\",\"4.事件机制：threading 模块中的 Event 类\",\"Self.re.set() 通知读事件\",\"Self.we.wait() 等待写事件\",\"self.we.clear() 清除写事件\",\"5.条件锁：threading 模块中的 Condition 类\",\"互斥锁的基础上加入wait、notify、notifyAll\",\"6.定时器：threading 模块下的 Timer 类\",\"class threading.Timer(interval, function, args=[], kwargs={})\",\"interval：触发定时器的时间。 \",\"function：定时器到时间后的处理函数。\",\"在定时器的触发函数里，再创建一个定时器，即 可实现定时器的循环触发。\",\"![1](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image062.gif)\",\"timer2.cancel() 结束定时器\",\"7.线程池：使用 concurrent.futures 模块下的 ThreadPoolExecutor 类\",\"抢占式更灵活，允许池中线程的处理函数不一 样，submit方法\",\"![2](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image064.gif)\",\"非抢占式更严格，要求线程池中的线程必须执行 同样的处理函数，map方法\",\"![3](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image066.gif)\",\"10.2进程\",\"某一个程序启动时，就会默认启动一个进程，将该程序装载到内存。同时在该进程中还会默认启动一个线程，来执行本进程中的内容。\",\"所用模块：multiprocessing模块\",\"创建方式基本与线程相同。\",\"10.3多进程与多线程的区别\",\"多进程与多线程运行时所占的内存分布不同，常用多进程来实现守护服务 器的功能。而多线程更适用与批处理任务等功能。\",\"10.4协程（在同时开启的多个任务中，一次只执行一个）\",\"实现协程的基本流程：（使用asyncio模块）\",\"1.定义协程处理函数；async def do_some_work(x):\",\"2.定义回调函数：def callback(future):\",\"3.生成协程对象；coroutine = do_some_work('爬取股票')\",\"4.获得事件循环对象：loop = asyncio.get_event_loop()\",\"5.对协程封装：task = asyncio.ensure_future(coroutine)\",\"6.绑定回调函数：task.add_done_callback(callback)\",\"7.执行协程任务：loop.run_until_complete(coroutine)\",\"先有进程，然后进程可以创建线程，线程是依附在进程里面的，线程里面 可以包含多个协程。\",\"多线程开发线程之间执行是无序的，协程之间执行按照一定顺序交替执行。\",\"![4](file:///C:/Users/Administrator/AppData/Local/Temp/msohtmlclip1/01/clip_image068.gif)\"]},\"409\":{\"h\":\"十大经典排序算法\",\"t\":[\"img\",\"img\"]},\"410\":{\"h\":\"冒泡排序\",\"t\":[\"比较相邻的元素。如果第一个比第二个大，就将他们交换，然后接着向后比较，这样一趟循环可以将最大的元素移动到最右端。(①②比较，②③比较，......)\",\"function bubbleSort(array) { if (array.length < 2) return array; for (let i = 0; i < array.length - 1; i++) { for (let j = 0; j < array.length - 1 - i; j++) { if (array[j] > array[j + 1]) { [array[j], array[j + 1]] = [array[j + 1], array[j]]; } } } return array; }\"]},\"411\":{\"h\":\"选择排序\",\"t\":[\"在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。\",\"function selectSort(array) { if (array.length < 2) return array; for (let i = 0; i < array.length - 1; i++) { let minIndex = i; for (let j = i; j < array.length; j++) { if (array[j] < array[minIndex]) { minIndex = j; } } [array[i], array[minIndex]] = [array[minIndex], array[i]]; } return array;\"]},\"412\":{\"h\":\"插入排序\",\"t\":[\"对于未排序的数据，在已排序序列中从后向前扫描，找到相应位置并插入。（需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间）\",\"function insertSort(array) { if (array.length < 2) return array; for (let i = 1; i < array.length; i++) { let current = array[i]; let preIndex = i - 1; while (preIndex >= 0 && current < array[preIndex]) { array[preIndex + 1] = array[preIndex]; preIndex--; } array[preIndex + 1] = current; } return array; }\"]},\"413\":{\"h\":\"希尔排序\",\"t\":[\"插入排序的优化（分治）\",\"将原始数据按照增量间隔分组，对每组使用直接插入排序算法进行处理。逐渐缩小增量，再次执行插入排序操作直至增量减至1.\",\"img\",\"function shellSort(array) { if (array.length < 2) return array; let gap = Math.floor(array.length / 2); while (gap > 0) { for (let i = gap; i < array.length; i++) { let current = array[i]; let preIndex = i - gap; while (preIndex >= 0 && current < array[preIndex]) { array[preIndex + 1] = array[preIndex]; preIndex -= gap; } array[preIndex + 1] = current; } gap = Math.floor(gap / 2); } return array; }\"]},\"414\":{\"h\":\"归并排序\",\"t\":[\"选择排序的优化（分治）\",\"把长度为n的输入序列分成两个长度为n/2的子序列；对这两个子序列分别采用归并排序（递归调用）；将两个排序好的子序列合并成一个最终的排序序列。\",\"function mergeSort(array) { const len = array.length; if (len < 2) return array; //递归出口 let mid = Math.floor(len / 2); let left = array.slice(0, mid); let right = array.slice(mid); return merge(mergeSort(left), mergeSort(right)); // 递归调用 } function merge(left, right) { let result = []; const len = left.length + right.length; for (let index = 0, i = 0, j = 0; index < len; index++) { if (i >= left.length) { result[index] = right[j++]; } else if (j >= right.length) { result[index] = left[i++]; } else if (left[i] < right[j]) { result[index] = left[i++]; } else { result[index] = right[j++]; } } return result; }\"]},\"415\":{\"h\":\"快速排序\",\"t\":[\"分治\",\"从数列中挑出一个元素，称为 “基准”（pivot）；\",\"重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；\",\"递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。\",\"function quickSort(array, start, end) { if (array.length < 2) return array; if (start < end) { let i = start, j = end, pivot = array[start]; while (i < j) { // 从右向左找第一个小于基准的数 while (i < j && array[j] >= pivot) { j--; } if (i < j) { array[i++] = array[j]; } // 从左向右找第一个大于等于基准的数 while (i < j && array[i] < pivot) { i++; } if (i < j) { array[j--] = array[i]; } } array[i] = pivot; quickSort(array, start, i - 1); quickSort(array, i + 1, end); } return array; }\"]},\"416\":{\"h\":\"堆排序\",\"t\":[\"堆排序是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。\",\"构建初始最大堆\",\"循环将堆首位（最大值）与末位交换，固定这个最大值，然后再重新调整最大堆\",\"function heapSort(array) { const len = array.length; let j = len - 1; if (len < 2) return array; // 构建初始最大堆 for (let i = Math.floor(len / 2) - 1; i >= 0; i--) { buildHeap(array, i, len); } // 循环将堆首位（最大值）与末位交换，然后在重新调整最大堆 while (j > 0) { [array[0], array[j]] = [array[j], array[0]]; buildHeap(array, 0, j); j--; } return array; } function buildHeap(arr, i, len) { let current = arr[i]; let k = 2 * i + 1; //非叶子节点i的左叶子节点 while (k < len) { // 选出左右节点中较大值的索引 if (k + 1 < len && arr[k + 1] > arr[k]) { k++; } if (arr[k] > current) { arr[i] = arr[k]; i = k; // 用来存储最大值的索引 } else { break; } k = 2 * k + 1; } arr[i] = current; }\"]},\"417\":{\"h\":\"计数排序\",\"t\":[\"找出待排序的数组中最大和最小的元素，从而确定统计次数数组的大小：max - min + 1\",\"统计数组中每个值为i的元素出现的次数，存入数组C的第i-min项；\",\"按照顺序和次数取出数组的数据放入结果数组中\",\"function countSort(array) { if (array.length < 2) return array; const result = []; let [bias, max, min] = [0, array[0], array[0]]; // 确定最大最小值 array.forEach((item) => { if (item > max) max = item; if (item < min) min = item; }); bias = -min; let bucket = new Array(max - min + 1).fill(0); // 统计元素出现的次数并存入对应的位置 array.forEach((item) => { bucket[item + bias]++; }); bucket.forEach((item, index) => { while (item > 0) { result.push(index - bias); item--; } }); return result; }\"]},\"418\":{\"h\":\"桶排序\",\"t\":[\"计数排序的升级版（分治法+空间换时间）\",\"将数组进行分组，减少排序的数量，再对子数组进行排序，最后合并即可得到结果。\",\"image.png\",\"function bucketSort(arr, bucketSize = 3) { if (arr.lenght < 2) return arr; let maxValue = arr[0]; let minValue = arr[0]; let result = []; // 取出数组的最大值, 最小值 arr.forEach((num) => { maxValue = num > maxValue ? num : maxValue; minValue = num > minValue ? minValue : num; }); // 初始化桶的数量 const bucketCount = Math.floor((maxValue - minValue) / bucketSize) + 1; // 桶的数量 // 初始化桶的容器 // 注意这里的js语法，不能直接fill([])，因为生成的二维下标数组，是同一个地址 const buckets = new Array(bucketCount).fill(0).map(() => []); // 将数字按照映射的规则，放入桶中 arr.forEach((num) => { const bucketIndex = Math.floor((num - minValue) / bucketSize); buckets[bucketIndex].push(num); }); // 遍历每个桶内存储的数字 buckets.forEach((store) => { // 桶内只有1个数字或者空桶，或者都是重复数字，则直接合并到结果中 if (store.length <= 1 || bucketSize == 1) { result = result.concat(store); return; } // 递归，将桶内的数字，再进行一次划分到不同的桶中 const subSize = Math.floor(bucketSize / 2); // 减少桶内的数字区间，但必须是最少为1 const tmp = bucketSort(store, subSize <= 1 ? 1 : subSize); result = result.concat(tmp); }); return result; }\"]},\"419\":{\"h\":\"基数排序\",\"t\":[\"基数排序，一般是从右到左，对进制位上的数字进行比较，存入[0, 9]的10个桶中，进行排序。\",\"取得数组中的最大数，并取得位数\",\"arr为原始数组，从最低位开始取每个位组成radix数组\",\"对radix进行计数排序（利用计数排序适用于小范围数的特点）\",\"image.png\",\"function radixSort(arr) { let maxNum = arr[0]; // 求出最大的数字，用于确定最大进制位 arr.forEach((num) => { if (num > maxNum) { maxNum = num; } }); // 获取最大数字有几位 let maxDigitNum = 0; while (maxNum > 0) { maxNum = Math.floor(maxNum / 10); maxDigitNum++; } // 对每个进制位上的数进行排序 for (let i = 0; i < maxDigitNum; i++) { let buckets = new Array(10).fill(0).map(() => []); // 初始化10个桶 for (let k = 0; k < arr.length; k++) { const bucketIndex = getDigitNum(arr[k], i); // 获取当前进制位上的数字 buckets[bucketIndex].push(arr[k]); // 排序的数字放入对应桶中 } // 所有数字放入桶中后，现从0-9的顺序将桶中的数字取出 const res = []; buckets.forEach((store) => { store.forEach((num) => { res.push(num); // 注意这里，先存入桶中的数字，先取出，这样才能保持局部有序 }); }); arr = res; } return arr; function getDigitNum(num, digit) { return Math.floor((num / Math.pow(10, digit)) % 10); } }\"]},\"420\":{\"h\":\"模拟new\"},\"421\":{\"h\":\"代码\",\"t\":[\"function mynew(fn, ...args) { if (typeof fn !== 'function') { throw TypeError('fn must be a function'); } const obj = Object.create(fn.prototype); const res = fn.apply(obj, args); const isObject = typeof res === 'object' && res !== null; const isFuntion = typeof res === 'function'; return isObject || isFuntion ? res : obj; }\"]},\"422\":{\"h\":\"测试\",\"t\":[\"function Leon(name, age) { this.name = name; this.age = age; this.habit = 'Games'; } Leon.prototype.strength = 60; Leon.prototype.sayYourName = function () { console.log('I am ' + this.name); } // 调用myNew，实现继承 const person = myNew(Leon, 'leon', '27'); console.log(person.name); // leon console.log(person.habit); // Games console.log(person.strength);// 60 person.sayYourName(); // I am leon\"]},\"423\":{\"h\":\"模拟instanceof\"},\"424\":{\"h\":\"代码\",\"t\":[\"function myInstanceof(instance, constructor) { if (typeof instance !== 'object') { return false; } const prototype = constructor.prototype; let tmpPrototype = Object.getPrototypeOf(instance); while (true) { if (tmpPrototype === null) { return false; } if (tmpPrototype === prototype) { return true; } tmpPrototype = Object.getPrototypeOf(tmpPrototype); } }\"]},\"425\":{\"h\":\"测试\",\"t\":[\"const test = [] myInstanceof(test,Array) // true\"]},\"426\":{\"h\":\"模拟apply、call、bind\"},\"427\":{\"h\":\"一、模拟apply\"},\"428\":{\"h\":\"代码\",\"t\":[\"Function.prototype.apply = function (obj, ...args) { if (typeof this !== 'function') { throw new TypeError(this + 'is not a function'); } const bindThis = obj || globalThis; // 获取绑定对象 const fnArgs = args[0]; // 获取传递的参数数组 if (!fnArgs instanceof Array) { throw new TypeError('args must be array'); } const fn = Symbol('fn'); bindThis[fn] = this; // 将需要调用的函数挂载到绑定对象上 const result = bindThis[fn](...fnArgs); delete bindThis[fn]; return result; };\"]},\"429\":{\"h\":\"测试\",\"t\":[\"const obj = { name: 'zhangsan', }; function test(msg) { console.log(msg + this.name); } test.apply(obj, ['你好啊！']); // 你好啊！zhangsan\"]},\"430\":{\"h\":\"二、模拟call\",\"t\":[\"Function.prototype.myCall = function(obj,...args){ if (typeof this !== 'function') { throw new TypeError(this + 'is not a function'); } const fn = Symbol('fn'); obj[fn] = this; const res = obj[fn](...args); delete obj[fn]; return res; }\"]},\"431\":{\"h\":\"三、模拟bind\"},\"432\":{\"h\":\"代码\",\"t\":[\"Function.prototype.myBind = function (obj, ...args) { if (typeof this !== 'function') { throw new TypeError(this + 'is not a function'); } const fn = this; return function (...restArgs) { if (new.target) { return new fn(...args, ...restArgs); } else { return fn.apply(obj, [...args, ...restArgs]); } }; };\"]},\"433\":{\"h\":\"测试\",\"t\":[\"function test(a, b) { console.log(`${this} && ${a}:${b}`); } const obj = { name: 'zhangsan', }; const newFn = test.bind(obj, 'test'); newFn('原始bind'); // zhangsan && test:newFn const Fn = test.myBind(obj, 'test'); Fn('自定义bind'); // zhangsan && test:Fn const result = new newFn('通过new调用'); console.log(result); //test(){}\"]},\"434\":{\"h\":\"模拟数组遍历\"},\"435\":{\"h\":\"一、foreach\"},\"436\":{\"h\":\"代码\",\"t\":[\"Array.prototype.myForEach = function (callback, thisArg) { if (this === undefined || this === null) { throw new TypeError('Arrry is not undefined or null'); } if (typeof callback !== 'function') { throw new TypeError(callback + 'is not a function'); } const O = Object(this); const length = this.length >>> 0; let k = 0; while (k < length) { if (k in O) { callback.call(thisArg, O[k], k, O); } k++; } return undefined; };\"]},\"437\":{\"h\":\"二、reduce\"},\"438\":{\"h\":\"代码\",\"t\":[\"Array.prototype.myReduce = function (callback, initialValue) { if (this === undefined || this === null) { throw new TypeError('myReduce is called on null or undefined '); } if (typeof callback !== 'function') { throw new TypeError(callback + 'is not a function'); } const O = Object(this); const length = this.length >>> 0; let accumulator = initialValue; let k = 0; if (accumulator === undefined) { while (k < length && !(k in O)) { k++; } if (k >= length) { throw new TypeError('Reduce of empty array with no initial value'); } accumulator = O[k++]; } while (k < length) { if (k in O) { accumulator = callback.call(undefined, accumulator, O[k], O); } k++; } return accumulator; };\"]},\"439\":{\"h\":\"测试\",\"t\":[\"let arr = [1, 2, 3, 4, 5] let res = arr.myReduce((pre, cur, i, arr) => { console.log(pre, cur, i, arr) return pre + cur }, 10) console.log(res)//25\"]},\"440\":{\"h\":\"三、filter\"},\"441\":{\"h\":\"代码\",\"t\":[\"Array.prototype.myFilter = function (callback, thisArg) { if (this === undefined || this === null) { throw new TypeError('myFilter is called on undefined or null'); } if (typeof callback !== 'function') { throw new TypeError(callback + 'is not a function'); } const O = Object(this); const length = this.length >>> 0; let res = new Array(length); let k = 0; while (k < length) { if (k in O && callback(thisArg, O[k], k, O)) { res.push(O[k]); } k++; } return res; };\"]},\"442\":{\"h\":\"四、map\"},\"443\":{\"h\":\"代码\",\"t\":[\"Array.prototype.myMap = function (callback, thisArg) { if (this === undefined || this === null) { throw new TypeError('myFilter is called on undefined or null'); } if (typeof callback !== 'function') { throw new TypeError(callback + 'is not a function'); } const O = Object(this); const len = O.length>>>0; const A = new Array(len); let k = 0; while (k < len) { const pk = String(k); if (O.hasOwnProperty(pk)) { const kValue = O[pk]; A[pk] = callback.call(thisArg, kValue, k, O); } k++; } return A; };\"]},\"444\":{\"h\":\"类数组转数组\"},\"445\":{\"h\":\"一、Array.from\",\"t\":[\"Array.from(document.querySelectorAll('div'))\"]},\"446\":{\"h\":\"二、Array.prototype.slice.call()\",\"t\":[\"Array.prototype.slice.call(document.querySelectorAll('div'))\"]},\"447\":{\"h\":\"三、拓展运算符\",\"t\":[\"[...document.querySelectorAll('div')]\"]},\"448\":{\"h\":\"数组扁平化\"},\"449\":{\"h\":\"ES6-flat\",\"t\":[\"var arr = [1, 2, [3, 4, [5, 6]]]; console.log(arr.flat()); // [1, 2, 3, 4, [5, 6]] console.log(arr.flat(2)); // [1, 2, 3, 4, 5, 6] var arr = [1, 2, [3, 4, [5, 6, [7, 8]]]]; console.log(arr.flat(Infinity)); // [1, 2, 3, 4, 5, 6, 7, 8]\",\"使用 Infinity，可展开任意深度的嵌套数组\",\"在数组中有空项的时候，使用 flat 方法会将中的空项进行移除。\"]},\"450\":{\"h\":\"reduce(递归)\",\"t\":[\"function flattenDeep(arr){ return Array.isArray(arr) ? arr.reduce((acc, current) =>{ return [...acc, ...flattenDeep(current)] },[]) : [arr]; }\"]},\"451\":{\"h\":\"reduce模拟原生flat\",\"t\":[\"不传值时默认展开一维\",\"Array.prototype.myFlat = function (depth = 1) { return this.reduce((result, item) => { if (Array.isArray(item) && depth > 0) { result.push(...item.myFlat(depth - 1)); } else { result.push(item); } return result; }, []); };\"]},\"452\":{\"h\":\"模拟栈\",\"t\":[\"function flattenDeep(arr){ const stack = [...arr]; // 先平展复制到stack const result = []; while(stack.length){ // 取出末尾的值 const current = stack.pop(); if(Array.isArray(current)){ // 如果值是数组，平展后，重新推入stack stack.push(...current); }else{ // 末尾是普通值，则存入result result.unshift(current); } } return result; }\"]},\"453\":{\"h\":\"简单写法\",\"t\":[\"var arr = [1, [2, [3, 4]]]; function flatten(arr) { while (arr.some(item => Array.isArray(item))) { arr = [].concat(...arr); } return arr; }\"]},\"454\":{\"h\":\"数组去重\"},\"455\":{\"h\":\"ES6的Set去重\",\"t\":[\"适配范围广，效率一般，书写简单\",\"function unique(arr){ return [...new Set(arr)] // Array.from(new Set(arr)); }\"]},\"456\":{\"h\":\"循环遍历\",\"t\":[\"任意数组去重，适配范围广，效率低\",\"function unique(arr){ let result = [] arr.forEach((item)=>{ if(!result.includes(item)){ result.push(item) } }) return result }\",\"数字或字符串数组去重，效率高( 利用对象属性名的唯一性来保证不重复 )\",\"function unique(arr){ let result = {} arr.forEach((item)=>{ if(!result[item]){ result[item] = true } }) return result }\"]},\"457\":{\"h\":\"filter\",\"t\":[\"function unique(arr){ return arr.filter((element, index, array) => { return array.indexOf(element) == index; }) }\"]},\"458\":{\"h\":\"reduce\",\"t\":[\"function unique(arr){ // 先排序，如果重复，则上一个下标的内容一样 return arr.sort().reduce((acc, current) => { if(acc.length == 0 || acc[acc.length - 1] !== current){ acc.push(current); } return acc; }, []) }\",\"将acc初始赋值为一个空数组\"]},\"459\":{\"h\":\"防抖和节流\"},\"460\":{\"h\":\"一、防抖\",\"t\":[\"function debounce(fn, time) { let timeout = null; return function () { clearTimeout(timeout); timeout = setTimeout(() => { fn.apply(this, arguments); }, time); }; }\"]},\"461\":{\"h\":\"二、节流\",\"t\":[\"function throttle(fn, time) { let flag = false; return function () { if (flag === true) return; flag = true; setTimeout(() => { fn.apply(this, arguments); flag = false; }, time); }; }\"]},\"462\":{\"h\":\"柯里化\"},\"463\":{\"h\":\"一、柯里化\",\"t\":[\"function curry(fn, ...args) { return function (...inArgs) { const allArgs = [...args, ...inArgs]; if (allArgs.length > fn.length) { return fn(...allArgs); } else { return curry(fn, ...allArgs); } }; }\",\"本质上分为两个阶段：\",\"将所有传入的参数利用闭包储存到一个数组中。\",\"当完成 固定条件时 （这里指传入参数的数量大于等于函数的数量），执行 对应的操作 （执行传入的函数）\"]},\"464\":{\"h\":\"二、实现add(1)(2)(3)(4)\",\"t\":[\"function add(...args) { const _args = [...args]; function fn(...inArgs) { _args.push(...inArgs); return fn; } fn.toString = function () { return _args.reduce((acc, item) => acc + item); }; return fn; }\",\"将条件变为toString的自动调用，即与原始数据相加，对应操作变为将储存的所有参数相加。\"]},\"465\":{\"h\":\"实现继承\"},\"466\":{\"h\":\"一、圣杯模式\",\"t\":[\"function inherit(Child,Parent){ function F(){}; F.prototype = Parent.prototype; // 拿到父类原型的副本 Child.prototype = new F(); //改变子类构造函数的原型对象 Child.prototype.constructor = Child // 修正 } // 父类 function Parent(name){ this.name = name } Parent.prototype.setName = function(){ this.name = name } // 子类 function Child(name,price){ Parent.call(this, name); // 盗用父类的构造函数 this.price = price } inherit(Child, Parent); // 使用圣杯模式实现继承 // 测试 var child = new Child('a', 20); child.setName('b')\"]},\"467\":{\"h\":\"二、使用Object.create\",\"t\":[\"function Parent(name) { this.name = name; } function Child(name, age) { Parent.call(this, name); this.age = age; } Child.prototype = Object.create(Parent.prototype); Child.prototype.constructor = Child;\"]},\"468\":{\"h\":\"深浅拷贝\"},\"469\":{\"h\":\"一、浅拷贝\",\"t\":[\"浅拷贝，指的是创建新的数据，这个数据有着原始数据属性值的一份精确拷贝\",\"如果属性是基本类型，拷贝的就是基本类型的值。如果属性是引用类型，拷贝的就是内存地址\",\"即浅拷贝是拷贝一层，深层次的引用类型则共享内存地址\",\"function shallowClone(obj){ const newObj = {} for(let prop in obj){ if(obj.hasOwnProperty(prop)){ newObj[prop] = obj[prop]; } } return newObj; }\",\"在JavaScript中，存在浅拷贝的现象有：\",\"Object.assign\",\"Array.prototype.slice\",\"Array.prototype.concat()\",\"拓展运算符\"]},\"470\":{\"h\":\"二、深拷贝\"},\"471\":{\"h\":\"1. JSON.stringify()\",\"t\":[\"const obj2=JSON.parse(JSON.stringify(obj1));\",\"但是这种方式存在弊端，会忽略undefined、symbol和函数\",\"const obj = { name: 'A', name1: undefined, name3: function() {}, name4: Symbol('A') } const obj2 = JSON.parse(JSON.stringify(obj)); console.log(obj2); // {name: \\\"A\\\"}\"]},\"472\":{\"h\":\"2. 循环递归\",\"t\":[\"const deepClone = function (obj) { if (typeof obj !== 'object' || obj === null) { return obj; } let copyObj; if (Array.isArray(obj)) { copyObj = []; for (let i = 0; i < obj.length; ++i) { copyObj.push(deepClone(obj[i])); } } else if (obj instanceof Set) { copyObj = new Set([...obj]); } else if (obj instanceof Map) { copyObj = new Map([...obj]); } else { copyObj = {}; Reflect.ownKeys(obj).forEach((key) => { copyObj[key] = deepClone(obj[key]); }); } return copyObj; };\",\"在新版本的JavaScript引入了structuredClone()全局函数，可以用来完成深拷贝\",\"const a = { x: 1, y: { y1: 'a' }, z: new Set([1, 2]) }; const b = structuredClone(a); // a !== b, a.y !== b.y, a.z !== b.z\"]},\"473\":{\"h\":\"JSONP\"},\"474\":{\"h\":\"代码\",\"t\":[\"const jsonp = ({ url, params, callbackName }) => { const generateUrl = () => { let dataSrc = ''; for (const key in params) { if (Object.hasOwnProperty.call(params, key)) { dataSrc += `${key}=${params[key]}&`; } } dataSrc += `callback=${callbackName}`; }; return new Promise((resolve, reject) => { const script = document.createElement('script'); script.src = generateUrl(); document.body.appendChild(script); window[callbackName] = (data) => { resolve(data); document.removeChild(script); }; }); };\"]},\"475\":{\"h\":\"XHR\"},\"476\":{\"h\":\"代码\",\"t\":[\"function Ajax(url, method, data) { return new Promise((resolve, reject) => { const xhr = new XMLHttpRequest(); xhr.open(method, url, true); xhr.onload = function () { if (xhr.status >= 200 && xhr.status < 300) { resolve(xhr.responseText); } else { reject(xhr.statusText); } }; xhr.onerror = function () { reject(xhr.statusText); }; if (data) { xhr.setRequestHeader('Content-type', 'application/json;charset=UTF-8'); xhr.send(JSON.stringify(data)); } else { xhr.send(); } }); }\",\"// 使用示例 ajax('https://jsonplaceholder.typicode.com/posts/1', 'GET') .then(function (response) { console.log('Success:', response); }) .catch(function (error) { console.error('Error:', error); });\"]},\"477\":{\"h\":\"性能优化\"},\"478\":{\"h\":\"一、图片懒加载\",\"t\":[\"const imgs = document.getElementsByTagName('img'); const len = imgs.length; function lazyload() { // 视口高度 const viewHeight = document.documentElement.clientHeight || document.body.clientHeight; const scollTop = document.documentElement.scrollTop; for (let i = 0; i < len; i++) { const offsetHeight = imgs[i].offsetTop; if (offsetHeight < viewHeight + scollTop) { imgs[i].src = imgs[i].dataset.src; } } } window.addEventListener('scroll', throttle(lazyload, time));\"]},\"479\":{\"h\":\"二、滚动加载\",\"t\":[\"window.addEventListener('scroll', function () { const clientHeight = document.documentElement.clientHeight; const scrollTop = document.documentElement.scrollTop; const scrollHeight = document.documentElement.scrollHeight; if (clientHeight + scrollTop > scrollHeight) { // load more... } });\"]},\"480\":{\"h\":\"三、渲染大量数据不卡住页面\",\"t\":[\"setTimeout(() => { const total = 100000; const once = 30; const loopCount = Math.ceil(total / once); let countOfRender = 0; function add() { const ul = document.createElement('ul'); const fragment = document.createDocumentFragment(); for (let i = 0; i < once; i++) { const li = document.createElement('li'); li.innerHTML = Math.floor(Math.random * total); fragment.appendChild(li); } ul.appendChild(fragment); countOfRender += 1; loop(); } function loop() { if (countOfRender < loopCount) { window.requestAnimationFrame(add); } } loop(); }, 0);\"]},\"481\":{\"h\":\"模板渲染\"},\"482\":{\"h\":\"一、模板语法\",\"t\":[\"const a = { b: 123, c: '456', d: '789', }; const str = 'a{a.b}aa{a.c}aa {a.d}aaaa';\",\"将字符串中括号内的字符由对应的变量进行替换，没有对应的变量时显示原始字符串\",\"function parse(str, obj) { let res = ''; const len = str.length; let k = 0; let start = 0; let flag = false; while (k < len) { if (str[k] === '{') { start = k + 1; flag = true; } if (!flag) res += str[k]; if (str[k] === '}') { res += match(str.slice(start, k), obj); flag = false; } k++; } return res; } function match(str, obj) { const keys = str.split('.').slice(1); let k = 0; let O = obj; while (k < keys.length) { if (!O[keys[k]]) return `{${str}}`; O = O[keys[k]]; k++; } return O; } console.log(parse(str, a)); //a123aa456aa 789aaaa\"]},\"483\":{\"h\":\"二、虚拟dom转真实dom\",\"t\":[\"// { // tag, attrs, children; // } function render(vnode, container) { container.appendChild(_render(vnode)); } function _render(vnode) { if (typeof vnode === 'number' || typeof vnode === 'string') { vnode = String(vnode); return document.createTextNode(vnode); } const ele = document.createElement(vnode.tag); if (vnode.attrs) { Object.keys(vnode.attrs).forEach((key) => { ele.setAttribute(vnode.attrs[key]); }); } if (vnode.children) { vnode.children.forEach((child) => { _render(child, ele); }); } return ele; }\"]},\"484\":{\"h\":\"模拟函数重载\"},\"485\":{\"h\":\"定义\",\"t\":[\"函数重载是一个同名函数完成不同的功能，编译阶段通过函数参数个数、参数类型，函数的返回值来区分该调用哪一个函数。\",\"函数名相同，函数的参数不同(包括参数个数和参数类型)，根据参数的不同去执行不同的操作。\",\"JavaScript 中没有真正意义上的函数重载，但是我们可以通过一些方式对其进行模拟\"]},\"486\":{\"h\":\"arguments对象实现\",\"t\":[\"var arr = [1,3,4,6,7,7,7,45,3]; Array.prototype.finds = function() { var len = arguments.length; var that = this; // 通过传递参数的个数来进入不同的分支，调用不同的函数 if (len === 0) { console.log(`${len}参数`) return that; } else if (len === 1) { console.log(`${len}参数`) return that[arguments[0]] } else if (len === 2) { console.log(`${len}参数`) return that.slice(arguments[0], arguments[1]) } } console.log(arr.finds());// 0参数 [1, 3, 4, 6, 7, 7, 7, 45, 3] console.log(arr.finds(1)); // 1参数 3 console.log(arr.finds(1,2)); // 2参数 [3]\",\"缺点在于参数过多或需要分辨参数数据类型时，判断条件过于复杂，不利于维护和扩展\"]},\"487\":{\"h\":\"利用对象和闭包\",\"t\":[\"var objectTest = { arr: [1,3,4,6,7,7,7,45,3] } function addMethod(object, name, fn) { // 先把原来的object[name] 方法，保存在old中 var oldObject = object[name]; // 重新定义 object[name] 方法 object[name] = function() { // 如果函数需要的参数 和 实际传入的参数 的个数相同，就直接调用fn if (fn.length === arguments.length) return fn.apply(this, arguments) // 如果不相同,判断old 是不是函数，如果是就调用old，也就是刚才保存的 object[name] 方法 if (typeof oldObject === 'function') return oldObject.apply(this, arguments); } } // 给 objectTest 对象添加处理 没有参数 的方法 addMethod(objectTest, \\\"findTest\\\", find0); // 给 objectTest 对象添加处理 一个参数 的方法 addMethod(objectTest, \\\"findTest\\\", find1); // 给 objectTest 对象添加处理 两个参数 的方法 addMethod(objectTest, \\\"findTest\\\", find2); function find0() { return this.arr; } function find1(idx) { return this.arr[idx]; } function find2(st, ed) { return this.arr.slice(st, ed); } console.dir(objectTest.findTest) // 图1 console.log(objectTest.findTest()) // (9) [1, 3, 4, 6, 7, 7, 7, 45, 3] console.log(objectTest.findTest(4)) // 7 console.log(objectTest.findTest(1,4)) // (3) [3, 4, 6] console.log(arr.findTest(1,4,7)) // undefined\",\"addMethod中为object添加调用函数，其中引用传入的重写函数fn，创建闭包。\",\"上面两种方式都是通过判断 参数的个数 ，根据不同的个数，执行不同的操作\"]},\"488\":{\"h\":\"可选参数实现\",\"t\":[\"var arr = [1, 3, 4, 6, 7, 7, 7, 45, 3]; function disposeArr(num1 = null, num2 = null, status = null) { num1 = num1; num2 = num2; status = status; if (typeof status === 'string' && status === 'add') return num1 + num2; if (num2 !== null) return arr.slice(num1, num2); if (num1 !== null) return arr[num1]; if (!num1 && !num2) return arr; } console.log(disposeArr()); // (9) [1, 3, 4, 6, 7, 7, 7, 45, 3] console.log(disposeArr(4)); // 7 console.log(disposeArr(1, 4)); // (3) [3, 4, 6] console.log(disposeArr(21, 42, 'add')); // 63\"]},\"489\":{\"h\":\"实现一个repeat方法\"},\"490\":{\"h\":\"一、题意\",\"t\":[\"使用JS实现一个repeat方法\",\"function repeat (func, times, wait) { //... } const repeatFunc = repeat(alert, 4, 3000);\",\"调用这个 repeatedFunc(\\\"hellworld\\\")，会alert4次 helloworld, 每次间隔3秒\",\"const repeatedFunc = repeat(alert, 4, 3000) repeatedFunc(\\\"hellworld\\\")\"]},\"491\":{\"h\":\"二、解法\",\"t\":[\"解答此题的关键，在于使用await语法，结合event loop的机制，对执行语句进行阻塞。 如果单单靠setTimeout，是无法做到每次间隔3秒的要求。\",\"function repeat (func, times, wait) { return async (word) => { for(let i = 0; i < times; i++){ await sleep(wait); func(word); } } } function sleep(time){ return new Promise(resolve => { setTimeout(() => { resolve(); }, time); }); }\"]},\"492\":{\"h\":\"URL拆解问题\"},\"493\":{\"h\":\"题目一\",\"t\":[\"实现一个 parseParem 函数，将 url 转化为指定结果\",\"输入：url = 'http://www.domain.com/?user=anonymous&id=123&id=456&city=%E5%8C%97%E4%BA%AC&enabled'\",\"输出： { user:'anonymous', id:[123,456],// 重复出现的 key 要组装成数组，能被转成数字的就转成数字类型 city:'北京',// 中文需解码 enabled: true // 未指定值的 key 与约定为 true }\",\"const parseParem = (url) => { const arr = url.split('?')[1].split('&'); const res = {}; arr.forEach((e) => { let key = e.split('=')[0], value = e.split('=')[1]; if (value === undefined) { res[key] = true; } else { if (key in res) { Array.isArray(res[key]) ? res[key].push(value) : res[key] = [res[key]].concat(value); } else { res[key] = decodeURI(value) } } }) return res; }\"]},\"494\":{\"h\":\"题目二\",\"t\":[\"实现一个函数，可以对 url 中的 query 部分做拆解，返回一个 key: value 形式的 object\",\"--- 实例 ---\",\"输入：'http://sample.com/?a=1&e&b=2&c=xx&d#hash'\",\"输出：{a: 1, b: 2, c: 'xx', d: ''} \",\"function getQueryObj(url) { // TODO let arr = url.split('?')[1].split('#')[0].split('&'); const res = {}; arr.forEach(e => { const [key, value] = e.split('='); if (!value) { res[key] = ''; } else { res[key] = value; } }) return res; }\"]},\"495\":{\"h\":\"实现下载图片功能\"},\"496\":{\"h\":\"代码\",\"t\":[\"浏览器的下载行为需要满足一些安全性要求。其中之一是下载的源文件必须与当前页面的域名相同，否则浏览器可能会阻止自动下载操作，而是将其视为普通链接并进行页面跳转。\",\"function downloadIamge(src, imgName) { let image = new Image(); image.src = src; image.setAttribute('crossOrigin', 'anonymous'); image.onload = function () { let c = document.createElement('canvas'); c.width = image.width; c.height = image.height; c.getContext('2d').drawImage(image, 0, 0, image.width, image.height); let a = document.createElement('a'); a.download = imgName; a.href = c.toDataURL('image/png'); a.click(); }; }\"]},\"497\":{\"h\":\"并发控制\"},\"498\":{\"h\":\"类的实现\",\"t\":[\"class Scheduler { constructor() { this.queue = []; this.maxCount = 2; this.runCount = 0; } add(task) { this.queue.push(task); } taskStart() { for (let i = 0; i < this.maxCount; i++) { this.request(); } } request() { if (this.queue?.length === 0 || this.runCount > this.maxCount) return; this.runCount++; this.queue .shift()() .then(() => { this.runCount--; this.request(); }); } } const timeout = (time) => new Promise((resolve) => { setTimeout(resolve, time); }); const scheduler = new Scheduler(); const addTask = (time, order) => { scheduler.add(() => timeout(time).then(() => console.log(order))); }; addTask(1000, '1'); addTask(500, '2'); addTask(300, '3'); addTask(400, '4'); scheduler.taskStart(); // 2 3 1 4\"]},\"499\":{\"h\":\"请求的并发控制\",\"t\":[\"function concurRequest(urls, maxNum) { if (urls.length === 0) return Promise.resolve([]); return new Promise((resolve) => { let index = 0; // 指向下一次请求的url对应的下标 const result = []; //存储所有请求的结果 let count = 0; async function _request() { const i = index; const url = urls[index]; index++; try { const resp = await fetch(url); result[i] = resp; } catch (error) { result[i] = error; } finally { count++; if (count === urls.length) { resolve(result); } if (index < urls.length) { _request(); } } } for (let i = 0; i < Math.min(urls.length, maxNum); i++) { _request(); } }); }\"]},\"500\":{\"h\":\"ip是否处于cidr范围\"},\"501\":{\"h\":\"代码实现\",\"t\":[\"/** 将IP地址转换为一个32位的二进制字符串*/ function ipToBinary(ip) { return ip .split('.') .map(Number) .map((num) => num.toString(2).padStart(8, '0')) .join(''); } /** 检查给定的IP是否在CIDR范围内 */ function isIpInCidrRange(ip, cidr) { const [range, cidrMask] = cidr.split('/'); const ipBinary = ipToBinary(ip); const rangeBinary = ipToBinary(range); const maskLength = parseInt(cidrMask, 10); // 比较前缀是否相同 return ipBinary.slice(0, maskLength) === rangeBinary.slice(0, maskLength); } // 测试函数 const ipAddress = '100.1.2.0/23'; const cidrRange = '100.1.1.2'; console.log(isIpInCidrRange(ipAddress, cidrRange));\"]},\"502\":{\"h\":\"解决方案\"},\"503\":{\"h\":\"一、页面死循环卡死时如何上报错误\"},\"504\":{\"h\":\"1. 设置最大执行时间限制\",\"t\":[\"在死循环代码周围设置一个定时器，如果循环超过设定的时间仍未完成，可以抛出一个自定义的异常，然后在try-catch块中捕获该异常。\",\"let counter = 0; const maxExecutionTime = 1000; // 设置最大执行时间为1秒 try { const timer = setTimeout(() => { clearTimeout(timer); throw new Error('Execution time exceeded'); }, maxExecutionTime); // 页面的js逻辑 clearTimeout(timer); } catch (error) { // 处理异常 console.error(error); }\"]},\"505\":{\"h\":\"2. 心跳检测\",\"t\":[\"在死循环代码中插入一个定时器，定时发送请求作为心跳检测，如果超过预定时间没有收到响应，就判断页面卡死，并进行错误上报。\",\"// 定时发送请求作为心跳检测 setInterval(function() { // 发送一个请求，如Ajax请求或者通过图片请求来模拟心跳 // 如果超过预定时间没有收到响应，即可判断页面卡死 }, timeout);\"]},\"506\":{\"h\":\"二、中间层方案\"},\"507\":{\"h\":\"1.1 Node作为中间层模式\",\"t\":[\"以Node作为中间层，当客户端打开一个网站时，先请求到node服务器这一层，通过node服务器转发请求到后端的服务器，获取数据，然后返给node的模板引擎，根据视图模板渲染好模板字符串页面，再返回给客户端，直接展示页面，如图：\",\"img\",\"在前后端分离的天然选择下，node中间层可以承担更多的责任。\",\"代理：在开发环境下，我们可以利用代理来，解决最常见的跨域问题；在线上环境下，我们可以利用代理，转发请求到多个服务端。\",\"缓存：缓存其实是更靠近前端的需求，用户的动作触发数据的更新，node中间层可以直接处理一部分缓存需求。\",\"限流：node中间层，可以针对接口或者路由做响应的限流。\",\"日志：相比其他服务端语言，node中间层的日志记录，能更方便快捷的定位问题（是在浏览器端还是服务端）。\",\"监控：擅长高并发的请求处理，做监控也是合适的选项。\",\"鉴权：有一个中间层去鉴权，也是一种单一职责的实现。\",\"路由：前端更需要掌握页面路由的权限和逻辑。\",\"服务端渲染：node中间层的解决方案更灵活，比如SSR、模板直出、利用一些JS库做预渲染等等。\"]},\"508\":{\"h\":\"1.2 负载均衡器-Nginx\",\"t\":[\"Nginx是一个高性能的WEB服务器和反向代理服务器，最常用的软件负载均衡器。\",\"当访问量比较大时，频繁的请求，会给服务带来很大压力，通过负载均衡、分流，减轻服务器的压力；另一方面，网站部署在多台服务器，当某台服务器故障的时候，可以马上切换到其它服务器，还能保证网站能正常访问，这就是负载均衡的优势。\",\"img\"]},\"509\":{\"h\":\"三、前端鉴权方案\",\"t\":[\"一文教你搞定所有前端鉴权与后端鉴权方案 - 掘金 (juejin.cn)\"]},\"510\":{\"h\":\"四、扫码登录方案\",\"t\":[\"微信扫码登录背后的实现原理？ - 掘金 (juejin.cn)\"]},\"511\":{\"h\":\"五、首屏性能提升方案\",\"t\":[\"性能优化之首屏加载🚀 - 掘金 (juejin.cn)\"]},\"512\":{\"h\":\"六、长列表无限滚动方案\",\"t\":[\"useVirtualList\",\"使用IntersectionObserver\"]},\"513\":{\"h\":\"css基本规则\",\"t\":[\"提示\",\"提示实践中优先外部样式表、平时练习可以使用内部样式表<style></style>\"]},\"514\":{\"h\":\"一、 分类\",\"t\":[\"css 的基本语法分为两部分： 选择器 和 声明块 。\",\"选择器：通过选择器可以选中页面中的指定元素，比如 p 的作用就是选中页面中所有的 p 元素\",\"声明块：通过声明块来指定要为元素设置的样式 \",\"声明块由一个一个的声明组成\",\"声明是一个名值对结构，一个样式名对应一个样式值，名和值之间以:连接，以;结尾\"]},\"515\":{\"h\":\"二、 选择器\",\"t\":[\"CSS 选择器是 CSS 规则的第一部分。它是元素和其他部分组合起来告诉浏览器哪个 HTML 元素应当是被选为应用规则中 CSS 属性值的方式。（ 给“谁”上样式 ）\"]},\"516\":{\"h\":\"1. 常用选择器\",\"t\":[\"元素（标签）选择器\",\"作用：根据标签名来选中指定的元素\",\"语法：标签名{}\",\"例子：p{}、h1{}、div{}\",\"id 选择器\",\"作用：根据元素的 id 属性值选中一个元素\",\"语法：#id 属性值{}\",\"例子：#box{} #red{} \",\"类选择器\",\"作用：根据元素的 class 属性值选中一组元素\",\"语法：.class 属性值\",\"例子：.abc{} .circle{}\",\"通配选择器\",\"作用：选中页面中的所有元素\",\"语法: *\"]},\"517\":{\"h\":\"2. 复合选择器\",\"t\":[\"交集选择器\",\"作用：选中同时符合多个条件的元素\",\"语法：选择器 1 选择器 2 选择器 3 选择器 n{}\",\"例子：div#red{}\",\"交集选择器中如果有元素选择器，必须使用元素选择器开头\",\"各选择器之间没有空格\",\"选择器分组（并集选择器）\",\"作用：同时选择多个选择器对应的元素\",\"语法：选择器 1,选择器 2,选择器 3,选择器 n{}\",\"例子：#b1,.p1,h1,span,div.red{}\"]},\"518\":{\"h\":\"3. 关系选择器\",\"t\":[\"子元素选择器\",\"作用：选中指定父元素的指定子元素\",\"语法：父元素 > 子元素\",\"例子：div.box > span\",\"后代元素选择器\",\"作用：选中指定元素内的指定后代元素\",\"语法：祖先 后代\",\"例子：div span\",\"父子元素之前存在空格\",\"兄弟元素选择器\",\"选择后一个兄弟元素：前一个 + 下一个\",\"p + span\",\"选择后边所有的兄弟元素：兄 ~ 弟\",\"p ~ span\"]},\"519\":{\"h\":\"4. 属性选择器\",\"t\":[\"语法：[属性名] 选择含有指定属性的元素\",\"[属性名=属性值] 选择含有指定属性和属性值的元素\",\"[属性名^=属性值] 选择属性值以指定值开头的元素\",\"[属性名$=属性值] 选择属性值以指定值结尾的元素\",\"[属性名*=属性值] 选择属性值中含有某值的元素的元素\",\"[属性名~=属性值] 选择属性值中含有某值的元素 \",\"用来选中多个类属性中含有某个类属性的标签\",\"对应示例：\",\"p[title] 选中所有包含 title 属性的 p 标签\",\"p[title=abc] 选中 title 属性为 abc 的 p 标签\",\"p[title^=abc] 选中 title 属性值以 abc 开头的 p 标签（<p title=\\\"abcd\\\"></p>）\",\"p[title$=abc] 选中 title 属性值以 abc 结尾的 p 标签（<p title=\\\"dabc\\\"></p>）\",\"p[title*=abc] 选中 title 属性值包含 abc 的 p 标签（<p title=\\\"1abc1\\\"></p>）\",\"p[title~=abc] 选中 title 属性值中以空格为间隔的值的标签 （<p title=\\\"abc 123\\\"></p>）\"]},\"520\":{\"h\":\"5. 伪类\",\"t\":[\"伪类用来描述一个元素的 特殊状态 ，比如：第一个子元素、被点击的元素、鼠标移入的元素等。附上了伪类的元素被定义为锚元素。\",\"一般情况伪类下都是使用 : 开头\",\":root 表示文档的根元素。在 HTML 中这通常是 <html> 元素\",\":first-child 一组兄弟元素中的第一个元素\",\":last-child 一组兄弟元素中的最后一个元素\",\":nth-child(n) 一组兄弟元素中的第 n 个元素\",\"参数为 2n 或者 even 时表示选中偶数位的元素\",\"参数为 2n+1 或者 odd 时表示选中奇数位的元素\",\"此顺序表示所有的兄弟元素第 n 个\",\":first-of-type、:last-of-type、:nth-of-type()\",\"<div class=\\\"container\\\"> <p>p标签：1231231231</p> <div>div标签：123123</div> <p>p标签：1231231231</p> <p>p标签：1231231231</p> <p>p标签：1231231231</p> <p>p标签：1231231231</p> </div>\",\"<style> .container p:nth-child(3) { background-color: pink; } </style>\",\"image-20230818170454204\",\"此时如果 n 为 2，则不会有任何样式生效。\",\"<style> .container p:nth-of-type(3) { background-color: pink; } </style>\",\"image-20230818170655253\",\":is() 匹配与提供的列表中的任何选择器匹配的任何元素\",\":not() 否定伪类，将符合条件的元素从选择器中去除\",\":has() 该关系伪类表示与任何一个与锚定的元素的相对选择器相匹配（如果有的话）的元素。\",\"a 元素的伪类\",\":link 用来表示没访问过的链接（正常的链接）\",\":visited 用来表示访问过的链接\",\":hover 用来表示鼠标移入的状态\",\":active 用来表示鼠标点击的状态\"]},\"521\":{\"h\":\"6. 伪元素选择器\",\"t\":[\"伪元素是一个附加至选择器末的关键词，允许你对 被选择元素的特定部分 修改样式。\",\"伪元素一般使用 :: 开头\",\"::first-letter 表示第一个字母\",\"::first-line 表示第一行\",\"::selection 表示选中的内容\",\"::before 元素的开始\",\"::after 元素的最后\",\"提示\",\"before 和 after 必须结合 content 属性来使用\",\"更多伪类/元素的用法请参考(CSS 伪类)\"]},\"522\":{\"h\":\"7. 层叠规则（选择器优先级）\",\"t\":[\"当我们通过不同的选择器，选中相同的元素，并且为相同的样式设置不同的值时，此时就发生了样式冲突。\",\"层叠：解决声名冲突的过程，浏览器自动处理 （权重计算）。\"]},\"523\":{\"h\":\"(1). 比较重要性\",\"t\":[\"作者样式表中的!important样式 > 作者样式表中样式 > 浏览器默认样式\"]},\"524\":{\"h\":\"(2). 比较特殊性\",\"t\":[\"选择器的权重\",\"选择器\",\"优先级\",\"内联样式（直接将 css 代码放在标签内）\",\"1,0,0,0\",\"id 选择器\",\"0,1,0,0\",\"类和伪类、属性选择器\",\"0,0,1,0\",\"元素、伪元素选择器\",\"0,0,0,1\",\"通配选择器\",\"0,0,0,0\",\"继承的样式\",\"没有优先级\",\"比较优先级时，需要将所有选择器的优先级进行相加计算，最后优先级越高，则越优先显示（分组选择器是单独计算的），选择器的累加不会超过其最大的数量级，类选择器再高也不会超过 id 选择器，如果优先级计算后相同，此时则优先使用靠下的样式。\",\"可以在某一个样式的后边添加 !important ，则此时该样式会获取到最高的优先级，甚至超过内联样式，但是实际开发中不建议使用。\"]},\"525\":{\"h\":\"(3). 比较源次序\",\"t\":[\"代码书写靠后的胜出\"]},\"526\":{\"h\":\"三、 声明块\"},\"527\":{\"h\":\"1. 样式的继承\",\"t\":[\"我们在为一个元素设置样式时同时也会应用到它的后代元素上。\",\"继承是发生在祖先和后代之间的\",\"继承的设计是为了方便我们的开发，利用继承我们可以将 一些通用的样式统一设置到共同的祖先元素上 ，这样只需设置一次即可让所有的元素都具有该样式。\",\"通常和文字内容相关的属性都能被继承。\",\"注意\",\"并不是所有的样式都会被继承，比如背景相关的，布局相关等的这些样式都不会被继承。具体哪些样式会被继承请查阅 css 手册内容\"]},\"528\":{\"h\":\"2. 属性值的计算过程\",\"t\":[\"界面中一个元素一个元素依次渲染，顺序按照页面文档的树形目录结构进行。\",\"渲染每个元素的前提条件: 该元素的所有 CSS 属性必须有值\",\"一个元素，从所有属性都没有值，到所有属性都有值，这个计算过程，叫做 属性值计算过程 。\"]},\"529\":{\"h\":\"(1). 确定声名值\",\"t\":[\"参考样式表中没有冲突的声名，作为 CSS 属性的值（作者样式表和默认样式表）\"]},\"530\":{\"h\":\"(2). 层叠冲突\",\"t\":[\"对样式表有冲突的声名使用层叠规则，确定 CSS 的属性值\"]},\"531\":{\"h\":\"(3). 使用继承\",\"t\":[\"对仍然没有值的属性，若可以继承，则继承父元素的值。\"]},\"532\":{\"h\":\"(4). 使用默认值\",\"t\":[\"对仍然没有值的属性，使用默认值。\",\"特殊的两个 CSS 取值：\",\"inherit：手动（强制）继承，将父元素的值取出应用到该元素\",\"initial：初始值，将该属性设置为默认值\"]},\"533\":{\"h\":\"(5). a 元素为什么不继承父元素的颜色\",\"t\":[\"<div class=\\\"container\\\"> <a href=\\\"\\\">hello</a> <p>world</p> </div>\",\".container { color: red; }\",\"image-20221218172839309\",\"在浏览器的默认样式表中对 a 的 color 属性进行了设置，所以在第一步时就直接确定了值，不会等到继承\"]},\"534\":{\"h\":\"3. 长度单位\",\"t\":[\"绝对长度单位\",\"像素：屏幕（显示器）实际上是由一个一个的小方块构成的，不同屏幕的像素大小不同，像素块越小的屏幕显示的效果越清晰。 所以同样的200px在不同的设备下显示效果并不相同。\",\"相对长度单位\",\"百分比：可以将属性值设置为相对于其父元素属性的百分比，这样可以使子元素跟随父元素的改变而改变。\",\"em：em是相对于元素的字体大小（父元素）来计算的，1em = 1font-size（默认为16）；em会根据字体大小的改变而改变\",\"rem：rem是相对于根元素(html)的字体大小来计算。（在进行手机端开发时常用）\",\"vw：视口宽度的 1%\",\"vh：视口高度的 1%\"]},\"535\":{\"h\":\"4. 颜色单位\",\"t\":[\"颜色名：在 CSS 中可以直接使用颜色名来设置各种颜色，比如：red、orange、yellow、blue、green ... ...，但是这种方式不太方便，也不太灵活。\",\"RGB 值：RGB 通过三种颜色的不同浓度来调配出不同的颜色，每一种颜色的范围在 0 - 255 (0% - 100%) 之间；语法：RGB(红色,绿色,蓝色)\",\"RGBA：在 rgb 的基础上增加了一个 a 表示不透明度，1 表示完全不透明 0 表示完全透明 .5 半透明。\",\"十六进制的 RGB 值：颜色浓度通过 00-ff 表示，语法：#红色绿色蓝色\",\"如果颜色两位两位重复可以进行简写，eg：#aabbcc --> #abc\",\"HSL 值 HSLA 值（不常用） \",\"H 色相(0 - 360)（圆环)\",\"S 饱和度，颜色的浓度 0% - 100%\",\"L 亮度，颜色的亮度 0% - 100%\"]},\"536\":{\"c\":[\"前端\"]},\"537\":{\"c\":[\"CSS\",\"层叠\",\"继承\"]},\"538\":{\"h\":\"盒模型\"},\"539\":{\"h\":\"一、 标准流（normal flow）\",\"t\":[\"在 CSS 中，\\\"normal flow\\\"（标准流）是指元素在文档中按照其出现的顺序自然排列的布局方式。它是 CSS 布局模型中的一种默认布局方式，也是大多数元素的默认行为。\",\"在正常流布局中，元素按照其在 HTML 文档中的出现顺序从上到下排列，每个元素占据一定的空间。元素的位置由其前面的元素决定，可以通过调整元素的外边距、内边距、宽度、高度等属性来影响其布局位置。\",\"包含块的概念\",\"每个盒子都有它的包含块，包含块决定了盒子的排列区域\",\"绝大部分情况下：盒子的包含块，为其 父元素的内容盒\",\"当盒子开启 绝对定位 以后，它的包含块变为距它 最近的开启了定位的父元素\",\"当盒子开启 固定定位 时，它的包含块为 视口\"]},\"540\":{\"h\":\"1. 元素在标准流中的特点\",\"t\":[\"块盒（block）\",\"块盒会在页面中 独占一行 (自上向下垂直排列)\",\"默认总宽度为 包含块的宽度 （width:auto）\",\"默认高度是被内容撑开（子元素）\",\"内边距（padding）, 外边距（margin）和 边框（border）会将其他元素从当前盒子周围“推开”\",\"行盒（inline）\",\"行盒 不会独占页面的一行 ，只占自身的大小\",\"行内元素在页面中自左向右水平排列，如果一行中不能容纳下所有的行内元素，则元素会换到第二行继续自左向右排列（与书写习惯一致）\",\"行内元素的 默认宽度和高度都是被内容撑开， 宽高设置不生效\",\"垂直方向的内边距、外边距以及边框会被应用但是 不会 把其他处于 inline 状态的盒子推开。\",\"水平方向的内边距、外边距以及边框会被应用且 会 把其他处于 inline 状态的盒子推开。\",\"行块盒（inline-block）\",\"行盒特点\",\"行块盒 不会独占页面的一行\",\"行块盒的默认宽度和高度都是被内容撑开\",\"块盒特点\",\"可以设置宽高\",\"内边距（padding）, 外边距（margin）和 边框（border）会将其他元素从当前盒子周围“推开”\"]},\"541\":{\"h\":\"2. 元素脱离标准流的特点\",\"t\":[\"块盒：\",\"块盒不再独占页面的一行\",\"脱离文档流以后，块盒的宽度和高度默认都被内容撑开\",\"行盒：\",\"行盒脱离文档流以后会变成块盒，特点和块盒一样\",\"脱离文档流以后，不需要再区分块和行内了，即两者皆具有如下特点：\",\"可以随意设置宽高，宽高默认由内容决定\",\"大部分元素在脱标后都会转换成block类型，但元素脱离标准流之后不受其约束，不再给父元素汇报宽高数据，也就是不能将父元素撑开。\"]},\"542\":{\"h\":\"二、 盒模型（box model）\",\"t\":[\"完整的 CSS 盒模型应用于块盒，行盒只使用盒模型中定义的部分内容。CSS 将页面中的所有元素都设置为了一个矩形的盒子，将元素设置为矩形的盒子后，对页面的布局就变成将不同的盒子摆放到不同的位置，每一个盒子都由以下几个部分组成：\",\"内容区（content）、内边距（padding）、边框（border）、外边距（margin）。\",\"盒模型\"]},\"543\":{\"h\":\"1. 内容区（content）\",\"t\":[\"元素中所有的子元素和文本内容都在内容区中排列\",\"内容区的大小由width 和 height两个属性来设置\",\"width 设置内容区的宽度，height 设置内容区的高度\",\"width、包括下面的padding和margin的属性值可以设置为百分比形式\",\"以上所有的百分比都是相对于 包含块的宽度 进行设置的 (包括设置padding-top和margin-top)\",\"height的百分比设置\",\"当包含块的高度设置为 auto，即它的高度取决于子元素的高度，这时高度的百分比设置无效\",\"当包含块的高度不依赖子元素的高度，则百分比设置相对于包含块的高度进行设置\"]},\"544\":{\"h\":\"2. 边框（border）\",\"t\":[\"边框属于盒子边缘，边框里边属于盒子内部，出了边框则属于盒子的外部\",\"边框的大小会影响到整个盒子的大小\",\"要设置边框，需要至少设置三个样式：边框的宽度（border-width）、边框的颜色（border-color）、边框的样式 （border-style）。这三种样式都可以用来指定四个方向的边框：\",\"四个值：上 右 下 左(顺时针)\",\"三个值：上 左右 下\",\"两个值：上下 左右\",\"一个值：上下左右\",\"当然一般我们也不会这么蛋疼，都是四个方向统一设置，故可以通过简写属性同时设置边框的所有相关样式，且没有顺序要求。\",\"eg：border: 10px red solid;\"]},\"545\":{\"h\":\"3. 内边距（padding）\",\"t\":[\"内容区和边框之间的距离是内边距（不能为负），通常用于将内容推离边框\",\"一共有四个方向的内边距：padding-top、padding-right、padding-bottom、padding-left\",\"padding 内边距的简写属性，可以同时指定四个方向的内边距，规则和border-width 一样\",\"内边距的设置会影响到盒子的大小\",\"内容区的背景颜色会延伸到内边距上\",\"提示\",\"一个盒子可见框的大小，由内容区、内边距和边框共同决定，所以在计算盒子大小时，需要将这三个区域加到一起计算。\"]},\"546\":{\"h\":\"4. 外边距（margin）\",\"t\":[\"外边距不会影响盒子可见框的大小，但是会影响盒子的位置（把其他元素从盒子旁边推开）\",\"一共有四个方向的外边距：margin-top、margin-right、margin-bottom、margin-left\",\"margin的简写属性， 可以同时设置四个方向的外边距 ，用法和padding一样\",\"元素在页面中是按照自左向右的顺序排列的，所以默认情况下如果我们设置的 左和上外边距则会移动元素自身，而设置下和右外边距会移动其他元素 。\",\"除此之外 margin 还有两个简写属性margin-block和margin-inline\",\"margin-block 定义了元素的逻辑块首和块末外边距\",\"margin-inline 定义了元素的逻辑行首和行末外边距\",\".inline p { margin: 0; margin-inline: 20px 40px; background-color: tan; } .block p { margin: 0; margin-block: 20px 40px; background-color: tan; } .verticalExample { writing-mode: vertical-rl; }\",\"提示\",\"默认情况下设置margin-right不会产生任何效果( 默认情况它总是被浏览器所修改的值 )\"]},\"547\":{\"h\":\"5. 盒子尺寸\",\"t\":[\"默认情况下，盒子可见框的大小由 内容区、内边距和边框 共同决定，我们可以使用box-sizing 来设置盒子尺寸的计算方式（设置 width 和 height 的作用）\",\"content-box 默认值，宽度和高度用来设置 内容区 的大小\",\"border-box 宽度和高度用来设置 整个盒子可见框 的大小 \",\"此时width和 height指的是内容区、内边距和边框的总大小\"]},\"548\":{\"h\":\"6. 盒模型的显示\",\"t\":[\"display 属性 用于设置元素显示的类型（display: block;），可以分为外部表现和内部表现，外部类型设置元素如何参与标准流布局；内部类型设置子元素的布局。\",\"外部表现：\",\"inline 将元素设置为行盒\",\"block 将元素设置为块盒\",\"浏览器支持双值语法(css3)，当仅发现外部值时，例如当指定 display: block 或 display: inline，其将内部值设置为 flow。这种行为符合预期；例如，当指定一个元素是块盒后，一般来说我们期望该元素的内部元素参与正常的流布局。\",\"内部表现：\",\"flow 该元素使用流式布局（块和内联布局）来排布它的内容\",\"flow-root 该元素生成一个块级元素盒，其会建立一个新的 BFC，定义格式化上下文的根元素。\",\"inline-block 将元素设置为行内块元素 （既可以设置宽度和高度又不会独占一行）\",\"table 该元素的行为类似于 HTML 中的<table>元素。它定义了一个块级别的盒子\",\"flex 该元素的行为类似块级元素并且根据弹性盒模型布局它的内容。\",\"grid 该元素的行为类似块级元素并且根据网格模型布局它的内容\",\"当仅发现内部值时，例如当指定 display: flex 或 display: grid，其将外部值设置为 block。这种行为符合预期；例如，当指定一个元素是 display: grid，一般来说我们希望整个元素在标准流中表现为一个块盒\",\"基于 css3 的双值语法兼容性还存在问题，所以一般情况下我们使用 css2 中单关键字的预组合的语法：\",\"inline-block 等同于 inline flow-root （所以这种方式可以为元素开启一个新的 BFC）\",\"inline-table 等同于 inline table\",\"inline-flex 等同于 inline flex\",\"inline-grid 等同于 inline grid\",\"none 元素不在页面中显示， 不占据页面位置\",\"visibility ：显示或隐藏元素而不更改文档的布局（visibility: hidden;）\",\"visible 默认值，元素在页面中正常显示\",\"hidden 元素在页面中隐藏不显示，但是 依然占据页面的位置\",\"collapse 对于<table> 行、列、列组和行组，与 display: none 用于表格的行/列上的效果相当；对于其他元素，collapse 被视为与 hidden 相同\"]},\"549\":{\"c\":[\"前端\"]},\"550\":{\"c\":[\"盒模型\",\"文档流\",\"CSS\"]},\"551\":{\"h\":\"css布局\"},\"552\":{\"h\":\"一、常规流布局\",\"t\":[\"常规流布局（在布局介绍里提到过）是一套用于在浏览器视口内组织元素如何放置的系统。默认地，块级元素按照基于其父元素的书写模式（默认值：horizontal-tb）的块流动方向（block flow direction）放置。每个块级元素会在上一个元素下面另起一行，它们会以指定的外边距分隔。以英语为例（或者其他水平书写、自上而下的书写模式中），块级元素是垂直组织的。\",\"行级（inline）元素的表现有所不同。它们不会另起一行；只要在其父级块级元素的宽度内有足够的空间，它们与其他内联元素、相邻（或换行）的文本内容被安排在同一行。如果空间不够，溢出的内容将下移到新的一行。\",\"如果两个垂直相邻的元素都设置了外边距并且两个外边距相接触，那么更大的外边距会被保留，小的则会消失——这被称为外边距折叠。外边距折叠仅与 垂直方向 有关。\"]},\"553\":{\"h\":\"1. 盒子的水平布局\",\"t\":[\"元素在其父元素中水平方向的位置由以下几个属性共同决定（自左向右）：\",\"margin-left、border-left、padding-left、width、padding-right、border-right、margin-right\",\"一个元素在其父元素中，水平布局必须要满足以下的等式：\",\"margin-left + border-left + padding-left + width + padding-right + border-right + margin-right = 其父元素内容区的宽度\",\"以上等式必须满足，如果相加结果使等式不成立，则称为过度约束，等式会自动调整\"]},\"554\":{\"h\":\"调整的情况\",\"t\":[\"如果这七个值中没有为 auto 的情况，则浏览器会自动调整margin-right值以使等式满足。\",\"这七个值中有三个值可以设置为 auto：width、margin-left、margin-right，若其中某个值为 auto，则等式会调整其值来使等式成立。\",\"当margin和width都设置为 auto 时，因为width的吸收能力强，他会吸收剩余的空间，会优先进行调整\"]},\"555\":{\"h\":\"举例说明\",\"t\":[\"设置 width 为 200px，父元素 width 为 800px:\",\"0 + 0 + 0 + 200 + 0 + 0 + 0 = 800\",\"则会自动调整 margin-right ：0 + 0 + 0 + 200 + 0 + 0 + 600 = 800\",\"初始设置：100 + 0 + 0 + 200 + 0 + 0 + 400 = 800\",\"则会自动调整 margin-right ：100 + 0 + 0 + 200 + 0 + 0 + 500 = 800\",\"初始设置：0 + 0 + 0 + auto + 0 + 0 + 0 = 800 ；\",\"则自动调整auto = 800（width）\",\"初始设置：auto + 0 + 0 + 200 + 0 + 0 + auto = 800 ；\",\"则自动调整auto = 300（margin-left、margin-right）\"]},\"556\":{\"h\":\"多个 auto 自动调整说明\",\"t\":[\"如果宽度和其他属性设置为 auto，则自动调整宽度，其他属性置为 0。\",\"如果将两个外边距设置为 auto，宽度固定值，则会将两外边距设置为相同值。\",\"提示\",\"我们经常利用这个特点来使一个元素在其父元素中水平居中：\",\"width: xxxpx; margin: 0 auto;\"]},\"557\":{\"h\":\"2. 垂直方向的布局\",\"t\":[\"默认情况下父元素的高度被内容撑开，子元素是在父元素的内容区中排列的，如果子元素的大小超过了父元素，则子元素会从父元素中溢出（即当元素的内容太大而无法适应它的区块格式化上下文时），我们使用 overflow 属性来设置父元素如何处理溢出的子元素。\",\"overflow:auto\",\"visible (默认值 )子元素会从父元素中溢出，在父元素外部的位置显示\",\"hidden 溢出内容将会被裁剪不会显示\",\"clip 与 hidden 效果相同，两者之间的区别是clip 关键字禁止所有滚动，包括以编程方式的滚动。该盒子不是一个滚动的容器，并且不会启动新的格式化上下文。\",\"scroll 总是生成两个滚动条，通过滚动条来查看完整的内容\",\"auto 根据需要生成滚动条\",\"指定 visible（默认）或 clip 以外的值，会创建一个新的区块格式化上下文。\"]},\"558\":{\"h\":\"3. 外边距重叠\",\"t\":[\"相邻的垂直方向外边距会发生 重叠现象\",\"兄弟元素\",\"兄弟元素间的相邻垂直外边距会取两者之间的 较大值 （两者都是正值）\",\"特殊情况：\",\"如果相邻的外边距一正一负，则取两者的和；\",\"如果相邻的外边距都是负值，则取两者中绝对值较大的。\",\"兄弟元素之间的外边距的重叠，对于开发是有利的，所以我们不需要进行处理。\",\"父子元素\",\"父子元素间相邻外边距，子元素的会传递给父元素（上外边距），连带着父元素一起移动。\",\"父子外边距的折叠会影响到页面的布局，必须要进行处理\",\"解决方式： 要么不用外边距，要么不相邻\"]},\"559\":{\"h\":\"二、浮动（float）\",\"t\":[\"通过浮动可以使一个元素向其父元素的左侧或右侧移动\"]},\"560\":{\"h\":\"1. 设置元素的浮动\",\"t\":[\"我们使用float属性来设置元素的浮动\",\"​ 可选值：\",\"none 默认值 ，元素不浮动\",\"left 元素向左浮动\",\"right 元素向右浮动\",\"由于 float 意味着使用块布局，它在某些情况下会修改 display 值的计算值。\"]},\"561\":{\"h\":\"2. 浮动的特点\",\"t\":[\"当一个元素浮动之后，它会被移出正常的文档流，然后向左或者向右平移，一直平移直到碰到了所处的容器的边框，或者碰到另外一个浮动的元素\",\"浮动元素会完全 脱离文档流 ，不再占据文档流中的位置\",\"元素下边的还在文档流中的元素会自动向上移动\",\"设置浮动以后元素会向父元素的左侧或右侧移动\",\"浮动元素向左或向右移动时，不会从父元素中移出，也不会超过它前边的其他浮动元素\",\"如果浮动元素的上边是一个没有浮动的块元素，则浮动元素无法上移\",\"浮动元素不会超过它上边的浮动的兄弟元素，最多最多就是和它一样高\",\"元素设置浮动以后，水平布局的等式便不需要强制成立\",\"浮动元素不会盖住文字，文字会自动环绕在浮动元素的周围，所以我们可以利用浮动来设置文字环绕图片的效果\",\"总结\",\"浮动目前来讲它的主要作用就是让页面中的元素可以水平排列，通过浮动可以制作一些 水平方向的布局\"]},\"562\":{\"h\":\"3. 浮动带来的问题\",\"t\":[\"在浮动布局中，父元素的高度默认是被子元素撑开的，当子元素浮动后会完全脱离文档流，其将会无法撑起父元素的高度，导致父元素的高度丢失，然后其下的元素会自动上移，导致页面的布局混乱。这个问题我们称之为 高度塌陷 。高度塌陷是浮动布局中比较常见的一个问题，这个问题我们必须要进行处理！\"]},\"563\":{\"h\":\"4. 解决方案\"},\"564\":{\"h\":\"(1). BFC(Block Formatting Context) 块级格式化上下文\",\"t\":[\"BFC 是 CSS 中的一个隐含的属性，我们可以为一个元素开启 BFC，开启 BFC 该元素会变成一个 独立 的渲染区域，它规定了在该区域中，常规流块盒的布局。\",\"image-20221218193659346\",\"不同的 BFC 区域，他们进行渲染时互不干扰\",\"创建 BFC 的元素，隔绝了它内部和外部的联系，内部的渲染不会影响到外部\",\"元素开启 BFC 后的特点：\",\"开启 BFC 的元素不会被浮动元素所覆盖，会调整自身width和margin来避开浮动元素\",\"所以当想设置此元素的边距时，要设置浮动元素的margin\",\"开启 BFC 的元素子元素和父元素外边距不会重叠（解决外边距重叠问题 ）\",\"开启 BFC 的元素可以包含浮动的子元素，即自动高度需要计算浮动元素（主要解决高度塌陷问题）\",\"可以通过一些特殊方式来开启元素的 BFC：\",\"设置元素的 浮动或者绝对定位 （不推荐） \",\"解决高度塌陷问题，但是其会脱离文档流，丢失元素宽度（脱离文档流后默认由内容撑开宽度），布局下面的元素会上移。\",\"将元素设置为 行内块元素 （不推荐） \",\"行内块不适合作为外部的容器，且其元素宽度也会丢失\",\"将元素的overflow设置为一个非visible的值（常用） \",\"常用的方式：为父元素设置 overflow:hidden 开启其 BFC 以使其可以包含浮动元素\",\"在父元素中设置display值为 flow-root\",\"偏现代的解决方案，存在一定的兼容性问题。\",\"完整的 BFC 触发方式可以参阅：区块格式化上下文\"]},\"565\":{\"h\":\"(2). clear\",\"t\":[\"存在两个块级元素 box1、box2，当设置了 box1 的浮动，导致 box2 位置上移时，我们认为是 box2 受到了 box1 浮动的影响，位置发生了改变。\",\"如果我们不希望某个元素因为其他元素浮动的影响而改变其位置，可以通过clear属性来清除浮动元素对当前元素所产生的影响。\",\"clear\",\"作用：清除浮动元素对当前元素所产生的影响\",\"可选值：\",\"left 清除左侧浮动元素对当前元素的影响\",\"right 清除右侧浮动元素对当前元素的影响\",\"both 清除两侧中最大影响的那侧\",\"原理：设置清除浮动以后，浏览器会自动为元素添加一个上外边距， 以使其位置不受其他元素的影响\"]},\"566\":{\"h\":\"(3). 最终解决方案\",\"t\":[\"我们在父元素中新建一个块元素，并利用clear属性使其免受另一子元素的浮动影响，则新建块元素会存在于其下面（本身并未浮动），所以父元素会将其包裹，这样高度就不会塌陷。\",\".box1::after { content: ''; display: block; /*默认创建的伪元素为行内元素*/ clear: both; }\",\"之前我们说到解决外边距重叠时，要么不用外边距，要么不相邻；同样可以使用这种方式解决、\",\"/* clearfix 这个样式可以同时解决高度塌陷和外边距重叠的问题， 当你在遇到这些问题时，直接使用clearfix这个类即可 */ .clearfix::before, .clearfix::after { content: ''; display: table; clear: both; }\"]},\"567\":{\"h\":\"三、定位（position）\",\"t\":[\"通过定位我们可以将元素摆放到页面的任意位置\"]},\"568\":{\"h\":\"1. 属性\",\"t\":[\"使用 position 属性来设置定位\",\"可选值 \",\"static 默认值，元素是静止的没有开启定位\",\"relative 开启元素的相对定位\",\"absolute 开启元素的绝对定位\",\"fixed 开启元素的固定定位\",\"sticky 开启元素的粘滞定位\"]},\"569\":{\"h\":\"2. 相对定位\",\"t\":[\"当元素的position属性值设置为relative时则开启了元素的相对定位\",\"偏移量（offset）\",\"当元素开启了定位以后，可以通过 偏移量 来设置元素的位置\",\"top：定位元素和定位位置上边的距离\",\"bottom：定位元素和定位位置下边的距离\",\"提示\",\"定位元素垂直方向的位置由top和bottom两个属性控制；通常情况下只会使用其中一个\",\"top 值越大，定位元素越向下移动；bottom值越大，定位元素越向上移动\",\"left：定位元素和定位位置的左侧距离\",\"right：定位元素和定位位置的右侧距离\",\"提示\",\"定位元素水平方向的位置由left和right两个属性控制，通常情况下只会使用其中一个\",\"left越大元素越靠右；right越大元素越靠左\",\"相对定位的特点\",\"元素开启相对定位以后，如果不设置偏移量元素不会发生任何的变化\",\"相对定位是参照于元素在文档流中的位置进行定位的(box 左上， 距离原始位置的变动 )\",\"相对定位会提升元素的层级\",\"相对定位不会使元素脱离文档流\",\"相对定位不会改变元素的性质，块还是块，行内还是行内\"]},\"570\":{\"h\":\"3. 绝对定位\",\"t\":[\"当元素的position属性值设置为absolute时，则开启了元素的绝对定位\",\"包含块( containing block )\",\"正常情况下：包含块就是离当前元素最近的祖先块元素\",\"绝对定位的包含块：包含块就是离它 最近的开启了定位的祖先元素 ， 如果所有的祖先元素都没有开启定位，则根元素（html）就是它的包含块\",\"绝对定位的特点：\",\"开启绝对定位后，如果不设置偏移量元素的位置不会发生变化\",\"开启绝对定位后，元素会从文档流中脱离\",\"绝对定位会改变元素的性质，行内变成块，块的宽高被内容撑开\",\"绝对定位会使元素提升一个层级\",\"绝对定位元素是相对于 其包含块 进行定位的\",\"此时样式属性的百分比值也是相对包含块进行设置的\"]},\"571\":{\"h\":\"4. 固定定位\",\"t\":[\"将元素的position属性设置为fixed则开启了元素的固定定位；固定定位也是一种绝对定位，所以固定定位的大部分特点都和绝对定位一样\",\"唯一不同的是固定定位永远参照于浏览器的视口（浏览器的可视窗口）进行定位，固定定位的元素不会随网页的滚动条滚动\"]},\"572\":{\"h\":\"5. 粘滞定位\",\"t\":[\"当元素的position属性设置为sticky时则开启了元素的粘滞定位；粘滞定位和相对定位的特点基本一致，不同的是粘滞定位可以在元素到达某个位置时（与父元素的相对位置）将其固定。\",\"类似于相对定位relative和固定定位fixed的结合；它主要用在对scroll事件的监听上；简单来说，在滑动过程中，某个元素距离其父元素的距离达到sticky粘性定位的要求时(比如 top：100px)；position:sticky这时的效果相当于 fixed 定位，固定到适当位置。\"]},\"573\":{\"h\":\"四、绝对定位元素的布局\",\"t\":[\"当我们开启了绝对定位后， 水平方向的布局等式就需要添加left 和 right 两个值，此时规则和之前一样只是多添加了两个值\",\"提示\",\"left + margin-left + border-left + padding-left + width + padding-right + border-right + margin-right + right = 包含块的内容区的宽度\"]},\"574\":{\"h\":\"1. 当发生过度约束\",\"t\":[\"如果 9 个值中没有 auto 则自动调整right值以使等式满足（之前是margin-right）\",\"如果有 auto，则自动调整 auto 的值以使等式满足\",\"可设置 auto 的值:margin width left right\",\"因为 left 和 right 的值默认是 auto，所以如果不指定 left 和 right。则等式不满足时，会自动调整这两个值，元素会按照正常流的布局方式进行定位，左边界和右边界会自动计算以适应可用空间。\",\"垂直方向布局的等式的也必须要满足 （与之前盒模型不同）\",\"提示\",\"top + margin-top/bottom + padding-top/bottom + border-top/bottom + height = 包含块的高度\"]},\"575\":{\"h\":\"2. 元素的层级\",\"t\":[\"对于开启了定位的元素，可以通过z-index属性来指定元素的层级，z-index需要一个整数作为参数，值越大元素的层级越高，元素越优先显示。\",\"如果元素的层级一样，则优先显示靠下的元素；祖先的元素的层级再高也不会盖住后代元素。（具体规则参考下列堆叠上下文）\"]},\"576\":{\"h\":\"五、堆叠上下文（stack context）\",\"t\":[\"堆叠上下文(stack context)，它是一块区域，这块区域由某个元素创建，它规定了该区域内的内容在 Z 轴上排列的先后顺序。（即当元素开始重叠，哪些元素应该出现在其他元素顶部）\"]},\"577\":{\"h\":\"1. 创建堆叠上下文的元素\",\"t\":[\"htm1 元素（根元素）\",\"设置了z-index(非 auto)数值的定位元素\"]},\"578\":{\"h\":\"2. 同一个堆叠上下文中元素在 Z 轴上的排列\",\"t\":[\"从后到前的排列顺序：\",\"创建堆叠上下文的元素的背景和边框（祖先在后）\",\"堆叠级别(z-index,stack 1evel)为负值的堆叠上下文( 整体 )\",\"常规流非定位的块盒 （block）\",\"非定位的浮动盒子 （float）\",\"常规流非定位行盒 （inline）\",\"任何 z-index 是 auto 的定位子元素，以及 z-index 是 0 的堆叠上下文 （position）\",\"堆叠级别为正值的堆叠上下文\",\"每个堆叠上下文，独立于其他堆叠上下文，它们之间不能相互穿插。\"]},\"579\":{\"h\":\"六、常见的整体布局\"},\"580\":{\"h\":\"1. 两栏或者三栏布局\",\"t\":[\"一般情况下侧边栏会定宽，此时我们为侧边栏开启 浮动 ，而主内容区分为两种情况：\",\"主内容区同样 定宽 ，则将主内容区也开启浮动并设置宽度。\",\"主内容区需要 自适应宽度 ，则在主内容区中设置overflow:hidden;来开启 BFC，从而避免被浮动元素所覆盖。（当然也可以使用padding为侧边栏留出空白空间）\",\"浮动布局\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <style> div { border: 1px solid black; } .container { width: 100%; } .slider-left, .slider-right { width: 200px; float: left; } .slider-right { float: right; } .main-content { overflow: hidden; /* padding: 0 200px; */ /* margin: 0 200px; */ } </style> </head> <body> <div class=\\\"container\\\"> <div class=\\\"slider-left\\\">zuo</div> <div class=\\\"slider-right\\\">you</div> <div class=\\\"main-content\\\">content</div> </div> </body> </html>\",\"绝对定位布局\",\"<html> <head> <style type=\\\"text/css\\\"> .container { position: relative; } .left, .right { width: 200px; position: absolute; top: 0; } .left { left: 0; } .right { right: 0; } .main { margin: 0 200px; /* 宽度等于左右侧栏宽度 */ } </style> </head> <body> <div class=\\\"container\\\"> <div class=\\\"left\\\" style=\\\"border: 1px solid black;\\\">Left Sidebar</div> <div class=\\\"main\\\" style=\\\"border: 1px solid black;\\\">Main Content</div> <div class=\\\"right\\\" style=\\\"border: 1px solid black;\\\">Right Sidebar</div> </div> </body> </html>\",\"Flex 布局\",\"<html> <head> <style type=\\\"text/css\\\"> .container { display: flex; } .left, .right { width: 200px; } .main { flex: 1; /* 自动扩展填充剩余空间 */ } </style> </head> <body> <div class=\\\"container\\\"> <div class=\\\"left\\\" style=\\\"border: 1px solid black;\\\">Left Sidebar</div> <div class=\\\"main\\\" style=\\\"border: 1px solid black;\\\">Main Content</div> <div class=\\\"right\\\" style=\\\"border: 1px solid black;\\\">Right Sidebar</div> </div> </body> </html>\",\"Grid 布局\",\"<html> <head> <style type=\\\"text/css\\\"> .container { display: grid; grid-template-columns: 200px 1fr 200px; /* 列的宽度 */ } </style> </head> <body> <div class=\\\"container\\\"> <div class=\\\"left\\\" style=\\\"border: 1px solid black;\\\">Left Sidebar</div> <div class=\\\"main\\\" style=\\\"border: 1px solid black;\\\">Main Content</div> <div class=\\\"right\\\" style=\\\"border: 1px solid black;\\\">Right Sidebar</div> </div> </body> </html>\",\"当对盒子设置浮动时，要注意 高度塌陷 问题。\",\"有时为了方便搜索引擎的检索，我们需要将主区域的代码靠前书写，此时就不能再使用浮动了，可以先在主区域中使用 margin 或者 padding 将侧边栏的位置空出来，然后将侧边栏定位到指定位置上去。\"]},\"581\":{\"h\":\"2. 等高布局\"},\"582\":{\"h\":\"伪等高\",\"t\":[\"边框模拟：因为主内容区边框和其高度始终相同，用元素的边框颜色来伪装左右两边侧边栏的背景色。然后将左右两个透明背景的侧边栏使用absolute覆盖在主内容区的的左右边框上，实现视觉上的等高效果。\",\"<style> body,p{margin: 0;} .parent{ position: relative; } .center{ box-sizing:border-box; padding: 0 20px; background-clip: content-box; border-left: 210px solid lightblue; border-right: 310px solid lightgreen; } .left{ position: absolute; top: 0; left: 0; width: 200px; } .right{ position: absolute; top: 0; right: 0; width: 300px; } </style>\",\"<div class=\\\"parent\\\" style=\\\"background-color: lightgrey;\\\"> <div class=\\\"left\\\"> <p>left</p> </div> <div class=\\\"center\\\" style=\\\"background-color: pink;\\\"> <p>center</p> <p>center</p> </div> <div class=\\\"right\\\"> <p>right</p> </div> </div>\",\"左右两侧元素的内容高度不能大于中间元素内容高度，否则无法撑开容器高度\",\"负 margin：将侧边栏高度设置为一个很大的值，再设置稍小数值的负的margin-bottom，这时实际盒子的高度很小，但内容区均能显示出来，在其父元素中设置overflow:hidden将超出部分隐藏，实现视觉上的等高效果。\",\"<style> body,p{margin: 0;} .parent{ overflow: hidden; } .left,.centerWrap,.right{ float: left; width: 50%; } .center{ margin: 0 20px; } .left,.right{ width: 25%; height: 10000px; margin-bottom: -9990px; } </style>\",\"<div class=\\\"parent\\\" style=\\\"background-color: lightgrey;\\\"> <div class=\\\"left\\\" style=\\\"background-color: lightblue;\\\"> <p>left</p> </div> <div class=\\\"centerWrap\\\"> <div class=\\\"center\\\" style=\\\"background-color: pink;\\\"> <p>center</p> <p>center</p> </div> </div> <div class=\\\"right\\\" style=\\\"background-color: lightgreen;\\\"> <p>right</p> </div> </div>\"]},\"583\":{\"h\":\"真等高\",\"t\":[\"flex（设置相同伸缩系数）、absolute（父元素必须设置高度）、js\"]},\"584\":{\"h\":\"七、弹性盒（flex）\",\"t\":[\"flex 是 CSS 中的又一种布局手段，它主要用来代替浮动来完成页面的布局。flex 可以使元素具有弹性，让元素可以跟随页面大小的改变而改变。\"]},\"585\":{\"h\":\"1. 弹性容器\",\"t\":[\"要使用弹性盒，必须先将一个元素设置为弹性容器。\",\"display: flex;\",\"display:flex 设置为块级弹性容器\",\"display:inline-flex 设置为行内的弹性容器\"]},\"586\":{\"h\":\"2. 更改主轴方向\",\"t\":[\"flex-direction: row;\",\"row 默认值，弹性元素在容器中水平排列（左向右）- 主轴 自左向右\",\"row-reverse 弹性元素在容器中反向水平排列（右向左）- 主轴 自右向左\",\"column 弹性元素纵向排列（自上向下）\",\"column-reverse 弹性元素方向纵向排列（自下向上）\",\"我们将弹性元素的排列方向称为 主轴 ；与主轴垂直的方向称为 侧轴\"]},\"587\":{\"h\":\"3. 主轴换行\",\"t\":[\"flex-wrap: wrap-reverse 设置弹性元素是否在弹性容器中自动换行\",\"nowrap 默认值，元素不会自动换行，在超出容器可容纳空间时会自动收缩子元素\",\"wrap 元素沿着辅轴方向自动换行\",\"wrap-reverse 元素沿着辅轴反方向换行\",\"提示\",\"flex-flow: row wrap; （wrap 和 direction 的简写属性）\"]},\"588\":{\"h\":\"4. 主轴排列\",\"t\":[\"justify-content: center 主轴上的元素如何排列\",\"flex-start 元素沿着主轴起边排列\",\"flex-end 元素沿着主轴终边排列\",\"center 元素居中排列\",\"space-around 空白分布到元素两侧\",\"相邻元素间距离相同。每行第一个元素到行首的距离和每行最后一个元素到行尾的距离将会是相邻元素之间距离的一半。\",\"space-between 空白均匀分布到元素间\",\"相邻元素间距离相同。每行第一个元素与行首对齐，每行最后一个元素与行尾对齐。\",\"space-evenly 空白分布到元素的单侧\",\"相邻 flex 项之间的间距，主轴起始位置到第一个 flex 项的间距，主轴结束位置到最后一个 flex 项的间距，都完全一样。\"]},\"589\":{\"h\":\"5. 辅轴排列\",\"t\":[\"align-items: flex-start 元素在辅轴上如何排列(元素间的关系)\",\"stretch 默认值，如果项目没设置 height 或设为 auto 将占满整个容器的高度\",\"flex-start 交叉轴的起点对齐\",\"flex-end 交叉轴的终点对齐\",\"center 交叉轴的中点对齐\",\"baseline 项目的第一行文字的基线对齐\",\"当存在多轴线即存在多行项目时，将多行项目视为一个整体，默认align-content为 stretch。\"]},\"590\":{\"h\":\"6. 辅轴多轴线排列\",\"t\":[\"align-content: space-between; align-content 定义了多根轴线的对齐方式。如果项目只有一根轴线该属性不起作用；同样当项目由多条轴线时，此属性会覆盖align-items的设置\",\"以上均为 容器属性 ，而下面的属性属于 项目属性\"]},\"591\":{\"h\":\"7. 弹性元素伸缩\",\"t\":[\"弹性容器的子元素就是弹性元素（弹性项），弹性元素可以同时是弹性容器。\",\"所谓伸缩，是指在主轴方向上，当弹性容器有额外空间时，是否需要拉伸，当空间不足时，是否需要压缩\",\"flex-grow: 2;\",\"flex-grow 指定弹性元素的伸展的系数，默认为 0\",\"当父元素有多余的空间时，子元素如何伸展，父元素的剩余空间，会按照比例进行分配\",\"如果所有项目的 flex-grow 属性值都为 1，则会等分剩余空间\",\"flex-shrink\",\"指定弹性元素的收缩系数，默认为 1\",\"当父元素中的空间不足以容纳所有的子元素时，如何对子元素进行收缩\",\"flex-basis: auto; flex-basis 指定的是元素在主轴上的基础长度，如果主轴是横向的则该值指定的就是元素的宽度； 如果主轴是纵向的则该值指定的是就是元素的高度。\",\"默认值是 auto，表示参考元素自身的高度或宽度，如果传递了一个具体的数值，则以该值为准\"]},\"592\":{\"h\":\"8. 简写属性\",\"t\":[\"flex 是flex-grow、flex-shrink、flex-basis的简写，默认值为0 1 auto。后两个属性可选\",\"flex: 0 1 auto\",\"flex 可以设置弹性元素所有的三个样式(拉伸比例 压缩比例 初始尺寸)\",\"系统预设了三种情况，可以直接使用 flex: initial;\",\"initial \\\"flex: 0 1 auto\\\"\",\"auto \\\"flex: 1 1 auto\\\"\",\"none \\\"flex: 0 0 auto\\\" 弹性元素没有弹性\"]},\"593\":{\"h\":\"9.order\",\"t\":[\"order 定义项目排列顺序，数值越小越靠前，允许为负 \"]},\"594\":{\"h\":\"八、元素居中总结\",\"t\":[\"此处的居中指的是盒子在其包含块中居中\"]},\"595\":{\"h\":\"1. 水平居中\"},\"596\":{\"h\":\"行盒（行块盒）水平居中\",\"t\":[\"直接设置行盒（行块盒）父元素 text-align:center\"]},\"597\":{\"h\":\"常规块盒水平居中\",\"t\":[\"定宽，设置左右margin为 auto\",\"width: xxx; margin: 0 auto;\"]},\"598\":{\"h\":\"绝对定位元素的水平居中\",\"t\":[\"定宽，设置左右坐标为 0（left:0,right:0），将左右 margin 设置为 auto\",\"position: absolute; left: 0; right: 0; margin: 0 auto;\"]},\"599\":{\"h\":\"弹性元素的水平居中\",\"t\":[\"设置弹性容器：\",\"display: flex; justify-content: center;\"]},\"600\":{\"h\":\"2. 垂直居中\"},\"601\":{\"h\":\"单行文本的垂直居中\",\"t\":[\"设置文本所在元素的行高为整个区域的高度\",\"height: 20px; line-height: 20px;\"]},\"602\":{\"h\":\"行块盒或块盒内多行文本的垂直居中\",\"t\":[\"设置盒子上下内边距相同，达到类似的效果\",\"padding: xxxpx 0;\",\"在文本外套上标签，利用绝对定位\",\"position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);\"]},\"603\":{\"h\":\"绝对定位的垂直居中\",\"t\":[\"定宽，设置上下的坐标为 0（top:0,bottom:0）,将上下 margin 设置为 auto\",\"position: absolute; top: 0; bottom: 0; margin: auto 0;\"]},\"604\":{\"h\":\"弹性元素的垂直居中\",\"t\":[\"设置弹性容器：\",\"display: flex; align-items: center;\"]},\"605\":{\"h\":\"九、网格（Grid）\",\"t\":[\"网格是一组相交的水平线和垂直线，它定义了网格的列和行。我们可以将网格元素放置在与这些行和列相关的位置上。\",\"img\",\"具体内容参考CSS 网格布局 | 阮一峰\"]},\"606\":{\"c\":[\"前端\"]},\"607\":{\"c\":[\"CSS\",\"布局\",\"浮动\",\"定位\",\"flex\",\"BFC\"]},\"608\":{\"h\":\"css视觉样式\"},\"609\":{\"h\":\"一、视觉类样式\",\"t\":[\"所谓视觉类样式，是指不影响 盒子位置、尺寸 的样式，例如文字颜色、背景颜色、背景图片等\"]},\"610\":{\"h\":\"1. 默认样式\",\"t\":[\"通常情况，浏览器都会为元素设置一些默认样式，这些样式的存在会影响到页面的布局，一般我们编写网页时必须要去除浏览器的默认样式（PC 端的页面）\",\"重置样式表：专门用来对浏览器的样式进行重置的\",\"reset.css 直接去除了浏览器的默认样式\",\"normalize.css 对默认样式进行了统一\"]},\"611\":{\"h\":\"2. 轮廓\",\"t\":[\"outline 用来设置元素的轮廓线，用法和 border 一模一样\",\"轮廓和边框不同的点，就是轮廓不会影响到可见框的大小\"]},\"612\":{\"h\":\"3. 圆角\",\"t\":[\"border-radius: 用来设置圆角 （圆角设置的圆的半径大小）\",\"border-radius 可以分别指定四个角的圆角\",\"四个值： 左上 右上 右下 左下\",\"三个值： 左上 右上/左下 右下\",\"两个值： 左上/右下 右上/左下\",\"border-radius: 20px 50%;\",\"将元素设置为一个圆形：border-radius: 50%;\"]},\"613\":{\"h\":\"4. 盒子阴影\",\"t\":[\"box-shadow 用来设置元素的阴影效果，阴影不会影响页面布局\",\"第一个值 水平偏移量 设置阴影的水平位置 正值向右移动 负值向左移动\",\"第二个值 垂直偏移量 设置阴影的水平位置 正值向下移动 负值向上移动\",\"第三个值 阴影的模糊半径\",\"第四个值 阴影的扩散半径\",\"可选值：inset、<color>\",\"box-shadow: 0px 0px 50px rgba(0, 0, 0, .3) ;\"]},\"614\":{\"h\":\"5. 文字阴影\",\"t\":[\"MDN 详细文档\",\"通过text-shadow可以设置文字阴影\",\"下面是一些示例\"]},\"615\":{\"h\":\"二、 变形（transform）\",\"t\":[\"变形就是指通过 CSS 来改变元素的形状或位置，它不会影响到页面的布局。\"]},\"616\":{\"h\":\"1. translate 平移\",\"t\":[\"transform 用来设置元素的变形效果 transform: translateX(100%);\",\"translateX() 沿着 x 轴方向平移\",\"translateY() 沿着 y 轴方向平移\",\"translateZ() 沿着 z 轴方向平移\",\"当平移单位为百分比时，其百分比相对于自身进行计算\",\"其中 z 轴平移比较特殊，正常情况下 z 轴平移指的是调整元素在 z 轴的位置，即调整元素和人眼之间的距离，距离越大，元素离人越近。但因为 z 轴平移属于立体效果（近大远小），而默认情况下网页不支持透视，如果想要看见效果，则必须要设置网页的视距。\",\"body { /* 设置当前网页的视距为800px，人眼距离网页的距离 */ perspective: 800px; }\",\"警告\",\"原版视频中是在 html 标签上添加的 perspective，经验证现已失效，设置给 body 则显示正常。查阅文档之后，文档中给出了另一种设置方式：transform: perspective(500px) translateZ(200px);\"]},\"617\":{\"h\":\"2. rotate 旋转\",\"t\":[\"通过旋转可以使元素沿着 x y 或 z 旋转指定的角度 transform: rotateY(180deg);\",\"rotateX()、rotateY()、rotateZ()\",\"backface-visibility: hidden;(是否显示元素的背面)\",\"与上同理，在进行 x、y 轴的旋转时，为了显示出 3d 的效果，需要设置perspective\"]},\"618\":{\"h\":\"3. scale 缩放\",\"t\":[\"对元素进行缩放的函数 transform:scale(2)\",\"scaleX() 水平方向缩放、scaleY() 垂直方向缩放、 scale() 双方向的缩放\"]},\"619\":{\"h\":\"4. 改变变形原点\",\"t\":[\"MDN 详细文档\",\"变形原点的位置，会影响到具体的变形行为\",\"默认情况下， 变形的原点在盒子中心，你可以通过transform-origin来改变它\",\"transform-origin: center; /* 设置原点在盒子中心 */ transform-origin: left top; /* 设置原点在盒子左上角 */ transform-origin: right bottom; /* 设置原点在盒子右下角 */ transform-origin: 30px 60px; /* 设置原点在盒子坐标 (30, 60) 位置 */\",\"提示\",\"为了使变形的效果更加平滑，一般情况下我们会为进行变形的元素添加transition（过渡）效果\"]},\"620\":{\"h\":\"三、字体\"},\"621\":{\"h\":\"1. 字体相关的样式\",\"t\":[\"color 用来设置字体的颜色\",\"font-size 字体的大小\",\"单位：px、em（相当于当前元素的一个 font-size）、rem （相对于根元素的一个 font-size）\",\"font-weight 字重 字体的加粗\",\"normal （默认值 不加粗） 、bold （加粗）、100-900 九个级别（没什么用）\",\"font-style 字体的风格\",\"normal 正常的、italic 斜体\",\"font-family 字体族（字体的格式）\",\"可选值：serif（衬线字体）、sans-serif（ 非衬线字体）、 monospace（等宽字体）\",\"指定字体的类别，浏览器会自动使用该类别下的字体，一般情况下上述字体作为字体族最后一个作为兜底。\",\"font-family 可以同时指定多个字体，多个字体间使用,隔开，字体生效时优先使用第一个，第一个无法使用则使用第二个，以此类推。\",\"当指定用户电脑上并未安装的字体时，其不会生效，通过下述属性使用户可以直接使用服务器中的字体。\",\"用户电脑会先将服务器中指定的字体下载，存在一定的网络问题，若网速比较慢，则网页的字体一开始不会正确显示。\",\"font-face指定的字体提供给用户使用，要注意受到了授权。\",\"@font-face { /* 指定字体的名字 */ font-family: 'myfont'; /* 服务器中字体的路径 */ src: url('./font/ZCOOLKuaiLe-Regular.ttf') format('truetype'); /* format(\\\"truetype\\\") 保险措施，一般情况下系统可以自动识别 */ } p { font-family: myfont; }\",\"注意要注意所使用字体的版权问题！ :::\",\"行高（line height），行高指的是文字占有的实际高度，可以通过line-height来设置行高。\",\"行高可以直接指定一个大小（px、em），也可以直接为行高设置一个整数，如果是一个整数的话，行高将会是字体大小的指定倍数。\",\"行高经常还用来设置文字的行间距：行间距 = 行高 - 字体大小\",\"我们可以将行高设置为和高度一样的值，使单行文字在一个元素中垂直居中\",\"字体框\",\"字体框就是字体存在的格子，设置font-size实际上就是在设置字体框的高度\",\"行高会在字体框的上下平均分配\",\"字体的简写属性，font 可以设置字体相关的所有属性\",\"font: 字体大小/行高 字体族（行高可以省略不写，如果不写使用默认值）\",\"示例：font: bold italic 50px/2 微软雅黑, 'Times New Roman', Times, serif;\"]},\"622\":{\"h\":\"2. 图标字体（iconfont）\",\"t\":[\"在网页中经常需要使用一些图标，可以通过图片来引入图标，但是图片大小本身比较大，并且非常的不灵活（颜色、大小）。所以在使用图标时，我们还可以将图标直接设置为字体， 然后通过font-face的形式来对字体进行引入，这样我们就可以通过使用字体的形式来使用图标。\"]},\"623\":{\"h\":\"fontawesome\",\"t\":[\"fontawesome 是一个公共的图标字体库，我们要想使用它，首先要在官网（英文官网，中文官网版本比较旧）下载字体库，解压到本地之后，文档中存在很多文件，我们只需要将css和webfonts移动到项目中的同一目录下。然后将all.css或者all.min.css引入到网页中<link rel=\\\"stylesheet\\\" href=\\\"./fa/css/all.css\\\">，之后直接使用图标字体即可。\",\"使用方式：\",\"直接通过类名使用图标字体\",\"<i class=\\\"fas fa-bell-slash\\\"></i> <i class=\\\"fab fa-accessible-icon\\\"></i>\",\"fa-bell-slash属于图标字体名（同上面 font-face 定义内容），前面是fas或者fab（同上面 p 定义内容，将图标字体指定为字体族，只有这两种免费使用），将如果其中一种不生效记得换另一种试试。\",\"通过实体来使用图标字体\",\"<span class=\\\"fas\\\">&#xf0f3;</span> 其中 f0f3 为字体的编码。\",\"通过伪元素来设置图标字体\",\"找到要设置图标的元素通过 before 或 after 选中\",\"在 content 中设置字体的编码（通过文档查看）\",\"设置字体的样式\",\"fab：font-family: 'Font Awesome 5 Brands';\",\"fas： font-family: 'Font Awesome 5 Free';\",\"​ font-weight: 900;\",\"li::before { content: '\\\\f1b0'; /* font-family: 'Font Awesome 5 Brands'; */ font-family: 'Font Awesome 5 Free'; font-weight: 900; color: blue; margin-right: 10px; }\"]},\"624\":{\"h\":\"阿里的字体库（iconfont）\",\"t\":[\"参考\",\"查看字体库下载过程和使用方式: https://zhuanlan.zhihu.com/p/438121005\"]},\"625\":{\"h\":\"3. 文本样式\",\"t\":[\"text-align\",\"文本的水平对齐，可选值：\",\"left 左侧对齐\",\"right 右对齐\",\"center 居中对齐\",\"justify 两端对齐\",\"vertical-align\",\"元素垂直对齐的方式。可选值：\",\"baseline 默认值 基线对齐\",\"top 顶部对齐\",\"bottom 底部对齐\",\"middle 居中对齐\",\"text-decoration\",\"设置文本修饰，可选值：\",\"none 什么都没有\",\"underline 下划线\",\"line-through 删除线\",\"overline 上划线\",\"white-space\",\"设置网页如何处理空白。可选值：\",\"normal 正常（当文字超过父元素设置的宽度时，自动换行）\",\"nowrap 不换行\",\"pre 保留空白\"]},\"626\":{\"h\":\"四、背景\"},\"627\":{\"h\":\"1. 背景颜色\",\"t\":[\"background-color: #bfa;\",\"背景颜色可以延伸至元素的内容和内边距盒子的下面\"]},\"628\":{\"h\":\"2. 背景图片\",\"t\":[\"background-image: url(\\\"./img/1.png\\\");\",\"可以同时设置背景图片和背景颜色，这样背景颜色将会成为图片的 背景色\",\"如果背景的图片小于元素，则背景图片会自动在元素中 平铺 将元素铺满\",\"如果背景的图片大于元素，将会有部分背景无法完全显示（大图不会缩小以适应盒子）\",\"如果背景图片和元素一样大，则会直接正常显示\"]},\"629\":{\"h\":\"3. 控制背景平铺行为\",\"t\":[\"background-repeat: no-repeat;\",\"repeat 默认值 ， 背景会沿着 x 轴 y 轴双方向重复平铺\",\"repeat-x 沿着 x 轴方向重复平铺\",\"repeat-y 沿着 y 轴方向重复平铺\",\"no-repeat 阻止背景重复平铺\"]},\"630\":{\"h\":\"4. 背景图片的位置\",\"t\":[\" background-position: -50px 300px;\",\"通过 top left right bottom center 几个表示方位的词来设置背景图片的位置 \",\"使用方位词时必须要同时指定两个值，如果只写一个则第二个默认就是center\",\"通过 偏移量 来指定背景图片的位置 \",\"水平方向的偏移量、垂直方向变量\"]},\"631\":{\"h\":\"5. 背景图片的偏移量计算的原点\",\"t\":[\"background-origin: border-box;\",\"padding-box 默认值，background-position从内边距处开始计算\",\"content-box 背景图片的偏移量从 内容区 处计算\",\"border-box 背景图片的偏移量从 边框 处开始计算\"]},\"632\":{\"h\":\"6. 背景的范围\",\"t\":[\"background-clip: content-box;\",\"border-box 默认值，背景会出现在边框的下边\",\"padding-box 背景不会出现在边框，只出现在内容区和内边距\",\"content-box 背景只会出现在内容区\"]},\"633\":{\"h\":\"7. 背景图片的大小\",\"t\":[\"background-size: contain;\",\"可以设置 长度 或 百分比值\",\"第一个值表示宽度 ,第二个值表示高度,如果只写一个，则第二个值默认是 auto\",\"cover 图片的比例不变，将元素铺满，在这种情况下，图像的部分区域可能会跳出盒子外。\",\"contain 图片比例不变，将图片在元素中完整显示，在这种情况下，如果图像的长宽比与盒子的长宽比不同，你可能会在图像的两边或顶部和底部出现空隙。\"]},\"634\":{\"h\":\"8. 背景图片是否跟随元素移动\",\"t\":[\"background-attachment: fixed;\",\"scroll 默认值 背景图片会跟随元素移动\",\"fixed 背景会固定在页面中，不会随元素移动\",\"local：将背景固定在它所设置的元素上，所以当你滚动该元素时，背景也随之滚动。\",\"查看实际效果\"]},\"635\":{\"h\":\"9. 背景相关的简写属性\",\"t\":[\" background: url('./img/2.jpg') #bfa center center/contain border-box content-box no-repeat ;\",\"所有背景相关的样式都可以通过该样式来设置 ,并且该样式没有顺序要求，也没有哪个属性是必须写的\",\"background-size必须写在background-position的后边，并且使用/隔开\",\"background-origin background-clip 两个样式 ，orgin要在clip的前边\"]},\"636\":{\"h\":\"10. 渐变\",\"t\":[\"MDN 详细文档\",\"在设置 背景图片 时，除了可以使用url()加载一张背景图，还可以使用linear-gradient()函数设置背景渐变\",\"linear-gradient()用于创建一张渐变的图片，语法为：\",\"background-image: linear-gradient(to bottom, #e66465, #9198e5);\",\" background-image: repeating-linear-gradient(to right ,red, yellow 50px);\",\"通过渐变可以设置一些复杂的背景颜色，可以实现从一个颜色向其他颜色过渡的效果\",\"渐变是图片，需要通过background-image来设置\",\"linear-gradient() --线性渐变，颜色沿着一条直线发生变化\",\"repeating-linear-gradient()--可以平铺的线性渐变\",\"渐变可以同时指定多个颜色，多个颜色默认情况下平均分布，也可以手动指定渐变的分布情况，指定颜色分布的起始位置\",\"线性渐变的开头，我们可以指定一个渐变的方向(to left、to right 等)\",\" background-image: radial-gradient(farthest-corner at 100px 100px, red , #bfa)\",\"径向渐变(放射性的效果)， 默认情况下径向渐变的形状根据元素的形状来计算的，正方形 --> 圆形，长方形 --> 椭圆形\",\"我们也可以自己指定渐变的位置。radial-gradient(大小 at 位置, 颜色 位置 ,颜色 位置 ,颜色 位置) \",\"大小： circle 圆形、 ellipse 椭圆、closest-side 近边 、 closest-corner 近角、farthest-side 远边、farthest-corner 远角\",\"位置： top right left center bottom\"]},\"637\":{\"c\":[\"前端\"]},\"638\":{\"c\":[\"CSS\",\"阴影\",\"transform\",\"字体\",\"背景\"]},\"639\":{\"h\":\"过渡、动画与响应式\"},\"640\":{\"h\":\"一、Animation\",\"t\":[\"过渡和动画无法对所有的 CSS 属性产生影响，能够产生影响的只有数值类属性，例如：颜色、宽高、字体大小等等\"]},\"641\":{\"h\":\"1. 过渡（transition）\",\"t\":[\"通过过渡可以指定一个属性发生变化时的切换方式，创建一些非常好的效果，提升用户的体验。\",\"transition-property: height , width;\",\"指定要执行过渡的属性，多个属性间使用,隔开，如果所有属性都需要过渡，则使用 all 关键字\",\"大部分属性都支持过渡效果，注意过渡时必须是从一个有效数值向另外一个有效数值进行过渡\",\"transition-duration: 100ms, 2s;\",\"指定过渡效果的持续时间, 时间单位：s 和 ms\",\"transition-timing-function: steps(2, start);\",\"过渡的时序函数,指定过渡执行的方式\",\"可选值：\",\"ease 默认值，慢速开始，先加速，再减速\",\"linear 匀速运动\",\"ease-in 加速运动\",\"ease-out 减速运动\",\"ease-in-out 先加速 后减速\",\"cubic-bezier() 来指定时序函数（时序函数编辑）\",\"steps() 分步执行过渡效果,可以设置第二个值来表明在时间开始还是结束来执行过渡\",\"transition-delay: 2s;\",\"过渡效果的延迟，等待一段时间后在执行过渡\",\"transition:2s margin-left 1s cubic-bezier(.24,.95,.82,-0.88);简写属性\",\"可以同时设置过渡相关的所有属性，只有一个要求，如果要写延迟，则两个时间中第一个是持续时间，第二个是延迟。\",\"在 JS 中，可以监听元素的transitionstart和transitionend事件，从而在过渡开始和过渡结束时做一些别的事情\"]},\"642\":{\"h\":\"2. 动画\",\"t\":[\"动画和过渡类似，都可以实现一些动态的效果，不同的是过渡需要在某个属性发生变化时才会触发，而动画可以自动触发动态效果。要想设置动画效果，必须先要设置一个关键帧，关键帧设置了动画执行的每一个步骤。\"]},\"643\":{\"h\":\"关键帧的设置\",\"t\":[\"@keyframes test { /* from表示动画的开始位置 也可以使用 0% */ from { margin-left: 0; background-color: orange; } /* to动画的结束位置 也可以使用100%*/ to { background-color: red; margin-left: 700px; } }\"]},\"644\":{\"h\":\"动画的设置\",\"t\":[\"animation-name: test; 要对当前元素生效的关键帧的名字\",\"animation-duration: 4s; 动画的执行时间\",\" animation-delay: 2s; 动画的延时\",\"animation-iteration-count: 1; 动画执行的次数 ( infinite 无限执行)\",\" animation-direction: alternate-reverse; 指定动画运行的方向\",\"normal 默认值 从 from 向 to 运行 每次都是这样\",\"reverse 从 to 向 from 运行 每次都是这样\",\"alternate 从 from 向 to 运行 重复执行动画时反向执行\",\"alternate-reverse 从 to 向 from 运行 重复执行动画时反向执行\",\"animation-play-state: paused; 设置动画的执行状态\",\"animation-fill-mode: both; 动画的填充模式\",\"none 默认值 动画执行完毕元素回到原来位置\",\"forwards 动画执行完毕元素会停止在动画结束的位置\",\"backwards 动画延时等待时，元素就会处于开始位置\",\"both 结合了 forwards 和 backwards\",\"animation: ball .5s forwards linear infinite alternate;\",\"在 JS 中，可以监听元素的animationstart和animationnend事件，从而在过渡开始和过渡结束时做一些别的事情\"]},\"645\":{\"h\":\"二、移动端开发\"},\"646\":{\"h\":\"1. 像素\",\"t\":[\"屏幕是由一个个发光的小点构成，这一个个的小点就是像素。我们常说的分辨率：1920 x 1080 说的就是屏幕中小点的数量。在前端开发中像素要分成两种情况讨论：CSS 像素 和 物理像素，上述所说的小点就属于物理像素，而 css 像素指的是编写网页时我们所用的像素。浏览器在显示网页时，需要将 CSS 像素转换为物理像素然后再进行呈现，一个 css 像素最终由几个物理像素显示由浏览器决定：默认情况下在 pc 端，一个 css 像素 = 一个物理像素。\"]},\"647\":{\"h\":\"2. 视口（viewport）\"},\"648\":{\"h\":\"视口分类\",\"t\":[\"视口就是屏幕中用来显示网页的区域，在移动端，我们将视口分成三种情况：\",\"布局视口（layout viewport） \",\"作为开发人员，当我们在 pc 端进行布局时会相对于默认的 980px（实际上不同的浏览器默认值可能不同）进行布局，这个默认 980px 的视口称之为布局视口\",\"视觉视口（visual layout） \",\"如果默认情况下，我们按照 980px 显示内容，那么右侧有一部分区域 就会无法显示，所以手机端浏览器会默认对页面进行缩放以显示到用 户的可见区域中\",\"那么显示在可见区域的这个视口，就是视觉视口（visual viewport）\",\"理想视口（ideal layout） \",\"我们通过对 layout viewport 进行宽度和缩放的设置，以满足正常在一个移动端窗口的布局；就是布局视口和视觉视口的大小相同\",\"点击原博客地址查看全文\"]},\"649\":{\"h\":\"3. 像素比\",\"t\":[\"我们可以通过查看视口的大小，来观察 CSS 像素和物理像素的比值。\",\"默认情况下： 视口宽度 1920px（CSS 像素）、1920px（物理像素）， 此时，css 像素和物理像素的比是 1:1\",\"放大两倍的情况：视口宽度 960px（CSS 像素）、1920px（物理像素）， 此时，css 像素和物理像素的比是 1:2\",\"我们可以通过改变视口的大小，来改变 CSS 像素和物理像素的比值\",\"在不同的屏幕，单位像素的大小是不同的，像素越小屏幕会越清晰。智能手机的像素点远远小于计算机的像素点， 默认情况下，移动端的网页都会将视口设置为 980 像素（css 像素 ），以确保 pc 端网页可以在移动端正常访问，但是如果网页的宽度超过了 980，移动端的浏览器会自动对网页缩放以完整显示网页，所以基本大部分的 pc 端网站都可以在移动端中正常浏览，但是往往都不会有一个好的体验，为了解决这个问题，大部分网站都会专门为移动端设计网页。\",\"每一款移动设备设计时，都会有一个最佳的像素比， 一般我们只需要将像素比设置为该值即可得到一个最佳效果，将像素比设置为最佳像素比的视口大小我们称其为完美视口（即上面所说的理想视口）。\",\" 将网页的视口设置为完美视口\",\"<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\",\"结论：以后再写移动端的页面，就把上边这个玩意先写上\",\"当然一般情况下我们使用 IDE 自动生成的代码中会自动包含此部分\",\"这行代码起到了两个作用，直接作用是使得布局视口和视觉视口的大小相同；间接作用是使得网页达到最佳的显示效果\",\"提示\",\"实际上我们不用关心设备的物理像素为多少，当我们获取 device-width 时，获取的是 css 像素表示的设备宽度，而不是真实的物理像素，这个像素值就是根据最佳像素比进行设置的。\"]},\"650\":{\"h\":\"4. 移动端单位\",\"t\":[\"由于不同设备视口和像素比不同，所以同样的 375 个像素在不同的设备下意义是不一样的，比如在 iphone6 中 375 就是全屏，而到了 plus 中 375 就会缺一块，所以在移动端开发时，就不能再使用 px 来进行布局了。\",\"vw 表示的是视口的宽度\",\"100vw = 一个视口的宽度\",\"1vw = 1%视口宽度\",\"vw 这个单位永远相当于视口宽度进行计算\",\"创建一个 48px x 35px 大小的元素（ 显示页面与设计图的一个对应关系 ） \",\"100vw = 750px(设计图的像素) 0.1333333333333333vw = 1px\",\"6.4vw = 48px(设计图像素)\",\"4.667vw = 35px\",\"rem 表示的单个字体的大小\",\"1 rem = 1 html 的字体大小\",\"在 html 标签中设置字体大小font-size: 5.3333vw;（40px）\",\"其他属性设置时则参照字体大小进行设置：像素值/40 rem\"]},\"651\":{\"h\":\"三、响应式布局\",\"t\":[\"网页可以根据不通的设备或窗口大小呈现出不同的效果，使用响应式布局，可以使一个网页适用于所有设备。 响应布局的关键就是媒体查询，通过媒体查询，可以为不同的设备，或设备不同的状态来分别设置样式。\",\"语法： @media 查询规则{}\",\"媒体类型\",\"all 所有设备\",\"print 打印设备\",\"screen 带屏幕的设备\",\"speech 屏幕阅读器\",\"可以使用,连接多个媒体类型，这样它们之间就是一个或的关系\",\"媒体特性\",\"width 视口的宽度、 height 视口的高度\",\"min-width 视口的最小宽度（视口大于指定宽度时生效）\",\"max-width 视口的最大宽度（视口小于指定宽度时生效）\",\"样式切换的分界点，我们称其为断点，也就是网页的样式会在这个点时发生变化\",\"一般比较常用的断点\",\"小于 768 超小屏幕 max-width=768px\",\"大于 768 小屏幕 min-width=768px\",\"大于 992 中型屏幕 min-width=992px\",\"大于 1200 大屏幕 min-width=1200px\",\"@media only screen and (min-width: 500px) and (max-width: 700px) { body { background-color: #bfa; } }\",\"​\"]},\"652\":{\"c\":[\"前端\"]},\"653\":{\"c\":[\"CSS\",\"移动端适配\",\"Animation\",\"响应式\"]},\"654\":{\"h\":\"html初级笔记\"},\"655\":{\"h\":\"一、前置知识\"},\"656\":{\"h\":\"1. 网页结构\",\"t\":[\"结构-HTML\",\"表现-CSS\",\"行为-JavaScript\"]},\"657\":{\"h\":\"2. HTML 页面的基本结构\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"utf-8\\\" /> <title>我的测试站点</title> </head> <body> <!-- 注释 --> <p id=\\\"page\\\">这是我的页面</p> </body> </html>\",\"<!DOCTYPE html>: 声明文档类型\",\"<html></html>、<head></head>...: 一对一对的尖括号，称之为标签\",\"id=\\\"page\\\"...: 属性，用来包含元素的额外信息，这些信息不会出现在实际的内容中\",\"<!-- 注释 -->：注释\"]},\"658\":{\"h\":\"二、实体\",\"t\":[\"在 HTML 中有些时候，我们不能直接书写一些特殊符号。比如：多个连续的空格（默认多个连续的空格会合并成一个空格），比如字母两侧的大于和小于号。如果我们需要在网页中书写这些特殊的符号，则需要使用 html 中的实体（转义字符）。\",\"实体的语法：&实体的名字;\",\"等价字符引用\",\"原义字符\",\"&nbsp\",\"空格\",\"&gt\",\"大于号\",\"&lt\",\"小于号\",\"&copy\",\"版权符号\"]},\"659\":{\"h\":\"三、meta 元素（元数据）\",\"t\":[\"用于设置网页中的一些元数据，展示给浏览器看的内容。\",\"charset 指定网页的字符集<meta charset=\\\"UTF-8\\\">\",\"name 指定数据的类型、content 指定数据的内容\",\"<meta name=\\\"Keywords\\\" content=\\\"网上购物,网上商城\\\" /> <!--网页关键字，作为搜索引擎搜索时依据的关键词 --> <meta name=\\\"description\\\" content=\\\"京东JD.COM-专业的综合网上购物商城\\\" /> <!--网站的描述,作为搜索结果的相关描述，会显示在搜索引擎的搜索的结果中 -->\",\"title 网站被搜索引擎检索时的标题 <title>Document</title>\",\"引入 css 文件 <link rel=\\\"stylesheet\\\" href=\\\"my-css-file.css\\\">\",\"当然在实际使用中，你会发现许多其他类型的元数据。你在网站上看到的很多功能都是专有创作，旨在向某些网站（如社交网站）提供可使用的特定信息。\",\"<meta name=\\\"twitter:title\\\" content=\\\"Mozilla Developer Network\\\" />\"]},\"660\":{\"h\":\"四、 语义化标签\"},\"661\":{\"h\":\"1. 块级元素\",\"t\":[\"块级元素在页面中以块的形式展现 —— 相对于其前面的内容它会出现在新的一行，其后的内容也会被挤到下一行展现。块级元素通常用于展示页面上结构化的内容，例如段落、列表、导航菜单、页脚等等。\",\"eg：h1~h6（标题）、p（段落）\",\"一个块级元素不会嵌套在一个内联元素里面，但它可能嵌套在另一个块级元素里面。\",\"之所以他们独占一行是因为浏览器的默认样式中将其设置为display: block;\"]},\"662\":{\"h\":\"2. 内联元素\",\"t\":[\"内联元素通常出现在块级元素中并环绕文档内容的一小部分，而不是一整个段落或者一组内容。内联元素不会导致文本换行，它通常出现在一堆文字之间。\",\"eg：em（强调）、strong（粗体）、q(行内引用)、blockquote（块引用）、a（超链接）\",\"image-20221126101045761\",\"常用的一些语义化标签（分割线上方为 H5 新加的标签）\",\"<header></header> <main></main> <footer></footer> <nav></nav> <aside></aside> <article></article> <section></section> ------------------------------------------------ <div></div> <span></span>\"]},\"663\":{\"h\":\"3. 列表\",\"t\":[\"ul>li 无序\",\"ol>li 有序\",\"dl>dt>dd 定义列表\"]},\"664\":{\"h\":\"4. 超链接\",\"t\":[\"超链接使我们能够将我们的文档链接到任何其他文档（或其他资源），也可以链接到文档的指定部分。\",\"<a href=\\\".html or url\\\" target=\\\"_blank\\\" （新页面）>超链接</a> <!-- href=\\\"#(顶端)、#(id)跳转到指定地方\\\" -->\",\"当然我们可以将任何内容通过包裹在 a 标签中从而转为超链接。\",\"我们为iframe标签设置name属性，则可以使用target=\\\"属性值\\\"来将打开的链接传到iframe中\",\"URL 可以指向 HTML 文件、文本文件、图像、文本文档、视频和音频文件以及可以在网络上保存的任何其他内容。如果浏览器不知道如何显示或处理文件，它会询问你是否要打开文件（需要选择合适的本地应用来打开或处理文件）或下载文件（以后处理它）。\"]},\"665\":{\"h\":\"5. 缩略语\",\"t\":[\"<abbr>: 它常被用来包裹一个缩略语或缩写，并且提供缩写的解释（包含在title属性中）。\",\"<p> NASA 做了一些 <abbr title=\\\"chengyu\\\">动人心弦</abbr> 的事情。 </p>\",\"image-20230818113521357\"]},\"666\":{\"h\":\"6. 图片标签\",\"t\":[\"<img src=\\\"./img/1.gif\\\" alt=\\\"松鼠\\\" />\",\"src: 图片路径\",\"alt：图片的描述，默认情况下不会显示，有些浏览器会在图片无法加载时显示，搜索引擎会根据 alt 中的内容来识别图片，如果不写 alt 属性则图片不会被搜索引擎所收录\",\"图片的格式：jpg、gif、png、webp、base64 。效果一样，用小的；效果不一样，用效果好的。\",\"当我们需要对图片补充一些说明性的文字时，一般会在 img 标签下添加一个 p 标签，但从语义的角度上来讲，<img>和<p> 并没有什么联系，在 H5 中，提供了<figure>和<figcaption>，专门用来解决这种问题。\",\"<figure> <img src=\\\"https://raw.githubusercontent.com/mdn/learning-area/master/html/multimedia-and-embedding/images-in-html/dinosaur_small.jpg\\\" alt=\\\"一只恐龙头部和躯干的骨架，它有一个巨大的头，长着锋利的牙齿。\\\" width=\\\"400\\\" height=\\\"341\\\" /> <figcaption>曼彻斯特大学博物馆展出的一只霸王龙的化石</figcaption> </figure>\",\"image-20230818113801274\"]},\"667\":{\"h\":\"7. 内联框架\",\"t\":[\"用于向当前页面中引入一个其他页面\",\"<iframe src=\\\"https://www.qq.com\\\" width=\\\"800\\\" height=\\\"600\\\" frameborder=\\\"0\\\"></iframe>\",\"src : 指定要引入的网页的路径\",\"frameborder : 指定内联框架的边框\"]},\"668\":{\"h\":\"8. 音视频\",\"t\":[\"此为 H5 新加的标签，具体的使用可以参考音视频，以下为简单介绍。\",\"用来向页面中引入一个外部的音频文件\",\"属性：\",\"controls 是否允许用户控制播放\",\"autoplay 音频文件是否自动播放 \",\"如果设置了 autoplay ,则音乐在打开页面时会自动播放\",\"但是目前来讲大部分浏览器都不会自动对音乐进行播放\",\"loop 音乐是否循环播放\",\"<audio controls> <!-- 对不起，您的浏览器不支持播放音频！请升级浏览器！ --> <source src=\\\"./source/audio.mp3\\\" /> <source src=\\\"./source/audio.ogg\\\" /> <!-- 老版本支持的标签 --> <embed src=\\\"./source/audio.mp3\\\" type=\\\"audio/mp3\\\" width=\\\"300\\\" height=\\\"100\\\" /> </audio>\"]},\"669\":{\"h\":\"9. 表格\",\"t\":[\"在现实生活中，我们经常需要使用表格来表示一些格式化数据：课程表、人名单、成绩单....， 同样在网页中我们也需要使用表格，我们通过table标签来创建一个表格。\",\"<table> <thead> <!-- 头部 --> <tr> <!-- 在table中使用tr表示表格中的一行，有几个tr就有几行 --> <th></th> </tr> </thead> <tbody> <!-- 主体 --> <tr> <td></td> <!-- 在tr中使用td表示一个单元格，有几个td就有几个单元格 --> </tr> </tbody> <tfoot></tfoot> <!-- 底部 --> </table>\",\"<td rowspan=\\\"2\\\"></td>:纵向合并单元格\",\"<td colspan=\\\"2\\\"></td>:横向合并单元格\",\"border-spacing: 指定边框之间的距离（css 样式）\",\"border-collapse: collapse; 设置边框的合并（css 样式）\",\"如果表格中没有使用 tbody 而是直接使用 tr，那么浏览器会自动创建一个 tbody，并且将 tr 全都放到 tbody 中。tr 并不是 table 的子元素\",\"默认情况下元素在 td 中是垂直居中的，table 的单元格内元素垂直居中可以利用vertical-align 来设置。\",\"设置垂直居中的一种方式：\",\"display: table-cell; /* 将元素设置为单元格 td */ vertical-align: middle;\"]},\"670\":{\"h\":\"10. 表单\",\"t\":[\"在现实生活中表单用于提交数据，同样在网页中也可以使用表单，网页中的表单用于将本地的数据提交给远程的服务器，我们使用form标签来创建一个表单。\",\"<form action=\\\"target.html\\\"> <!-- action 表单要提交的服务器的地址 --> <input type=\\\"text\\\" name=\\\"username\\\" /> 文本框 <input type=\\\"password\\\" name=\\\"password\\\" /> 密码框 <input type=\\\"radio\\\" name=\\\"hello\\\" value=\\\"a\\\" checked /> 单选按钮 <input type=\\\"checkbox\\\" name=\\\"test\\\" value=\\\"1\\\" /> 多选框 <!-- 下拉列表 --> <select name=\\\"haha\\\"> <option value=\\\"i\\\">选项一</option> <option selected value=\\\"ii\\\">选项二</option> </select> <!-- 提交按钮 --> <input type=\\\"submit\\\" value=\\\"注册\\\" /> </form>\",\"注意：文本框和密码框必须指定 name 属性\",\"选择框必须要指定一个 value 属性，value 属性最终会作为用户填写的值传递给服务器 \",\"checked 可以将单选按钮设置为默认选中\",\"选择框必须指定 name 和 value 值才能向服务器传入数据\",\"</form> <!-- input的其他属性： autocomplete=\\\"off\\\" 关闭自动补全 readonly 将表单项设置为只读，数据会提交 disabled 将表单项设置为禁用，数据不会提交 autofocus 设置表单项自动获取焦点 --> <input type=\\\"submit\\\"> <input type=\\\"reset\\\"> <input type=\\\"button\\\" value=\\\"按钮\\\"> <button type=\\\"submit\\\">提交</button> <button type=\\\"reset\\\">重置</button> <button type=\\\"button\\\">按钮</button> </form>\"]},\"671\":{\"h\":\"11. 嵌入元素\",\"t\":[\"常用的嵌入元素有两种：<object>、<embed>。他们都是可替换元素，将外部内容嵌入文档中的指定位置，这个资源可能是一张图片，一个嵌入的浏览上下文，亦或是一个插件所使用的资源。\"]},\"672\":{\"h\":\"(1). object\",\"t\":[\"<object data=\\\"move.swf\\\" type=\\\"application/x-shockwave-flash\\\"> <param name=\\\"foo\\\" value=\\\"bar\\\" /> </object>\",\"嵌入一个 flash 程序，data指的是资源内容的 url，type为指定资源的 MIME 类型。\",\"param用来为指定资源进行传参\"]},\"673\":{\"h\":\"(2). embed\",\"t\":[\"<embed type=\\\"application/x-shockwave-flash\\\" src=\\\"movie.mov\\\" width=\\\"640\\\" height=\\\"480\\\" />\"]},\"674\":{\"h\":\"(3). 更加兼容的做法\",\"t\":[\"<object data=\\\"move.swf\\\" type=\\\"application/x-shockwave-flash\\\"> <param name=\\\"foo\\\" value=\\\"bar\\\" /> <embed type=\\\"application/x-shockwave-flash\\\" src=\\\"movie.mov\\\" width=\\\"640\\\" height=\\\"480\\\" /> </object>\"]},\"675\":{\"h\":\"12. script 标签\",\"t\":[\"用来加载 js 文件或 js 代码，当浏览器解析时，默认遇到 script 标签会暂停解析，等下载执行完毕之后再接着解析。\",\"image-20230818160749507\",\"当然我们可以使用<script src='xxx' async></script>来异步加载 js 文件；或使用<script src='xxx' defer></script>延迟加载 js 文件。参考 图解 script 标签中的 async 和 defer 属性。\"]},\"676\":{\"c\":[\"前端\"]},\"677\":{\"c\":[\"html\"]},\"678\":{\"h\":\"attribute和property\"},\"679\":{\"h\":\"一、定义\"},\"680\":{\"h\":\"1. attribute\",\"t\":[\"html 标签的预定义和自定义属性我们统称为 attribute（html 概念）\",\"只要是 DOM 标签中出现的属性（html 代码），都是Attribute\",\"image-20221123100921950\",\"有些常用特性（id、class、title 等预定义属性），会被转化为Property，而自定义的属性不会\",\"image-20221123101054215\",\"class 特性在变成属性时，名字会变成“className”\",\"attribute 的值只能够是字符串 ，使用 setAttribute 函数设置的值总是会被字符串化，例如：\",\"el.setAttribute('disabled', false); // 等同于 el.setAttribute('disabled', 'false');\"]},\"681\":{\"h\":\"2. property\",\"t\":[\"js 原生对象的直接属性，我们统称为property（js 概念）\",\"js 中 property 泛指对象的属性\",\"attributes 是属于 property 的一个子集\",\"const el = document.querySelector('#my-input'); el.xxx;\",\"很多 HTML Attributes 在 DOM 对象上有与之同名的 DOM Propertiess，例如 id=\\\"my-input\\\" 对 应 el.id，type=\\\"text\\\" 对应 el.type，value=\\\"foo\\\" 对应 el.value 等。但 DOM Properties 与 HTML Attributes 的名字不总是一 模一样的 ，例如：\",\"<div class=\\\"foo\\\"></div>\",\"class=\\\"foo\\\" 对应的 DOM Properties 则是 el.className。另 外， 并不是所有 HTML Attributes 都有与之对应的 DOM Properties ，例 如：\",\"<div aria-valuenow=\\\"75\\\"></div>\",\"aria-* 类的 HTML Attributes 就没有与之对应的 DOM Properties。\",\"类似地，也不是所有 DOM Properties 都有与之对应的 HTML Attributes，例如可以用 el.textContent 来设置元素的文本内容， 但并没有与之对应的 HTML Attributes 来完成同样的工作。\",\"HTML Attributes 的值与 DOM Properties 的值之间是有关联的，大致可以认为：\",\"HTML Attributes 的作用是设置与之对应的 DOM Pr operties 的初始值\"]},\"682\":{\"h\":\"二、布尔值属性与非布尔值属性\",\"t\":[\"property 的属性值为布尔类型的 我们统称为布尔值属性\",\"property 的属性值为非布尔类型的 我们统称为非布尔值属性\"]},\"683\":{\"h\":\"三、attribute 和 property 的同步关系（预定义属性）\",\"t\":[\"非布尔值属性：实时同步\",\"布尔值属性（true/false）\",\"property 永远都不会同步给 attribute\",\"在没有动过 property 的情况下（保持默认状态），attribute 会同步给 property（只有初始时同步一次）\",\"在动过 property 的情况下，attribute 不会同步给 property（此时浏览器页面不会同步对 attribute 的修改）\"]},\"684\":{\"h\":\"四、操作对象\",\"t\":[\"用户操作的是 property（界面的交互）； 浏览器认的也是 property（只认）\"]},\"685\":{\"h\":\"五、attribute 的一些方法\",\"t\":[\"操作类名的添加、删除与切换\",\"var testNode = document.querySelector('#test'); //classList属于property testNode.classList.add('class4'); testNode.classList.remove('class1'); testNode.classList.toggle('class2'); console.log(testNode.classList);\",\"获取并修改自定义属性的值\",\"<!-- 在自定义属性的名字前加data- --> <div id=\\\"test\\\" data-atguigu-qhf=\\\"qhf\\\"></div>\",\"var testNode = document.querySelector('#test'); console.log(testNode.dataset.atguiguQhf); //驼峰命名 testNode.dataset.atguiguQhf = '111';\",\"使标签中的文本可编辑\",\"<div id=\\\"test\\\" contenteditable=\\\"true\\\">djhaldhaskj</div>\"]},\"686\":{\"h\":\"六、总结\",\"t\":[\"布尔值属性最好使用 prop 方法非布尔值属性则使用 attr 方法\"]},\"687\":{\"c\":[\"前端\"]},\"688\":{\"c\":[\"attribute\"]},\"689\":{\"h\":\"H5笔记\"},\"690\":{\"h\":\"一、HTML5 和之前的一些区别\"},\"691\":{\"h\":\"1. 文档类型说明\",\"t\":[\"HTML5 文档声明如下：\",\"<!DOCTYPE html>\",\"加上为标准模式，不加为怪异模式\",\"其实 ie9 以上两种渲染模式在渲染方面基本没有明显区别\",\"HTML4 文档声明如下：\",\"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD HTML 4.01//EN\\\"``\\\"http://www.w3.org/TR/html4/strict.dtd\\\">\",\"DTD: 告诉浏览器怎样规范代码\"]},\"692\":{\"h\":\"2. 根元素\",\"t\":[\"以前的：<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" lang=\\\"en\\\"></html>\",\"现在的：<html></html>\",\"xmlns：这是 XHTML1.0 的东西，它的意思是在这个页面上的元素都位于http://www.w3.org/1999/xhtml这个命名空间内,但是HTML5中的每个元素都具有这个命名空间，不需要在页面上再显示指出。\"]},\"693\":{\"h\":\"3. head 元素\",\"t\":[\"以前的：<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\" />\",\"现在的：<meta charset=\\\"UTF-8\\\">\",\"Content-Type：text/html 表明的是这个页面的“内容类型”或者称为MIME 类型。这个头信息将唯一确定某个资源的本质是什么，也决定了它应该如何被呈现。\",\"任何资源都有自己的 MIME 类型，整个 web 都依靠 MIME 类型来运作\",\"HTML5 中在资源的请求头中添加了 Content-Type，不再需要自己手动标明\"]},\"694\":{\"h\":\"二、语义化标签\",\"t\":[\"在 HTML 5 出来之前，我们用 div 来表示页面头部，章节，页脚等。但是这些 div 都没有实际意义。各大浏览器厂商分析了上百万的页面，从中发现了 DIV 名称的通用 id 名称大量重复。例如，很多开发人员喜欢使用div id=\\\"footer\\\"来标记页脚内容，所以 Html5 元素引入了语义化标签（一组新的片段类元素）\",\"<hgroup></hgroup> <!--hgroup元素代表 网页 或 section 的标题，当元素有多个层级时，该元素可以将h1到h6元素放在其内，譬如文章的主标题和副标题的组合--> <header></header> <!--header 元素代表 网页 或 section 的页眉。通常包含h1-h6元素或hgroup--> <nav></nav> <!-- nav元素代表页面的导航链接区域。用于定义页面的主要导航部分 --> <section></section> <!-- section元素代表文档中的节或段，段可以是指一篇文章里按照主题的分段；节可以是指一个页面里的分组 --> <footer></footer> <!-- footer元素代表网页或section 的页脚，通常含有该节的一些基本信息，譬如：作者，相关文档链接，版权资料 --> <article></article> <aside></aside>\"]},\"695\":{\"h\":\"三、其他新增标签\"},\"696\":{\"h\":\"1. 状态标签\",\"t\":[\"meter:用来显示已知范围的标量值或者分数值。 \",\"value:当前的数值。\",\"min:值域的最小边界值。如果设置了，它必须比最大值要小。如果没设置，默认为 0\",\"max:值域的上限边界值。如果设置了，它必须比最小值要大。如果没设置，默认为 1\",\"low:定义了低值区间的上限值,如果设置了，它必须比最小值属性大，并且不能超过 high 值和最大值。未设置或者比最小值还要小时，其值即为最小值。\",\"high:定义了高值区间的下限值。如果设置了，它必须小于最大值，同时必须大于 low 值和最小值。如果没有设置，或者比最大值还大，其值即为最大值。\",\"optimum:这个属性用来指示最优/最佳取值。\",\"示例代码\",\"<meter value=\\\"60\\\" min=\\\"20\\\" max=\\\"100\\\"></meter> <meter value=\\\"80\\\" min=\\\"20\\\" max=\\\"100\\\" low=\\\"40\\\" high=\\\"60\\\"></meter> <meter value=\\\"30\\\" min=\\\"20\\\" max=\\\"100\\\" low=\\\"40\\\" high=\\\"60\\\" optimum=\\\"80\\\"></meter>\",\"效果图\",\"image-20221128114108465\",\"progress:用来显示一项任务的完成进度 \",\"max:该属性描述了这个 progress 元素所表示的任务一共需要完成多少工作.\",\"value：该属性用来指定该进度条已完成的工作量。如果没有 value 属性,则该进度条的进度为\\\"不确定\\\",也就是说,进度条不会显示任何进度,你无法估计当前的工作会在何时完成\"]},\"697\":{\"h\":\"2. 列表标签\",\"t\":[\"datalist:datalist 会包含一组 option 元素，这些元素表示其表单控件的可选值,它的 id 必须要和 input 中的 list 一致\",\"示例代码\",\"<input type=\\\"text\\\" placeholder=\\\"你最喜欢的数字是？\\\" list=\\\"nums\\\"></input> <datalist id=\\\"nums\\\"> <option value=\\\"1\\\">1</option> <option value=\\\"2\\\">2</option> <option value=\\\"3\\\">3</option> <option value=\\\"4\\\">4</option> </datalist>\",\"效果图\",\"image-20221128114539798\",\"details: 一个 ui 小部件，用户可以从其中检索附加信息。 \",\"open 属性来控制附加信息的显示与隐藏\",\"summary:用作 一个<details>元素的一个内容摘要（标题）\",\"示例代码\",\"<details> <summary>经典台词</summary> <p>任何时间</p> <p>任何地点</p> <p>超级侦探，认真办案</p> </details>\",\"效果图\",\"image-20221128114902131\"]},\"698\":{\"h\":\"3. 注释标签\",\"t\":[\"​ ruby ​ rt: 展示文字注音或字符注释。\"]},\"699\":{\"h\":\"4. 标记标签\",\"t\":[\"marK:着重\"]},\"700\":{\"h\":\"四、canvas 的基本用法\"},\"701\":{\"h\":\"1. 什么是 canvas(画布)\",\"t\":[\"<canvas> 是 HTML5 新增的元素，可用于通过使用 JavaScript 中的脚本来绘制图形。例如，它可以用于绘制图形，创建动画。<canvas> 最早由 Apple 引入 WebKit。我们可以使用<canvas>标签来定义一个 canvas 元素\",\"使用<canvas>标签时，建议要成对出现，不要使用闭合的形式。\",\"canvas 元素默认具有高宽 width： 300px height：150px\"]},\"702\":{\"h\":\"2. 替换内容\",\"t\":[\"<canvas>很容易定义一些替代内容。由于某些较老的浏览器（尤其是 IE9 之前的 IE 浏览器）不支持 HTML 元素\\\"canvas\\\"，但在这些浏览器上你应该要给用户展示些替代内容。这非常简单：我们只需要在<canvas>标签中提供替换内容就可以。\",\"支持<canvas>的浏览器将会忽略在容器中包含的内容，并且只是正常渲染 canvas。\",\"不支持<canvas>的浏览器会显示代替内容\"]},\"703\":{\"h\":\"3. canvas 标签属性\",\"t\":[\"canvas 标签的两个属性<canvas> 看起来和 <img> 元素很相像，唯一的不同就是它并没有 src 和 alt 属性。实际上，<canvas> 标签只有两个属性—— width 和 height。这些都是可选的。当没有设置宽度和高度的时候，canvas 会初始化宽度为 300 像素和高度为 150 像素。\",\"画布的高宽 html 属性设置 width height 时只影响画布本身而不影响画布内容 css 属性设置 width height 时不但会影响画布本身的高宽，还会使画布中的内容等比例缩放（缩放参照于画布默认的尺寸）\"]},\"704\":{\"h\":\"4. 渲染上下文\",\"t\":[\"<canvas> 元素只是创造了一个固定大小的画布，要想在它上面去绘制内容，我们需要找到它的渲染上下文，<canvas> 元素有一个叫做 getContext() 的方法，这个方法是用来获得渲染上下文和它的绘画功能（画笔）。\",\"getContext()只有一个参数，上下文的格式\",\"获取方式\",\"var canvas = document.getElementById('box'); var ctx = canvas.getContext('2d');\",\"检查支持性\",\"var canvas = document.getElementById('tutorial'); if (canvas.getContext) { var ctx = canvas.getContext('2d'); }\"]},\"705\":{\"h\":\"五、canvas 绘制矩形（默认 api）\",\"t\":[\"HTML 中的元素 canvas 只支持一种原生的图形绘制：矩形。所有其他的图形的绘制都至少需要生成一条路径\"]},\"706\":{\"h\":\"1. 绘制矩形\",\"t\":[\"canvas 提供了三种方法绘制矩形：\",\"绘制一个填充的矩形（填充色默认为黑色） fillRect(x, y, width, height)\",\"image-20221123121002884\",\"绘制一个矩形的边框（默认边框为:一像素实心黑色） strokeRect(x, y, width, height)\",\"image-20221123120822512\",\"清除指定矩形区域，让清除部分完全透明。 clearRect(x, y, width, height)\",\"image-20221123121209574\",\"在填充矩形的基础上清除中间区域\",\"clearRect 是在画布上绘制了一个与底色相同的边框\",\"x 与 y 指定了在 canvas 画布上所绘制的矩形的左上角（相对于原点）的坐标。 width 和 height 设置矩形的尺寸。（存在边框的话，边框会在 width 上占据一个边框的宽度，height 同理）\"]},\"707\":{\"h\":\"2. strokeRect 时，边框像素渲染问题\",\"t\":[\"按理渲染出的边框应该是 1px 的，canvas 在渲染矩形边框时，边框宽度是平均分在偏移位置的两侧。 context.strokeRect(10,10,50,50)\",\"边框会渲染在 10.5 和 9.5 之间,浏览器是不会让一个像素只用自己的一半的,相当于边框会渲染在 9 到 11 之间\",\"context.strokeRect(10.5,10.5,50,50)\",\"边框会渲染在 10 到 11 之间\"]},\"708\":{\"h\":\"3. 添加样式和颜色\",\"t\":[\"fillStyle:设置图形的填充颜色。\",\"strokeStyle :设置图形轮廓的颜色。默认情况下，线条和填充颜色都是黑色（CSS 颜色值 #000000）\",\"lineWidth : 这个属性设置当前绘线的粗细。属性值必须为正数。描述线段宽度的数字。 0、 负数、 Infinity 和 NaN 会被忽略。默认值是 1.0。\",\"lineWidth & 覆盖渲染\",\"后绘制的矩形会覆盖之前绘制的矩形（同步思想）\",\"lineJoin 设定线条与线条间接合处的样式（默认是 miter）\",\"round : 圆角\",\"bevel : 斜角\",\"miter : 直角\",\"lineCap\",\"lineCap 是 Canvas 2D API 指定如何绘制每一条线段末端的属性。有 3 个可能的值，分别是：\",\"butt :线段末端以方形结束。\",\"round :线段末端以圆形结束（在原有线段的基础上相加）\",\"square:线段末端以方形结束，但是增加了一个宽度和线段相同，高度是线段厚度一半的矩形区域。\",\"默认值是 butt。\"]},\"709\":{\"h\":\"六、canvas 绘制路径\",\"t\":[\"图形的基本元素是路径。路径是通过不同颜色和宽度的线段或曲线相连形成的不同形状的点的集合。\"]},\"710\":{\"h\":\"1. 步骤\",\"t\":[\"首先，你需要创建路径起始点。\",\"然后你使用画图命令去画出路径\",\"之后你把路径封闭。\",\"一旦路径生成，你就能通过描边或填充路径区域来渲染图形。\"]},\"711\":{\"h\":\"2. 路径流程的 api\",\"t\":[\"beginPath() 新建一条路径，生成之后，图形绘制命令被指向到路径上准备生成路径。\",\"生成路径的第一步叫做 beginPath()。本质上，路径是由很多子路径构成，这些子路径都是在一个列表中，所有的子路径（线、弧形、等等）构成图形。而每次这个方法调用之后，列表清空重置，然后我们就可以重新绘制新的图形。\",\"每次调用路径 api 时,都会往路径容器里做登记。调用 beginPath 时,清空整个路径容器\",\"moveTo(x, y) 将笔触移动到指定的坐标（x，y）上当 canvas 初始化或者 beginPath()调用后，你通常会使用 moveTo()函数设置起点\",\"lineTo(x, y) 绘制一条从当前位置到指定（x，y）位置的直线（原理上存在的线，其实在此处并没有渲染出来）\",\"closePath() 闭合路径之后图形绘制命令又重新指向到上下文中。\",\"闭合路径 closePath(),不是必需的。这个方法会通过绘制一条从当前点到开始点的直线来闭合图形。如果图形是已经闭合了的，即当前点为开始点，该函数什么也不做\",\"当你调用 fill()函数时，所有没有闭合的形状都会自动闭合，所以你不需要调用 closePath()函数。但是调用 stroke()时不会自动闭合\",\"stroke() 通过线条来绘制图形轮廓。不会自动调用 closePath()\",\"fill() 通过填充路径的内容区域生成实心的图形。自动调用 closePath()合并路径\",\"save()\",\"save() 是 Canvas 2D API 通过将当前状态放入栈中，保存 canvas 全部状态的方法。\",\"保存到栈中的绘制状态有下面部分组成：当前的变换矩阵。当前的剪切区域。当前的虚线列表。以下属性当前的值（样式）： \",\"strokeStyle,fillStyle,lineWidth,lineCap,lineJoin...\",\"restore()\",\"restore() 是 Canvas 2D API 通过在绘图状态栈中弹出顶端的状态，将 canvas 恢复到最近的保存状态的方法。如果没有保存状态，此方法不做任何改变。\"]},\"712\":{\"h\":\"3. 样式容器和样式栈\",\"t\":[\"样式容器：\",\"每次调用样式 api 时,都会往样式容器里做登记\",\"调用 save 时候,将样式容器里的状态压入样式栈\",\"调用 restore 时候,将样式栈的栈顶状态弹出到样式样式容器里,进行覆盖\",\"样式栈：\",\"调用 save 时候,将样式容器里的状态压入样式栈\",\"调用 restor 时候,将样式栈的栈顶状态弹出到样式样式容器里,进行覆盖\"]},\"713\":{\"h\":\"4. canvas 编写的基本模板\",\"t\":[\"var canvas = document.querySelector('#test'); if (canvas.getContext) { var ctx = canvas.getContext('2d'); ctx.save(); //关于样式的设置 ctx.beginPath(); //关于路径的设置 ctx.restore(); ctx.save(); //关于样式的设置 ctx.beginPath(); //关于路径 ctx.fill(); ctx.restore(); }\",\"save restore 成对出现，起到了作用域的效果，将有关样式的设置局限在作用域中\"]},\"714\":{\"h\":\"5. 绘制矩形\",\"t\":[\"rect(x, y, width, height)\",\"绘制一个左上角坐标为（x,y），宽高为 width 以及 height 的矩形。当该方法执行的时候，moveTo()方法自动设置坐标参数（0,0）。也就是说，当前笔触自动重置回默认坐标。\"]},\"715\":{\"h\":\"6. 绘制曲线\"},\"716\":{\"h\":\"canvas 绘制圆形\",\"t\":[\"arc(x, y, radius, startAngle, endAngle, anticlockwise)\",\"画一个以（x,y）为圆心的以 radius 为半径的圆弧（圆），从 startAngle 开始到 endAngle 结束，按照 anticlockwise 给定的方向（默认为顺时针）来生成。\",\"ture：逆时针; false:顺时针\",\"x,y 为绘制圆弧所在圆上的圆心坐标; radius 为半径; startAngle 以及 endAngle 参数用弧度定义了开始以及结束的弧度。这些都是以 x 轴为基准;\",\"弧度radians=(Math.PI/180)*degrees\",\"参数 anticlockwise 为一个布尔值。为 true 时，是逆时针方向，否则顺时针方向。\"]},\"717\":{\"h\":\"canvas 绘制弧线\",\"t\":[\"arcTo(x1, y1, x2, y2, radius)\",\"根据控制点和半径绘制圆弧路径，使用当前的描点 (前一个 moveTo 或 lineTo 等函数的止点)。根据当前描点与给定的控制点 1 连接的直线，和控制点 1 与控制点 2 连接的直线，作为使用指定半径的圆的切线，画出两条切线之间的弧线路径。\",\"image-20221123150443073\"]},\"718\":{\"h\":\"canvas 绘制二次贝塞尔曲线\",\"t\":[\"quadraticCurveTo(cp1x, cp1y, x, y)\",\"绘制二次贝塞尔曲线，cp1x,cp1y 为一个控制点(P1)，x,y 为结束点(P2)。起始点为 moveto 时指定的点(P0)。\",\"img\"]},\"719\":{\"h\":\"canvas 绘制三次贝塞尔曲线\",\"t\":[\"bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)\",\"绘制三次贝塞尔曲线，cp1x,cp 1y 为控制点一(P1)，cp2x,cp2y 为控制点二(P2)，x,y 为结束点(P3)。起始点为 moveto 时指定的点(P0)。\",\"img\"]},\"720\":{\"h\":\"七、canvas 中的变换\",\"t\":[\"translate(x, y) 我们先介绍 translate 方法，它用来移动 canvas 的原点到一个不同的位置。 translate 方法接受两个参数。x 是左右偏移量，y 是上下偏移量，\",\"在 canvas 中 translate 是累加的\",\"rotate(angle) 这个方法只接受一个参数：旋转的角度(angle)，它是顺时针方向的，以弧度为单位的值。 旋转的中心点始终是 canvas 的原点，如果要改变它，我们需要用到 translate 方法\",\"在 canvas 中 rotate 是累加的\",\"scale(x, y) scale 方法接受两个参数。x,y 分别是横轴和纵轴的缩放因子，它们都必须是正值。 值比 1.0 小表示缩小，比 1.0 大则表示放大，值为 1.0 时什么效果都没有。 缩放一般我们用它来增减图形在 canvas 中的像素数目，对形状，位图进行缩小或者放大。\",\"在 canvas 中 scale 是累加的\",\"css 的像素面积变大,区域内 css 的像素数目减少\"]},\"721\":{\"h\":\"八、canvas-绘制图片\"},\"722\":{\"h\":\"1. 插入图片\",\"t\":[\"canvas 操作图片时，必须要等图片加载完才能操作\",\"drawImage(image, x, y, width, height) 其中 image 是 image 或者 canvas 对象，x 和 y 是其在目标 canvas 里的起始坐标。这个方法多了 2 个参数：width 和 height，这两个参数用来控制 当像 canvas 画入时应该缩放的大小\"]},\"723\":{\"h\":\"2. 设置背景\",\"t\":[\"createPattern(image, repetition) image:图像源 repetition:\",\"\\\"repeat\\\"\",\"\\\"repeat-x\\\"\",\"\\\"repeat-y\\\"\",\"\\\"no-repeat\\\"\",\"一般情况下，我们都会将createPattern返回的对象作为fillstyle的值\"]},\"724\":{\"h\":\"3. 渐变\"},\"725\":{\"h\":\"canvas 渐变（线性渐变）\",\"t\":[\"createLinearGradient(x1, y1, x2, y2)\",\"表示渐变的起点 (x1,y1) 与终点 (x2,y2)\",\"gradient.addColorStop(position, color)\",\"gradient：createLinearGradient 的返回值\",\"addColorStop 方法接受 2 个参数， \",\"position 参数必须是一个 0.0 与 1.0 之间的数值，表示渐变中颜色所在的相对位置。例如，0.5 表示颜色会出现在正中间。\",\"color 参数必须是一个有效的 CSS 颜色值（如 #FFF， rgba(0,0,0,1)，等等）\",\"示例代码\",\"var gradient = ctx.createLinearGradient(0, 0, 300, 300); gradient.addColorStop(0, 'red'); gradient.addColorStop(0.5, 'yellow'); gradient.addColorStop(0.7, 'pink'); gradient.addColorStop(1, 'green'); ctx.fillStyle = gradient; ctx.fillRect(0, 0, 300, 300);\",\"效果图\",\"image-20221123201921994\"]},\"726\":{\"h\":\"canvas 渐变（径向渐变）\",\"t\":[\"createRadialGradient(x1, y1, r1, x2, y2, r2)\",\"前三个参数则定义另一个以(x1,y1) 为原点，半径为 r1 的圆，\",\"后三个参数则定义另一个以 (x2,y2) 为原点，半径为 r2 的圆。\",\"示例代码\",\"var gradient = ctx.createRadialGradient(150, 150, 50, 150, 150, 100); gradient.addColorStop(0, 'red'); gradient.addColorStop(0.5, 'yellow'); gradient.addColorStop(0.7, 'pink'); gradient.addColorStop(1, 'green'); ctx.fillStyle = gradient; ctx.fillRect(0, 0, 300, 300);\",\"效果图\",\"image-20221123202620132\"]},\"727\":{\"h\":\"4. 飞鸟实例实现\",\"t\":[\"实例代码\",\"window.onload = function () { const bird = document.getElementById('bird'); bird.width = document.documentElement.clientWidth; bird.height = document.documentElement.clientHeight; if (bird.getContext) { const ctx = bird.getContext('2d'); let img = new Image(); let index = 0; let move = 0; setInterval(function () { ctx.clearRect(0, 0, bird.width, bird.height); index = ++index % 9 || 1; move += 10; img.src = `img/q_r${index}.jpg`; img.onload = function () { ctx.drawImage(img, move, 0); }; }, 100); } };\",\"效果图\"]},\"728\":{\"h\":\"九、canvas-绘制文本\"},\"729\":{\"h\":\"1. 在 canvas 中绘制文本\",\"t\":[\"canvas 提供了两种方法来渲染文本\",\"fillText(text, x, y)\",\"在指定的(x,y)位置填充指定的文本\",\"strokeText(text, x, y)\",\"在指定的(x,y)位置绘制文本边框\"]},\"730\":{\"h\":\"2. 文本样式\",\"t\":[\"font = value\",\"当前我们用来绘制文本的样式. 这个字符串使用和 CSS font 属性相同的语法. 默认的字体是10px sans-serif。\",\"font 属性在指定时，必须要有大小和字体，缺一不可\",\"textAlign = value\",\"文本对齐选项. 可选的值包括： left, right center. \",\"left：文本左对齐。\",\"right：文本右对齐。\",\"center：文本居中对齐。\",\"这里的textAlign=\\\"center\\\"比较特殊。textAlign 的值为 center 时，文本的居中是基于你在fillText的时候所给的 x 的值，也就是说文本一半在 x 的左边，一半在 x 的右边。\",\"textBaseline = value\",\"描述绘制文本时，当前文本基线的属性。\",\"可选值：\",\"top：文本基线在文本块的顶部。\",\"middle：文本基线在文本块的中间。\",\"bottom：文本基线在文本块的底部。\"]},\"731\":{\"h\":\"3. measureText\",\"t\":[\"measureText() 方法返回一个 TextMetrics 对象，包含关于文本尺寸的信息（例如文本的宽度）\"]},\"732\":{\"h\":\"4. canvas 中文本水平垂直居中\",\"t\":[\"window.onload = function () { var oC = document.getElementById('c1'); var oGC = oC.getContext('2d'); oGC.font = '60px impact'; oGC.textBaseline = 'middle'; //middle bottom var w = oGC.measureText('尚硅谷').width; oGC.fillText('尚硅谷', (oC.width - w) / 2, (oC.height - 60) / 2); };\"]},\"733\":{\"h\":\"5. 阴影(文本阴影&盒模型阴影)\",\"t\":[\"shadowOffsetX = floatshadowOffsetY = float\",\"shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离(偏移)，它们默认都为 0。\",\"shadowBlur = float\",\"shadowBlur 用于设定阴影的模糊程度，其数值并不跟像素数量挂钩，也不受变换矩阵的影响，默认为 0。\",\"shadowColor = color(必需项)\",\"shadowColor 是标准的 CSS 颜色值，用于设定阴影颜色效果，默认是全透明的黑色。\"]},\"734\":{\"h\":\"十、canvas-像素操作\"},\"735\":{\"h\":\"1. canvas 中的像素操作\",\"t\":[\"到目前为止，我们尚未深入了解 Canvas 画布真实像素的原理，事实上，你可以直接通过 ImageData 对象操纵像素数据，直接读取或将数据数组写入该对象中。\"]},\"736\":{\"h\":\"2. 像素数据\",\"t\":[\"getImageData()\",\"获得一个包含画布场景像素数据的 ImageData 对象,它代表了画布区域的对象数据\",\"ctx.getImageData(sx, sy, sw, sh)\",\"sx:将要被提取的图像数据矩形区域的左上角 x 坐标。\",\"sy:将要被提取的图像数据矩形区域的左上角 y 坐标。\",\"sw:将要被提取的图像数据矩形区域的宽度。\",\"sh:将要被提取的图像数据矩形区域的高度。\"]},\"737\":{\"h\":\"3. ImageData 对象\",\"t\":[\"ImageData 对象中存储着 canvas 对象真实的像素数据，它包含以下几个只读属性：\",\"width:图片宽度，单位是像素\",\"height:图片高度，单位是像素\",\"data:Uint8ClampedArray 类型的一维数组，包含着 RGBA 格式的整型数据，范围在 0 至 255 之间（包括 255）（像素矩阵） \",\"R:0 --> 255(黑色到白色)\",\"G:0 --> 255(黑色到白色)\",\"B:0 --> 255(黑色到白色)\",\"A:0 --> 255(透明到不透明)\",\"image-20221124103928013\"]},\"738\":{\"h\":\"4. 写入像素数据\",\"t\":[\"putImageData()方法去对场景进行像素数据的写入。\",\"putImageData(myImageData, dx, dy)\",\"dx 和 dy 参数表示你希望在场景内左上角绘制的像素数据所得到的设备坐标\"]},\"739\":{\"h\":\"5. 创建 ImageData 对象\",\"t\":[\"ctx.createImageData(width, height);\",\"width : ImageData 新对象的宽度。\",\"height: ImageData 新对象的高度。\",\"默认创建出来的是透明的\"]},\"740\":{\"h\":\"6. 马赛克案例\",\"t\":[\"示例代码\",\"if (picture.getContext) { const ctx = picture.getContext('2d'); const img = new Image(); img.src = './img/1.jpg'; img.onload = () => { picture.width = img.width; picture.height = img.height / 2; draw(); }; function draw() { ctx.drawImage(img, 0, 0, img.width / 2, img.height / 2); let oldImgData = ctx.getImageData(0, 0, img.width, img.height); let newImgData = ctx.createImageData(img.width, img.height); //马赛克 mosaic(oldImgData, newImgData, 5); ctx.putImageData(newImgData, img.width / 2, 0); } function mosaic(oldImgData, newImgData, size) { for (let i = 0; i < oldImgData.width / size; i++) { for (let j = 0; j < oldImgData.height / size; j++) { //获取马赛克块中任意一点的像素信息 let color = getPxInfo( oldImgData, i * size + Math.floor(Math.random() * size), j * size + Math.floor(Math.random() * size) ); //将整个马赛克块中所有的像素块设置为之前获取的信息 for (let m = 0; m < size; m++) { for (let n = 0; n < size; n++) { setPxInfo(newImgData, i * size + m, j * size + n, color); } } } } } //单像素操作 function getPxInfo(imgdata, x, y) { let color = []; let data = imgdata.data; let w = imgdata.width; let h = imgdata.height; color[0] = data[(y * w + x) * 4]; color[1] = data[(y * w + x) * 4 + 1]; color[2] = data[(y * w + x) * 4 + 2]; color[3] = data[(y * w + x) * 4 + 3]; return color; } function setPxInfo(imgdata, x, y, color) { let data = imgdata.data; let w = imgdata.width; let h = imgdata.height; data[(y * w + x) * 4] = color[0]; data[(y * w + x) * 4 + 1] = color[1]; data[(y * w + x) * 4 + 2] = color[2]; data[(y * w + x) * 4 + 3] = color[3]; } }\",\"效果图\"]},\"741\":{\"h\":\"十一、canvas-其他 api\"},\"742\":{\"h\":\"1. 全局透明度的设置\",\"t\":[\"globalAlpha = value\",\"这个属性影响到 canvas 里所有图形的透明度，有效的值范围是 0.0 （完全透明）到 1.0（完全不透明），默认是 1.0。\"]},\"743\":{\"h\":\"2. 覆盖合成\",\"t\":[\"source：新的图像(源) --- destination：已经绘制过的图形(目标)\",\"globalCompositeOperation：选项\",\"source-over(默认值):源在上面（新的图像层级比较高）\",\"source-in :只留下源与目标的重叠部分(源（新图像）的那一部分)\",\"此条指令需要加在发生重叠的两幅图像之间。\",\"source-out :只留下源超过目标的部分\",\"source-atop:砍掉源溢出的部分\",\"以下部分同上\",\"destination-over:目标在上面,旧的图像层级比较高\",\"destination-in:只留下源与目标的重叠部分(目标的那一部分)\",\"destination-out:只留下目标超过源的部分\",\"destination-atop:砍掉目标溢出的部分\"]},\"744\":{\"h\":\"3. 将画布导出为图像\",\"t\":[\"​ toDataURL(注意是 canvas 元素接口上的方法)\",\"输出一个 Data URI\"]},\"745\":{\"h\":\"4. 事件操作\",\"t\":[\"ctx.isPointInPath(x, y)\",\"判断在当前路径（没有被 beginPath 中）中是否包含检测点 \",\"x:检测点的 X 坐标；y:检测点的 Y 坐标\",\"注意，此方法只作用于最新画出的 canvas 图像\"]},\"746\":{\"h\":\"十二、多媒体音视频\",\"t\":[\"在 HTML 5 之前，要在浏览器中显示音频和视频是非常困难的，经常我们需要使用类似于 Flash 这一类的插件才能够实现。不过，从 HTML 5 开始引入了<audio>和video这 2 个标签可以实现在网页中快速插入音频和视频，同时我们还可以使用 JavaScript 来控制多媒体的播放。\"]},\"747\":{\"h\":\"1. html5 标签\",\"t\":[\"<video>:Html5 提供的播放视频的标签\",\"src:资源地址\",\"controls:该属性定义是显示还是隐藏用户控制界面\",\"<audio>:Html5 提供的播放音频的标签\",\"src:资源地址\",\"controls:该属性定义是显示还是隐藏用户控制界面\",\"<source>\",\"视频：\",\"<video controls> <source src=\\\"rabbit320.mp4\\\" type=\\\"video/mp4\\\" /> <source src=\\\"rabbit320.webm\\\" type=\\\"video/webm\\\" /> <p> 你的浏览器不支持 HTML5 视频。可点击 <a href=\\\"rabbit320.mp4\\\">此链接</a> 观看 </p> </video>\",\"音频：\",\"<audio controls> <source src=\\\"viper.mp3\\\" type=\\\"audio/mp3\\\" /> <source src=\\\"viper.ogg\\\" type=\\\"audio/ogg\\\" /> <p> 你的浏览器不支持 HTML5 音频，可点击 <a href=\\\"viper.mp3\\\">此链接</a> 收听。 </p> </audio>\",\"因为不同的浏览器和设备并不全支持相同的 codecs（专利费问题），所以我们使用几个不同格式的文件来兼容不同的浏览器。如果使用的格式都得不到浏览器的支持，那么媒体文件将不会播放。\"]},\"748\":{\"h\":\"2. video 标签的属性\",\"t\":[\"width :视频显示区域的宽度，单位是 CSS 像素\",\"height :视频展示区域的高度，单位是 CSS 像素\",\"poster :一个海报帧的 URL，用于在用户播放或者跳帧之前展示（视频封面）\",\"src :要嵌到页面的视频的 URL\",\"controls: 显示或隐藏用户控制界面\",\"autoplay: 媒体是否自动播放\",\"loop: 媒体是否循环播放\",\"muted: 是否静音\",\"preload: 该属性旨在告诉浏览器作者认为达到最佳的用户体验的方式是什么\",\"none: 提示作者认为用户不需要查看该视频，服务器也想要最小化访问流量；换句话说就是提示浏览器该视频不需要缓存。\",\"metadata: 提示尽管作者认为用户不需要查看该视频，不过抓取元数据（比如：长度）还是很合理的。\",\"auto: 用户需要这个视频优先加载；换句话说就是提示：如果需要的话，可以下载整个视频，即使用户并不一定会用它。\",\"空字符串：也就代指 auto 值。\"]},\"749\":{\"h\":\"3. audio 标签的属性\",\"t\":[\"<audio> 标签与 <video> 标签的使用方式几乎完全相同，由于它没有视觉部件 — 你只需要显示出能控制音频播放的控件。故<audio>标签不支持width/height、poster属性，除此之外，<audio> 标签支持所有 <video> 标签拥有的特性。\",\"包括：src、controls、autoplay、loop、muted、preload\"]},\"750\":{\"h\":\"4. 音视频的 js 相关属性\",\"t\":[\"可读写属性\",\"currentTime : 开始播放到现在所用的时间(可读写)\",\"muted : 是否静音(可读写,相比于 volume 优先级要高)\",\"volume : 0.0-1.0 的音量相对值(可读写)\",\"playbackRate: 设置快进或者快退速度的数字值。值为 1 时表示以正常速度播放。\",\"muted 和 volume 之间不会同步，且 muted 的优先级比较高\",\"只读属性\",\"duration : 媒体总时间(只读)\",\"paused : 媒体是否暂停(只读)\",\"ended : 媒体是否播放完毕(只读)\",\"error : 媒体发生错误的时候，返回错误代码 (只读)\",\"currentSrc : 以字符串的形式返回媒体地址(只读)\",\"视频多的部分：\",\"poster : 视频播放前的预览图片(读写)\",\"width、height : 设置视频的尺寸(读写)\",\"videoWidth、 videoHeight : 视频的实际分辨率(只读)\"]},\"751\":{\"h\":\"5. 音视频 js 相关函数\",\"t\":[\"play() : 媒体播放\",\"pause() : 媒体暂停\",\"load() : 重新加载媒体\",\"通过 js 操作 source 更换音视频时，必须进行 load 重新加载媒体才能生效\"]},\"752\":{\"h\":\"6. js 相关事件\",\"t\":[\"| 事件名 | 事件描述 | | --- | --- | --- | | abort | 在播放被终止时触发,例如, 当播放中的视频重新开始播放时会触发这个事件。 | | canplay | 在媒体数据已经有足够的数据（至少播放数帧）可供播放时触发。这个事件对应 CAN_PLAY 的 readyState。 | | canplaythrough | 在媒体的 readyState 变为 CAN_PLAY_THROUGH 时触发，表明媒体可以在保持当前的下载速度的情况下不被中断地播放完毕。注意：手动设置 currentTime 会使得 firefox 触发一次 canplaythrough 事件，其他浏览器或许不会如此。 | | durationchange | 元信息已载入或已改变，表明媒体的长度发生了改变。例如，在媒体已被加载足够的长度从而得知总长度时会触发这个事件。 | | emptied | 媒体被清空（初始化）时触发。 | | ended | 播放结束时触发。 | | error | 在发生错误时触发。元素的 error 属性会包含更多信息。参阅 Error | handling 获得详细信息。 | | loadeddata | 媒体的第一帧已经加载完毕。 | | loadedmetadata | 媒体的元数据已经加载完毕，现在所有的属性包含了它们应有的有效信息。 | | loadstart | 在媒体开始加载时触发。 | | mozaudioavailable | 当音频数据缓存并交给音频层处理时 | | pause | 播放暂停时触发。 | | play | 在媒体回放被暂停后再次开始时触发。即，在一次暂停事件后恢复媒体回放。 | | playing | 在媒体开始播放时触发（不论是初次播放、在暂停后恢复、或是在结束后重新开始）。 | | progress | 告知媒体相关部分的下载进度时周期性地触发。有关媒体当前已下载总计的信息可以在元素的 buffered 属性中获取到。 | | ratechange | 在回放速率变化时触发。 | | seeked | 在跳跃操作完成时触发。 | | seeking | 在跳跃操作开始时触发。 | | stalled | 在尝试获取媒体数据，但数据不可用时触发。 | | suspend | 在媒体资源加载终止时触发，这可能是因为下载已完成或因为其他原因暂停。 | | timeupdate | 元素的 currentTime 属性表示的时间已经改变。 | | volumechange | 在音频音量改变时触发（既可以是 volume 属性改变，也可以是 muted 属性改变）.。 | | waiting | 在一个待执行的操作（如回放）因等待另一个操作（如跳跃或下载）被延迟时触发 |\"]},\"753\":{\"h\":\"十三、表单\"},\"754\":{\"h\":\"1. 表单的不变\",\"t\":[\"Html5 Forms 概述，在 Html5 中:\",\"表单仍然使用<form>元素作为容器,我们可以在其中设置基本的提交特性，其中 form 的 action 指向一个服务器地址（接口）\",\"当用户或开发人员提交页面时,表单仍然用于向服务端发送表单中控件的值\",\"注意表单项的 name 属性必须有值，服务器才能获取表单\",\"所有之前的表单控件都保持不变\",\"仍然可以使用脚本操作表单控件\"]},\"755\":{\"h\":\"2. 表单的变动\"},\"756\":{\"h\":\"Html5 之前的表单\",\"t\":[\"标签为input\",\"type:text:文本框\",\"type:password:密码框\",\"type：radio：单选按钮 \",\"注意以 name 分组，确保单选关系，也为了后台能成功获取\",\"必须有 value 属性，为了后台获取后的识别（不写统一为 on）\",\"checked 属性,选中控制\",\"type:checkbox:复选框 \",\"注意以 name 分组，确保为一组，也为了后台能成功获取\",\"必须有 value 属性，为了后台获取后的识别（不写统一为 on）\",\"checked 属性,选中控制\",\"type:submit:提交按钮\",\"type:reset:重置按钮\",\"type:button:普通按钮\",\"标签为select:下拉框\",\"name 属性在 select 标签上\",\"multiple:可选多项，\",\"子项可以通过 optgroup 来进行分组 \",\"label 属性用来定义组名，子项为 option 标签\",\"selected 属性，默认选中控制，必须有 value 属性,为了后台获取后的识别\",\"标签为textarea:文本域\",\"标签为button:按钮\",\"type:submit:提交按钮\",\"type:reset:重置按钮\",\"type:button:普通按钮\",\"标签为lable:控制文本与表单的关系，for 属性指向一个 input 的 id\",\"标签fieldset 标签legend:来为表单分组\",\"attr & prop\"]},\"757\":{\"h\":\"2. 新增表单控件\",\"t\":[\"type:email :email 地址类型\",\"当格式不符合 email 格式时，提交是不会成功的，会出现提示；只有当格式相符时，提交才会通过\",\"在移动端获焦的时候会切换到英文键盘\",\"type:tel :电话类型\",\"在移动端获焦的时候会切换到数字键盘(会自动弹出数字键盘)\",\"type:url :url 类型\",\"当格式不符合 url 格式时，提交是不会成功的，会出现提示；只有当格式相符时，提交才会通过。\",\"type:search :搜索类型\",\"有清空文本的按钮（× 清空文本框的内容）\",\"type:range : 特定范围内的数值选择器\",\"属性：min、max、step\",\"其他控件\",\"类型\",\"解释\",\"type:number\",\"只能包含数字的输入框\",\"type:color\",\"颜色选择器\",\"type:datetime\",\"显示完整日期(移动端浏览器支持)\",\"type:datetime-local\",\"显示完整日期，不含时区\",\"type:time\",\"显示时间，不含时区\",\"type:date\",\"显示日期\",\"type:week\",\"显示周\",\"type:month\",\"显示月\"]},\"758\":{\"h\":\"3. 新增表单属性\",\"t\":[\"placeholder : 输入框提示信息\",\"适用于 form,以及 type 为 text,search,url,tel,email,password 类型的 input\",\"通过::-webkit-input-placeholder可以选中 placeholder\",\"autofocus : 指定表单获取输入焦点\",\"required : 此项必填，不能为空\",\"pattern : 正则验证 pattern=\\\"\\\\d{1,5}\",\"限定输入框的内容\",\"formaction 在 submit 里定义提交地址\",\"list和datalist : 为输入框构造一个选择列表\",\"list 值为 datalist 标签的 id\"]},\"759\":{\"h\":\"4. 表单验证反馈\",\"t\":[\"validity 对象，通过下面的 valid 可以查看验证是否通过，如果八种验证都通过返回 true，一种验证失败返回 false\",\"​node.addEventListener(\\\"invalid\\\",fn1,false);\"]},\"760\":{\"h\":\"八种验证类型\",\"t\":[\"常用：\",\"valueMissing : 输入值为空时返回 true\",\"typeMismatch : 控件值与预期类型不匹配返回 true\",\"patternMismatch : 输入值不满足 pattern 正则返回 true\",\"customError : 不符合自定义验证返回 true\",\"setCustomValidity 设置自定义验证\",\"不常用：\",\"tooLong : 超过 maxLength 最大限制返回 true\",\"rangeUnderflow : 验证的 range 最小值返回 true\",\"rangeOverflow : 验证的 range 最大值返回 true\",\"stepMismatch : 验证 range 的当前值 是否符合 min、max 及 step 的规则返回 true\"]},\"761\":{\"h\":\"5. 关闭验证\",\"t\":[\"formnovalidate 属性\",\"返回/ 设置 元素的 formnovalidate 属性，表示在表单提交时不对其进行验证。这会重写父表单的 novalidate 属性。\"]},\"762\":{\"h\":\"十四、HTML 5 拖放\",\"t\":[\"HTML 5 中提供了专门用于拖放的 API。拖放是网页中比较常见的功能之一，所谓拖放，即抓取对象以后拖到另一个位置。在 HTML 5 中，拖放是标准的一部分，任何元素都能够拖放。\",\"实际上，拖放这个词我们可以拆开来看，对应两个词。分别是拖拽和释放。拖拽对应英语单词 Drag，而释放对应英语单词 Drop。这是拖放这个行为发生时的两种状态。当鼠标点击源对象后一直移动对象不松手即为拖拽，一旦松手即为释放了。\"]},\"763\":{\"h\":\"1. 源对象和目标对象\",\"t\":[\"在讲解 HTML 5 的拖放之前，有一个概念我们必须要弄清楚，那就是什么源对象和目标对象。\",\"源对象：指的是我们鼠标点击的一个事物，这里可以是一张图片，一个 div，或者一段文本等等。 目标对象：指的是我们拖动源对象后移动到一块区域，源对象可以进入这个区域，可以在这个区域上方悬停（未松手），可以松手释放将源对象放置此处（已松手），也可以悬停后离开该区域。\",\"如下图所示：\",\" （源对象与目标对象示意图)\"]},\"764\":{\"h\":\"2. 拖放相关 API\",\"t\":[\"除了源对象和目标对象以外，在拖动的过程中还可以抽象出一个过程对象。\",\"因为拖放的整个事件是由不同元素产生的，一个元素被拖放，它可能会经过很多个元素，最终才到达想要放置的元素内。所以，除了被拖放的元素称为源对象，到达的元素称为目标对象以外，还可以将被经过的元素称为过程对象。\",\"不同的对象可以触发不同的拖放事件。\",\"源对象：\",\"dragstart：源对象开始拖放。 drag：源对象拖放过程中。（鼠标可能在移动也可能未移动） dragend：源对象拖放结束。\",\"过程对象：\",\"dragenter：源对象开始进入过程对象范围内。 dragover：源对象在过程对象范围内移动。 dragleave：源对象离开过程对象的范围。\",\"目标对象：\",\"drop：源对象被拖放到目标对象内。\",\"下面，我们来看一个 HTML 5 拖动的具体示例：\",\"<head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"ie=edge\\\" /> <title>Document</title> <style> #drag { width: 100px; height: 100px; background-color: red; position: absolute; left: 0; top: 0; } </style> </head> <body> <div id=\\\"drag\\\" draggable=\\\"true\\\"></div> <script> drag.ondragstart = function (event) { // 第 1 步 阻止目标对象的默认行为 document.ondragover = function (e) { e.preventDefault(); }; // 第 2 步 设置目标对象的 drop 事件 document.ondrop = function (e) { drag.style.left = e.clientX - event.offsetX + 'px'; drag.style.top = e.clientY - event.offsetY + 'px'; }; }; </script> </body>\",\"在此示例中，div#drag 为我们的源对象，document 既为过程对象，又为目标对象。\",\"要实现对源对象的拖动，首先需要将源对象的 draggable 属性设置为 true。\",\"默认地，无法将数据或者元素放置到其他元素中。如果需要设置允许放置，我们必须阻止对元素的默认处理方式。这就需要通过调用 ondragover 事件的event.preventDefault()方法。\",\"最后，为目标对象设置 ondrop 事件，改变源对象的 left 和 top 值即可。\",\"注：原目标和目标对象必须在同一个文档流，例如要么都在标准文档流，要么都不在，否则无法拖动。\",\"效果如下：\",\"2019-02-10 11.25.16-w376\"]},\"765\":{\"h\":\"3. dataTransfer 对象\",\"t\":[\"在所有拖放事件中，提供了一个数据传递对象 dataTransfer，用于在源对象和目标对象之间传递数据。接下来我们来看一下这个对象所包含的一些属性和方法，来看一下它是如何传递数据的。\",\"setData()方法：向 dataTransfer 对象中存入数据。接收 2 个参数，第 1 个表示要存入数据种类的字符串，现在支持有以下几种：\",\"text/plain：文本文字。 text/html：HTML 文字。 text/xml：XML 文字。 text/uri-list：URL 列表，每个 URL 为一行。\",\"第 2 个参数为要存入的数据。例如：\",\"event.dataTransfer.setData('text/plain', 'Hello World');\",\"getData()方法：从 dataTransfer 对象中读取数据。参数为在setData()方法中指定的数据种类。例如：\",\"event.dataTransfer.getData('text/plain');\",\"clearData()方法：清除 dataTransfer 对象中存放的数据。参数可选，为数据种类。若参数为空，则清空所有种类的数据。例如：\",\"event.dataTransfer.clearData();\",\"setDragImage()方法：通过 img 元素来设置拖放图标。接收 3 个参数，第 1 个为图标元素，第 2 个为图标元素离鼠标指针的 X 轴位移量，第 3 个为图标元素离鼠标指针的 Y 轴位移量。例如：\",\"let source = document.getElementById('source'), icon = document.createElement('img'); icon.src = 'img.png'; source.addEventListener( 'dragstart', function (ev) { ev.dataTransfer.setDragImage(icon, -10, -10); }, false );\",\"effectAllowed 和 dropEffect 属性：这 2 个属性结合起来设置拖放的视觉效果。\",\"注：IE 不支持 dataTransfer 对象。\",\"下面，我们来看一个使用了 dataTransfer 对象来进行数据传递的拖动，代码如下：\",\"<head> <meta charset=\\\"UTF-8\\\" /> <title>Document</title> <style> div { width: 200px; height: 200px; border: 3px solid; float: left; margin-right: 20px; } </style> </head> <body> <div id=\\\"div1\\\" ondrop=\\\"drop(event)\\\" ondragover=\\\"allowDrop(event)\\\"> <img src=\\\"./1.jpg\\\" draggable=\\\"true\\\" ondragstart=\\\"drag(event)\\\" id=\\\"drag1\\\" /> </div> <div id=\\\"div2\\\" ondrop=\\\"drop(event)\\\" ondragover=\\\"allowDrop(event)\\\"></div> <script> let drag = function (e) { e.dataTransfer.setData('Text', e.target.id); }; let allowDrop = function (e) { e.preventDefault(); }; let drop = function (e) { e.preventDefault(); let data = e.dataTransfer.getData('Text'); e.target.appendChild(document.getElementById(data)); }; </script> </body>\",\"接下来我们来具体看一下这段代码。\",\"首先，为了使元素可拖动，需要把 draggable 属性设置为 true。本示例中 img 元素为我们的源对象，所以为 img 元素设置 draggable 属性值为 true。\",\"接下来，在源对象上面设置 ondragstart 事件，要做的事情就是将数据存储到 dataTransfer 对象中。在 drag 的事件处理器中，我们通过dataTransfer.setData()方法来设置被拖数据的数据类型和值。这里我们设置的数据类型为 Text，值是可拖动元素的 id。\",\"<img src=\\\"./1.jpg\\\" draggable=\\\"true\\\" ondragstart=\\\"drag(event)\\\" id=\\\"drag1\\\"> let drag = function(e){ e.dataTransfer.setData(\\\"Text\\\",e.target.id); }\",\"接下来，作为容器的两个 div 都设置了 ondragover 事件来规定在何处放置被拖动的数据。事件的处理函数调用的e.preventDefault()方法来阻止元素默认的处理行为。\",\"let allowDrop = function (e) { e.preventDefault(); };\",\"最后就是 2 个容器都设置了 ondrop 事件来规定图片拖动到 div 上方并且释放后要做的事儿。对应的事件处理函数要执行的操作如下：\",\"阻止浏览器默认行为。\",\"通过dataTransfer.getData(\\\"Text\\\")方法获得被拖的数据。该方法将返回在setData()方法中设置为相同类型的任何数据。\",\"通过 DOM 的 API 来添加相应的节点。\",\"let drop = function (e) { e.preventDefault(); let data = e.dataTransfer.getData('Text'); e.target.appendChild(document.getElementById(data)); };\",\"最终实现效果：可以将图片进行左右的拖动\",\"2019-02-10 11.47.53-w528\"]},\"766\":{\"h\":\"十五、Web Storage\",\"t\":[\"Web Storage（Web 存储）提供了一种方式，可以让 Web 页面实现在客户端浏览器中意键值对的形式在本地保存数据。在了解 HTML 5 的 Web 存储之前，我们先来看一下 Cookie 存储机制的优缺点。\"]},\"767\":{\"h\":\"1. Cookie 存储机制的优缺点\",\"t\":[\"Cookie 是 HTML 4 中在客户端存储简单用户信息的一种方式，它使用文本来存储信息，当有应用程序使用 Cookie 时，服务器端就会发送 Cookie 到客户端，客户端浏览器将会保存该 Cookie 信息。下一次页面请求时，客户端浏览器就会把 Cookie 发送到服务器。\",\"Cookie 最典型的应用是用来保存用户信息，用户设置和密码记忆等。使用 Cookie 有其优点，也有其缺陷，其优点主要表现在以下几个方面：\",\"简单易用\",\"浏览器负责发送数据\",\"浏览器自动管理不同站点的 Cookie。\",\"但是经过长期的使用，Cookie 的缺点也渐渐暴露了出来，主要有以下几点：\",\"因为使用的是简单的文本存储数据，所以 Cookie 的安全性很差。Cookie 保存在客户端浏览器，很容易被黑客窃取。\",\"Cookie 中存储的数据容量有限，其上限为 4 KB。\",\"存储 Cookie 的数量有限，多数浏览器的上限为 30 或 50 个。\",\"如果浏览器的安全配置为最高级别，那么 Cookie 则会失效。\",\"Cookie 不适合大量数据的存储，因为 Cookie 会由每个对服务器的请求来传递，从而造成 Cookie 速度缓慢效率低下。\"]},\"768\":{\"h\":\"2. 为什么要用 Web Storage\",\"t\":[\"HTML 5 的 Web Storage 提供了 2 种在客户端存储数据的方法，localStorage 和 sessionStorage。\",\"localStorage\",\"localStorage 是一种没有时间限制的数据存储方式，可以将数据保存在客户端的硬盘或其他存储器，存储时间可以是一天，两天，几周或几年。浏览器的关闭并不意味着数据也会随之消失。当再次打开浏览器时，我们依然可以访问这些数据。localStorage 用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。\",\"sessionStorage\",\"sessionStorage 指的是针对一个 session 的数据存储，即将数据保存在 session 对象中。Web 中的 session 指的是用户在浏览某个网站时，从进入网站到关闭浏览器所经过的这段时间，可以称为用户和浏览器进行交互的\\\"会话时间\\\"。session 对象用来保存这个时间段内所有要保存的数据。当用户关闭浏览器后，这些数据会被删除。\",\"sessionStorage 用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问，并且当会话结束后数据也随之销毁。因此 sessionStorage 不是一种持久化的本地存储，仅仅是会话级别的存储。\",\"从上面的介绍我们可以看出，localStorage 可以永久保存数据，而 sessionStorage 只能暂时保存数据，这是两者之间的重要区别，在具体使用时应该注意。\",\"Web Storage 存储机制比传统的 Cookie 更加强大，弥补了 Cookie 诸多缺点，主要在以下几个方面做了加强：\",\"Web Storage 提供了易于使用的 API 接口，只需要设置键值对即可使用，简单方便。\",\"在存储容量方面可以根据用户分配的磁盘配额进行存储，能够在每个用户域存储 5 MB ～ 10 MB 的内容。用户不仅可以存储 session，还可以存储许多信息，如设置偏好，本地化的数据和离线数据等。\",\"Web Storage 还提供了使用 JavaScript 编程的接口，开发者可以使用 JavaScript 客户端脚本实现许多以前只能在服务器端才能完成的工作。\"]},\"769\":{\"h\":\"3. 使用 Web Storage\",\"t\":[\"如果浏览器支持 Web Storage API，那么 window 对象中就会有 localStorage 和 sessionStorage 这个属性。这个属性是一个原生对象，带有很多用于存储数据的属性和方法。信息是以键值对的形式存储，值只能是字符串（非字符串类型的值会被转换为字符串类型）。\",\"存储示例：我们可以通过setItem()方法来存储一个值，然后通过getItem()方法来获取值\",\"在 1.html 里面设置 localStorage 的值，\",\"1.html\",\"<body> <script> localStorage.setItem('name', 'ggbond'); console.log('信息已保存!'); </script> </body>\",\"接下来在 2.html 里面来获取已经设置了的值。\",\"2.html\",\"<body> <script> let name = localStorage.getItem('name'); console.log(`姓名为 ${name}`); // 姓名为 ggbond </script> </body>\",\"这里，我们存储的值是存放于本地的，所以没有时间的限制，即使我们关闭浏览器，设置了的值也依然存在。\",\"除了上面使用getItem()和setItem()方法来存取数据以外，我们还可以直接进行如下的存值和取值操作，就好像是给一个属性赋值一样，如下：\",\"在 1.html 里面设置 localStorage 的值。\",\"1.html\",\"<body> <script> localStorage.setItem('name', 'ggbond'); localStorage.age = 18; console.log('信息已保存!'); </script> </body>\",\"接下来在 2.html 里面来获取已经设置了的值。\",\"2.html\",\"<body> <script> let name = localStorage.getItem('name'); let age = localStorage.age; console.log(`姓名为 ${name},年龄为 ${age}`); // 姓名为 ggbond,年龄为 18 </script> </body>\",\"在 Google 浏览器中，打开控制台工具，在 Application 下的 Storage 中可以很轻松的查看到本地存储了哪些信息。如下图所示：\",\"-w782\",\"上面有提到，本地存储的值的类型只能是字符串，但是如果对应的值不是一个字符串，也会自动的被转换为字符串类型，如下：\",\"1.html\",\"<body> <script> localStorage.stu = ['1', '2', '3']; console.log('信息已保存!'); </script> </body>\",\"在 1.html 中，我们存储的是值为一个数组，接下来我们在 2.html 中将其取出来，如下：\",\"2.html\",\"<body> <script> let stu = localStorage.stu; console.log(stu, typeof stu); // 1,2,3 string </script> </body>\",\"可以看到，即便我们存储的时候值类型不是字符串，也能够自动地被转换为字符串类型。\",\"如果要删除本地存储中的一个条目，可以使用removeItem()方法或者直接使用delete运算符，如下：\",\"localStorage.removeItem('name'); // 或者 delete localStorage.name;\",\"如果要彻底删除本地存储中所有的东西，可以使用clear()方法，如下：\",\"localStorage.clear();\"]},\"770\":{\"h\":\"4. storage 事件\",\"t\":[\"每次将一个值存储到本地存储时，就会触发一个 storage 事件。由事件监听器发送给回调函数的事件对象有几个自动填充的属性如下：\",\"key：告诉我们被修改的条目的键。 newValue：告诉我们被修改后的新值。 oldValue：告诉我们修改前的值。 storageArea：告诉我们是本地存储还是会话存储。 url：被改变键的文档地址。\",\"需要注意的是，这个事件只在同一域下的任何窗口或者标签上触发，并且只在被存储的条目改变时触发。\",\"示例如下：这里我们需要打开服务器进行演示，本地文件无法触发 storage 事件\",\"1.html 代码如下：在该页面下我们设置了两个 localStorage 并存储了 2 个值。\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <title>Document</title> </head> <body> <script> localStorage.name = 'ggbond'; localStorage.age = 20; console.log('信息已经设置!'); </script> </body> </html>\",\"2.html 代码如下：在该页面中我们安装了一个 storage 的事件监听器，安装之后只要是同一域下面的其他 storage 值发生改变，该页面下面的 storage 事件就会被触发。\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <title>Document</title> </head> <body> <script> let name = localStorage.getItem('name'); let age = localStorage.age; console.log(`姓名为${name},年龄为${age}`); window.addEventListener( 'storage', (e) => { console.log(`${e.key}从${e.oldValue}修改为${e.newValue}`); console.log(`这是一个${e.storageArea}存储`); console.log(`被改变的url为${e.url}`); }, true ); </script> </body> </html>\",\"接下来我们来改变 1.html 里面 localStorage.name 的值。\",\"localStorage.name = '猪猪侠';\",\"之后我们就会看到安装在 2.html 页面里面的 storage 事件就会被触发，显示出如下效果：\",\"-w754\",\"最后，需要说明一下的就是虽然 Web Storage 只能存储字符串看起来限制很大，但是通过使用 JSON，我们可以在本地存储中存储任何的 JSON 对象，如下：\",\"let xiejie = { name: 'xiejie', age: 18 }; localStorage.setItem('info', JSON.stringify(xiejie));\",\"JSON 对象和数组不一样，存储之前需要使用JSON.stringify()方法将其转换为字符串，否则存储进去的是 [object Object]。\",\"这段代码会将 xiejie 这个对象存储为以 info 为键的一个 JSON 字符串，当我们要将其取出来使用的时候，只需要再使用JSON.parse()方法将其转换回 JSON 对象即可。\",\"xiejie = JSON.parse(localStorage.info);\"]},\"771\":{\"h\":\"十六、本地文件读取\",\"t\":[\"HTML 5 为我们提供了一种通过 File API 规范与本地文件交互的标准方式。\",\"为了举例说明其功能，可使用 File API 在向服务器发送图片的过程中创建图片的缩略图预览，或者允许应用程序在用户离线时保存文件引用。\",\"另外，可以使用客户端逻辑来验证上传内容的 mimetype 与其文件扩展名是否匹配，或者限制上传内容的大小。\",\"该规范通过\\\"本地\\\"文件系统提供了多种文件访问接口：\",\"File：独立文件。提供只读信息，例如名称、文件大小、mimetype 和对文件句柄的引用。 FileList：File 对象的类数组序列（考虑 <input type=\\\"file\\\" multiple> 或者从桌面拖动目录或文件）。 Blob：可将文件分割为字节范围。\",\"与以上数据结构结合使用时，FileReader 接口可用于通过熟悉的 JavaScript 事件处理来异步读取文件。因此，可以监控读取进度、找出错误并确定加载何时完成。这些 API 与 XMLHttpRequest 的事件模型有很多相似之处。\",\"注：从 Firefox 3.6.3 起，就不支持File.slice()方法了。\"]},\"772\":{\"h\":\"1. 选择文件\",\"t\":[\"首先需要检查浏览器是否完全支持 File API：\",\"<body> <script> // Check for the various File API support. if (window.File && window.FileReader && window.FileList && window.Blob) { alert('Great success! All the File APIs are supported.'); } else { alert('The File APIs are not fully supported in this browser.'); } </script> </body>\",\"当然，如果我们的应用程序只会用到这些 API 中的一小部分，请相应地修改此代码段。\",\"使用表单输入进行选择\",\"要加载文件，最直接的方法就是使用标准<input type=\\\"file\\\">元素。JavaScript 会返回选定的 File 对象的列表作为 FileList。以下示例使用\\\"multiple\\\"属性实现了同时选择多个文件：\",\"<body> <input type=\\\"file\\\" id=\\\"files\\\" name=\\\"files[]\\\" multiple /> <output id=\\\"list\\\"></output> <script> // 绑定事件 document.getElementById('files').addEventListener('change', handleFileSelect, false); // 事件处理器 function handleFileSelect(evt) { const files = evt.target.files; // FileList 对象 let output = []; // 遍历 FileList 对象 , 获取 name , type , size , lastModifiedDate 属性 for (let i = 0; i < files.length; i++) { output.push( ` <li>name:${files[i].name}，type:${files[i].type}，size:${ files[i].size }，lastModifiedDate:${files[i].lastModifiedDate.toLocaleDateString()}</li> ` ); } console.log(output); document.getElementById('list').innerHTML = `<ul>${output.join('')}</ul>`; } </script> </body>\",\"效果如下：\",\"2019-02-23 21.00.28-w1279\",\"使用拖放操作进行选择\",\"另一种加载文件的方法是在本地将文件从桌面拖放到浏览器。我们可以对前一个示例稍作修改，加入拖放支持。\",\"<body> <div id=\\\"drop_zone\\\">Drop files here</div> <output id=\\\"list\\\"></output> <script> function handleFileSelect(evt) { evt.stopPropagation(); evt.preventDefault(); let files = evt.dataTransfer.files; // FileList 对象 let output = []; // 遍历 FileList 对象 , 获取 name , type , size , lastModifiedDate 属性 for (let i = 0; i < files.length; i++) { output.push( ` <li>name:${files[i].name}，type:${files[i].type}，size:${ files[i].size }，lastModifiedDate:${files[i].lastModifiedDate.toLocaleDateString()}</li> ` ); } document.getElementById('list').innerHTML = `<ul>${output.join('')}</ul>`; } function handleDragOver(evt) { evt.stopPropagation(); evt.preventDefault(); evt.dataTransfer.dropEffect = 'copy'; // 明确表明这是一个文件的复制 } const dropZone = document.getElementById('drop_zone'); dropZone.addEventListener('dragover', handleDragOver, false); dropZone.addEventListener('drop', handleFileSelect, false); </script> </body>\",\"效果：\",\"2019-02-23 21.16.59-w803\",\"注：有些浏览器会将<input type=\\\"file\\\">元素视为本地拖放目标。\"]},\"773\":{\"h\":\"2. 读取文件\",\"t\":[\"当获取了 File 引用后，实例化 FileReader 对象，以便将其内容读取到内存中。加载结束后，将触发读取程序的 onload 事件，而其 result 属性可用于访问文件数据。\",\"FileReader 包括四个异步读取文件的选项：\",\"FileReader.readAsBinaryString(Blob|File)：result 属性将包含二进制字符串形式的 file/blob 数据。每个字节均由一个 [0..255] 范围内的整数表示。 FileReader.readAsText(Blob|File, opt_encoding)：result 属性将包含文本字符串形式的 file/blob 数据。该字符串在默认情况下采用“UTF-8”编码。使用可选编码参数可指定其他格式。 FileReader.readAsDataURL(Blob|File)：result 属性将包含编码为数据网址的 file/blob 数据。 FileReader.readAsArrayBuffer(Blob|File)：result 属性将包含 ArrayBuffer 对象形式的 file/blob 数据。\",\"对 FileReader 对象调用其中某一种读取方法后，可使用 onloadstart、onprogress、onload、onabort、onerror 和 onloadend 事件来跟踪其进度。\",\"事件名称\",\"描述\",\"onabort\",\"当读取操作被中止时调用\",\"onerror\",\"当读取操作发生错误时调用\",\"onload\",\"当读取操作成功完成时调用\",\"onloadend\",\"当读取操作完成时调用,不管是成功还是失败\",\"onloadstart\",\"当读取操作将要开始之前调用\",\"onprogress\",\"在读取数据过程中周期性调用\",\"下面的示例从用户选择的内容中过滤掉了图片，对文件调用reader.readAsDataURL()，并通过将 src 属性设为数据网址来呈现缩略图。\",\"<head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"ie=edge\\\" /> <title>Document</title> <style> .thumb { width: 300px; border: 1px solid; margin: 10px 5px 0 0; } </style> </head> <body> <input type=\\\"file\\\" id=\\\"files\\\" name=\\\"files[]\\\" multiple /> <div id=\\\"list\\\"></div> <script> function handleFileSelect(evt) { const files = evt.target.files; // FileList 对象 for (let i = 0; i < files.length; i++) { if (!files[i].type.match('image.*')) { continue; } const reader = new FileReader(); // 通过闭包来获取文件信息 reader.onload = (function (theFile) { document.getElementById('list').innerHTML = ''; return function (e) { const div = document.createElement('div'); div.innerHTML = [ '<img class=\\\"thumb\\\" src=\\\"', e.target.result, '\\\" title=\\\"', escape(theFile.name), '\\\"/>', ].join(''); document.getElementById('list').appendChild(div, null); }; })(files[i]); // 读取图片文件作为数据 URL reader.readAsDataURL(files[i]); } } document.getElementById('files').addEventListener('change', handleFileSelect, false); </script> </body>\",\"效果：\",\"2019-02-23 21.42.35-w1278\",\"注：本文参考自 Eric Bidelman 所发表的博文，博文原址：https://www.html5rocks.com/zh/tutorials/file/dndfiles/#toc-introduction\",\"在他的博文中，还介绍了分割文件以及监控读取进度等操作。\"]},\"774\":{\"c\":[\"前端\"]},\"775\":{\"c\":[\"html\",\"canvas\",\"file\"]},\"776\":{\"h\":\"JavaScript基础\"},\"777\":{\"h\":\"一、语言基础\",\"t\":[\"JS 中严格区分大小写\",\"JS 中每一条语句以；结尾（非必须），可以使用 C 语言的风格用一对大括号将多条语句组合到一个代码块里面。\",\"{ let i = 10; console.log(i); // 10 }\",\"JS 中自动忽略多个空格和换行。\",\"声明变量：var age = 80;\",\"在 JavaScript 中，注释可以分为单行注释和多行注释。\",\"// 这是一个单行注释 /* * * 这是一个较长的 * 多行的注释 * */\",\"标识符（命名规则）\",\"标识符中可以含有字母、数字、_、$\",\"标识符不能以数字开头\",\"标识符不能是 ES 中的关键字或保留字\",\"标识符一般都采用驼峰命名法（helloWorld）\"]},\"778\":{\"h\":\"二、变量\",\"t\":[\"所谓变量，就是用于引用内存中存储的一个值。当然，我们在使用变量之前，还需要先做的一件事儿就是声明变量。\"]},\"779\":{\"h\":\"1. 声明变量\",\"t\":[\"在 JavaScript 中声明变量的方式有 3 种：var，let，const。其中var现在已经不推荐使用了，因为会有变量提升等问题。（后面我们会具体来探讨此问题）\",\"const和let的区别在于，const所声明的变量如果是简单数据类型，那么是不能够再改变的。而let所声明的变量无论是简单数据类型还是复杂数据类型，在后面是可以改变的。示例如下：\",\"const 声明变量：\",\"const name = 'Bill'; name = 'Lucy'; // TypeError: Assignment to constant variable.\",\"let 声明变量：\",\"let name = 'Bill'; name = 'Lucy'; console.log(name);\"]},\"780\":{\"h\":\"2. 变量的赋值与初始化\",\"t\":[\"我们可以利用=来给一个变量进行赋值，给变量第一次赋值的过程，叫做变量的 初始化 。一般我们在声明变量的时候就会将变量给初始化，如下：\",\"let a = 3;\",\"当然我们也可以一次性初始化多个变量，将其写在一行里面。\",\"let x = 3, y = 4, z = 5;\",\"如果声明变量时没有赋予初值，那么默认值为undefined\",\"let a; console.log(a); // undefined\"]},\"781\":{\"h\":\"3. 使用 var 声明变量\",\"t\":[\"前面有提到过，在 JavaScript 中声明变量的方式有 3 种：var，let，const。其中var现在已经不推荐使用了。这是因为使用var来声明变量会伴随着一些问题。当然，这些问题也经常被看作是 JavaScript 的一些特点。这里要介绍到的是 重复声明 和 遗漏声明 。\"]},\"782\":{\"h\":\"重复声明\",\"t\":[\"如果是使用var关键字来声明的变量，那么是允许重复声明的。只不过这个时候会忽略此次声明。如果重新声明并且带有赋值，则相当于是重新赋值\",\"重复声明不带有赋值操作，JavaScript 引擎会自动忽略后面的变量声明：\",\"var test = 3; var test; console.log(test); // 3\",\"重新声明时如果带有赋值操作，那么会进行一个数据的覆盖：\",\"var test = 3; var test = 5; console.log(test); // 5\",\"需要注意的是，重复声明仅仅是使用var关键字时可以这样。如果是在严格模式中，或者使用let或者const的话是会报错的。\"]},\"783\":{\"h\":\"遗漏声明\",\"t\":[\"如果试图读取一个没有声明的变量的值，JavaScript 引擎会报错：\",\"console.log(a); // ReferenceError: a is not defined\",\"但是 JavaScript 引擎允许遗漏声明。即直接对变量赋值而无需事先声明，赋值操作会自动声明该变量（window.a）：\",\"{ a = 5; console.log(a); // 5 } console.log(a); // 5\"]},\"784\":{\"h\":\"4. 作用域\",\"t\":[\"所谓作用域，就是变量在程序中能够被访问到的区域。这里我们介绍一个全局作用域，一个局部作用域\"]},\"785\":{\"h\":\"全局作用域\",\"t\":[\"这是 JavaScript 引擎一进来就处于的运行环境。在全局作用域中所声明变量称之为全局变量。全局变量的特点在于变量在任何地方都能被访问，如下：\",\"let a = 5; // 这是一个全局变量\"]},\"786\":{\"h\":\"局部作用域\",\"t\":[\"在 JavaScript 中，一对大括号就可以产生一个局部作用域。局部作用域里面的变量称之为局部变量。既然是局部变量，那么就只能在这个局部的作用域里面能访问到，外部是访问不到的，如下：\",\"{ let i = 10; console.log(i); // 10 } console.log(i); // ReferenceError: i is not defined\",\"顺带一提的是，在大括号中用var声明的变量不是局部变量，而是一个全局变量。这其实也是最早使用var来声明变量所遗留下来的一个问题，如下：\",\"{ var i = 10; console.log(i); // 10 } console.log(i); // 10\",\"在局部作用域里面，如果变量名和全局作用域里面的变量名冲突，优先使用局部作用域里面的变量：\",\"let i = 10; { let i = 100; console.log(i); // 100 } console.log(i); // 10\",\"如果在局部作用域里面声明变量时没有书写关键字，那么会声明一个全局变量：\",\"{ i = 10; } console.log(i); // 10\",\"var 声明的变量可以重复声明不会报错\",\"var 声明的变量没有 块级作用域\"]},\"787\":{\"h\":\"三、数据类型\",\"t\":[\"所谓数据类型，就是指数据不同的种类。\",\"在 JavaScript 中，存在 7 种简单数据类型以及 1 种复杂数据类型。\",\"简单数据类型：string、number、boolean、null、undefined、bigint、symbol\",\"复杂数据类型：object\",\"以下介绍的是 简单数据类型\"]},\"788\":{\"h\":\"1. String\"},\"789\":{\"h\":\"字符串介绍\",\"t\":[\"这是程序里面使用最为广泛的一种类型。在 JavaScript 里面，可以使用单引号，也可以使用双引号\",\"let a = 'abcd'; let b = 'abcd';\",\"这里需要注意一个问题，就是字符串的内容本身包含单引号或者双引号的话，需要和字符串界限符区分开，如下：\",\"let a = \\\"Hello 'World',welcome\\\"; // 正确 let b = 'Hello \\\"World\\\",welcome'; // 正确 let c = \\\"Hello \\\"World\\\",welcome\\\"; // 错误\",\"当然，我们这里使用转义字符也是一个很好的选择，如下：\",\"let a = \\\"Hello 'World',welcome\\\"; // 正确 let b = 'Hello \\\"World\\\",welcome'; // 正确 let c = 'Hello \\\"World\\\",welcome'; // 正确\",\"字符串这种数据类型非常的霸道，它和其他数据类型相加都会被转换为字符串类型，示例如下：\",\"let a = 'abcd'; let b = 13 + a; let c = 3.14 + a; let d = true + a; let e = null + a; let f = undefined + a; console.log(typeof b); // string console.log(typeof c); // string console.log(typeof d); // string console.log(typeof e); // string console.log(typeof f); // string\",\"所以如果我们要让一个非字符串的变量转换为字符串的话，只需要和一个空字符串相加就可以了。\",\"当然，转换字符串事实上我们也有相应的函数来转换，最常见的就是toString()函数。\",\"toString()\",\"说明：该函数会将 除了 null 和 undefined 以外的数据类型 转换为字符串。\",\"示例：\",\"let a = 10, b = true, c = null, d; console.log(typeof a.toString()); // string console.log(typeof b.toString()); // string console.log(typeof c.toString()); // 报错 console.log(typeof d.toString());\",\"可以看到，程序报错，因为 null 和 undefined 并不能通过toString()函数来转换为相应的字符串。\",\"还有一个知识点，就是toString()函数在转换数值的时候是可以带有参数的。可以将数值指定转换为几进制。示例如下：\",\"let i = 10; console.log(i.toString()); // 10 console.log(i.toString(2)); // 1010 console.log(i.toString(8)); // 12 console.log(i.toString(10)); // 10 console.log(i.toString(16)); // a\",\"当想要将 null 和 undefined 转换成字符串时，可以使用String()方法。该方法可以 将 5 种数据类型都转换为字符串。示例如下：\",\"let a = 10, b = true, c = null, d; console.log(String(a), typeof String(a)); // 10 string console.log(String(b), typeof String(b)); // true string console.log(String(c), typeof String(c)); // null string console.log(String(d), typeof String(d)); // undefined string\"]},\"790\":{\"h\":\"字符串模板\",\"t\":[\"在 ECMAScript 6 中新增了模板字面量。这可以看作是增强版的字符串，它用反引号 ` 进行标识：\",\"let str = `Hello World`; console.log(str); // Hello World console.log(typeof str); // string console.log(str.length); // 11\",\"以上代码中，使用模板字面量语法创建一个字符串，并赋值给 str 变量，这时变量的值与一个普通的字符串无异。\",\"如果想在字符串中包含反引号，只需使用反斜杠\\\\转义即可。\",\"ECMAScript 6 的模板字面量使得多行字符串更加容易创建，因为它不需要特殊的语法，只需要在想要的位置直接换行即可，如下：\",\"let str = `Hello World`; console.log(str); // Hello // World console.log(typeof str); // string console.log(str.length); // 12\",\"在反引号之内的所有空白符都是字符串的一部分，因此需要特别留意缩进。\",\"模板字面量看上去仅仅是普通 JavaScript 字符串的升级版，但二者之间真正的区别在于模版字面量存在变量占位符。变量占位符允许将任何有效的 JavaScript 表达式嵌入到模板字面量中，并将其结果输出为字符串的一部分。\",\"变量占位符由起始的${与结束的}来界定，之间允许放入任意的 JavaScript 表达式。示例如下：\",\"let name = 'xiejie'; console.log(`Hello,${name}`); // Hello,xiejie\",\"占位符${name}会访问本地变量name，并将其值插入到字符串中。\",\"既然占位符是可以是 JavaScript 表达式，那么可替换的就不仅仅是简单的变量名，可以轻易嵌入运算符、函数调用等，示例如下：\",\"let count = 10, price = 0.25; console.log(`${count} items cost $${(count * price).toFixed(2)}`); // 10 items cost $2.50\"]},\"791\":{\"h\":\"2. Number\",\"t\":[\"数字类型又被称之为number类型。number类型的值可以分为整数和实数两大类。\"]},\"792\":{\"h\":\"整数\",\"t\":[\"整数可以分为正整数和负整数，如下：\",\"let a = 12; let b = -7;\",\"这个虽然没什么好说的，但是还是有一个注意点，那就是 进制问题。二进制以0b开头，八进制以0开头，十六进制以0x开头，示例如下：\",\"// 二进制 let a = 0b101; // 5 // 八进制 let b = 017; // 15 // 十进制 let c = 21; // 21 // 十六进制 let d = 0xfd; // 253 console.log(a, b, c, d);\",\"需要注意的是，不管参与运算的变量是多少进制，最终计算结果仍然会为十进制。\",\"在 ECMAScript 6 中提供了八进制数值新的写法，使用0o作为前缀，如下：\",\"let a = 017; let b = 0o17; console.log(a, b); // 15 15\"]},\"793\":{\"h\":\"实数\",\"t\":[\"所谓实数，就是我们平常所常见的小数，或者称之为浮点数。在 JavaScript 里面，表示浮点数的方式有两种，小数型和科学记数法型 。示例如下：\",\"let a = 3.14; let b = 9.12e2; console.log(a, b); // 3.14 912\"]},\"794\":{\"h\":\"数值范围（扩展）\",\"t\":[\"由于内存限制，JavaScript 并不能保存世界上所有的数值。在 JavaScript 中能够表示的最小数值在绝大多数浏览器中为5e-324，而最大值为1.7976931348623157e+308。\",\"通过Number.MIN_VALUE和Number.MAX_VALUE我们可以查看到 JavaScript 中支持的最小值和最大值：\",\"console.log(Number.MIN_VALUE); // 5e-324 console.log(Number.MAX_VALUE); // 1.7976931348623157e+308\",\"如果某次计算的结果超出了 ECMAScript 的数值范围，那么正数会被转化为infinity（正无穷），负数会被转换为-infinity（负无穷）。例如，根据 ECMAScript 的规定：\",\"大于等于 2 的 1024 次方的数为无穷大\",\"let i = Math.pow(2, 1024); console.log(i); // Infinity\",\"小于等于 2 的 1024 次方的数为无穷小\",\"let i = -Math.pow(2, 1024); console.log(i); // -Infinity\",\"如果某次计算返回了 infinity 值，那么该值无法参与下一次计算。因为 infinity 不是能够参与计算的数值。要想确定一个数值是不是有穷的，可以使用isFinite()函数。\",\"示例：如果是无穷大数，会返回 false，否则返回 true（其实这个函数就是用于判断一个变量是否为数值的）\",\"let i = Math.pow(2, 1024); console.log(isFinite(i)); // fasle let j = 7; console.log(isFinite(j)); // true\"]},\"795\":{\"h\":\"NaN\",\"t\":[\"英文全称为 Not a Number，即非数值。这个数值用于表示 本来要返回数值的操作数未返回数值 的情况（这样就不会抛出错误了）。NaN 有两个特点：\",\"1. 任何涉及 NaN 的操作都会返回 NaN\",\"let a = NaN + 10; console.log(a); // NaN\",\"2. NaN 和任何值都不相等，包括它自己本身\",\"console.log(NaN === NaN); // false\",\"除此之外，ECMAScript 还定义了一个isNaN()函数，来判断一个参数是否不是数值。isNaN()函数在接收到一个值之后，会尝试将这个值转换为数值。示例如下：\",\"console.log(isNaN(NaN)); // true console.log(isNaN('123')); // false console.log(isNaN(123)); // false console.log(isNaN('Hello')); // true console.log(isNaN(true)); // false\",\"最后需要补充说明一下的是，NaN 是属于 number 类型的：\",\"console.log(typeof NaN); // number\"]},\"796\":{\"h\":\"3. Boolean\",\"t\":[\"布尔类型，也被称为boolean类型。这个类型的值只有两个，一个是 true，另一个是 false。\",\"let i = true; console.log(i); // true console.log(typeof i); // boolean\",\"需要注意的是，这两个值与数字值不是一回事，因此 true 不一定等于 1，而 false 也不一定等于 0。还有一点就是布尔类型的字面值 true 和 false 是区分大小写的。也就是说，True 和 False 都不是布尔值。\",\"虽然布尔类型的字面值只有 2 个，但是 ECMAScript 中所有类型的值都可以转换为布尔类型。可以使用Boolean()函数将其他类型转换为布尔值。\",\"console.log(Boolean('Hello')); // true console.log(Boolean(42)); // true console.log(Boolean(0)); // false\",\"最后需要注意的就是下面的 9 个值是对应着布尔类型里面的 假值：\",\"\\\"\\\"：双引号的空字符串\",\"''：单引号的空字符串\",\"``：空字符串模板\",\"0：数字 0\",\"-0：JavaScript 中 -0 和 0 为不同的值\",\"NaN\",\"false\",\"null\",\"undefined\"]},\"797\":{\"h\":\"4. Null\",\"t\":[\"null类型的值也是只有一个，就是 null。null表示一个空的对象。从逻辑角度来看，null 值表示一个空对象指针 ，这也正是用typeof操作符检测 null 值时会返回 object 的原因。\",\"示例：\",\"let i = null; console.log(typeof i); // object\",\"实际上，undefined 值是从 null 值派生而来的，因此当我们对这两个数据类型进行相等测试时，会返回 true。如下：\",\"if (null == undefined) { console.log('Yes'); // Yes }\"]},\"798\":{\"h\":\"5. Undefined\",\"t\":[\"undefined类型就只有一个值，undefined。在使用变量但是没有为其赋值的时候，这个变量的值就是 undefined。\",\"还需要注意一点，就是没有申明的变量，使用时会报错，而不是 undefined。但是打印其类型的时候，显示的类型却是 undefined\",\"let i; console.log(typeof i); // undefined console.log(typeof j); // undefined console.log(i); // undefined console.log(j); // ReferenceError: j is not defined\"]},\"799\":{\"h\":\"\"},\"800\":{\"h\":\"\"},\"801\":{\"h\":\"8. 类型的转换\",\"t\":[\"通过前面的介绍，我们已经知道了在 JavaScript 中有好几种不同的数据类型。然而这些数据类型都是可以相互转换的。类型转换可以分为两种，隐性转换和显性转换。\",\"1. 隐性转换\",\"当不同数据类型之间进行相互运算，或者当对非布尔类型的数据求布尔值的时候，会发生隐性转换。\",\"预期为数字的时候：算术运算的时候，我们的结果和运算的数都是数字，数据会转换为数字来进行计算。\",\"类型\",\"转换前\",\"转换后\",\"number\",\"4\",\"4\",\"string\",\"\\\"1\\\"\",\"1\",\"string\",\"\\\"abc\\\"\",\"NaN\",\"string\",\"\\\"\\\"\",\"0\",\"boolean\",\"true\",\"1\",\"boolean\",\"false\",\"0\",\"undefined\",\"undefined\",\"NaN\",\"null\",\"null\",\"0\",\"预期为字符串的时候：如果有一个操作数为字符串时，使用+符号做相加运算时，会自动转换为字符串。 预期为布尔的时候：前面在介绍布尔类型时所提到的 9 个值会转为 false，其余转为 true\",\"2. 显性转换\",\"所谓显性转换，就是只程序员强制将一种类型转换为另外一种类型。显性转换往往会使用到一些转换方法。常见的转换方法如下：\",\"转换为数值类型：Number()，parseInt()，parseFloat()\",\"转换为布尔类型：Boolean()\",\"转换为字符串类型：toString()，String()\",\"当然，除了使用上面的转换方法，我们也可以通过一些快捷方式来进行数据类型的显性转换，如下：\",\"转换字符串：直接和一个空字符串拼接，例如：a = \\\"\\\" + 数据\",\"转换布尔：!!数据类型，例如：!!\\\"Hello\\\"\",\"转换数值：数据*1 或 /1，例如：\\\"Hello * 1\\\"\"]},\"802\":{\"h\":\"四、运算符\"},\"803\":{\"h\":\"1. 算数运算符\",\"t\":[\"常见的算数运算符有加减乘除和取模运算。主要需要注意的就是，在动态语言中做除法运算时，能够得到小数。下面是关于算数运算符的示例：\",\"console.log(5 + 3.14); // 8.14 console.log(6 - 11); // -5 console.log(7 * 3); // 21 console.log(5 / 2); // 2.5 console.log(10 % 3); // 1\",\"从 ECMAScript 6 开始新增加了求幂运算，使用两个*号代表求幂。以此可以代替以前的Math.pow()方法\",\"console.log(2 ** 3); // 8\"]},\"804\":{\"h\":\"2. 一元运算符\",\"t\":[\"所谓一元运算符，就是指只作用于一个操作数的运算符。常见的一元运算符有两种，赋值运算符和递增递减运算符。\"]},\"805\":{\"h\":\"赋值运算符\",\"t\":[\"关于赋值运算符，前面我们已经见到过了。最常见的就是=，代表将右边的内容赋值给左边。除此之外，还有+=、-=、*=等一系列赋值运算符，具体的示例如下：\",\"let a = 5; a += 5; console.log(a); // 10 a -= 3; console.log(a); // 7 a *= 5; console.log(a); // 35 a /= 5; console.log(a); // 7 a %= 2; console.log(a); // 1\"]},\"806\":{\"h\":\"递增和递减\",\"t\":[\"除了上面所介绍的赋值运算符以外，常见的一元运算符还有递增和递减。在递增递减中，主要需要注意前置和后置的区别。如果是前置，那么是先自增或自减，然后参与运算。如果是后置，则是先参与运算，然后再自增或者自减，示例如下：\",\"前置示例：\",\"let a = 2; let b = 10; let c = --a + b; let d = a + b; console.log(a, b, c, d); // 1 10 11 11\",\"后置示例：\",\"let a = 2; let b = 10; let c = a-- + b; let d = a + b; console.log(a, b, c, d); // 1 10 12 11\",\"即 a--表示的是--前的数值，而--a 表示的是--后的数值\",\"需要注意的是，我们的自增自减操作符不仅仅局限于数值，其他类型也可以，遵循下面的规则：\",\"在应用于一个包含有效数字字符的字符串时，现将其转换为数字值，再执行加减 1 操作。字符串变量变为了数值变量。\",\"在应用于一个不包含有效数字字符的字符串时，将变量的值设置为 NaN，字符串变量变成数值变量。\",\"遇布尔值 false 时，先将其转换为 0 再执行加减 1 操作，布尔值变量变成数值变量。\",\"遇布尔值 true 时，先将其转换为 1 再执行加减 1 操作，布尔值变量变成数值变量。\",\"在应用浮点数数值时，执行加减 1 操作。\",\"示例：\",\"let s1 = '123'; let s2 = '123Hello'; let s3 = 'Hello'; let s4 = true; let s5 = 3.14; console.log(--s1); // 122 console.log(--s2); // NaN console.log(--s3); // NaN console.log(--s4); // 0 console.log(--s5); // 2.14\"]},\"807\":{\"h\":\"3. 逻辑运算符\",\"t\":[\"JS 中为我们提供了三种逻辑运算符\"]},\"808\":{\"h\":\"1. && 与\",\"t\":[\"作用于两到多个值，并且只有所有的操作数都是真值时，才为 true\",\"console.log(false && true); // false console.log(true && true); // true\",\"JavaScript 里面的&&存在短路现象，具体说明如下：\",\"第一个操作数为真：会进入第二个操作数的判断，且无论第二个操作数真假，都会返回第二个操作数。\",\"第一个操作数为假：不会进入第二个操作数的判断，直接返回第一个操作数。\",\"来看下面的例子：\",\"console.log(3 && 5); // 5 console.log('Hello' && 20); // 20 console.log('Hello' && false); // false console.log('' && 'shoe'); // \\\"\\\" console.log('Hello' && ''); // ''\",\"下面是关于&&运算符的一道经典练习题：\",\"let a = true; let b = a && c; // 因为a是true,所以会判断第2个数 console.log(b); // ReferenceError: c is not defined\",\"let a = false; let b = a && c; // 因为a是false,所以不会判断第2个数 console.log(b); // false\"]},\"809\":{\"h\":\"2. || 或\",\"t\":[\"同样是作用于两到多个值，但是只要有一个操作数为真，就返回真\",\"console.log(false || true); // true console.log(true || false); // true\",\"JavaScript 里面的||同样存在短路现象，具体说明如下：\",\"如果第一个操作数为真，则不会进入第二个数的判断。所以无论第二个操作数真假，都直接返回第一个操作数\",\"如果第一个操作数为假，则会进入第二个数的判断。但是无论第二个操作数真假，都直接返回第二个操作数\",\"来看下面的例子：\",\"console.log(false || true); // true console.log('Hello' || ''); // Hello console.log('Hello' || 'str'); // Hello console.log(NaN || ''); // \\\"\\\" console.log(0 || 'Hello World'); // Hello World console.log('' || 'str'); // str console.log('' || false); // false\",\"下面是关于||运算符的一道经典练习题：\",\"let a = false; let b = a || c; // 因为a是false,所以会判断第2个数 console.log(b); // ReferenceError: c is not defined\",\"let a = true; let b = a || c; // 因为a是false,所以会判断第2个数 console.log(b); // true\"]},\"810\":{\"h\":\"3. ! 非\",\"t\":[\"所谓非，就是取反，非真即假，非假即真\",\"let i = true; console.log(!i); // false\",\"非运算符不仅仅只能用于布尔值，其他数据类型也是可以的，如下：\",\"如果操作数是一个对象，返回 false\",\"如果操作数是一个空字符串，返回 true\",\"如果操作数是一个非空字符串，返回 false\",\"如果操作数是数值 0，返回 true\",\"如果操作数是任意非 0 数值（包括 Infinity），返回 false\",\"如果操作数是 null，返回 true\",\"如果操作数是 NaN，返回 true\",\"如果操作数是 undefined，返回 true\",\"console.log(!false); // true console.log(!'blue'); // false console.log(!0); // true console.log(!NaN); // true console.log(!''); // true console.log(!12); // false\",\"可使用双否定!!来判定一个值是真值还是假值，\",\"简单来说,!!,就是把一个值转换为 boolean 类型\",\"如下：\",\"console.log(!!''); // false console.log(!!NaN); // false console.log(!!'Hello'); // true\"]},\"811\":{\"h\":\"4. 比较运算符\"},\"812\":{\"h\":\"1. 关系运算符\",\"t\":[\"常见的关系运算符有小于，大于，小于等于，大于等于，关于数的比较就不用说了，如下：\",\"console.log(5 > 3); // true console.log(3 > 5); // false\",\"主要说一下字符串的比较，如下：\",\"console.log('c' > 'b'); // true console.log('c' > 'box'); // true\",\"这里的比较主要是按照 ASCII 码来进行比较的。\",\"如果是字符串和数字进行比较，那么会将字符串先转换为数字，如果不能转换为数字，则转换为 NaN\",\"console.log('5' > 3); // true，因为\\\"5\\\"转为了5 // 任何一个数与 NaN 进行关系比较,返回的都是 false console.log('Hello' > 3); // false，因为\\\"Hello\\\"转为了NaN\",\"完整的特殊规则如下：\",\"如果两个数都是数值，则执行数值比较\",\"如果两个数都是字符串，则比较两个字符串对应的字符编码\",\"如果一个操作数是数值，则将另一个操作数转换为一个数值，然后执行数值的比较\",\"如果一个操作数是对象，则调用这个对象的valueOf()方法，用得到的结果按照前面的规则执行比较。如果对象没有valueOf()方法，则调用toString()方法，并用得到的结果根据前面的规则执行比较。\",\"如果一个数是布尔值，则先将其转换为数值，然后再进行比较\",\"还需要注意，任何数和 NaN 进行比较返回的都是 false\",\"console.log(10 > NaN); // false console.log(10 < NaN); // false\"]},\"813\":{\"h\":\"2. 相等和不相等\",\"t\":[\"==表示相等，!=表示不相等，数据类型不同的数据进行相等比较的话会自动转换数据类型，还有一些其他的转换规则如下：\",\"null 和 undefined 是相等的\",\"如果有一个操作数是 NaN，则返回 false，NaN 和 NaN 比较也是 false\",\"如果是数字的字符串和数字进行比较，会先将字符串转换为数字\",\"布尔值里面 true 转换为 1，false 转换为 0\",\"下表列出了一些特殊的情况\",\"表达式\",\"值\",\"null == undefined\",\"true\",\"\\\"NaN\\\" == NaN\",\"false\",\"5 == NaN\",\"false\",\"NaN == NaN\",\"false\",\"NaN != NaN\",\"true\",\"false == 0\",\"true\",\"true == 1\",\"true\",\"true == 2\",\"false\",\"undefined == 0\",\"false\",\"null == 0\",\"false\",\"\\\"5\\\" == 5\",\"true\"]},\"814\":{\"h\":\"3. 全等和不全等\",\"t\":[\"全等是===，不全等是!==，所谓全等，就是要求数据类型和数值都必须相等，如下：\",\"console.log('5' == 5); // true console.log('5' === 5); // false\"]},\"815\":{\"h\":\"5. 三目运算符\",\"t\":[\"条件表达式?语句 1:语句 2;\",\"条件运算符在执行时，首先对条件表达式进行求值，如果该值为 true，则执行语句 1，并返回执行结果；如果该值为 false，则执行语句 2，并返回执行结果。\",\"如果条件的表达式的求值结果是一个非布尔值，会将其转换为布尔值然后再运算。\"]},\"816\":{\"h\":\"6. 运算符的优先级\",\"t\":[\"JavaScript 中的运算符优先级是一套规则。该规则在计算表达式时控制运算符执行的顺序。具有较高优先级的运算符先于较低优先级的运算符执行。例如，乘法的执行先于加法。\",\"下表按照最高到最低的优先级列出了 JavaScript 运算符。具有相同优先级的运算符按从左至右的顺序求值。\",\"| 运算符 | 描述 | | --- | --- | --- | --- | | .[]() | 字段访问，数组下标，函数调用以及表达式分组 | | ++---~!deletenewtypeofvoid | 一元运算符，返回类型，对象创建，未定义值 | | */% | 乘法，除法，取模 | | +-+ | 加法，减法，字符串拼接 | | <<>>>>> | 移位 | | <<=>>=instanceof | 小于，小于等于，大于，大于等于，instanceof | | ==!====!== | 等于，不等于，全等，不全等 | | & | 按位与 | | ^ | 按位异或 | | | | 按位或 | | && | 逻辑与 | | | | | 逻辑或 | | ?: | 三目运算符 | | = | 赋值 | | , | 多重赋值 |\",\"算数和比较运算符的优先级大于逻辑运算符\",\"三目运算符的优先级很低\"]},\"817\":{\"h\":\"五、流程控制\",\"t\":[\"所谓流程控制，主要就是用于控制整个程序的走向的。默认情况下，程序是从上往下，逐条执行，这种情况我们将其称之为顺序结构。但是并不是所有的程序都是使用顺序结构就能够完成的。在我们书写程序时往往还需要对整个程序进行分支，或者对某一段代码进行重复执行。\"]},\"818\":{\"h\":\"1. 条件判断语句\",\"t\":[\"if (条件表达式) { 语句1; } else if (条件表达式) { 语句2; } else if (条件表达式) { 语句3; } else { 语句4; }\",\"if 语句只能控制紧随其后的那个语句,如果希望 if 语句可以控制多条语句，可以将这些语句统一放到代码块中。（建议都加上代码块，以便代码阅读）\",\"JS 中的空格和换行会自动忽略，所以仅靠缩进无法表示彼此间的联系。\",\"如果条件不是一个布尔值，那么会被自动转换为布尔值\"]},\"819\":{\"h\":\"2. 条件分支语句\",\"t\":[\"switch(条件表达式){ case 表达式: 语句... break; case 表达式: 语句... break; default: 语句... break; }\",\"和其他静态语言有所不同的是， case 后面的值不一定必须是常量，可以是变量甚至是表达式\",\"switch语句在执行时会依次将case后的表达式的值和switch后的条件表达式的值进行全等比较，所以当数据类型不同时，判断为false。\",\"break用于跳出某一个 case，如果不书写 break 的话，进入 case 以后会继续进入后面的 case 语句。\",\"default用于书写默认的条件，如果前面都不满足的话，就进入到 default 语句里面。\"]},\"820\":{\"h\":\"3. while 循环\",\"t\":[\"while(条件表达式){ 语句... } do{ 语句... }while(条件表达式)\",\"这两个语句功能类似，不同的是while是先判断后执行，如果表达式成立，执行循环体，否则结束循环；而do...while会先执行后判断，do...while可以保证 循环体至少执行一次 ，而 while 不能。\"]},\"821\":{\"h\":\"4. for 循环\",\"t\":[\"for(①初始化表达式;②条件表达式;④更新表达式){ ③语句... } //举例： for(var i = 0 ; i < 10 ; i++ ){ alert(i); }\",\"它执行的顺序为：首先执行初始化表达式 ，然后进行条件表达式的判断，如果表达式成立，那么执行循环体，循环体执行结束后，执行更新表达式，然后回头再看条件表达式是否成立，成立就执行循环体，不成立该循环就结束\",\"for 循环中的三个部分都可以省略，也可以写在外部，如果在 for 循环中不写任何的表达式，只写两个;此时循环是一个死循环会一直执行下去。\",\"for 循环的嵌套使用\"]},\"822\":{\"h\":\"遍历数组\",\"t\":[\"最早的时候，在 JavaScript 里面就经常使用 for 循环来对数组进行遍历。示例如下：\",\"let arr = [1, 2, 3, 4, 5]; for (let i = 0; i < arr.length; i++) { console.log(arr[i]); }\",\"这里有一个小技巧，就是在使用 for 循环来遍历数组的时候，使用一个变量来存储数组的长度，这样可以大大提升程序的效率，因为不用每次都去重新计算数组的长度\",\"let arr = [1, 2, 3, 4, 5]; for (let i = 0, j = arr.length; i < j; i++) { console.log(arr[i]); }\"]},\"823\":{\"h\":\"5. break 和 continue\"},\"824\":{\"h\":\"break\",\"t\":[\"break 关键字可以用来退出 switch 或循环语句，不能在 if 语句中使用 break 和 continue\",\"break 关键字，会立即终止离他最近的那个循环语句\",\"可以为循环语句创建一个 label，来标识当前的循环\",\"label:循环语句\",\"outer: for(;;){}\",\"使用 break 语句时，可以在 break 后跟着一个 label，这样 break 将会结束指定的循环，而不是最近的\"]},\"825\":{\"h\":\"continue\",\"t\":[\"continue 关键字可以用来跳过当次循环，同样 continue 也是默认只会对离他最近的循环循环起作用。\"]},\"826\":{\"h\":\"六、对象\",\"t\":[\"JavaScript 里面的对象就是一组键值对的集合。这些键一般由字符串构成，而值可以是任意数据类型。比如字符串，数字，布尔，数组或者函数。\",\"一般来讲，如果一个键映射的是一个非函数的值，我们将其称之为该对象的属性，而如果一个键映射的是一个函数的值，我们将其称之为方法。\"]},\"827\":{\"h\":\"1. 创建对象\",\"t\":[\"要创建一个对象，我们只需要输入一对大括号即可。这样我们就可以创建一个空的对象，如下：\",\"let objName = {};\",\"创建好对象以后，我们就可以给该对象添加相应的属性，例如这里我们给 xiejie 这个对象添加相应的属性：\",\"let xiejie = {}; xiejie.name = 'xiejie'; xiejie.age = 18; xiejie.gender = 'male'; xiejie.score = 100;\",\"当然，和数组一样，我们可以在创建对象时就给该对象初始化好相应的信息，如下：\",\"let xiejie = { name: 'xiejie', age: 18, gender: 'male', score: 100, };\",\"可以看到，当我们创建包含属性的对象的时候，属性与属性之间是以逗号隔开的。这里我们可以将属性名称之为键，而属性对应的数据称之为值。\",\"所以，正如开头我们所介绍的那样，对象是由一个一个键值对组成的。\"]},\"828\":{\"h\":\"2. 访问对象属性\",\"t\":[\"访问对象的属性的方法有 3 种：点访问法，中括号访问法，symbol 访问法。\",\"1. 点访问法\",\"我们可以通过一个点.来访问到对象的属性，如下：\",\"let xiejie = { name: 'xiejie', age: 18, gender: 'male', score: 100, }; console.log(xiejie.name); // xiejie console.log(xiejie.age); // 18 console.log(xiejie.gender); // male console.log(xiejie.score); // 100\",\"2. 中括号访问法\",\"第二种方法，是使用中括号法来访问对象的属性，如下：\",\"let xiejie = { name: 'xiejie', age: 18, gender: 'male', score: 100, }; console.log(xiejie['name']); // xiejie console.log(xiejie['age']); // 18 console.log(xiejie['gender']); // male console.log(xiejie['score']); // 100\",\"一般来讲，访问对象属性的时候使用点访问法的情况要多一些，那什么时候使用中括号访问方法呢？\",\"当我们的属性名来自于变量的时候，这个时候中括号就要比点要灵活许多。来看下面的例子：\",\"let xiejie = { name: 'xiejie', age: 18, gender: 'male', score: 100, }; let str = 'name'; console.log(xiejie[str]); // xiejie\",\"既然讲到了对象属性的中括号访问法，那我们就顺便为大家介绍一下伪数组对象的原理。\",\"前面给大家介绍过的arguments就是一个伪数组对象。伪数组对象的原理就在于对象的键都是数字。如果属性名是数字的话，通过中括号法来访问时可以不用添加引号，如下：\",\"let obj = { 1: 'Bill', 2: 'Lucy', 3: 'David', }; console.log(obj[1]); // Bill console.log(obj[2]); // Lucy console.log(obj[3]); // David\",\"这样，就形成了给人感觉像是数组，但是并不是数组的伪数组对象。\",\"3. symbol 访问法\",\"在 ECMAScript 6 之前，对象的属性名都只能是字符串。但是这样很容易造成属性名的冲突。\",\"比如我们使用了一个别人提供的对象，然后我们想在这个对象的基础上进行一定的扩展，添加新的属性，这个时候可能会因为不知道原来的对象里面包含哪些属性名，所以就把别人的对象所具有的属性给覆盖掉了。\",\"示例如下：\",\"// 假设 person 对象是从外部库引入的一个对象 let person = { name: 'xiejie', }; console.log(person.name); // xiejie // 接下来我手动为 person 这个对象添加了一个 name 属性 // 这里便产生的属性冲突 person.name = 'yajing'; console.log(person.name); // yajing\",\"可以看到，这里两个 name 属性就产生了冲突，下面的 name 属性值把上面的 name 属性值给覆盖掉了。\",\"从 ECMAScript 6 开始，新增了symbol这种数据类型，专门用来解决这样的问题。\",\"创建一个 symbol，需要使用Symbol()函数，其语法如下：\",\"let sym = Symbol(描述信息);\",\"示例：\",\"let name = Symbol('这是一个名字'); console.log(name); // Symbol(这是一个名字) console.log(typeof name); // symbol\",\"这里的描述信息是可选的，是对我们自己创建的 symbol 的一个描述。接下来我们来用 symbol 作为对象的属性，示例如下：\",\"let person = { name: 'xiejie', }; let name = Symbol('这是一个名字'); person[name] = 'yajing'; console.log(person.name); // xiejie console.log(person[name]); // yajing\",\"可以看到，使用 symbol 来作为对象的属性，避免了同名的属性名发生冲突。\",\"有些时候我们希望在不同的代码中共享一个 symbol，那么这个时候可以使用Symbol.for()方法来创建一个共享的 symbol。\",\"ECMAScript 6 提供了一个可以随时访问的全局 symbol 注册表。当我们使用Symbol.for()方法注册一个 symbol 的时候，系统会首先在全局表里面查找对应键名的 symbol 是否存在。如果存在，直接返回已经有的 symbol，如果不存在，则在全局表里面创建一个新的 symbol，如下：\",\"let obj = {}; let name = Symbol.for('test'); // 此时的 test 不在是描述信息，而是全局表里的键 obj[name] = 'xiejie'; let name2 = Symbol.for('test'); console.log(obj[name2]); // xiejie\",\"如果使用Symbol.for()方法创建 symbol 的时候没有传递任何参数，那么也会将 undefined 作为全局表里面的键来进行注册，证明如下：\",\"let obj = {}; let name = Symbol.for(); obj[name] = 'xiejie'; let name2 = Symbol.for(undefined); console.log(obj[name2]); // xiejie\",\"ECMAScript 6 里面还提供了Symbol.keyFor()方法来查找一个 symbol 的键是什么。\",\"但是需要注意的是，该方法只能找到注册到全局表里面的 symbol 的键。如果是通过Symbol()方法创建的 symbol，是无法找到的。\",\"其实也很好理解，因为通过Symbol()方法创建的 symbol 不存在有键。\",\"let obj = {}; let name1 = Symbol('test1'); let name2 = Symbol.for('test2'); let i = Symbol.keyFor(name1); let j = Symbol.keyFor(name2); console.log(i); // udnefined console.log(j); // test2\",\"前面有提到，如果一个对象的属性对应的是一个函数，那么这个函数被称之为对象的方法。调用对象方法的方式和前面介绍的访问对象属性的方式是一样的，可以通过点访问法，中括号访问法以及 symbol 访问法来进行对象方法的调用。\",\"其实方法也可以看作是对象的一个属性，只是对应的值为一个函数而已。\",\"let walk = Symbol('this is a test'); let person = { name: 'xiejie', walk: function () { console.log(\\\"I'm walking\\\"); }, [walk]: function () { console.log(\\\"I'm walking,too\\\"); }, }; person.walk(); // I'm walking person['walk'](); // I'm walking person[walk](); // I'm walking,too\"]},\"829\":{\"h\":\"3. 删除对象属性\",\"t\":[\"对象的任何属性都可以通过delete运算符来从对象中删除。示例如下：\",\"let person = { name: 'xiejie', age: 18, walk: function () { console.log(\\\"I'm walking\\\"); }, }; console.log(person.age); // 18 delete person.age; // 删除 age 这个属性 console.log(person.age); // undefined person.walk(); // I'm walking delete person.walk; // 删除 walk 方法 person.walk(); // 报错 // TypeError: person.walk is not a function\",\"如果是删除的是属性，那么再次访问值为变为 undefined，而如果删除的是方法，那么调用时会直接报错。\"]},\"830\":{\"h\":\"4. 对象常用属性和方法\",\"t\":[\"1. in 操作符\",\"该操作符用于判断一个对象是否含有某一个属性，如果有返回 true，没有返回 false。\",\"需要注意的是，如果对象对应的某个属性为 symbol 属性，那么写法上有一定的区别，如下：\",\"let person = { name: 'xiejie', age: 18, walk: function () { console.log(\\\"I'm walking\\\"); }, }; let gender = Symbol(\\\"person's gender\\\"); person[gender] = 'male'; console.log('name' in person); // true console.log('age' in person); // true console.log([gender] in person); // 报错 // TypeError: Cannot convert a Symbol value to a string\",\"书写为[gender]，系统给出了无法将 symbol 值转换为字符串的错误。\",\"正确的写法，应该是直接书写 symbol 名，而不需要包含在中括号里面，如下：\",\"let person = { name: 'xiejie', age: 18, walk: function () { console.log(\\\"I'm walking\\\"); }, }; let gender = Symbol(\\\"person's gender\\\"); person[gender] = 'male'; console.log('name' in person); // true console.log('age' in person); // true console.log(gender in person); // true\",\"2. for..in\",\"这个for..in我们在前面讲解遍历数组的时候已经见到过了。可以使用for..in来取出数组的键。因为数组也是一种对象，所以我们可以使用for..in来循环遍历一个对象的所有属性，示例如下：\",\"let person = { name: 'xiejie', age: 18, walk: function () { console.log(\\\"I'm walking\\\"); }, }; for (let i in person) { console.log(i); } // name // age // walk\",\"需要注意的是，使用for..in虽然说可以遍历出一个对象的所有的属性和方法（包括继承的，关于继承后面会介绍），但是无法遍历出用 symbol 来定义的属性，证明如下：\",\"let person = { name: 'xiejie', age: 18, walk: function () { console.log(\\\"I'm walking\\\"); }, }; let gender = Symbol(\\\"person's gender\\\"); person[gender] = 'male'; for (let i in person) { console.log(i); } // name // age // walk\",\"那么，这个时候可能有人会问了，那我如何才能遍历出一个对象的 symbol 属性呢？这里介绍两种方式。\",\"第一种是使用Object.getOwnPropertySymbols()来返回一个对象所有的 symbol 属性，如下：\",\"let person = { name: 'xiejie', age: 18, walk: function () { console.log(\\\"I'm walking\\\"); }, }; let gender = Symbol(\\\"person's gender\\\"); let score = Symbol(\\\"person's score\\\"); let hobby = Symbol.for('hobby'); let food = Symbol.for('food'); person[gender] = 'male'; person[score] = 100; person[hobby] = 'JavaScript'; person[food] = 'meat'; console.log(Object.getOwnPropertySymbols(person)); // [ Symbol(person's gender), // Symbol(person's score), // Symbol(hobby), // Symbol(food) ]\",\"除了上面的方法以外，ECMAScript 6 中还提供了一个叫做Reflect.ownkeys()方法。该方法可以遍历出一个对象的所有类型的键名，包括字符串的键名以及 symbol 类型的键名。\",\"let person = { name: 'xiejie', age: 18, walk: function () { console.log(\\\"I'm walking\\\"); }, }; let gender = Symbol(\\\"person's gender\\\"); person[gender] = 'male'; console.log(Reflect.ownKeys(person)); // [ 'name', 'age', 'walk', Symbol(person's gender) ]\",\"3. keys()，values()，entries()\",\"前面在介绍遍历数组，集合以及映射的时候，有介绍过这 3 个方法，分别用于找出可迭代对象的键，值，以及键和值。这里，我们也可以使用这 3 个方法来找出非可迭代对象的键和值，如下：\",\"Object.key()\",\"let person = { name: 'xiejie', age: 18, walk: function () { console.log(\\\"I'm walking\\\"); }, }; let gender = Symbol(\\\"person's gender\\\"); person[gender] = 'male'; for (let i of Object.keys(person)) { console.log(i); } // name // age // walk\",\"Object.values()\",\"let person = { name: 'xiejie', age: 18, walk: function () { console.log(\\\"I'm walking\\\"); }, }; let gender = Symbol(\\\"person's gender\\\"); person[gender] = 'male'; for (let i of Object.values(person)) { console.log(i); } // xiejie // 18 // [Function: walk]\",\"Object.entries()\",\"let person = { name: 'xiejie', age: 18, walk: function () { console.log(\\\"I'm walking\\\"); }, }; let gender = Symbol(\\\"person's gender\\\"); person[gender] = 'male'; for (let i of Object.entries(person)) { console.log(i); } // [ 'name', 'xiejie' ] // [ 'age', 18 ] // [ 'walk', [Function: walk] ]\"]},\"831\":{\"h\":\"5. 嵌套对象\",\"t\":[\"一个对象里面包含其他的对象，这个我们称之为对象的嵌套。示例如下：\",\"let family = { xiejie: { age: 18, gender: 'male', }, song: { age: 20, gender: 'female', }, };\",\"当我们访问嵌套对象里面的值的时候，和访问单个对象的方式是一样的。\",\"let family = { xiejie: { age: 18, gender: 'male', }, song: { age: 20, gender: 'female', }, }; console.log(family.xiejie.gender); // male 点访问法 console.log(family['song']['age']); // 20 中括号访问法\"]},\"832\":{\"h\":\"6. 对象的解构\",\"t\":[\"在前面介绍解构的时候，我们有介绍过数组的解构。这里来看一下对象的解构，基本上和数组的解构类似：\",\"let a = { name: 'xiejie', age: 18 }; let b = { name: 'song', age: 20 }; let { name: aName, age: aAge } = a; let { name: bName, age: bAge } = b; console.log(aName); // xiejie console.log(aAge); // 18 console.log(bName); // song console.log(bAge); // 20\",\"当属性名和变量名一致的时候，可以进行简写，如下：\",\"let a = { name: 'xiejie', age: 18 }; let { name, age } = a; console.log(name); // xiejie console.log(age); // 18\",\"和数组一样，同样可以解构嵌套的对象，如下：\",\"let family = { xiejie: { age: 18, gender: 'male', }, song: { age: 20, gender: 'female', }, }; let { xiejie, song } = family; console.log(xiejie); // { age: 18, gender: 'male' } console.log(song); // { age: 20, gender: 'female' }\",\"顺便一提的是，解构我们也是可以像函数一样设置一个默认值的，如下：\",\"let { name = 'xiejie', age } = {}; console.log(name); // xiejie console.log(age); // undefined let [a = 3, b] = []; console.log(a); // 3 console.log(b); // undefined\",\"在上面的对象的解构中，我们为 name 变量设置了一个默认值为 xiejie，当我们解构一个空对象的时候，name 变量的值就使用了默认的 xiejie 这个值，而 age 这个变量由于没有设置默认值，所以值为 undefined。下面数组的解构也是同理。\",\"当然，既然叫做默认值，和函数一样，如果有解构的值传过来的话，肯定就是使用解构传过来的值，如下：\",\"let { name = 'xiejie', age } = { name: 'song', age: 10 }; console.log(name); // song console.log(age); // 10 let [a = 3, b = 5] = [1, 2]; console.log(a); // 1 console.log(b); // 2\"]},\"833\":{\"h\":\"7. 对象作为函数参数（扩展）\",\"t\":[\"对象也可以作为函数的形式参数。这在有很多形参的时候显得非常有用，因为它允许我们在调用函数时不用记住参数的顺序。\",\"我们先来看一下我们一般函数调用的例子，如下：\",\"let test = function (name, age) { console.log(`我叫${name},我今年${age}岁`); }; test('xiejie', 18); // 我叫xiejie,我今年18岁 test(18, 'xiejie'); // 我叫18,我今年xiejie岁\",\"可以看到，以前我们传递参数时，实参的顺序必须要和形参的顺序一致。否则就会出现上面第 2 次调用函数时的情况，输出不符合预期的结果。\",\"当我们使用对象来作为实参时，形参可以书写解构表达式。这样就不用必须按照定义时形参的顺序来传值，只需要传递一个对象过去即可，对象属性的顺序可以随意。示例如下：\",\"let test = function ({ name, age }) { console.log(`我叫${name},我今年${age}岁`); }; test({ name: 'xiejie', age: 18 }); // 我叫 xiejie,我今年 18 岁 test({ age: 18, name: 'xiejie' }); // 我叫 xiejie,我今年 18 岁\",\"我们也可以为解构的变量设置一个默认值，甚至可以给整个解构表达式设置一个默认值，示例如下：\",\"// 给整个解构表达式设置了一个默认值 {name:\\\"Bill\\\",age:20} let test = function ({ name = 'xiejie', age = 18 } = { name: 'Bill', age: 20 }) { console.log(`我叫${name},我今年${age}岁`); }; test(); // 我叫 Bill,我今年 20 岁 test({}); // 我叫 xiejie,我今年 18 岁 test({ name: 'yajing' }); // 我叫 yajing,我今年 18 岁 test({ age: 1, name: 'xizhi' }); // 我叫 xizhi,我今年 1 岁\",\"这种技术被称之为命名参数，经常被用在函数有很多可选参数的时候。\"]},\"834\":{\"h\":\"8. this 关键字\",\"t\":[\"既然学习到了对象，那么有必要介绍一下this关键字。\",\"this，翻译成中文是这个的意思。当我们在一个对象中使用 this 关键字时，代表的就是当前对象。\",\"来看下面的例子：\",\"let person = { name: 'xiejie', age: 18, intro: function () { console.log(this); // { name: 'xiejie', age: 18, intro: [Function: intro] } console.log(`My name is ${this.name},I'm ${this.age} years old`); // My name is xiejie,I'm 18 years old }, }; person.intro();\",\"这里我们调用了 person 对象的intro()方法，里面涉及到了 this 关键字。由于是在对象里面，所以 this 指向当前对象，也就是 person 这个对象。\",\"所以this.name等价于person.name，this.age等价于person.age。\"]},\"835\":{\"h\":\"9. 命名空间（扩展）\",\"t\":[\"当相同的变量和函数名被共享在同一作用域的时候，就会发生命名冲突。这看起来不太可能，但是我们可以想象一下，随着时间的推移，我们已经写了很多的代码，可能不知不觉就重用了一个变量名。如果是使用的其他开发者的代码库，这种问题就变得更加有可能。\",\"解决命名冲突的方式，就是使用对象字面量来为一组相关函数创建一个命名空间。这样在调用这些函数的时候需要先写上对象名，这里的对象名就充当了命名空间的角色。\",\"示例如下：\",\"let myMaths = { // 求平方函数 square: function (x) { return x * x; }, // 传入数组求平均值函数 avg: function (arr) { let total = arr.reduce((a, b) => a + b); return total / arr.length; }, }; let arr = [1, 2, 3, 4, 5]; console.log(myMaths.avg(arr)); // 3 console.log(myMaths.square(5)); // 25\",\"这里我们的 myMaths 就是我们的命名空间，这样就不用担心和其他人的变量或者函数名发生命名冲突。\"]},\"836\":{\"h\":\"10. 速写属性与速写函数\",\"t\":[\"速写属性：如果对象的属性使用了外面变量的值，并且这个变量名与属性名一直，那么就可以直接简写\",\"let username = '张三'; let age = 18; let obj = { username: username, age: age, }; //可以直接简写为 let obj = { username, age, };\",\"速写方法，再对象中，声明函数属性，可以直接函数名()就行了\",\"let obj = { show: function () {}, info: function () {}, }; //可以简写为： let obj = { show() {}, info() {}, };\",\"let username = 'jack'; let score = 80; let sex = '男'; let stu = { username, score, sex, show() { console.log('show'); }, info() { console.log('info'); }, run() { console.log('run'); }, }; console.log(stu.username);\"]},\"837\":{\"h\":\"七、数组\"},\"838\":{\"h\":\"1. 概念\",\"t\":[\"数组也是一个对象，是大多数语言里面最常见的一种数据结构，它是一个有序的值列表。\",\"它和我们普通对象功能类似，也是用来存储一些值的\",\"不同的是普通对象是使用字符串作为属性名，而数组是使用数字来作为索引操作元素 \",\"索引：从 0 开始的整数就是索引\",\"数组的存储性能比普通对象要好，在开发中我们经常使用数组来存储一些数据\",\"数组中的元素可以是任意的数据类型（包括对象和函数）\"]},\"839\":{\"h\":\"2. 创建数组\"},\"840\":{\"h\":\"构造函数创建数组\",\"t\":[\"var arr = new Array(1, 2, 3);\",\"当传入的参数为单一的整数值时，代表的是数组的长度\"]},\"841\":{\"h\":\"静态方法创建数组\",\"t\":[\"Array.of(3, 11, 8); // [3,11,8] Array.of(3); // [3] Array.of(3).length; // 1\",\"Array.of()方法用于将一组值，转换为数组，不会因为参数个数的不同而影响 Array 的行为\",\"Array.from({ length: 2 }, () => 'jack'); // ['jack', 'jack'] let spans = document.querySelectorAll('span.name'); let names2 = Array.from(spans, (s) => s.textContent);\",\"Array.from可以将两类对象转为真正的数组：类似数组的对象和可遍历（iterable）的对象\",\"接受一个函数作为第二个参数，作用类似于数组的map()方法，用来对每个元素进行处理，将处理后的值放入返回的数组\"]},\"842\":{\"h\":\"字面量创建数组\",\"t\":[\"var arr = [1, 2, 3, 4, 5, 10]; //常用\",\"需要注意的是，无论是字面量形式创建的数组，还是构造函数创建的数组，当我们使用typeof来打印其数据类型的时候，都会返回一个object，如下：\",\"let arr1 = []; let arr2 = new Array(); console.log(typeof arr1); // object console.log(typeof arr2); // object\"]},\"843\":{\"h\":\"3. 数组赋值\",\"t\":[\"给数组赋值的方法也非常简单，不过可以分为先声明再赋值和声明时直接赋值，如下：\",\"1. 先声明再赋值\",\"let arr = []; arr[0] = 1; arr[1] = 2; arr[2] = 3;\",\"注意下标是从 0 开始的。\",\"2. 声明时直接赋值\",\"let arr = [1, 2, 3, 4, 5];\",\"需要注意的是我们可以在数组的任意位置进行赋值，数组的长度会自动改变，空的位置使用undefined来进行填充\",\"let arr = []; arr[0] = 1; arr[4] = 10; console.log(arr); // [ 1, <3 empty items>, 10 ]\",\"由于 JavaScript 是动态语言，所以 JavaScript 里面数组的数据类型可以是任意类型\",\"let arr = [1, 'Hello', 3.14, true];\"]},\"844\":{\"h\":\"4. 访问数组元素\",\"t\":[\"通过数组的下标，我们可以轻松的访问到存储在数组里面的元素，如下：\",\"let arr = [1, 2, 3, 4, 5]; console.log(arr[0]); // 1\",\"需要注意数组里面的第一个元素是从下标 0 开始的。\",\"除了这种常规的访问方式，我们还可以使用变量的方式来进行访问，如下：\",\"let arr = [1, 2, 3, 4, 5]; let i = 2; console.log(arr[i]); // 3\"]},\"845\":{\"h\":\"5. 删除元素\",\"t\":[\"我们可以使用delete运算符来删除数组中的某一个元素，示例如下：\",\"let arr = [1, 2, 3, 4, 5]; delete arr[2]; // 删除数组中的第3个元素 console.log(arr); // [ 1, 2, <1 empty item>, 4, 5 ]\"]},\"846\":{\"h\":\"6. 数组的遍历\",\"t\":[\"接下来我们来看一下数组的遍历，在 JavaScript 中，遍历数组的方式非常的多。这里先介绍几种常见的数组遍历方式。\",\"通过 for 循环来遍历数组\",\"最简单的方式就是通过for循环来进行数组的遍历，这也是一直以来被使用得最多的方式，示例如下：\",\"let arr = [1, 2, 3, 4, 5]; for (let i = 0; i < arr.length; i++) { console.log(arr[i]); } // 1 // 2 // 3 // 4 // 5\",\"通过 for-in 来遍历数组\",\"for-in主要迭代的是数组的键，然后我们通过键就可以找到相应的数组元素，示例如下：\",\"let arr = [1, 2, 3, 4, 5]; for (let i in arr) { console.log(`键为${i}的元素值为${arr[i]}`); } // 键为 0 的元素值为 1 // 键为 1 的元素值为 2 // 键为 2 的元素值为 3 // 键为 3 的元素值为 4 // 键为 4 的元素值为 5\",\"通过 for-of 来遍历数组\",\"上面介绍的for-in是迭代数组的键，这里所介绍的for-of是直接迭代数组的值，示例如下：\",\"let arr = [1, 2, 3, 4, 5]; for (let i of arr) { console.log(i); } // 1 // 2 // 3 // 4 // 5\",\"通过 forEach 来遍历数组（扩展）\",\"最后再介绍一种通过forEach的方式来遍历数组，不过这里涉及到了回调函数的知识。在第 5 章我们就会学习回调函数，所以这里大家先了解一下这种遍历的方式即可，示例如下：\",\"let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // 将数组的每一项传入到回调函数，然后执行回调函数里面的操作 let i = arr.forEach(function (item) { console.log(item); });\",\"使用迭代器进行遍历\",\"在 ECMAScript 6 中，还专门提供了 3 个用于迭代可迭代元素的方法，分别是keys()，values()以及entries()方法。\",\"其中keys()是找到可迭代元素的键，values()是找到可迭代元素的值，entries()是同时找到可迭代元素的键和值。\",\"示例：使用keys()方法遍历出数组的键\",\"let arr = [3, 5, 8, 1]; for (let i of arr.keys()) { console.log(i); } // 0 // 1 // 2 // 3\",\"示例：使用values()方法遍历出数组的值\",\"let arr = [3, 5, 8, 1]; for (let i of arr.values()) { console.log(i); } // 3 // 5 // 8 // 1\",\"注意：根据 Node.js 环境的版本，可能出现数组里面无法使用values()方法情况。\",\"示例：使用entries()方法遍历出数组的键和值\",\"let arr = [3, 5, 8, 1]; for (let i of arr.entries()) { console.log(i); } // [ 0, 3 ] // [ 1, 5 ] // [ 2, 8 ] // [ 3, 1 ]\"]},\"847\":{\"h\":\"7. 解构数组\",\"t\":[\"首先我们需要了解什么是解构，所谓解构，就是将一个复杂类型的数据分解为一个普通类型数据。解构是从 ECMAScript 6 开始新添加的功能。可以对数组和对象进行解构。\",\"这里我们先来看一下数组的解构，如下：\",\"let arr = [1, 2, 3]; let [a, b, c] = arr; console.log(a); // 1 console.log(b); // 2 console.log(c); // 3\",\"这里，就是将 arr 这个数组里面的值分解给了 a，b，c 可以使用逗号来跳过不想要解构的元素，如下：\",\"let arr = [1, 2, 3]; let [a, , b] = arr; console.log(a); // 1 console.log(b); // 3\",\"在解构出现之前，我们交换两个数需要使用到一个中间变量，但是现在我们可以使用解构来交换两个数\",\"let a = 1, b = 2; [a, b] = [b, a]; console.log(a); // 2 console.log(b); // 1\",\"关于对象的解构，我们会在后面进行介绍，详细参见对象的相关章节。\"]},\"848\":{\"h\":\"8. 多维数组\",\"t\":[\"首先需要说明的是，JavaScript 里面不支持传统编程语言中的多维数组。但是，由于 JavaScript 的数组里面所存放的数据的数据类型可以是任意类型，所以我们可以模拟出多维数组\",\"let a = ['Bill', 'Mary', 'Lucy']; let b = [21, 24, 27]; let c = [a, b]; // 这里 c 就是一个多维数组\",\"如果要访问多维数组里面的数据，可以使用下面的形式\",\"let a = ['Bill', 'Mary', 'Lucy']; let b = [21, 24, 27]; let c = [a, b]; console.log(c[0][2]); // Lucy\",\"利用前面所介绍的解构，我们可以来解构一个多维数组，示例如下：\",\"let arr = [[1, 2, 3], 4, 5]; let [a, b, c] = arr; console.log(a); // [1,2,3] console.log(b); // 4 console.log(c); // 5\"]},\"849\":{\"h\":\"9. 扩展运算符\",\"t\":[\"扩展运算符是 ECMAScript 6 开始新添加的运算符，用于取出可迭代对象的每一项。这里我们可以用它来快速的展开一个数组\",\"let a = ['Bill', 'Mary', 'Lucy']; let b = [21, 24, 27]; let c = [...a, ...b]; console.log(c); // [ 'Bill', 'Mary', 'Lucy', 21, 24, 27 ]\",\"我们再来看一个例子：\",\"let a = [1, 2, 3]; let b = [...a, 4, 5, 6]; console.log(b); // [ 1, 2, 3, 4, 5, 6 ]\",\"有了这个运算符以后，我们可以使用它将字符串快速转为数组\",\"let str = 'Hello'; let arr = [...str]; console.log(arr); // [ 'H', 'e', 'l', 'l', 'o' ]\"]},\"850\":{\"h\":\"八、数组属性和方法\"},\"851\":{\"h\":\"1. 数组相关属性\",\"t\":[\"这里主要就是要介绍length这个属性，用于返回数组元素的个数。\",\"let arr = [1, 2, 3, 4, 5]; console.log(arr.length); // 5\",\"我们利用此属性，可以快速的清空数组，这种方法比使用重新赋值的效率要高些，如下：\",\"let arr = [1, 2, 3, 4, 5]; arr.length = 0; console.log(arr); // []\",\"其实我们使用length属性就是可以随意的对数组的长度进行操控，例如：\",\"let arr = [1, 2, 3, 4, 5]; arr.length = 3; console.log(arr); // [1,2,3]\"]},\"852\":{\"h\":\"2. 数组相关方法\"},\"853\":{\"h\":\"添加删除方法\",\"t\":[\"push(): 该方法可以向数组的末尾添加一个或多个元素，并返回 数组的新的长度\",\"pop(): 该方法可以删除数组的最后一个元素,并将 被删除的元素 作为返回值返回\",\"let arr = []; let i = arr.push('red', 'blue'); console.log(arr); // [ 'red', 'blue' ] console.log(i); // 2 let j = arr.pop(); console.log(arr); // [ 'red' ] console.log(j); // blue\",\"可以使用push()和pop()方法来实现类似栈的行为。\",\"unshift()\",\"向数组开头添加一个或多个元素，并返回新的数组长度\",\"向前边插入元素以后，其他的元素索引会依次调整\",\"shift()\",\"可以删除数组的第一个元素，并将被删除的元素作为返回值返回\",\"// 从右往左的队列 let arr = []; arr.push('red', 'green', 'pink'); let item = arr.shift(); console.log(item); // red console.log(arr); // [ 'green', 'pink' ]\",\"利用shift()和push()方法就可以实现从右往左的队列\"]},\"854\":{\"h\":\"操作方法\",\"t\":[\"操作方法里面介绍 3 个操作方法，分别是concat()，slice()和splice()\",\"concat()方法是先创建当前数组的一个副本，然后将接收到的参数添加到副本的末尾，最后返回新构建的数组，而原本的数组不会变化。\",\"let arr = [1, 2, 3]; let arr2 = arr.concat('red', 'blue'); console.log(arr); //[ 1, 2, 3 ] console.log(arr2); //[ 1, 2, 3, 'red', 'blue' ]\",\"slice()方法可以接收一个或者两个参数，代表返回项的起始和结束位置。\",\"1 个参数：那就代表起始位置，返回从指定的起始位置到数组末尾的所有项目 2 个参数：那就代表从指定的起始位置到指定的末尾位置之间的项，但是不包括结束位置的项目。\",\"注意：slice()方法不会影响原始数组\",\"let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // 一个参数 let i = arr.slice(3); console.log(i); // [ 4, 5, 6, 7, 8, 9, 10 ] console.log(arr); // [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] // 两个参数 let j = arr.slice(2, 6); console.log(j); // [ 3, 4, 5, 6 ] console.log(arr); // [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\",\"如果传入的是负数，则用数组长度加上该数来确定相应的位置\",\"let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // 一个参数 let i = arr.slice(-3); // 等价于slice(7) console.log(i); // [ 8, 9, 10 ] // 两个参数 let j = arr.slice(-6, -2); // 等价于slice(4,8) console.log(j); // [ 5, 6, 7, 8 ] // 不满足条件返回空数组 let k = arr.slice(-2, -6); // 等价于slice(8,4) console.log(k); // []\",\"splice()这个方法非常的厉害，可以实现对数组的 3 种类型的操作： 删除，插入和替换 ，相当于是增删改操作都可以用这个方法来实现。\",\"删除 ：可以删除任意数量的元素，只需要指定 2 个参数：要参数的第一项位置和要删除的项数。\",\"let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // 从下标为3的元素开始删除，删除5个元素 // 将删除的元素返回给i let i = arr.splice(3, 5); console.log(i); // [ 4, 5, 6, 7, 8 ] console.log(arr); // [ 1, 2, 3, 9, 10 ]\",\"插入 ：可以向任意位置插入任意数量的元素。只需要提供 s 个参数：起始位置，0（要删除的项目），要插入的项目。\",\"let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // 从下标为3的元素之前开始插入 let i = arr.splice(3, 0, 'red', 'blue'); console.log(i); // [] console.log(arr); // [ 1, 2, 3, 'red', 'blue', 4, 5, 6, 7, 8, 9, 10 ]\",\"替换 ：替换的原理在于插入的时候同时进行删除，这样就实现了替换功能。\",\"let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // 从下标为3的元素之前开始插入 // 插入多少，刚好就删除多少 let i = arr.splice(3, 2, 'red', 'blue'); console.log(i); // [ 4, 5 ] console.log(arr); // [ 1, 2, 3, 'red', 'blue', 6, 7, 8, 9, 10 ]\",\"数组和字符串相互转换：join() 和 split()\",\"join()是将数组转为字符串，可以传入分隔符作为参数。\",\"let arr = [1, 2, 3]; let str = arr.join(''); console.log(str); // 123 let str2 = arr.join(','); console.log(str2); // 1,2,3\",\"split()是将字符串转为数组，传入参数指明以什么作为分隔符。\",\"let str = 'Hello'; let arr = str.split(''); console.log(arr); // [ 'H', 'e', 'l', 'l', 'o' ] let arr2 = str.split('l'); console.log(arr2); // [ 'He', '', 'o' ]\"]},\"855\":{\"h\":\"数组重排序方法\",\"t\":[\"重排序涉及到两个方法：reverse()和sort()\",\"reverse()用于反转数组项的顺序，注意使用该方法时会改变原来数组的顺序，而不是返回一个副本。\",\"let arr = [1, 2, 3, 4, 5]; console.log(arr.reverse()); // [ 5, 4, 3, 2, 1 ] console.log(arr); // [ 5, 4, 3, 2, 1 ]\",\"sort()是按照升序排列数组每一项。\",\"let arr = [0, 12, 3, 7, -12, 23]; console.log(arr.sort()); // [ -12, 0, 12, 23, 3, 7 ]\",\"可以看到，我们调用sort()方法以后排序并没有正确的按照升序来进行排序。\",\"原因在于sort()方法排序时首先会调用每个元素的toString()转型方法，然后比较得到的字符串。即使每一项都是数值，sort()方法比较的也是字符串。\",\"解决方法：sort()方法可以接收一个比较函数作为参数，以便我们指定哪个值位于哪个值的前面。比较函数接收两个参数，如果第一个参数应该位于第二个数的前面，返回一个负数，如果两个参数相等，返回 0，如果第一个参数应该位于第二个数的后面，返回一个正数。\",\"let arr = [0, 12, 3, 7, -12, 23]; console.log( arr.sort(function (a, b) { if (a < b) { return -1; } else if (a > b) { return 1; } else { return 0; } }) );\",\"如果是要进行降序排列，只需要将返回值进行修改即可。\",\"let arr = [0, 12, 3, 7, -12, 23]; console.log( arr.sort(function (a, b) { if (a < b) { return 1; } else if (a > b) { return -1; } else { return 0; } }) );\",\"事实上我们的比较函数还有一种更加简单的书写方法，如下：\",\"let arr = [0, 12, 3, 7, -12, 23]; console.log( arr.sort(function (a, b) { return a - b; // 降序就返回 b - a }) );\",\"最后需要注意的是，reverse()和sort()方法，返回值是经过排序之后的数组。\"]},\"856\":{\"h\":\"位置方法\",\"t\":[\"JavaScript 还为数组提供了两个位置方法：indexOf()和lastIndexOf()\",\"这两个方法都接收两个参数：要查找的项目和查找的起点位置索引。区别在于一个是从数组开头开始找，一个是从数组末尾开始找。如果没找到就返回 -1。\",\"let arr = ['H', 'e', 'l', 'l', 'o']; console.log(arr.indexOf('l')); // 2 console.log(arr.lastIndexOf('l')); // 3 console.log(arr.indexOf('z')); // -1\",\"还需要注意的是，这两个方法进行查找时使用的是 全等 进行比较。\",\"let arr = ['1', '2', '3']; console.log(arr.indexOf(1)); // -1\",\"因为NaN===NaN为false，所以这两种方法无法用来查找数组中是否存在NaN，可使用 es6 中新加的find和findIndex\",\"includes()用于查看数组里面是否包含某个元素，包含返回 true，否则返回 false。\",\"let arr = ['1', '2', '3']; console.log(arr.includes(2)); // false console.log(arr.includes('2')); // true console.log(arr.includes(7)); // false\",\"at()方法，接受一个整数作为参数，返回对应位置的成员，并支持负索引。\",\"const arr = [5, 12, 8, 130, 44]; arr.at(2); // 8 arr.at(-2); // 130 arr.at(10); //undefined\",\"如果参数位置超出了数组范围，at()返回undefined\"]},\"857\":{\"h\":\"过滤方法\",\"t\":[\"every()方法测试一个数组内的所有元素是否 都能通过 指定函数的测试。它返回一个布尔值。\",\"[12, 5, 8, 130, 44].every((ele, idx, arr) => ele >= 10); // false [12, 54, 18, 130, 44].every((ele, idx, arr) => ele >= 10); // true\",\"filter() 方法创建给定数组一部分的浅拷贝，其包含通过所提供函数实现的测试的所有元素。\",\"const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present']; const result = words.filter((word) => word.length > 6); console.log(result); // Expected output: Array [\\\"exuberant\\\", \\\"destruction\\\", \\\"present\\\"]\",\"some() 方法测试数组中是否 至少有一个 元素通过了由提供的函数实现的测试。如果在数组中找到一个元素使得提供的函数返回 true，则返回 true；否则返回 false。它不会修改数组\",\"const array = [1, 2, 3, 4, 5]; const even = (element) => element % 2 === 0; console.log(array.some(even)); // true\"]},\"858\":{\"h\":\"九、集合\",\"t\":[\"集合（set）是在 ECMAScript 6 中引入的一种数据结构，用于表示唯一的值。所以这种数据结构里面不能包含重复的值。\",\"接下来这一小节，就让我们具体来看一下这种新的数据结构。\"]},\"859\":{\"h\":\"1. 什么是集合\",\"t\":[\"在 ECMAScript 6 标准制定以前，可选的数据结构类型有限，可以说只有数组这种数据结构。数组使用的是数值型索引，经常被用来模拟队列和栈的行为。\",\"但是如果需要使用非数值型索引，就会用非数组对象创建所需的数据结构，而这就是 Set 集合与后面一节要介绍的 Map 映射的早期实现。\",\"Set 集合是一种无重复元素的列表，这是这种数据结构最大的一个特点。\"]},\"860\":{\"h\":\"2. 创建集合\",\"t\":[\"要创建一个集合，方法很简单，直接使用 new 就可以创建一个 Set 对象。如果想要集合在创建时就包含初始值，那么我们可以传入一个数组进去。\",\"let s1 = new Set(); let s2 = new Set([1, 2, 3]); console.log(s1); // Set {} console.log(s2); // Set { 1, 2, 3 }\"]},\"861\":{\"h\":\"3. 给集合添加值\",\"t\":[\"使用add()方法可以给一个集合添加值，由于调用add()方法以后返回的又是一个 Set 对象，所以我们能连续调用add()方法进行值的添加，这种像链条一样的方法调用方式被称为链式调用。\",\"let s1 = new Set(); s1.add(1); console.log(s1); // Set { 1 } s1.add(2).add(3).add(4); console.log(s1); // Set { 1, 2, 3, 4 }\",\"我们还可以直接将一个数组传入add()方法里面\",\"let s1 = new Set(); s1.add([1, 2, 3]); console.log(s1); // Set { [ 1, 2, 3 ] }\",\"但是需要注意的是建立 Set 对象时传入数组与调用add()方法时传入数组是效果是不一样，区别如下：\",\"建立 Set 对象时传入数组，数组每一项成为 Set 对象的一个元素\",\"let s1 = new Set([1, 2, 3]); console.log(s1); // Set { 1, 2, 3 } console.log(s1.size); // 3\",\"调用add()方法时传入数组，就是作为 Set 对象的一个元素\",\"let s1 = new Set(); s1.add([1, 2, 3]); console.log(s1); // Set { [ 1, 2, 3 ] } console.log(s1.size); // 1\",\"在 Set 对象中，不能够添加相同的元素，这是很重要的一个特性\",\"let s1 = new Set(); s1.add(1).add(2).add(2).add(3); console.log(s1); // Set { 1, 2, 3 }\"]},\"862\":{\"h\":\"4. 集合相关属性和方法\",\"t\":[\"1. 用size属性获取元素个数\",\"let s1 = new Set([1, 2, 3]); console.log(s1.size); // 3\",\"2. 使用has()方法来查看一个集合中是否包含某一个值\",\"let s1 = new Set([1, 2, 3]); console.log(s1.has(1)); // true console.log(s1.has('1')); // false\",\"3. 删除集合值\",\"使用delete()方法删除 Set 对象里面的某一个元素\",\"let s1 = new Set([1, 2, 3]); s1.delete(2); console.log(s1); // Set { 1, 3 } // 没有的元素也不会报错 s1.delete('2'); console.log(s1); // Set { 1, 3 }\",\"如果要一次性删除所有的元素，可以使用clear()方法\",\"let s1 = new Set([1, 2, 3]); s1.clear(); console.log(s1); // Set {}\"]},\"863\":{\"h\":\"5. 遍历集合\",\"t\":[\"集合也是可以枚举的，我们同样可以使用for-of来对集合进行遍历，如下：\",\"let s = new Set([1, 2, 3, 4, 5]); for (let i of s) { console.log(i); } // 1 // 2 // 3 // 4 // 5\",\"或者通过forEach来进行遍历，示例如下：\",\"//使用 forEach 进行遍历 let s = new Set([1, 2, 3, 4, 5]); s.forEach((ele) => console.log(ele)); // 1 // 2 // 3 // 4 // 5\",\"除此之外，我们也可以使用集合里面自带的keys()，values()以及entries()方法来对集合进行遍历。顺便要说一下的是，在集合里面键和值是相同的。\",\"keys()方法遍历集合的键：\",\"let s = new Set(['Bill', 'Lucy', 'David']); for (let i of s.keys()) { console.log(i); } // Bill // Lucy // David\",\"values()方法遍历集合的值：\",\"let s = new Set(['Bill', 'Lucy', 'David']); for (let i of s.values()) { console.log(i); } // Bill // Lucy // David\",\"entries()方法同时遍历集合的键与值：\",\"let s = new Set(['Bill', 'Lucy', 'David']); for (let i of s.entries()) { console.log(i); } // [ 'Bill', 'Bill' ] // [ 'Lucy', 'Lucy' ] // [ 'David', 'David' ]\"]},\"864\":{\"h\":\"6. 集合转数组\",\"t\":[\"将集合转为数组，最快的方法就是使用前面所讲过的扩展运算符，如下：\",\"let s1 = new Set([1, 2, 3]); console.log(s1); // Set { 1, 2, 3 } let arr = [...s1]; console.log(arr); // [ 1, 2, 3 ]\",\"除此之外，我们还可以使用 Array 类的静态方法from()来进行转换\",\"let s1 = new Set([1, 2, 3]); console.log(s1); // Set { 1, 2, 3 } let arr = Array.from(s1); console.log(arr); // [ 1, 2, 3 ]\",\"前面我们有提到过，Set 对象里面是不能够存放相同的元素的，利用这个特性，我们可以快速的为数组去重，如下：\",\"let arr = [1, 2, 2, 3, 4, 3, 1, 6, 7, 3, 5, 7]; let s1 = new Set(arr); let arr2 = [...s1]; console.log(arr2); // [ 1, 2, 3, 4, 6, 7, 5 ]\"]},\"865\":{\"h\":\"7. 弱集合（扩展）\",\"t\":[\"当对象添加到集合中时，只要集合存在，它们就一直存储在集合。即使对象的引用被删除了也依然如此，我们来看下面的这个例子：\",\"let arr = [1, 2, 3]; let s = new Set(arr); arr = null; // 删除arr数组的指向 console.log(s); // Set { 1, 2, 3 } 数组依然存在于集合中 console.log(arr); // null\",\"可以看到，这里我们删除了对数组的引用，但是该数组依然存在，只不过里面的值为 null，这样的话垃圾回收就不会不会回收这个数组，从而可能会引起内存泄漏\",\"什么是内存泄漏？\",\"一个程序里面保留着已经不能在内存中访问的值时，就会发生内存泄露，也就是说占着空间却没用，造成内存的浪费。\",\"例如：\",\"let arr = [1, 2, 3]; arr = null;\",\"断开了 arr 对 1，2，3 的引用，现在 1，2，3 在内存里面已经是垃圾了。内存泄露会逐渐减少全部可用内存，导致程序和系统的速度变慢甚至崩溃。\",\"那么怎样才能清空这些没用的数据呢？例如上例中的 1，2，3。事实上在 JavaScript 中采用的是动态内存管理技术，比如垃圾回收机制，会自动从内存中删除不再被程序需要的东西。而有些编程语言，例如 C++，则是需要程序员手动的管理内存，在某些东西完成任务之后，将其从内存中删除。\",\"那么，集合的问题就在于即使失去了引用，也不会被垃圾回收，这个时候我们可以使用弱集合来避免这种状况。创建弱集合使用new运算符和WeakSet()构造函数，如下：\",\"let weak = new WeakSet();\",\"由于弱集合要解决的问题是引用数据变为垃圾时无法被回收的问题，所以弱集合无法添加基本数据类型，也就是说无法像集合那样添加简单值进去。\",\"let weak = new WeakSet(); weak.add(1); // TypeError: Invalid value used in weak set\",\"除了这个限制以外，弱集合和普通集合还有一些细微的区别，例如无法在创建弱集合时传入一个数组进行初始化。\",\"let arr = [1, 2, 3, 4, 5]; let weak = new WeakSet(arr); // TypeError: Invalid value used in weak set // 无法在创建弱集合时传入一个数组进行初始化\",\"不过弱集合也拥有has()，add()，delete()等方法。还需要注意一点的是，弱集合是对对象的弱引用，所以不能访问对象里面的值列表。这使得弱集合看上去像是空的，但是并不是空的，证明如下：\",\"let weak = new WeakSet(); let arr = [1, 2, 3]; weak.add(arr); console.log(weak); // WeakSet {} console.log(weak.has(arr)); // true\"]},\"866\":{\"h\":\"十、映射\",\"t\":[\"映射（Map）也是 ECMAScript 6 规范中引入的一种数据结构。这是一种存储键值对列表很方便的方法，类似于其他编程语言中的词典或者哈希表。这一小节，让我们一起来看一下映射这种数据结构。\"]},\"867\":{\"h\":\"1. 什么是映射\",\"t\":[\"JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。\",\"为了解决这个问题，ECMAScript 6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是\\\"键\\\"的范围不仅仅局限于字符串，而是各种类型的值（包括对象）都可以当作键。也就是说，Object 结构（对象结构）提供了\\\" 字符串—值 \\\"的对应，而 Map 结构提供了\\\" 值—值 \\\"的对应，是一种更完善的 Hash 结构的实现。\"]},\"868\":{\"h\":\"2. 创建映射\",\"t\":[\"使用new关键字与Map()构造函数，就可以创建一个空的 Map 对象。如果要向 Map 映射中添加新的元素，可以调用set()方法并分别传入键名和对应值作为两个参数。如果要从集合中获取信息，可以调用get()方法。具体示例如下：\",\"let m = new Map(); m.set('name', 'xiejie'); m.set('age', 18); console.log(m); // Map { 'name' => 'xiejie', 'age' => 18 } console.log(m.get('name')); // xiejie\",\"在对象中，无法用对象作为对象属性的键名。但是在 Map 映射中，却可以这样做，可以这么说，在 Map 映射里面可以使用任意数据类型来作为键。\",\"let m = new Map(); m.set({}, 'xiejie'); m.set([1, 2, 3], 18); m.set(3581, 18); console.log(m); // Map { {} => 'xiejie', [ 1, 2, 3 ] => 18, 3581 => 18 }\",\"传入数组来初始化 Map 映射\",\"可以向 Map 构造函数传入一个数组来初始化 Map 映射，这一点同样与 Set 集合相似。数组中的每个元素都是一个子数组，子数组中包含一个键值对的键名与值两个元素。因此，整个 Map 映射中包含的全是这样的两个元素的二维数组\",\"let arr = [ ['name', 'xiejie'], ['age', 18], ]; let m = new Map(arr); console.log(m); // Map { 'name' => 'xiejie', 'age' => 18 }\"]},\"869\":{\"h\":\"3. 映射相关属性和方法\",\"t\":[\"在设计语言新标准时，委员会为 Map 映射与 Set 集合设计了如下 3 个通用的方法：\",\"has(key)：// 检测指定的键名在Map映射中是否已经存在 delete(key)：// 从Map映射中移除指定键名及其对应的值 clear()：// 移除Map映射中的所有键值对\",\"Map 映射同样支持size属性，其代表当前集合中包含的键值对数量\",\"let arr = [ ['name', 'xiejie'], ['age', 18], ]; let m = new Map(arr); console.log(m); // Map { 'name' => 'xiejie', 'age' => 18 } console.log(m.size); // 2 console.log(m.has('name')); // true console.log(m.get('name')); // xiejie m.delete('name'); console.log(m); // Map { 'age' => 18 } m.clear(); console.log(m); // Map {}\"]},\"870\":{\"h\":\"4. 映射的遍历\",\"t\":[\"与集合一样，映射也是可以枚举的，所以可以用与集合类似的方式进行遍历。\",\"使用for-of来遍历映射：\",\"let m = new Map([ ['name', 'xiejie'], ['age', 18], ]); for (let i of m) { console.log(i); } // [ 'name', 'xiejie' ] // [ 'age', 18 ]\",\"keys()方法遍历映射的键：\",\"let m = new Map([ ['name', 'xiejie'], ['age', 18], ]); for (let i of m.keys()) { console.log(i); } // name // age\",\"values()方法遍历映射的值：\",\"let m = new Map([ ['name', 'xiejie'], ['age', 18], ]); for (let i of m.values()) { console.log(i); } // xiejie // 18\",\"entries()方法同时遍历映射的键与值：\",\"let m = new Map([ ['name', 'xiejie'], ['age', 18], ]); for (let i of m.entries()) { console.log(i); } // [ 'name', 'xiejie' ] // [ 'age', 18 ]\"]},\"871\":{\"h\":\"5. 映射转为数组\",\"t\":[\"Map 结构转为数组结构，比较快速的方法还是使用前面介绍过的扩展运算符...\",\"let arr = [ ['name', 'xiejie'], ['age', 18], ]; let m = new Map(arr); console.log([...m.keys()]); // [ 'name', 'age' ] console.log([...m.values()]); // [ 'xiejie', 18 ] console.log([...m.entries()]); // [ [ 'name', 'xiejie' ], [ 'age', 18 ] ] console.log([...m]); // [ [ 'name', 'xiejie' ], [ 'age', 18 ] ]\",\"或者使用 Array 类的静态方法from()\",\"let arr = [ ['name', 'xiejie'], ['age', 18], ]; let m = new Map(arr); console.log(Array.from(m)); // [ [ 'name', 'xiejie' ], [ 'age', 18 ] ]\"]},\"872\":{\"h\":\"6. 弱映射（扩展）\",\"t\":[\"弱映射和弱集合很类似，主要是解决存在映射里面的垃圾数据问题，创建弱映射使用new运算符以及WeakMap()构造函数，如下：\",\"let weakMap = new WeakMap();\",\"弱映射和普通映射一样，同样也具有has()，get()，set()，delete()等方法。\"]},\"873\":{\"h\":\"十一、Date 对象\",\"t\":[\"Date 对象主要是用于处理和时间相关的操作。\"]},\"874\":{\"h\":\"1. 时间戳\",\"t\":[\"在学习 Date 对象之前，有一个概念必须要了解，那就是时间戳。\",\"所谓时间戳，就是指从 1970 年 1 月 1 日 0 时 0 分 0 秒到现在为止的豪秒数。在计算机里面，进行时间的计算都是通过时间戳来进行计算的。计算完成以后再将时间戳转换为表示时间的字符串。\",\"获取时间戳\",\"比起其他编程语言，在 ECMAScript 中所获取到的时间戳的精度要更高一些，可以精确到毫秒。\",\"通过以下的方式可以获取到时间戳：\",\"let now = Date.now(); console.log(now); // 1511767644238\",\"如果想要得到秒数，可以使用得到的毫秒数除以 1000，然后四舍五入，如下：\",\"let now = Date.now(); now = Math.round(now / 1000); // 毫秒除以 1000,四舍五入后得到秒数 console.log(now); // 1511767768\"]},\"875\":{\"h\":\"2. 静态方法（扩展）\",\"t\":[\"可以看到，上面的Date.now()就是一个静态方法（直接从类上面调用的方法）。除了这个方法以外，这里还要介绍两个静态方法，分别是Date.parse()和Date.UTC()。\",\"Date.parse()方法\",\"该方法用于解析一个日期字符串，参数是一个包含待解析的日期和时间的字符串，返回从 1970 年 1 月 1 日 0 点到给定日期的毫秒数。\",\"该方法会根据日期时间字符串格式规则来解析字符串的格式，除了标准格式外，以下格式也支持。\",\"'月/日/年' 如 6/13/2004\",\"'月 日,年' 如 January 12,2004 或 Jan 12,2004\",\"'星期 月 日 年 时:分:秒 时区' 如 Tue May 25 2004 00:00:00 GMT-0700\",\"如果字符串无法识别，将返回 NaN\",\"注：浏览器不支持不表示日期只表示时间的字符串格式\",\"console.log(Date.parse('1990/03/23')); // 638121600000 console.log(Date.parse('March 23,1990')); // 638121600000 console.log(Date.parse('2017')); // 1483228800000 console.log(Date.parse('Hello')); // NaN\",\"注：在 ECMAScript5 中，如果使用标准的日期时间字符串格式规则的字符串中，数学前有前置 0，则会解析为 UTC 时间，时间没有前置 0，则会解析为本地时间。其他情况一般都会解析为本地时间。\",\"UTC 时间：协调世界时，又称世界统一时间、世界标准时间、国际协调时间。由于英文（CUT）和法文（TUC）的缩写不同，作为妥协，简称 UTC。\",\"协调世界时是以原子时秒长为基础，在时刻上尽量接近于世界时的一种时间计量系统。\",\"Date.UTC()方法\",\"Date.UTC()同样返回给定日期的毫秒数，但其参数并不是一个字符串，而是分别代表年、月、日、时、分、秒、毫秒的数字参数，说白了就是参数的形式和上面不一样。\",\"Date.UTC()方法的具体语法如下：\",\"Date.UTC(year,month,day,hours,minutes,seconds,ms)\",\"其中 year 参数是固定的，其余参数都是可选的，我们可以通过函数的 length 属性来查看该函数的形式参数个数。\",\"console.log(Date.UTC.length); // 7\",\"注：该方法使用的是 UTC 时间，而不是本地时间。\",\"console.log(Date.UTC('1990/03/23')); // NaN console.log(Date.UTC(1990, 3, 23)); // 640828800000 console.log(Date.UTC(2017)); // 1483228800000 console.log(Date.UTC('Hello')); // NaN\"]},\"876\":{\"h\":\"3. 日期对象构造函数\",\"t\":[\"日期对象的构造函数为Date()。该构造函数根据使用的不同效果也不尽相同。\",\"不使用 new 关键字\",\"如果不使用new关键字，那么就只是单纯的函数调用。会返回一个当前的日期和时间的字符串表示。并且被当作函数调用时，会忽略所有传递进去的参数，如下：\",\"console.log(Date()); // Mon Nov 27 2017 16:03:33 GMT+0800 (CST) console.log(Date('1990-03-23')); // Mon Nov 27 2017 16:03:33 GMT+0800 (CST)\",\"使用 new 关键字\",\"如果使用new关键字，那么这个时候就会返回一个对象。关于这种使用new关键字创建对象的方式，我们会在后面进行详细的介绍，这是只是作为了解即可。\",\"使用new关键字但是没有传入任何参数，则会根据当前的日期时间来创建一个date对象。\",\"let date = new Date(); console.log(date); // 2017-11-27T08:05:44.025Z console.log(typeof date); // object\",\"如果传入数字参数，则该参数表示与 1970 年 1 月 1 日 0 时 0 分 0 秒之间的毫秒数，如下：\",\"let date = new Date(638121600000); console.log(date); // 1990-03-22T16:00:00.000Z\",\"可以接收多个数字参数，这个时候形式有点类似于Date.UTC()这个方法，不过返回的是一个对象，而不是毫秒数。\",\"let date = new Date(1990, 3, 23); console.log(date); // 1990-04-22T15:00:00.000Z\",\"如果传入的是字符串参数，则返回该日期对象。如果字符串不能被解析为日期，则返回 Invalid Date\",\"let date = new Date('1990-03-23'); console.log(date); // 1990-03-23T00:00:00.000Z let date2 = new Date('Hello'); console.log(date2); // Invalid Date\"]},\"877\":{\"h\":\"4. 实例方法\",\"t\":[\"Date 对象没有可以直接读写的属性，所有对日期和时间的访问都需要通过方法。\",\"Date 对象的大多数方法分为两种形式：一种是使用本地时间，一种是使用 UTC 时间，这些方法会在下面一起列出。其中，所列出的get[UTC]Day()方法同时代表getDay()方法和getUTCDay()方法。\",\"Date 对象一共有 46 个实例方法，可以分为以下 3 类：to 类、get 类 和 set 类。\",\"因为 Date 对象的实例方法个数太多，而大多数实例方法在使用的时候都是非常相似的，所以我们这里只选择个别方法进行演示。\",\"1. to 类\",\"to 类方法从 Date 对象返回一个字符串，表示指定的时间。常见的 to 类方法如下：\",\"toString():方法返回本地时区的日期字符串。 toUTCString():方法返回 UTC 时间的日期字符串。 toISOString():返回 Date 对象的标准的日期时间字符串格式的字符串。 toDateString():返回 Date 对象的日期部分的字符串。 toTimeString():返回 Date 对象的时间部分的字符串。 toJSON():返回一个符合 JSON 格式的日期字符串，与 toISOString() 方法的返回结果完全相同。 toLocaleString():toString() 方法的本地化转换。 toLocaleTimeString():toTimeString() 方法的本地化转换。 toLocaleDateString():toDateString() 方法的本地化转换。\",\"个别方法演示：\",\"console.log(new Date('1990-03-23').toString()); // Fri Mar 23 1990 08:00:00 GMT+0800 (CST) console.log(new Date('1990-03-23').toDateString()); // Fri Mar 23 1990 console.log(new Date('1990-03-23').toTimeString()); // 08:00:00 GMT+0800 (CST) console.log(new Date('1990-03-23').toLocaleString()); // 1990-3-23 08:00:00\",\"2. get 类\",\"Date 对象提供了一系列 get 类方法，用来获取实例对象某个方面的值。\",\"在介绍 get 类方法之前，介绍一下valueOf()方法。该方法返回距离 1970 年 1 月 1 日 0 点的毫秒数。因此，可以方便地使用比较运算符来比较日期值。\",\"let date1 = new Date(1990, 3, 23).valueOf(); let date2 = new Date(1988, 8, 21).valueOf(); console.log(date1); // 640796400000 console.log(date2); // 590774400000 console.log(date1 > date2); // true\",\"常见的 get 类方法如下：\",\"getTime():返回距离 1970 年 1 月 1 日 0 点的毫秒数，同 valueOf()。 在 ECMAScript5 之前，可以使用 getTime() 方法来实现 Date.now() 方法。 getTimezoneOffset():返回格林威治时间和本地时间之间的时差，以分钟为单位。 getYear():返回距离 1900 年的年数(已过时)。 get[UTC]FullYear():返回年份(4位数)。 get[UTC]Month():返回月份(0 - 11)。 get[UTC]Date():返回第几天(1 - 31)。 get[UTC]Day():返回星期几(0 - 6)。 get[UTC]Hours():返回小时值(0 - 23)。 get[UTC]Minutes():返回分钟值(0 - 59)。 get[UTC]Seconds():返回秒值(0 - 59)。 get[UTC]Milliseconds():返回毫秒值(0 - 999)。\",\"注意：通过标准日期时间格式字符串，且有前置 0 的形式的参数设置，设置的是 UTC 时间。\",\"个别方法演示：\",\"console.log(new Date('1990-03-23').valueOf()); // 638150400000 console.log(new Date('1990-03-23').getTime()); // 638150400000 console.log(new Date('1990-03-23').getDay()); // 5 console.log(new Date('1990-03-23').getMonth()); // 2\",\"3. set 类\",\"Date 对象提供了一系列 set 类方法，用来设置实例对象各个方面的值。\",\"set 方法基本与 get 方法相似，传入类似于Date.UTC()的参数，返回调整后的日期的内部毫秒数。\",\"注意：星期只能获取，不能设置。\",\"setTime():使用毫秒的格式，设置一个 Date 对象的值。 setYear():设置年份(已过时)。 set[UTC]FullYear():设置年份(4 位数)，以及可选的月份值和日期值。 set[UTC]Month():设置月份(0 - 11)，以及可选的日期值。 set[UTC]Date():设置第几天(1 - 31)。 set[UTC]Hours():设置小时值(0 - 23)，以及可选的分钟值、秒值及毫秒值。 set[UTC]Minutes():设置分钟值(0 - 59)，以及可选的秒值及毫秒值。 set[UTC]Seconds():设置秒值(0 - 59)，以及可选的毫秒值。 set[UTC]Milliseconds():设置毫秒值(0 - 999)。\",\"个别方法演示：\",\"let date = new Date('1990-03-23'); console.log(date.setFullYear(1992), date.getFullYear()); // 701308800000 1992 console.log(date.setMonth(4), date.getMonth()); // 706579200000 4\"]},\"878\":{\"h\":\"十二、Math\",\"t\":[\"Math 和其他的对象不同，它不是一个构造函数，它属于一个工具类不用创建对象，它里边封装了数学运算相关的属性和方法\"]},\"879\":{\"h\":\"1. 属性\",\"t\":[\"Math 对象常见的属性如下表：\",\"属性\",\"说明\",\"Math.E\",\"自然对数的底数，即常量 e 的值\",\"Math.LN10\",\"10 的自然对数\",\"Math.LN2\",\"2 的自然对数\",\"Math.LOG2E\",\"以 2 为底 e 的对数\",\"Math.LOG10E\",\"以 10 为底 e 的对象\",\"Math.PI\",\"数学里面 PI 的值\",\"Math.SQRT1_2\",\"1/2 的平方根（即 2 的平方根的倒数）\",\"Math.SQRT2\",\"2 的平方根\",\"这里面用得稍微多一点的就是 PI，直接拿来用即可。\",\"console.log(Math.PI); // 3.141592653589793\"]},\"880\":{\"h\":\"2. 方法\"},\"881\":{\"h\":\"和\",\"t\":[\"这两个方法很简单，就是求一组数值的最大值和最小值。\",\"let max = Math.max(3, 5, 8, 1); let min = Math.min(3, 5, 8, 1); console.log(max); // 8 console.log(min); // 1\"]},\"882\":{\"h\":\"舍入方法 ， 和\",\"t\":[\"ceil()方法执行向上舍入，floor()方法执行向下舍入，round()方法执行四舍五入。\",\"let num = 3.14; console.log(Math.ceil(num)); // 4 console.log(Math.floor(num)); // 3 console.log(Math.round(num)); // 3\"]},\"883\":{\"h\":\"随机数方法\",\"t\":[\"Math.random()方法返回 0 - 1 之间的随机数，如果想显示固定范围的随机数，可以套用下面的公式。\",\"随机值 = Math.floor(Math.random() * 可能值的总数 + 第一个可能的值)\",\"具体示例如下：\",\"let num = Math.random(); console.log(num); // 0.24003779065523112 // 生成 25 - 50 之间的随机数 // 可能值的计算：50 - 25 + 1 let rand = Math.floor(Math.random() * 26 + 25); console.log(rand); // 41\",\"练习：封装一个函数，这个函数接收 1 个或者 2 个函数。如果参数只有 1 个，则生成 0 - 参数之间的随机数，如果参数有 2 个，则生成这 2 个参数之间的随机数。\",\"// 接收 1 个或者 2 个参数 // 如果只有 1 个参数 生成 0 - 参数之间的随机数 // 如果有 2 个参数 则生成这 2 个参数之间的随机数 const randomNum = function (i, j = 0) { if (i > j) { [i, j] = [j, i]; } return Math.floor(Math.random() * (j - i + 1) + i); }; console.log(randomNum(1, 100)); console.log(randomNum(100, 1)); console.log(randomNum(10));\"]},\"884\":{\"h\":\"其他方法\",\"t\":[\"在 Math 对象里面还有诸如下表中所示的其他方法，这里不再做一一演示。\",\"方法\",\"说明\",\"Math.abs(num)\",\"返回 num 的绝对值\",\"Math.exp(num)\",\"返回 Math.E 的 num 次幂\",\"Math.log(num)\",\"返回 num 的自然对数\",\"Math.pow(num,power)\",\"返回 num 的 power 次幂\",\"Math.sqrt(num)\",\"返回 num 的平方根\",\"Math.acos(x)\",\"返回 x 的反余弦值\",\"Math.asin(x)\",\"返回 x 的反正弦值\",\"Math.atan(x)\",\"返回 x 的反正切值\",\"Math.atan2(x)\",\"返回 y / x 的反正切值\",\"Math.cos(x)\",\"返回 x 的余弦值\",\"Math.sin(x)\",\"返回 x 的正弦值\",\"Math.tan(x)\",\"返回 x 的正切值\"]},\"885\":{\"h\":\"十三、String 对象\"},\"886\":{\"h\":\"1. 属性\",\"t\":[\"length属性：可以用来获取字符串的长度\"]},\"887\":{\"h\":\"2. 方法\"},\"888\":{\"h\":\"访问特定字符\",\"t\":[\"charAt():可以返回字符串中指定位置的字符（等同于 str[i]）\",\"let str = 'Hello World'; console.log(str.charAt(1)); // e console.log(str.charAt('a')); // H 因为 a 被转为了数字0\",\"at()函数等效\",\"charCodeAt():获取指定位置字符的字符编码（Unicode 编码）\",\"let str = 'Hello World'; console.log(str.charCodeAt(1)); // 101 console.log(str.charCodeAt('a')); // 72\",\"String.formCharCode():可以根据字符编码去获取字符\",\"console.log(String.fromCharCode(104, 101, 108, 108, 111)); // hello\"]},\"889\":{\"h\":\"字符串操作方法\",\"t\":[\"concat():可以用来连接两个或多个字符串(作用和+一样)\",\"let str = 'Hello'; let newStr = str.concat(' World!!!'); console.log(str); // Hello console.log(newStr); // Hello World!!!\",\"原字符串不会产生改变，拼接后的字符串以返回值的方式返回\",\"trim():用于删除字符串的头尾空白符\",\"let str = ' Hello World '; let newStr = str.trim(); console.log(str); // Hello World console.log(newStr); // Hello World\",\"等同于str.replace(/^\\\\s |\\\\s $/g,\\\"\\\");\",\"includes()方法用于查看是否包含某个字符，如果包含返回 true，否则返回 false。\",\"let str = 'Hello World'; console.log(str.includes('l')); // true console.log(str.includes('M')); // false\",\"startsWith()和endsWith()方法分别用于检测开始字符和结束字符。\",\"let str = 'Hello World'; console.log(str.startsWith('H')); // true console.log(str.endsWith('d')); // true console.log(str.endsWith('z')); // false\",\"repeat()方法接收一个参数，为字符串重复的次数。返回值为字符串重复指定次数后的新字符串。\",\"let str = 'Hello'; console.log(str.repeat(3)); // HelloHelloHello\"]},\"890\":{\"h\":\"字符串位置方法\",\"t\":[\"indexof():该方法可以检索一个字符串中是否含有指定内容\",\"let str = 'Hello World'; console.log(str.indexOf('l')); // 2 console.log(str.lastIndexOf('l')); // 9\",\"如果字符串中含有该内容，则会返回其第一次出现的索引;如果没有找到指定的内容，则返回-1\",\"可以指定一个第二参数，指定开始查找的位置\",\"eg: result = str.indexOf(\\\"h\\\",1);\",\"当所传参数为空时，意为检索字符串中是否含有空白，此时会返回 0\",\"lastIndexOf()\",\"该方法的用法和indexOf()一样，不同的是indexOf是从前往后找，而lastIndexOf是从后往前找\",\"同样可以指定开始查找的位置\"]},\"891\":{\"h\":\"获取部分字符串\",\"t\":[\"slice() 使用方式和数组相同\",\"let str = 'Hello World'; let str2 = str.slice(2); let str3 = str.slice(2, 7); // 不包括 7 console.log(str); // Hello World console.log(str2); // llo World console.log(str3); // llo W\",\"substring()\",\"let str = 'Hello World'; let str1 = str.slice(2); let str2 = str.substr(2); let str3 = str.substring(2); console.log(str1); // llo World console.log(str2); // llo World console.log(str3); // llo World str1 = str.slice(2, 7); // 结束位置为 7,不包含 7 str2 = str.substr(2, 7); // 要返回的字符个数 str3 = str.substring(2, 7); // 结束位置为 7,不包含 7 console.log(str1); // llo W console.log(str2); // llo Wor console.log(str3); // llo W\",\"第一个参数：开始截取位置的索引（包括开始位置）\",\"第二个参数：结束位置的索引（不包括结束位置）\",\"不同的是这个方法 不能接受负值作为参数，如果传递了一个负值，则默认使用 0\",\"同时会自动调整参数的位置，如果第二个参数小于第一个，则自动交换\",\"substr()\",\"let str = 'Hello World'; let str1 = str.slice(2); let str2 = str.substr(2); console.log(str1); // llo World console.log(str2); // llo World str1 = str.slice(2, 7); // 结束位置为 7,不包含 7 str2 = str.substr(2, 7); // 要返回的字符个数 console.log(str1); // llo W console.log(str2); // llo Wor\",\"第一个参数：截取开始位置的索引\",\"第二个参数：截取的长度\"]},\"892\":{\"h\":\"字符串大小写转换方法\",\"t\":[\"toUpperCase()：将一个字符串转换为大写并返回\",\"toLowerCase()：将一个字符串转换为小写并返回\",\"let str = 'HELLO'; console.log(str.toLowerCase()); // hello str = 'hello'; console.log(str.toUpperCase()); // HELLO\"]},\"893\":{\"h\":\"字符串补全\",\"t\":[\"padStart()用于头部补全，padEnd()用于尾部补全，共接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串。\",\"'x'.padStart(5, 'ab'); // 'ababx' 'x'.padStart(4, 'ab'); // 'abax' '12'.padStart(10, 'YYYY-MM-DD'); // \\\"YYYY-MM-12\\\" 'x'.padEnd(5, 'ab'); // 'xabab' 'x'.padEnd(4, 'ab'); // 'xaba\",\"如果用来补全的字符串与原字符串，两者的长度之和超过了最大长度，则会截去超出位数的补全字符串。\"]},\"894\":{\"h\":\"参数可以传递正则表达式的方法\",\"t\":[\"split()\",\"需要一个字符串作为参数，将会根据该字符串去拆分数组\",\"如果传递一个空串作为参数，则会将每个字符都拆分为数组中的一个元素。\",\"这个方法即使不指定全局匹配，也会全都拆分\",\"search()\",\"可以搜索字符串中是否含有指定内容\",\"如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回-1\",\"它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串\",\"serach()只会查找第一个，即使设置全局匹配也没用\",\"match()\",\"可以根据正则表达式，从一个字符串中将符合条件的内容提取出来\",\"默认情况下我们的 match 只会找到第一个符合要求的内容，找到以后就停止检索\",\"我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容 \",\"可以为一个正则表达式设置多个匹配模式，且顺序无所谓 result = str.match(/[a-z]/ig);\",\"match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果\",\"replace()\",\"可以将字符串中指定内容替换为新的内容\",\"参数： \",\"被替换的内容，可以接受一个正则表达式作为参数\",\"新的内容 result = str.replace(/[a-z]/gi , \\\"\\\");\",\"默认只会替换第一个，可以设置全局匹配替换全部\"]},\"895\":{\"h\":\"十四、JSON\",\"t\":[\"JSON，英语全称为 JavaScript Object Notation，翻译成中文为 JavaScript 对象简谱。\",\"它是 Douglas Crockford 于 2001 年发明的一种轻量级数据存储格式，在 2005 - 2006 年正式成为主流的数据格式，雅虎和谷歌就在那时开始广泛地使用该格式。之后很多社交网站（例如 Twitter，Facebook）也使用 JSON 来进行 Web 服务之间的信息共享与交换。\",\"JSON 最大的优点是在人、机可读性方面达到了一个最佳的临界点。比起之前广泛使用的 XML 数据格式，解析一个 JSON 数据要轻松容易很多。\",\"经常有人会把 JavaScript 对象字面量和 JSON 混淆，认为是同一个东西。但实际上它们之间还是有几个关键性的区别，如下：\",\"属性名必须用双引号引起来\",\"允许的值包括数字，true，false，null，数组，对象以及双引号引起来的字符串\",\"函数是不允许的\",\"例如：蝙蝠侠的 JSON 字符串可以表示为如下\",\"let batman = { name: 'Batman', 'real name': 'Bruce Wayne', height: 74, weight: 210, hero: true, villain: false, allies: ['Robin', 'Batgirl', 'Superman'], };\",\"JSON 作为一种数据存储格式从诞生以来日益流行，现在很多编程语言都有现成的库来解析和生成 JSON 对象。从 ECMAScript 5 开始，就已经有了全局的 JSON 对象。\",\"-w536\",\"该对象的一些方法，可以将 JavaScript 中的字符串转为 JSON 对象或者将 JSON 对象转换为字符串。\"]},\"896\":{\"h\":\"1. JSON 对象转为字符串\",\"t\":[\"使用的方法为JSON.stringify()，示例如下：\",\"let person = { name: 'xiejie', age: 18, gender: 'male', }; let str = JSON.stringify(person); console.log(str); // {\\\"name\\\":\\\"xiejie\\\",\\\"age\\\":18,\\\"gender\\\":\\\"male\\\"}\",\"如果一个字面量对象里面包含了方法，那么在使用JSON.stringify()方法将其转为字符串时，会直接忽略掉对象里面的方法，如下：\",\"let person = { name: 'xiejie', age: 18, walk: function () { console.log(\\\"I'm walking\\\"); }, }; let str = JSON.stringify(person); console.log(str); // {\\\"name\\\":\\\"xiejie\\\",\\\"age\\\":18}\"]},\"897\":{\"h\":\"2. 字符串转为 JSON 对象\",\"t\":[\"使用的方法为JSON.parse()方法。但是需要注意的一个问题是，当我们要将一个字符串转为 JSON 对象时，必须要保证字符串的格式要和 JSON 的格式一模一样，否则无法进行转换，示例如下：\",\"let person = '{\\\"name\\\":\\\"xiejie\\\",\\\"age\\\":18,\\\"gender\\\":\\\"male\\\"}'; let obj = JSON.parse(person); console.log(obj); // { name: 'xiejie', age: 18, gender: 'male' } let person2 = '{name:\\\"xiejie\\\",age:18,gender:\\\"male\\\"}'; // 因为格式不一致,所以会报错 let obj2 = JSON.parse(person2); console.log(obj2); // SyntaxError: Unexpected token n in JSON at position 1\"]},\"898\":{\"h\":\"十五、正则表达式\",\"t\":[\"正则表达式（regular expression）描述了一种字符串匹配的模式（pattern），可以用来检查一个字符串是否含有某种子串，或者对匹配的子串进行替换、取出等操作。\"]},\"899\":{\"h\":\"1. 创建正则表达式对象\"},\"900\":{\"h\":\"RegExp 构造函数构建正则表达式\",\"t\":[\"var 变量 = new RegExp('正则表达式', '匹配模式');\"]},\"901\":{\"h\":\"字面量构建正则表达式\",\"t\":[\"var 变量 = /正则表达式/匹配模式\",\"匹配模式：i:忽略大小写； g：全局匹配模式； m：多行匹配\",\"需要注意无论是字面量方式，还是构造函数方式创建的正则表达式，返回的类型都为 object。\",\"let reg1 = /at/i; // 等同于 let reg2 = new RegExp('at', 'i'); console.log(typeof reg1); // object console.log(typeof reg2); // object\"]},\"902\":{\"h\":\"2. 元字符\",\"t\":[\"简单字符在正则表达式中，就是字面的含义，比如/a/匹配 a，/b/匹配 b；而除了简单字符以外，还有一些字符，它们除了字面意思外，还有着特殊的含义，这些字符就是元字符。\",\"JavaScript 所支持的元字符如下表：\",\"| 元字符 | 名称 | 匹配对象 | | ---------- | ------------ | ------------------------------------------------------------------ | ------------------------ | | . | 点号 | 单个任意字符(除回车\\\\r、换行\\\\n、行分隔符\\\\u2028 和段分隔符\\\\u2029 外) | | [] | 字符组 | 列出的单个任意字符 | | [^] | 排除型字符组 | 未列出的单个任意字符 | | ? | 问号 | 匹配 0 次或 1 次 | | * | 星号 | 匹配 0 交或多次 | | + | 加号 | 匹配 1 次或多次 | | {a,b} | 区间量词 | 匹配至少 a 次，最多 b 次 | | ^ | 脱字符 | 行的起始位置 | | $ | 美元符 | 行的结束位置 | | | | 竖线 | 分隔两边的任意一个表达式 | | () | 括号 | 限制多选结构的范围，标注量词作用的元素，为反向引用捕获文本 | | \\\\1,\\\\2... | 反向引用 | 匹配之前的第一、第二...组括号内的表达式匹配的文本 |\"]},\"903\":{\"h\":\"3. 字符组元字符\",\"t\":[\"字符组（Character Class），有的翻译成字符类或字符集。简单而言，就是指用方括号表示的一组字符，它匹配若干字符之一。\",\"连字符-提供了范围表示法（只在字符组中表示范围）\",\"脱字符^表示在当前位置匹配一个没有列出的字符（只在字符组开始位置表示排除）\",\"在字符组中，只有^，-这 2 个字符可能被当做元字符，其他有元字符功能的字符都只表示其本身。\",\"console.log(/[0-9a-fA-F]/.test('d')); // true console.log(/[0-9a-fA-F]/.test('x')); // false console.log(/[0-9][^0-9]/.test('1e')); // true console.log(/[0-9][^0-9]/.test('q2')); // false console.log(/-/.test('-')); // true console.log(/[a-c^]/.test('^')); // true\"]},\"904\":{\"h\":\"简记\",\"t\":[\"正则表达式也提供了对应的排除型字符组的简记法：\\\\D、\\\\W、\\\\S。字母完全相同，只是改为大写。它们和小写的简记符在含义上刚好相反。\",\"\\\\d:数字，等同于 [0-9] \\\\D:非数字，等同于 [^0-9] \\\\s:空白字符，等同于 [\\\\f\\\\n\\\\r\\\\t\\\\u000B\\\\u0020\\\\u00A0\\\\u2028\\\\u2029] \\\\S:非空白字符，等同于 [^\\\\f\\\\n\\\\r\\\\t\\\\u000B\\\\u0020\\\\u00A0\\\\u2028\\\\u2029] \\\\w:字母、数字、下划线，等同于 [0-9A-Za-z_]（汉字不属于\\\\w） \\\\W:非字母、数字、下划线，等同于 [^0-9A-Za-z_]\",\"注意：\\\\w 不仅包括字母、数字，还包括下划线。在进行数字验证时，只允许输入字母和数字时，不可以使用 \\\\w，因为还包含了下划线。所以应该使用[0-9a-zA-Z]\"]},\"905\":{\"h\":\"任意字符\",\"t\":[\"经常有人存在一个误区，认为点可以代表任意字符，其实并不是。点号.代表除回车（\\\\r），换行（\\\\n），行分隔符（\\\\u2028）和段分隔符（\\\\u2029）以外的任意字符。\",\"如果要匹配任意字符，可以妥善的利用互补属性来得到这一效果。比如，[\\\\s\\\\S]、[\\\\w\\\\W]、[\\\\d\\\\D]都可以表示任意字符。\",\"// 匹配任意字符 console.log(/./.test('\\\\r')); // false console.log(/[\\\\s\\\\S]/.test('\\\\r')); // true console.log(/[\\\\d\\\\D]/.test('\\\\r')); // true\"]},\"906\":{\"h\":\"4. 量词相关元字符\",\"t\":[\"根据字符组的介绍，可以用字符组[0-9]或\\\\d来匹配单个数字字符，但是如果要匹配多个数字字符，则显得有点不太方便，如下：\",\"// 表示邮政编码 6 位数字 /[0-9][0-9][0-9][0-9][0-9][0-9]/; // 等价于 /\\\\d\\\\d\\\\d\\\\d\\\\d\\\\d/;\",\"正则表达式提供了量词，用来设定某个模式出现的次数\",\"{n}: 匹配 n 次。 {n,m}: 匹配至少 n 次，最多 m 次。 {n,}: 匹配至少 n 次。 ?: 相当于 {0,1} *: 相当于 {0,} +: 相当于 {1,}\",\"举个例子，在美国英语和英国英语里面有些单词的写法不一样，例如 traveler 和 traveller，favor 和 favour，color 和 colour，写出来的正则表达式如下：\",\"// 同时匹配美国英语和英国英语单词 /travell?er/; /favou?r/; /colou?r/;\",\"超文本传输协议名有 http 和 https 两种，其正则表达式可写作：\",\"/https?/;\"]},\"907\":{\"h\":\"贪婪模式（扩展）\",\"t\":[\"默认情况下，量词采用的是贪婪模式（greedy quantifier），即尽可能多的进行匹配，如下：\",\"let reg = /a+/; let str = 'aaabbcc'; console.log(reg.exec(str)); // [ 'aaa', index: 0, input: 'aaabbcc' ]\",\"这里我们使用了正则表达式的另外一个常用的实例方法exec()。该方法会返回一个数组，数组里面有匹配上的字符，匹配项开始的索引值以及原始的字符串等更加详细的信息。\"]},\"908\":{\"h\":\"懒惰模式（扩展）\",\"t\":[\"懒惰模式（lazy quantifier）和贪婪模式相对应，在量词后添加问号?，表示尽可能少的匹配，一旦条件满足就不再往下匹配。\",\"{n}?: 匹配 n 次。 {n,m}?: 匹配至少 n 次，最多 m 次。 {n,}?: 匹配至少 n 次。 ??: 相当于 {0,1} *?: 相当于 {0,} +?: 相当于 {1,}\",\"示例如下：\",\"let reg = /a+?/; let str = 'aaabbcc'; console.log(reg.exec(str)); // [ 'a', index: 0, input: 'aaabbcc' ]\"]},\"909\":{\"h\":\"5. 括号相关元字符\",\"t\":[\"括号有两个功能，分别是分组和引用。具体而言，用于限定量词或选择项的作用范围，也可以用于捕获文本并进行引用或反向引用。\"]},\"910\":{\"h\":\"分组\",\"t\":[\"量词控制之前元素的出现次数，而这个元素可以是一个字符，也可以是一个字符组，或者是一个表达式。如果把一个表达式用括号包围起来，这个元素就是括号里的表达式，被称为子表达式。\",\"例如：如果希望字符串ab重复出现 2 次，应该写为(ab){2}，而如果写为ab{2}，则{2}只限定 b，如下：\",\"console.log(/ab{2}/.test('abab')); // false console.log(/(ab){2}/.test('abab')); // true\",\"身份证长度有 15 位和 18 位两种，如果只匹配长度，可能会想当然地写成\\\\d{15,18}，实际上这是错误的，因为它包括 15、16、17、18 这 4 种长度。因此，正确的写法如下：\",\"/\\\\d{15}(\\\\d{3})?/;\"]},\"911\":{\"h\":\"捕获\",\"t\":[\"括号不仅可以对元素进行分组，还会保存每个分组匹配的文本，等到匹配完成后，引用捕获的内容。因为捕获了文本，这种功能叫捕获分组。\",\"比如，要匹配诸如 2016 - 06 - 23 这样的日期字符串：\",\"/(\\\\d{4})-(\\\\d{2})-(\\\\d{2})/;\",\"与以往不同的是，年、月、日这三个数值被括号括起来了，从左到右的第 1 个、第 2 个、第 3 个括号，分别代表第 1、2、3 个捕获组。\",\"ECMAScript 有 9 个用于存储捕获组的构造函数属性，如果使用的是test()方法，那么通过正则对象的$1-$9属性来进行访问到。\",\"// RegExp.$1\\\\RegExp.$2\\\\RegExp.$3…… 到 RegExp.$9 // 分别用于存储第一、第二……第九个匹配的捕获组。 // 在调用 exec() 或 test() 方法时，这些属性会被自动填充 console.log(/(\\\\d{4})-(\\\\d{2})-(\\\\d{2})/.test('2016-06-23')); //true console.log(RegExp.$1); //2016 console.log(RegExp.$2); //06 console.log(RegExp.$3); //23 console.log(RegExp.$4); //\\\"\\\"\",\"再例如：\",\"let reg = /(a+)(b*)xj/; let str = 'aabbbxj'; console.log(reg.test(str)); //true console.log('$1的值:', RegExp.$1); //$1的值: aa console.log('$2的值:', RegExp.$2); //$2的值: bbb console.log('$3的值:', RegExp.$3); //$3的值:\",\"而exec()方法是专门为捕获组而设计的，返回的数组中，第一项是与整个模式匹配的字符串， 其他项是与模式中的 捕获组匹配的字符串 ，如果要获取，那么可以通过指定数组的下标来进行获取，如下：\",\"let reg = /(\\\\d{4})-(\\\\d{2})-(\\\\d{2})/; let str = '2017-03-21'; let i = reg.exec(str); console.log(i); /* [ '2017-03-21', '2017', '03', '21', index: 0, input: '2017-03-21', groups: undefined ] */ console.log(i[1]); // 2017 console.log(i[2]); // 03 console.log(i[3]); // 21\",\"捕获分组捕获的文本，不仅可以用于数据提取，也可以用于替换。字符串的replace()方法就是用于进行数据替换的，该方法接收两个参数，第一个参数为待查找的内容，而第二个参数为替换的内容。\",\"let str = '2017-12-12'; console.log(str.replace(/-/g, '.')); // 2017.12.12\",\"注：这里书写正则表达式的时候必须要写上模式修正符g，这样才能够进行全局匹配。\",\"在replace()方法中也可以引用分组，形式还是用$num，其中 num 是对应分组的编号。\",\"//把2017-03-23的形式变成03-23-2017 let reg = /(\\\\d{4})-(\\\\d{2})-(\\\\d{2})/; let str = '2017-03-23'; console.log(str.replace(reg, '$2-$3-$1')); //03-23-2017\"]},\"912\":{\"h\":\"反向引用（扩展）\",\"t\":[\"英文中不少单词都有重叠出现的字母，如 shoot 或 beep。若想检查某个单词是否包含重叠出现的字母，则需要引入反向引用（back-reference）。\",\"反向引用允许在正则表达式内部引用之前捕获分组匹配到的文本，形式为\\\\num，其中 num 表示所引用分组的编号。\",\"// 重复字母 let reg = /([a-z])\\\\1/; console.log(reg.test('aa')); // true console.log(reg.test('ab')); // false\",\"接下来我们再来看一个反向引用的例子\",\"let reg = /(ab)(cd)\\\\1xj/; let str = 'abcdabxj'; console.log(reg.test(str)); // true\",\"如果我们要跳过某一个子表达式，那么可以使用?:来跳过（后面会提到的非捕获）。\",\"let reg = /(?:ab)(cd)\\\\1xj/; let str = 'abcdabxj'; let str2 = 'abcdcdxj'; console.log(reg.test(str)); // false console.log(reg.test(str2)); // true\",\"反向引用可以用于建立前后联系。例如 HTML 标签的开始标签和结束标签是对应着的，这个时候我们就可以使用反向引用。\",\"// 开始标签 // <([^>]+)> // 标签内容 // [\\\\s\\\\S]*? // 匹配成对的标签 // /<([^>]+)>[\\\\s\\\\S]*?<\\\\/\\\\1>/ console.log(/<([^>]+)>[\\\\s\\\\S]*?<\\\\/\\\\1>/.test('<a>123</a>')); // true console.log(/<([^>]+)>[\\\\s\\\\S]*?<\\\\/\\\\1>/.test('<a>123</b>')); // false\"]},\"913\":{\"h\":\"非捕获（扩展）\",\"t\":[\"除了捕获分组，正则表达式还提供了非捕获分组（non-capturing group），以?:的形式表示，它只用于限定作用范围，而不捕获任何文本。\",\"比如，要匹配abcabc这个字符，一般地，可以写为(abc){2}，但由于并不需要捕获文本，只是限定了量词的作用范围，所以应该写为(?:abc){2}。\",\"// 限定 abc 要出现 2 次 , 并且会对内容进行捕获 console.log(/(abc){2}/.exec('abcabc')); // [ 'abcabc', 'abc', index: 0, input: 'abcabc', groups: undefined ] // 同样是限定 abc 要出现 2 次 , 但是不会对内容进行捕获 console.log(/(?:abc){2}/.exec('abcabc')); // [ 'abcabc', index: 0, input: 'abcabc', groups: undefined ]\",\"由于非捕获分组不捕获文本，对应地，也就没有捕获组编号\",\"console.log(/(abc){2}/.test('abcabc')); // true console.log(RegExp.$1); // abc console.log(/(?:abc){2}/.test('abcabc')); // true console.log(RegExp.$1); // \\\"\\\"\",\"非捕获分组也不会被用于反向引用\",\"console.log(/(?:123)\\\\1/.test('123123')); // false console.log(/(?:123)\\\\1/.test('123\\\\1')); // true console.log(/(123)\\\\1/.test('123123')); // true\",\"捕获分组和非捕获分组可以在一个正则表达式中同时出现\",\"console.log(/(\\\\d)(\\\\d)(?:\\\\d)(\\\\d)(\\\\d)/.exec('12345')); // [ '12345', '1', '2', '4', '5', index: 0, input: '12345' ]\"]},\"914\":{\"h\":\"6. 选择相关元字符\",\"t\":[\"竖线|在正则表达式中表示或（OR）关系的选择，以竖线|分隔开的多个子表达式也叫选择分支或选择项。在一个选择结构中，选择分支的数目没有限制。\",\"在选择结构中，竖线|用来分隔选择项，而括号()用来规定整个选择结构的范围。如果没有出现括号，则将整个表达式视为一个选择结构。\",\"选择项的尝试匹配次序是从左到右，直到发现了匹配项，如果某个选择项匹配就 忽略右侧其他选择项 ，如果所有子选择项都不匹配，则整个选择结构匹配失败。\",\"console.log(/12|23|34/.exec('1')); // null console.log(/12|23|34/.exec('12')); // [ '12', index: 0, input: '12' ] console.log(/12|23|34/.exec('23')); // [ '23', index: 0, input: '23' ] console.log(/12|23|34/.exec('2334')); // [ '23', index: 0, input: '2334' ]\",\"在选择结构中，应该尽量避免选择分支中存在重复匹配，因为这样会大大增加回溯的计算量。\",\"// 不良的选择结构 a|[ab] [0-9]|\\\\w\"]},\"915\":{\"h\":\"7. 断言相关元字符（扩展）\",\"t\":[\"在正则表达式中，有些结构并不真正匹配文本，而只负责判断在某个位置左/右侧是否符合要求，这种结构被称为断言(assertion)，也称为锚点(anchor)，常见的断言有 3 种： 单词边界、行开头结尾、环视 。\"]},\"916\":{\"h\":\"单词边界\",\"t\":[\"在文本处理中可能会经常进行单词替换，比如把 row 替换成 line。但是，如果直接替换，不仅所有单词 row 都被替换成 line，单词内部的 row 也会被替换成 line。要想解决这个问题，必须有办法确定单词 row，而不是字符串 row。\",\"为了解决这类问题，正则表达式提供了专用的单词边界（word boundary），记为\\\\b，它匹配的是'单词边界'位置，而不是字符。\\\\b匹配的是一边是单词字符\\\\w，一边是非单词字符\\\\W的位置。\",\"与\\\\b对应的还有\\\\B，表示非单词边界，但实际上\\\\B很少使用。\",\"let reg = /\\\\bis\\\\b/; let str = 'this is a test'; console.log(reg.exec(str)); // [ 'is', index: 5, input: 'this is a test' ] console.log(reg.exec('is')); // [ 'is', index: 0, input: 'is' ]\"]},\"917\":{\"h\":\"起始结束\",\"t\":[\"常见的断言还有^和$，它们分别匹配字符串的开始位置和结束位置，所以可以用来判断整个字符串能否由表达式匹配。\",\"let reg = /^\\\\d\\\\w*/; let str1 = '1asd'; let str2 = 'qwe2'; console.log(reg.test(str1)); // true console.log(reg.test(str2)); // false\",\"^和$的常用功能是删除字符串首尾多余的空白，类似于字符串对象的trim()方法。\",\"let fnTrim = function (str) { return str.replace(/^\\\\s+|\\\\s+$/, ''); }; console.log(fnTrim(' hello world ')); // 'hello world'\"]},\"918\":{\"h\":\"环视\",\"t\":[\"环视，在不同的地方又称之为零宽断言，简称断言。环视强调的是它所在的位置，前面或者后面，必须满足环视表达式中的匹配情况，才能匹配成功。\",\"环视可以认为是虚拟加入到它所在位置的附加判断条件，并不消耗正则的匹配字符。\",\"环视可分为正序环视和逆序环视，而 JavaScript 只支持正序环视，相当于只支持向前看，不支持往回看。而正序环视又分为肯定正序环视和否定正序环视。\",\"肯定正序环视的记法为?=正则表达式，表示所在的位置右侧能够匹配到该正则。否定正序环视的记忆法是?!正则表达式，表示所在的位置右侧位置不能匹配到该正则。\",\"举一个例子：\",\"let reg = /(?=A)[A-Z]/; /* 匹配以下的字符串: 1. (?=A) 所在的位置，后面是 A 2. 表达式 [A-Z] 匹配 A-Z 中任意一个字母 */ console.log(reg.test('ABC')); // true console.log(reg.test('BBC')); // fasle\",\"从例子可以看出，从左到右，正则分别匹配了环视(?=A)和[A-Z]，由于环视不消耗正则的匹配字符，因此，[A-Z]还能对 A 进行匹配，并得到结果。\",\"再例如，我要匹配文件名以.js结束的文件：\",\"let reg = /\\\\w+(?=\\\\.js)/; let str = 'test.js'; console.log(reg.test(str)); // true\",\"如果在?=后面想要继续书写字符，那么必须先写一个?=后面的字符，如下：\",\"let reg = /a(?=b)bc/; // 正则 a 后面必须书写 b let str1 = 'abc'; let str2 = 'acc'; let str3 = 'abb'; let str4 = 'abbc'; let str5 = 'abcc'; console.log(reg.test(str1)); // true console.log(reg.test(str2)); // false console.log(reg.test(str3)); // false console.log(reg.test(str4)); // false console.log(reg.test(str5)); // true\",\"注意括号后面的地方第一个字符必须写成 b，因为?=位置后面就写的 b，这样才能继续在后面书写字符。\",\"如果像下面这样写，那么是不可能匹配上的。\",\"let reg = /a(?=b)c/; let str1 = 'abc'; let str2 = 'acc'; let str3 = 'abb'; let str4 = 'abbc'; let str5 = 'abcc'; console.log(reg.test(str1)); // false console.log(reg.test(str2)); // false console.log(reg.test(str3)); // false console.log(reg.test(str4)); // false console.log(reg.test(str5)); // false\",\"接下来我们来看?!，其实就和?=刚好相反，后面的字符不能是某一个字符，如下：\",\"let reg = /a(?!b)c/; let str = 'ac'; console.log(reg.test(str)); // true\",\"同样需要注意的是，既然指定了后面不能是某一个字符，那么如果想要往后面继续书写字符，首先需要写一个不是?!后面的，如下：\",\"let reg = /a(?!b)b/; let str1 = 'axb'; let str2 = 'abb'; let str3 = 'acb'; console.log(reg.test(str1)); // false console.log(reg.test(str2)); // false console.log(reg.test(str3)); // false\",\"注意：环视虽然也用到括号，却与捕获型分组编号无关；但如果环视结构出现捕获型括号，则会影响分组\",\"console.log(/ab(?=cd)/.exec('abcd')); // [ 'ab', index: 0, input: 'abcd' ] console.log(/ab(?=(cd))/.exec('abcd')); // [ 'ab', 'cd', index: 0, input: 'abcd' ]\",\"关于环视更多的介绍，可以参照：https://www.cnblogs.com/tsql/p/5860889.html\"]},\"919\":{\"h\":\"8. 模式修正符\",\"t\":[\"匹配模式（match mode）又被称之为模式修正符。指的是匹配时使用的规则。设置特定的模式，可能会改变对正则表达式的识别。\",\"前面已经介绍过创建正则表达式对象时，可以设置m、i、g这三个标志，分别对应多行模式、不区分大小模式和全局模式三种。\",\"**i：**默认地，正则表达式是区分大小写的，通过设置标志i，可以忽略大小写（ignore case）。\",\"console.log(/ab/.test('aB')); // false console.log(/ab/i.test('aB')); // true\",\"**m：**默认地，正则表达式中的^和$匹配的是整个字符串的起始位置和结束位置，而通过设置标志m，开启多行模式，它们也能匹配字符串内部某一行文本的起始位置和结束位置。\",\"console.log(/^b/.test('a\\\\nb')); // false console.log(/^b/m.test('a\\\\nb')); // true\",\"**g：**默认地，第一次匹配成功后，正则对象就停止向下匹配了。g修饰符表示全局匹配（global），设置g标志后，正则对象将匹配全部符合条件的结果，主要用于搜索和替换。\",\"console.log('1a,2a,3a'.replace(/a/, 'b')); // 1b,2a,3a console.log('1a,2a,3a'.replace(/a/g, 'b')); // 1b,2b,3b\"]},\"920\":{\"h\":\"9. 优先级\",\"t\":[\"正则表达式千变万化，但是大多都是由之前介绍过的字符组、括号、量词等基本结构组合而成的。这些元字符，和运算符一样拥有一个优先级关系，如下：\",\"// 从上到下，优先级逐渐降低 \\\\ 转义符 () (?!) (?=) [] 括号、字符组、环视 * + ? {n} {n,} {n,m} 量词 ^ $ 起始结束位置 | 选择\",\"由于括号的用途之一就是为量词限定作用范围，所以优先级比量词高\",\"console.log(/ab{2}/.test('abab')); // false console.log(/(ab){2}/.test('abab')); // true\",\"注意：选择符|的优先级最低，比起始和结束位置都要低\",\"console.log(/^ab|cd$/.test('abc')); // true console.log(/^(ab|cd)$/.test('abc')); // false console.log(/^(ab|cd)$/.test('ab')); // true console.log(/^(ab|cd)$/.test('cd')); // true\"]},\"921\":{\"h\":\"10. 局限性\",\"t\":[\"尽管 JavaScript 中的正则表达式功能比较完备，但与其他语言相比，缺少某些特性。下面列出了 JavaScript 的正则表达式所不支持的特性。\",\"POSIX 字符组（只支持普通字符组和排除型字符组）\",\"Unicode 支持（只支持单个 Unicode 字符）\",\"匹配字符串开始和结尾的\\\\A 和\\\\Z 锚（只支持^和$）\",\"逆序环视（只支持顺序环视）\",\"命名分组（只支持 0-9 编号的捕获组）\",\"单行模式和注释模式（只支持 m、i、g）\",\"模式作用范围\",\"纯文本模式\"]},\"922\":{\"h\":\"11. 正则表达式属性和方法\",\"t\":[\"前面有提到，当我们使用typeof运算符来打印正则表达式的类型时，返回的是object，这说明正则表达式在 JavaScript 中也是一种对象。那么既然是对象，就应该有相应的属性和方法。\"]},\"923\":{\"h\":\"实例属性\",\"t\":[\"每个 RegExp 实例对象都包含如下 5 个属性：\",\"global：布尔值，表示是否设置了 g 标志。 ignoreCase：布尔值，表示是否设置了 i 标志。 multiline：布尔值，表示是否设置了标志 m。 lastIndex：整数，表示开始搜索下一个匹配项的字符位置，从 0 算起。 source：正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回。\",\"示例如下：\",\"let reg = /test/gi; console.log(reg.global); // true console.log(reg.ignoreCase); // true console.log(reg.multiline); // false console.log(reg.lastIndex); // 0 console.log(reg.source); // test\",\"RegExp 的exec()或test()函数，如果设定了全局模式g，正则表达式的匹配就会从lastIndex的位置开始，并且在每次匹配成功之后重新设定lastIndex，继续往后匹配。这样，就可以在字符串中重复迭代，依次寻找各个匹配结果。\",\"但是，如果需要对不同字符串调用同一个 RegExp 的exec()或test()方法，这个变量也可能会带来意料之外的匹配结果，所以在更换字符串时，要显式地将 RegExp 的lastIndex置为 0。\",\"// exec()方法以数组形式返回匹配项 let reg = /\\\\w/g; let str = 'abcd'; console.log(reg.lastIndex); // 0 console.log(reg.exec(str)); // [ 'a', index: 0, input: 'abcd' ] console.log(reg.lastIndex); // 1 console.log(reg.exec(str)); // [ 'b', index: 1, input: 'abcd' ] console.log(reg.lastIndex); // 2 console.log(reg.exec(str)); // [ 'c', index: 2, input: 'abcd' ] console.log(reg.lastIndex); // 3 console.log(reg.exec(str)); // [ 'd', index: 3, input: 'abcd' ] console.log(reg.lastIndex); // 4 console.log(reg.exec(str)); // null console.log(reg.lastIndex); // 0 console.log(reg.exec(str)); // [ 'a', index: 0, input: 'abcd' ]\"]},\"924\":{\"h\":\"构造函数属性（扩展）\",\"t\":[\"RegExp 构造函数属性被看成静态属性，这些属性基于所执行的最近一次正则表达式操作而变化。\",\"有 2 种方式访问它们，即长属性名和短属性名。短属性名大都不是有效的 ECMAScript 标识符，所以必须通过方括号语法来访问它们。\",\"长属性名 短属性名 说明 input $_ 最近一次要匹配的字符串 lastMatch $& 最近一次的匹配项 lastParen $+ 最近一次匹配的捕获组 leftContext $` input字符串中lastMatch之前的文本 multiline $* 布尔值，表示是否所有表达式都使用多行模式 rightContext $' input字符串中lastMatch之后的文本\",\"使用这些属性，可以从exec()方法或test()方法执行的操作中提取出更具体的信息\",\"// test()用于测试一个字符串是否匹配某个正则表达式，并返回一个布尔值 let text = 'this has been a short summer'; let pattern = /(.)hort/g; if (pattern.test(text)) { console.log(RegExp.input); // 'this has been a short summer' console.log(RegExp.leftContext); // 'this has been a ' console.log(RegExp.rightContext); // ' summer' console.log(RegExp.lastMatch); // 'short' console.log(RegExp.lastParen); // 's' console.log(RegExp.multiline); // undefined console.log(RegExp['$_']); // 'this has been a short summer' console.log(RegExp['$`']); // 'this has been a ' console.log(RegExp[\\\"$'\\\"]); // ' summer' console.log(RegExp['$&']); // 'short' console.log(RegExp['$+']); // 's' console.log(RegExp['$*']); // undefined }\",\"JavaScript 有 9 个用于存储捕获组的构造函数属性，在调用exec()或test()方法时，这些属性会被自动填充。\",\"注：理论上，应该保存整个表达式匹配文本的 RegExp.$0 并不存在，值为 undefined。\",\"// RegExp.$1,RegExp.$2,RegExp.$3...到 RegExp.$9 分别用于存储第一、第二……第九个匹配的捕获组 let text = 'this has been a short summer'; let pattern = /(..)or(.)/g; if (pattern.test(text)) { console.log(RegExp.$1); //sh console.log(RegExp.$2); //t }\"]},\"925\":{\"h\":\"实例方法\",\"t\":[\"RegExp 对象的实例方法共 5 个，分为两类。包括toString()、toLocalString()、valueOf()这 3 种对象通用方法和test()、exec()这 2 种正则匹配方法\",\"对象通用方法（扩展）\",\"RegExp 对象继承了 Object 对象的toString()、toLocaleString()、valueOf()这 3 个通用方法。\",\"toString():toString()方法返回正则表达式的字面量。 toLocaleString():toLocaleString()方法返回正则表达式的字面量。 valueOf():valueOf()方法返回返回正则表达式对象本身。\",\"注意：不论正则表达式的创建方式是哪种，这三个方法都只返回其字面量形式\",\"let pattern1 = new RegExp('[bc]at', 'gi'); console.log(pattern1.toString()); // '/[bc]at/gi' console.log(pattern1.toLocaleString()); // '/[bc]at/gi' console.log(pattern1.valueOf()); // /[bc]at/gi let pattern2 = /[bc]at/gi; console.log(pattern2.toString()); // '/[bc]at/gi' console.log(pattern2.toLocaleString()); // '[bc]at/gi' console.log(pattern2.valueOf()); // /[bc]at/gi\",\"正则匹配方法\",\"正则表达式 RegExp 对象的正则匹配方法只有两个：分别是test()和exec()。\",\"test()方法用来测试在字符串中是否能够找到符合正则要求的字符。接收一个字符串参数，匹配时返回 true，否则返回 false。\",\"let reg = /test/; let str = 'this is a test'; console.log(reg.test(str)); // true\",\"在调用test()方法时，会造成 RegExp 对象的lastIndex属性的变化。\",\"如果指定了全局模式，每次执行test()方法时，都会从字符串中的lastIndex偏移值开始尝试匹配。所以用同一个 RegExp 多次验证相同字符串时，必须在每次调用之后，将lastIndex值置为 0。\",\"let pattern = /^\\\\d{4}-\\\\d{2}-\\\\d{2}$/g; console.log(pattern.test('2016-06-23')); // true console.log(pattern.test('2016-06-23')); // false // 正确的做法应该是在验证不同字符串前，先将 lastIndex 重置为 0 let pattern = /^\\\\d{4}-\\\\d{2}-\\\\d{2}$/g; console.log(pattern.test('2016-06-23')); // true pattern.lastIndex = 0; console.log(pattern.test('2016-06-23')); // true\",\"前面有介绍过，JavaScript 有 9 个用于存储捕获组的构造函数属性，在调用exec()或test()方法时，这些属性会被自动填充。\",\"注意：理论上，应该保存整个表达式匹配文本的RegExp.$0并不存在，值为undefined。\",\"if (/^(\\\\d{4})-(\\\\d{2})-(\\\\d{2})$/.test('2016-06-23')) { console.log(RegExp.$1); // '2016' console.log(RegExp.$2); // '06' console.log(RegExp.$3); // '23' console.log(RegExp.$0); // undefined }\",\"exec()方法专门为捕获组而设计，接受一个参数，即要应用模式的字符串。然后返回包含匹配项信息的数组，在没有匹配项的情况下返回null。\",\"在匹配项数组中，第一项是与整个模式匹配的字符串，其他项是与模式中的捕获组匹配的字符串，如果模式中没有捕获组，则该数组只包含一项。\",\"返回的数组包含两个额外的属性：index和input。index表示匹配项在字符串的位置，input表示应用正则表达式的字符串。\",\"let text = 'mom and dad and baby and others'; let pattern = /mom( and dad( and baby)?)?/gi; let matches = pattern.exec(text); console.log(pattern); console.log(matches); /* /mom( and dad( and baby)?)?/gi [ 'mom and dad and baby', ' and dad and baby', ' and baby', index: 0, input: 'mom and dad and baby and others', groups: undefined ] */\",\"对于exec()方法而言，即使在模式中设置了全局标志g，它每次也只会返回一个匹配项。在不设置全局标志的情况下，在同一个字符串上多次调用exec()，将始终返回第一个匹配项的信息。\",\"let text = 'cat,bat,sat,fat'; let pattern1 = /.at/; let matches = pattern1.exec(text); console.log(pattern1, matches); /* * /.at/ [ 'cat', index: 0, input: 'cat,bat,sat,fat' ] */ let text = 'cat,bat,sat,fat'; matches = pattern1.exec(text); console.log(pattern1, matches); /* * /.at/ [ 'cat', index: 0, input: 'cat,bat,sat,fat' ] */\",\"而在设置全局标志的情况下，每次调用 exec()都会在字符串中继续查找新匹配项。\",\"let text = 'cat,bat,sat,fat'; let pattern2 = /.at/g; let matches = pattern2.exec(text); console.log(pattern2, matches); /* * /.at/g [ 'cat', index: 0, input: 'cat,bat,sat,fat' ] */ let text = 'cat,bat,sat,fat'; matches = pattern2.exec(text); console.log(pattern2, matches); /* * /.at/g [ 'bat', index: 4, input: 'cat,bat,sat,fat' ] */\",\"注意：用exec()方法找出匹配的所有位置和所有值。\",\"let string = 'j1h342jg24g234j 3g24j1'; let pattern = /\\\\d/g; let valueArray = []; // 值 let indexArray = []; // 位置 let temp; while ((temp = pattern.exec(string)) != null) { valueArray.push(temp[0]); indexArray.push(temp.index); } console.log(valueArray); console.log(indexArray); // [ '1', '3', '4', '2', '2', '4', '2', '3', '4', '3', '2', '4', '1' ] // [ 1, 3, 4, 5, 8, 9, 11, 12, 13, 16, 18, 19, 21 ]\"]},\"926\":{\"h\":\"十六、函数\",\"t\":[\"函数，是可以通过名称来引用，并且就像自包含了一个微型程序的代码块。利用函数，我们可以实现对代码的复用，降低代码的重复，并且让代码更加容易阅读。\",\"在 JavaScript 中，函数显得尤为的重要。因为函数在 JavaScript 中是一等公民，可以像参数一样传入和返回。所以说函数是 JavaScript 中的一个重点，同时也是一个难点。\"]},\"927\":{\"h\":\"1. 声明函数的方式\"},\"928\":{\"h\":\"构造器声明函数\",\"t\":[\"var fun = new Function(\\\"console.log('Hello 这是我的第一个函数');\\\");\",\"基本不用\"]},\"929\":{\"h\":\"函数表达式声明函数\",\"t\":[\"var 变量 = function () { // 函数体 };\",\"需要说明的是，这里的变量并不是该函数的名字，一般来讲，我们都是将一个匿名函数赋值给一个变量，然后通过这个变量来对函数进行调用。\"]},\"930\":{\"h\":\"字面量声明函数\",\"t\":[\"function 函数名([形参1,形参2...形参N]){ // 函数体... }\"]},\"931\":{\"h\":\"2. 函数的参数设置\",\"t\":[\"函数的参数可以分为两种，一种是实际参数，另外一种是形式参数。这个我们在前面已经介绍过了。\",\"接下来我们来详细看一下形式参数。形式参数简称形参，它就是一种变量，但是这种变量只能被函数体内的语句使用，并在函数调用时被赋值。JavaScript 中的形参的声明是不需要添加关键字的，如果加上关键字反而会报错。\",\"示例：\",\"function test(let i){ console.log(i); } test(5); // SyntaxError: Unexpected identifier\",\"JavaScript 里面关于函数的形参，有以下几个注意点:\",\"多个形参之间使用,隔开，声明形参就相当于在函数内部声明了对应的变量，但是并不赋值\",\"调用函数时解析器不会检查实参的类型，所以要注意，是否有可能会接收到非法的参数，如果有可能则需要对参数进行 类型的检查\",\"调用函数时，解析器也不会检查实参的数量，多余实参不会被赋值，如果实参的数量少于形参的数量，则没有对应实参的形参将是 undefined\",\"实参可以是任意的数据类型，包括对象，当我们的参数过多时，可以将参数封装到一个对象中，然后通过对象传递。\",\"实参可以是一个对象，也可以是一个函数（经常将函数作为实参传递给另一函数）\"]},\"932\":{\"h\":\"arguments 参数\",\"t\":[\"当一个函数要被执行的时候，系统会在执行函数体代码前做一些初始化工作，其中之一就是为函数创建一个 arguments 的 伪数组对象 。这个伪数组对象将包含调用函数时传递的所有的实际参数。\",\"function test(x) { for (let i = 0; i < arguments.length; i++) { console.log(arguments[i]); } } test(1, 2, 3); // 1 // 2 // 3\",\"arguments.length可以用来获取实参的长度\",\"我们即使不定义形参，也可以通过arguments来使用实参，只不过比较麻烦 \",\"arguments[0] 表示第一个实参\",\"arguments[1] 表示第二个实参 。。。\",\"它里边有一个属性叫做callee，这个属性对应一个函数对象，就是当前正在指向的函数对象\"]},\"933\":{\"h\":\"不定参数\",\"t\":[\"不定参数是从 ECMAScript 6 开始新添加的功能，在最后一个形式参数前面添加 3 个点，会将所有的实参放入到一个数组里面，示例如下：\",\"function test(a, ...b) { console.log(a); // 1 console.log(b); // [2,3] } test(1, 2, 3);\",\"这里的不定参数就是一个真正的数组，可以使用数组的相关方法\",\"function test(a, ...b) { console.log(a); // 1 console.log(b); // [2,3] b.push(100); console.log(b); // [ 2, 3, 100 ] } test(1, 2, 3);\",\"还有一点需要注意的是，不定参数都是放在形式参数的最后面，如果不是放在最后，则会报错。\",\"function test(...a,b){ console.log(a); console.log(b); } test(1,2,3); // SyntaxError: Rest parameter must be last formal parameter\"]},\"934\":{\"h\":\"默认参数\",\"t\":[\"从 ECMAScript 6 开始，书写函数的时候可以给函数的形式参数一个默认值。这样如果在调用函数时没有传递相应的实际参数，就使用默认值。如果传递了相应的实际参数，则使用传过去的参数。\",\"function test(name = 'world') { console.log('Hello,' + name); } test('xiejie'); // Hello,xiejie test(); // Hello,world\",\"如果参数是一个数组，要为这个数组设置默认值的话，写法稍微有些不同，如下：\",\"let fn = function ([a = 1, b = 2] = []) { console.log(a, b); }; fn(); // 1 2 fn([3, 4]); // 3 4\",\"包括后面我们要介绍的对象，也是可以设定默认值的，其写法和上面为数组设置默认值类似，如下：\",\"let fn = function ({ name = 'xiejie', age = 18 } = {}) { console.log(name, age); }; fn(); // xiejie 18 fn({ name: 'song', age: 20 }); // song 20\"]},\"935\":{\"h\":\"3. 函数的返回值\",\"t\":[\"函数的返回值的关键字为return。代表要从函数体内部返回给外部的值\",\"在函数中 return 后的语句都不会执行，如果 return 语句后不跟任何值就相当于返回一个 undefined，如果函数中不写 return，则也会返回 undefined。\",\"let test = function () { return 1; console.log('Hello'); }; let i = test(); console.log(i); // 1\",\"返回值可以是任意的数据类型，也可以是一个对象。\"]},\"936\":{\"h\":\"4. 作用域问题\",\"t\":[\"作用域指一个变量作用的范围，在 JS 中一共有 3 种作用域：全局作用域，函数作用域以及 eval 作用域。\"]},\"937\":{\"h\":\"全局作用域\",\"t\":[\"直接编写在 script 标签中的 JS 代码，都在全局作用域\",\"全局作用域在页面打开时创建，在页面关闭时销毁\",\"在全局作用域中有一个全局对象 window，它代表的是一个浏览器的窗口，它由浏览器创建我们可以直接使用\",\"在全局作用域中： \",\"创建的变量都会作为 window 对象的属性保存\",\"创建的函数都会作为 window 对象的方法保存\",\"全局作用域中的变量都是全局变量，在页面的任意的部分都可以访问的到\"]},\"938\":{\"h\":\"函数作用域\",\"t\":[\"函数作用域在编码的时候就确定了，一旦确实就不再变化\",\"在函数作用域中可以访问到全局作用域的变量；在全局作用域中无法访问到函数作用域的变量\",\"当在函数作用域操作一个变量时，它会先在自身作用域中寻找，如果有就直接使用；如果没有则向上一级作用域中寻找，直到找到全局作用域，如果全局作用域中依然没有找到，则会报错 ReferenceError\",\"在函数中要访问全局变量可以使用 window 对象\",\"在函数中，不使用 var 声明的变量都会成为全局变量\"]},\"939\":{\"h\":\"5. 变量提升\",\"t\":[\"所谓变量提升，就是指在使用var关键字进行变量声明的时候，默认会将声明变量的部分提升至当前作用域的最顶上，但是注意提升的只有变量的声明部分，赋值是不会提升的。\",\"console.log(i); // undefined var i = 10; console.log(i); // 10\",\"还有一点要注意的是，只有var声明的变量才具有这种特性，let或者const不存在变量提升：\",\"console.log(i); // ReferenceError: i is not defined let i = 10;\",\"如果我们在函数里面声明变量时没有添加关键字，那么默认将会是在全局环境中声明一个变量：\",\"let test = function () { i = 10; }; test(); console.log(i); // 10\",\"通过上面的代码，我们可以证明这是一个全局作用域里面的变量，但是这个变量究竟是以var的形式声明的？还是以let或者说const的方式声明的呢？\",\"答案就是：以var的形式进行声明的，但是不具有变量提升。\",\"这里我们可以来证明这一点。在上面的例子中，我们在外部成功访问到了在函数里面没有添加声明关键字的变量i，接下来我们来提前打印输出这个i变量，如下：\",\"console.log(i); // ReferenceError: i is not defined let test = function () { i = 10; }; test();\",\"可以看到这里会报错，显示的是\\\"i is not defined\\\"，从而证明了不具有变量提升的特性。\"]},\"940\":{\"h\":\"6. 函数提升\",\"t\":[\"所谓函数提升，是指当我们使用字面量方式来声明一个函数的时候，此时函数的声明会提升到当前作用域的最顶端，这意味着我们可以将函数的调用书写到函数的声明之前。\",\"test(); // Hello! function test() { console.log('Hello!'); } // 等价于 // test : pointer to test() // test() // function test(){ // console.log(\\\"Hello!\\\"); // }\",\"需要注意的是，仅仅只有字面量声明函数的方式才存在函数提升，如果是使用函数表达式来进行的函数声明，则不存在有函数提升的情况。\",\"test(); let test = function () { console.log('Hello!'); }; // ReferenceError: test is not defined\",\"在上面的例子中，如果我们声明函数时使用的是var关键字，这时虽然不存在函数提升，但是同样会存在变量提升，如下：\",\"console.log(test); // undefined var test = function () { console.log('Hello!'); }; console.log(test); // [Function: test]\"]},\"941\":{\"h\":\"7. 箭头函数\",\"t\":[\"所谓箭头函数，是从 ECMAScript 6 开始新增加的一种声明函数的方式。其最大的特点在于不需要function关键字，取而代之的是使用一个=>来进行函数声明。\",\"箭头函数的基本语法如下：\",\"let 变量 = (形式参数) => { // 函数体 };\",\"箭头函数具体示例：\",\"let test = (name) => { console.log('Hello', name); }; test('xiejie'); // Hello xiejie\",\"上面所介绍的，只是箭头函数的基本写法。实际上箭头函数根据形式参数和函数体的不同，书写的方式拥有一些变形。如下：\",\"// 如果没有参数 let 变量 = () => { // 函数体 }; // 如果只有一个形参 let 变量 = (形参) => { // 函数体 }; // 如果函数体只有一个返回值 let 变量 = (形参) => expression;\",\"例如：书写求立方根的箭头函数\",\"let test = (x) => x * x * x; console.log(test(3)); // 27\",\"注：从 ECMAScript 6 开始已经提供了专门用于求幂的运算符**来进行幂运算。\"]},\"942\":{\"h\":\"箭头函数的优点\",\"t\":[\"箭头函数的优点如下：\",\"比普通函数声明更简洁\",\"只有一个形参就不需要用括号括起来\",\"如果函数体只有一行，就不需要放到一个块中\",\"如果 return 语句是函数体内唯一的语句，就不需要 return 关键字\",\"不会把自己的 this 值绑定到函数上\"]},\"943\":{\"h\":\"8. 回调函数\",\"t\":[\"在本章开篇就有提到过，函数在 JavaScript 中是一等公民。这里所谓的一等公民，就是指函数可以像其他数据类型一样作为函数的参数传入，也可以通过返回值的形式来返回。\",\"这里要介绍的回调（callback）就是利用了这一特性，我们将传递给另一个函数作为实参的函数称之为回调函数（callback）。\",\"所谓回调函数，通俗的来讲，就是指将一个函数作为参数传递给另外一个函数，然后在另外一个函数里面执行传递过去的函数，我们来看一个具体的示例，如下：\",\"let test = function (fn) { fn(); }; let test2 = function () { console.log('Hello World'); }; test(test2); // Hello World\",\"这里，我们的 test2 就被称之为回调函数。因为 test2 是作为一个参数传递到了 test 函数里面，然后在 test 里面进行的 test2 函数调用。\",\"回调函数可以和其他参数一起传入到一个参数里面，如下：\",\"let test = function (name, fn) { console.log(`My name is ${name}`); fn(); }; let test2 = function () { console.log(\\\"I'm coding\\\"); }; test('xiejie', test2); // My name is xiejie // I'm coding\"]},\"944\":{\"h\":\"内置回调函数介绍\",\"t\":[\"在之前的学习中，我们就已经接触过一个内置回调函数了。那就是sort()。\",\"使用sort()为数组进行排序的时候，默认是使用的 ASCII 码来进行的排序。如果想要按照数值来进行排序，就需要我们传递一个回调函数进去。这里我们一起来复习一下：\",\"let arr = [0, 12, 3, 7, -12, 23]; console.log( arr.sort(function (a, b) { return a - b; // 降序就返回 b - a }) );\",\"甚至我们还可以使用前面小节所介绍过的箭头函数，将上面的排序写作如下：\",\"let arr = [0, 12, 3, 7, -12, 23]; console.log(arr.sort((a, b) => a - b));\",\"在 JavaScript 里面，除了sort()以外，还有诸如forEach()，map()，every()，some()等函数，也是很常见的内置回调函数。\"]},\"945\":{\"h\":\"迭代方法\",\"t\":[\"every()是对数组的每一项运行给定的函数，如果该函数每一项都返回 true，则返回 true。\",\"let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // 将数组的每一项传入到回调函数，如果每一项返回 true，那么最终返回 true let i = arr.every(function (item) { if (item % 2 == 0) { return true; } else { return false; } }); console.log(i); // false\",\"与every()比较相似的是some()，该方法可以对数组的每一项运行指定的函数，如果该函数只要有一项返回 true 则返回 true。\",\"let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // 将数组的每一项传入到回调函数，如果有一项返回 true，那么最终返回 true let i = arr.some(function (item) { if (item % 2 == 0) { return true; } else { return false; } }); console.log(i); // true\",\"filter()中的 filter 是过滤的意思，这个方法会返回一个数组，数组里面返回过滤过的元素。\",\"let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // 将数组的每一项传入到回调函数，然后将返回为 true 的项目组成一个数组 let i = arr.filter(function (item) { if (item % 2 == 0) { return true; } else { return false; } }); console.log(i); // [ 2, 4, 6, 8, 10 ]\",\"forEach()方法在前面介绍数组遍历的时候，就已经见到过了。该方法就是简单的将数组每一项传入到函数，然后执行该函数里面的代码。需要注意一下的是，该回调函数没有返回值。\",\"let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // 将数组的每一项传入到回调函数，然后执行回调函数里面的操作 let i = arr.forEach(function (item) { console.log(item); }); console.log(i); // undefined\",\"map()方法是对数组的每一项运行回调函数。最终返回一个数组，这个数组是每次调用函数后的运行结果。\",\"let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // 将数组的每一项传入到回调函数，然后将返回的结果组成一个新的数组返回 let i = arr.map(function (item) { if (item % 2 == 0) { return true; } else { return false; } }); console.log(i); // [ false, true, false, true, false, true, false, true, false, true ]\",\"注：以上方法都不会改变原数组的值。\",\"并且这些方法都可以接收两个参数，第一个是数组的元素值，第二个是数组的索引。上面的例子中我们都只接收了一个参数，即数组的值。\"]},\"946\":{\"h\":\"归并方法（扩展）\",\"t\":[\"归并方法有两个，reduce()和reduceRight()，一个是从数组第一项开始，另外一个是从数组最后一项开始，两个方法都会迭代数组所有的项，然后构建一个最终的返回值。\",\"这两个方法都接受两个参数：一个在每一项回调用的函数和一个可选的初始值。\",\"关于作为回调被传入的函数，里面又可以接收 4 个参数，分别是前一项值，当前值，数组索引和数组对象。\",\"注：这里的前一项值指的是上一次迭代时的计算结果。\",\"这里我们可以将回调函数的参数打印出来看一下，如下：\",\"没有初始值的情况：\",\"let arr = [1, 2, 3, 4, 5]; let i = arr.reduce(function (pre, cur, index, arr) { console.log(pre, cur, index, arr); return pre + cur; }); console.log(i); // 1 2 1 [ 1, 2, 3, 4, 5 ] // 3 3 2 [ 1, 2, 3, 4, 5 ] // 6 4 3 [ 1, 2, 3, 4, 5 ] // 10 5 4 [ 1, 2, 3, 4, 5 ] // 15\",\"有初始值的情况：\",\"let arr = [1, 2, 3, 4, 5]; let i = arr.reduce(function (pre, cur, index, arr) { console.log(pre, cur, index, arr); return pre + cur; }, 100); console.log(i); // 100 1 0 [ 1, 2, 3, 4, 5 ] // 101 2 1 [ 1, 2, 3, 4, 5 ] // 103 3 2 [ 1, 2, 3, 4, 5 ] // 106 4 3 [ 1, 2, 3, 4, 5 ] // 110 5 4 [ 1, 2, 3, 4, 5 ] // 115\",\"其实，reduce()方法就和前面的forEach()，map()等方法很相似，将数组的每一项应用到函数里面。只不过会将每次的计算结果放入下一次迭代时进行使用。\",\"下面的例子演示了使用reduce()方法来实现数值的累加：\",\"let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; let i = arr.reduce(function (pre, cur) { return pre + cur; }); console.log(i); // 55\",\"reduce()是从左往右进行归并，reduceRight()是从右往左开始归并，这里就不再做演示了。\"]},\"947\":{\"h\":\"链式调用\",\"t\":[\"本节的最后介绍一下链式调用。所谓链式调用，就是可以像链条一样一直调用方法。其实链式调用的原理也非常简单，在调用方法时，方法里面会返回一个对象，然后这个对象又可以调用方法，这样我们就可以实现链式调用。\",\"示例：求数组的偶数和\",\"let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]; let sum = arr.filter((item) => item % 2 === 0).reduce((a, b) => a + b); console.log(sum); // 110 // 因为 filter() 返回的是一个数组，所以我们可以直接再次调用 reduce() 方法\"]},\"948\":{\"h\":\"9. 立即执行函数\",\"t\":[\"函数定义完，立即被调用，这种函数叫做立即执行函数，立即执行函数往往只会执行一次\",\"(function (a, b) { console.log('a = ' + a); console.log('b = ' + b); })(123, 456);\",\"IIFE 可以在执行一个任务的同时，将所有的变量都封装到函数的作用域里面，从而保证了全局的命名空间不会被很多变量名污染。\",\"通过 IIFE，我们可以对我们的代码进行分块。并且块与块之间不会互相影响，哪怕有同名的变量也没问题，因为 IIFE 也是函数，在函数内部声明的变量是一个局部变量，示例如下：\",\"(function () { //block A var name = 'xiejie'; console.log(`my name is ${name}`); })(); (function () { //block B var name = 'song'; console.log(`my name is ${name}`); })(); // my name is xiejie // my name is song\",\"在 var 流行的时代，JavaScript 是没有块作用域的。\",\"什么叫做块作用域呢？\",\"目前我们所知的作用域大概有 2 种：全局作用域和函数作用域。其中，全局作用域是指声明的变量可在当前环境的任何地方使用。函数作用域则只能在当前函数所创造的环境中使用。\",\"块级作用域是指每个代码块也可以有自己的作用域，比如在if块中声明一个变量，就只能在当前代码块中使用，外面无法使用。\",\"用 var 声明的变量是不存在块级作用域的，所以即使在if块中用 var 声明变量，它也能在外部的函数或者全局作用域中使用。\",\"function show(valid) { if (valid) { var a = 100; } console.log('a:', a); } show(true); // a: 100\",\"这个例子中，a 变量是在if块中声明，但是它的外部仍然能输出它的结果。\",\"解决这个问题有 2 种方法，第一：使用 ECMAScript 6 中的 let 关键字声明变量，这样它就有块级作用域。第二：使用 IIFE，示例如下：\",\"function show(valid) { if (valid) { (function () { var a = 100; })(); } console.log('a:', a); } show(true); // ReferenceError: a is not defined\",\"当然，只要浏览器支持，建立尽量使用 let 的方式来声明变量。\",\"面试题\",\"var b = 10; (function b() { b = 20; console.log(b); })(); // function b() { b = 20; console.log(b) }\",\"当 JavaScript 解释器遇到非匿名立即执行函数（题目中的 b）时，会创建一个辅助的特定对象，然后将函数名称当作这个对象的属性，因此函数内部可以访问到 b，但是这个值又是只读的，所以对他的赋值并不生效，所以打印的结果还是这个函数，并且外部的值也没有发生更改。\"]},\"949\":{\"h\":\"10.函数属性和方法\"},\"950\":{\"h\":\"属性\",\"t\":[\"表示函数的函数名\",\"function test() { console.log('Hello'); } console.log(test.name); // test\",\"我们可以通过这个name属性来证明函数表达式的变量不是函数名，如下：\",\"let test = function test2() { console.log('Hello'); }; console.log(test.name); // test2\"]},\"951\":{\"h\":\"属性\",\"t\":[\"表示形式参数的个数。但是形参的数量不包括剩余参数个数，仅包括第一个具有默认值之前的参数个数。\",\"具体示例如下：\",\"const test = function (a, b, c) {}; console.log(test.length); // 3\",\"统计具有默认值之前的参数个数。\",\"const test = function (a, b = 5, c) {}; console.log(test.length); // 1\",\"不会包括剩余参数的个数。\",\"const test = function (a, b, ...c) {}; console.log(test.length); // 2\",\"接下来我们需要看一下函数名.length与arguments.length的区别：\",\"函数对象的length属性是表示 形式参数的个数 。arguments伪数组对象的length属性是调用函数时实际参数的个数。如下：\",\"let test = function (a, b, c) { console.log(arguments.length); // 5 console.log(arguments.callee.length); // 3 }; test(1, 2, 3, 4, 5);\"]},\"952\":{\"h\":\"属性（扩展）\",\"t\":[\"caller属性是函数对象本身的属性，它显示了函数的调用者。\",\"如果函数是在全局执行环境中（浏览器中）被调用，那么它的值为 null，如果在另一个函数中被调用，它的值就是那个函数。\",\"浏览器中的全局执行环境中被调用：\",\"<body> <script> let test = function () { console.log(test.caller); }; test(); // null </script> </body>\",\"Node.js 中的全局执行环境中被调用：\",\"let test = function () { console.log(test.caller); }; test(); // [Function]\",\"被一个函数所调用：\",\"let test = function () { let test2 = function () { console.log(test2.caller); // [Function: test] // 因为这个函数的调用者就是 test 函数 }; test2(); }; test();\"]},\"953\":{\"h\":\"属性（扩展）\",\"t\":[\"callee是arguments对象的一个属性，该属性是一个指针，指向拥有这个arguments对象的函数\",\"let test = function () { let test2 = function () { let test3 = function () { console.log(arguments.callee); // [Function: test3] }; test3(); }; test2(); }; test();\",\"callee的作用在于能够找到arguments对象所属的函数，不让函数的执行和函数名紧紧关联在一起，我们来看下面这个例子：\",\"// 计算阶乘的递归函数 let test = function (i) { if (i == 1) { return 1; } else { return i * test(i - 1); // 这里就和函数名紧紧的关联了起来 } }; console.log(test(3));\",\"如果我们把上面的写法稍作修改，就可以看到上面写法的缺陷\",\"// 计算阶乘的递归函数 let test = function (i) { if (i === 1) { return 1; } else { return i * test(i - 1); // 这里就和函数名紧紧的关联了起来 } }; let test2 = test; // 将阶乘函数赋值给 test2 // 改变 test 这个阶乘函数的函数体 test = function () { console.log('我已经改变了'); }; console.log(test2(3)); // 我已经改变了 // NaN\",\"所以，这个时候就可以使用arguments对象的callee属性来降低这种关联，如下：\",\"// 计算阶乘的递归函数 let test = function (i) { if (i == 1) { return 1; } else { return i * arguments.callee(i - 1); // callee 指向拥有 arguments 对象的函数 } }; let test2 = test; // 将阶乘函数赋值给 test2 // 改变 test 这个阶乘函数的函数体 test = function () { console.log('我已经改变了'); }; console.log(test2(3)); // 6\"]},\"954\":{\"h\":\"十四、 严格模式\"},\"955\":{\"h\":\"1. 经典真题\",\"t\":[\"use strict 是什么意思 ? 使用它区别是什么？\"]},\"956\":{\"h\":\"2. 什么是严格模式\",\"t\":[\"严格模式是从 ES5 开始新增的一种方式，是采用具有限制性 JavaScript 变体的一种方式，从而使代码隐式地脱离“马虎模式/稀松模式/懒散模式“（sloppy）模式。\",\"设立\\\"严格模式\\\"的目的，主要有以下几个：\",\"消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为;\",\"消除代码运行的一些不安全之处，保证代码运行的安全；\",\"提高编译器效率，增加运行速度；\",\"为未来新版本的 Javascript 做好铺垫。\",\"“严格模式”体现了 Javascript 更合理、更安全、更严谨的发展方向，支持严格模式的浏览器有：Internet Explorer 10 +、 Firefox 4+ Chrome 13+、 Safari 5.1+、 Opera 12+。\",\"在“严格模式下”，同样的代码，可能会有不一样的运行结果。一些在“正常模式”下可以运行的语句，在“严格模式”下将不能运行。\",\"掌握这些内容，有助于更细致深入地理解 Javascript，让你变成一个更好的程序员。\"]},\"957\":{\"h\":\"3. 开启严格模式\",\"t\":[\"进入“严格模式”的标志，是下面这行语句：\",\"'use strict';\",\"老版本的浏览器会把它当作一行普通字符串，加以忽略。\",\"“严格模式”有两种调用方法，适用于不同的场合。\",\"针对整个脚本文件\",\"将 “use strict” 放在脚本文件的第一行，则整个脚本都将以“严格模式”运行。\",\"如果这行语句不在第一行，则无效，整个脚本以“正常模式”运行。如果不同模式的代码文件合并成一个文件，这一点需要特别注意。\",\"'use strict'; console.log('这是严格模式。');\",\"在上面的代码中，我们第一行书写了 “use strict”，所以整个代码会进入到严格模式执行。\",\"<script> 'use strict'; console.log('这是严格模式。'); </script> <script> console.log('这是正常模式。'); </script>\",\"上面的代码表示，一个网页中依次有两段 Javascript 代码。前一个 script 标签是严格模式，后一个不是。\",\"针对单个函数\",\"将 “use strict” 放在函数体的第一行，则整个函数以“严格模式”运行。\",\"function strict() { 'use strict'; return '这是严格模式。'; } function notStrict() { return '这是正常模式。'; }\",\"脚本文件的变通写法\",\"因为第一种调用方法不利于文件合并，所以更好的做法是，借用第二种方法，将整个脚本文件放在一个立即执行的匿名函数之中。\",\"(function () { 'use strict'; // some code here })();\"]},\"958\":{\"h\":\"4. 严格模式和普通模式区别\",\"t\":[\"接下来，我们就来看一下严格模式下对 Javascript 的语法和行为，都做了哪些改变。\",\"没有使用 var 声明的变量不能使用\",\"在普通模式下，我们可以使用一个未声明的变量，此时该变量会成为一个全局变量。但是这种使用方式在严格模式下会报错。\",\"'use strict'; a = 10; // ReferenceError: a is not defined console.log(a); function sum() { var a = 10; console.log(a); } sum();\",\"删除变量和不存在的属性会报错\",\"在普通模式下，删除变量或者不允许删除的属性虽然也会失败，但是是“静默失败”，也就是说虽然失败了，但是不会给出任何提示。这样其实会产生很多隐藏问题，也给程序员的调错带来了难度。\",\"在严格模式下则会保存，例如：\",\"'use strict'; var i = 10; delete i; // SyntaxError: Delete of an unqualified identifier in strict mode. console.log(i); // 10\",\"函数中相同的形参名会报错\",\"在普通模式下，函数中两个形参名相同也不会报错，只不过后面的形参所接收到的值会覆盖前面的同名形参。\",\"function a(b, b) { console.log(b); // 2 } a(1, 2);\",\"但是在严格模式下，相同的形参名会报错。\",\"'use strict'; // SyntaxError: Duplicate parameter name not allowed in this context function a(b, b) { console.log(b); } a(1, 2);\",\"对象不能有重名的属性\",\"正常模式下，如果对象有多个重名属性，最后赋值的那个属性会覆盖前面的值。严格模式下，这属于语法错误。\",\"'use strict'; var o = { p: 1, p: 2, }; // 语法错误\",\"禁止八进制表示法\",\"正常模式下，整数的第一位如果是 0，表示这是八进制数，比如 010 等于十进制的 8。\",\"var i = 010; console.log(i); // 8\",\"严格模式禁止这种表示法，整数第一位为 0，将报错。\",\"'use strict'; var i = 010; // SyntaxError: Octal literals are not allowed in strict mode. console.log(i);\",\"函数内部 this 值为 undefined\",\"在普通模式下，函数中的 this 在以函数的形式被调用时，指向全局对象。而在严格模式中，得到的值为 undefined。\",\"'use strict'; function a() { console.log(this); // undefined } a();\",\"创设 eval 作用域\",\"正常模式下，Javascript 语言有两种变量作用域（scope）：全局作用域和函数作用域。\",\"严格模式创设了第三种作用域：eval 作用域。\",\"正常模式下，eval 语句的作用域，取决于它处于全局作用域，还是处于函数作用域。\",\"严格模式下，eval 语句本身就是一个作用域，不再能够生成全局变量了，它所生成的变量只能用于 eval 内部。\",\"'use strict'; var x = 2; console.info(eval('var x = 5; x')); // 5 console.info(x); // 2\",\"保留字\",\"为了向将来 Javascript 的新版本过渡，严格模式新增了一些保留字：implements, interface, let, package, private, protected, public, static, yield。使用这些词作为变量名将会报错。\",\"'use strict'; var public = 'hello world'; // SyntaxError: Unexpected strict mode reserved word console.log(public);\",\"更多关于严格模式的内容，可以参阅 ：\",\"MDN：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode\",\"《Javascript 严格模式详解 By 阮一峰》：http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html\"]},\"959\":{\"h\":\"5. 真题解答\",\"t\":[\"use strict 是什么意思 ? 使用它区别是什么？\",\"参考答案：\",\"use strict 代表开启严格模式，这种模式使得 Javascript 在更严格的条件下运行，实行更严格解析和错误处理。\",\"开启“严格模式”的优点：\",\"消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为;\",\"消除代码运行的一些不安全之处，保证代码运行的安全；\",\"提高编译器效率，增加运行速度；\",\"为未来新版本的 Javascript 做好铺垫。\",\"回答一些具体的严格模式下和普通模式之间的区别。\"]},\"960\":{\"c\":[\"前端\"]},\"961\":{\"c\":[\"JavaScript\"]},\"962\":{\"h\":\"基础重点总结\"},\"963\":{\"h\":\"一、数据类型的分类和判断\"},\"964\":{\"h\":\"1. 分类\"},\"965\":{\"h\":\"基本(值)类型\",\"t\":[\"类型\",\"取值\",\"判别方式\",\"Number\",\"任意数值\",\"typeof\",\"String\",\"任意字符串\",\"typeof\",\"Boolean\",\"true/false\",\"typeof\",\"undefined\",\"undefined\",\"typeof/===\",\"null\",\"null\",\"===\",\"typeof null时返回的是Object\",\"ES6 中引入了新的基本类型Symbol和bigInt\"]},\"966\":{\"h\":\"对象(引用)类型\",\"t\":[\"类型\",\"判别方式\",\"Object\",\"typeof/instanceof\",\"Array\",\"instanceof\",\"Function\",\"typeof\",\"typeof Array时返回的是Object\"]},\"967\":{\"h\":\"2. 判断总结\",\"t\":[\"一般情况下使用typeof（返回的是类型的字符串表达）\",\"无法区分的情况：null 与 object、Array 与 object\",\"instanceof、Array.isArray\",\"区分 Array 与 object\",\"===\",\"区分 null 与 object\",\"利用Object.prototype.toString函数，可以编写一个通用函数判断变量类型\",\"function getType(data) { let type = typeof data; if (type !== 'object') { return type; } return Object.prototype.toString.call(data).replace(/^\\\\[object (\\\\S+)\\\\]$/, '$1'); } //测试 function Person() {} console.log(getType(1)); // number console.log(getType(true)); // boolean console.log(getType([1, 2, 3])); // Array console.log(getType(/abc/)); // RegExp console.log(getType(new Date())); // Date console.log(getType(new Person())); // Object console.log(getType({})); // Object\"]},\"968\":{\"h\":\"二、数据类型的相互转换\"},\"969\":{\"h\":\"1. 类型转换规则\"},\"970\":{\"h\":\"原始-->数字\",\"t\":[\"true：1；false：0\",\"null：0；\",\"undefined：NaN\",\"string \",\"空字符串（含空白字符）：0\",\"去掉引号，不是数字就是 NaN\"]},\"971\":{\"h\":\"所有-->bool\",\"t\":[\"false 的情况：null、undefined、0、空字符串、NaN\",\"true 的情况：其他\"]},\"972\":{\"h\":\"原始-->字符串\",\"t\":[\"null：\\\"null\\\"\",\"undefined:\\\"undefined\\\"\",\"number:\\\"数字\\\"\",\"boolean \",\"true:\\\"true\\\"\",\"false:\\\"false\\\"\"]},\"973\":{\"h\":\"对象-->原始\",\"t\":[\"调用valueOf --> 得到的是对象？重新调用toString --> 得到的还是对象？报错\"]},\"974\":{\"h\":\"2. 数据运算符\"},\"975\":{\"h\":\"算术运算符（+、-、*、/）\",\"t\":[\"运算双方都需要转化为原始类型\",\"转换为数字，然后运算\",\"x+y，x 和 y 有一个为字符串，转化为字符串，进行拼串\",\"NaN 和任何运算符进行运算还是 NaN\"]},\"976\":{\"h\":\"比较运算符（>、<、=）\",\"t\":[\"大于小于这些：转换为原始类型\",\"转换为数字，然后比较\",\"两端全是字符串，比较字典顺序\",\"两端存在NaN，一定为false\",\"===\",\"类型和值必须都相同\",\"但是两端存在 NaN 时，一定为 false\",\"==\",\"两端类型相同，比较值\",\"两端都是原始类型，转为数字进行比较\",\"一端原始，一端对象，将对象转为原始类型进行比较\",\"undefined 和 null 只有与自身或者相互比较时，才会返回 true\",\"两端存在 NaN，一定为 false\"]},\"977\":{\"h\":\"逻辑运算符\",\"t\":[\"转换为 boolean（短路特性）\"]},\"978\":{\"h\":\"3. 面试题\",\"t\":[\"// ?处填什么可以让下面的console输出true var a = ? console.log(a==1 && a==2 && a==3)\",\"var a = { b: 1, valueOf: function () { return this.b++; }, };\"]},\"979\":{\"h\":\"三、原始值和引用值的区别\"},\"980\":{\"h\":\"1. 简单值（原始值）\",\"t\":[\"简单值是表示 JavaScript 中可用的数据或信息的最底层形式或最简单形式。简单类型的值被称为简单值，是因为它们是不可细化的。\",\"也就是说，数字是数字，字符串是字符串，布尔值是 true 或 false，null 和 undefined 就是 null 和 undefined。这些值本身很简单，不能够再进行拆分。\",\"由于简单值的数据大小是固定的，所以 简单值的数据是存储于内存中的栈区里面的 。\",\"要简单理解栈的存取方式，我们可以通过类比乒乓球盒子来分析。如下图：\",\"img\",\"下面是具体的代码示例：\",\"var str = 'Hello World'; var num = 10; var bol = true; var myNull = null; var undef = undefined; console.log(typeof str); // string console.log(typeof num); // number console.log(typeof bol); // boolean console.log(typeof myNull); // object console.log(typeof undef); // undefined\",\"这里面 null 比较特殊，打印出来是 object，这是由于历史原因所遗留下来的问题，是来源于 JavaScript 从第一个版本开始时的一个 bug，并且这个 bug 无法被修复。因为修复会破坏现有的代码。\",\"具体原因是因为不同的对象在底层都表现为二进制，在 JavaScript 中二进制前三位都为 0 的话会被判断为 object 类型，null 的二进制全部为 0，自然前三位也是 0，所以执行 typeof 值会返回 object。\",\"例外，当我们打印 null == undefined的时候，返回的是 true，这也是面试时经常会被问到的一个问题。\",\"这两个值都表示“无”的意思。\",\"通常情况下， 当我们试图访问某个不存在的或者没有赋值的变量时，就会得到一个 undefined 值。Javascript 会自动将声明是没有进行初始化的变量设为 undifined。而 null 值表示空，null 不能通过 Javascript 来自动赋值，也就是说必须要我们自己手动来给某个变量赋值为 null。\",\"那么为什么 JavaScript 要设置两个表示\\\"无\\\"的值呢？这其实也是因为历史原因。\",\"1995 年 JavaScript 诞生时，最初像 Java 一样，只设置了 null 作为表示\\\"无\\\"的值。根据 C 语言的传统，null 被设计成可以自动转为 0。但是，JavaScript 的设计者，觉得这样做还不够，主要有以下两个原因。\",\"null 像在 Java 里一样，被当成一个对象。但是，JavaScript 的数据类型分成原始类型（primitive）和复合类型（complex）两大类，作者觉得表示“无”的值最好不是对象。\",\"JavaScript 的最初版本没有包括错误处理机制，发生数据类型不匹配时，往往是自动转换类型或者默默地失败。作者觉得，如果 null 自动转为 0，很不容易发现错误。\",\"因此，作者又设计了一个 undefined。**这里注意：先有 null 后有 undefined 出来，undefined 是为了填补之前的坑。**JavaScript 的最初版本是这样区分的：\",\"null 是一个表示“无”的对象（空对象指针），转为数值时为 0；\",\"典型用法是：\",\"作为函数的参数，表示该函数的参数不是对象。\",\"作为对象原型链的终点。\",\"undefined 是一个表示\\\"无\\\"的原始值，转为数值时为 NaN。\",\"典型用法是：\",\"变量被声明了，但没有赋值时，就等于 undefined。\",\"调用函数时，应该提供的参数没有提供，该参数等于 undefined。\",\"对象没有赋值的属性，该属性的值为 undefined。\",\"函数没有返回值时，默认返回 undefined。\"]},\"981\":{\"h\":\"2. 复杂值（引用值）\",\"t\":[\"在 JavaScript 中，对象就是一个复杂值。因为对象可以向下拆分，拆分成多个简单值或者复杂值。\",\"复杂值在内存中的大小是未知的，因为复杂值可以包含任何值，而不是一个特定的已知值，所以复杂值的数据都是存储于堆区里面。\",\"如下图所示：\",\"img\",\"下面是具体的代码示例：\",\"// 简单值 var a1 = 0; var a2 = 'this is str'; var a3 = null; // 复杂值 var c = [1, 2, 3]; var d = { m: 20 };\"]},\"982\":{\"h\":\"3. 访问方式\",\"t\":[\"按值访问\",\"简单值是作为不可细化的值进行存储和使用的，引用它们会转移其值。\",\"var str = 'Hello'; var str2 = str; str = null; console.log(str, str2); // null \\\"Hello\\\"\",\"引用访问\",\"复杂值是通过引用进行存储和操作的，而不是实际的值。创建一个包含复杂对象的变量时，其值是内存中的一个引用地址。引用一个复杂对象时，使用它的名称（即变量或对象属性）通过内存中的引用地址获取该对象值。\",\"var obj = {}; var obj2 = obj; obj.name = 'zhangsan'; console.log(obj.name); // zhangsan console.log(obj2.name); // zhangsan\"]},\"983\":{\"h\":\"4. 比较方式\",\"t\":[\"简单值采用值比较，而复杂值采用引用比较。复杂值只有在引用相同的对象（即有相同的地址）时才相等。即使是包含相同对象的两个变量也彼此不相等，因为它们并不指向同一个对象。\",\"示例 1:\",\"var a = 10; var b = 10; var c = new Number(10); var d = c; console.log(a === b); // true console.log(a === c); // false console.log(a === c); // false console.log(a == c); // true d = 10; console.log(d == c); // true console.log(d === c); // false\",\"示例 2:\",\"var obj = { name: 'zhangsan' }; var obj2 = { name: 'zhangsan' }; console.log(obj == obj2); // false console.log(obj === obj2); // false var obj3 = { name: 'zhangsan' }; var obj4 = obj3; console.log(obj3 == obj4); // true console.log(obj3 === obj4); // ture\"]},\"984\":{\"h\":\"5. 动态属性\",\"t\":[\"对于复杂值，可以为其添加属性和方法，也可以改变和删除其属性和方法。但简单值不可以：\",\"var str = 'test'; str.abc = true; console.log(str.abc); // undefined var obj = {}; obj.abc = true; console.log(obj.abc); // true\",\"复杂值支持动态对象属性，因为我们可以定义对象，然后创建引用，再更新对象，并且所有指向该对象的变量都会获得更新。\",\"一个新变量指向现有的复杂对象，并没有复制该对象。这就是复杂值有时被称为引用值的原因。复杂值可以根据需求有任意多个引用，即使对象改变，它们也总是指向同一个对象\",\"var obj = { name: 'zhangsan' }; var obj2 = obj; var obj3 = obj2; obj.name = 'abc'; console.log(obj.name, obj2.name, obj3.name); // abc abc abc\"]},\"985\":{\"h\":\"6. 变量赋值\",\"t\":[\"最后说一下关于变量的赋值，其实是可以分为直接赋值和引用赋值的。直接赋值，就是指将简单值赋值给变量，而引用赋值是指将一个复杂值的引用赋值给变量，这个引用指向堆区实际存在的数据。\",\"直接赋值\",\"var a = 3; var b = a; b = 5; console.log(a); // 3\",\"引用赋值\",\"var a = { value: 1 }; var b = a; b.value = 10; console.log(a.value); // 10\"]},\"986\":{\"h\":\"四、let、const、var 的区别\"},\"987\":{\"h\":\"var 关键字\",\"t\":[\"没有块级作用域的概念\",\"有全局作用域、函数作用域的概念\",\"不初始化值默认为 undefined\",\"存在变量提升\",\"全局作用域用 var 声明的变量会挂载到 window 对象下\",\"同一作用域中允许重复声明\"]},\"988\":{\"h\":\"let 关键字\",\"t\":[\"有块级作用域的概念\",\"不存在变量提升\",\"暂时性死区\",\"同一块作用域中不允许重复声明\"]},\"989\":{\"h\":\"const 关键字\",\"t\":[\"与 let 特性一样，仅有 2 个差别\",\"区别 1：必须立即初始化，不能留到以后赋值\",\"区别 2：常量的值不能改变\"]},\"990\":{\"h\":\"五、this 的指向\",\"t\":[\"this 关键字是一个非常重要的语法点。毫不夸张地说，不理解它的含义，大部分开发任务都无法完成。\",\"this 可以用在构造函数之中，表示实例对象。除此之外，this 还可以用在别的场合。但不管是什么场合，this 都有一个共同点： 它总是返回一个对象 。\",\"关于 this 的指向，有一种广为流传的说法就是“谁调用它，this 就指向谁”。\",\"这样的说法没有太大的问题，但是并不是太全面。总结起来，this 的指向规律有如下几条：\",\"在函数体中，非显式或隐式地简单调用函数时，在严格模式下，函数内的 this 会被绑定到 undefined 上，在非严格模式下则会被绑定到全局对象 window/global 上。\",\"一般使用 new 方法调用构造函数时，构造函数内的 this 会被绑定到新创建的对象上。\",\"一般通过 call/apply/bind 方法显式调用函数时，函数体内的 this 会被绑定到指定参数的对象上。\",\"一般通过上下文对象调用函数时，函数体内的 this 会被绑定到该对象上。\",\"在箭头函数中，this 的指向是由外层（函数或全局）作用域来决定的。\",\"当然，真实环境多种多样，下面我们就来根据实战例题逐一梳理。\"]},\"991\":{\"h\":\"1. 全局环境中的 this\",\"t\":[\"例题 1：\",\"function f1() { console.log(this); } function f2() { 'use strict'; console.log(this); } f1(); // window or global f2(); // undefined\",\"这种情况相对简单、直接，函数在浏览器全局环境下被简单调用，在非严格模式下 this 指向 window，在通过 use strict 指明严格模式的情况下指向 undefined。\",\"虽然上面的题目比较基础，但是需要注意上面题目的变种，例如\",\"例题 2：\",\"const foo = { bar: 10, fn: function () { console.log(this); // window or global console.log(this.bar); // undefined }, }; var fn1 = foo.fn; fn1();\",\"这里的 this 仍然指向 window。虽然 fn 函数在 foo 对象中作为该对象的一个方法，但是在赋值给 fn1 之后，fn1 仍然是在 window 的全局环境下执行的。因此上面的代码仍然会输出 window 和 undefined。\",\"还是上面这道题目，如果改成如下的形式\",\"例题 3：\",\"const foo = { bar: 10, fn: function () { console.log(this); // { bar: 10, fn: [Function: fn] } console.log(this.bar); // 10 }, }; foo.fn();\",\"这时，this 指向的是最后调用它的对象，在 foo.fn( ) 语句中，this 指向的是 foo 对象。\"]},\"992\":{\"h\":\"2. 上下文对象调用中的 this\",\"t\":[\"例题 4：\",\"const student = { name: 'zhangsan', fn: function () { return this; }, }; console.log(student.fn() === student); // true\",\"在上面的代码中，this 指向当前的对象 student，所以最终会返回 true。\",\"当存在更复杂的调用关系时，如以下代码中的嵌套关系，this 将指向最后调用它的对象，例如\",\"例题 5：\",\"const student = { name: 'zhangsan', son: { name: 'zhangxiaosan', fn: function () { return this.name; }, }, }; console.log(student.son.fn()); // zhangxiaosan\",\"在上面的代码中，this 会指向最后调用它的对象，因此输出的是 zhangxiaosan。\",\"至此，this 的上下文对象调用已经介绍得比较清楚了。我们再来看一道比较高阶的题目\",\"例题 6：\",\"const o1 = { text: 'o1', fn: function () { return this.text; }, }; const o2 = { text: 'o2', fn: function () { return o1.fn(); }, }; const o3 = { text: 'o3', fn: function () { var fn = o1.fn; return fn(); }, }; console.log(o1.fn()); // o1 console.log(o2.fn()); // o1 console.log(o3.fn()); // undefined\",\"答案是 o1、o1、undefined。\",\"这里主要讲一下为什么第三个是 undefined。这里将 o1.fn 赋值给了 fn，所以 fn 等价于 function () { return this.text; }，然后该函数在调用的时候，是直接 fn( ) 的形式调用的，并不是以对象的形式，相当于还是全局调用，指向 window，所以打印出 undefined。\"]},\"993\":{\"h\":\"3. this 指向绑定事件的元素\",\"t\":[\"DOM元素绑定事件时，事件处理函数里面的 this 指向绑定了事件的元素。\",\"这个地方一定要注意它和 target 的区别，target 是指向触发事件的元素。\",\"示例如下：\",\"<ul id=\\\"color-list\\\"> <li>red</li> <li>yellow</li> <li>blue</li> <li>green</li> <li>black</li> <li>white</li> </ul>\",\"// this 是绑定事件的元素 // target 是触发事件的元素 和 srcElememnt 等价 let colorList = document.getElementById('color-list'); colorList.addEventListener('click', function (event) { console.log('this:', this); console.log('target:', event.target); console.log('srcElement:', event.srcElement); });\",\"当我点击如下位置时打印出来的信息如下：\",\"有些时候我们会遇到一些困扰，比如在 div 节点的事件函数内部，有一个局部的 callback 方法，该方法被作为普通函数调用时，callback 内部的 this 是指向全局对象 window 的\",\"例如：\",\"<div id=\\\"div1\\\">我是一个div</div>\",\"window.id = 'window'; document.getElementById('div1').onclick = function () { console.log(this.id); // div1 const callback = function () { console.log(this.id); // 因为是普通函数调用，所以 this 指向 window }; callback(); };\",\"此时有一种简单的解决方案，可以用一个变量保存 div 节点的引用，如下：\",\"window.id = 'window'; document.getElementById('div1').onclick = function () { console.log(this.id); // div1 const that = this; // 保存当前 this 的指向 const callback = function () { console.log(that.id); // div1 }; callback(); };\"]},\"994\":{\"h\":\"4. 改变 this 指向\"},\"995\":{\"h\":\"方法修改 this 指向\",\"t\":[\"由于 JavaScript 中 this 的指向受函数运行环境的影响，指向经常改变，使得开发变得困难和模糊，所以在封装 sdk 或者写一些复杂函数的时候经常会用到 this 指向绑定，以避免出现不必要的问题。\",\"call、apply、bind基本都能实现这一功能，起到确定 this 指向的作用\",\"Function.prototype.call( )\",\"call 方法可以指定 this 的指向（即函数执行时所在的的作用域），然后在指定的作用域中，执行函数。\",\"var obj = {}; var f = function () { return this; }; console.log(f() === window); // this 指向 window console.log(f.call(obj) === obj); // 改变this 指向 obj\",\"上面代码中，全局环境运行函数 f 时，this 指向全局环境（浏览器为 window 对象）；\",\"call 方法可以改变 this 的指向，指定 this 指向对象 obj，然后在对象 obj 的作用域中运行函数 f。\",\"call 方法的参数，应该是对象 obj，如果参数为空或 null、undefind，则默认传参全局对象。\",\"var n = 123; var obj = { n: 456 }; function a() { console.log(this.n); } a.call(); // 123 a.call(null); // 123 a.call(undefined); // 123 a.call(window); // 123 a.call(obj); // 456\",\"上面代码中，a 函数中的 this 关键字，如果指向全局对象，返回结果为 123。\",\"如果使用 call 方法将 this 关键字指向 obj 对象，返回结果为 456。可以看到，如果 call 方法没有参数，或者参数为 null 或 undefined，则等同于指向全局对象。\",\"如果 call 传参不是以上类型，则转化成对应的包装对象，然后传入方法。\",\"例如，5 转成 Number 实例，绑定 f 内部 this\",\"var f = function () { return this; }; f.call(5); // Number {[[PrimitiveValue]]: 5}\",\"call 可以接受多个参数，第一个参数是 this 指向的对象，之后的是函数回调所需的参数。\",\"function add(a, b) { return a + b; } add.call(this, 1, 2); // 3\",\"call 方法的一个应用是调用对象的原生方法。\",\"var obj = {}; obj.hasOwnProperty('toString'); // false // 覆盖掉继承的 hasOwnProperty 方法 obj.hasOwnProperty = function () { return true; }; obj.hasOwnProperty('toString'); // true Object.prototype.hasOwnProperty.call(obj, 'toString'); // false\",\"上面代码中 hasOwnProperty 是 obj 继承来的方法，用来判断对象是否包含自身特点（非继承）属性，但是 hasOwnProperty 并不是保留字，如果被对象覆盖，会造成结果错误。\",\"call 方法可以解决这个问题，它将 hasOwnProperty 方法的原始定义放到 obj 对象上执行，这样无论 obj 上有没有同名方法，都不会影响结果。\",\"Function.prototype.apply( )\",\"apply 和 call 作用类似，也是改变 this 指向，然后调用该函数，唯一区别是 apply 接收数组作为函数执行时的参数 。语法如下：\",\"func.apply(thisValue, [arg1, arg2, ...])\",\"apply 方法的第一个参数也是 this 所要指向的那个对象，如果设为 null 或 undefined，则等同于指定全局对象。\",\"第二个参数则是一个数组，该数组的所有成员依次作为参数，传入原函数。\",\"原函数的参数，在 call 方法中必须一个个添加，但是在 apply 方法中，必须以数组形式添加。\",\"function f(x, y) { console.log(x + y); } f.call(null, 1, 1); // 2 f.apply(null, [1, 1]); // 2\",\"利用这一特性，可以实现很多小功能。比如，输出数组的最大值：\",\"var a = [24, 30, 2, 33, 1]; Math.max.apply(null, a); //33\",\"还可以将数组中的空值，转化成 undefined。\",\"通过 apply 方法，利用 Array 构造函数 将数组的空元素变成 undefined 。\",\"var a = ['a', , 'b']; Array.apply(null, a); //['a',undefind,'b']\",\"空元素与 undefined 的差别在于，数组的 forEach 方法会跳过空元素，但是不会跳过 undefined。因此，遍历内部元素的时候，会得到不同的结果。\",\"var a = ['a', , 'b']; function print(i) { console.log(i); } a.forEach(print); // a // b Array.apply(null, a).forEach(print); // a // undefined // b\",\"配合数组对象的 slice 方法，可以将一个类似数组的对象（比如 arguments 对象）转为真正的数组。\",\"Array.prototype.slice.apply({ 0: 1, length: 1 }); // [1] Array.prototype.slice.apply({ 0: 1 }); // [] Array.prototype.slice.apply({ 0: 1, length: 2 }); // [1, undefined] Array.prototype.slice.apply({ length: 1 }); // [undefined]\",\"上面代码的 apply方法的参数都是对象，但是返回结果都是数组，这就起到了将 对象转成数组 的目的。\",\"从上面代码可以看到，这个方法起作用的前提是，被处理的对象必须有 length 属性，以及相对应的数字键。\",\"Function.prototype.bind( )\",\"bind 用于将函数体内的 this 绑定到某个对象，然后 返回一个新函数\",\"var d = new Date(); d.getTime(); // 1481869925657 var print = d.getTime; print(); // Uncaught TypeError: this is not a Date object.\",\"报错是因为 d.getTime 赋值给 print 后，getTime 内部的 this 指向方式变化，已经不再指向 date 对象实例了。\",\"解决方法：\",\"var print = d.getTime.bind(d); print(); // 1481869925657\",\"bind 接收的参数就是所要绑定的对象\",\"var counter = { count: 0, inc: function () { this.count++; }, }; var func = counter.inc.bind(counter); func(); counter.count; // 1\",\"绑定到其他对象\",\"var counter = { count: 0, inc: function () { this.count++; }, }; var obj = { count: 100, }; var func = counter.inc.bind(obj); func(); obj.count; // 101\",\"bind 还可以接收更多的参数，将这些参数绑定到原函数的参数\",\"var add = function (x, y) { return x * this.m + y * this.n; }; var obj = { m: 2, n: 2, }; var newAdd = add.bind(obj, 5); newAdd(5); // 20\",\"上面代码中，bind 方法除了绑定 this 对象，还将 add 函数的第一个参数 x 绑定成 5，然后返回一个新函数 newAdd，这个函数只要再接受一个参数 y 就能运行了。\",\"如果 bind 方法的第一个参数是 null 或 undefined，等于将 this 绑定到全局对象，函数运行时 this 指向顶层对象（浏览器为 window）。\",\"function add(x, y) { return x + y; } var plus5 = add.bind(null, 5); plus5(10); // 15\",\"上面代码中，函数 add 内部并没有 this，使用 bind 方法的主要目的是绑定参数 x，以后每次运行新函数 plus5，就只需要提供另一个参数 y 就够了。\",\"而且因为 add 内部没有 this，所以 bind 的第一个参数是 null，不过这里如果是其他对象，也没有影响。\",\"bind 方法有一些 使用注意点 。\",\"（1）每一次返回一个新函数\",\"bind 方法每运行一次，就返回一个新函数，这会产生一些问题。比如，监听事件的时候，不能写成下面这样。\",\"element.addEventListener('click', o.m.bind(o));\",\"上面代码中，click 事件绑定 bind 方法生成的一个匿名函数。这样会导致无法取消绑定，所以，下面的代码是无效的。\",\"element.removeEventListener('click', o.m.bind(o));\",\"正确的方法是写成下面这样：\",\"var listener = o.m.bind(o); element.addEventListener('click', listener); // ... element.removeEventListener('click', listener);\",\"（2）结合回调函数使用\",\"回调函数是 JavaScript 最常用的模式之一，但是一个常见的错误是， 将包含 this 的方法直接当作回调函数 。解决方法就是使用 bind 方法，将 counter.inc 绑定 counter。\",\"var counter = { count: 0, inc: function () { 'use strict'; this.count++; }, }; function callIt(callback) { callback(); } callIt(counter.inc.bind(counter)); counter.count; // 1\",\"上面代码中，callIt 方法会调用回调函数。这时如果直接把 counter.inc 传入，调用时 counter.inc 内部的 this 就会指向全局对象。使用 bind 方法将 counter.inc 绑定 counter 以后，就不会有这个问题，this 总是指向 counter。\",\"还有一种情况比较隐蔽，就是某些数组方法可以接受一个函数当作参数。这些函数内部的 this 指向，很可能也会出错。\",\"var obj = { name: '张三', times: [1, 2, 3], print: function () { this.times.forEach(function (n) { console.log(this.name); }); }, }; obj.print(); // 没有任何输出\",\"上面代码中，obj.print 内部 this.times 的 this 是指向 obj 的，这个没有问题。\",\"但是，forEach 方法的回调函数内部的 this.name 却是指向全局对象，导致没有办法取到值。稍微改动一下，就可以看得更清楚。\",\"obj.print = function () { this.times.forEach(function (n) { console.log(this === window); }); }; obj.print(); // true // true // true\",\"解决这个问题，也是通过 bind 方法绑定 this。\",\"obj.print = function () { this.times.forEach( function (n) { console.log(this.name); }.bind(this) ); }; obj.print(); // 张三 // 张三 // 张三\",\"（3）结合 call 方法使用\",\"利用 bind 方法，可以改写一些 JavaScript 原生方法的使用形式，以数组的 slice 方法为例。\",\"[1, 2, 3].slice(0, 1); // [1] // 等同于 Array.prototype.slice.call([1, 2, 3], 0, 1); // [1]\",\"上面的代码中，数组的 slice 方法从 [1, 2, 3] 里面，按照指定位置和长度切分出另一个数组。这样做的本质是在 [1, 2, 3] 上面调用 Array.prototype.slice 方法，因此可以用 call 方法表达这个过程，得到同样的结果。\",\"call 方法实质上是调用 Function.prototype.call 方法，因此上面的表达式可以用 bind 方法改写。\",\"var slice = Function.prototype.call.bind(Array.prototype.slice); slice([1, 2, 3], 0, 1); // [1]\",\"上面代码的含义就是，将 Array.prototype.slice 变成 Function.prototype.call 方法所在的对象，调用时就变成了 Array.prototype.slice.call。类似的写法还可以用于其他数组方法。\",\"var push = Function.prototype.call.bind(Array.prototype.push); var pop = Function.prototype.call.bind(Array.prototype.pop); var a = [1, 2, 3]; push(a, 4); a; // [1, 2, 3, 4] pop(a); a; // [1, 2, 3]\",\"如果再进一步，将 Function.prototype.call 方法绑定到 Function.prototype.bind 对象，就意味着 bind 的调用形式也可以被改写。\",\"function f() { console.log(this.v); } var o = { v: 123 }; var bind = Function.prototype.call.bind(Function.prototype.bind); bind(f, o)(); // 123\",\"上面代码的含义就是，将 Function.prototype.bind 方法绑定在 Function.prototype.call 上面，所以 bind 方法就可以直接使用，不需要在函数实例上使用。\"]},\"996\":{\"h\":\"2. 箭头函数的 this 指向\",\"t\":[\"当我们的 this 是以函数的形式调用时，this 指向的是全局对象。\",\"不过对于箭头函数来讲，却比较特殊。箭头函数的 this 指向始终为外层的作用域。\",\"先来看一个普通函数作为对象的一个方法被调用时，this 的指向，如下：\",\"const obj = { x: 10, test: function () { console.log(this); // 指向 obj 对象 console.log(this.x); // 10 }, }; obj.test(); // { x: 10, test: [Function: test] } // 10\",\"可以看到，普通函数作为对象的一个方法被调用时，this 指向当前对象。\",\"在上面的例子中，就是 obj 这个对象，this.x 的值为 10。\",\"接下来是箭头函数以对象的方式被调用的时候的 this 的指向，如下：\",\"var x = 20; const obj = { x: 10, test: () => { console.log(this); // {} console.log(this.x); // undefined }, }; obj.test(); // {} // undefined\",\"这里的结果和上面不一样，this 打印出来为 { }，而 this.x 的值为 undefined。\",\"为什么呢？\",\"实际上刚才我们有讲过，箭头函数的 this 指向与普通函数不一样，它的 this 指向始终是指向的外层作用域。所以这里的 this 实际上是指向的全局对象。\",\"如果证明呢？\",\"方法很简单，将这段代码放入浏览器运行，在浏览器中用 var 所声明的变量会成为全局对象 window 的一个属性，如下：\",\"接下来我们再来看一个例子，来证明箭头函数的 this 指向始终是指向的外层作用域。\",\"var name = 'JavaScript'; const obj = { name: 'PHP', test: function () { const i = function () { console.log(this.name); // i 是以函数的形式被调用的，所以 this 指向全局 // 在浏览器环境中打印出 JavaScript，node 里面为 undeifned }; i(); }, }; obj.test(); // JavaScript\",\"接下来我们将 i 函数修改为箭头函数，如下：\",\"var name = 'JavaScript'; const obj = { name: 'PHP', test: function () { const i = () => { console.log(this.name); // 由于 i 为一个箭头函数，所以 this 是指向外层的 // 所以 this.name 将会打印出 PHP }; i(); }, }; obj.test(); // PHP\",\"最后需要说一点的就是，箭头函数不能作为构造函数，如下：\",\"const Test = (name, age) => { this.name = name; this.age = age; }; const test = new Test('xiejie', 18); // TypeError: Test is not a constructor\",\"总结起来，this 的指向规律有如下几条：\",\"在函数体中，非显式或隐式地简单调用函数时，在严格模式下，函数内的 this 会被绑定到 undefined 上，在非严格模式下则会被绑定到全局对象 window/global 上。\",\"一般使用 new 方法调用构造函数时，构造函数内的 this 会被绑定到新创建的对象上。\",\"一般通过 call/apply/bind 方法显式调用函数时，函数体内的 this 会被绑定到指定参数的对象上。\",\"一般通过上下文对象调用函数时，函数体内的 this 会被绑定到该对象上。\",\"在箭头函数中，this 的指向是由外层（函数或全局）作用域来决定的。\"]},\"997\":{\"h\":\"六、数据,变量, 内存的理解\"},\"998\":{\"h\":\"1. 什么是数据?\",\"t\":[\"在内存中可读的, 可传递的保存了特定信息的'东东'\",\"一切皆数据, 函数也是数据\",\"在内存中的所有操作的目标: 数据\"]},\"999\":{\"h\":\"2. 什么是变量?\",\"t\":[\"在程序运行过程中它的值是允许改变的量\",\"一个变量对应一块小内存, 它的值保存在此内存中\"]},\"1000\":{\"h\":\"3. 什么是内存?\",\"t\":[\"内存条通电后产生的存储空间(临时的)\",\"一块内存包含 2 个方面的数据 \",\"内部存储的数据\",\"地址值数据\",\"内存空间的分类 \",\"栈空间: 全局变量和局部变量\",\"堆空间: 对象\"]},\"1001\":{\"h\":\"4. 内存,数据, 变量三者之间的关系\",\"t\":[\"内存是容器, 用来存储不同数据\",\"变量是内存的标识, 通过变量我们可以操作(读/写)内存中的数据\"]},\"1002\":{\"h\":\"七、JS 引擎如何管理内存？\",\"t\":[\"内存生命周期\",\"分配小内存空间, 得到它的使用权\",\"存储数据, 可以反复进行操作\",\"释放小内存空间\",\"释放内存\",\"局部变量: 函数执行完自动释放\",\"对象: 成为垃圾对象==>垃圾回收器回收\"]},\"1003\":{\"c\":[\"前端\"]},\"1004\":{\"c\":[\"JavaScript\",\"类型转换\"]},\"1005\":{\"h\":\"JS进阶\"},\"1006\":{\"h\":\"一、原型与原型链\"},\"1007\":{\"h\":\"1. 成分组成\",\"t\":[\"构造函数：所有函数都有一个特别的属性, 它默认指向一个 Object 空对象(即称为: 原型对象)(Object 不满足) \",\"prototype : 显式原型属性\",\"实例对象：所有实例对象都有一个特别的属性: \",\"__proto__ : 隐式原型属性\",\"原型对象：原型对象中有一个属性 constructor, 它指向函数对象，同时其作为 Object 的实例对象，也有一个__proto__属性指向它的原型对象 \",\"constructor：指向构造函数本身\"]},\"1008\":{\"h\":\"2. 显式原型与隐式原型的关系\",\"t\":[\"函数的 prototype: 定义函数时被自动赋值, 值默认为{}(空对象), 即为原型对象\",\"this.prototype = {}\",\"实例对象的__proto__: 在创建实例对象时被自动添加, 并赋值为构造函数的 prototype 值(两变量指向同一原型对象)\",\"this.__proto__ = Fn.prototype\",\"对象的隐式原型的值为其对应构造函数的显式原型的值\"]},\"1009\":{\"h\":\"3. 原型链\",\"t\":[\"访问一个对象的属性时，会先在自身属性中查找，找到返回；如果没有, 再沿着__proto__这条链向上查找, 找到返回;如果最终没找到, 返回undefined\",\"别名:隐式原型链\",\"作用: 查找对象的属性(方法)\",\"当给对象属性赋值时不会使用原型链, 而只是在当前对象中进行操作\",\"Object 原型的隐式原型为 null\",\"Function 的隐式原型(图中未画)指向自己的原型\",\"所有函数都是 Function 的实例(包含 Function)，所以函数对象也有__proto__属性\",\"Object 的原型对象是原型链尽头\",\"方法一般定义在原型中, 属性一般通过构造函数定义在对象本身上（继承）\",\"Object 函数的显式原型和隐式原型指向的对象不同\"]},\"1010\":{\"h\":\"4. 出现原因\",\"t\":[\"隐式原型和原型出现的根本原因在于 JS 没有记录类型的元数据，因此，JS 只能通过对象的隐式原型找到创建它的函数的原型，从而确定其类型。\"]},\"1011\":{\"h\":\"二、执行上下文与执行上下文栈\"},\"1012\":{\"h\":\"1. 声明提前现象\",\"t\":[\"变量提升: 在变量定义语句之前, 就可以访问到这个变量(未赋值：undefined)\",\"函数提升: 在函数定义语句之前, 就可以访问并执行该函数\",\"变量和函数分别成为 window 全局执行上下文的属性和方法\",\"本质上还是先声明，再执行代码\",\"函数提升比变量提升的优先级高\",\"function a() {} var a; console.log(typeof a); // 'function'\",\"var c = 1; //var c function c(c) { console.log(c); var c = 3; } // c=1 c(2); // 报错\",\"声明提前的出现就是下面提到的执行上下文引起的。\"]},\"1013\":{\"h\":\"2. 执行上下文的理解\",\"t\":[\"代码（全局代码、函数代码） 执行前进行的准备工作\",\"执行上下文 ：当代码执行进入一个环境时，就会为该环境创建一个执行上下文，它会在你运行代码前做一些准备工作，如确定作用域，创建局部变量对象等。\",\"JavaScript 中执行环境 \",\"全局环境\",\"函数环境\",\"eval 函数环境 （已不推荐使用）\",\"执行上下文栈 （函数调用栈 Call Stack）: 用来管理产生的多个执行上下文（n+1）\",\"由 js 引擎在代码执行前就创建\",\"用来确定函数嵌套时代码的执行顺序\"]},\"1014\":{\"h\":\"3. 生命周期\",\"t\":[\"创建阶段（进入执行上下文）：函数被调用时，进入函数环境，为其创建一个执行上下文，此时进入创建阶段。\",\"执行阶段（代码执行）：执行函数中代码时，此时执行上下文进入执行阶段。\"]},\"1015\":{\"h\":\"4. 执行上下文创建和执行的过程\",\"t\":[\"创建阶段 要做的事情主要如下：\",\"创建变量对象（VO：variable object）\",\"确定函数的形参（并赋值）\",\"函数环境会初始化创建 Arguments对象（并赋值）\",\"确定普通字面量形式的函数声明（并赋值）\",\"变量声明，函数表达式声明（未赋值）\",\"我们可以将整个上下文环境看作是一个对象。该对象拥有 3 个属性，如下：\",\"executionContextObj = { variableObject: {}, // 变量对象，里面包含 Arguments 对象，形式参数，函数和局部变量 scopeChain: {}, // 作用域链，包含内部上下文所有变量对象的列表 this: {}, // 上下文中 this 的指向对象 };\",\"在函数的建立阶段，首先会建立 Arguments 对象。然后确定形式参数，检查当前上下文中的函数声明，每找到一个函数声明，就在 variableObject 下面用函数名建立一个属性，属性值就指向该函数在内存中的地址的一个引用。\",\"如果上述函数名已经存在于 variableObject（简称 VO） 下面，那么对应的属性值会被新的引用给覆盖。最后，是确定当前上下文中的局部变量，如果遇到和函数名同名的变量，则会忽略该变量。\",\"确定 this 指向（this 由调用者确定）\",\"确定作用域（词法环境决定，哪里声明定义，就在哪里确定）\",\"执行阶段 要做的事情主要如下（不分顺序，按代码执行顺序走）：\",\"变量对象赋值 \",\"变量赋值\",\"函数表达式赋值\",\"调用内部函数\",\"顺序执行其它代码\",\"在es6中引入了块作用域的概念，通过 let 声明的变量 ，在编译阶段会存放到 词法环境 中。\",\"具体内容参考浏览器原理系列-JS 执行上下文详解 - 掘金 (juejin.cn)\",\"实例 1：\",\"原代码\",\"const foo = function (i) { var a = 'Hello'; var b = function privateB() {}; function c() {} }; foo(10);\",\"建立阶段的变量对象\",\"fooExecutionContext = { variavleObject : { arguments : {0 : 10,length : 1}, // 确定 Arguments 对象 i : 10, // 确定形式参数 c : pointer to function c(), // 确定函数引用 a : undefined, // 局部变量 初始值为 undefined b : undefined // 局部变量 初始值为 undefined }, scopeChain : {}, this : {} }\",\"执行阶段\",\"fooExecutionContext = { variavleObject : { arguments : {0 : 10,length : 1}, i : 10, c : pointer to function c(), a : \\\"Hello\\\",// a 变量被赋值为 Hello b : pointer to function privateB() // b 变量被赋值为 privateB() 函数 }, scopeChain : {}, this : {} }\",\"实例 2：\",\"原代码\",\"(function () { console.log(typeof foo); console.log(typeof bar); var foo = 'Hello'; var bar = function () { return 'World'; }; function foo() { return 'good'; } console.log(foo, typeof foo); })();\",\"建立阶段的变量对象\",\"fooExecutionContext = { variavleObject : { arguments : {length : 0}, foo : pointer to function foo(), bar : undefined }, scopeChain : {}, this : {} }\",\"执行阶段\",\"(function () { console.log(typeof foo); // function console.log(typeof bar); // undefined var foo = 'Hello'; // foo 被重新赋值 变成了一个字符串 var bar = function () { return 'World'; }; function foo() { return 'good'; } console.log(foo, typeof foo); //Hello string })();\"]},\"1016\":{\"h\":\"三、作用域与作用域链\",\"t\":[\"作用域就是一个独立的地盘，让变量不会外泄、暴露出去。也就是说作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。\"]},\"1017\":{\"h\":\"1. 概念理解\",\"t\":[\"作用域: 一块代码区域, 在编码时就确定了, 不会再变化\",\"作用域链: 多个嵌套的作用域形成的由内向外的结构, 用于查找变量\"]},\"1018\":{\"h\":\"2. 分类\",\"t\":[\"全局作用域\",\"最外层函数和在最外层函数外面定义的变量拥有全局作用域\",\"所有未定义直接赋值的变量自动声明为拥有全局作用域(包括内部函数中的变量)\",\"所有 window 对象的属性拥有全局作用域\",\"函数作用域\",\"在 ES6 之前，js 没有块作用域，es6 之后一对大括号可以形成一个块作用域\",\"作用域是分层的，内层作用域可以访问外层作用域的变量，反之则不行。\"]},\"1019\":{\"h\":\"3. 作用\",\"t\":[\"作用域: 隔离变量, 不同作用域定义同名的变量不会发生冲突\",\"作用域链: 自由变量（当前作用域未定义）的值需要一层一层向上寻找，直到找到全局作用域还是没找到，就宣布放弃。这种一层一层的关系，就是作用域链 。\"]},\"1020\":{\"h\":\"4. 区别作用域与执行上下文\",\"t\":[\"JavaScript 属于解释型语言，JavaScript 的执行分为：解释和执行两个阶段，这两个阶段所做的事并不一样。\",\"解释阶段\",\"词法分析\",\"语法分析\",\"作用域规则确定\",\"执行阶段\",\"创建执行上下文\",\"执行函数代码\",\"垃圾回收\",\"区别\",\"作用域: 静态的, 编码时就确定了 (不是在运行时), 一旦确定就不会变化了\",\"执行上下文: 动态的, 执行代码时动态创建, 当执行结束消失\",\"联系: 执行上下文环境从属于所在的作用域（先有作用域）\"]},\"1021\":{\"h\":\"5. 面试题\",\"t\":[\"var x = 10; function fn() { console.log(x); } function show(f) { var x = 20; f(); } show(fn); //10\",\"var fn = function () { console.log(fn); }; fn(); //fn的函数定义 var obj = { fn2: function () { console.log(fn2); //console.log(this.fn2) }, }; obj.fn2(); //报错\",\"原型链实现对象继承；作用域描述代码的作用范围，作用域链实现变量的查找顺序；执行上下文对象保存运行环境的信息（预处理：声名提前问题）。\"]},\"1022\":{\"h\":\"四、闭包\"},\"1023\":{\"h\":\"1. 概念理解\",\"t\":[\"闭包不是一种具体的技术，而是一种现象，是指在定义函数时，周围环境中的信息可以在函数中使用。换句话说，执行函数时，只要在函数中使用了外部的数据，就创建了闭包。\",\"而作用域链，正是实现闭包的手段。（所以闭包在创建代码时就产生了）\",\"image-20230330171740243\",\"函数 b 中的 y 变量并没有被放在闭包中，所以要不要放入闭包取决于该变量有没有被引用，当然，此时的你可能会有这样的一个新问题，那么多闭包，那岂不是占用内存空间么？\",\"其实，如果是像这样自动形成的闭包，是会被销毁掉的，当我们执行完引用变量的函数 c，此时闭包就自动销毁，垃圾回收器会自动回收没有引用的变量，不会有任何内存占用的情况。\",\"image-20230330173503276\",\"通过 chrome 工具得知: 闭包本质是内部函数中的一个对象, 这个对象中包含引用的变量属性，所以当函数对象成为垃圾对象时，其包含的变量也会一并释放。\",\"当然这些都是自动产生闭包的情况，有时我们会根据需求手动的来制造一个闭包。\",\"function eat() { var food = '鸡翅'; return function () { console.log(food); }; } var look = eat(); look(); // 鸡翅 look(); // 鸡翅\",\"在这个例子中，eat 函数返回一个函数，并在这个内部函数中访问 food 这个局部变量。按理说当 eat 调用完毕 food 就应该被销毁掉，但是我们向外部返回了 eat 内部的匿名函数，而这个匿名函数又引用了 food，所以闭包依然存在，垃圾回收器也不会对其进行回收，这也是为什么在外面调用这个匿名函数时，仍然能够打印出 food 变量的值。\"]},\"1024\":{\"h\":\"2. 作用\",\"t\":[\"通过闭包可以让外部环境访问到函数内部的局部变量。\",\"通过闭包可以让局部变量持续保存下来，不随着它的上下文环境一起销毁。\"]},\"1025\":{\"h\":\"3. 一个简单的闭包程序\",\"t\":[\"// 1. 将函数作为另一个函数的返回值 function fn1() { var a = 2; function fn2() { a++; console.log(a); } return fn2; } var f = fn1(); f(); //3 f(); //4 //闭包死亡(包含闭包的函数对象成为垃圾对象) //f = null // 2. 将函数作为实参传递给另一个函数调用 function showDelay(msg, time) { setTimeout(function () { alert(msg); }, time); } showDelay('atguigu', 2000);\",\"闭包应用:\",\"模块化: 封装一些数据以及操作数据的函数, 只向外暴露一个包含 n 个方法的对象或函数(类) \",\"return {}\",\"window.module={} //匿名函数自定义\",\"循环遍历加监听\",\"JS 框架(jQuery)大量使用了闭包\",\"缺点:\",\"函数执行完后, 函数内的局部变量没有释放,占用内存的时间可能会过长\",\"可能导致内存泄露\",\"解决: \",\"及时释放 : f = null; //让内部函数对象成为垃圾对象\",\"面试题\",\"//代码片段一 var name = 'The Window'; var object = { name: 'My Object', getNameFunc: function () { return function () { return this.name; }; }, }; alert(object.getNameFunc()()); //? the window //代码片段二 var name2 = 'The Window'; var object2 = { name2: 'My Object', getNameFunc: function () { var that = this; return function () { return that.name2; }; }, }; alert(object2.getNameFunc()()); //? my object\"]},\"1026\":{\"h\":\"五、内存溢出与内存泄露\"},\"1027\":{\"h\":\"1. 什么是内存泄露\",\"t\":[\"程序的运行需要内存。只要程序提出要求，操作系统或者运行时（runtime）就必须供给内存。\",\"对于持续运行的服务进程（daemon），必须及时释放不再用到的内存。否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃。\",\"也就是说，不再用到的内存，如果没有及时释放，就叫做内存泄漏（memory leak）。\"]},\"1028\":{\"h\":\"2. JavaScript 中的垃圾回收\",\"t\":[\"浏览器的 Javascript 具有自动垃圾回收机制（GC：Garbage Collecation），也就是说，执行环境会负责管理代码执行过程中使用的内存。其原理是：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。\",\"但是这个过程不是实时的，因为其开销比较大并且 GC 时停止响应其他操作，所以垃圾回收器会按照固定的时间间隔周期性的执行。\",\"不再使用的变量也就是生命周期结束的变量，当然只可能是局部变量，全局变量的生命周期直至浏览器卸载页面才会结束。局部变量只在函数的执行过程中存在，而在这个过程中会为局部变量在栈或堆上分配相应的空间，以存储它们的值，然后在函数中使用这些变量，直至函数结束，而闭包中由于内部函数的原因，外部函数并不能算是结束。\",\"下面是一段示例代码：\",\"function fn1() { var obj = { name: 'zhangsan', age: 10 }; } function fn2() { var obj = { name: 'zhangsan', age: 10 }; return obj; } var a = fn1(); var b = fn2();\",\"在上面的代码中，我们首先声明了两个函数，分别叫做 fn1 和 fn2。\",\"当 fn1 被调用时，进入 fn1 的环境，会开辟一块内存存放对象 {name: 'zhangsan', age: 10}。而当调用结束后，出了 fn1 的环境，那么该块内存会被 JavaScript 引擎中的垃圾回收器自动释放；\",\"在 fn2 被调用的过程中，返回的对象被全局变量 b 所指向，所以该块内存并不会被释放。\",\"这里问题就出现了：到底哪个变量是没有用的？\",\"所以垃圾收集器必须跟踪到底哪个变量没用，对于不再有用的变量打上标记，以备将来收回其内存。\",\"用于标记的无用变量的策略可能因实现而有所区别，通常情况下有两种实现方式：标记清除和引用计数。\",\"引用计数不太常用，标记清除较为常用。\"]},\"1029\":{\"h\":\"3. 标记清除\",\"t\":[\"JavaScript 中最常用的垃圾回收方式就是标记清除。\",\"当变量进入环境时，例如，在函数中声明一个变量，就将这个变量标记为“进入环境”。\",\"从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。\",\"而当变量离开环境时，则将其标记为“离开环境”。\",\"function test() { var a = 10; // 被标记 ，进入环境 var b = 20; // 被标记 ，进入环境 } test(); // 执行完毕 之后 a、b 又被标离开环境，被回收。\",\"垃圾回收器在运行的时候会给存储在内存中的所有变量都加上标记（当然，可以使用任何标记方式）。\",\"然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记（闭包）。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。\",\"最后，垃圾回收器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。\",\"到目前为止，IE9+、Firefox、Opera、Chrome、Safari 的 JS 实现使用的都是标记清除的垃圾回收策略或类似的策略，只不过垃圾收集的时间间隔互不相同。\"]},\"1030\":{\"h\":\"4. 引用计数\",\"t\":[\"引用计数的含义是跟踪记录每个值被引用的次数。\",\"当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是 1。如果同一个值又被赋给另一个变量，则该值的引用次数加 1。\",\"相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减 1。当这个值的引用次数变成 0 时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。\",\"这样，当垃圾回收器下次再运行时，它就会释放那些引用次数为 0 的值所占用的内存。\",\"function test() { var a = {}; // a 指向对象的引用次数为 1 var b = a; // a 指向对象的引用次数加 1，为 2 var c = a; // a 指向对象的引用次数再加 1，为 3 var b = {}; // a 指向对象的引用次数减 1，为 2 }\",\"Netscape Navigator3 是最早使用引用计数策略的浏览器，但很快它就遇到一个严重的问题：循环引用。\",\"循环引用指的是对象 A 中包含一个指向对象 B 的指针，而对象 B 中也包含一个指向对象 A 的引用。\",\"function fn() { var a = {}; var b = {}; a.pro = b; b.pro = a; } fn();\",\"以上代码 a 和 b 的引用次数都是 2，fn 执行完毕后，两个对象都已经离开环境，在标记清除方式下是没有问题的，但是在引用计数策略下，因为 a 和 b 的引用次数不为 0，所以不会被垃圾回收器回收内存，如果 fn 函数被大量调用，就会造成内存泄露。在 IE7 与 IE8 上，内存直线上升。\"]},\"1031\":{\"h\":\"5. 真题解答\",\"t\":[\"请介绍一下 JavaScript 中的垃圾回收站机制\",\"参考答案：\",\"JavaScript 具有自动垃圾回收机制。垃圾收集器会按照固定的时间间隔周期性的执行。\",\"JavaScript 常见的垃圾回收方式：标记清除、引用计数方式。\",\"1、标记清除方式：\",\"工作原理：当变量进入环境时，将这个变量标记为“进入环境”。当变量离开环境时，则将其标记为“离开环境”。标记“离开环境”的就回收内存。\",\"工作流程：\",\"垃圾回收器，在运行的时候会给存储在内存中的所有变量都加上标记；\",\"去掉环境中的变量以及被环境中的变量引用的变量的标记；\",\"被加上标记的会被视为准备删除的变量；\",\"垃圾回收器完成内存清理工作，销毁那些带标记的值并回收他们所占用的内存空间。\",\"2、引用计数方式：\",\"工作原理：跟踪记录每个值被引用的次数。\",\"工作流程：\",\"声明了一个变量并将一个引用类型的值赋值给这个变量，这个引用类型值的引用次数就是 1；\",\"同一个值又被赋值给另一个变量，这个引用类型值的引用次数加 1；\",\"当包含这个引用类型值的变量又被赋值成另一个值了，那么这个引用类型值的引用次数减 1；\",\"当引用次数变成 0 时，说明没办法访问这个值了；\",\"当垃圾收集器下一次运行时，它就会释放引用次数是 0 的值所占的内存。\"]},\"1032\":{\"h\":\"六、高阶函数\"},\"1033\":{\"h\":\"1. 概念\",\"t\":[\"高阶函数（higher-order-function）并不是 JavaScript 语言所特有的东西，它适用于整个计算机领域，甚至数学领域。\",\"它的定义非常简单。\",\"根据维基百科的定义，无论是在数学领域，还是在计算机领域，凡是满足以下任一条件的函数，均是高阶函数：\",\"接受一个或多个函数作为输入\",\"输出一个函数\",\"在大部分计算机语言中，一个函数的输入往往被看作是函数的参数，而一个函数的输出，往往被看作是函数的返回值，因此，上面作为高阶函数条件的两个点，放到计算机领域，可以说成是：\",\"（1）接受一个或多个函数作为参数\",\"（2）返回一个函数\",\"所以我们之前一直使用的数组中的很多方法，其实都是高阶函数，比如forEach,filter，map等等。\"]},\"1034\":{\"h\":\"2. 函数防抖与函数节流\",\"t\":[\"JavaScript 中的函数大多数情况下都是由用户主动调用触发的，除非是函数本身的实现不合理，否则一般不会遇到跟性能相关的问题。\",\"但是在一些少数情况下，函数的触发不是由用户直接控制的。在这些场景下，函数有可能被非常频繁地调用，而造成大的性能问题。解决性能问题的处理办法就有函数防抖和函数节流，其核心就是限制某一个方法的频繁触发。\",\"下面是函数被频繁调用的常见的几个场景：\",\"mousemove 事件。如果要实现一个拖拽功能，需要一路监听 mousemove 事件，在回调中获取元素当前位置，然后重置 DOM 的位置来进行样式改变。如果不加以控制，每移动一定像素而触发的回调数量非常惊人，回调中又伴随着 DOM 操作，继而引发浏览器的重排与重绘，性能差的浏览器可能就会直接假死。\",\"window.onresize 事件。为 window 对象绑定了 resize 事件，当浏览器窗口大小被拖动而改变的时候，这个事件触发的频率非常之高。如果在 window.onresize 事件函数里有一些跟 DOM 节点相关的操作，而跟 DOM 节点相关的操作往往是非常消耗性能的，这时候浏览器可能就会吃不消而造成卡顿现象。\",\"射击游戏的 mousedown/keydown 事件（单位时间只能发射一颗子弹）\",\"搜索联想（keyup,keydown,input 事件）\",\"监听滚动事件判断是否到页面底部自动加载更多（scroll 事件）\"]},\"1035\":{\"h\":\"函数防抖（debounce）\",\"t\":[\"函数防抖，就是指触发事件后在规定时间内函数只能执行一次，如果在规定时间内又触发了事件，则会 重新计算函数执行时间。\",\"简单的说，当一个动作连续触发，则只执行最后一次。 如：坐公交，司机需要等最后一个人进入才能关门。每次进入一个人，司机就会多等待几秒再关门。\",\"应用场景\",\"搜索框搜索输入。只需用户最后一次输入完，再发送请求\",\"手机号、邮箱验证输入检测\",\"窗口大小 Resize。只需窗口调整完成后，计算窗口大小。防止重复渲染。\",\"const debounce = (fn, time) => { let timeout = null; return function () { clearTimeout(timeout); timeout = setTimeout(() => { fn.apply(this, arguments); }, time); }; };\"]},\"1036\":{\"h\":\"函数节流（throttle）\",\"t\":[\"限制一个函数在规定时间内只能执行一次。 如，乘坐地铁，过闸机时，每个人进入后 3 秒后门关闭，等待下一个人进入。\",\"简单的说，当一个动作连续触发，间隔一段时间执行一次。\",\"应用场景\",\"滚动加载，加载更多或滚到底部监听\",\"谷歌搜索框，搜索联想功能\",\"高频点击提交，表单重复提交\",\"const throttle = (fn, time) => { let flag = true; return function () { if (!flag) return; flag = false; setTimeout(() => { fn.apply(this, arguments); flag = true; }, time); }; };\"]},\"1037\":{\"h\":\"区别\",\"t\":[\"防抖：连续触发事件回调都会重新开始计算 delay\",\"节流：触发事件回调后开始 delay 然后开始下一次触发调用\",\"16588246930073\"]},\"1038\":{\"h\":\"3.分时函数\",\"t\":[\"某些函数是用户主动调用，但因为一些客观的原因，这些函数会严重地影响页面性能。这个这个问题的解决方案之一就是使用数组分块技术（又被称之为分时函数），数组分块是一种使用定时器分割循环的技术，为要处理的项目创建一个队列，然后使用定时器取出下一个要处理的项目进行处理，接着再设置另一个定时器。\",\"即将一个大任务分成若干个小任务，然后按照一定的时间间隔依次执行每个小任务，而不是一次性全部执行。分时函数常常在处理非常大的数据集合（比如渲染海量节点）时非常有用，可以提高浏览器的响应速度，并防止出现卡顿、崩溃等问题。\",\"function timeChunk(arr, fn, count, interval) { // 该分时函数接收 4 个参数：数据、创建节点逻辑的函数、每一批创建的节点数量、每个执行任务之间的时间间隔 // 该分时函数将返回一个计时函数，根据数据是否已经创建完节点来决定是否停止 let obj, t; let len = arr.length; const start = function () { // 创建规定数量的节点 for (let i = 0; i < Math.min(count || 1, arr.length); i++) { let obj = arr.shift(); fn(obj); } }; return function () { t = setInterval(function () { if (arr.length === 0) { return clearInterval(t); } start(); }, interval || 200); }; }\"]},\"1039\":{\"h\":\"4. 柯里化\",\"t\":[\"柯里化（currying）又称部分求值。一个柯里化的函数首先会接受一些参数，接受了这些参数之后，该函数并不会立即求值，而是继续返回另外一个函数，刚才传入的参数在函数形成的闭包中被保存起来。待到函数被真正需要求值的时候，之前传入的所有参数都会被一次性用于求值。\",\"比如，有一个函数f(x, y, z) = (x + y) * z，若固定了 x = 2，你将通过柯里化函数得到一个新的函数，这个新的函数是g(y, z) = (2 + y) * z\",\"/** * 柯里化函数 * @param {function} func 最终要执行的函数 * @param {*} args 要固定的参数 */ function curry(func, ...args) { // 返回一个接收剩余参数的函数 return function (...inArgs) { // 将固定的参数和剩余参数拼接 const allArgs = args.concat(inArgs); if (allArgs.length >= func.length) { // 若拼接后的参数集 大于等于 原本函数的参数数量，则执行原本的函数 return func(...allArgs); } else { // 否则，继续柯里化，固定目前的参数 return curry(func, ...allArgs); } }; }\",\"柯里化函数的使用：\",\"function f(x, y, z) { return (x + y) * z; } // 通过柯里化函数，固定函数 f 的第一个参数 x=2，得到一个新函数 g(y, z) const g = curry(f, 2); console.log(g(3, 5)); // (2+3)*5 输出：25 console.log(g(6, 4)); // (2+6)*4 输出：32 // 通过柯里化函数，固定函数f的前两个参数 x=2 y=3，得到一个新函数 k(z) const k = curry(f, 2, 3); console.log(k(5)); // (2+3)*5 输出：25 console.log(k(4)); // (2+3)*4 输出：20\"]},\"1040\":{\"h\":\"5. 函数管道\",\"t\":[\"有的时候，我们可以面临这样一种场景：\",\"需要连续调用多个函数才能得到结果\",\"前一个函数的返回结果，将作为参数传递给下一个函数\",\"遇到这种情况，我们就可以使用函数管道，将要依次调用的函数组装起来，形成一个完整的调用通道。\",\"img\",\"/** * 函数管道 * @param {Array} functions 要连接的函数数组 */ function pipe(...functions) { return function (data) { let midData = data; //midData用于保存每次调用的结果 for (const func of functions) { midData = func(midData); } return midData; }; }\",\"reduce 方法实现的版本\",\"/** * 函数管道 * @param {Array} functions 要连接的函数数组 */ function pipe(...functions) { return function (data) { return functions.reduce((result, func) => { return func(result); }, data); }; }\",\"由于函数管道强烈依赖一个前提条件，即管道中的函数必须只能有一个参数，因此，如果遇到了管道中需要用到多参函数的场景，我们可以利用上一节讲解的柯里化来固定已知参数。\",\"//连接函数管道 const camel = pipe(firstUpper, otherLower, removeEmpty, curry(cutString, 15)); console.log(camel(' my firST nAme ')); //输出：myFirstName console.log(camel(' user nick name ')); //输出：userNickName\"]},\"1041\":{\"c\":[\"前端\"]},\"1042\":{\"c\":[\"JavaScript\",\"原型链\",\"闭包\",\"执行上下文\"]},\"1043\":{\"h\":\"对象进阶理解\"},\"1044\":{\"h\":\"一、创建对象\"},\"1045\":{\"h\":\"1. Object 构造函数模式\",\"t\":[\"var obj = {}; obj.name = 'Tom'; obj.setName = function (name) { this.name = name; };\",\"适用于起始创建时对象内部数据不确定，语句较多\"]},\"1046\":{\"h\":\"2. 对象字面量模式\",\"t\":[\"var obj = { name: 'Tom', setName: function (name) { this.name = name; }, };\",\"适用于起始创建时对象内部数据确定，但是创建多个对象时重复代码较多\"]},\"1047\":{\"h\":\"3. 工厂函数模式(不常用)\",\"t\":[\"function createPerson(name, age) { //返回一个对象的函数===>工厂函数 var obj = { name: name, age: age, setName: function (name) { this.name = name; }, }; return obj; } // 创建2个人 var p1 = createPerson('Tom', 12); function createStudent(name, price) { var obj = { name: name, price: price, }; return obj; } var s = createStudent('张三', 12000);\",\"适用场景: 需要创建多个对象\",\"问题: 对象没有一个具体的类型, 都是 Object 类型\"]},\"1048\":{\"h\":\"4. 自定义构造函数模式\",\"t\":[\"//定义类型 function Person(name, age) { this.name = name; this.age = age; this.setName = function (name) { this.name = name; }; } var p1 = new Person('tom', 12); var p2 = new Person('bob', 13);\",\"适用场景: 需要创建多个类型确定的对象\",\"问题: 每个对象都有相同的数据，浪费内存(公共的方法)\"]},\"1049\":{\"h\":\"5. 构造函数 + 原型的组合模式\",\"t\":[\"function Person(name, age) { this.name = name; this.age = age; } Person.prototype.setName = function (name) { this.name = name; }; var p1 = new Person('tom', 12); var p2 = new Person('bob', 13);\"]},\"1050\":{\"h\":\"二、对象与原型的相关方法\"},\"1051\":{\"h\":\"1. Object 的 API\"},\"1052\":{\"h\":\"Object.is\",\"t\":[\"用于判断两个数据是否相等，基本上跟严格相等（===）是一致的，除了以下两点：\",\"NaN 和 NaN 相等\",\"+0 和-0 不相等\"]},\"1053\":{\"h\":\"Object.assign\",\"t\":[\"用于混合对象\",\"let a = { x: 1, obj: { aa: 11, bb: 22, }, }; let b = { y: 1, }; let oo = Object.assign({}, a, b); console.log(oo);\",\"注意这里第一个参数为什么要用空对象，因为Object.assign会将源对象的所有属性复制到目标对象上,并且返回目标对象，如果，你像这样做的话：\",\"let oo = Object.assign(a, b);\",\"就会改变 a 对象的内容，并返回了 a 对象\",\"其实在 ES7 中，我们有更棒的写法:\",\"let oo = { ...a, ...b, };\"]},\"1054\":{\"h\":\"Object.getOwnPropertyNames 的枚举顺序\",\"t\":[\"Object.getOwnPropertyNames方法之前就存在，只不过，官方没有明确要求，对属性的顺序，如何排序，完全由浏览器厂商决定。\",\"ES6 规定了该方法返回的数组的排序方式如下：\",\"先排数字，并按照升序排序\",\"再排其他，按照书写顺序排序\",\"const obj = { d: 1, b: 2, a: 3, 11: 6, 5: 2, 4: 1, }; const props = Object.getOwnPropertyNames(obj); console.log(props);\",\"注意：有一些面试题，可以灵活的使用该函数\"]},\"1055\":{\"h\":\"Object.setPrototypeOf\",\"t\":[\"该函数用于设置某个对象的隐式原型\",\"比如： Object.setPrototypeOf(obj1, obj2)，相当于： obj1.__proto__ = obj2\",\"let o1 = { name: '张三', age: 18, }; let o2 = { sex: '男', }; Object.setPrototypeOf(o2, o1); for (let k in o2) { console.log(k); }\"]},\"1056\":{\"h\":\"Object.getPrototypeOf()\",\"t\":[\"查找一个对象的原型对象\",\"let o1 = { name: '张三', age: 18, }; let o2 = { sex: '男', }; Object.setPrototypeOf(o2, o1); console.log(Object.getPrototypeOf(o2));\"]},\"1057\":{\"h\":\"Object.fromEntries\",\"t\":[\"将键值对类型转换为 Object\",\"let authors = [ [0, '天蚕土豆'], [1, '唐三'], [2, '辰东'], [3, '火星引力'], [4, '月关'], ]; let obj = Object.fromEntries(authors); console.log(obj); let map = new Map(); map.set('name', '斗破苍穹'); map.set('author', '天蚕土豆'); map.set('price', 100); let obj2 = Object.fromEntries(map); console.log(obj2);\"]},\"1058\":{\"h\":\"Object.entries\",\"t\":[\"返回一个给定对象自身可枚举属性的键值对数组\",\"let obj = { name: '张三', age: 18, score: 90, }; let arr = Object.entries(obj); console.log(arr);\",\"// 将下面对象的值翻倍 let obj = { x: 1, y: 2, z: 3, }; let obj2 = Object.fromEntries(Object.entries(obj).map(([k, v]) => [k, v * 2])); console.log(obj2);\"]},\"1059\":{\"h\":\"Object.defineProperty\",\"t\":[\"给对象添加或修改一个属性\",\"let obj = { name: '张三', age: 18, score: 90, }; Object.defineProperty(obj, 'sex', { value: '男', // 值 writable: true, // writable 是否可以修改该属性的值，默认 false configurable: true, // configurable 是否可以修改该属性的描述，，默认 false enumerable: true, // 该属性是否出现在对象的枚举属性中，默认 false }); obj.sex = '女'; console.log(obj.sex); Object.defineProperty(obj, 'tel', { get(val) { // 获取该属性的值时调用 get 函数 console.log('get--->' + val); }, set(val) { // 设置该属性的值时调用 set 函数 console.log('set--->' + val); }, }); obj.tel = '12232434';\"]},\"1060\":{\"h\":\"Object.defineProperties\",\"t\":[\"给对象添加或修改多个属性\",\"let obj = { name: '张三', age: 18, score: 90, }; Object.defineProperties(obj, { tel: { value: '13800000000', enumerable: true, }, sex: { value: '男', }, }); for (let k in obj) { console.log(k + '---' + obj[k]); } console.log(obj.sex);\"]},\"1061\":{\"h\":\"keys、values、entries\",\"t\":[\"var obj = { name: 'xxx', age: 24 }; Object.keys(obj); // 返回一个数组 ['name','age'] Object.values(obj); // 返回一个数组 ['xxx',24] Object.entries(obj); // 返回一个二维数组 [['name','age'],['xxx',24]]\"]},\"1062\":{\"h\":\"2. 原型相关属性和方法\"},\"1063\":{\"h\":\"prototype 和\",\"t\":[\"prototype 是构造函数上面的一个属性，指向一个对象，这个对象是该构造函数实例化出来的对象的原型对象。实例化出来的对象可以通过__proto__来找到自己的原型对象。如下：\",\"// let arr = [1, 2, 3, 4]; let arr = new Array(1, 2, 3, 4); //和上面其实是一个意思 console.log(arr); console.log(arr.__proto__); //Object(0) [] console.log(Array.prototype); //Object(0) [] console.log(arr.__proto__ === Array.prototype); //true console.log(arr.__proto__.constructor === Array); //true\",\"这是使用 JS 自带的 Array 构造函数，其实使用我们自己的构造函数是一样的道理\",\"function add() {} let a = new add(); let b = new add(); console.log(a.__proto__ === add.prototype); console.log(b.__proto__ === add.prototype); console.log(a.__proto__ === b.__proto__);\",\"隐式原型的指向\"]},\"1064\":{\"h\":\"constructor\",\"t\":[\"通过 constructor 属性，我们可以查看到一个对象的构造函数是什么，constructor 属性其实是原型对象的属性,注意观察上面的图\",\"function add() { } let a = new add(); let b = new add(); console.log(add.prototype.constructor);//[Function: add] console.log(a.__proto__.constructor);//[Function: add] console.log(a.constructor);//[Function: add] console.log(a.constructor === add);//true\"]},\"1065\":{\"h\":\"instanceof 操作符\",\"t\":[\"判断一个对象是否是一个构造函数的实例。如果是返回 true，否则就返回 false\",\"const arr = [1, 2, 3, 4, 5]; console.log(arr instanceof Array); // true console.log(arr instanceof Number); // false function add() {} let a = new add(); let b = new add(); console.log(a instanceof add); //true console.log(a instanceof Object); //true\"]},\"1066\":{\"h\":\"\",\"t\":[\"该方法将会返回一个布尔值，主要用于检测一个对象是否是一个实例对象的原型对象\",\"其实就是某个对象饿隐式原型是否指向某个对象\",\"let obj = { name: '张三', age: 18, }; let a = Object.create(obj); console.log(obj.isPrototypeOf(a)); //true const arr = [1, 2, 3, 4]; console.log(Array.prototype.isPrototypeOf(arr)); // true console.log(arr.__proto__.isPrototypeOf(arr)); // true\"]},\"1067\":{\"h\":\"hasOwnProperty()\",\"t\":[\"判断一个属性是定义在对象本身上面的，还是从原型对象上面继承而来的。如果是本身的，则返回 true，如果是继承而来的或者根本没有这个属性，则返回 false\",\"let obj = { name: '张三', age: 18, }; let a = Object.create(obj, { sex: { value: '男', enumerable: true, writable: true, }, }); console.log(a.hasOwnProperty('name')); console.log(a.hasOwnProperty('name')); console.log(a.hasOwnProperty('sex')); console.log(a.hasOwnProperty('aaa'));\"]},\"1068\":{\"h\":\"三、继承模式\"},\"1069\":{\"h\":\"1. 原型链继承\",\"t\":[\"为了得到 父类型的方法\",\"关键：让子类型的原型指向父类型的实例\",\"function Parent() {} Parent.prototype.test = function () {}; function Child() {} Child.prototype = new Parent(); // 子类型的原型指向父类型的实例 Child.prototype.constructor = Child; //让子类型的原型的construcor指向子类型 var child = new Child(); //有test()\",\"image-20220906154616921\"]},\"1070\":{\"h\":\"2. 借用构造函数(假)\",\"t\":[\"为了得到 父类型的属性\",\"关键：在子类型构造函数中使用call()调用父类型构造函数\",\"function Parent(name) { this.name = name; } function Child(name, price) { Parent.call(this, name); //借用构造函数 this.Parent(xxx) this.price = price; } var child = new Child('a', 20);\"]},\"1071\":{\"h\":\"3. 组合继承\",\"t\":[\"这种继承也被称之为 伪经典继承 ，该继承方式综合了原型链和借用构造函数的方式，将两者的优点集中了起来。\",\"// 父类 function Parent(name) { this.name = name; } Parent.prototype.setName = function () { this.name = name; }; // 子类 function Child(name, price) { Parent.call(this, name); // 盗用父类的构造函数 this.price = price; } Child.prototype = new Parent(); //改变子类构造函数的原型对象 Child.prototype.constructor = Child; // 修正 // 测试 var child = new Child('a', 20); child.setName('b');\",\"组合继承最大的问题就是 效率问题 。最主要就是父类的构造函数始终会被调用两次：一次是在指定子类原型时调用，另一次是在子类构造函数中调用。\"]},\"1072\":{\"h\":\"4. 圣杯模式\",\"t\":[\"圣杯模式的继承解决了这一问题，其基本思路就是不通过调用父类构造函数来给子类原型赋值，而是取得父类原型的一个副本，然后将返回的新对象赋值给子类原型。\",\"function inherit(Child, Parent) { function F() {} F.prototype = Parent.prototype; // 拿到父类原型的副本 Child.prototype = new F(); //改变子类构造函数的原型对象 Child.prototype.constructor = Child; // 修正 } // 父类 function Parent(name) { this.name = name; } Parent.prototype.setName = function () { this.name = name; }; // 子类 function Child(name, price) { Parent.call(this, name); // 盗用父类的构造函数 this.price = price; } inherit(Child, Parent); // 使用圣杯模式实现继承 // 测试 var child = new Child('a', 20); child.setName('b');\"]},\"1073\":{\"h\":\"5. new 操作符都做了哪些事\",\"t\":[\"new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。\",\"创建一个空的简单 js 对象{}\",\"给对象设置__proto__, 值为构造函数对象的prototype属性值 this.__proto__ = Fn.prototype，即设置该对象的原型对象\",\"将新创建的对象作为 this 的上下文，执行构造函数体(给对象添加属性/方法)\"]},\"1074\":{\"c\":[\"前端\"]},\"1075\":{\"c\":[\"JavaScript\",\"继承模式\"]},\"1076\":{\"h\":\"BOM\"},\"1077\":{\"h\":\"一、浏览器引入 JavaScript\",\"t\":[\"要想利用 JavaScript 和网页实现互动，那么首先第一步就是应该了解如何向网页中引入 JavaScript 代码。实际上，向网页引入 JavaScript 代码的方式也是多种多样，下面我们一起来看一下。\"]},\"1078\":{\"h\":\"1. 直接在 HTML 文件中引入\",\"t\":[\"首先第 1 种方式就是直接在 HTML 文档里面引入 JavaScript 代码。在维护一些老项目的时候，经常可以看到 JavaScript 代码是写在<title>标签下面的，并且通过一对<script>标签来引入代码。示例如下：\",\"<head> <meta charset=\\\"UTF-8\\\" /> <title>Document</title> <script> // JavaScript 代码 </script> </head>\",\"但是，如果是直接在 HTML 文件中引入 JavaScript 代码，我们一般不写在<title>标签下面，更加优化的一种方式是将<script>标签写在<body>标签的最下面，这样可以更快的加载出页面效果。如下：\",\"<body> <!-- HTML代码 --> <script> // JavaScript 代码 </script> </body>\"]},\"1079\":{\"h\":\"2. 调用外部 JavaScript 文件\",\"t\":[\"第 2 种方式是使用外部链接的方式来调用外部的 JavaScript 文件。这种方式适用于当我们的 JavaScript 代码是单独的一个 js 文件时，就可以采用这种方式来引入 JavaScript 代码。示例如下：\",\"<body> <!-- HTML代码 --> <script src=\\\"外部 JavaScript 文件\\\"></script> </body>\"]},\"1080\":{\"h\":\"3. 使用 a 标记的 href 属性\",\"t\":[\"我们还可以在<a>标签的href属性里面书写 JavaScript 代码，这样会改变<a>标签默认的超链接特性，而变为执行这段 JavaScript 代码，示例如下：\",\"<body> <!-- HTML代码 --> <a href=\\\"javascript:alert('Hello World')\\\">点击</a> </body>\"]},\"1081\":{\"h\":\"4. 事件里面直接书写 JavaScript 代码\",\"t\":[\"在后面学习的事件中，我们也可以直接将 JavaScript 代码写在事件里面，例如我们书写一个点击事件，当点击 button 按钮时，会执行相应的 JavaScript 代码，示例如下：\",\"<body> <!-- HTML代码 --> <button onclick=\\\"javascript:alert('Hello World!')\\\">点击</button> </body>\"]},\"1082\":{\"h\":\"二、BOM 基本介绍\"},\"1083\":{\"h\":\"1. 什么是 BOM\",\"t\":[\"所谓 BOM，英语全称为 Browser Object Model，翻译成中文为浏览器对象模型。我们的浏览器，可以被看做是由各种各样的对象所组成的，就像我们这个可爱的世界一样。\",\"一般来讲，在 BOM 中大致存在如下几个对象：\",\"window：表示窗口对象 navigator：包含浏览器相关信息 location：包含当前页面的位置信息 history：包含用户访问页面的历史信息 screen：包含客户端显示能力信息 document：表示整个页面\",\"整个 BOM 的核心对象就是是 window 对象，它代表的是浏览器的一个实例。window 对象同时也是最顶层的对象。\"]},\"1084\":{\"h\":\"2. BOM 与 DOM 的关系\",\"t\":[\"在下一章，我们还会介绍一个东西，被称之为 DOM。\",\"很多初学者刚开始都搞不清楚 BOM 和 DOM 之间的关系。事实上很简单，DOM 可以算是 BOM 的一个分支。因为 BOM 里面存在一个叫做 Document 的对象，但是这个对象的属性和方法太多了，所以 W3C 将其单独取了出来，做成了一套规范，这个就是 DOM，英语全称 document object model，翻译成中文就是文档对象模型。\",\"W3C：万维网联盟。创建于 1994 年，是 Web 技术领域最具权威和影响力的国际中立性技术标准机构。到目前为止，W3C 已发布了 200 多项影响深远的 Web 技术标准及实施指南。\",\"接下来，我们可以用一张层级关系图来表示 BOM 和 DOM 之间的关系，如下：\",\"-w452\",\"需要说明一下的是 BOM 目前还没有相应的规范。浏览器提供商会按照各自的想法去随意扩展它，于是浏览器之间共有的对象就成了事实上的标准。这些对象在浏览器中得以存在，很大程度上是由于它们提供了与浏览器的互操作性。目前，W3C 已经将 BOM 的主要方面纳入了 HTML5 的规范中。\"]},\"1085\":{\"h\":\"三、window 对象\"},\"1086\":{\"h\":\"1. window 对象基本介绍\",\"t\":[\"我们先来看一下 window 对象。浏览器每打开一个窗口，就包含了一个 window 对象。window 对象是整个 BOM 的核心对象，它代表着一个浏览器窗口的实例。\",\"window 对象扮演着在 ECMAScript 中的 global 对象的角色，因此所有在全局作用域中声明的变量以及函数都会成为该对象的属性和方法。也就是说全局变量是 window 对象的属性，全局函数是 window 对象的方法。我们来看下面的示例：\",\"<body> <script> var a = 1; function test() { alert('this is a test'); } alert(a); // 1 alert(window.a); // 1 test(); // this is a test window.test(); // this is a test </script> </body>\",\"可以看到，这里我们通过访问window.a和window.test()也可以打印出 a 变量的值和调用test()函数。\",\"1. 全局属性和 window 属性的区别\",\"var 和 window 对象的属性真的就是一模一样么？\",\"其实两者之间还是有一些略微不同的地方。例如不能使用delete操作符来删除 var 声明的变量，但是如果是 window 的属性则可以使用delete操作符来进行删除。\",\"<body> <script> var i = 10; window.j = 20; console.log(window.i); //10 console.log(window.j); //20 delete window.i; //并没有被删除掉 delete window.j; //已经被删除掉了 console.log(window.i); //可以打印出来 console.log(window.j); //被删除了,所以是undefined </script> </body>\",\"2. let 以及 const 所声明的变量\",\"还需要注意的是，使用 ECMAScript 6 新提供的 let 和 const 所声明的变量不会成为 window 对象的属性，证明如下：\",\"<body> <script> var i = 10; let j = 20; const k = 30; alert(window.i); //10 alert(window.j); //undefined alert(window.k); //undefined </script> </body>\"]},\"1087\":{\"h\":\"2. 常见属性\",\"t\":[\"既然是对象，那么肯定就有相应的属性和方法。这一小节，我们先来看一下 window 对象中常见的属性有哪些。\",\"1. 窗口大小\",\"关于窗口大小的属性有两组，innerWidth，innerHeight以及outerWidth，outerHeight 区别在于：inner 那一组表示的是页面视图区的大小，而 outer 那一组表示的是浏览器窗口本身的尺寸。\",\"<body> <script> console.log(`innerHeight:${innerHeight}`); console.log(`innerWidth:${innerWidth}`); console.log(`outerHeight:${outerHeight}`); console.log(`outerWidth:${outerWidth}`); </script> </body>\",\"效果： \",\"注：不同的浏览器，所表示的值略微有差异。\",\"除了innerWidth和innerHeight以外，使用document.documentElement.clientWidth以及document.documentElement.clientHeight也可以获取到页面视图区的大小。\",\"具体示例如下：\",\"<body> <script> console.log('innerHeight:', innerHeight); console.log('innerWidth:', innerWidth); console.log('outerHeight:', outerHeight); console.log('outerWidth:', outerWidth); console.log('document.documentElement.clientWidth:', document.documentElement.clientWidth); console.log('document.documentElement.clientHeight:', document.documentElement.clientHeight); </script> </body>\",\"效果：\",\"-w596\",\"那这两个属性有什么区别呢？具体如下表：\",\"属性\",\"描述\",\"innerWidth\",\"返回窗口的文档显示区的宽度(IE 不支持)\",\"innerHeight\",\"返回窗口的文档显示区的高度(IE 不支持)\",\"document.documentElement.clientWidth\",\"返回窗口的文档显示区的宽度(通用方法)\",\"document.documentElement.clientHeight\",\"返回窗口的文档显示区的宽度(通用方法)\",\"2. 窗口位置\",\"窗口位置的属性也是有两组，分别是screenLeft和screenTop，还有screenX和screenY 这两组属性都是表示窗口相对于屏幕左边和上边的位置，如下：\",\"<body> <script> console.log(`window.screenLeft:${window.screenLeft}`); console.log(`window.screenTop:${window.screenTop}`); console.log('--------'); console.log(`window.screenX:${window.screenX}`); console.log(`window.screenY:${window.screenY}`); </script> </body>\",\"效果：\",\"-w443\",\"区别在于 screenX 和 screenY 属性最早是火狐浏览器里面特有的属性。但是上面的代码是在谷歌浏览器里面运行的，可以看到，现在这两组属性在很多浏览器里面都是通用的了。接下来我将上面两组属性的区别总结成下面的表格，如下：\",\"属性\",\"描述\",\"screenX\",\"返回浏览器相对于屏幕窗口的 x 坐标(IE 不支持)\",\"screenY\",\"返回浏览器相对于屏幕窗口的 y 坐标，即距离浏览器最顶端(IE 不支持)\",\"screenLeft\",\"返回浏览器相对于屏幕窗口的 x 坐标\",\"screenTop\",\"返回浏览器相对于屏幕窗口的 y 坐标(在 IE 中这个坐标包括了工具栏+菜单栏+地址栏的高度)\",\"3. 元素位置\",\"我们可以通过offsetLeft以及offsetTop来得到一个元素相对于父级定位元素的位置，位置的信息是不带单位的。\",\"具体示例如下：\",\"<head> <meta charset=\\\"UTF-8\\\" /> <title>Document</title> <style> #one { width: 200px; height: 200px; background-color: pink; position: absolute; left: 100px; top: 100px; } #two { width: 50px; height: 50px; background-color: skyblue; position: absolute; left: 50px; top: 60px; } </style> </head> <body> <div id=\\\"one\\\"> <div id=\\\"two\\\"></div> </div> <script> console.log(two.offsetLeft); // 50 console.log(two.offsetTop); // 60 </script> </body>\",\"需要注意，offsetTop以及offsetLeft这两个属性获取的一定是离该元素最近的定了位的元素的距离，示例如下：\",\"<head> <meta charset=\\\"UTF-8\\\" /> <title>Document</title> <style> #one { width: 200px; height: 200px; background-color: pink; position: absolute; left: 100px; top: 80px; padding: 50px; } #two { width: 150px; height: 150px; border: 1px solid; } #three { width: 50px; height: 50px; position: absolute; left: 70px; top: 70px; background-color: skyblue; } </style> </head> <body> <div id=\\\"one\\\"> <div id=\\\"two\\\"> <div id=\\\"three\\\"></div> </div> </div> <script> console.log(`offsetTop:${three.offsetTop}`); // offsetTop:70 console.log(`offsetLeft:${three.offsetLeft}`); // offsetLeft:70 </script> </body>\",\"在本例中，虽然 two 是 three 元素的父级元素，但是由于 two 没有定位，所以打印出来的是 three 距离 one 元素的 top 以及 left 值。\",\"4. 元素大小\",\"除了获取到一个元素在页面中的位置，我们还可以通过offsetWidth和offsetHeight来得到一个元素的宽高，示例如下：\",\"<head> <meta charset=\\\"UTF-8\\\" /> <title>Document</title> <style> div { width: 100px; height: 150px; background-color: pink; position: absolute; top: 300px; left: 200px; } </style> </head> <body> <div id=\\\"div\\\"></div> <script> console.log(div.offsetWidth); // 100 console.log(div.offsetHeight); // 150 </script> </body>\",\"5. 滚动位置\",\"通过pageXOffset和pageYOffset属性我们可以获取文档在窗口左上角水平和垂直方向滚动的像素。\",\"<head> <meta charset=\\\"UTF-8\\\" /> <title>Document</title> <style> body { height: 5000px; } </style> </head> <body> <script> window.onscroll = function () { console.log(window.pageYOffset); }; </script> </body>\",\"需要注意的是，pageXOffset和pageYOffset属性相等于scrollX和scrollY属性。这些属性都是只读属性。\",\"注：document.body.onscroll，window.onscroll，document.documentElement.onscroll这几个属性在各浏览器中的兼容性问题，可以参见这篇文档。https://blog.csdn.net/qq_26445509/article/details/51153153\"]},\"1088\":{\"h\":\"3. 常用方法\",\"t\":[\"接下来我们来一起看一下 window 对象中常见的方法有哪些。\",\"1. 系统提示框\",\"alert()：用于显示带有一条指定消息和一个确定按钮的警告框。\",\"注意：alert()方法会终止 JavaScript 代码的执行。\",\"示例如下：\",\"<body> <script> window.alert('Hello'); </script> </body>\",\"运行结果：\",\"-w500\",\"confirm()：用于显示一个带有指定消息和 OK 及取消按钮的对话框。\",\"示例如下：\",\"<body> <script> let i = window.confirm('Are you sure?'); console.log(i, typeof i); // true \\\"boolean\\\" </script> </body>\",\"注意返回的是一个布尔值，true 或者 false\",\"prompt()：该对话框用于提示用户输入某些信息，得到的是一个字符串\",\"示例如下：\",\"<body> <script> let i = window.prompt('Please input something'); console.log(i, typeof i); // 用户输入内容 string </script> </body>\",\"2. 窗口大小调整\",\"关于窗口大小，也有一组方法，resizeTo()和resizeBy()。resizeTo()方法用于将浏览器窗口调整到指定的值，resizeBy()方法则是相对于原来的浏览器窗口来进行调节。\",\"<body> <script> window.resizeTo(100, 100); // 调整到 100 x 100 window.resizeBy(100, 50); // 在原来的基础上增加 100 和 50 变为 200 x 150 </script> </body>\",\"3. 窗口位置移动\",\"关于窗口位置，我们如何来移动呢，在 window 对象里面提供了moveTo()和moveBy()。moveTo()方法是指定移动到哪个位置。moveBy()方法是在原来的位置上进行相对的偏移。\",\"<body> <script> window.moveTo(100, 100); // 移动到100x100的位置 window.moveBy(100, 50); // 在原来的基础上向右移动100,向下移动50 </script> </body>\",\"但是这两组方法在现代浏览器里面基本上都是被禁用的，所以基本效果出不来。\",\"<body> <button id=\\\"btn1\\\">调整到100x100</button> <button id=\\\"btn2\\\">在原来的基础上增加100和50</button> <button id=\\\"btn3\\\">移动到100x100的位置</button> <button id=\\\"btn4\\\">在原来的基础上向右移动100,向下移动50</button> <script> btn1.onclick = function () { window.resizeTo(100, 100); // 调整到 100x100 }; btn2.onclick = function () { window.resizeBy(100, 50); // 在原来的基础上增加 100 和 50 变为 200x150 }; btn3.onclick = function () { window.moveTo(100, 100); // 移动到 100x100 的位置 }; btn4.onclick = function () { window.moveBy(100, 50); // 在原来的基础上向右移动 100,向下移动 50 }; </script> </body>\",\"上面的代码在 Google 浏览器无法看到效果，可以使用 Windows 7 操作系统自带的 Internet Explorer 8 来查看效果。如下：\",\"2018-12-17 14.22.00-w1108\",\"4. 打开和关闭窗口\",\"open()方法：使用window.open()方法，该方法有 4 个参数，如下：\",\"<body> <script> // 参数 1 : 要加载的 URL // 参数 2 : 指定 target 属性或窗口的名称 // 参数 3 : 一个特性字符串,新窗口的大小 // 参数 4 : 新窗口是否取代历史记录中的当前页面 window.open('2.html', '123', 'height=400,width=400,top=10,resizable=yes'); </script> </body>\",\"效果：重新加载页面以后弹出新的窗口（2.html 文件是提前准备好了的）\",\"-w412\",\"需要注意现在的浏览器一般都是会阻止弹窗的。一般需要我们点击允许弹出后，才弹出 2.html 页面\",\"在调用了 window 对象的open()方法以后，他会返回一个对象，可以调用这个对象的close()方法来关闭打开的页面，示例如下：\",\"<body> <button onclick=\\\"test()\\\">关闭新窗口</button> <script> // 参数 1 : 要加载的 URL // 参数 2 : 指定 target 属性或窗口的名称 // 参数 3 : 一个特性字符串,新窗口的大小 // 参数 4 : 新窗口是否取代历史记录中的当前页面 let i = window.open('2.html', '123', 'height=400,width=400,resizable=yes'); let test = function () { i.close(); }; </script> </body>\",\"还有一个opener属性，保存着打开它的原始窗口对象。\",\"<body> <script> // 参数 1 : 要加载的 URL // 参数 2 : 指定 target 属性或窗口的名称 // 参数 3 : 一个特性字符串,新窗口的大小 // 参数 4 : 新窗口是否取代历史记录中的当前页面 let i = window.open('2.html', '123', 'height=400,width=400,resizable=yes'); console.log(i.opener === window); //true </script> </body>\",\"5. 定时函数\",\"间歇调用：涉及setInterval()与clearInterval()这两个方法，可以说这是一组方法，前面是设定指定的时间周期调用某个函数，而后面的方法则是清除前面的设定。\",\"setInterval()语法如下：\",\"setInterval(函数名，间隔时间)\",\"间隔时间以毫秒来计算，1000 毫秒为 1 秒。该方法会返回一个 id 值，该值可以用于停止重复调用。\",\"clearInterval()语法如下：\",\"clearInterval(id)\",\"作用是清除设置的间歇调用。\",\"示例：\",\"<body> <script> let i = 1; let test = function () { console.log(i); if (i === 10) { clearInterval(id); } i++; }; let id = setInterval('test()', 1000); </script> </body>\",\"运行结果：依次打印出 1 - 10\",\"课堂练习：制作一个时钟\",\"<body> <span id=\\\"time\\\"></span> <script> setInterval(function () { time.innerHTML = new Date().toLocaleString(); }, 1000); </script> </body>\",\"运行结果：\",\"2018-12-17 17.37.07-w392\",\"超时调用：涉及到的setTimeout()和clearTimeout()这两个方法也可以算是一组方法，前面是设定指定的时间周期后调用某个函数，而后面的方法是清除前面的设定。\",\"setTimeout()语法如下：\",\"setInterval(函数名，间隔时间)\",\"其中间隔时间也是指代的毫秒数，但是这个毫秒数的含义是执行代码前需要等待的毫秒数。该方法也会返回一个 id，可用于clearTimeout()方法。\",\"clearTimeout()方法的语法如下：\",\"clearInterval(id)\",\"作用是清除设置的超时调用。\",\"示例：\",\"<body> <button id=\\\"btn\\\">5秒后显示</button> <script> let btn = document.getElementById('btn'); btn.onclick = function () { setTimeout(\\\"alert('已经过了5秒了')\\\", 5000); }; </script> </body>\",\"效果：点击按钮后过 5 秒钟弹出提示框\",\"-w898\",\"下面的例子显示了clearTimeout()的用法，其实就是清除前面的设定。\",\"<body> <button id=\\\"btn\\\">5秒后显示</button> <script> let btn = document.getElementById('btn'); btn.onclick = function () { setTimeout(\\\"alert('已经过了 5 秒了')\\\", 5000); clearTimeout(i); }; </script> </body>\"]},\"1089\":{\"h\":\"四、navigator 对象\"},\"1090\":{\"h\":\"1. navigator 对象介绍\",\"t\":[\"navigator 对象包含浏览器和运行浏览器的操作系统的大量信息。例如操作系统版本、浏览器类型和版本等信息。很多时候我们需要在判断网页所处的浏览器和平台，navigator 对象为我们提供了便利。\"]},\"1091\":{\"h\":\"2. navigator 对象属性\",\"t\":[\"navigator 对象所包含的属性大致如下表：\",\"属性\",\"描述\",\"appCodeName\",\"返回浏览器的代码名\",\"appMinorVersion\",\"返回浏览器的次级版本\",\"appName\",\"返回浏览器名称\",\"appVersion\",\"返回浏览器的平台和版本信息\",\"browserLanguage\",\"返回当前浏览器的语言\",\"cookieEnabled\",\"返回指明浏览器中是否启动 cookie 的布尔值\",\"cpuClass\",\"返回浏览器系统的 CPU 等级\",\"onLine\",\"返回指明系统是否处于脱机模式的布尔值\",\"platform\",\"返回运行浏览器的操作系统平台\",\"systemLanguage\",\"返回 OS 使用的默认的语言\",\"userAgent\",\"返回由客户机发送服务器的 user-agent 头部的值\",\"userLanguage\",\"返回 OS 的自然语言设置\",\"示例：\",\"<body> <script> console.log('浏览器名称:', navigator.appName); console.log('浏览器版本:', navigator.appVersion); console.log('浏览器主语言:', navigator.language); console.log('产品名称:', navigator.product); </script> </body>\",\"效果：\",\"-w800\",\"使用 navigator 来进行浏览器的检测。\",\"<body> <script> let str = navigator.userAgent.toLowerCase(); console.log(str); if (str.search('firefox') >= 0) { alert('当前浏览器是火狐。'); } else if (str.search('trident') >= 0) { alert('当前浏览器是IE。'); } else if (str.search('safari') >= 0) { if (str.search('chrome') >= 0) { alert('当前浏览器是谷歌。'); } else if (str.search('opr') >= 0) { alert('当前浏览器是欧朋。'); } else { alert('当前浏览器是苹果。'); } } else { alert('其他浏览器。'); } </script> </body>\",\"当我打开浏览器运行此文件时，会弹出当前所使用的浏览器。\"]},\"1092\":{\"h\":\"五、location 对象\",\"t\":[\"location 对象提供了当前窗口中加载的文档的有关信息。这个对象有点特别，它既是 window 对象的属性，也是 document 对象的属性，也就是说window.location和document.location调用的是同一个对象，我们也可以通过下面的方式来进行证明，如下：\",\"<body> <script> console.log(window.location === document.location); // true </script> </body>\"]},\"1093\":{\"h\":\"1. 常见属性\",\"t\":[\"常见的 location 对象的属性如下表：\",\"属性\",\"描述\",\"hash\",\"返回一个 URL 的锚部分\",\"host\",\"返回一个 URL 的主机名和端口\",\"hostname\",\"返回 URL 的主机名\",\"href\",\"返回完整的 URL\",\"pathname\",\"返回的 URL 路径名\",\"port\",\"返回一个 URL 服务器使用的端口号\",\"protocol\",\"返回一个 URL 协议\",\"search\",\"返回一个 URL 的查询部分\",\"这里主要介绍一下href属性，可以查看或者设置 location 的href属性，如下：\",\"<body> <script> // 查看当前页面的 URL console.log(location.href); // file:///Users/Jie/Desktop/1.html </script> </body>\",\"设置当前页面的 URL：\",\"<body> <button onclick=\\\"test()\\\">点击我们跳转</button> <script> let test = function () { // 设置当前页面的 URL location.href = 'http://www.baidu.com'; }; </script> </body>\",\"效果：点击按钮后跳转到百度\",\"接下来我们来看一下其他的属性：\",\"hash：如果 URL 中包含有'#'，该方法将返回该符号之后的内容。例如：'http://www.sunchis.com/index.html#welcome'的 hash 是'#welcome'。\",\"host：服务器的名字，例如'www.sunchis.com'。\",\"hostname：通常等于'host'，有时会省略前面的'www'。\",\"href：当前页面载入的完整 URL。\",\"pathname：URL 中主机名之后的部分。例如：'http://www.sunchis.com/html/js/jsbasic/2010/0319/88.html'的 pathname 是'/html/js/jsbasic/2010/0319/88.html'。\",\"port：URL 中声明的请求端口。默认情况下，大多数 URL 没有端口信息（默认为 80 端口），所以该属性通常是空白的。例如'http://www.sunchis.com:8080/index.html'这样的 URL 的 port 属性为'8080'。\",\"protocol：URL 中使用的协议，即双斜杠'//'之前的部分。例如'http://www.sunchis.com'中的 protocol 属性等于'http:'，'ftp://www.sunchis.com'的 protocol 属性等于'ftp:'。\",\"search：执行 GET 请求的 URL 中的问号'?'后的部分，又称查询字符串。例如'http://www.sunchis.com/search.html?tern=sunchis'中 search 属性为'?term=sunchis'。\"]},\"1094\":{\"h\":\"2. 常见方法\",\"t\":[\"location 对象中常见的方法如下表：\",\"方法\",\"说明\",\"assign()\",\"载入一个新的文档\",\"reload()\",\"重新载入当前文档\",\"replace()\",\"用新的文档替换当前文档\",\"reload()方法用于重新加载当前文档。示例如下：\",\"<body> <button onclick=\\\"test()\\\">刷下</button> <script> let test = function () { location.reload(); }; </script> </body>\",\"效果：点击按钮后会刷新一下页面\",\"接下来的assign()和replace()这两个方法效果看上去是差不多的。\",\"assign()方法可以加载新的文档。示例如下：\",\"<body> <button onclick=\\\"test()\\\">加载</button> <script> let test = function () { location.assign('http://www.baidu.com'); }; </script> </body>\",\"replace()方法可用一个新文档取代当前文档。示例如下：\",\"<body> <button onclick=\\\"test()\\\">替换</button> <script> let test = function () { location.replace('http://www.baidu.com'); }; </script> </body>\",\"那么这两个方法的区别是什么呢？\",\"assign()方法加载 URL 指定的新的 HTML 文档。就相当于一个链接，跳转到指定的 URL，当前页面会转为新页面内容，可以点击后退返回上一个页面。\",\"replace()方法通过加载 URL 指定的文档来替换当前文档，这个方法是替换当前窗口页面，前后两个页面共用一个窗口，所以是没有后退返回上一页的。\",\"跳转的方式\",\"最后我们来总结一下页面跳转的方式，抛开<a>标签，通过 JavaScript 代码来实现页面的跳转大致有下面几种方式:\",\"location.href; window.location; location; location.assign(); location.replace();\"]},\"1095\":{\"h\":\"六、history 对象\",\"t\":[\"history 对象用来管理当前窗口最近访问过的 URL 记录，这些 URL 记录被保存在 history 列表中， history 对象使得脚本程序可以模拟浏览器工具栏的前进和后退按钮。\"]},\"1096\":{\"h\":\"1. 常见属性\",\"t\":[\"history 对象常见属性如下表：\",\"属性\",\"描述\",\"length\",\"返回浏览器历史列表中 URL 的数量\",\"示例：\",\"<body> <button onclick=\\\"test()\\\">查看历史列表数量</button> <script> let test = function () { console.log('历史列表数:', history.length); }; </script> </body>\"]},\"1097\":{\"h\":\"2. 常见方法\",\"t\":[\"history 对象常见的方法如下表：\",\"方法\",\"描述\",\"back()\",\"加载 history 列表中的前一个 URL\",\"forward()\",\"加载 history 列表中的下一个 URL\",\"go()\",\"加载 history 列表中的某个具体页面\",\"window.history.go()方法可以用来导航到指定的页面，0 代表是当前页面。\",\"<script> window.history.go(1); // 向前一个页面 window.history.go(0); // 重新加载当前页面 window.history.go(-1); // 回退一个页面 </script>\",\"还有window.history.forward()和window.history.back()方法可以分别用来向前或者回退一个页面，就像浏览器的前进和后退按钮一样。\"]},\"1098\":{\"h\":\"七、screen 对象\",\"t\":[\"有时脚本需要获取浏览器或者显示器的一些信息，例如分辨率，有效分辨率，DPI 等。这个时候我们就可以使用 screen 对象。该对象提供了一组属性，供我们来获取到这些有用的信息。\",\"注意：目前没有应用于 screen 对象的公开标准，不过所有浏览器都支持该对象。\",\"screen 对象属性如下表：\",\"属性\",\"说明\",\"height\",\"屏幕的像素高度\",\"width\",\"屏幕的像素宽度\",\"availHeight\",\"屏幕的像素高度减去系统部件高度之后的值(只读)\",\"availWidth\",\"屏幕的像素宽度减去系统部件宽度之后的值(只读)\",\"left\",\"当前屏幕距左边的像素距离[firefox 返回 0，chrome 和 IE 不支持]\",\"top\",\"当前屏幕距上方的像素距离[firefox 返回 0，chrome 和 IE 不支持]\",\"availLeft\",\"未被系统部件占用的最左侧的像素值(只读)[chrome 和 firefox 返回 0，IE 不支持]\",\"availTop\",\"未被系统部件占用的最上方的像素值(只读)[chrome 和 firefox 返回 0，IE 不支持]\",\"bufferDepth\",\"读、写用于呈现屏外位图的位数[IE 返回 0，chrome 和 firefox 不支持]\",\"colorDepth\",\"用于表现颜色的位数(只读)[IE8-返回 32，其他浏览器返回 24]\",\"pixelDepth\",\"屏幕的位深(只读)[IE8-不支持，其他浏览器返回 24]\",\"deviceXDPI\",\"屏幕实际的水平 DPI(只读)[IE 返回 96，chrome 和 firefox 不支持]\",\"deviceYDPI\",\"屏幕实际的垂直 DPI(只读)[IE 返回 96，chrome 和 firefox 不支持]\",\"logicalXDPI\",\"屏幕逻辑的水平 DPI(只读)[IE 返回 96，chrome 和 firefox 不支持]\",\"logicalYDPI\",\"屏幕逻辑的垂直 DPI(只读)[IE 返回 96，chrome 和 firefox 不支持]\",\"updateInterval\",\"读、写以毫秒表示的屏幕刷新时间间隔[IE 返回 0，chrome 和 firefox 不支持]\",\"fontSmoothingEnabled\",\"是否启用了字体平滑(只读)[IE 返回 true，chrome 和 firefox 不支持]\",\"个别属性示例：\",\"<body> <script> console.log('屏幕高度:', screen.height); console.log('屏幕宽度:', screen.width); console.log('调色板比特深度:', screen.colorDepth); </script> </body>\",\"效果：\",\"-w139\"]},\"1099\":{\"h\":\"八、Geolocation\",\"t\":[\"HTML 5 Geolocation API 是 HTML 5 新增的地理位置应用程序接口，它提供了一个可以准确感知浏览器用户当前位置的方法。如果浏览器支持，且设备具有定位功能，就能够使用这组 API 来获取当前位置的信息。\",\"Geolocation API 可以应用于移动设备中的地理定位。允许用户在 Web 应用程序中共享位置信息，使其能够享受位置感知的服务。\",\"Geolocation API 的使用方法也非常简单。请求一个位置信息，如果用户同意，浏览器就会返回相应的位置信息，该位置信息是通过支持 HTML 5 地理定位功能的底层设备来提供的，例如笔记本电脑或者手机。位置信息由纬度，经度坐标和一些其他元数据组成。有了这些位置信息我们就可以构建位置感知类的应用程序。\"]},\"1100\":{\"h\":\"1. Geolocation 的应用场景\",\"t\":[\"设想这样一个场景：有一个 Web 应用程序，它可以向用户提供附近不远处某商店运动鞋的打折优惠信息。使用 HTML 5 Geolocation API，就可以请求其他用户共享他们的位置，如果他们同意，应用程序就可以提供相关信息，告诉用户去附近哪家商店可以挑选到打折的鞋子。\",\"HTML 5 Geolocation 技术另一个应用场景就是构建计算行走（跑步）路程的应用程序。我们可以在开始跑步时通过手机浏览器启动应用程序的记录功能。在用户移动过程中，应用程序会记录已跑过的距离，还可以把跑步过程对应的坐标显示在地图上，甚至可以显示出海拔信息。如果用户正在和其他选手一起参加跑步比赛，那么应用程序还可以显示其对手的位置。\",\"诸如此类的应用，现在已经很多很多了。\"]},\"1101\":{\"h\":\"2. 位置信息的表示方式\",\"t\":[\"位置信息主要由一对纬度和经度坐标组成，例如：\",\"Latitude:39.17222,Longitude:-120.13778\",\"在这里，纬度（距离赤道以北或以南的数值表示）是 39.17222，经度（距离英国格林威治以东或以西的数值表示）是 120.13778，经纬度坐标的表示可以使用以下两种方式：\",\"十进制格式：如 120.13778 DMS 角度格式：如 39 度 20 分\",\"HTML 5 Geolocation API 返回坐标的格式为十进制格式。\",\"除了经纬度的坐标，HTML 5 Geolocation 还提供位置坐标的准确度，并提供其他一些元数据，具体情况取决于浏览器所在的硬件设备。这些元数据包括海拔，海拔准确度，行驶方向和速度等。如果这些元数据不存在则返回 null。\"]},\"1102\":{\"h\":\"3. 使用 Geolocation API\",\"t\":[\"geolocation 是 navigator 对象的一个属性。这个属性有一个方法getCurrentPosition()，该方法会返回一个 position 对象给指定的回调函数。\",\"传给youAreHere()函数的 position 对象有一个 coords 属性，该属性又有 latitude 和 longitude 属性，二者一起给出了设备的坐标。这些坐标随后可以与其他应用程序或者 Web 服务（比如地图服务）结合使用，以获取用户的准确位置。示例如下：\",\"<body> <script> let youAreHere = function (position) { console.log(`纬度为：${position.coords.latitude}`); console.log(`经度为：${position.coords.longitude}`); }; navigator.geolocation.getCurrentPosition(youAreHere); </script> </body>\",\"position 对象还有几个其他的属性，可以用来查找设备的位置和移动信息：\",\"position.speed：返回设备的地面速度（米/秒）。 position.altitude：返回设备的海拔估算值。 position.heading：返回设备正在移动的方向。 position.timestamp：返回位置信息被记录的时间。\",\"position 对象还有计算测量精度的属性。例如 position.accuracy 属性以米为单位返回经度和纬度的精确度。返回值越低，测量结果的精确度就越高，position.altitudeAccuracy 属性就是这种情况，将返回以米为单位的海拔属性的精度。\",\"此外，geolocation 对象还有一个watchPosition()方法，该方法在每次设备的位置更新时，会调用一个回调函数。这个方法返回一个 ID，这个 ID 可以用于引用被观察的位置：\",\"let id = navigator.geolocation.watchPosition(youAreHere);\",\"clearWatch()方法可以用于阻止调用回调，使用作为观察用的 id 来作为参数。\",\"navigator.geolocation.clearWatch(id);\",\"HTML 5 Geolocation API 为网站或者应用程序添加基于位置的信息提供了有用的接口，但是大部分接口都需要谷歌地图来提供服务支持。由于国内特殊的环境，所以更多时候是利用百度地图提供的 API 来获取位置信息。所以 Geolocation 作为一个了解即可。\"]},\"1103\":{\"h\":\"九、Notification\"},\"1104\":{\"h\":\"1. 为什么需要 Notification\",\"t\":[\"传统的桌面通知可以通过创建一个 div 放到页面右下角自动弹出来，并通过轮询等其他方式去获取消息并推送给用户。\",\"但是这种方式有个弊端：那就是当我在使用京东进行购物的时候，我是不知道人人网有消息推送过来给我的，而必须要等我把当前页面切回到人人网才会知道有消息推送过来了。这种方式的消息推送是基于页面存活的。\",\"所以我们需要这么一种策略：无论用户当前在看哪一个页面，只要有消息，都应该能推送给用户让他知道有新的消息来了。这就是 Notification 要解决的问题。\",\"在以前，我们的通知实现主要是通过闪烁页面的标题内容来实现，实现原理其实很简单，就是定时器不断修改 document.title 的值。具体示例如下：\",\"<body> <script> let titleInit = document.title, isShine = true; // 定时器不断修改 document.title 的值 setInterval(function () { let title = document.title; if (isShine == true) { if (/新/.test(title) === false) { document.title = '【你有新消息】'; } else { document.title = '【 】'; } } else { document.title = titleInit; } }, 100); // 判断当前窗口是否处于焦点来决定还是否要闪烁 window.onfocus = function () { isShine = false; }; window.onblur = function () { isShine = true; }; </script> </body>\",\"效果：\",\"2019-02-08 23.13.43-w376\",\"但是上面也有讲过，这种方式实现的通知非常依赖当前页面的张开。如果将浏览器最小化然后干其他的工作的话，就不会看到来自于浏览器的通知。\"]},\"1105\":{\"h\":\"2. 使用 Notification 来实现用户通知\",\"t\":[\"1. 创建 Notification\",\"Notification API 可以让我们使用系统通知来显示消息。这通常是屏幕角落的一个弹出消息，不过根据操作系统的不同而有所不同。使用系统通知的一个好处在于，即使调用它们的网页不是当前的标签页，消息通知依然能够显示。\",\"在发送通知之前，我们需要得到用户的授权。通过 Notification 对象的requestPermission()方法来实现获取用户的授权。示例如下：\",\"<body> <script> if (window.Notification) { Notification.requestPermission(); } </script> </body>\",\"这段代码会请求权限，询问用户是否允许显示通知，如下图：\",\"-w320\",\"这个方法会返回一个 Promise，如下：\",\"-w417\",\"如果用户点击的是允许，那么该 Promise 的值为 granted。如果用户点击的是禁止，那么该 Promise 的值为 denied。这 2 个值可以在后面用于根据用户的选择来判断是否要显示桌面通知。\",\"如果用户选择的是允许，那么我们就可以创建一个新的通知，如下面代码所示：\",\"<body> <script> if (window.Notification) { Notification.requestPermission().then((permission) => { // 如果用户选择的是允许 if (Notification.permission === 'granted') { // 通过 new Notification 来创建新的通知 new Notification('sir, you got a message', { icon: './1.jpg', body: 'you will have a meeting 5 minutes later.', }); } }); } </script> </body>\",\"效果：当我们刷新页面之后，就会弹出相应的桌面通知\",\"-w341\",\"这里，构造函数的第 1 个参数是\\\"sir, you got a message\\\"是该通知的标题，第 2 个参数是一个 JSON 对象。在上面的例子中\\\"you will have a meeting 5 minutes later.\\\"是该通知的主体内容，而 icon 是显示一个图标。\",\"当然，除了这些属性以外，该 JSON 对象还有很多其他的属性可选，具体可以参考：https://developer.mozilla.org/zh-CN/docs/Web/API/notification\",\"2. 延时的系统通知\",\"前面介绍 Notification 的时候有介绍过，使用 Notification 最大的好处在于通知是系统级别的。所以即使调用它们的网页不是当前的标签页，消息通知依然能够显示。\",\"上面的例子里面，我们一刷新页面就会弹出所创建的通知，无法看出 Notification 的优点。这一次我们来给系统通知一个延迟，然后将浏览器最小化之后，查看这个通知是否能够弹出来。示例代码如下：\",\"<body> <script> window.setTimeout(function () { Notification.requestPermission().then((permission) => { if (Notification.permission === 'granted') { let notification = new Notification('sir, you got a message', { icon: './1.jpg', body: 'you will have a meeting 5 minutes later.', }); } }); }, 5000); </script> </body>\",\"在这个例子中，我们设置了setTimeout()函数来延迟系统通知出现，让系统通知 5 秒以后再显示出来。然后我们将浏览器最小化后，系统通知依然可以在 5 秒钟后显示出来。\",\"3. 事件处理\",\"在 Notification 中可以使用如下的事件：\",\"Notification.onclick：处理 click 事件的处理。每当用户点击通知时被触发。 Notification.onshow：处理 show 事件的处理。当通知显示的时候被触发。 Notification.onerror：处理 error 事件的处理。每当通知遇到错误时被触发。 Notification.onclose：处理 close 事件的处理。当用户关闭通知时被触发。\",\"这里我们就演示一个点击事件的效果，示例代码如下：\",\"<body> <script> // 判断浏览器是否支持 Notification if (window.Notification) { // 调用 Notification 的 requestPermission 方法来询问用户是否允许通知、返回一个 promise Notification.requestPermission().then(() => { // 当用户选择允许通知时，Notification.permission 的值为 granted if (Notification.permission === 'granted') { // 将新建的通知存储在 notification 变量里面 // 新建的通知包括标题、icon图标以及内容 let notification = new Notification('sir, you got a message', { icon: './1.jpg', body: 'you will have a meeting 5 minutes later.', }); // 为 notification 添加点击事件 notification.addEventListener('click', function () { console.log('6666'); }); } }); } </script> </body>\",\"效果：点击通知以后会触发事件\",\"2019-02-08 23.48.42-w362\"]},\"1106\":{\"c\":[\"前端\"]},\"1107\":{\"c\":[\"BOM\"]},\"1108\":{\"h\":\"DOM\"},\"1109\":{\"h\":\"一、Document Object Model 文档对象模型。\",\"t\":[\"文档：文档表示的就是整个的 HTML 网页文档\",\"对象：对象表示将网页中的每一个部分都转换为了一个对象。\",\"DOM 里面的对象属于宿主对象，需要浏览器来作为宿主。一旦离开了浏览器这个环境，那么该对象将不复存在。\",\"模型：使用模型来表示对象之间的关系，这样方便我们获取对象\",\"DOM 的作用如下：\",\"浏览器提供的操纵 HTML 文档内容的应用程序接口\",\"用于对文档进行动态操作，如增加文档内容，删除文档内容，修改文档内容等等\"]},\"1110\":{\"h\":\"二、 节点\"},\"1111\":{\"h\":\"1. 文档节点（document）\",\"t\":[\"表示整个文档。document对象作为 window 对象的属性存在的，我们不用获取可以直接使用。\",\"var body = document.body; //获取body标签 var body = document.getElementsByTagName('body')[0]; var html = document.documentElement; //保存着html根标签 var all = document.all; //代表页面中的所有元素 var all = document.getElementsByTagName(' ');\"]},\"1112\":{\"h\":\"2. 元素节点（element）\",\"t\":[\"浏览器会将页面中所有的标签都转换为一个元素节点，我们可以通过 document 的方法来获取元素节点。\",\"获取元素节点的方法\",\"document.getElementsByClassName()\",\"返回文档中所有指定类名的元素集合，作为 NodeList 对象。\",\"document.getElementById()\",\"返回对拥有指定 id 的第一个对象的引用。\",\"document.getElementsByName()\",\"返回带有指定名称的对象集合。\",\"document.getElementsByTagName()\",\"返回带有指定标签名的对象集合（类数组对象）。\",\"document.querySelector()\",\"需要一个选择器的字符串作为参数，可以根据一个 CSS 选择器来查询元素节点对象\",\"使用该方法总会返回唯一的一个元素，如果满足条件的元素有多个，那么它只会返回第一个\",\"document.querySelectorAll()\",\"该方法和 querySelector()用法类似，不同的是它会将符合条件的元素封装到一个数组中返回\",\"即使符合条件的元素只有一个，它也会返回数组\",\"在所有的得到类数组的方法中，除了querySelectorAll，其他的方法都是实时更新的。\",\"书写了 id 的元素，会自动成为 window 对象的属性。它是一个实时的单对象。事实上的标准。不推荐使用。\",\"getElementsByTagName、getElementsByClassName、querySelector、querySelectorAll，可以作为其他元素节点对象的方法使用\",\"获取元素节点的子节点\",\"element.childNodes 返回元素的一个子节点的数组\",\"childNodes 属性会获取包括文本节点，空白节点在内的所有节点。\",\"element.children 返回元素的子元素的集合\",\"children 属性只返回一个节点下面的所有子元素节点，所以会忽略所有的文本节点和空白节点。\",\"element.firstChild 返回元素的第一个子节点（包括空白文本节点）\",\"element.lastChild 返回元素的最后一个子节点（包括空白文本节点）\",\"<body> <p id=\\\"test1\\\" class=\\\"abc\\\">Lorem ipsum dolor sit amet.</p> <p id=\\\"test2\\\">Lorem ipsum dolor sit amet.</p> <a href=\\\"\\\" class=\\\"abc\\\">链接1</a> <ul id=\\\"test3\\\"> <li>item1</li> <li>item2</li> <li>item3</li> </ul> <script> let i = document.getElementById('test3'); console.log(i.firstChild); </script> </body>\",\"效果：\",\"-w64\",\"可以看到这里就访问到了 ul 下面的第一个子节点，但是这个节点是一个空白节点。什么意思呢？\",\"就是说在 DOM 里面会将空格和换行也视为是一个节点。这样的节点叫做空白节点。如果我现在将 ul 元素和 li 元素之间的空白给删除掉，那么第一个子元素就应该为 ul 下面的第一个 li。\",\"具体示例如下：\",\"<body> <p id=\\\"test1\\\" class=\\\"abc\\\">Lorem ipsum dolor sit amet.</p> <p id=\\\"test2\\\">Lorem ipsum dolor sit amet.</p> <a href=\\\"\\\" class=\\\"abc\\\">链接1</a> <ul id=\\\"test3\\\"> <li>item1</li> <li>item2</li> <li>item3</li> </ul> <script> let i = document.getElementById('test3'); console.log(i.firstChild); </script> </body>\",\"效果：这时<ul>下面的第一个子元素就变为了第一个<li>元素。\",\"-w114\",\"如果想要在保持之前的 HTML 结构的基础上获取第一个<li>元素的内容的话，就只有层层往下找。\",\"具体示例如下：\",\"<body> <p id=\\\"test1\\\" class=\\\"abc\\\">Lorem ipsum dolor sit amet.</p> <p id=\\\"test2\\\">Lorem ipsum dolor sit amet.</p> <a href=\\\"\\\" class=\\\"abc\\\">链接1</a> <ul id=\\\"test3\\\"> <li>item1</li> <li>item2</li> <li>item3</li> </ul> <script> let i = document.getElementById('test3'); console.log(i.firstChild.nextSibling.firstChild); </script> </body>\",\"效果：\",\"-w65\",\"element.getElementsByTagName() 返回指定标签名的所有子元素集合。\",\"element.getElementsByClassName() 返回文档中所有指定类名的元素集合，作为 NodeList 对象。\",\"获取元素节点的父节点和兄弟节点\",\"element.parentNode 返回当前节点的父节点\",\"element.previousSibling 返回当前节点的前一个兄弟节点（包括空白文本节点）\",\"element.nextSibling 返回当前节点的后一个兄弟节点（包括空白文本节点）\",\"element.previousElementSibling\",\"element.nextElementSibling\",\"把前后的换行也算作是一个空白节点，这样的处理确实也有太麻烦了。所以，现在添加上了 previousElementSibling 和 nextElementSibling 这两个属性，直接用于查询某一个节点的上一个或者下一个元素节点。\",\"💡 HTMLCollection 与 NodeList\",\"当我们使用上述方法获取节点时，有的返回的是 HTMLCollection，而有的返回的是 NodeList。那么这两者之间有什么区别呢？\",\"其最大的区别就在于，如果使用的是以前的 DOM 方法，例如document.getElementsByTagName()来获取到的节点集合，返回的为 HTMLCollection ，这是一个实时集合。\",\"而使用新的querySelectorAll()方法获取到的节点集合，返回的为 NodeList ，这不是一个实时集合。\",\"具体的示例如下：\",\"<body> <button id=\\\"btn\\\">添加段落</button> <p>Lorem ipsum dolor sit amet.</p> <p>Lorem ipsum dolor sit amet.</p> <p>Lorem ipsum dolor sit amet.</p> <script> let HTMLCollection = document.getElementsByTagName('p'); let NodeList = document.querySelectorAll('p'); console.log(HTMLCollection); console.log(NodeList); // 向文档新添加一个段落 btn.onclick = function () { // 创建一个新的 p 元素 let newP = document.createElement('p'); //创建一个文本节点 let newContent = document.createTextNode('这是一个测试'); //将文本节点添加给 p 元素节点作为子节点 newP.appendChild(newContent); //获取 body 节点 let doc = document.body; //为 body 节点添加子节点 doc.appendChild(newP); console.log(HTMLCollection); console.log(NodeList); }; </script> </body>\",\"2018-12-18 10.05.36-w1119\"]},\"1113\":{\"h\":\"3. 属性节点（attribute）\",\"t\":[\"属性节点并非是元素节点的子节点，只能算作是元素节点的一个附属节点，如下图：可以通过元素节点来获取指定的属性节点。\",\"element.getAttributeNode() 返回指定属性节点\",\"我们一般不使用属性节点\"]},\"1114\":{\"h\":\"4. 文本节点（text）\",\"t\":[\"获取文本节点时，一般先要获取元素节点。在通过元素节点获取文本节点。\",\"text.nodeValue\",\"element.textContent 设置或返回一个节点和它的文本内容\"]},\"1115\":{\"h\":\"三、 dom 对 html 的增删改\",\"t\":[\"操作节点其实就有点像操作数据库数据一样，无非就是对节点进行增删改查，当然查就是前面我们所讲的查找节点，接下来我们来看一下对节点的增删改的操作。\"]},\"1116\":{\"h\":\"创建元素节点对象\",\"t\":[\"document.createElement()\",\"它需要一个标签名作为参数，将会根据该标签名创建元素节点对象，并将创建好的对象作为返回值返回\"]},\"1117\":{\"h\":\"创建文本节点对象\",\"t\":[\"document.createTextNode()\",\"需要一个文本内容作为参数，将会根据该内容创建文本节点，并将新的节点返回\"]},\"1118\":{\"h\":\"将某节点设置为另一节点的子节点\",\"t\":[\"element.appendChild()\",\"用法：父节点.appendChild(子节点);\"]},\"1119\":{\"h\":\"在指定的子节点前插入新的子节点\",\"t\":[\"insertBefore()\",\"用法：父节点.insertBefore(新节点,旧节点);\"]},\"1120\":{\"h\":\"文档碎片\",\"t\":[\"在前面，我们已经学会了向文档里面添加节点，但是存在一个问题，那就是如果要添加大量节点的话，这种逐个添加的方法会显得效率很低，因为添加一个节点就会刷新一次页面。\",\"这个时候，我们就可以使用 DOM 里面提供的createElementFragment()方法，将节点先添加在一个文档碎片里面，然后最后再一次性添加到文档里面。\",\"具体的示例如下：\",\"<body> <p id=\\\"test1\\\" class=\\\"abc\\\">Lorem ipsum dolor sit amet.</p> <p id=\\\"test2\\\" name=\\\"qwe\\\">Lorem ipsum dolor sit amet.</p> <a href=\\\"\\\" class=\\\"abc\\\">链接1</a> <ul id=\\\"test3\\\"> <li>item1</li> <li name=\\\"qwe\\\">item2</li> <li>item3</li> </ul> <script> let arrText = ['first', 'second', 'third']; let oF = document.createDocumentFragment(); for (let i = 0; i < arrText.length; i++) { // 创建元素节点 p let oP = document.createElement('p'); // 给元素节点添加文本内容 oP.innerText = arrText[i]; // 将元素节点添加到文档碎片里面 oF.appendChild(oP); } // 将 oF 里面所有的节点一次性添加到文档上面 document.body.appendChild(oF); </script> </body>\",\"效果：\",\"-w230\"]},\"1121\":{\"h\":\"可以删除一个子节点\",\"t\":[\"removeChild()\",\"语法：父节点.removeChild(子节点);\",\"常用：bj.parentNode.removeChild(bj);\",\"删除最后一个会报错，添加 return false；点击超链接以后，超链接会跳转页面，这个是超链接的默认行为，但是此时我们不希望出现默认行为，可以通过在响应函数的最后 return false 来取消默认行为。\",\"元素对象.remove()\",\"除了使用父元素节点删除子节点的方式之外，我们元素对象本身其实就有一个 remove 方法,可以把自己直接删除\"]},\"1122\":{\"h\":\"使用指定的子节点替换已有的子节点\",\"t\":[\"replaceChild()\",\"语法：父节点.replaceChild(新节点,旧节点);\"]},\"1123\":{\"h\":\"克隆节点\",\"t\":[\"有些时候，我们不想创建和插入一个完全新的元素，而是想复制某个节点，这时就轮到克隆节点登场了。\",\"克隆节点分为浅克隆和深克隆，只需要向cloneNode()方法传入一个布尔值即可实现浅克隆和深克隆。克隆节点的语法如下：\",\"节点.cloneNode(布尔值)\",\"**浅克隆：**所谓浅克隆，就是指指克隆某一个节点，仅仅是克隆该节点而已，方法参数传入 false。\",\"具体的示例如下：\",\"<body> <p id=\\\"test1\\\" class=\\\"abc\\\">Lorem ipsum dolor sit amet.</p> <p id=\\\"test2\\\">Lorem ipsum dolor sit amet.</p> <a href=\\\"\\\" class=\\\"abc\\\">链接1</a> <ul id=\\\"test3\\\"> <li>item1</li> <li>item2</li> <li>item3</li> </ul> <script> // 获取 ul 元素节点 let ul = document.getElementById('test3'); // 进行浅克隆 let newUl = ul.cloneNode(false); // 添加到文档上面 document.body.appendChild(newUl); </script> </body>\",\"效果：\",\"-w232\",\"光看上面的效果，我们感觉好像没有克隆成功，但实际上是克隆成功了的，我们打开开发者工具进行查看\",\"-w447\",\"可以看到，打开开发者工具以后我们看到确实对 ul 进行了克隆。\",\"**深克隆：**所谓深克隆，就是指复制某个节点和其子节点，需要传入的布尔值为 true。\",\"具体的示例如下：\",\"<body> <p id=\\\"test1\\\" class=\\\"abc\\\">Lorem ipsum dolor sit amet.</p> <p id=\\\"test2\\\">Lorem ipsum dolor sit amet.</p> <a href=\\\"\\\" class=\\\"abc\\\">链接1</a> <ul id=\\\"test3\\\"> <li>item1</li> <li>item2</li> <li>item3</li> </ul> <script> // 获取 ul 元素节点 let ul = document.getElementById('test3'); // 进行深克隆,只需要将 false 改为 true let newUl = ul.cloneNode(true); // 添加到文档上面 document.body.appendChild(newUl); </script> </body>\",\"效果：\",\"-w228\",\"可以看到，我们不用打开开发者工具，直接从页面上就能直观的感受到区别，这里已经将 ul 以及下面的子元素进行了完完整整的复制。\"]},\"1124\":{\"h\":\"使用 innerHTML 完成 DOM 的增删改的相关操作\",\"t\":[\"通过前面的学习，现在我们已经能够对文档中的节点进行基本的增删改操作了。但是前面所介绍的方式，我不得不承认实在是相当的繁琐。我明明只是想新增一个节点，却需要好几个步骤才能实现。\",\"那么，有没有一种方式可以让我们更加快捷简便的操作节点呢？答案是有的，就是通过直接修改节点内部信息来简化节点的操作步骤。在 DOM 中，我们可以通过innerHTML和innerText来获取到节点内部的信息。\",\"innerText用于获取元素节点的文本值\",\"innerHTML则用于用户元素节点下面的所有东西，包括 HTML 标签。\",\"textContent属性。可以直接获取到一个元素节点的文本内容。\",\"innerText和textContent方法的区别\",\"textContent：会获取'style= \\\"display:none\\\"'中的文本，而 innerText 不会。 textContent：会获取 style 标签里面的文本，而 innerText 不会。 innerText：对 Internet Explorer 的兼容性较好。 textContent：虽然作为标准方法，但是只支持 Internet Explorer 8+ 以上的浏览器。\",\"这里我们来看一个具体的例子，示例如下：\",\"<body> <!-- 此代码只是作为测试，无任何实际含义 --> <div class=\\\"test\\\" id=\\\"test\\\"> <p>Hello</p> <style> * { margin: 0px; padding: 0px; } </style> <div style=\\\"display:none\\\"> <p>World</p> </div> <ul> <li>item1</li> <li>item2</li> <li>item3</li> </ul> </div> <script> let testDiv = document.getElementById('test'); console.log('我是textContent输出的' + testDiv.textContent); console.log('我是innerText输出的' + testDiv.innerText); </script> </body>\",\"效果：\",\"-w288\",\"city.innerHTML += \\\"<li>广州</li>\\\";//会将整个 innerHTML 重新设置（之前的删掉）\",\"采取一种折中的方式：\",\"var li = document.createElement('li'); //创建属性节点 li.innerHTML = '广州'; //向li中设置文本 city.appendChild(li); //将li添加到city中\"]},\"1125\":{\"h\":\"四、 dom 操作属性和类\",\"t\":[\"getAttribute()\",\"element.getAttribute()，获取元素节点的属性值\",\"setAttribute()\",\"element.setAttribute()，设置元素节点的属性\",\"removeAttribute()\",\"element.setAttribute()，删除元素节点的属性\",\"element.class、element.classList（类数组）、element.className（字符串）\",\"element.classList.add() 给一个元素节点添加类\",\"element.classList.remove()移除一个元素节点的类\",\"element.classList.contains()检测一个元素节点是否含有指定的某一个类。\",\"element.classList.toggle()\",\"用来对类进行切换。如果元素节点没有给出的类，就添加该类，如果有该类，就删除该类。\",\"对于一些自定义属性，按照 HTML 5 的规范应该尽量使用data-作为前缀，比如给 p 元素添加一个自定义属性 power，应该设置为data-power。\",\"这样设置之后，有一种新的方式可以访问这个属性，即使用标签中的dataset属性\",\"test1.dataset.power = 'high speed';\",\"这个 dataset 是每个元素节点都有的属性，它指向所有以data-开头的属性集合。\"]},\"1126\":{\"h\":\"五、 dom 修改元素的样式\"},\"1127\":{\"h\":\"方式一：元素.style.样式名 = 新的样式值；\",\"t\":[\"如果 CSS 的样式名中含有-，这种名称在 JS 中是不合法的比如background-color，需要将这种样式名修改为驼峰命名法，去掉-，然后将-后的字母大写，或者直接使用中括号来表示 css 属性。\",\"box1.style.backgroundColor = 'yellow'; box1.style['background-color'] = 'yellow';\",\"通过style属性设置和读取的都是内联样式，无法读取样式表中的样式。也就是说，如果我们使用style来获取元素节点的属性的时候，它排除了最常用的来自于外部样式表的样式，不仅外部样式表的样式获取不到，连内嵌的样式也同样无法获取。\"]},\"1128\":{\"h\":\"方式二：元素.currentStyle.样式名\",\"t\":[\"用来读取当前元素正在显示的样式，如果当前元素没有设置该样式，则获取它的默认值\",\"currentStyle 只有 IE 浏览器支持，其他的浏览器都不支持\"]},\"1129\":{\"h\":\"方式三：getComputedStyle() 使用这个方法来获取元素当前的样式\",\"t\":[\"这个方法是 window 的方法(只读)，可以直接使用\",\"需要两个参数，第一个为要获取样式的元素；第二个可以传递一个伪元素，一般都传 null\",\"返回一个对象，对象中封装了当前元素对应的样式，可以通过对象.样式名来读取样式，若获取的样式没有设置，则会获取到真实的值，而不是默认值。\",\"getComputedStyle(box1,null).backgroundColor\"]},\"1130\":{\"h\":\"方式四：document.styleSheets 来获取到一个网页中所有样式表的引用。\",\"t\":[\"虽然我们可以通过 DOM 提供的接口轻松的改变元素节点的样式，但是，动态的改变元素的类，并且将每个类的相关样式保存在单独的样式表里面才是更好的做法。\"]},\"1131\":{\"h\":\"六、一些 API 的记录\",\"t\":[\"事件参考 | MDN \"]},\"1132\":{\"h\":\"1. page visible api\",\"t\":[\"Document.hidden（只读属性） \",\"返回布尔值，表示页面是（true）否（false）隐藏。\",\"visibilitychange（事件） \",\"当其选项卡的内容变得可见或被隐藏时，会在文档上触发 visibilitychange (能见度更改) 事件。\",\"// 在文档可见时开始播放音乐曲目，在文档不再可见时暂停音乐。 document.addEventListener('visibilitychange', function () { if (document.hidden) { backgroundMusic.pause(); } else { backgroundMusic.play(); } });\"]},\"1133\":{\"c\":[\"前端\"]},\"1134\":{\"c\":[\"DOM\"]},\"1135\":{\"h\":\"事件\",\"t\":[\"事件最早是在 Internet Explorer 3 和 Netscape Navigator 2 中出现的，当时是作为分担服务器运算负担的一种手段。要实现和网页的互动，就需要通过 JavaScript 里面的事件来实现。\",\"每次用户与一个网页进行交互，例如点击链接，按下一个按键或者移动鼠标时，就会触发一个事件。我们的程序可以检测这些事件，然后对此作出响应。从而形成一种交互。\",\"这样可以使我们的页面变得更加的有意思，而不仅仅像以前一样只能进行浏览。\"]},\"1136\":{\"h\":\"一、事件与事件流\"},\"1137\":{\"h\":\"1. 事件介绍\",\"t\":[\"JavaScript 和 HTML 之间的交互是通过当用户或者浏览器操作网页时发生的事件来处理的。页面装载时，是一个事件，用户点击页面上的某个按钮时，也是一个事件。\",\"在早期拨号上网的年代，如果所有的功能都放在服务器端进行处理的话，效率是非常低的。所以 JavaScript 最初被设计出来就是用来解决这些问题的。通过允许一些功能在客户端处理，以节省到服务器的往返时间。\",\"JavaScript 中采用一个叫做事件监听器的东西来监听事件是否发生。这个事件监听器类似于一个通知，当事件发生时，事件监听器会让我们知道，然后程序就可以做出相应的响应。\",\"通过这种方式，就可以避免让程序不断地去检查事件是否发生，让程序在等待事件发生的同时，可以继续做其他的任务。\",\"这其实就是后面我们会介绍到的异步，后面的章节会具体的介绍异步相关的知识。\",\"接下来我们来看一个事件的快速入门案例，如下：\",\"<body> <button onclick=\\\"test()\\\">点击我</button> <script> let test = function () { alert('我知道你已经点击了'); }; </script> </body>\",\"效果：点击按钮以后弹出一个对话框 \",\"这里我们就给 button 元素节点绑定了一个点击事件，当用户点击该按钮时，会执行test()函数。\"]},\"1138\":{\"h\":\"2. 事件流介绍\",\"t\":[\"当浏览器发展到第 4 代时（Internet Explorer 4 及 Netscape 4），浏览器开发团队遇到了一个很有意思的问题：页面的哪一部分会拥有某个特定的事件？\",\"想象在一张纸上的一组同心圆。如果把手指放在圆心上，那么手指指向的不是一个圆，而是纸上的所有圆。\",\"好在两家公司的浏览器开发团队在看待浏览器事件方面还是一致的。如果单击了某个按钮，他们都认为单击事件不仅仅发生在按钮上，甚至也单击了整个页面。\",\"但有意思的是，Internet Explorer 和 Netscape 开发团队居然提出了差不多是完全相反的事件流的概念。Internet Explorer 的事件流是事件冒泡流，而 Netscape 的事件流是事件捕获流。\"]},\"1139\":{\"h\":\"3. 事件冒泡\",\"t\":[\"Internet Explorer 的事件流叫做事件冒泡（event bubbling），即事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）。\",\"以下列 HTML 结构为例，来说明事件冒泡。如下：\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <title>Document</title> </head> <body> <div></div> </body> </html>\",\"如果单击了页面中的 div 元素，那么这个 click 事件沿 DOM 树向上传播，在每一级节点上都会发生，按照如下顺序进行传播：\",\"1.<div> 2.<body> 3.<html> 4.document\",\"所有现代浏览器都支持事件冒泡，但在具体实现在还是有一些差别。Internet Explorer 9、Firefox、Chrome、Safari 将事件一直冒泡到 window 对象。\",\"1.<div> 2.<body> 3.<html> 4.document 5.window\",\"我们可以通过下面的代码，来查看文档具体的冒泡顺序，示例如下：\",\"<body> <div id=\\\"box\\\" style=\\\"height:100px;width:300px;background-color:pink;\\\"></div> <button id=\\\"reset\\\">还原</button> <script> // IE 8 以下浏览器返回 div body html document // 其他浏览器返回 div body html document window reset.onclick = function () { history.go(); }; box.onclick = function () { box.innerHTML += 'div\\\\n'; }; document.body.onclick = function () { box.innerHTML += 'body\\\\n'; }; document.documentElement.onclick = function () { box.innerHTML += 'html\\\\n'; }; document.onclick = function () { box.innerHTML += 'document\\\\n'; }; window.onclick = function () { box.innerHTML += 'window\\\\n'; }; </script> </body>\",\"效果：当我们点击了页面上的 div 元素以后，出现的文字顺序如下。\",\"-w301\"]},\"1140\":{\"h\":\"4. 事件捕获\",\"t\":[\"Netscape Communicator 团队提出的另一种事件流叫做事件捕获（event captruing）。事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件。\",\"事件捕获的思想是在事件到达预定目标之前就捕获它。以同样的 HTML 结构为例来说明事件捕获，如下：\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <title>Document</title> </head> <body> <div></div> </body> </html>\",\"在事件捕获过程中，document 对象首先接收到 click 事件，然后事件沿 DOM 树依次向下，一直传播到事件的实际目标，即 div 元素：\",\"1.document 2.<html> 3.<body> 4.<div>\",\"Internet Explorer 9、Firefox、Chrome、Safari 等现代浏览器都支持事件捕获，但是也是从 window 对象开始捕获。\",\"1.window 2.document 3.<html> 4.<body> 5.<div>\",\"后面我们会学习addEventListener()这个方法。在这个方法中当第三个参数设置为 true 时，即为事件捕获。我们由此可以来观察一下事件捕获的一个顺序，如下：\",\"<body> <div id=\\\"box\\\" style=\\\"height:100px;width:300px;background-color:pink;\\\"></div> <button id=\\\"reset\\\">还原</button> <script> // IE 8 以下浏览器不支持 // 其他浏览器返回 window document html body div reset.onclick = function () { history.go(); }; box.addEventListener( 'click', function () { box.innerHTML += 'div\\\\n'; }, true ); document.body.addEventListener( 'click', function () { box.innerHTML += 'body\\\\n'; }, true ); document.documentElement.addEventListener( 'click', function () { box.innerHTML += 'html\\\\n'; }, true ); document.addEventListener( 'click', function () { box.innerHTML += 'document\\\\n'; }, true ); window.addEventListener( 'click', function () { box.innerHTML += 'window\\\\n'; }, true ); </script> </body>\",\"效果：当我们点击了页面的 div 元素以后，出现的文字顺序如下：\",\"-w301\"]},\"1141\":{\"h\":\"5. DOM 事件流\",\"t\":[\"DOM 标准采用捕获 + 冒泡。\",\"两种事件流都会触发 DOM 的所有对象，从 document 对象开始，也在 document 对象结束。换句话说，起点和终点都是 document 对象（很多浏览器可以一直捕获 + 冒泡到 window 对象）\",\"DOM 事件流示意图：\",\"-w368\",\"DOM 标准规定事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。\",\"事件捕获阶段：实际目标 div 在捕获阶段不会接收事件。也就是说在捕获阶段，事件从 document 到 html 再到 body 就停止了。上图中为 1 - 3。\",\"处于目标阶段：事件在 div 上发生并处理。但是事件处理会被看成是冒泡阶段的一部分。\",\"冒泡阶段：事件又传播回文档。\"]},\"1142\":{\"h\":\"二、事件监听器\",\"t\":[\"事件监听器，又被称之为事件处理程序。简单来说，就是和事件绑定在一起的函数。\",\"当事件发生时就会执行函数中相应的代码。事件监听器根据 DOM 级别的不同写法上也是有所区别的，不仅写法有区别，功能上也是逐渐的在完善。\"]},\"1143\":{\"h\":\"1. HTML 事件监听器\",\"t\":[\"HTML 事件监听器，又被称之为行内事件监听器。这是在浏览器中处理事件最原始的方法。我们在最开始的时候写的事件快速入门案例就是一个 HTML 事件处理程序。\",\"具体的示例如下：\",\"<body> <button onclick=\\\"test()\\\">点击我</button> <script> let test = function () { alert('我知道你已经点击了'); }; </script> </body>\",\"但是有一点需要注意，就是这种方法已经过时了，原因如下：\",\"JavaScript 代码与 HTML 标记混杂在一起，破坏了结构和行为分离的理念。\",\"每个元素只能为每种事件类型绑定一个事件处理器。\",\"事件处理器的代码隐藏于标记中，很难找到事件是在哪里声明的。\",\"但是如果是做简单的事件测试，那么这种写法还是非常方便快捷的。\"]},\"1144\":{\"h\":\"2. DOM 0 级事件监听器\",\"t\":[\"这种方式是首先取到要为其绑定事件的元素节点对象，然后给这些节点对象的事件处理属性赋值一个函数。这样就可以达到 JavaScript 代码和 HTML 代码相分离的目的。\",\"具体的示例如下：\",\"<body> <button id=\\\"test\\\">点击我</button> <script> let test = document.getElementById('test'); test.onclick = function () { console.log('this is a test'); }; </script> </body>\",\"这种方式虽然相比 HTML 事件监听器有所改进，但是它也有一个缺点，那就是它依然存在每个元素只能绑定一个函数的局限性。\",\"下面我们尝试使用这种方式为同一个元素节点绑定 2 个事件，如下：\",\"<body> <button id=\\\"test\\\">点击我</button> <script> let test = document.getElementById('test'); test.onclick = function () { console.log('this is a test'); }; test.onclick = function () { console.log('this is a test,too'); }; </script> </body>\",\"效果：点击按钮会只会弹出后面的\\\"this is a test,too\\\"，因为后面的事件处理程序把前面的事件处理程序给覆盖掉了。\"]},\"1145\":{\"h\":\"3. DOM 2 级事件监听器\",\"t\":[\"DOM 2 级事件处理程序通过addEventListener()可以为一个元素添加多个事件处理程序。\",\"这个方法接收 3 个参数：事件名，事件处理函数，布尔值。如果这个布尔值为 true，则在捕获阶段处理事件，如果为 false，则在冒泡阶段处理事件。若最后的布尔值不填写，则和 false 效果一样，也就是说默认为 false，在冒泡阶段进行事件的处理。\",\"接下来我们来看下面的示例：这里我们为 button 元素绑定了 2 个事件处理程序，并且 2 个事件处理程序都是通过点击来触发。\",\"<body> <button id=\\\"test\\\">点击我</button> <script> let test = document.getElementById('test'); test.addEventListener( 'click', function () { console.log('this is a test'); }, false ); test.addEventListener( 'click', function () { console.log('this is a test,too'); }, false ); </script> </body>\",\"效果：可以看到绑定在上面的 2 个事件处理程序都工作正常。\",\"-w144\",\"注：在 Internet Explorer 浏览器中使用的方法为attachEvent()。\"]},\"1146\":{\"h\":\"4. 删除事件监听器\",\"t\":[\"通过 DOM 0 级来添加的事件，删除的方法很简单，只需要将节点对象的事件处理属性赋值为 null 即可。\",\"具体的示例如下：\",\"<body> <button id=\\\"test\\\">点击我</button> <script> let test = document.getElementById('test'); test.onclick = function () { console.log('this is a test'); }; test.onclick = null; // 删除事件绑定 </script> </body>\",\"通过 DOM 2 级来添加的事件，我们可以使用removeEventLister()来进行事件的删除。\",\"需要注意的是，如果要通过该方法移除某一类事件类型的一个事件的话，在通过addEventListener()来绑定事件时的写法就要稍作改变。\",\"先单独将绑定函数写好，然后addEventListener()进行绑定时第 2 个参数传入要绑定的函数名即可。\",\"具体的示例如下：\",\"<body> <button id=\\\"test\\\">点击我</button> <script> let test = document.getElementById('test'); //DOM 2级添加事件 let fn1 = function () { console.log('this is a test'); }; let fn2 = function () { console.log('this is a test,too'); }; test.addEventListener('click', fn1, false); test.addEventListener('click', fn2, false); test.removeEventListener('click', fn1); // 只删除第一个点击事件 </script> </body>\",\"效果：第一个点击事件已经被移除掉了\",\"-w141\",\"注：在 Internet Explorer 浏览器中使用的方法为detachEvent()。\"]},\"1147\":{\"h\":\"三、事件类型\",\"t\":[\"在上一小节中，我们介绍了在 JavaScript 中绑定事件的几种形式，但是演示的全部都是点击事件。触发事件就只能够通过点击鼠标来触发么？\",\"显然不是。实际上，在 JavaScript 中事件的类型是有多种的，我们可以通过很多不同的方式来触发事件。下面我们将重点介绍鼠标，键盘以及页面上所常见的事件类型。\"]},\"1148\":{\"h\":\"1. 鼠标事件\",\"t\":[\"鼠标事件是 Web 开发中最常见的一类事件。DOM 3 级标准中定义了 9 个鼠标事件。\",\"click：用户单机主鼠标按钮（一般是左键）或者按下回车键时触发。 dblclick：用户双击鼠标按钮时触发。 mousedown：用户按下了任意鼠标按钮时触发。 mouseenter：进入元素时触发，但是再进入到子元素时不会再触发。 mouseleave：从某个元素出来时触发，但不包括子元素。 mousemove：当鼠标在元素范围内移动内，就会不停的重复地触发。 mouseout：从当前元素出来时触发，进出子元素也会触发。（因为进出子元素可以看作是从当前元素出来了） mouseover：进入元素时触发，进出子元素时也会触发。（因为进出子元素可以看作是进入了新的元素） mouseup：在用户释放鼠标按钮时触发。\",\"上面是对这 9 个鼠标事件的一个简单介绍，下面将针对这 9 种鼠标事件做具体的演示：\",\"<head> <meta charset=\\\"UTF-8\\\" /> <title>Document</title> <style> div { width: 100px; height: 100px; border: 1px solid; float: left; text-align: center; } .son { width: 30px; height: 30px; border: 1px solid red; } </style> </head> <body> <!-- 设置 9 个div，其中 4,5,7,8 需要设置子元素 --> <div id=\\\"one\\\">1.click</div> <div id=\\\"two\\\">2.dblclick</div> <div id=\\\"three\\\">3.mousedown</div> <div id=\\\"four\\\"> 4.mouseenter <div class=\\\"son\\\"></div> </div> <div id=\\\"five\\\"> 5.mouseleave <div class=\\\"son\\\"></div> </div> <div id=\\\"six\\\">6.mousemove</div> <div id=\\\"seven\\\"> 7.mouseout <div class=\\\"son\\\"></div> </div> <div id=\\\"eight\\\"> 8.mouseover <div class=\\\"son\\\"></div> </div> <div id=\\\"nine\\\">9.mouseup</div> <script> // 事件处理程序 let test = function () { console.log('你已经触发了事件'); }; // 9 种不同的事件 one.addEventListener('click', test); two.addEventListener('dblclick', test); three.addEventListener('mousedown', test); four.addEventListener('mouseenter', test); five.addEventListener('mouseleave', test); six.addEventListener('mousemove', test); seven.addEventListener('mouseout', test); eight.addEventListener('mouseover', test); nine.addEventListener('mouseup', test); </script> </body>\",\"效果： \",\"主要需要注意的就是 mouseleave 与 mouseout，还有就是 mouseenter 和 mouseover 的区别。\"]},\"1149\":{\"h\":\"2. 键盘事件\",\"t\":[\"常见的键盘事件有 3 个，分别为keydown，keypress和keyup，介绍如下：\",\"keydown：按下键盘上任意键时触发，而且如果按住不放的话，会重复触发此事件。 keypress：按下键盘上一个字符键（不包括 shift 和 alt 键）时触发。如果按住不放，也是会重复触发。 keyup：当用户释放键盘上的键时触发。\",\"注：所谓字符键，是指按下后会产生一个字符值的按键，例如 A、B、C...等。而 shift 或者 alt 等功能按键则不是字符键。\",\"这里我们演示一个 keydown 事件，如下：\",\"<body> <script> document.onkeydown = function () { console.log('你按下了键盘上的某一个键'); }; </script> </body>\",\"效果：当我们随意按下键盘上的任意按键时，会触发所绑定的事件。\",\"有的同学可能会问，那我怎么知道用户按下了哪一个键呢？\",\"实际上，配合着事件对象里面的属性，我们就可以很轻松的获取到用户具体按下的是哪一个键，从而可以根据用户的按键触发不同的行为。\",\"注：我们会在下一小节中介绍事件对象。\"]},\"1150\":{\"h\":\"3. 页面事件\",\"t\":[\"页面事件主要是指当我们对整个 HTML 页面做相应的操作时会触发的事件。常见的有页面加载，页面卸载以及页面滚动等。\",\"1. 页面加载\",\"页面事件中最常用的一个事件就是load事件。这个事件一般绑定在 window 对象上面。页面完全加载后（包括所有图像，JavaScript 文件，CSS 外部资源），就会触发 window 上面的load事件。\",\"最常见的写法如下：\",\"<body> <p>在看到我之前，应该有一个弹出框</p> <script> window.onload = function () { alert('你正在加载一个页面！'); }; </script> </body>\",\"效果：首先页面完全加载后，触发load事件，出现弹出框。然后页面才被加载出来。\",\"当然该事件也可以用于某个单独的元素上面，示例如下：\",\"<body> <p>在看到我之前，应该有一个弹出框</p> <img src=\\\"./1.jpg\\\" alt=\\\"\\\" onload=\\\"alert('Image loaded')\\\" /> </body>\",\"效果：上面的代码表示，当图像加载完毕以后就会显示一个警告框。\",\"2. 页面卸载\",\"与load事件对应的是unload事件，这个事件是在文档完全被卸载后触发。只要用户从一个页面切换到另一个页面，或者关闭浏览器，就会触发这个事件。示例如下：\",\"注：现代浏览器规定当页面被卸载时，alert()，confim()，prompt()等模态对话框不再允许弹出，所以这里无法显示出其效果。\",\"<body> <p>Lorem ipsum dolor sit amet.</p> <script> window.onunload = function () { console.log('页面已经卸载'); }; </script> </body>\",\"效果：由于刷新也算是一种页面卸载，所以不停的刷新页面可以勉强在控制台中看到打印的语句。\",\"3. 页面滚动\",\"滚动页面时，对应的scroll滚动事件就会被触发。通过 body 元素的scrollLeft和scrollTop可以监控到这一变化。scrollLeft 会监控横向滚动条的变化，scrollTop 会监控垂直方向的滚动条变化。\",\"具体的示例如下：\",\"<body style=\\\"height:5000px;\\\" id=\\\"body\\\"> <p>Lorem ipsum dolor sit amet.</p> <script> document.body.onscroll = function () { console.log(document.documentElement.scrollTop); }; </script> </body>\",\"效果：滚动页面时在控制台会打印出当前滚动了的高度。\",\"-w262\",\"4. 窗口设置大小\",\"当浏览器窗口被调整到一个新的高度或者宽度时，就会触发resize事件。\",\"具体的示例如下：\",\"<body> <p>Lorem ipsum dolor sit amet.</p> <script> window.onresize = function () { console.log('窗口大小被重置了'); }; </script> </body>\",\"效果：\",\"-w261\",\"我们可以通过document.body.clientHeight以及document.body.clientWidth来获取 body 元素的宽高，配合resize事件，可以看到这两个属性实时变化的一个效果。\",\"<body> <p>Lorem ipsum dolor sit amet.</p> <script> window.onresize = function () { console.clear(); // 清空控制台信息 console.log(document.body.clientHeight); // 高度会根据当前的页面高度而固定 console.log(document.body.clientWidth); }; </script> </body>\",\"效果：\",\"-w265\"]},\"1151\":{\"h\":\"四、事件对象\",\"t\":[\"在上一小节中我们已经介绍了一些常见的事件类型。每当这些事件被触发时，事件监听器就会执行相应的代码。\",\"与此同时，监听器上所绑定的回调函数里面还会自动传入一个叫做 event 的事件对象。该对象包含了许多和当前所触发的事件相关的信息。例如绑定事件的 DOM 元素是什么，所触发的事件类型是什么等。\",\"这一小节我们就一起来看一下有关事件对象的相关知识。\",\"首先，事件对象是以事件处理函数中的参数形式出现的，该对象并不需要我们自己创建，直接使用即可。\",\"语法结构如下：\",\"事件源.addEventListener( eventName, function (event) { // event 就是事件对象 }, boolean );\",\"事件对象说明：\",\"当事件发生时，只能在事件函数内部访问的对象\",\"处理函数结束后会自动销毁\",\"兼容的事件对象\",\"这里有必要说一下获取事件对象的方式。上面有提到，事件对象是以事件处理函数中的参数形式出现的。在 DOM 标准以及 Internet Explorer 9 及之后版本的浏览器中，确实是这样的。\",\"具体的示例如下：\",\"btn.onclick = function (event) { console.log(event); };\",\"而在 Internet Explorer 8 及之前的版本浏览器中，event 事件对象是作为 window 对象的一个属性。\",\"具体的示例如下：\",\"btn.onclick = function (event) { console.log(window.event); };\",\"想要实现 event 事件对象的兼容，我们可以在事件的处理函数中添加以下代码：\",\"btn.onclick = function (event) { event = event || window.event; };\"]},\"1152\":{\"h\":\"1. 通用的事件对象属性\",\"t\":[\"所谓通用的事件对象属性，就是指无论你触发的是什么事件，事件对象中都会拥有的属性。最常见的两个属性就是事件类型以及事件目标。\",\"1. 事件类型\",\"事件对象的type属性会返回当前所触发的事件类型是什么。\",\"具体的示例如下：\",\"<body> <button id=\\\"test\\\">点击我</button> <script> let test = document.getElementById('test'); test.addEventListener( 'click', function (event) { console.log(event.type); // click }, false ); </script> </body>\",\"注：event 对象会自动被传入到所绑定的回调函数里面，所以即便回调函数中没有书写以 event 作为的形参，函数内部依然可以正常使用。但是我们建议一般还是写上比较好。\",\"2. 事件目标\",\"target属性返回对触发事件的元素节点对象的一个引用。\",\"具体的示例如下：\",\"<body> <button id=\\\"test\\\">点击我</button> <script> let test = document.getElementById('test'); test.addEventListener( 'click', function () { console.log(event.target); //<button id=\\\"test\\\">点击我</button> }, false ); </script> </body>\",\"3. this 值\",\"这里要重点提一下事件处理函数里面的this值。\",\"当我们触发一个事件的时候，事件处理程序里面的 this 指代的是绑定事件的元素，而事件对象的target属性指代的是触发事件的元素。\",\"注：target和srcElememnt是等价的。\",\"我们来看下面的例子：\",\"<body> <ul id=\\\"color-list\\\"> <li>red</li> <li>yellow</li> <li>blue</li> <li>green</li> <li>black</li> <li>white</li> </ul> <script> // this 是绑定事件的元素 // target 是触发事件的元素，和 srcElememnt 等价 let colorList = document.getElementById('color-list'); colorList.addEventListener('click', function (event) { console.log('this:', this); console.log('target:', event.target); console.log('srcElement:', event.srcElement); }); </script> </body>\",\"效果：当我点击 ul 的地方时，由于绑定事件的元素和触发事件的元素相同，所以都显示出 ul。红色画圈部分是我点击的位置，如下：\",\"-w622\",\"当我点击 li 的时候，区别就出来了，红色画圈部分是我点击的位置，如下：\",\"-w623\"]},\"1153\":{\"h\":\"2. 鼠标事件的事件对象\",\"t\":[\"当我们触发鼠标事件时，会有一些与鼠标事件相关的属性被填入到 event 对象里面。\",\"1. button 属性\",\"当我们按下鼠标时，会有一个button属性被填入到 event 对象里面。\",\"button 属性有 3 个值：0 表示按下的是鼠标左键，1 表示按下的是鼠标中键，2 表示按下的是鼠标右键。\",\"具体的示例如下：\",\"<body> <p id=\\\"test\\\">Lorem ipsum dolor sit amet.</p> <script> test.onmousedown = function (event) { console.log(event.button); }; </script> </body>\",\"效果：按下鼠标不同的键位显示出不同的数字\",\"-w179\",\"2. 事件坐标\",\"除了获取用户按下的是哪一个鼠标键以外，我们还能够精准的获取到用户按下鼠标时所处的位置。这里获取的坐标值有好几组，大致如下：\",\"相对于浏览器器位置:\",\"event.clientX：返回当事件被触发时鼠标指针相对于浏览器页面(或客户区)的水平坐标。(只包含文档的可见部分，不包含窗口本身的控件以及滚动条) event.clientY：返回当事件被触发时⿏标指针相对于浏览器页面(客户区)的垂直坐标。(只包含文档的可见部分，不包含窗口本身的控件以及滚动条) event.pageX：可以获取事件发生时光标相对于当前窗口的水平坐标信息(包含窗口自身的控件和滚动条) event.pageY：可以获取事件发生时光标相对于当前窗口的垂直坐标信息(包含窗口自身的控件和滚动条)\",\"相对于屏幕位置:\",\"event.screenX：返回事件发生时鼠标指针相对于电脑屏幕左上角的水平坐标。 event.screenY：返回事件发生时鼠标指针相对于电脑屏幕左上角的垂直坐标。\",\"相对于事件源位置:\",\"event.offsetX：返回事件发生时鼠标指针相对于事件源的水平坐标 event.offsetY：返回事件发生时鼠标指针相对于事件源的垂直坐标 event.layerX：返回事件发生时鼠标指针相对于事件源的水平坐标(Firefox) event.layerY：返回事件发生时鼠标指针相对于事件源的垂直坐标(Firefox)\",\"这几个事件属性看似类似，但是有一些细微的不同。它们有助于查明点击的位置，或者鼠标光标的位置。\",\"具体的示例如下：\",\"<head> <meta charset=\\\"UTF-8\\\" /> <title>Document</title> <style> body { height: 5000px; } div { position: fixed; top: 50px; left: 100px; width: 100px; height: 100px; border: 1px solid; } </style> </head> <body> <div id=\\\"box\\\"></div> <script> box.addEventListener( 'click', function () { console.log('screen:', event.screenX, event.screenY); console.log('page:', event.pageX, event.pageY); console.log('client:', event.clientX, event.clientY); console.log('offset:', event.offsetX, event.offsetY); }, false ); </script> </body>\",\"效果：将窗口向下滚动一段距离后，点击鼠标，出现了以下数值。\",\"-w349\",\"这里分别做一些解释，如下：\",\"screen：参考点为电脑屏幕左上角。 page：参考点为文档左上角，这里由于我滚动了页面，所以滚动的部分也会被记入其中。(clientY+滚动) client：参照点始终为当前视口的左上角，无论是否滚动了页面。 offset：当前事件源的左上角作为参考点。\",\"3. 滚动事件\",\"onmousewheel鼠标滚轮滚动的事件，会在滚轮滚动时触发，但是火狐不支持该属性 \",\"在火狐中需要使用 DOMMouseScroll 来绑定滚动事件，注意该事件需要通 addEventListener()函数来绑定\",\"event.wheelDelta 可以获取鼠标滚轮滚动的方向 \",\"wheelDelta 这个属性火狐中不支持，在火狐中使用 event.detail 来获取滚动的方向\",\"if(event.wheelDelta > 0 || event.detail < 0){}\",\"这两种事件接口皆非标准，如今的 scroll 事件对上述内容的行为响应做了统一。\",\"scroll事件在元素内部内容区发生滚动时触发\",\"wheel是标准的滚轮事件，当鼠标滚轮滑动时触发，具体的默认行为取决于浏览器实现，所以不一定会触发 scroll 事件\",\"此时若想获取滚动的方向，有两种方式： \",\"WheelEvent.deltaY，但是标准未定义滚轮事件具体会引发什么样的行为，引发的行为实际上是各浏览器自行定义的，所以通过该滚轮事件获知文档内容滚动方向的方法并不可靠。而且当拖动滚动条滚动时也不会触发此事件。\",\"在文档内容滚动事件（scroll）中监视scrollLeft和scrollTop二值变化情况\",\"对于滚动事件的优化处理还将涉及到节流的概念\"]},\"1154\":{\"h\":\"3. 键盘事件的事件对象\",\"t\":[\"同样的，键盘事件也会有相关的属性被传入 event 对象，常见的属性有keyCode和key属性。\",\"keyCode 属性会发生在keydown和keyup事件被触发时，每一个 keyCode 的值与键盘上一个特定的键对应。该属性的值与 ASCII 码中对应的编码相同。\",\"<body> <input type=\\\"text\\\" id=\\\"test\\\" /> <script> let test = document.getElementById('test'); test.addEventListener( 'keypress', function () { console.log('你已经触发了事件'); console.log(event.keyCode); }, false ); </script> </body>\",\"效果：按下一个键，就会有对应的 keyCode 被打印到控制台\",\"-w134\",\"-w110\",\"而我们在做游戏时，常用的 4 个方向按键，左上右下（顺时针）的键码分别是 37、38、39、40。\",\"key属性是为了取代 keyCode 而新增的，它的值是一个字符串。在按下某个字符键时，key 的值就是相应的文本字符。在按下非字符键时，key 的值是相应键的名，默认为空字符串。\",\"注：Internet Explorer 8 以下的浏览器不支持，safari 浏览器不支持keypress事件中的 key 属性。\",\"<body> <input type=\\\"text\\\" id=\\\"test\\\" /> <script> let test = document.getElementById('test'); test.addEventListener( 'keydown', function () { console.log('你已经触发了事件'); console.log(event.key); }, false ); </script> </body>\",\"效果：会打印出用户按下的哪一个键\",\"-w134\",\"-w111\",\"辅助按键（扩展）\",\"按下键盘上的shift，Ctrl，Alt和Meta（Mac 上的command）等辅助按键的时候，会触发keydown和keyup事件，但是不会触发keypress事件，因为它们不会在屏幕上产生任何字符。\",\"这里大家可以通过下面两段代码自行进行对比，如下：\",\"<body> <script> window.onkeyup = function () { console.log('OK'); }; </script> </body>\",\"效果：此时按下shift，Ctrl，Alt和Meta（Mac 上的command）等辅助按键时将会触发事件。\",\"<body> <script> window.onkeypress = function () { console.log('OK'); }; </script> </body>\",\"效果：此时按下shift，Ctrl，Alt和Meta（Mac 上的command）等辅助按键时不会触发事件。\",\"事件对象还有shiftKey，ctrlKey，altKey和metaKey属性，可以返回在键盘事件发生时，是否按下了对应的辅助按键。如果这几个属性返回 true ，就表示对应的键被按下了。\",\"例如：如下的代码会检测在用户按下c键的同时，是否按下了Ctrl键。\",\"<body> <script> window.onkeydown = function () { if (event.key === 'c' && event.ctrlKey) { console.log('Yes,you pressed ctrl and c'); } }; </script> </body>\",\"使用下面的代码可以检测在鼠标单击时，是否按下了Shift键，如下：\",\"<body> <script> window.onclick = function () { if (event.shiftKey) { console.log('Yes,you hold shiftKey and click the mouse'); } }; </script> </body>\"]},\"1155\":{\"h\":\"4. 阻止冒泡\",\"t\":[\"既然介绍到了事件对象，那么有必要说一说被用的很多的stopPropagation()方法。\",\"首先，该方法是事件对象上面的一个方法。其次，该方法的主要作用就是用来阻止冒泡的。那什么又是阻止冒泡？为什么要阻止冒泡？下面我们来对此进行一个具体的介绍。\",\"在前面介绍事件流的时候，我们有介绍过事件冒泡。但是事件冒泡带给我们很不方便的一点在于，如果父级元素和后代元素都绑定了相同的事件，那么后代元素触发事件时，父级元素的事件也会被触发。\",\"这里我们来看一个示例如下：\",\"<head> <meta charset=\\\"UTF-8\\\" /> <title>Document</title> <style> .father { width: 200px; height: 200px; background-color: pink; } .son { width: 100px; height: 100px; background-color: skyblue; position: absolute; left: 500px; } </style> </head> <body> <div class=\\\"father\\\" onclick=\\\"test()\\\"> <div class=\\\"son\\\" onclick=\\\"test2()\\\"></div> </div> <script> let test = function () { console.log('你点击了父元素'); }; let test2 = function () { console.log('你点击了子元素'); }; </script> </body>\",\"效果：当我们点击了子元素之后，父元素上面绑定的事件也同时被触发\",\"-w596\",\"![-w92](F:\\\\WYC\\\\前端学习\\\\学习资料\\\\JavaScript WebAPI\\\\2. 事件\\\\课件\\\\media\\\\15118515229457\\\\15118764014918.jpg)\",\"通常情况下我们都是一步到位，明确自己的事件触发源，并不希望浏览器自作聪明、漫无目的地去帮我们找合适的事件处理程序，所以这种情况下我们不需要事件冒泡。\",\"另外，通过对事件冒泡的理解，我们知道事件冒泡会让程序将做很多额外的事情，这必然增大程序开销。事件冒泡处理可能会激活我们本来不想激活的事件，导致程序错乱，甚至无从下手调试，这常成为对事件冒泡不熟悉程序员的棘手问题。\",\"所以必要时，我们要阻止事件冒泡。\",\"我们可以使用事件对象的stopPropagation()方法来阻止冒泡。下面的例子演示了在现代浏览器中通过stopPropagation()来阻止冒泡的方式。\",\"<head> <meta charset=\\\"UTF-8\\\" /> <title>Document</title> <style> .father { width: 200px; height: 200px; background-color: pink; } .son { width: 100px; height: 100px; background-color: skyblue; position: absolute; left: 500px; } </style> </head> <body> <div class=\\\"father\\\" onclick=\\\"test()\\\"> <div class=\\\"son\\\" onclick=\\\"test2()\\\"></div> </div> <script> let test = function () { console.log('你点击了父元素'); }; let test2 = function (event) { console.log('你点击了子元素'); event.stopPropagation(); // 阻止事件向上冒泡 }; </script> </body>\",\"效果：当我们再次点击子元素来触发事件时，不会再同时触发绑定在父元素上面的事件。\",\"-w91\"]},\"1156\":{\"h\":\"5. 阻止默认行为\",\"t\":[\"除了上面所介绍的阻止冒泡，我们还可以阻止一些浏览器的默认行为。常见的默认行为有点击链接后，浏览器跳转到指定页面，或者按一下空格键，页面向下滚动一段距离等。\",\"举个例子：点击下面的超链接时，浏览器默认行为会跳转到百度。\",\"<a href=\\\"http://www.baidu.com\\\">百度</a>\",\"但是有些时候，我们希望阻止这一默认行为。\",\"关于取消默认行为的方式有cancelable、defaultPrevented、preventDefault()和returnValue。不同的 DOM 级别，取消默认行为的方式稍微差异。\",\"在 DOM 0 级事件处理程序中，使用returnValue、preventDefault()和return false都有效。\",\"在 DOM 2 级事件处理程序中，使用return false无效。\",\"在 Internet Explorer 事件处理程序中，使用preventDefault()无效。\",\"1. cancelable\",\"cancelable属性返回一个布尔值，表示事件是否可以取消。该属性为只读属性。返回 true 时，表示可以取消。否则，表示不可取消。\",\"注：Internet Explorer 8 及以下浏览器不支持。\",\"<body> <a id=\\\"test\\\" href=\\\"http://www.baidu.com\\\">百度</a> <script> let test = document.getElementById('test'); test.onclick = function (event) { test.innerHTML = event.cancelable; // true }; </script> </body>\",\"效果：首先 a 标签的文本内容会变为 true，然后跳转到百度页面。表示该跳转的默认行为是能够取消的。\",\"2. preventDefault() 方法\",\"preventDefault()方法是 DOM 中最标准的取消浏览器默认行为的方式，无返回值。\",\"注：Internet Explorer 8 及以下浏览器不支持。\",\"<body> <a id=\\\"test\\\" href=\\\"http://www.baidu.com\\\">百度</a> <script> let test = document.getElementById('test'); test.onclick = function (event) { event.preventDefault(); }; </script> </body>\",\"3. returnValue 属性\",\"该属性可读写，默认值是 true，将其设置为 false 就可以取消事件的默认行为，与preventDefault()方法的作用相同。\",\"最早在 Internet Explorer 的事件对象中实现了这种取消默认行为的方式，但是现在大多数浏览器都实现了该方式。\",\"注：firefox 和 Internet Explorer 9 以上浏览器不支持。\",\"<body> <a id=\\\"test\\\" href=\\\"http://www.baidu.com\\\">百度</a> <script> let test = document.getElementById('test'); test.onclick = function (event) { event.returnValue = false; }; </script> </body>\",\"4. return false\",\"除了以上方法外，取消默认事件还可以使用return false\",\"<body> <a id=\\\"test\\\" href=\\\"http://www.baidu.com\\\">百度</a> <script> let test = document.getElementById('test'); test.onclick = function () { return false; }; </script> </body>\",\"5. defaultPrevented() 方法（扩展）\",\"defaultPrevented属性表示默认行为是否被阻止，返回 true 时表示被阻止，返回 false 时，表示未被阻止。\",\"注：Internet Explorer 8 及以下浏览器不支持。\",\"<body> <a id=\\\"test\\\" href=\\\"http://www.baidu.com\\\">百度</a> <script> let test = document.getElementById('test'); test.onclick = function (event) { // 采用两种不同的方式来阻止浏览器默认行为，这是为了照顾其兼容性 if (event.preventDefault) { event.preventDefault(); } else { event.returnValue = false; } // 将是否阻止默认行为的结果赋值给 <a> 标签的文本内容 test.innerHTML = event.defaultPrevented; }; </script> </body>\",\"效果：点击<a>标签之后里面的文本内容会变为true，因为默认行为已经被阻止。\"]},\"1157\":{\"h\":\"6. 事件流（扩展）\",\"t\":[\"事件对象的eventPhase属性可以返回一个整数值，表示事件目前所处的事件流阶段。0 表示事件没有发生，1 表示当前事件流处于捕获阶段，2 表示处于目标阶段，3 表示冒泡阶段。\",\"注：Internet Explorer 8 及以下浏览器不支持。\",\"<body> <button id=\\\"test\\\">点击我</button> <script> test.onclick = function () { test.innerText = event.eventPhase; // 2 }; </script> </body>\",\"效果：点击按钮后里面的文本变为 2，说明处于目标阶段。\",\"<body> <button id=\\\"test\\\">点击我</button> <script> document.addEventListener( 'click', function () { test.innerText = event.eventPhase; // 1 }, true ); // 最后的布尔参数值为 true，说明在捕获阶段处理事件 </script> </body>\",\"效果：点击按钮后里面的文本变为 1，说明处于捕获阶段。\",\"<body> <button id=\\\"test\\\">点击我</button> <script> document.addEventListener( 'click', function () { test.innerText = event.eventPhase; // 3 }, false ); // 最后的布尔参数值为 false，说明在冒泡阶段处理事件 </script> </body>\",\"效果：点击按钮后里面的文本变为 3，说明处于冒泡阶段。\"]},\"1158\":{\"h\":\"五、事件委托\",\"t\":[\"前面在介绍事件冒泡的时候，讲过了事件冒泡的缺点，所以必要的时候，我们需要阻止事件冒泡。但是事件冒泡并不是说只有缺点没有优点，事件冒泡一个最大的好处就是可以实现事件委托。\",\"事件委托，又被称之为事件代理。在 JavaScript 中，添加到页面上的事件处理程序数量将直接关系到页面整体的运行性能。导致这一问题的原因是多方面的。\",\"首先，每个函数都是对象，都会占用内存。内存中的对象越多，性能就越差。其次，必须事先指定所有事件处理程序而导致的 DOM 访问次数，会延迟整个页面的交互就绪时间。\",\"对事件处理程序过多问题的解决方案就是事件委托。\",\"事件委托利用了事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。例如，click 事件会一直冒泡到 document 层次。也就是说，我们可以为整个页面指定一个 onclick 事件处理程序，而不必给每个可单击的元素分别添加事件处理程序。\",\"举一个具体的例子：例如现在我的列表项有如下内容\",\"<body> <ul id=\\\"color-list\\\"> <li>red</li> <li>yellow</li> <li>blue</li> <li>green</li> <li>black</li> <li>white</li> </ul> </body>\",\"如果我们想把事件监听器绑定到所有的 li 元素上面，这样它们被单击的时候就弹出一些文字，为此我们需要给每一个元素来绑定一个事件监听器。\",\"虽然上面的例子中好像问题也不大，但是想象一下如果这个列表有 100 个元素，那我们就需要添加 100 个事件监听器，这个工作量还是很恐怖的。\",\"这个时候我们就可以利用事件代理来帮助我们解决这个问题。将事件监听器绑定到父元素 ul 上，这样即可对所有的 li 元素添加事件，如下：\",\"<body> <ul id=\\\"color-list\\\"> <li>red</li> <li>yellow</li> <li>blue</li> <li>green</li> <li>black</li> <li>white</li> </ul> <script> let colorList = document.getElementById('color-list'); colorList.addEventListener('click', function () { alert('Hello'); }); </script> </body>\",\"现在我们单击列表中的任何一个 li 都会弹出东西，就好像这些 li 元素就是 click 事件的目标一样。并且如果我们之后再为这个 ul 添加新的 li 元素的话，新的 li 元素也会自动添加上相同的事件。\",\"但是，这个时候也存在一个问题，虽然我们使用事件代理避免了为每一个 li 元素添加相同的事件，但是如果用户没有点击 li，而是点击的 ul，同样也会触发事件。这也很正常，因为我们事件就是绑定在 ul 上面的。\",\"此时我们可以对点击的节点进行一个小小的判断，从而保证用户只在点击 li 的时候才触发事件，如下：\",\"<body> <ul id=\\\"color-list\\\"> <li>red</li> <li>yellow</li> <li>blue</li> <li>green</li> <li>black</li> <li>white</li> </ul> <script> let colorList = document.getElementById('color-list'); colorList.addEventListener('click', function (event) { if (event.target.nodeName === 'LI') { alert('点击 li'); } }); </script> </body>\"]},\"1159\":{\"h\":\"六、剪贴板事件\"},\"1160\":{\"h\":\"1. 剪贴板事件基本介绍\",\"t\":[\"剪贴板操作看起来不起眼，但却十分有用，可以增强用户体验，方便用户操作。剪贴板操作包括剪切、复制和粘贴这 3 个操作，快捷键分别对应的是ctrl+x、ctrl+c、ctrl+v。当然也可以使用鼠标右键菜单进行操作。\",\"关于这 3 个操作对应下列剪贴板事件：\",\"cut：在发生剪切操作时触发。 copy：在发生复制操作时触发。 paste：在发生粘贴操作时触发。\",\"注：Internet Explorer 浏览器只有在文本中选定字符时，copy 和 cut 事件才会发生。且在非文本框中（如 div 元素）只能发生 copy 事件，firfox 浏览器只有焦点在文本框中才会发生 paste 事件。\",\"下面是一个剪贴板事件的基本操作示例，如下：\",\"<body> <input value=\\\"text\\\" id=\\\"test\\\" /> <script> test.onpaste = test.oncopy = test.oncut = function (e) { e = e || event; test.value = e.type; return false; }; </script> </body>\",\"效果：当对文本框里的内容做剪切、复制或粘贴时，文本框里的内容会产生变化，显示用户所做的操作。\",\"2018-12-18 21.09.48-w158\",\"除了上面所介绍的那 3 个事件以外，和剪贴板相关的还有如下 3 个事件：\",\"beforecopy：在发生复制操作前触发。 beforecut：在发生剪切操作前触发。 beforepaste：在发生粘贴操作前触发。\",\"示例代码如下：\",\"<body> <input value=\\\"text\\\" id=\\\"test\\\" /> <script> test.onbeforepaste = test.onbeforecopy = test.onbeforecut = function (e) { e = e || event; test.value = e.type; return false; }; </script> </body>\"]},\"1161\":{\"h\":\"2. 对象方法\",\"t\":[\"剪贴板中的数据存储在clipboardData对象中。\",\"对于 Internet Explorer 浏览器来说，这个对象是 window 对象的属性。对于其他浏览器来说，这个对象是事件对象的属性。可以向下面这样书写，来兼容两种不同的浏览器：\",\"e = e || event; let clipboardData = e.clipboardData || window.clipboardData;\",\"这个对象有 3 个方法：getData()、setData()和clearData()。下面依次对这 3 个方法进行介绍。\",\"getData() 方法\",\"getData()方法用于从剪贴板中取得数据，它接受一个参数，即要取得的数据的格式。\",\"在 Internet Explorer 中，有 2 种数据格式：text 和 URL。在其他浏览器中，这个参数是一种 MIME 类型；不过，可以用 text 代表。\",\"注：在 Internet Explorer 浏览器中，cut和copy事件中的getData()方法始终返回 null，而其他浏览器始终返回空字符串''。但如果和setDada()方法配合，就可以正常使用。\",\"示例如下：\",\"<body> <input id=\\\"test\\\" value=\\\"123\\\" /> <script> test.onpaste = function (e) { e = e || event; let clipboardData = e.clipboardData || window.clipboardData; test.value = '测试' + clipboardData.getData('text'); return false; }; </script> </body>\",\"效果：复制文本框中的内容，然后粘贴。粘贴时前面会添加\\\"测试\\\"的字符串。\",\"2018-12-18 21.38.46-w158\",\"setData() 方法\",\"setData()方法的第 1 个参数也是数据类型，第 2 个参数是要放在剪贴板中的文本。对于第 1 个参数的规则与getData()相同。\",\"注：在 Internet Explorer 浏览器中，该方法在成功将文本放到剪贴板中后，返回 true，否则返回 false。而其他浏览器中，该方法无返回值。在 paste 事件中，只有 Internet Explorer 浏览器可以正常使用setData()方法，chrome 浏览器会失败，而 firefox 浏览器会报错。\",\"示例如下：\",\"<body> <input id=\\\"test\\\" value=\\\"123\\\" /> <script> test.oncopy = function (e) { e = e || event; var clipboardData = e.clipboardData || window.clipboardData; clipboardData.setData('text', '测试'); test.value = clipboardData.getData('text'); return false; }; </script> </body>\",\"效果：对文本框中的内容进行复制时，文本框中的内容会变为\\\"测试\\\"。\",\"2018-12-18 21.41.55-w152\",\"clearData() 方法\",\"clearData()方法用于从剪贴板中删除数据，它接受一个参数，即要取得的数据的格式。\",\"在 Internet Explorer 中，有两种数据格式：text 和 URL。在其他浏览器中，这个参数是 1 种 MIME 类型。不过，可以用 text 表示。\",\"注：在 Internet Explorer 浏览器中，该方法在成功将文本放到剪贴板中后，返回 true，否则返回 false。而其他浏览器该方法的返回值为 undefined。在 paste 事件中，chrome 浏览器和 Internet Explorer 浏览器可以正常使用setData()方法，而 firefox 浏览器会报错。\",\"示例如下：\",\"<body> <input id=\\\"test\\\" value=\\\"123\\\" /> <script> test.oncopy = function (e) { e = e || event; var clipboardData = e.clipboardData || window.clipboardData; test.value = clipboardData.clearData('text'); return false; }; </script> </body>\",\"效果：对文本框中的内容进行复制时，文本框中的内容会变为 undefined\",\"2018-12-18 21.46.59-w150\"]},\"1162\":{\"h\":\"3. 实际应用\",\"t\":[\"1. 屏蔽剪贴板\",\"通过阻止默认行为来屏蔽剪贴板。对于一些受保护的文档来说是一种选择，示例代码如下：\",\"<body> <input value=\\\"text\\\" /> <button id=\\\"test\\\">屏蔽剪贴板</button> <script> test.onclick = function () { document.oncopy = document.oncut = document.onpaste = function (e) { e = e || event; alert('该文档不允许复制剪贴操作，谢谢配合'); return false; }; }; </script> </body>\",\"效果如下：\",\"2018-12-18 21.56.52-w862\",\"2. 过滤字符\",\"如果确保粘贴到文本框中的文本中包含某些字符，或者符合某种形式时，可以使用剪贴板事件。比如只允许粘贴数字。\",\"<body> <p>123hello</p> <p>45678</p> <input id=\\\"test\\\" /> <script> test.onpaste = function (e) { e = e || event; var clipboardData = e.clipboardData || window.clipboardData; if (!/^\\\\d+$/.test(clipboardData.getData('text'))) { return false; } }; </script> </body>\",\"效果：只允许粘贴数字。\",\"2018-12-18 22.00.03-w186\"]},\"1163\":{\"h\":\"七、一些 event 的记录\",\"t\":[\"contextmenu \",\"contextmenu 事件会在用户尝试打开上下文菜单时被触发。该事件通常在鼠标点击右键或者按下键盘上的菜单键时被触发，如果使用菜单键，该上下文菜单会被展示 到所聚焦元素的左下角，但是如果该元素是一棵 DOM 树的话，上下文菜单便会展示在当前这一行的左下角.\",\"通过取消默认行为可以自定义右键操作\"]},\"1164\":{\"c\":[\"前端\"]},\"1165\":{\"c\":[\"事件\"]},\"1166\":{\"h\":\"线程机制与事件机制\"},\"1167\":{\"h\":\"一、线程与进程\"},\"1168\":{\"h\":\"1. 进程\",\"t\":[\"程序的一次执行, 它占有一片独有的内存空间\",\"可以通过 windows 任务管理器查看进程\",\"浏览器是多进程运行的\",\"image-20221119092759496\",\"其中最主要的进程有： \",\"浏览器进程----主要负责界面显示、用户交互、子进程管理等，浏览器进程内部会启动多个线程处理不同的任务\",\"网络进程----负责加载网络资源，网络进程内部会启动多个线程来处理不同的网络任务\",\"渲染进程----渲染进程启动后，会开启一个渲染主线程，主线程负责执行 HTML、CSS、JS 代码。默认情况下，浏览器会为每个标签页开启一个新的渲染进程，以保证不同的标签页之间不互相影响。\"]},\"1169\":{\"h\":\"2. 线程:\",\"t\":[\"是进程内的一个独立执行单元\",\"是程序执行的一个完整流程\",\"是 CPU 的最小的调度单元\"]},\"1170\":{\"h\":\"3. 关系\",\"t\":[\"一个进程至少有一个线程(主)\",\"程序是在某个进程中的某个线程执行的\"]},\"1171\":{\"h\":\"二、浏览器内核模块组成\"},\"1172\":{\"h\":\"1. 主线程（渲染）\",\"t\":[\"js 引擎模块 : 负责 js 程序的编译与运行\",\"html,css 文档解析模块 : 负责页面文本的解析（读取划分页面文本）\",\"DOM/CSS 模块 : 负责 dom/css 在内存中的相关处理 （将划分好的创建对象）\",\"布局和渲染模块 : 负责页面的布局和效果的绘制(内存中的对象)\",\"提示\",\"因为要处理的问题很多，所以主线程必须要根据某种方法进行任务调度\"]},\"1173\":{\"h\":\"2. 分线程（浏览器执行，不一定在同一进程中）\",\"t\":[\"定时器模块 : 负责定时器的管理\",\"DOM 事件模块 : 负责事件的管理\",\"网络请求模块 : 负责 Ajax 请求\"]},\"1174\":{\"h\":\"三、js 线程\",\"t\":[\"js 是单线程执行的(回调函数也是在主线程)\",\"H5 提出了实现多线程的方案: Web Workers\",\"只能在主线程更新界面\"]},\"1175\":{\"h\":\"四、定时器问题\",\"t\":[\"定时器并不能真正完全定时执行(回调代码要在所有初始化代码执行完之后才会执行)\",\"如果在主线程执行了一个长时间的操作, 可能导致延时才处理\"]},\"1176\":{\"h\":\"五、事件处理机制\"},\"1177\":{\"h\":\"1. 代码分类\",\"t\":[\"初始化执行代码: 包含绑定 dom 事件监听, 设置定时器, 发送 ajax 请求的代码\",\"回调执行代码: 处理回调逻辑\"]},\"1178\":{\"h\":\"2. js 引擎执行代码基本流程\",\"t\":[\"初始化代码===>回调代码(异步执行)\"]},\"1179\":{\"h\":\"3. 模型的 2 个重要组成部分\",\"t\":[\"事件管理模块\",\"消息队列\"]},\"1180\":{\"h\":\"4. 模型的运转流程\",\"t\":[\"执行初始化代码, 将某些任务由管理模块交给对应的线程执行，主线程自身立即结束任务的执行，转而执行后续代码。\",\"当其他线程完成时, 管理模块会将先前传递的回调函数及其数据包装成任务，加入到消息队列的末尾排队，等待主线程的调度执行。\",\"提示\",\"上述内容为 JS 的异步模式\",\"事件循环模型\",\"在最开始的时候，渲染主线程会进入一个无限循环\",\"每次循环会检查消息队列中是否有任务存在，如果有，就取出第一个任务执行，执行完后进入下一次循环；如果没有，则进入休眠状态。\",\"其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加到消息队列的末尾。在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务。\",\"提示\",\"上述内容为事件循环的处理机制\"]},\"1181\":{\"h\":\"5. 任务存在优先级么？\",\"t\":[\"任务本身没有优先级，在消息队列先进先出，但是消息队列是有优先级的\",\"随着浏览器的复杂度急剧提升,W3C 不再使用宏队列的说法\",\"如今认为:\",\"每个任务都有一个任务类型,同一个类型的任务必须在同一队列,不同类型的任务可以分属不同的队列.在一次事件循环中,浏览器可以根据实际情况从不同的队列中取出执行任务.\",\"浏览器必须准备好一个微队列,微队列的任务优先所有其他任务执行。\",\"在目前 chrome 的实现中,主要的队列优先级由高到低:\",\"微队列(vip 最高优先级)---交互队列(高优先级)----(网络队列、延时队列)(中优先级)\",\"网络队列与延时队列的执行顺序上，chrome 测试为：第一次的网络请求优先执行,然后按顺序执行所有的延时队列,接着再执行剩余的网络任务。\",\"image-20221119104125698\",\"测试代码：\",\"//死循环2s function delay(duration) { const start = Date.now(); while (Date.now() - start < duration) {} } //添加延时队列任务 function addDelay(id) { console.log('添加延时队列' + id); setTimeout(() => { console.log('延时队列执行' + id); }, 100); delay(2000); } //添加网络队列任务 function addNetWork(id) { console.log('添加网络队列' + id); fetch('https://jsonplaceholder.typicode.com/todos/1', { method: 'get' }).then(() => { console.log('网络队列执行' + id); }); delay(2000); } //添加交互队列任务 function addInteraction() { console.log('添加交互队列1'); const interaction = document.getElementById('interaction'); interaction.onclick = () => { console.log('交互队列执行1'); }; delay(2000); } function addInteraction2() { console.log('添加交互队列2'); const interaction2 = document.getElementById('interaction2'); interaction2.onclick = () => { console.log('交互队列执行2'); }; delay(2000); } function addInteraction3() { console.log('添加交互队列3'); const interaction2 = document.getElementById('interaction3'); interaction3.onclick = () => { console.log('交互队列执行3'); }; delay(2000); } const begin = document.getElementById('begin'); begin.onclick = () => { addDelay(1); addDelay(2); addDelay(3); addDelay(4); addDelay(5); addNetWork(1); addNetWork(2); addNetWork(3); addNetWork(4); addNetWork(5); // addInteraction(); // addInteraction2(); // addInteraction3(); console.log('==========='); };\"]},\"1182\":{\"h\":\"六、H5 Web Workers\",\"t\":[\"可以让一个 js 模块在分线程执行\",\"H5 Web Workers(多线程)\",\"Worker（主线程）\",\"var worker = new Worker('worker.js'); //用来监听另一个线程发送过来的数据 worker.onMessage = function (event) { event.data; }; //向另一个线程发送数据 worker.postMessage(data1);\",\"js 模块（分线程）\",\"//自定义函数 function fibonacci(n) { return n <= 2 ? 1 : fibonacci(n - 1) + fibonacci(n - 2); //递归调用 } console.log(this); //全局对象不再是window this.onmessage = function (event) { var number = event.data; console.log('分线程接收到主线程发送的数据: ' + number); //计算 var result = fibonacci(number); postMessage(result); console.log('分线程向主线程返回数据: ' + result); // alert(result) alert是window的方法, 在分线程不能调用 };\",\"分线程中的全局对象不再是 window, 所以在分线程中不可能更新界面\",\"问题:\",\"worker 内代码不能操作 DOM 更新 UI\",\"不是每个浏览器都支持这个新特性\",\"不能跨域加载 JS\",\"svn 版本控制\",\"svn server\"]},\"1183\":{\"c\":[\"前端\"]},\"1184\":{\"c\":[\"进程与线程\",\"事件循环机制\",\"Web Worker\"]},\"1185\":{\"h\":\"async和await\"},\"1186\":{\"h\":\"和 的基本使用\",\"t\":[\"function* fn() { console.log('pause' + (yield 1)); yield 2; yield console.log('hhh'); } let test = fn(); console.log(test.next()); //{value: 1, done: false} console.log(test.next()); //pauseundefined {value: 2, done: false} console.log(test.next()); //hhh {value: undefined, done: false}\",\"Generator函数执行之后生成一个指针对象（迭代器对象），使用实例.next()可以执行函数内代码，直到遇见yield关键字会交出执行权，跳出函数外继续执行后面的代码。\",\"实例.next()的返回值是一个普通的对象，包含遇到的yield后面表达式的值value和是否执行完毕的标志done。\",\"yield表达式本身的值为 undefined，可以通过实例.next(v)中的 v 来赋值。\"]},\"1187\":{\"h\":\"和\",\"t\":[\"async函数是Generator函数的一种语法糖，Generator 函数需要手动的来切换执行权（next 方法进入函数内，yield 切出函数外），而 async 函数内置了一个自动执行器，大致原理如下：\",\"async function fn(args) { // ... } // 等同于 function fn(args) { return spawn(function* () { //spawn为自动执行器 // ... }); }\",\"function spawn(genF) { return new Promise(function (resolve, reject) { const gen = genF(); function step(nextF) { let next; try { next = nextF(); } catch (e) { return reject(e); } if (next.done) { return resolve(next.value); } Promise.resolve(next.value).then( function (v) { step(function () { return gen.next(v); }); }, function (e) { step(function () { return gen.throw(e); }); } ); } step(function () { return gen.next(undefined); }); }); }\",\"自动执行器执行Generator函数，生成指针对象，然后递归调用 next 方法直到结束。\",\"Promise.resolve(next.value).then(递归调用)，前半句将next.value，即await(yield)后表达式的值转为 promise 对象，然后将递归调用的任务放在 then 中处理。\",\"所以实际的执行顺序为：await 后表达式执行（将下次递归调用任务放入微队列）>执行主代码>从事件队列中加载任务执行。\",\"不会阻塞主线程\"]},\"1188\":{\"h\":\"练习\",\"t\":[\"const test = async () => { console.log('start'); const res = await new Promise((resolve, rej) => { setTimeout(() => { console.log(1); }, 0); resolve(); }).then(() => { console.log('a'); }); const res2 = await new Promise((resolve, rej) => { setTimeout(() => { console.log(2); }, 0); resolve(); }).then(() => { console.log('b'); }); console.log('mid'); }; test(); console.log('end'); for (let i = 0; i < 10; i++) { console.log('==='); } /** start end 10次=== a b mid 1 2 **/\"]},\"1189\":{\"h\":\"总结\",\"t\":[\"(async (){ const res1 = await 任务1; const res2 = await 任务2; })()\",\"执行顺序类似于promise的嵌套：任务1.then(任务2.then(...))，不会阻塞主线程。\",\"res 的值为任务返回的值 \",\"promise 对象 resolve 传递的参数（无 then）\",\"后续处理后返回的值（有 then）\"]},\"1190\":{\"c\":[\"前端\"]},\"1191\":{\"c\":[\"async和await\"]},\"1192\":{\"h\":\"JQuery\"},\"1193\":{\"h\":\"一、jQuery 简介\",\"t\":[\"这章我们将来学习什么是 jQuery 以及它的用法。这部分内容涉及到大量 API 的使用。所以，只要掌握了如何查阅和调用这些方法，就基本掌握了这个库的使用。接下来将从以下几个方面来学习它们：\",\"jQuery 的核心方法\",\"jQuery 选择器\",\"jQuery 的筛选方法\",\"jQuery 中操作属性的方法\",\"jQuery 中操作 CSS 的方法\",\"jQuery 的文档处理方法\",\"jQuery 的事件处理\",\"jQuery 动画\",\"jQuery 的链式操作\",\"jQuery 性能优化\",\"jQuery 的 Ajax 方法\"]},\"1194\":{\"h\":\"1. 什么是 jQuery\",\"t\":[\"jQuery 不是用来替代原生 JS 的，它只是在原生 JS 的基础上进行了一层封装。目的是简化 JS 的开发，提高开发效率。\",\"从它的 API 文档可以看到，它提供了大量的 API 方法供我们使用：选择器、属性操作、CSS、文档处理、时间、动画、Ajax 等等。这些方法实际上都是为了简化原生 JS 的代码而出现的。\",\"比如，我想通过 JS 把一个列表中所有文本的字体颜色都设置为红色，原生 JS 的代码应该这样写：\",\"<ul> <li>选择器</li> <li>筛选</li> <li>属性</li> <li>CSS</li> </ul> <script> let lis = document.getElementsByTagName('li'); for (let i = 0; i < lis.length; i++) { lis[i].style.color = 'red'; } </script>\",\"如果是 jQuery 呢：\",\"<script> $('li').css('color', 'red'); </script>\",\"是不是很简单！对，这就是 jQuery，简化一切。\"]},\"1195\":{\"h\":\"2. jQuery 的特点\",\"t\":[\"刚才我们了解了什么是 jQuery，也看到一个简单的 jQuery 的应用，下面我们来看看 jQuery 有什么特点。\",\"轻量\",\"强大的选择器\",\"出色的 DOM 操作的封装\",\"可靠的事件处理机制\",\"完善的 Ajax\",\"解决绝大部分兼容性问题\",\"链式操作\",\"丰富的插件\",\"完善的文档\",\"开源\",\"这些都是 jQuery 库的优点。不过总结下来就 2 个重要的特点：\",\"轻量，开发起来更为简洁方便，提高编码效率。\",\"兼容性，能够解决绝大部分浏览器的兼容性问题。\"]},\"1196\":{\"h\":\"3. jQuery 的版本\",\"t\":[\"目前最新版本为 3.X。不过 1.X 版本的仍然还有在使用。这是因为 1.X 版本仍然还能兼容 IE 8 及以下的浏览器。从 2.X 版本后，IE 8 及以下的浏览器就不再受到支持。如果还要考虑老的浏览器，可以使用 1.X 版本的，它目前已经停止更新，最后一个版本是 1.12.4。后续的课程中主要使用的还是 1.X 版本的，他们的核心库及常用的方法没有什么太大的区别。\"]},\"1197\":{\"h\":\"二、jQuery 核心方法\",\"t\":[\"关于 jQuery 的核心方法可以参看 API 文档。这里主要讲讲其中比较关键的一些方法。\"]},\"1198\":{\"h\":\"1. jQuery 方法\",\"t\":[\"首先我们来看看 jQuery 的最核心方法：jQuery()\",\"这个方法能够构建一个 jQuery 对象。你记住，要想调用 jQuery 的各种方法，首先需要得到一个 jQuery 对象。它还有个别名：$()\",\"二者是等价的，一般情况下，我们都会使用更加简便的符号，只有当被其他库占用时，才会使用它的全名jQuery()。 这个核心方法的参数有很多：\",\"// 通过选择器获取 $('#id'); // 标签对象转换为 jQuery 对象 $(document.body); // 将数组对象转换为 jQuery 对象 $([1, 2, 3]); // 将html标签转换为 jQuery 对象 $('<p></p>'); // $(document).ready()的缩写形式，表示当 DOM 文档加载完毕时执行回调 $(function () {});\",\"由此可见，构建 jQuery 对象方式多种多样。那么之前我们用到的 JS 原生对象都能转换为 jQuery 对象，从而使用它的各种方法来实现效果。\",\"既然原生对象能够转换为 jQuery 对象，那么一个 jQuery 对象又能否转换为 JS 对象呢？比如下面这个例子：\",\"$('#root').html('<h1>根元素</h1>');\",\"这是通过 id 选择器获取的 jQuery 对象，然后利用 html 方法将一个 h1 标签增加到 id 为 root 的标签中。那如果我不想用 jQuery 的 html 方法，而是想用原生 DOM 的 innerHTML 来实现呢？\",\"$(\\\"#root).get(0).innerHTML = \\\"<h1>根元素</h1>\\\";\",\"这个 get 方法就是将 jQuery 对象转换为原生对象，其中的 0 表示下标。因为通过选择器可能获取多个元素。 还有种更简便的方法转换：\",\"$(\\\"#root)[0].innerHTML = \\\"<h1>根元素</h1>\\\";\"]},\"1199\":{\"h\":\"2. each 方法\",\"t\":[\"这是循环 jQuery 对象的方法。\",\"$('#root > p').each(function (i) { console.log($(this), i); });\",\"each 和循环数组的 forEach 类似，其中的 this 表示每次遍历出来的对象。注意，该对象是原生对象而不是 jQuery 对象。如果想调用 jQuery 的方法，需要在它外面包裹一个$()。 回调函数中还有个参数，它是下标值。 这个 each 方法不能循环 JS 中的数组，如果想要循环数组需要先将它转换为 jQuery 对象，比如：\",\"let ary = [1, 2, 3]; $(ary).each(function () { console.log(this); });\"]},\"1200\":{\"h\":\"3. document.ready 方法\",\"t\":[\"在 jQuery 里面，我们可以看到两种写法：\",\"$(document).ready(function () {});\",\"以及\",\"$(function () {});\",\"这两个方法的效果都是一样的，后面的写法是前面写法的一种简写。它们都是在 DOM 文档树加载完之后执行一个函数\",\"注：这里面的文档树加载完不代表全部文件加载完。\",\"在我们原生的 JavaScript 中，会经常使用 window.onload 方法。该方法是在 DOM 文档树加载完和**所有文件（例如图片文件加载）**加载完之后执行一个函数。\",\"所以说，$(document).ready要比 window.onload 方法先执行。举个例子：如果一个页面中含有大量的图片，那么 window.onload 方法会等待所有图片加载完成以后才执行，而$(document).ready则是在图片节点创建好之后就会执行。\"]},\"1201\":{\"h\":\"4. extend 方法\",\"t\":[\"关于 extend 方法大致有 3 种用法，总结如下：\",\"（ 1 ）$.extend({})，用于为 jQuery 类添加方法，可以理解为扩展静态方法。示例如下：\",\"$.extend({ max: function (a, b) { return a > b ? a : b; }, min: function (a, b) { return a < b ? a : b; }, }); console.log($.max(3, 5)); // 5 console.log($.min(3, 5)); // 3\",\"（ 2 ）$.fn.extend({})插件，对 jQuery.prototype 进行扩展，提到插件那么就得说一下另一种方法$.fn.method = function(){}。示例如下：\",\"$.fn.method = function(){}用于给 jQuery 对象扩展一个方法。\",\"<body> <input type=\\\"text\\\" /> <script src=\\\"./jquery-1.12.4.min.js\\\"></script> <script> // 扩展一个方法 $.fn.toColor = function (color) { $(this).css('background', color); }; // 在 jQuery 实例对象上面使用 $('input').toColor('red'); </script> </body>\",\"效果：\",\"-w372\",\"$.fn.extend({})用于为 jQuery 对象扩展多个方法。\",\"<body> <input type=\\\"text\\\" /> <script src=\\\"./jquery-1.12.4.min.js\\\"></script> <script> // 扩展多个方法 $.fn.extend({ toColor: function (color) { $(this).css('background', color); }, toWidth: function (width) { $(this).css('width', width); }, }); // 在 jQuery 实例对象上面使用 $('input').toColor('red'); $('input').toWidth('200px'); </script> </body>\",\"效果：\",\"-w378\",\"注：jQuery.fn.extend 等价于 jQuery.prototype.extend\",\"（ 3 ）继承。进行浅拷贝与深拷贝。\",\"浅拷贝。$.extend(a,b)表示 a 使用 b 的属性。\",\"let a = {}; let b = { name: 'xiejie', age: 18, wife: { name: 'yajing', age: 20, }, }; $.extend(a, b); // 进行浅拷贝 console.log(a.name); // xiejie console.log(a.age); // 18 console.log(a.wife.name); // yajing a.wife.name = 'song ya jing'; // 因为是浅拷贝，所以 b 对象的值也会被改变 console.log(b.wife.name); // song ya jing\",\"深拷贝。$.extend(true,a,b)，在最前面传入参数 true 即可。\",\"let a = {}; let b = { name: 'xiejie', age: 18, wife: { name: 'yajing', age: 20, }, }; $.extend(true, a, b); // 进行深拷贝 console.log(a.name); // xiejie console.log(a.age); // 18 console.log(a.wife.name); // yajing a.wife.name = 'song ya jing'; // 因为是深拷贝，所以 b 对象的值不会被改变 console.log(b.wife.name); // yajing\",\"值得一提的是，在使用$.extend()方法进行对象拷贝时，无论后面有多少个对象，都将成为第一个对象的属性。示例如下：\",\"let a = {}; let b = { name: 'xiejie' }; let c = { age: 18 }; $.extend(a, b, c); console.log(a.name); // xiejie console.log(a.age); // 18\"]},\"1202\":{\"h\":\"5. 其他常用属性和方法\",\"t\":[\"length - 获取 jQuery 对象的长度。\",\"size() - 获取 jQuery 对象的长度。\",\"index() - 搜索指定元素在 jQuery 对象中的下标值。\",\"更多的方法请参看 API 文档。\"]},\"1203\":{\"h\":\"三、jQuery 选择器\",\"t\":[\"关于 jQuery 中可用的选择器可以参看 API 文档。这里主要讲讲其中比较常用的一些方法。 从文档中可以看出，绝大部分的选择器和 CSS 的选择器是相同的。因此只要你有 CSS 的基础，jQuery 的选择器学起来应该说非常容易。 下面列举一些 jQuery 特有的选择器：\",\":first\",\":last\",\":even\",\":odd\",\":eq\",\":gt\",\":lt\",\":header\",\":animated\",\":contains(text)\",\":has(selector)\",\":parent\",\":hidden\",\":visible\",\":input\",\":text\",\":password\",\":radio\",\":checkbox\",\":submit\",\":image\",\":reset\",\":button\",\":file\",\":hidden\",\":selected\",\"大家可以通过查阅 API 文档来了解这些选择器的用法。\"]},\"1204\":{\"h\":\"四、jQuery 的筛选方法\",\"t\":[\"在前面一节中我们学习了如何通过选择器来创建或获取 jQuery 对象。但是，假如现在我已经有一个 jQuery 对象了，然后需要获取它的子节点怎么办呢？筛选方法为我们提供了解决方案。\",\"下面我们来看看比较常用的筛选方法：\",\"eq()\",\"first()\",\"last()\",\"hasClass()\",\"filter()\",\"is()\",\"map()\",\"has()\",\"not()\",\"slice()\",\"children()\",\"find()\",\"next()\",\"nextAll()\",\"nextUntil()\",\"parent()\",\"parents()\",\"parentsUntil()\",\"prev()\",\"prevAll()\",\"prevUntil()\",\"siblings()\",\"contents()\",\"end()\",\"下面看个例子：\",\"let elements = $('p'); console.log(elements.eq(0));\",\"其中 elements 是通过元素选择器获取的 jQuery 对象，其中可能包含多个 p 元素节点。接下来我用 eq 方法可以获取其中的某一个节点对象，eq 方法中的数字代表着下标值，就像访问数组一样。\",\"这个还要注意一点，eq 方法和 get 方法的区别：\",\"console.log(elements.eq(0)); console.log(elements.get(0));\",\"二者的不同就是 eq 得到的是 jQuery 对象，而 get 得到的是 JS 对象。\",\"这些筛选方法基本都是这样使用，而且通过筛选方法得到的都是 jQuery 对象。具体的用法大家可以参考 API 文档。\",\"其中 end 方法涉及到链式操作的相关知识，关于这部分内容在后面的章节中会详解。\"]},\"1205\":{\"h\":\"五、jQuery 中操作属性的方法\",\"t\":[\"这节课咱们来看看 jQuery 中对属性的一些操作方法，下面是 jQuery 提供的属性方法：\",\"attr\",\"removeAttr\",\"prop\",\"removeProp\",\"addClass\",\"removeClass\",\"toggleClass\",\"html\",\"text\",\"val\",\"这些方法都很常用。比如访问和设置属性的 attr，访问和设置特殊属性的 prop，增加 class 属性的 addClass，删除 class 属性的 removeClass，切换 class 属性的 toggleClass，获取和设置标签之间内容的 html，获取设置标签之间文本的 text，访问和设置 value 属性的 val。\",\"我们先来看看 attr 的用法，如果是获取属性，可以用一个参数代表要获取的属性名：\",\"$('a').attr('href');\",\"如果要设置属性，可以这样：\",\"$('a').attr('title', '百度');\",\"如果设置多个属性，可以用 JSON 对象：\",\"$('a').attr({ href: 'https://www.baidu.com', title: '百度' });\",\"removeAttr 的参数只有 1 个，就是要删除的属性名：\",\"$('a').removeAttr('title');\",\"attr 和 prop 的用法完全一样，它们的区别在于 attr 是针对普通属性。prop 是针对特殊属性。大多数属性都是普通属性，比如 id、name、title、alt 等等。而特殊属性的值只有 true 和 false，如果直接将它们写在标签上，只需要写一个属性名即可，比如：\",\"<input type=\\\"text\\\" disabled > <input type=\\\"checkbox\\\" checked >\",\"类似这样的特殊有：\",\"autofocus\",\"readonly\",\"disabled\",\"multiple\",\"checked\",\"selected\",\"prop 就专为对这些属性进行访问和设置的，示例如下：\",\"$(':checkbox').prop('checked'); //获取复选框的选中状态 $('options:selected').prop('selected', false); //取消所有选中的option\",\"html、text、val 是非常重用的 3 个方法，原生 JS 有 3 个和它们对应，分别是 innerHTML、innerText、value。\",\"let root = document.getElementById('root'); root.innerHTML = '<p></p>'; $('#root').html('<p></p>'); root.firstChild.innerText = '添加元素'; $('#root>p').text('添加元素'); let phone = document.getElementById('phone'); phone.value = '默认值'; $('#phone').val('默认值');\",\"方法的更多具体细节请参看 API 文档。\"]},\"1206\":{\"h\":\"六、jQuery 中操作 CSS 的方法\",\"t\":[\"jQuery 提供了专门操作 CSS 的一些方法：\",\"css\",\"offset\",\"position\",\"scrollTop\",\"scrollLeft\",\"height\",\"width\",\"innerHeight\",\"innerWidth\",\"outerHeight\",\"outerWidth\",\"其中最常用的是 css，它既可以获取呈现在页面上的最终样式。又可以设置内嵌样式，使用它就相当于设置样式时用了 style 属性，获取时用了getComputedStyle。\",\"获取样式：\",\"$('#root').css('color');\",\"设置单个样式：\",\"$('#root').css('color', 'red');\",\"设置多个样式：\",\"$('#root').css({ color: 'red', fontSize: 20, width: 100, height: 100, border: '1px solid red', });\",\"多个样式可以使用 JSON 对象。注意，如果设置的属性有多个单词构成，需要使用驼峰命名法。\"]},\"1207\":{\"h\":\"offset 和 position\",\"t\":[\"这 2 个方法都是获取节点的位置，返回的是一个 JSON 对象，包括 left 和 top 属性。其中 offset 表示获取指定节点相对于视口的位置。这个视口是指当前页面的可见区域。\",\"<body> <div style=\\\"width:150px;height:150px;background:blue;\\\"> <div id=\\\"sub\\\" style=\\\"width:75px;height:75px;background:red;margin:100px\\\"></div> </div> <script src=\\\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\\\"></script> <script> console.log($('#sub').position()); </script> </body>\",\"效果：\",\"-w635\",\"position 是获取相对于父元素的偏移位置。\",\"<body> <div style=\\\"width:150px;height:150px;background:blue;position:relative;left:100px;top:100px;\\\"> <div id=\\\"sub\\\" style=\\\"width:75px;height:75px;background:red;position:relative;left:50px;top:50px;\\\"></div> </div> <script src=\\\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\\\"></script> <script> console.log($('#sub').position()); </script> </body>\",\"效果：\",\" 不过要注意的是，子元素会去找离它最近的已经定位的父元素来计算偏移。如果没有设置父元素的定位属性，那么最终会找到根元素。因此，一般来说，通过它获取的偏移需要将父元素及子元素都设置定位属性。\",\"方法的更多具体细节请参看 API 文档。\"]},\"1208\":{\"h\":\"七、jQuery 的文档处理方法\",\"t\":[\"在 DOM 规范中，节点的操作往往涉及到大量的方法。比如创建节点、增加节点、修改节点、删除节点等等。代码写起来比较繁琐，比如往一个 div 节点中添加 1 个 h1 和 p 元素，需要这样写：\",\"let root = document.getElementById('root'); // 添加标题元素 let h1 = document.createElement('h1'); let titleText = document.createTextNode('标题'); h1.appendChild(titleText); root.appendChild(h1); // 添加p元素 let p = document.createElement('p'); let pText = document.createTextNode('文本段落'); p.appendChild(pText); root.appendChild(p);\",\"有了 innerHTML，可以简化许多：\",\"let root = document.getElementById('root'); root.innerHTML = '<h1>标题</h1><p>文本段落</p>';\",\"但是 innerHTML 与节点操作的方法本质上是不一样的。innerHTML 实质上是将指定的内容替换原来的内容，这个指定内容是用字符串构成。如果想要追加内容到原来的内容之后，可以用字符串拼接的方式。但是，如果想往原来内容的中间添加，这个操作也会比较麻烦，会涉及到复杂的字符串操作。\",\"jQuery 中提供了大量的方法来简化节点的操作，比如刚才的代码可写成这样：\",\"$('#root').append('<h1>标题</h1><p>文本段落</p>');\",\"感觉和 innerHTML 差不多，但是它并不是节点的替换，而是追加。 jQuery 提供了大量这种方法来实现文档操作：\",\"append\",\"appendTo\",\"prepend\",\"prependTo\",\"after\",\"before\",\"insertAfter\",\"insertBefore\",\"wrap\",\"unwrap\",\"wrapAll\",\"warpInner\",\"replaceWith\",\"replaceAll\",\"empty\",\"remove\",\"detach\",\"clone\",\"这些方法大概可分为这几类：\"]},\"1209\":{\"h\":\"1. 增加节点\",\"t\":[\"方法有：\",\"append - 追加一个子节点到最后\",\"appendTo - 追加一个子节点到最后\",\"prepend - 追加一个子节点到最前\",\"prependTo - 追加一个子节点到最前\",\"after - 增加一个节点到指定节点之后\",\"before - 增加一个节点到指定节点之前\",\"insertAfter - 增加一个节点到指定节点之后\",\"insertBefore - 增加一个节点到指定节点之前\",\"这里有 8 个方法，但是其中每种情况都有两个一样效果的方法。这是 jQuery 为两种不同编写风格提供的。比如 append 方法，它要求被添加的节点在前，添加的节点在后，比如：\",\"$('#root').append('<h1>标题</h1>');\",\"其中 root 就是被添加的节点，也可理解成父节点。<h1>标题</h1>就是添加的节点。如果用 appendTo 呢？如：\",\"$('<h1>标题</h1>').appendTo('#root');\",\"两种方法实现的效果一样，只是写法上有所不同，你可以根据自己的习惯进行选择。其余的方法大抵如此。\"]},\"1210\":{\"h\":\"2. 替换节点\",\"t\":[\"replaceWith\",\"replaceAll\",\"二者效果一样，replaceWith 表示被修改的节点在前，修改的节点在后。replaceAll 则相反。\",\"$('#root h1').replaceWith('<h3>标题</h3>'); $('<h3>标题</h3>').replaceAll('#root h1');\"]},\"1211\":{\"h\":\"3. 删除节点\",\"t\":[\"empty\",\"remove\",\"detach\",\"empty 表示清空指定节点中的所有内容，但指定的节点本身不会删除。\",\"$('#root').empty();\",\"remove 表示包括节点本身也会被删除。remove 方法中可以选择器来指定删除某个元素。\",\"$('#root').remove(); $('#root').remove('p');\",\"detach 和 remove 效果类似，但是 detach 实际上并没有把匹配的元素从 jQuery 对象中删除。其中所有的绑定事件、附加数据都会保留下来。\"]},\"1212\":{\"h\":\"4. 包裹\",\"t\":[\"wrap\",\"wrapAll\",\"wrapInner\",\"unwrap\",\"其中 wrap、wrapAll、wrapInner 都是在指定元素外部或内部包裹其他元素，unwrap 是取消包裹。这是 jQuery 特有的文档处理方法。\"]},\"1213\":{\"h\":\"5. clone\",\"t\":[\"克隆表示复制一个指定的元素。它有两个参数：\",\"参数一：表示是否复制绑定在元素上的事件处理函数。true 为保留，false 为不保留。默认为 false。\",\"参数二：指定深克隆或浅克隆。true 为深克隆，false 为浅克隆。默认为 false。\",\"浅克隆表示只复制当前指定的元素，它内部的元素不会被复制。深克隆是指当前元素及内部的子元素都会复制。\",\"方法的更多具体细节请参看 API 文档。\"]},\"1214\":{\"h\":\"八、 jQuery 的事件处理\",\"t\":[\"JS 中编写事件处理的方法有 3 种：\",\"通过标签绑定\",\"DOM 0 级事件\",\"DOM 2 级事件\",\"在标签上绑定事件的做法就不说了。DOM 0 级的事件处理方法最为常用，写起来也简单：\",\"let btn = document.getElementById('btn'); btn.onclick = function () {};\",\"它的优点是新老版本的浏览器都支持。缺点是无法为同一个标签添加多个相同类型的事件处理方法。比如：\",\"btn.onclick = function () { console.log('event1'); }; btn.onclick = function () { console.log('event2'); };\",\"当点击按钮后，只会执行最后一次绑定的事件处理方法。\",\"DOM 2 级的事件能够解决这个问题：\",\"btn.addEventListener('click', function () { console.log('event1'); }); btn.addEventListener('click', function () { console.log('event12'); });\",\"它的问题是兼容性。\",\"jQuery 提供了大量处理事件的方法，这些方法既解决了兼容性问题，又能为一个标签添加多个同类型的事件处理方法。以下是较常用的方法：\",\"ready\",\"on\",\"off\",\"one\",\"delegate\",\"hover\",\"blur\",\"change\",\"click\",\"dblclick\",\"error\",\"focus\",\"focusin\",\"focusout\",\"keydown\",\"keyup\",\"mousedown\",\"mouseenter\",\"mouseleave\",\"mousemove\",\"mouseout\",\"mouseover\",\"mouseup\",\"resize\",\"scroll\",\"select\",\"submit\",\"unload\"]},\"1215\":{\"h\":\"1. ready 方法\",\"t\":[\"这个方法的作用是当 DOM 节点加载完成后执行，如：\",\"$(document).ready(function () {});\",\"ready 和 onload 的区别\",\"和 ready 类似的事件是 window.onload：\",\"window.onload = function () {};\",\"二者的区别是 ready 只是在 DOM 加载完成（不包括图片、视频等媒体资源）后执行，onload 是指整个页面加载完成后执行。\"]},\"1216\":{\"h\":\"2. on 和 off\",\"t\":[\"on 方法集合了事件处理的所有功能，也就是说，用一个 on 就能完全应付任何事件处理的情况。off 是取消事件，但是要注意其中的回调函数必须和添加该事件时的回调函数相同（这里相同是指引用的同一个函数）。\",\"$('#btn').on('click', function () {}); let fn = function () {}; $(':text').on('focus', fn); $(':text').off('focus', fn); // fn 引用的是同一个函数\",\"on 也能做事件委托：\",\"<div id=\\\"list\\\"> <h1>title</h1> <p>first</p> <p>second</p> <p>third</p> </div> <script> $('#list').on('click', 'p', function () { console.log(this); }); </script>\",\"将 p 元素上发生的点击事件都委托给它的父元素 div 来处理。\",\"on、one、bind、live、delegate 的区别\",\"这几个方法都可以实现事件处理。其中 on 集成了事件处理的所有功能，也是目前推荐使用的方法。\",\"one 是指添加的是一次性事件，意味着只要触发一次该事件，相应的处理方法执行后就自动被删除。\",\"bind 是较早版本的绑定事件的方法，现在已被 on 替代。\",\"live 和 delegate 主要用来做事件委托。live 的版本较早，现在已被废弃。delegate 目前仍然可用，不过也可用 on 来替代它。\"]},\"1217\":{\"h\":\"3. hover\",\"t\":[\"它是将 mouseover 和 mouseout 集合到一起的方法：\",\"$('#root').hover( function () {}, function () {} );\",\"其中有两个参数，都是回调函数。第一个回调等同于 mouseover，第二个回调等同于 mouseout。\"]},\"1218\":{\"h\":\"4. 其他的事件处理方法\",\"t\":[\"还有些诸如 mouseover、mouseout、click 等方法，实际上是事件处理的快捷方式：\",\"$('btn').click(function () {}); $(':text').focus(function () {});\",\"但是这些方法并没有包含所有的类型，比如 input 事件就没有。\"]},\"1219\":{\"h\":\"5. jQuery 中的 event 对象\",\"t\":[\"jQuery 中的事件可以通过回调函数中的参数来获取。它的属性和方法大多数都和原生 JS 一样，当然也有不一样的。还有，用 jQuery 的 event 对象不需要考虑浏览器兼容性问题。下面列举一些较为常见的属性和方法：\",\"event.target - 最初触发实现的 DOM 元素\",\"event.currentTarget - 当前 DOM 元素\",\"event.pageX - 鼠标相对于文档的左边缘位置\",\"event.pageY - 鼠标相对于文档的上边缘位置\",\"event.type - 事件的类型\",\"event.which - 键盘按下的键值码\",\"event.preventDefault() - 阻止事件的默认行为\",\"event.stopPropagation() - 阻止事件冒泡\",\"target 和 currentTarget 的区别\",\"这两个属性在没有事件委托的情况下是没有区别的。如果是事件委托，则有所不同：\",\"<body> <table id=\\\"tb\\\" border=\\\"1\\\"> <tr> <td>1</td> <td>张三</td> <td>20</td> </tr> <tr> <td>2</td> <td>王五</td> <td>21</td> </tr> <tr> <td>3</td> <td>李四</td> <td>22</td> </tr> </table> <script src=\\\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\\\"></script> <script> $('#tb').on('click', 'tr', function (e) { console.log(e.target, e.currentTarget); }); </script> </body>\",\"结果：\",\"-w326\",\"从结果可以看出，target 获取的是我点击的当前标签。因为整个表格最底层的标签就是 td，所以我触发事件的标签就是 td 元素。而 currentTarget 获取的是冒泡阶段的当前元素。由于例子中我将 tr 作为冒泡元素，所以无论点击哪个 td 它最终都会冒泡到它的父元素 tr 上，而这个 tr 就是 currentTarget 指向的对象。\",\"event.which\",\"它会自动根据事件类型来获取键值码或字符码。如果是 keydown 和 keyup 事件，它获取的是键值码。如果是 keypress 事件，它获取的是字符码。\",\"方法的更多具体细节请参看 API 文档。\"]},\"1220\":{\"h\":\"九、实现动画的方法\",\"t\":[\"jQuery 提供了很多实现动画效果的方法，比如：\",\"show\",\"hide\",\"toggle\",\"slideDown\",\"slideUp\",\"slideToggle\",\"fadeIn\",\"fadeOut\",\"fadeTo\",\"fadeToggle\",\"animate\",\"stop\",\"delay\",\"finish\"]},\"1221\":{\"h\":\"1. show、hide、toggle\",\"t\":[\"show 方法是将一个隐藏的元素，从小到大显示出来的效果。\",\"hide 方法是将一个显示出来的元素，从大到小隐藏的效果。\",\"toggle 方法是在显示和隐藏之间进行切换，效果就是从小到大或从大到小。\",\"$('#demo').show(500); $('#demo').hide(500); $('#demo').toggle(500);\",\"-w140\",\"第 1 个参数表示动画播放的事件。也可以用系统定义的三种值来表示：\\\"fast\\\",\\\"normal\\\",\\\"slow\\\"。\",\"第 2 个参数表示动画播放完成后执行的回调函数。\"]},\"1222\":{\"h\":\"2. slideDown、slideUp、slideToggle\",\"t\":[\"slideDown 方法是将一个隐藏的元素，从上到下显示出来的效果。\",\"slideUp 方法是将一个显示出来的元素，从下到上隐藏的效果。\",\"slideToggle 方法是在显示和隐藏之间进行切换，效果就是从上往下或从下往上。\",\"-w206\",\"参数和之前一样。\"]},\"1223\":{\"h\":\"3. fadeIn、fadeOut、fadeTo、fadeToggle\",\"t\":[\"fadeIn 方法是将一个隐藏的元素，淡入的效果。\",\"fadeOut 方法是将一个显示出来的元素，淡出的效果。\",\"fadeTo 方法是到达指定透明度的效果。\",\"fadeToggle 方法是在显示和隐藏之间进行切换，效果淡入或淡出。\",\"-w228\",\"参数和之前一样。\"]},\"1224\":{\"h\":\"4. animate\",\"t\":[\"以上的方法实现了显示和隐藏的动画效果。不过，动画不仅限于显示或隐藏，比如节点的移动、放大缩小。这些动画效果可以用 animate 来实现。\",\"animate 各种节点的动画效果，包括显示或隐藏，看看它的用法：\",\"$('#demo').animate( { width: 150, height: 150, marginLeft: 100, }, 500, function () { console.log('动画播放完毕'); } );\",\" animate 有 3 个参数：\",\"参数 1：指定动画完成后的最终值，可以同时有多个，它们的动画会同时进行。如果值的单位是 px，可以省略 px。\",\"参数 2：动画持续的时长。\",\"参数 3：动画完成后执行的回调。\",\"注意：参数 1 是一个 JSON 对象，其中的属性只能是以数字为值的样式，比如 width、height 等等。像 color、font-style 这类的样式是不能做动画的。\",\"animate 本身是一个异步方法，也就是说，它不会阻塞后面代码的执行。但是，假如多个 animate 同时执行，会不会导致动画混乱呢？\",\"关于这个问题，你不用担心。我们之前讲 JS 的异步操作时提到过，JS 的异步实际上是单线程非阻塞式的。也就是说，每个 animate 执行后，动画的执行都会放到队列中排队。当其他代码执行完后，才轮到队里中的动画执行，并且一次只会执行一个动画，其他动画都会排队等待。看这个例子：\",\"$('#demo').animate( { width: 150, height: 150, marginLeft: 100, }, 500 ); $('#demo').animate( { width: 100, height: 100, marginTop: 100, }, 500 );\",\"-w251\",\"例子中执行了两次 animate，并且作用在同一个标签上。从效果上可以看出，它们并没有同时执行，而是先执行了 div 放大到 150 像素，向右移动 100 像素的动画。然后再缩小到 100 像素，往下移动 100 像素。这就说明了多个动画会依次排队执行的情况。\"]},\"1225\":{\"h\":\"5. 停止动画\",\"t\":[\"jQuery 提供了 2 个方法实现停止动画：stop 和 finish。其中 stop 有 2 个参数，都是布尔值，又可以分 4 种情况。所以，停止动画实际上有 5 种情况：\",\"1. finish\",\"停止动画，并清空队列，直接显示动画的最终状态。\",\"效果：\",\"-w236\",\"2. stop(true,true)\",\"停止当前动画，清空队列，显示当前动画的最终状态。 注意它和 finish 的区别在于它只会来到当前动画的最终状态，finish 是来到所有动画的最终状态。\",\"效果：\",\"-w287\",\"3. stop(true,false)\",\"停止当前动画，清空队列，不显示当前动画的最终状态。\",\"效果：\",\"-w282\",\"4. stop(false,true)\",\"停止当前动画，不清空队列，显示当前动画的最终状态\",\"效果：\",\"-w264\",\"5. stop(false,false)\",\"停止当前动画，不清空队列，不显示当前动画的最终状态\",\"效果：\",\"-w281\",\"delay\",\"用来在多个动画之间插入延迟时间：如\",\"$('#demo') .animate( { width: 150, height: 150, marginLeft: 100, }, 1500, function () { console.log('动画播放完毕'); } ) .delay(1000) .animate( { width: 100, height: 100, marginTop: 100, }, 1500, function () { console.log('动画播放完毕'); } );\",\"注意，该方法是将队列中的两次动画间加入延迟，可以用在 animate 以及前面介绍的那几个显示和隐藏的动画中。但它并不能完全代替 setTimeout。\",\"方法的更多具体细节请参看 API 文档。\"]},\"1226\":{\"h\":\"十、 jQuery 的 Ajax 方法\",\"t\":[\"jQuery 提供很多 Ajax 的方法，方便我们使用 Ajax 请求服务器。比较常用的方法有：\",\"ajax\",\"load\",\"get\",\"post\",\"serialize\",\"serializeArray\"]},\"1227\":{\"h\":\"1. ajax 方法\",\"t\":[\"这是最常用的方法，所有的 ajax 请求都可以用它来实现。它的方法中有个参数，是一个 JSON 对象，用来对 ajax 的请求进行配置。\",\"$.ajax({ url:\\\"请求地址\\\", type:\\\"请求类型\\\", async:布尔值|true:表示异步提交（默认）|false:表示同步提交, data:{传递给服务器的参数}|\\\"键=值&键=值（这种形式封装）\\\", success:function(data){ // 服务器返回消息时调用，data是服务器返回的数据 } });\"]},\"1228\":{\"h\":\"2. get 方法\",\"t\":[\"只支持 get 请求的 ajax 方法，对上面方法的简化：\",\"$.get('url', { 传递给服务器的参数 }, function (data) { // 服务器返回的消息 });\"]},\"1229\":{\"h\":\"3. post 方法\",\"t\":[\"只支持 post 请求的 ajax 方法，对上面方法的简化：\",\"$.post('url', { 传递给服务器的参数 }, function (data) { // 服务器返回的消息 });\"]},\"1230\":{\"h\":\"4. load 方法\",\"t\":[\"这个方法的作用是向指定路径发送请求，并把返回的内容插入到指定的标签中：\",\"$('#root').load('url', { 传递给服务器的参数 }, function () { // 插入完成后执行 });\",\"这个方法可以用来加载其他子页面。\"]},\"1231\":{\"h\":\"5. serialize 和 serializeArray 方法\",\"t\":[\"它们可以将表单元素的值以键值对的形式组装起来，用来传递给服务器。\",\"serialize 返回的是字符串形式的参数，serializeArray 返回的是 JSON 类型的对象，比如：\",\"<form id=\\\"fm\\\" action=\\\"#\\\"> <label>手机号：</label> <input type=\\\"text\\\" name=\\\"phone\\\" /> <label>密码：</label> <input type=\\\"password\\\" name=\\\"pwd\\\" /> <label>邮箱：</label> <input type=\\\"email\\\" name=\\\"email\\\" /> <input type=\\\"submit\\\" /> </form> <script> $('#fm').on('submit', function (e) { e.preventDefault(); console.log($('#fm').serialize()); console.log($('#fm').serializeArray()); }); </script>\",\"注意：只有表单元素有 name 属性时，它的值才会被封装。\",\"方法的更多具体细节请参看 API 文档。\"]},\"1232\":{\"h\":\"十一、jQuery 的链式调用\",\"t\":[\"首先我们来看看什么是链式操作。假如我要为一个标签添加 css 样式、设置属性、追加标签中的内容，之前我们可以这样做：\",\"// 添加样式 $('#root').css({ width: 100, height: 100, background: 'red', }); // 添加属性 $('#root').attr('data-name', 'content'); // 追加内容 $('#root').html('<h1>标题</h1>');\",\"这样的代码不够简洁，在 jQuery 中我们还可以这样写：\",\".css({ width: 100, height: 100, background: \\\"red\\\" }).attr(\\\"data-name\\\", \\\"content\\\") .html(\\\"<h1>标题</h1>\\\");\",\"这是由于 jQuery 中的大多数方法都会返回当前操作的 jQuery 对象，因此我们可以不用每次都重新获取对象然后调用方法。这种写法就是链式操作，它的一大好处就是使代码更加简洁。同时也不用每次都获取 jQuery 对象，提高效率。\",\"当然，这种做法在异步操作中也经常使用。比如 Promise 对象，你可以在每次 then 方法后继续调用 then 或者 catch，这样也能使得异步操作更为简洁，从而避免\\\"回调地狱\\\"的出现。\",\"jQuery 筛选方法中有个叫做 end 的方法，从 API 中可以看到对它的描述：\",\"回到最近的一个\\\"破坏性\\\"操作之前。即，将匹配的元素列表变为前一次的状态。\",\"首先我们要搞清楚什么是\\\"破坏性\\\"操作。我们知道 jQuery 中很多方法都会返回当前 jQuery 对象，比如css()、attr()、html()等等。但是还有些方法并不会返回当前 jQuery 对象，而是获取筛选过后的 jQuery 对象，比如：\",\"$('#root').find('h1');\",\"find 方法执行后返回的就不是 id 为 root 这个 jQuery 对象，而是它的子元素 h1。这就相当于破坏了之前的\\\"链条\\\"，而产生了一个新的\\\"链条\\\"。因此，这种方法就称为“破坏性”操作。这类拥有\\\"破坏性\\\"特性的方法有：\",\"add\",\"addSelf\",\"children\",\"filter\",\"find\",\"map\",\"next\",\"nextAll\",\"not\",\"parent\",\"parents\",\"prev\",\"prevAll\",\"siblings\",\"slice\",\"clone\",\"end 方法可以回到最近一次性\\\"破坏性\\\"操作之前，比如：\",\"$('#root').html('<h1>标题</h1>').find('h1').css('color', 'red').end().append('<p>正文</p>');\",\"当 find 调用后，操作的 jQuery 对象已经是 h1 了。但是在调用了 end 后，操作对象又回到了 root 元素。\",\"因此，有了 end 后，链式操作可以更加灵活的使用。\"]},\"1233\":{\"h\":\"十二、jQuery 性能优化\",\"t\":[\"下面我们来看看有哪些方法可以提高 jQuery 代码的执行效率：\"]},\"1234\":{\"h\":\"1. 总是从 ID 选择器开始继承\",\"t\":[\"这就意味着通过选择器来获取节点时，尽量在前面加上 id 选择器。这是因为通过 id 选择器可以更快速的定位到目标，然后再从该目标往下找其他元素。比如：\",\"$(\\\"#root.title\\\"); $(\\\"#root > p); $(\\\"#root p\\\")\"]},\"1235\":{\"h\":\"2. 尽量在 class 前面加上元素名\",\"t\":[\"这一条也是为了能够先缩小查询的范围，比如：\",\"$('h1.title'); $('p.list');\"]},\"1236\":{\"h\":\"3. 尽量使用 id 选择器替代 class 选择器\",\"t\":[\"由于相同 class 的标签会有多个，所以使用 class 选择器时会搜素整个文档，直到找到所有匹配的元素。但是 id 是唯一，当查到匹配的标签后就不会再继续搜寻。因此，如果要获取的标签在页面只有这一个，尽量选用 id 选择器来获取。\"]},\"1237\":{\"h\":\"4. 在适当的时候选择链式操作\",\"t\":[\"链式操作能够简化代码，而且也不会反复的获取相同的元素对象。如：\",\"$('#root').css('color', 'red').attr('data-name', 'content').html('<h1>标题</h1>');\",\"适当的时候用是推荐的，但也不能盲目使用。\"]},\"1238\":{\"h\":\"5. 将 jQuery 对象缓存起来使用，并在变量名前面加上$\",\"t\":[\"这也是编码的一个技巧。因为每一次的 jQuery 方法调用，都会在页面上进行搜索，虽然时间很短，但性能上也会有所影响。如果在第一次获取时将它赋给一个变量缓存下来，后面再用它时就不会再次到页面上进行搜索。\",\"let $root = $('#root'); $root.css(); $root.html();\",\"在变量前面加上$的原因是将缓存 jQuery 对象的变量和其他变量区分开来。\"]},\"1239\":{\"h\":\"6. 限制直接操作 DOM 的次数\",\"t\":[\"频繁的 DOM 操作对性能是极大的损耗，比如下面这段代码：\",\"let $root = $('#root'); for (let i = 1; i <= 50; i++) { $root.append(`<p>第${i}项</p>`); }\",\"这段代码实现了将 50 个 p 元素加入到 id 为 root 的标签中。每次循环都用了 append 方法。这会导致 DOM 操作进行了 50 次，也就意味着页面会重新渲染 50 次。如果整个页面还有很多其他元素在，那么这个渲染过程是很耗时的。下面我换种做法：\",\"let $root = $('#root'); let str = ''; for (let i = 1; i <= 50; i++) { str += `<p>第${i}项</p>`; } $root.append(str);\",\"这段代码在循环时并没有进行 DOM 操作，而是字符串进行累加。当循环结束后，再将该字符串通过 append 方法添加到页面上。效果和之前一样，但是这种做法只进行了一次 DOM 操作，性能提升是显而易见的。\",\"因此，减少 DOM 操作的次数是编写 JS 代码应该尽可能考虑的。\"]},\"1240\":{\"h\":\"7. JS 代码尽量推迟到 window.onload 事件中进行\",\"t\":[\"首先，JS 代码应该尽可能的放在最后，因为不能让 JS 的运行阻塞了 DOM 的渲染。jQuery 中有个 ready 方法，它是当 DOM 渲染完成后执行，但此时页面可能并没有加载完成。为了保险起见，在 window.onload 中执行 JS，能保证页面的所有加载已经完成。这种做法还有一个好处是不会再出现全局命名空间被污染的情况。（意思是不会出现全局变量。）\"]},\"1241\":{\"h\":\"8. 尽量使用事件委托机制\",\"t\":[\"事件委托能够减少在子元素进行事件绑定，而是统一绑定在父元素身上。特别是像列表类的应用，而一个列表中包含的元素有很多的情况特别适用。因为你要求列表中所有元素都有相同的事件处理，但又不可能在所有子元素甚至孙元素上绑定事件，那么事件委托就是一个很好的解决方案。\"]},\"1242\":{\"h\":\"9. 使用事件委托时用 delegate 或 on 来替代 live\",\"t\":[\"live 方法是早前版本的事件委托方法，现在要尽可能用新版本的方法，减少 BUG 出现的几率。\"]},\"1243\":{\"h\":\"10. 能使用子代选择器就不要使用后代选择器\",\"t\":[\"严格意义上这不是 jQuery 的性能问题。子代选择器是\\\">\\\"，后代是\\\" \\\"。二者的区别是否只查找一级子元素。子代选择器只会查找一级，通俗点说就是只找“儿子”。后代选择器除了找“儿子”还要找“孙子”，甚至“重孙”等等。\",\"其实也是尽量缩小查找的范围。当然，还是要根据具体业务具体分析。\"]},\"1244\":{\"c\":[\"前端\"]},\"1245\":{\"c\":[\"JQuery\"]},\"1246\":{\"h\":\"sass 应用\"},\"1247\":{\"h\":\"一、Sass 简介\",\"t\":[\"Sass 又名 SCSS 是 CSS 预处理器之一，诞生于 2007 年,采用 Ruby 语言编写的一款 CSS 预处理语言。最初它是为了配合 HAML（一种缩进式 HTML 预编译器）而设计的，因此有着和 HTML 一样的缩进式风格。\",\"Sass 和 SCSS 其实是同一种东西，我们平时都称之为 Sass，两者之间不同之处有以下两点：\",\"文件扩展名不同，Sass 是以“.sass”后缀为扩展名，而 SCSS 是以“.scss”后缀为扩展名\",\"语法书写方式不同，Sass 是以严格的 缩进式 语法规则来书写，不带大括号 {} 和分号 ; ，而 SCSS 的语法书写和 CSS 语法书写方式类似。\"]},\"1248\":{\"h\":\"二、Sass 与 CSS 写法的差异\",\"t\":[\"由于 Sass 是基于 Ruby 写出来的所以沿用了 Ruby 的书写规范，不带有大括号 \\\" {} \\\"和分号\\\" ; \\\"\",\"CSS 的写法：\",\"body { color: #fff; background: #f36; }\",\"Sass 的写法：\",\"body color: #fff background: #f36\",\"SCSS 的写法：\",\"body { color: $white; background: $f36; }\"]},\"1249\":{\"h\":\"1. Sass 语法格式\",\"t\":[\"这里说的 Sass 语法是 Sass 的最初语法格式，通过 tab 键控制缩进的一种语法规则，而且这种缩进要求非常严格。另外其不带有任何的分号和大括号。常常把这种格式称为 Sass 老版本，其文件名以“.sass”为扩展名。 假设我们有一段这样的 CSS 代码：\",\"body { font: 100% Helvetica, sans-serif; color: #333; }\",\"Sass 写法\",\"$font-stack: Helvetica, sans-serif $primary-color: #333 body font: 100% $font-stack color: $primary-color\",\"这种语法格式对于前端人员都不太容易接受，而且容易出错。\"]},\"1250\":{\"h\":\"2. SCSS 语法格式\",\"t\":[\"SCSS 是 Sass 的新语法格式，从外形上来判断他和 CSS 长得几乎是一模一样，其文件名格式常常以“.scss”为扩展名。\",\"上面那段代码用 SCSS 写法：\",\"$font-stack: Helvetica, sans-serif; $primary-color: #333; body { font: 100% $font-stack; color: $primary-color; }\",\"使用 Sass 新的语法规则，而文件扩展名依旧使用的是“.sass”造成编译不出来。在此特别提醒： “.sass”的格式只能使用 Sass 老语法规则（缩进规则），“.scss”使用的是 Sass 的新语法规则，也就是 SCSS 语法规则（类似 CSS 语法格式）。\"]},\"1251\":{\"h\":\"三、前置知识\",\"t\":[\"Sass 提供了一些调试语句，有：\",\"@error\",\"@warn\",\"@debug\"]},\"1252\":{\"h\":\"1.\",\"t\":[\"当编写带有参数的 mixin 或函数时，通常希望接收到正确的参数，如果调用时没有传递正确的参数，应该通知用户并且停止运行。\",\"Sass 通过 @error <expression> 。它会在控制台输出表达式返回的值（通常是一个字符串），一旦打印出错误，Sass 就停止编译，并抛出错误信息。\",\"@mixin text-align($align) { @if ($align != left or $align != center) { @error \\\"调用 text-align 只能传递 left 或 center 值\\\"; } text-align: $align; } .div { // 传递一个不被允许的参数，会在控制台抛出错误信息 @include text-align(right); }\"]},\"1253\":{\"h\":\"2.\",\"t\":[\"用法与 @error 相同，但与 @error 不同的是，它不会导致 Sass 停止编译，只是在控制台抛出警告信息。\"]},\"1254\":{\"h\":\"3.\",\"t\":[\"通过 @debug <expression> 可以很方便地在控制台打印出表达式返回的值。\",\"@debug '1 + 1 = #{1 + 1}'; // 1 + 1 = 2\"]},\"1255\":{\"h\":\"4. 注释\",\"t\":[\"sass 中的注释主要有以下两种：\",\"/**/;\",\"//\",\"两者的区别在于/**/的写法会在编译出来的 CSS 中显示，而//则不会。\",\"// 这个注释不会在css的编译结果中出现. /* 这个注释会在除压缩模式外的css的编译结果中出现. */ /* 还可以包含一些插值: * 1 + 1 = #{1 + 1} */ /*! 这个注释任何情况下都会出现在css的编译结果中 */ p /* 多行注释可以写在任何允许 * 空白输入的地方 */ .sans { font: Helvetica, // So can single-line commments. sans-serif; }\"]},\"1256\":{\"h\":\"5. 嵌套\"},\"1257\":{\"h\":\"属性嵌套\",\"t\":[\".box { border-top: 1px solid red; border-right: 2px solid yellow; }\",\"在 SASS 中的写法：\",\".box { border: { top: 1px solid red; right: 2px solid yellow; } }\",\"另外还有伪类嵌套和选择器嵌套，因容易出错，所以不做讲解。\"]},\"1258\":{\"h\":\"四、变量\",\"t\":[\"$变量名称: 变量值；;\"]},\"1259\":{\"h\":\"1. 使用场合\",\"t\":[\"变量的用于一般包括以下几种：\",\"设置样式值\",\"$primary-color: #3498db; $font-size: 16px; body { color: $primary-color; font-size: $font-size; }\",\"计算其他变量的值\",\"$base-spacing: 8px; $large-spacing: $base-spacing * 2; button { margin: $large-spacing; }\",\"作为参数传递给函数和 mixins\",\"$base-padding: 10px; @mixin padding($direction) { padding-#{$direction}: $base-padding; } .container { @include padding(top); }\",\"条件和循环语句中的使用\",\"$theme: light; @if $theme == light { $background-color: #fff; } @else { $background-color: #333; } body { background-color: $background-color; }\",\"利用插值语法作为属性名或属性值的一部分\",\"$name: \\\"btn\\\"; $top-or-bottom: top $left-or-right: left .icon-#{$name} { background-image: url(\\\"/icons/#{$name}.svg\\\"); position: absolute; #{$top-or-bottom}: 0; #{$left-or-right}: 0; }\",\"Sass 变量是命令式的，这意味着如果使用一个变量然后更改其值，之前的使用将保持不变。CSS 变量是声明式的，这意味着如果更改其值，它将影响之前的使用和之后的使用。\"]},\"1260\":{\"h\":\"2. 默认变量\",\"t\":[\"普通变量定义后可以在全局范围内使用:\",\"$fontSize: 12px; body { font-size: $fontSize; }\",\"默认变量仅需在值后面加上 !default:\",\"$baseLineHeight: 1.5 !default; body { line-height: $baseLineHeight; }\",\"sass 的默认变量一般是用来设置默认值，然后根据需求来覆盖的，覆盖的方式只需要在默认变量之前重新声明下变量即可。\",\"// _library.scss $black: #000 !default; $border-radius: 0.25rem !default; $box-shadow: 0 0.5rem 1rem rgba($black, 0.15) !default; code { border-radius: $border-radius; box-shadow: $box-shadow; }\",\"// style.scss @use 'library' with ( $black: #222, $border-radius: 0.1rem );\",\"code { border-radius: 0.1rem; box-shadow: 0 0.5rem 1rem rgba(34, 34, 34, 0.15); }\"]},\"1261\":{\"h\":\"3. 全局变量和局部变量\",\"t\":[\"变量的调用\",\"$color: yellow !default; //定义全局变量 .div1 { color: $color; //调用全局变量 } .div2 { $color: red; //定义局部变量 p { color: $color; // //调用局部变量 } }\",\"根据声明变量的位置，可以将变量分为全局变量和局部变量。如果需要在局部范围内（例如在 mixin 中）设置全局变量的值，则可以使用标志!global。标记为!global的变量声明将始终分配给全局范围。\",\"$variable: first global value; .content { $variable: second global value !global; // 此时设置的是全局变量的值 value: $variable; } .sidebar { value: $variable; }\",\"编译结果\",\".content { value: second global value; } .sidebar { value: second global value; }\",\"此!global标志只能用于设置已在文件顶层声明的变量。不能用于声明新变量。\",\"什么时候声明变量？\",\"建议创建变量只适用于感觉确有必要的情况下，不要为了某些骇客行为而声明新变量，基本上没有理由声明一个永远不需要更新或只在单一地方使用的变量。只有满足下述标准时方可创建新变量：\",\"该值至少重复出现了 2 次；\",\"该值至少可能被更新一次；\",\"该值所有的表现都与变量有关。\"]},\"1262\":{\"h\":\"4. 插值\",\"t\":[\"插值几乎可以在 Sass 样式表的任何地方使用，以将 SassScript 表达式的结果嵌入到 CSS 块中。只需#{}在以下任意位置包装表达式即可：\",\"样式规则中的选择器\",\"声明中的属性名称\",\"自定义属性值\",\"CSS 规则\",\"@extends\",\"@import\",\"带引号或不带引号的字符串\",\"普通的 CSS 函数名称\",\"注释/* */\",\"@mixin corner-icon($name, $top-or-bottom, $left-or-right) { .icon-#{$name} { background-image: url('/icons/#{$name}.svg'); position: absolute; #{$top-or-bottom}: 0; #{$left-or-right}: 0; } } @include corner-icon('mail', top, left);\",\"编译结果\",\".icon-mail { background-image: url('/icons/mail.svg'); position: absolute; top: 0; left: 0; }\",\"插值返回不带引号的字符串\"]},\"1263\":{\"h\":\"五、数据类型\",\"t\":[\"Sass 支持多种值类型，其中大多数直接来自 CSS。每个表达式都会产生一个值，变量保存值。\"]},\"1264\":{\"h\":\"\",\"t\":[\"Sass 中的数字有两个组成部分：数字本身和它的单位。例如，在 16px 中，数字是 16，单位是 px 。数字可以没有单位，也可以有复杂的单位。如12 或100px。\",\"$num1: 100; // 100 $num2: 0.8; // 0.8 $num3: 16px; // 16px $num4: 5px * 2; // 10px $num1: 5.2e3; // 5200 $num2: 6e-2; // 0.06\",\"Sass 不区分整数和小数，所以例如 5 / 2 返回 2.5 而不是 2 。\"]},\"1265\":{\"h\":\"\",\"t\":[\"Sass 支持两种内部结构相同但呈现方式不同的字符串：带引号的字符串，如 \\\"Helvetica Neue\\\"，以及不带引号的字符串(也称为标识符)，如 bold 。\",\"可以使用 string.unquote() 函数将带引号的字符串转换为不带引号的字符串，也可以使用 string.quote() 函数将不带引号的字符串转换为带引号的字符串。\",\"@use 'sass:string'; @debug string.unquote('.widget:hover'); // .widget:hover @debug string.quote(bold); // \\\"bold\\\"\",\"不带引号的字符串就是写 CSS 标识符。它们可能包括任何地方的插值。\",\"@debug bold; // bold @debug -webkit-flex; // -webkit-flex @debug --123; // --123 $prefix: ms; @debug -#{$prefix}-flex; // -ms-flex\",\"当然，并不是所有的标识符都被解析为不带引号的字符串:\",\"CSS 颜色名称被解析为 color 类型。\",\"null 被解析为 Sass 的 null 值。\",\"true 和 false 被解析为 boolean 类型。\",\"not, and, or 被解析为 boolean 操作符\",\"正因为如此，除非您专门编写使用不带引号的字符串的 CSS 属性值，否则编写带引号的字符串通常是一个好主意。\",\"Sass 有许多字符串函数，它们接受或返回数字作为索引，这些数字指的是字符串中的字符。\",\"Sass 的字符串中第一个字符的索引为 1，不同于大多数语言索引从 0 开始。\",\"-1 表示字符串中的最后一个字符，-2 表示倒数第二个字符，以此类推。\",\"@use 'sass:string'; @debug string.index('Helvetica Neue', 'Helvetica'); // 1 @debug string.index('Helvetica Neue', 'Neue'); // 11 @debug string.slice('Roboto Mono', -4); // \\\"Mono\\\"\"]},\"1266\":{\"h\":\"\",\"t\":[\"Sass 颜色可以写成：\",\"十六进制代码， 比如 #f2ece4，或者包含透明值的 #b37399aa\",\"CSS 颜色名称， 比如 midnightblue , transparent\",\"函数， 比如 rgb() 、 rgba() 、 hsl() 和 hsla() 。\",\"@debug #f2ece4; // #f2ece4 @debug #b37399aa; // rgba(179, 115, 153, 67%) @debug midnightblue; // #191970 @debug rgb(204, 102, 153); // #c69 @debug rgba(107, 113, 127, 0.8); // rgba(107, 113, 127, 0.8) @debug hsl(228, 7%, 86%); // #dadbdf @debug hsla(20, 20%, 85%, 0.7); // rgb(225, 215, 210, 0.7)\"]},\"1267\":{\"h\":\"\",\"t\":[\"列表包含其他值的序列。在 Sass 中，列表中的元素可以用逗号分隔，如 Helvetica, Arial, sans-serif ，或空格分隔，如 10px 15px 0 0 ，但不能混合使用空格和逗号。\",\"与大多数其他语言不同，Sass 中的列表不需要特殊的方括号，任何用空格或逗号分隔的表达式都可以算作一个列表。当然，也允许使用方括号来编写列表，如 [a b] 或 [a, b] 。这对使用 grid-template-columns 来说是非常有用的。\",\"$border1: (1px solid #f00); $border2: (1px, solid, #f00); $border3: [1px solid #f00]; $border4: [1px, solid, #f00]; .div1 { border: $border1; } .div2 { border: $border2; } .div3 { border: $border3; } .div4 { border: $border4; }\",\"编译后的 css ：\",\".div1 { border: 1px solid #f00; } .div2 { border: 1px, solid, #f00; } .div3 { border: [1px solid #f00]; } .div4 { border: [1px, solid, #f00]; }\",\"List 的索引同样从 1 开始，-1 表示列表中的最后一个元素\"]},\"1268\":{\"h\":\"访问某个元素\",\"t\":[\"使用 list.nth($list, $index) 函数获取一个列表中的值，第一个参数表示列表，第二个参数表示要获取元素的索引。\",\"@use 'sass:list'; @debug list.nth(10px 12px 16px, 2); // 12px @debug list.nth([line1, line2, line3], -1); // line3\"]},\"1269\":{\"h\":\"遍历列表\",\"t\":[\"使用 @each $ele in $list 语句来遍历一个列表， $ele 表示当前循环的列表元素， $list 表示要遍历的列表。\",\"$sizes: 40px, 50px, 80px; @each $size in $sizes { .icon-#{$size} { font-size: $size; height: $size; width: $size; } }\",\"编译后的 css ：\",\".icon-40px { font-size: 40px; height: 40px; width: 40px; } .icon-50px { font-size: 50px; height: 50px; width: 50px; } .icon-80px { font-size: 80px; height: 80px; width: 80px; }\"]},\"1270\":{\"h\":\"追加元素\",\"t\":[\"使用 list.append($list， $val) 函数，第一个参数为目标列表，第二个参数为要追加的元素，并返回一个在末尾追加了新元素的的新的列表。注意，因为 Sass 列表是不可变的，所以它不会修改原始列表。\",\"@use 'sass:list'; @debug list.append(10px 12px 16px, 25px); // 10px 12px 16px 25px @debug list.append([col1-line1], col1-line2); // [col1-line1, col1-line2]\"]},\"1271\":{\"h\":\"查找元素的索引\",\"t\":[\"使用 list.index($list, $value) 函数，第一个参数为目标列表，第二个参数为目标元素，找到元素返回索引值，找不到返回 null 。\",\"@use 'sass:list'; @debug list.index(1px solid red, 1px); // 1 @debug list.index(1px solid red, solid); // 2 @debug list.index(1px solid red, dashed); // null\"]},\"1272\":{\"h\":\"列表的不可变性\",\"t\":[\"Sass 中的列表是不可变的，这意味着列表值的内容永远不会改变。Sass 的列表函数只能返回一个新的列表，而不是修改原始列表。\",\"不可变性有助于在各个地方共用一个列表时，避免因为列表被更改而出现一些 Bug。\",\"所以，如果一个变量表示的列表需要修改，应该将新的列表赋值给这个变量。\",\"@use 'sass:list'; $list: (10px 12px 16px); $list: list.append($list, 25px); @debug $list; // 10px 12px 16px 25px\"]},\"1273\":{\"h\":\"参数列表\",\"t\":[\"当你声明一个接收任意参数的 mixin 或 function 时，任意参数这个变量将会是一个特殊的列表，称为 参数列表 。这个变量就像是一个列表，包含传递给 mixin 或 function 的所有参数，\",\"如果用户传递的关键字参数，可以将参数列表传递给 meta.keywords() 函数，将返回一个 map 类型的值。\",\"@use 'sass:meta'; @mixin syntax-colors($args...) { // map 类型的值 (string: #080, comment: #800, variable: #60b) @debug meta.keywords($args); @each $name, $color in meta.keywords($args) { pre span.stx-#{$name} { color: $color; } } } @include syntax-colors($string: #080, $comment: #800, $variable: #60b);\",\"编译后的 css ：\",\"pre span.stx-string { color: #080; } pre span.stx-comment { color: #800; } pre span.stx-variable { color: #60b; }\"]},\"1274\":{\"h\":\"\",\"t\":[\"布尔值是逻辑值 true 和 false 。除了它们的字面量形式，布尔值还可以由比较运算符和关系操作符以及许多内置函数（如 math.comparable() 和 map. haskey() ）返回。\",\"@use 'sass:math'; @debug 1px == 2px; // false @debug 1px == 1px; // true @debug 10px < 3px; // false @debug math.comparable(100px, 3in); // true\",\"使用 boolean 操作符（与或非）\",\"@debug true and true; // true @debug true and false; // false @debug true or false; // true @debug false or false; // false @debug not true; // false @debug not false; // true\",\"结合 @if 等操作，可以使用布尔值作出很多不同情况下的操作。\",\"@mixin avatar($size, $circle: false) { width: $size; height: $size; @if $circle { border-radius: $size / 2; } } .square-av { @include avatar(100px, $circle: false); } .circle-av { @include avatar(100px, $circle: true); }\",\"或者使用 @if() 函数，类似于三元运算符：\",\"@debug if(true, 10px, 30px); // 10px @debug if(false, 10px, 30px); // 30px\"]},\"1275\":{\"h\":\"\",\"t\":[\"null 值也是该类型的唯一值。它表示没有值，通常由函数返回，表示没有结果。\",\"@use 'sass:map'; @use 'sass:string'; @debug string.index('Helvetica Neue', 'Roboto'); // null @debug map.get( ( 'large': 20px, ), 'small' ); // null @debug &; // null\",\"如果列表中包含一个空值，则生成的 CSS 中将省略这个空值。\",\"$fonts: ( 'serif': 'Helvetica Neue', 'monospace': 'Consolas', ); h3 { font: 18px bold map.get($fonts, 'sans'); }\",\"生成的 css ：\",\"h3 { font: 18px bold; }\",\"如果属性值为空，则完全省略该属性。\",\"$fonts: ( 'serif': 'Helvetica Neue', 'monospace': 'Consolas', ); h3 { font: { size: 18px; weight: bold; family: map-get($fonts, 'sans'); } }\",\"编译后的 css ：\",\"h3 { font-size: 18px; font-weight: bold; }\"]},\"1276\":{\"h\":\"\",\"t\":[\"map 用来表示键值对的映射，格式为 (key1: value, key2: value) ，其中 key 必须唯一。与列表不同， map 必须用圆括号 () 括起来。空的 map 写为 () 。\",\"map 将值与键关联起来的，例如：(\\\"background\\\": red, \\\"foreground\\\": pink)\",\"事实上，所有 map 都算作 List！每个 map 都算作一个 List，其中包含每个键/值对的两元素列表。例如，(1: 2, 3: 4)算作 (1 2, 3 4)。\"]},\"1277\":{\"h\":\"访问 map 的值\",\"t\":[\"通过 map.get($map, $key) 函数来访问值，第一个参数表示 map ，第二个参数表示对应的 key ，指定的 key 不存在时返回 null 。\",\"@use 'sass:map'; $font-weights: ( 'regular': 400, 'medium': 500, 'bold': 700, ); @debug map.get($font-weights, 'medium'); // 500 @debug map.get($font-weights, 'extra-bold'); // null\"]},\"1278\":{\"h\":\"遍历 map\",\"t\":[\"通过 @each 语句对一个 map 进行遍历。\",\"$colors: ( 'red': #f00, 'green': #0f0, 'blue': #00f, ); @each $key, $value in $colors { .icon-#{$key} { color: $value; } }\",\"编译后的 css ：\",\".icon-red { color: #f00; } .icon-green { color: #0f0; } .icon-blue { color: #00f; }\"]},\"1279\":{\"h\":\"修改 map\",\"t\":[\"向 map 添加新的键值对或修改已存在的键值对。使用 map.set($map， $key， $value) 函数， 它返回设置完成后的新的 map ，不会修改原 map 。\",\"@use 'sass:map'; $colors: ( 'red': #f00, 'green': #0f0, 'blue': #00f, ); @debug map.set($colors, 'red', #a11); // (\\\"red\\\": #a11, \\\"green\\\": #0f0, \\\"blue\\\": #00f) @debug map.set($colors, 'warning', #ff5); // (\\\"red\\\": #f00, \\\"green\\\": #0f0, \\\"blue\\\": #00f, \\\"warning\\\": #ff5)\"]},\"1280\":{\"h\":\"合并 map\",\"t\":[\"可以使用 map.merge($map1, $map2) 函数合并 map 并返回合并后的新 map 。\",\"@use 'sass:map'; $colors: ( 'red': #f00, 'green': #0f0, 'blue': #00f, ); $colors2: ( 'yellow': #ff0, 'skyblue': #0ff, ); @debug map.merge($colors, $colors2); // (\\\"red\\\": #f00, \\\"green\\\": #0f0, \\\"blue\\\": #00f, \\\"yellow\\\": #ff0, \\\"skyblue\\\": #0ff)\"]},\"1281\":{\"h\":\"不可变性\",\"t\":[\"和 list 一样，Sass 中的 map 被创建后是不可变的，所以所有的 map 方法都不是直接修改原 map ， 而是操作完成后返回一个新的 map 出来。\",\"所以通常应该将新创建的 map 赋值给原变量进行覆盖。\"]},\"1282\":{\"h\":\"\",\"t\":[\"Sass 本身已经有很多内置的函数可供使用，比如 rgba() , nth() , if() 等。\",\"@function 的定义方式和 @mixin 非常类似，但是调用的时候不需要 @include 而是直接调用。\",\"@function my-color() { @return #f00; } .div { background-color: my-color(); }\",\"@function 与 @mixin 不同之处在于，函数返回的只能是一个值，而不是一段 css 样式代码，也就是说函数返回的结果只能作为变量值或属性值。\"]},\"1283\":{\"h\":\"六、流程控制\",\"t\":[\"在 Sass 中，用于控制流程的语句有：\",\"@if, @else 条件判断语句\",\"@each 遍历一个 list ， 或 一个 map 的键值对\",\"@for 循环一定的次数\",\"@while 循环直到遇到 true 值\"]},\"1284\":{\"h\":\"1.\",\"t\":[\"和 js 中的if...else大差不差，但还是有些微小的差别，如下：\",\"if 紧跟的表达式不需要写括号\",\"js 中除了false和null之外，还有更多值为假。Sass 不是这些语言之一！空字符串、空列表和数字0在 Sass 中都是真值。\",\"@use 'sass:math'; @mixin triangle($size, $color, $direction) { height: 0; width: 0; border-color: transparent; border-style: solid; border-width: math.div($size, 2); @if $direction == up { border-bottom-color: $color; } @else if $direction == right { border-left-color: $color; } @else if $direction == down { border-top-color: $color; } @else if $direction == left { border-right-color: $color; } @else { @error \\\"Unknown direction #{$direction}.\\\"; } } .next { @include triangle(5px, black, right); }\",\"编译结果\",\".next { height: 0; width: 0; border-color: transparent; border-style: solid; border-width: 2.5px; border-left-color: black; }\"]},\"1285\":{\"h\":\"2.\",\"t\":[\"@for 循环语句，可以写成：\",\"@for <variable> from start to end { ... }\",\"@for <variable> from start through end { ... }\",\"也就是有 to 和 through 的区别， to 表示不包含结束的数字， through 表示包含结束的数字。\",\"@for $var from 1 to 5 { @debug $var; } // 1 2 3 4 @for $var from 1 through 5 { @debug $var; } // 1 2 3 4 5\"]},\"1286\":{\"h\":\"3.\",\"t\":[\"@while 语句，写为 @while <expression>{ ... } ， 如果它的表达式返回 true，则一直反复运行代码块。一直持续到表达式最终返回 false 为止。\",\"$num: 5; @while $num <= 10 { @debug $num; $num: $num + 1; } // 5 6 7 8 9 10\",\"注意，如果能使用 @for 或 @each 语句实现的话，尽量不使用 @while 语句。它们对读者来说更清晰，并且通常编译速度也更快。\"]},\"1287\":{\"h\":\"4.\",\"t\":[\"遍历一个 list 或一个 map ，语法为 @each $item in $list { ... } 。\",\"使用 @each 可以方便的生成大量重复却有一点小变化的样式。\"]},\"1288\":{\"h\":\"遍历 list\",\"t\":[\"$sizes: 40px, 50px, 80px; @each $size in $sizes { .icon-#{$size} { font-size: $size; height: $size; width: $size; } }\",\"编译后的 css ：\",\".icon-40px { font-size: 40px; height: 40px; width: 40px; } .icon-50px { font-size: 50px; height: 50px; width: 50px; } .icon-80px { font-size: 80px; height: 80px; width: 80px; }\"]},\"1289\":{\"h\":\"遍历 map\",\"t\":[\"语法为 @each $key, $value in $map { ... } 。\",\"$font-size: ( 'big': 20px, 'middle': 16px, 'small': 14px, 'mini': 12px, ); @each $key, $value in $font-size { .font-#{$key} { font-size: $value; } }\",\"编译后的 css ：\",\".font-big { font-size: 20px; } .font-middle { font-size: 16px; } .font-small { font-size: 14px; } .font-mini { font-size: 12px; }\"]},\"1290\":{\"h\":\"解构 list 中的 list\",\"t\":[\"如果一个 list 中的元素也是 list，那么可以使用 @each $a, $b, ..., $n in $list 直接将内层 list 的值依次取出来。\",\"$font: 'small' 14px 400 #f00, 'middle' 16px 500 #0f0, 'big' 18px 600 #00f; @each $name, $size, $weight, $color in $font { .font-#{$name} { font-size: $size; font-weight: $weight; color: $color; } }\",\"编译后的 css ：\",\".font-small { font-size: 14px; font-weight: 400; color: #f00; } .font-middle { font-size: 16px; font-weight: 500; color: #0f0; } .font-big { font-size: 18px; font-weight: 600; color: #00f; }\",\"注意，如果 @each 后的变量数量多于内层数组的元素数量，多出来的变量将会得到 null 值。\",\"$font: 'small' 14px 400 #f00, 'middle' 16px 500 #0f0, 'big' 18px 600 #00f; @each $name, $size, $weight, $color, $other in $font { @debug $name, $size, $weight, $color, $other; } // \\\"small\\\", 14px, 400, #f00, null // \\\"middle\\\", 16px, 500, #0f0, null // \\\"big\\\", 18px, 600, #00f, null\",\"每个 map 其实都算是一个包含键值对的列表，如果将上例中的 list 改成 map 类型：\",\"$font: ( 'small': 14px 400 #f00, 'middle': 16px 500 #0f0, 'big': 18px 600 #00f, ); @each $name, $size, $weight, $color, $other in $font { @debug $name, $size, $weight, $color, $other; } // \\\"small\\\", 14px 400 #f00, null, null, null // \\\"middle\\\", 16px 500 #0f0, null, null, null // \\\"big\\\", 18px 600 #00f, null, null, null\",\"可以看到，遍历 list 和 map 时，@each 后的变量数量表示的意义有一点区别：\",\"遍历 list 时，@each 之后的每个变量依次表示内层 list 的元素\",\"遍历 map 时，@each 之后只有两个变量可以拿到值，第一个变量表示 map 的 key，第二个变量表示 map 的 值，尽管这个值也是一个 list，之后的变量都是 null 值。\"]},\"1291\":{\"h\":\"七、混合宏 mixin\",\"t\":[\"在单独的属性需要统一处理时，变量是个不错的选择。但当你的样式变得越来越复杂，需要重复使用大段样式时混合宏就会变得很有意义。\"]},\"1292\":{\"h\":\"1. 声明混合宏\",\"t\":[\"不带参数的混合宏：\",\"@mixin border-radius { border-radius: 50%; } @mixin 是用来声明混合宏的关键词，border-radius 是混合宏的名称，花括号里的是复用的样式代码。;\"]},\"1293\":{\"h\":\"2. 调用混合宏\",\"t\":[\"使用@mixin 声明了一个混合宏后，我们使用 @include 来调用声明好的混合宏：\",\"@mixin border-radius { //声明混合宏 border-radius: 50%; } button { @include border-radius; //调用混合宏 }\"]},\"1294\":{\"h\":\"3. 混合宏的参数－传一个不带值的参数\",\"t\":[\"@mixin border-radius($radius) { border-radius: $radius; //在混合宏\\\"border-radius\\\"中定义了一个不带任何数值的参数\\\"$radius\\\" } .box { @include border-radius(10px); //在调用时候给这个混合宏传一个参数值 }\"]},\"1295\":{\"h\":\"4. 混合宏的参数－传一个带值的参数\",\"t\":[\"@mixin border-radius($radius: 10px) { //给混合宏的参数传一个默认值； border-radius: $radius; } //在调用时只需要调用默认的混合宏\\\"border-radius;\\\" button { @include border-radius; } //但有时某些元素的值又不一样，那么可以这样写： button { @include border-radius(50px); }\"]},\"1296\":{\"h\":\"5. 混合宏的参数－传多个参数\",\"t\":[\"@mixin center($width, $height) { width: $width; height: $height; position: absolute; top: 50%; left: 50%; margin-top: -($height)/2; margin-left: -($width)/2; } .centerBox { @include center(500px, 250px); }\"]},\"1297\":{\"h\":\"八、继承 extend\",\"t\":[\"SASS 中，通过关键词\\\"@extend\\\"来继承已存在的类样式块。\",\".button { border: 1px solid #ccc; padding: 5px 10px; font-size: 20px; } .buttonPrimary { background: #f36; color: white; @extend .button; } .buttonSecond { background: #ddd; color: #000; @extend .button; }\",\"编译以后：\",\".button, .buttonPrimary, .buttonSecond { //在SASS中的继承可以继承类样式块中所有样式代码，并且编译出来会将选择器合并 border: 1px solid #ccc; padding: 5px 10px; font-size: 20px; } .buttonPrimary { background: #f36; color: white; } .buttonSecond { background: #ddd; color: #000; }\"]},\"1298\":{\"h\":\"九、占位符\",\"t\":[\"% placeholder 声明的代码如果不被@extend 调用的话，不会产生任何代码。取代从前 CSS 中的代码冗余的情形。\",\"%marginTop5 { margin-top: 5px; } %paddingTop5 { padding-top: 5px; }\",\"这段代码没有被 @extend 调用，他并没有产生任何代码块，只是静静的躺在你的某个 SCSS 文件中。只有通过 @extend 调用才会产生代码：\",\"%marginTop5 { margin-top: 5px; } %paddingTop5 { padding-top: 5px; } button { @extend %marginTop5; @extend %paddingTop5; } .content { @extend %marginTop5; span { @extend %paddingTop5; } }\",\"编译出来的 CSS：\",\"button, .content { margin-top: 5px; } button, .content span { padding-top: 5px; }\",\"由以上代码可以看出，通过@entend 调用的占位符编译出来的代码会将代码合并在一起，让代码变的更为干净易读。同时，也更突出了@extend 的强大。\"]},\"1299\":{\"h\":\"十、使用分析\",\"t\":[\"什么时候该用混合宏 @mixin、什么时候该用继承 @extend、什么时候该用占位符%呢？\",\"混合宏的使用 ：它 不会自动合并 相同的样式代码，如果在样式文件中调用同一个混合宏，会产生多个对应的样式代码，造成代码的冗余。不过他并不是一无事处，他可以 传参数 。如果你的代码块中涉及到变量，建议使用混合宏来创建相同的代码块。\",\"继承 ：使用继承后，编译出来的 CSS 会将使用继承的代码块 合并 到一起，通过组合选择器的方式展现，这样编译出来的代码相对于混合宏来说要干净易读。但是它 不能传变量参数 。如果你的代码块不需要传任何变量参数，而且有一个 基类已在文件中存在 ，那么建议使用继承。\",\"占位符 ：使用占位符编译出来的 CSS 代码和使用继承基本上是相同的，只是不会在代码中生成占位符 marginTop 的选择器。那么占位符和继承的主要区别的，“ 占位符是独立定义，不调用的时候是不会在 CSS 中产生任何代码；继承是首先有一个基类存在，不管调用与不调用，基类的样式都将会出现在编译出来的 CSS 代码中。 ”\",\"混合宏\",\"继承\",\"占位符\",\"声明方式\",\"@mixin\",\".class\",\"%placeholder\",\"调用方式\",\"@include\",\"@extend\",\"@extend\",\"使用环境\",\"相同代码块需要在不同环境传递不同值时，可通过混合宏定义重复使用的代码块。不足之处在于编译出来的 CSS 代码文件臃肿、代码冗余。\",\"相同代码块不需要传递不同的值，并且此代码块已在 Sass 文件中定义，可通过 Sass 的继承来调用已存在的基类，会将调用相同基类的代码合并在一起。不足之处在于如果基类并不存在于 HTML 结构时，不管调用与否，在编译出的 CSS 中都将产生基类对应的样式代码。\",\"与继承基本类似。不同之处在于相同代码块并没有在基类中存在，而是额外声明。如果不调用已声明的占位符，将不会产生任何样式代码，如果在不同选择器调用占位符，那么编译出的 CSS 代码将会把相同的代码合并在一起。\"]},\"1300\":{\"h\":\"十一、sass 的模块化\",\"t\":[\"与模块化相关的@规则主要有以下三种：\",\"@use 从其他 sass 样式表中加载 mixins, functions, variables, 并将来自多个样式表的 CSS 组合在一起\",\"@forward 当本样式表被其他样式表使用 @use 加载之前，先加载一个 Sass 样式表，并且使其 mixins, functions, variables 可用\",\"@import 扩展自 css 的 @import，用来加载其他样式表的 styles, mixins, functions, variables\"]},\"1301\":{\"h\":\"1.\",\"t\":[\"由 @use 加载的样式表被称为模块（modules）。Sass 一些内置模块，其中有很多实用的函数。\",\"通过 @use 加载的模块不管被引用了多少次，都只会在编译后输出一次到 css 中。但是使用 @import 多次引入同一模块，会反复输出到 css 中。\",\"// module.scss .module { color: #f00; } // a.scss @use './module.scss' // b.scss @use './module.scss' // index.scss @use './a.scss'; @use './b.scss';\",\"编译后的 css ：\",\".module { color: #f00; }\",\"注意：@use 的前面只能出现 @forward 或 变量声明，其他的所有代码只能出现在 @use 之后。\"]},\"1302\":{\"h\":\"使用成员\",\"t\":[\"@use 引入一个模块，默认会形成一个以模块文件名命名的命名空间，模块中的所有成员都通过这个命名空间来访问。\",\"可以使用 <namespace>.<variable>, <namespace>.<function>(), @include <namespace>.<mixin>() 来加载模块中的成员。\",\"用 @use 加载的模块成员只能在当前文件中访问。如果希望多文件共同访问，可以使用 @forward 规则通过一个共享文件转发所有成员。\",\"因为 @use 将命名空间添加到成员名中，所以在编写样式表时选择非常简单的名称，如 $radius 或 $width 是安全的。这与旧的 @import 规则不同，旧的 @import 规则鼓励用户编写像 $mat-corner-radius这样的长名称，以避免与其他库发生冲突，@use 有助于保持样式表的清晰和可读性!\",\"// a.scss @mixin flex { display: flex; } // index.scss @use './a.scss'; .flex { @include a.flex; }\",\"编译后的 css ：\",\".flex { display: flex; }\"]},\"1303\":{\"h\":\"自定义命名空间名称\",\"t\":[\"使用 @use ... as ... 语法来自定义命名空间名称：\",\"@use './a.scss' as moduleA; .flex { @include moduleA.flex; }\"]},\"1304\":{\"h\":\"去除命名空间\",\"t\":[\"使用 @use ... as * 语法来去除命名空间：\",\"@use './a.scss' as *; .flex { @include flex; }\",\"但不建议去除命名空间，因为这样容易导致命名冲突。\"]},\"1305\":{\"h\":\"私有成员\",\"t\":[\"如果不想将模块中的成员暴露给其他文件访问，将模块成员以 - 或 _ 开头即可。\",\"// a.scss @mixin _flex { display: flex; }\",\"// index.scss @use './a'; .flex { // Error: Private members can't be accessed from outside their modules. // 报错：模块的私有成员无法在模块外部使用 @include a._flex; }\"]},\"1306\":{\"h\":\"引入时的配置\",\"t\":[\"如果模块中的变量使用了 !default 标志使用了默认值，那么在使用 @use 引入时，可以去配置自己的值来覆盖默认值（通过with）：\",\"// a.scss $red: #f00 !default; $size: 16px !default; $bg: #fff; @mixin base { color: $red; font-size: $size; background: $bg; }\",\"// index.scss @use './a.scss' with($red: #a55, $size: 14px); .button { @include a.base; }\",\"编译后的 css ：\",\".button { color: #a55; font-size: 14px; background: #fff; }\"]},\"1307\":{\"h\":\"使用 mixin\",\"t\":[\"用 @use ... with ... 配置模块非常方便，特别是在使用最初为使用 @import 规则而编写的库时。但是它不是特别灵活，而且我们不推荐它用于更高级的用例。\",\"如果你发现自己想一次配置很多变量，传递一个 map 作为配置，或者在模块加载后更新配置，那么考虑写一个 mixin 来设置变量，再写另一个 mixin 来注入你的样式。\",\"// _library.scss $-black: #000; $-border-radius: 0.25rem; $-box-shadow: null; @function -box-shadow() { @return $-box-shadow or (0 0.5rem 1rem rgba($-black, 0.15)); } // 配置（根据参数确定变量值） @mixin configure($black: null, $border-radius: null, $box-shadow: null) { @if $black { $-black: $black !global; } @if $border-radius { $-border-radius: $border-radius !global; } @if $box-shadow { $-box-shadow: $box-shadow !global; } } // 样式混合 @mixin styles { code { border-radius: $-border-radius; box-shadow: -box-shadow(); } }\",\"// index.scss @use 'library'; @include library.configure($black: #222, $border-radius: 0.1rem); @include library.styles;\"]},\"1308\":{\"h\":\"查找模块\",\"t\":[\"通过 @use \\\"module\\\" 使用模块时，不需要写扩展名，程序会自动查找：\",\"查找 ./module.scss，没有则进行下一步\",\"查找 ./module.sass，没有则进行下一步\",\"查找 ./module.css，没有则进行下一步\",\"查找 node_modules/module/sass/module.scss\",\"在所有系统上，路径分隔符统一使用 / 而不是反斜线 \\\\。当前目录模块不需要写 ./ 。\",\"如果 Sass 文件只打算作为模块加载，而不是自己编译，文件名以 _ 开头即可，这些被称为部分（partials），它们告诉 Sass 工具不要尝试自己编译这些文件。但是在导入这些模块时可以不用书写 _ 符号。\",\"使用 @use \\\"directory\\\" 导入一个目录时，编译器会尝试自动查找 _index.scss 或 _index.sass 文件。\",\"加载一个纯 CSS 文件作为模块时，不允许任何特殊的 Sass 特性（如 variables, functions, mixins），为了避免作者一不小心把 Sass 写进 CSS 中，所有 Sass 的特性如果不是合法的 CSS 代码将会报错。否则，CSS 将按原样呈现。它甚至可以被继承（extend）!\"]},\"1309\":{\"h\":\"2.\",\"t\":[\"当使用 @use 加载一个文件时， 这个文件中可以使用 @forward 来使另一个文件中的 mixin、函数和变量可以暴露出去。通常用于跨多个文件组织 Sass 库。\",\"@forward 和 @use 使用方式相同，但作用却完全不一样。\",\"@forward 的作用是转发模块成员，而不是引入成员到当前文件使用，也就是说，通过 @forward 加载一个模块的成员，这些成员并不能在当前文件内访问，而仅仅是将这些成员当作自己的成员对外暴露出去。\",\"举个例子，a.scss 中定义了一个变量 $red，在 b.scss 中使用 @forward \\\"a.scss\\\"，但是在 b 中无法访问 a.$red，但是在另一个文件 c.scss 中使用 @use \\\"b.scss\\\" 后，可以通过 b.$red 访问到 a 中定义的变量。\",\"在上例中，如果想要在 b.scss 中使用变量，那么依然需要使用 @use \\\"a.scss\\\" 来引入变量，然后就可以访问 a.$red 了。\",\"当需要在上例的 b.scss 文件中同时使用 @forward 和 @use 时，建议先写 @forward 再写 @use ，因为这样，在 c.scss 中使用 @use ... with() 配置的变量值会先生效，这样 b.scss 中引用的变量也是配置后的变量。\",\"@forward 虽然对变量，mixin，函数等只能起转发作用，但对其他样式代码和 @use 一样，也会引入并编译，所以在使用了 @forward \\\"module\\\" 的文件中，就算没有使用 @use ，也可以去继承 module.scss 的样式。\",\"// a.scss $red: #f00 !default; .a { color: $red; font-size: 16px; }\",\"// b.scss @forward 'a.scss'; // 转发 a 中的变量，并引入普通样式代码 .b { // 虽然没有使用 @use 不能访问模块 a.scss 的变量，但可以继承它的样式 @extend .a; // 如果写 color: a.$red 会报错，因为没有使用 @use \\\"a.scss\\\" }\",\"// index.scss @use 'b.scss'; .index { @extend .a; background-color: b.$red; }\",\"编译后的 css ：\",\".a, .b, .index { color: #f00; font-size: 16px; } .index { background-color: #f00; }\"]},\"1310\":{\"h\":\"转发时添加前缀\",\"t\":[\"如果一个文件转发多个文件中的成员，在使用时可能会存在多个文件中的成员同名，这样会导致编译出现错误，就算没有同名，也有可能在使用时不清楚到底是哪个模块的成员。\",\"通过 @forward \\\"module\\\" as xxx-* 可以给同一个模块中的成员统一添加前缀。\",\"假设有 a.scss， b.scss， c.scss 三个模块中都有一个名叫 $red 的变量：\",\"// bus.scss @forward 'a.scss' as a-*; @forward 'b.scss' as b-*; @forward 'c.scss' as c-*;\",\"// index.scss @use 'bus.scss'; .index { background-color: bus.$a-red; color: bus.$b-red; border: 1px solid bus.$c-red; }\"]},\"1311\":{\"h\":\"控制成员可见性\",\"t\":[\"默认情况下，@forward 会将一个模块中所有成员都转发，如果只想转发某些成员，或不想转发某些成员，可以这样书写：\",\"@forward \\\"module\\\" hide $var, mixinName, fnName 禁止转发某些成员\",\"@forward \\\"module\\\" show $var, mixinName, fnName 只转发某些成员\",\"各个成员通过逗号 , 分隔开，如果成员是变量，不能省略 $ 符号。\"]},\"1312\":{\"h\":\"转发时配置模块的成员\",\"t\":[\"在转发其他模块的成员时，可以对成员进行配置，修改默认值，或者指定一个确定的值均可。\",\"// a.scss $red: #f00 !default; $black: #000 !default; $green: #0f0 !default;\",\"// b.scss // 转发成员时进行配置，修改默认值，或修改为固定的值 @forward 'a.scss' with ( $red: #f55 !default, $black: #333 );\",\"// index.scss @use 'b.scss' with ( $red: #f11 ); .div { color: b.$red; background-color: b.$black; border-color: b.$green; }\",\"编译后的 css ：\",\".div { color: #f11; background-color: #333; border-color: #0f0; }\"]},\"1313\":{\"h\":\"3.\",\"t\":[\"css 中本身就有 @import，sass 在其基础上进行扩展，可以用来导入模块中的变量，mixin，函数等，以及模块的样式。\",\"和 css 中的 @import 不同之处在于，css 中的 @import 可以是一个线上 url 地址，浏览器会在运行时下载这个文件，而 sass 中的 @import 只能在编译打包阶段运行，所以在 sass 中只能导入一个本地存在的 sass/scss/css 文件。\",\"@import 'a.scss', 'b.scss', 'c.scss';\",\"@import 在 sass 中的用法和在 css 中一样，只不过在 sass 中允许写一个 @import 导入多个文件，文件以逗号 , 分隔开即可，css 中必须每个文件写一个 @import 。\",\"Sass 团队不推荐继续使用 @import。Sass 将在未来几年内逐步淘汰它，并最终将其完全从语言中移除。建议使用 @use 来代替。\",\"使用 @import 存在的问题：\",\"@import 使所有变量、 mixins 和函数都可以全局访问。导致很难判断是在哪里定义的。\",\"因为所有东西都变成全局的，所以 sass 库必须在所有成员前加上前缀，以避免命名冲突。\",\"@extend 也是全局的，这使得很难预测哪些样式将被继承。\",\"每个样式表都会被执行编译，每一个 @import 都会生成它的 CSS，这会增加编译时间并产生臃肿的代码输出。\",\"没有办法定义不想暴露出去的私有成员和占位符选择器。\",\"使用 @use 则不会有以上的问题。\",\"当 @import 一个文件时，该文件的编译过程就像它的所有代码直接出现在 @import 的位置一样。导入的文件中的所有 mixin、函数和变量都是可用的，并且在写入 @import 的确切位置包含了导入的文件中的所有样式代码。并且，在 @import 之前定义的 mixin、函数或变量(包括来自其他 @import 的)甚至都可以在被导入的那个文件中去使用。\",\"// a.scss @import 'c'; $red: #f00;\",\"// b.scss @import 'c'; .b { color: $red; border-color: $black; }\",\"// c.scss .c { font-size: 16px; }\",\"// index.scss @import 'a'; $black: #000; @import 'b'; // 问题：在 b.scss 中能够访问到 a.scss 的变量和之前声明的变量\",\"编译后的 css ：\",\".c { font-size: 16px; } /* stylelint-disable-next-line no-duplicate-selectors */ .c { font-size: 16px; } .b { color: #f00; border-color: #000; }\",\"上例编译结果可以看到，，同一文件多次被 @import 时，会重复编译多次。\"]},\"1314\":{\"h\":\"嵌套的\",\"t\":[\"@import 通常是写在样式表的顶层，但其实它们也可以嵌套在样式块中或纯 CSS at-rules 中。\",\"导入的 CSS 代码块将嵌套在该上下文中，这使得嵌套的 @import 对于将 CSS 块定位到特定元素或媒体查询非常有用。\",\"注意，在嵌套 @import 引入的文件中定义的顶级 mixins，函数，变量依然会被导入为全局的变量。\",\"// a.scss .a { color: $red; }\",\"// index.scss $red: #a55; .index { @import 'a'; }\",\"编译后的 css ：\",\".index .a { color: #a55; }\",\"嵌套 @import 对于确定第三方样式表的作用域非常有用，但是如果您是要导入自己写的样式表，那么最好在 @mixin 中编写您的样式，然后使用 @include 来将 @mixin 包含在嵌套的上下文中。@mixin 可以以更灵活的方式使用，当查看导入的样式表时，它的用途会更清晰。\"]},\"1315\":{\"h\":\"在 sass 中导入 css 并编译\",\"t\":[\"在 sass 中导入 css 文件时，不要显示地写出扩展名 .css ，只写文件名即可。因为如果显示地写出扩展名 .css ，这用来表示是在导入纯 css 文件，编译器则不会去编译 @import 语句，而是原封不动地输出这条语句。\",\"/* a.css */ .a { color: #f00; }\",\"// index.scss @import 'a'; .index { @extend .a; font-size: 16px; }\",\"编译后的 css ：\",\".a, .index { color: #f00; } .index { font-size: 16px; }\",\"如果将 @import \\\"a\\\"; 改为 @import \\\"a.css\\\"; ：\",\"@import 'a.css'; .index { // 报错：The target selector was not found. // 目标选择器未找到 @extend .a; font-size: 16px; }\",\"上面代码编译时会报错：目标选择器未找到，因为编译器遇到 @import \\\"a.css\\\"; 语句，它就会认为这是一条导入纯 css 文件的语句，不需要在编译阶段处理它，而是用于运行时的导入。所以要去继承这个文件中的选择器是无法找到目标选择器的。\"]},\"1316\":{\"h\":\"纯 css 导入语句（不编译）\",\"t\":[\"如果要让编译器原封不动地输出 @import 语句，而不是去编译后替换掉它，那么这里就有几种形式，满足其中任意一种即可。\",\"在 @import 语句中：\",\"以 .css 结尾\",\"以 http:// 或 https:// 开头\",\"路径包含在 url() 之中。\",\"语句中有媒体查询\",\"@import 'xxx.css'; @import 'http://xxx.css'; @import url(xxx); @import 'landscape' screen and (orientation: landscape);\"]},\"1317\":{\"h\":\"中使用插值\",\"t\":[\"sass 中的 @import 语句是不支持使用插值的，因为这可能会让人不知道变量，函数，mixin 是从哪里来的。\",\"但是，对于纯 css @import 语句却是可以的，可以用来动态生成纯 css 的 @import 语句。\",\"@mixin get-font($family) { @import url('http://xxx.com/#{$family}.css'); } @include get-font('font-name');\",\"编译后的 css ：\",\"@import url('http://xxx.com/font-name.css');\"]},\"1318\":{\"h\":\"与模块\",\"t\":[\"假设在 index.scss 中 @import \\\"b.scss\\\" ，而 b.scss 中使用了 @use \\\"a.scss\\\"，在 index.scss 中可以访问 b.scss 中的所有成员（包括私有成员），但无法直接访问 a.scss 中的成员，除非 b.scss 中使用了 @forward \\\"a.scss\\\"。\",\"// a.scss $red: #f00; .a { color: $red; }\",\"// b.scss @use 'a.scss'; $black: #000; .b { color: a.$red; background-color: $black; }\",\"@import 'b.scss'; .index { // color: $red; // 无法直接访问没有被转发的成员 background-color: $black; }\",\"编译后的 css ：\",\".a { color: #f00; } .b { color: #f00; background-color: #000; } .index { background-color: #000; }\",\"上面例子可以看到，虽然 index.scss 无法访问到 a.scss 中没有被转发的成员，但是 a.scss 中的所有样式代码依然会被全部导入。\"]},\"1319\":{\"h\":\"只供 使用的文件（Import-Only Files）\",\"t\":[\"一个模块暴露的成员有可能对 @use 方式的导入有效，但对 @import 方式的导入无效。\",\"比如，使用 @use 默认会为所有成员生成一个以文件名命名的命名空间，但 @import 不会，而是直接暴露到全局，这就需要为模块成员取更长的名字以免命名冲突。\",\"假设我们在维护一个 sass 库，如果我们改成新的模块系统（@use），我们会担心那些之前使用 @import 的用户会无法正常运行。\",\"为了解决这个问题，sass 支持一种文件叫做 “@import 专用文件” ，也就是这个文件只能通过 @import 导入，而无法通过 @use 来导入。\",\"给一个文件命名为 <name>.import.scss 即可，这样就能保持对 @import 的兼容，又能使用新的 @use 模块系统。\",\"创建两个文件模块，a.scss 用于 @use 导入，a.import.scss 用于 @import 导入：\",\"// a.scss $red: #f00; .a { font-size: 16px; color: $red; }\",\"// a.import.scss @forward 'a' as a-*;\",\"用户在使用这个模块时，如果写 @use \\\"a\\\" 则会加载 a.scss 文件，如果写 @import \\\"a\\\" 则会加载 a.import.scss 文件。\",\"使用 @use 导入：\",\"@use 'a'; .user { color: a.$red; }\",\"使用 @import 导入：\",\"@import 'a'; .user { color: $a-red; }\",\"两种方式编译结果完全一样，编译后的 css ：\",\".a { font-size: 16px; color: #f00; } .user { color: #f00; }\"]},\"1320\":{\"h\":\"使用 导入时配置模块成员\",\"t\":[\"在模块被第一次 @import 的语句前面，定义一个全局变量即可配置变量值而不使用默认值。\",\"// a.scss $red: #f00 !default; .a { color: $red; }\",\"// a.import.scss @forward 'a' as a-*;\",\"// a.scss $a-red: #f55; // 在 @import 前定义全局变量，可配置模块成员 @import 'a'; .user { color: $a-red; }\",\"编译后的 css ：\",\".a { color: #f55; } .user { color: #f55; }\",\"模块只会被加载一次，所以就算在第一次 @import 模块后更改了配置(即使是间接的)，再次 @import 模块也不会使用修改的配置。\",\"如果通过 @use 或 @forward 去加载一个使用了 @import 的文件，将会加载到这个文件的所有公共成员及样式，以及它 @import 导入的所有成员和代码。相当于就是 @import 导入的文件的内容就像是直接写在 @import 语句的位置一样。\"]},\"1321\":{\"c\":[\"前端\"]},\"1322\":{\"c\":[\"预处理器\"]},\"1323\":{\"h\":\"Less\"},\"1324\":{\"h\":\"一、简介\",\"t\":[\"Less(Leaner Style Sheets 精简样式表) 是一种动态样式语言，属于 css 预处理器的范畴，它扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展，Less 既可以在 客户端 上运行 ，也可以借助 Node.js 在服务端运行。\",\"Less 编译工具：\",\"Koala\",\"vscode 的 Easy LESS 插件\"]},\"1325\":{\"h\":\"二、注释\",\"t\":[\"多行注释会被保留\",\"单行注释不被保留在编译生成的 CSS 中\",\"/* * 一个块注释 * style comment! */ // 这一行被注释掉了！ div { color: red; }\"]},\"1326\":{\"h\":\"三、变量\"},\"1327\":{\"h\":\"1. 基本使用\",\"t\":[\"使用@ 声明变量\",\"@width: 50px; @height: 100px; div { width: @width; height: @height; }\",\"提示\",\"作为变量属性值直接使用\"]},\"1328\":{\"h\":\"2. 变量插值\",\"t\":[\"变量用于选择器名\",\"@my-selector: banner; // 需要添加 {} .@{my-selector} { font-weight: bold; line-height: 40px; margin: 0 auto; }\",\"变量用于属性名\",\"@property: color; .widget { @{property}: #0ee; background-@{property}: #999; }\",\"提示\",\"作为变量名使用\",\"变量用于URL\",\"// Variables @images: '../img'; // Usage body { color: #444; background: url('@{images}/white-sand.png'); }\",\"变量用于 @import 语句\",\"// Variables @themes: '../../src/themes'; // Usage @import '@{themes}/tidal-wave.less';\",\"提示\",\"作为字符串一部分使用\"]},\"1329\":{\"h\":\"3. 延迟加载\",\"t\":[\"当一个变量被声明多次，会取最后一次的值，并从当前作用域往外寻找变量。\",\"@var: 0; .class { @var: 1; .brass { @var: 2; three: @var; @var: 3; } one: @var; }\",\".class { one: 1; } .class .brass { three: 3; }\"]},\"1330\":{\"h\":\"4. 属性名变量\",\"t\":[\".widget { color: #efefef; background-color: $color; }\",\".widget { color: #efefef; background-color: #efefef; }\",\"直接在已有的属性名前加$可将其作为变量进行复用\"]},\"1331\":{\"h\":\"四、嵌套\",\"t\":[\"Less 使用嵌套代替层叠或与层叠结合使用\",\"#header { color: black; .navigation { font-size: 12px; } .logo { width: 300px; } }\",\"#header { color: black; } #header .navigation { font-size: 12px; } #header .logo { width: 300px; }\"]},\"1332\":{\"h\":\"五、父选择器\",\"t\":[\"在嵌套规则中， & 表示父选择器，常用于给现有选择器添加伪类。\",\".header { a { color: blue; &:hover { color: green; } } }\",\".header a { color: blue; } .header a:hover { color: green; }\",\"如果没有 &，会被编译成后代选择器 a :hover。\",\"除此之外，& 还能用于生成重复类名(近似于拼串)\",\".button { &-ok { background-image: url('ok.png'); } &-cancel { background-image: url('cancel.png'); } &1 { width: 200px; } }\",\".button-ok { background-image: url('ok.png'); } .button-cancel { background-image: url('cancel.png'); } .button1 { width: 200px; }\",\"生成所有可能的选择器排列\",\"p, a, ul, li { border-top: 2px dotted #366; //生成所有可能的选择器排列 & & { border-top: 0; } }\",\"p p, p a, p ul, p li, a p, a a, a ul, a li, ul p, ul a, ul ul, ul li, li p, li a, li ul, li li { border-top: 0; }\"]},\"1333\":{\"h\":\"六、混合(Mixins)\",\"t\":[\"混合(Mixin)将一组属性从一个规则集包含(或混入)到另一个规则集的方式，可理解为复制粘贴。\"]},\"1334\":{\"h\":\"1. 普通混合\",\"t\":[\".common { width: @width; height: @height; } div { background-color: #bfa; .common(); }\",\".common { width: 50px; height: 100px; } div { background-color: #bfa; width: 50px; height: 100px; }\",\"提示\",\"混合前的 css 代码同样存在\"]},\"1335\":{\"h\":\"2. 带参数的混合\",\"t\":[\"混合带参数，参数需要按顺序传递\",\".border(@width, @style, @color) { border: @width @style @color; //border: @arguments; } div { .border(1px, solid, #ccc); }\",\"div { border: 1px solid #ccc; }\",\"@arguments 变量包含了传入的所有参数\",\"提示\",\"此时混合前的代码就不存在了（包含圆括号）\",\"混合带参数并有默认值\",\"需注意的是，就算有默认值，也要按顺序传递\",\".border(@width, @style, @color: #ccc) { border: @width @style @color; } div { .border(1px, solid); } // 会出错 .border(@width: 1px, @style, @color) { border: @width @style @color; } div { .border(solid, #ccc); }\",\"哪怕存在默认值也得按照顺序进行传参，可以使用以下指定参数名来传参\"]},\"1336\":{\"h\":\"3. 命名参数\",\"t\":[\"可以在向混合传参时指定参数名称，从而不需要按顺序传入\",\".border(@width, @style, @color: #ccc) { border: @width @style @color; } div { .border(@style: solid, @color: red, @width: 100px); }\",\"此时@color传的参数可以省略\"]},\"1337\":{\"h\":\"4. 匹配模式\",\"t\":[\"在多个相同的混合中(参数个数必须相同)，匹配特定的混合。\",\".mixin(dark, @color) { color: darken(@color, 10%); } .mixin(light, @color) { color: lighten(@color, 10%); } // @_ 表示匹配所有 .mixin(@_, @color) { display: block; } @switch: light; .class { .mixin(@switch, #888); }\",\".class { color: #a2a2a2; display: block; }\"]},\"1338\":{\"h\":\"七、运算\",\"t\":[\"计算结果以操作数最左侧的单位类型为准\",\"@conversion-1: 5cm + 10mm; // 6cm @conversion-2: 2 - 3cm - 5mm; // -1.5cm @conversion-3: 3.1 * 2cm; // 6.2cm @conversion-4: 4px / 2; // 4px / 2 @incompatible-units: 1cm - 1px; // 0.97354167cm @base: 5%; @filler: @base * 2; // 10% @other: @base + @filler; // 15% @color: #224488 / 2; // #112244 background-color: #112244 + #111; // #223355\"]},\"1339\":{\"h\":\"八、继承\",\"t\":[\"继承可让多个选择器应用同一组属性，最终编译为并集选择器\",\"其性能比混合高，但灵活性比混合低\",\"nav ul { &:extend(.inline); background: blue; } .inline { color: red; }\",\"nav ul { background: blue; } .inline, nav ul { color: red; }\"]},\"1340\":{\"h\":\"Extend \\\"all\\\"\",\"t\":[\"可理解为把 all 前的选择器出现的地方全都替换为 extend 前的选择器\",\"即把 .test 替换为 .replacement 生成一个新的选择器应用样式，且不破坏原有的选择器\",\".a.b.test, .test.c { color: orange; } .test { &:hover { color: green; } } .replacement:extend(.test all) { }\",\".a.b.test, .test.c, .a.b.replacement, .replacement.c { color: orange; } .test:hover, .replacement:hover { color: green; }\"]},\"1341\":{\"h\":\"九、避免编译\",\"t\":[\"通过加引号可以避免 Less 编译，直接把内容输出到 CSS 中\",\".banner .inline .header { width: '100px + 100px'; height: 100px + 100px; }\",\".banner .inline .header { width: '100px + 100px'; height: 200px; }\",\"SCSS 与 less 大同小异，具体的语法可以参考他人博客常用的 SCSS 语法\"]},\"1342\":{\"c\":[\"前端\"]},\"1343\":{\"c\":[\"预处理器\"]},\"1344\":{\"h\":\"vue2基础\"},\"1345\":{\"h\":\"一、Vue 核心\"},\"1346\":{\"h\":\"1. MVVM 模型\"},\"1347\":{\"h\":\"(1). M：模型(Model)\",\"t\":[\"对应于 data 中的数据\"]},\"1348\":{\"h\":\"(2). V：视图(View)\",\"t\":[\"对应于 vue 模板\",\"<div id=\\\"demo\\\"> <h1>Hello，{{name}}，{{address}}</h1> </div>\"]},\"1349\":{\"h\":\"(3). VM：视图模型(ViewModel)\",\"t\":[\"对应于 Vue 实例对象\",\"new Vue({ el: '#demo', //el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串。 data: { //data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。 name: 'atguigu', address: '北京', }, });\"]},\"1350\":{\"h\":\"(4). 初识 Vue\",\"t\":[\"想让 Vue 工作，就必须创建一个 Vue 实例 ，且要传入一个配置对象；\",\"root 容器里的代码依然符合 html 规范，只不过混入了一些特殊的 Vue 语法；\",\"root 容器里的代码被称为 Vue 模板 ；\",\"Vue 实例和容器是一一对应的；\",\"真实开发中只有一个 Vue 实例，并且会配合着组件一起使用；\",\"{ { xxx } }中的 xxx 要写 js 表达式，且 xxx 可以自动读取到 data 中的所有属性；\",\"一旦 data 中的数据发生改变，那么页面中用到该数据的地方也会自动更新；同时模板也会重新解析。\"]},\"1351\":{\"h\":\"2. vue 模板写法\"},\"1352\":{\"h\":\"(1). 插值语法\",\"t\":[\"用于解析标签体内容，{ { xxx } }，xxx 是 js 表达式，且可以直接读取到 data 中的所有属性。\",\"原理拓展\",\"vue 编译时会根据正则分割出括号中的内容作为表达式\",\"input:\\\"我叫{{name}}，我今年{{age}}岁了\\\" output:res = { expression:\\\"我叫\\\"+_s(name)+\\\"，我今年\\\"+_s(age)+\\\"岁了\\\", tokens:[ \\\"我叫\\\", {'@binding': name }, \\\"，我今年\\\" {'@binding': age }, \\\"岁了\\\" ] } // 以AST树的格式存在父节点的chilren数组中 child = { type: 2, expression: res.expression, tokens: res.tokens, text, };\",\"其中_s指的是toString函数，用来获取表达式的值并转为字符串格式\",\"文本中的多个空格会被合并为一个单空格\",\"在 生成代码 阶段调用genText生成如下代码：\",\"`_v(${ text.type === 2 ? text.expression // no need for () because already wrapped in _s() : transformSpecialNewlines(JSON.stringify(text.text)) })`;\"]},\"1353\":{\"h\":\"(2). 指令语法\",\"t\":[\"用于解析标签（包括：标签属性、标签体内容、绑定事件.....），举例：v-bind:href=\\\"xxx\\\" 或简写为 :href=\\\"xxx\\\"，xxx 同样要写 js 表达式，且可以直接读取到 data 中的所有属性。\",\"Vue 中有很多的指令，且形式都是：v-???，包括后面提到的v-model、v-on，此处我们只是拿v-bind举例。\",\"原理拓展\",\"vue 编译时会根据正则从不同的捕获分组中获得 标签名 、属性信息 、 开始结束索引\",\"模板\",\"<div v-bind:class=\\\"{ active: isActive, error: isError }\\\" @click=\\\"handleClick\\\">Click me</div>\",\"提取信息\",\"在解析 开始标签 时，提取标签中的属性：\",\"// match { tagName: 'div', // 标签名 attrs: [ { name: 'v-bind:class', // 属性名 value: \\\"{'active': isActive, 'error': isError}\\\", // 属性值 start: 5, // 属性在模板中的起始位置 end: 38, // 属性在模板中的结束位置 unary: false, // 是否是一元属性（没有值） startTagEnd: 39 // 标签起始部分的结束位置 }, { name: '@click', // 属性名 value: 'handleClick', // 属性值 start: 40, // 属性在模板中的起始位置 end: 57, // 属性在模板中的结束位置 unary: true, // 是一元属性（没有值） startTagEnd: 58 // 标签起始部分的结束位置 } ], start: 0, // 标签在模板中的起始位置 end: 61, // 标签在模板中的结束位置 unarySlash: '' // 是否是自闭合标签的斜杠（在这个例子中，不是自闭合标签） }\",\"vue 会根据上述信息调用start钩子函数生成对应的 AST 节点 （模板解析） \",\"先使用tagName、attrs生成 AST 后再从attrs中解析信息\",\"在解析 闭合标签或者自闭合标签 时会调用end钩子函数处理 AST 节点，其中按照prop修饰符将attrs分为：el.prop和el.attrs，分别对应$prop和$attrs （模板解析）\",\"if ( (modifiers && modifiers.prop) || (!el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)) ) { addProp(el, name, value, list[i], isDynamic); // el.prop } else { addAttr(el, name, value, list[i], isDynamic); //el.attrs }\",\"当生成render函数时，根据上述信息生成代码：（代码生成）\",\"// attributes if (el.attrs) { // attrs:{name:value,...} 此时的value是一个具体的值或者表达式 data += `attrs:${genProps(el.attrs)},`; } // DOM props if (el.props) { data += `domProps:${genProps(el.props)},`; }\"]},\"1354\":{\"h\":\"3. 数据绑定\",\"t\":[\"原理拓展\",\"首先在组件实例化时将定义的 data 中的数据按照如下方式初始化：\",\"let data = vm.$options.data; data = vm._data = typeof data === \\\"function\\\" ? getData(data, vm) : data || {}; ...... proxy(vm, `_data`, key);\",\"这样我们就可以通过vm.xxx来访问我们定义的数据，而 vue 中将template编译为render函数并挂载到组件实例的$options中，其中render函数使用了如下方式进行包裹：\",\"with(this){return ${code}}\",\"此时的this为组件实例，所以在模板中使用的未知变量名会按照作用域访问到this( 组件实例 )的属性和方法，即我们自定义的data。\"]},\"1355\":{\"h\":\"(1).单向绑定(v-bind)\",\"t\":[\"数据只能从data流向页面。\"]},\"1356\":{\"h\":\"(2).双向绑定(v-model)\",\"t\":[\"数据不仅能从 data 流向页面，还可以从页面流向 data。\",\"v-model:value 可以简写为 v-model，因为 v-model 默认收集的就是 value 值。\",\"<!-- 这里的name指的是变量而不是简单的字符串 --> 单向数据绑定： <input type=\\\"text\\\" :value=\\\"name\\\" /> <br /> 双向数据绑定： <input type=\\\"text\\\" v-model=\\\"name\\\" /> <br />\",\"new Vue({ el: '#root', data: { name: 'World', }, });\",\"双向绑定一般都应用在 表单类 元素上（如：input、select等）\",\"v-model的三个修饰符：\",\"lazy：失去焦点再收集数据\",\"如果设置了lazy修饰符，会将input事件改成change事件。\",\"number：输入字符串转为有效的数字(默认收集的 value 值为字符串格式)\",\"配合type=\\\"number\\\"进行使用\",\"trim：输入首尾空格过滤\"]},\"1357\":{\"h\":\"(3).收集表单数据\",\"t\":[\"若：<input type=\\\"text\\\"/>，则v-model收集的是 value 值，用户输入的就是 value 值。\",\"若：<input type=\\\"radio\\\"/>，则v-model收集的是 value 值，且要给标签配置 value 值。\",\"性别： 男 <input type=\\\"radio\\\" name=\\\"sex\\\" v-model=\\\"userInfo.sex\\\" value=\\\"male\\\" /> 女 <input type=\\\"radio\\\" name=\\\"sex\\\" v-model=\\\"userInfo.sex\\\" value=\\\"female\\\" /> <br /> <br />\",\"若：<input type=\\\"checkbox\\\"/>\",\"没有配置input的 value 属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）\",\"配置了input的 value 属性: \",\"v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）\",\"v-model的初始值是数组，那么收集的的就是 value 组成的数组\",\"爱好： 学习 <input type=\\\"checkbox\\\" v-model=\\\"userInfo.hobby\\\" value=\\\"study\\\" /> 打游戏 <input type=\\\"checkbox\\\" v-model=\\\"userInfo.hobby\\\" value=\\\"game\\\" /> 吃饭 <input type=\\\"checkbox\\\" v-model=\\\"userInfo.hobby\\\" value=\\\"eat\\\" /> <br /> <br />\",\"原理拓展\",\"vue 在解析普通标签上的v-model时，会按照普通的指令进行处理，生成如下render中的数据：\",\"directives: [ { name: \\\"model\\\", rawName: \\\"v-model\\\", value: test, expression: \\\"test\\\" } ],\",\"同时还会添加一个额外的事件（input | change）\",\"const event = lazy ? 'change': type === 'range'? RANGE_TOKEN: 'input addHandler(el, event, code, null, true)\",\"最后在patch阶段会调用v-model指令的inserted钩子函数，添加如下事件：\",\"el.addEventListener('compositionstart', onCompositionStart); el.addEventListener('compositionend', onCompositionEnd); el.addEventListener('change', onCompositionEnd); function onCompositionStart(e) { e.target.composing = true; } function onCompositionEnd(e) { if (!e.target.composing) return; e.target.composing = false; trigger(e.target, 'input'); } function trigger(el, type) { const e = document.createEvent('HTMLEvents'); // 初始化，事件类型，是否冒泡，是否阻止浏览器的默认行为 e.initEvent(type, true, true); el.dispatchEvent(e); }\",\"当 el 对应 dom 元素的内容发生变化时，触发input事件，为绑定的变量赋予新的值。\"]},\"1358\":{\"h\":\"(4). 父子间通信\",\"t\":[\"v-model是 vue 中的一个语法糖，它负责监听用户的输入事件以更新数据。\",\"v-model 在内部使用不同的属性为不同的输入元素抛出不同的事件：\",\"text 和 textarea 使用 value 属性和 input 事件；\",\"checkbox 和 radio 使用 checked 属性和 change 事件；\",\"select 字段将 value 作为 prop 并将 change 作为事件\",\"基于上述原理我们可以使用如下方式实现父子间的通信：\",\"子组件设 value 为props属性，并且不主动改变 value 值\",\"子组件通过 this.$emit('input', 'updateValue') 将 updateValue 值传给父组件\",\"父组件通过 v-model=\\\"localValue\\\" 绑定一个本地变量，即可实现子组件value值与父组件updateValue 值同步更新\",\"实际上，这个过程首先是子组件通过 $emit('input') 更新父组件的本地变量，然后子组件中的 value 属性通过 props 得以更新。\",\"<!-- 父组件 --> <HelloWorld v-model=\\\"msg\\\"></HelloWorld> <!-- 子组件 --> props: { value: String, }, <input type=\\\"text\\\" :value=\\\"value\\\" @input=\\\"$emit('input', $event.target.value)\\\" />\",\"原理拓展\",\"组件上的v-model和表单上的完全不同，组件上没有添加directives数组，但是多了一个model属性\",\"// genComponentModel el.model = { value: `(${value})`, expression: JSON.stringify(value), callback: `function (${baseValueExpression}) {${assignment}}`, };\",\"生成代码时生成如下的字符串：\",\"// data data += `model: {value:${el.model.value},callback:${el.model.callback},expression:${el.model.expression}},`;\",\"执行render函数时，会调用createComponent去创建组件 VNode，将其中的v-model指令转换为对应的 属性和事件绑定\",\"export function createComponent( Ctor: Class<Component> | Function | Object | void, data: ?VNodeData, context: Component, children: ?Array<VNode>, tag?: string ): VNode | Array<VNode> | void { // ... if (isDef(data.model)) { transformModel(Ctor.options, data); } // ... const vnode = new VNode( `vue-component-${Ctor.cid}${name ? `-${name}` : ''}`, data, undefined, undefined, undefined, context, { Ctor, propsData, listeners, tag, children }, asyncFactory ); return vnode; } function transformModel(options, data: any) { const prop = (options.model && options.model.prop) || 'value'; const event = (options.model && options.model.event) || 'input'; (data.attrs || (data.attrs = {}))[prop] = data.model.value; // 添加prop：value const on = data.on || (data.on = {}); const existing = on[event]; const callback = data.model.callback; if (isDef(existing)) { if (Array.isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) { on[event] = [callback].concat(existing); } } else { on[event] = callback; // 添加input：callback } }\",\"v-model用于组件间通信时默认传递的事件为input、传递的属性为value\",\"除了上面 v-model 的方法，其实还可以通过 sync 来实现。同样也是处理“监听”和“触发”就行\",\"<!-- 父组件 --> <HelloWorld :msg.sync=\\\"msg\\\"></HelloWorld> <!-- 子组件 --> props: { msg: String, }, <input type=\\\"text\\\" :value=\\\"msg\\\" @input=\\\"$emit('update:msg', $event.target.value)\\\" />\",\"原理拓展\",\"vue 在解析到动态绑定后面的.sync修饰符时，会为当前节点添加自定义事件和回调\",\"addHandler( el, `update:${camelize(name)}`, //事件名 syncGen, //事件值 null, //修饰符 false, //important warn, list[i] );\",\"其中syncGen为事件回调，包含以下两种：\",\"// :msg.sync=\\\"msg\\\" msg = $event; //:name.sync=\\\"user.name\\\" $set(user, name, $event);\",\"默认的自定义事件名称为：update:name(小驼峰形式)\"]},\"1359\":{\"h\":\"4. el 与 data 的两种写法\"},\"1360\":{\"h\":\"(1).el 的 2 种写法\",\"t\":[\"new Vue时候配置 el 属性。\",\"先创建 Vue 实例，随后再通过vm.$mount('#root')指定 el 的值。\",\"当在 options 中配置了 el，则会自动调用$mount\",\"if (vm.$options.el) { vm.$mount(vm.$options.el); }\"]},\"1361\":{\"h\":\"(2).data 的 2 种写法\",\"t\":[\"对象式\",\"data: { name: 'World'; }\",\"函数式\",\"data(){ console.log('@@@',this) //此处的this是Vue实例对象 return{ name:'World' } }\",\"如何选择：目前哪种写法都可以，以后学习到组件时，data 必须使用函数式，否则会报错。\",\"函数式实例化时返回的是相同数据的不同对象，可以保证组件重复挂载时内部数据的独立\"]},\"1362\":{\"h\":\"(3).重要原则\",\"t\":[\"由 Vue 管理的函数，一定不要写箭头函数，一旦写了箭头函数，this 就不再是 Vue 实例了。\"]},\"1363\":{\"h\":\"5. 数据代理\"},\"1364\":{\"h\":\"(1).Object.defineProperty 方法\",\"t\":[\"Object.defineProperty(obj,property,descriptor)\",\"let number = 18; let person = { name: '张三', sex: '男', }; Object.defineProperty(person, 'age', { // value:18, // enumerable:true, //控制属性是否可以枚举，默认值是false // writable:true, //控制属性是否可以被修改，默认值是false // configurable:true //控制属性是否可以被删除，默认值是false //当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值 get() { console.log('有人读取age属性了'); return number; }, //当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值 set(value) { console.log('有人修改了age属性，且值是', value); number = value; }, });\",\"getter和setter用来拦截对应属性的存取行为\"]},\"1365\":{\"h\":\"(2).数据代理\",\"t\":[\"通过一个对象代理对另一个对象中属性的操作（读/写）\",\"let obj = { x: 100 }; let obj2 = { y: 200 }; Object.defineProperty(obj2, 'x', { get() { return obj.x; }, set(value) { obj.x = value; }, });\"]},\"1366\":{\"h\":\"(3).Vue 中的数据代理\",\"t\":[\"通过 vm 对象来代理 data 对象中属性的操作（读/写），可以更加方便的操作 data 中的数据\",\"通过Object.defineProperty()把 data 对象中所有属性添加到 vm 上。\",\"为每一个添加到 vm 上的属性，都指定一个getter/setter，在getter/setter内部去操作（读/写）_data中对应的属性。\",\"目的：为了编码的方便，不用重复的_data.name\",\"上述指的是第二个白色箭头，至于黄色箭头所指的过程大致可分为两部分：\",\"数据劫持，添加响应式\",\"observe(data, true /* asRootData */);\",\"vm._data = typeof data === 'function' ? getData(data, vm) : data || {};\"]},\"1367\":{\"h\":\"6. 事件处理\"},\"1368\":{\"h\":\"(1).绑定事件\",\"t\":[\"使用v-on:xxx 或 @xxx (常用)绑定事件，其中 xxx 是事件名；事件的回调需要配置在methods对象中，最终会出现在 vm 上。\",\"原理拓展\",\"AST 节点上 - 模板解析阶段\",\"在闭合标签时会处理标签属性，按照native修饰符将event分为：el.nativeEvents和el.events，在其中挂载事件回调。\",\"if (onRE.test(name)) { name = name.replace(onRE, ''); //去掉v-on: isDynamic = dynamicArgRE.test(name); if (isDynamic) { name = name.slice(1, -1); //去掉[] } addHandler(el, name, value, modifiers, false, warn, list[i], isDynamic); // 添加事件 } // addHandler中 const newHandler = rangeSetItem({ value: value.trim(), dynamic }, range); // {value,dynamic,start,end} events[name] = newHandler;\",\"代码生成阶段\",\"if (el.events) { data += `${genHandlers(el.events, false)},`; } if (el.nativeEvents) { data += `${genHandlers(el.nativeEvents, true)},`; }\",\"genHandlers生成的代码如下：\",\"const events = { click: { // native value: 'handleClick($event)', modifiers: {}, dynamic: false }, input: { value: 'handleInput', modifiers: {}, dynamic: true } }; // result \\\"nativeOn:{`click:function($event){return handleClick($event)`}, \\\"on:_d({},[{`input,function($event){return handleInput($event)}}`}])\",\"patch 阶段\",\"在 patch 过程中，会触发create和update钩子函数，执行updateDOMListeners函数\",\"events.jpg\",\"updateListeners(on,oldOn,add,remove,createOnceHandler,vm)出现过两次，一次在这里，另外一次则出现在子组件初始化事件中，只不过传入的add、remove不同。\",\"原生事件原理\",\"有两种原生事件，一种是普通标签上的事件、另一种是组件标签上有.native修饰符的原生事件，这两种的逻辑相同都是通过addEventListener绑定给真实元素的。\",\"自定义事件原理\",\"Vue 实例上有一个_events属性，当创建组件实例时，将自定义事件通过$on添加到_events属性中。当通过$emit触发事件时，从_events属性上查找事件名对应的回调。\",\"$on、$emit 是基于发布订阅模式的，维护一个事件中心，$on的时候将事件按名称存在事件中心（vm._events）里，称之为订阅者，然后$emit将对应的事件进行发布，去执行事件中心里的对应的回调\",\"注意 methods 中配置的函数，不要用箭头函数！否则 this 就不是 vm 了； :::\",\"methods 中配置的函数，都是被 Vue 所管理的函数，this 的指向是 组件实例对象\",\"@click=\\\"demo\\\" 和 @click=\\\"demo($event)\\\" 效果一致，但后者可以传参；\",\"<button @click=\\\"showInfo2($event,66)\\\">点我提示信息2（传参）</button>\",\"绑定事件的时候：@xxx=\\\"yyy\\\" yyy 可以写一些简单的语句\",\"原理拓展\",\"当事件值为方法路径或者函数表达式，直接返回对应的值；而当其为函数调用的形式时，则返回如下：\",\"function($event){ return showInfo2($event,66) }\"]},\"1369\":{\"h\":\"(2).事件修饰符\",\"t\":[\"修饰符\",\"作用\",\"stop\",\"阻止事件冒泡（常用）\",\"prevent\",\"阻止默认事件（常用）\",\"self\",\"只有 event.target 是当前操作的元素时才触发事件\",\"once\",\"事件只触发一次（常用）\",\"capture\",\"使用事件的捕获模式\",\"passive\",\"事件的默认行为立即执行，无需等待事件回调执行完毕\",\"用法：\",\"<!-- 阻止默认事件（常用） --> <a href=\\\"http://www.atguigu.com\\\" @click.prevent=\\\"showInfo\\\">点我提示信息</a>\",\"阻止链接的默认跳转\",\"<!-- 阻止事件冒泡（常用） --> <div class=\\\"demo1\\\" @click=\\\"showInfo\\\"> <button @click.stop=\\\"showInfo\\\">点我提示信息</button> <!-- <a href=\\\"http://www.atguigu.com\\\" @click.prevent.stop=\\\"showInfo\\\">点我提示信息</a> --> </div>\",\"stop 修饰符加给内层事件\",\"修饰符可以连续写（按照写的先后顺序依次触发事件）\",\"<!-- 事件只触发一次（常用） --> <button @click.once=\\\"showInfo\\\">点我提示信息</button>\"]},\"1370\":{\"h\":\"(3).键盘事件\",\"t\":[\"按键\",\"别名\",\"回车\",\"enter\",\"删除\",\"delete(捕获“删除”和“退格”键)\",\"退出\",\"esc\",\"空格\",\"space\",\"换行\",\"tab(特殊，必须配合 keydown 去使用)\",\"上\",\"up\",\"下\",\"down\",\"左\",\"left\",\"右\",\"right\",\"Vue 未提供别名的按键，可以使用按键原始的 key 值(名字)去绑定，但注意要转为 kebab-case（短横线命名）\",\"eg：caps-lock\",\"系统修饰键（用法特殊）：ctrl、alt、shift、meta\",\"配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发\",\"配合keydown使用：正常触发事件\",\"也可以使用 keyCode 去指定具体的按键（不推荐）\",\"Vue.config.keyCodes.自定义键名 = 键码，可以去定制按键别名\",\"原理拓展\",\"`function($event){${code}${handlerCode}}`; // code // 1. 条件处理: if()return null; if ('keyCode' in $event && $event.keyCode !== 17 && $event.keyCode !== 16) return null; // 2. 默认表达式 $event.stopPropagation(); // stop $event.preventDefault(); // prevent // handlerCode const handlerCode = isMethodPath ? `return ${handler.value}($event)` : isFunctionExpression ? `return (${handler.value})($event)` : isFunctionInvocation ? `return ${handler.value}` : handler.value;\"]},\"1371\":{\"h\":\"7. 计算属性\"},\"1372\":{\"h\":\"(1).定义\",\"t\":[\"​ 要使用的属性不存在，要通过已有属性计算得来。\"]},\"1373\":{\"h\":\"(2).原理\",\"t\":[\"​ 底层借助了Objcet.defineproperty方法提供的getter和setter。\"]},\"1374\":{\"h\":\"(3).优势\",\"t\":[\"​ 与methods实现相比，内部有 缓存机制（复用） ，效率更高，调试方便；\",\"​ 与插值直接实现相比，更加直观，不用在模板中添加过多代码。\"]},\"1375\":{\"h\":\"(4).计算属性中 get 函数什么时候执行？\",\"t\":[\"初次读取时会执行一次，然后被缓存起来\",\"当依赖的数据发生改变时会被再次调用\"]},\"1376\":{\"h\":\"(5).使用\",\"t\":[\"计算属性最终会出现在 vm 上，直接读取使用即可，在模板中使用时直接使用计算属性名，不可以加括号。\",\"//完整写法 computed:{ fullName:{ get(){ // console.log(this) //此处的this是vm return this.firstName + '-' + this.lastName }, set(value){ const arr = value.split('-') this.firstName = arr[0] this.lastName = arr[1] } } }\",\"//简写（一般写法） computed:{ fullName(){ return this.firstName + '-' + this.lastName } }\",\"如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。\",\"如果计算属性不被修改，即只需要get函数时，可以使用上述 简写写法\"]},\"1377\":{\"h\":\"8. 侦听(监视)属性\",\"t\":[\"当被监视的属性变化时, 回调函数自动调用, 进行相关操作；同时，监视的属性必须存在，才能进行监视！！\"]},\"1378\":{\"h\":\"(1).侦听的不同配置项\",\"t\":[\"watch:{ isHot:{ immediate:true, deep:true, handler(newValue,oldValue){ console.log('isHot被修改了',newValue,oldValue) } }, }\",\"handler ：监听属性的回调函数\",\"immediate：初始化时让handler自调用一下\",\"deep：开启 深度监视\"]},\"1379\":{\"h\":\"(2).深度监视\",\"t\":[\"Vue 中的 watch 默认不监测对象内部值的改变（一层）。\",\"配置deep:true可以监测对象内部值改变（多层）。\",\"data 配置项\",\"data:{ numbers:{ a:1, b:1, c:{ d:{ e:100 } } } }\",\"监听配置项\",\"watch:{ //监视多级结构中某个属性的变化 'numbers.a':{ handler(){ console.log('a被改变了') } } //监视多级结构中所有属性的变化 numbers:{ deep:true, handler(){ console.log('numbers改变了') } } }\"]},\"1380\":{\"h\":\"(3).两种不同写法与简写形式\",\"t\":[\"第一种写法\",\"//正常写法 watch:{ isHot:{ immediate:true, deep:true, handler(newValue,oldValue){ console.log('isHot被修改了',newValue,oldValue) } } }\",\"当watch中不需要除了handler以外的配置项时，可以使用如下的简写形式\",\"//简写 watch:{ isHot(newValue,oldValue){ console.log('isHot被修改了',newValue,oldValue,this) } }\",\"第二种写法\",\"//正常写法 vm.$watch('isHot', { immediate: true, deep: true, handler(newValue, oldValue) { console.log('isHot被修改了', newValue, oldValue); }, });\",\"可简写的情况同上，简写形式如下\",\"//简写 vm.$watch('isHot', (newValue, oldValue) => { console.log('isHot被修改了', newValue, oldValue, this); });\"]},\"1381\":{\"h\":\"9. computed 和 watch 之间的区别\",\"t\":[\"关于源码层面的区别参考computed-和-watch-的区别\"]},\"1382\":{\"h\":\"(1).区别\",\"t\":[\"computed能完成的功能，watch都可以完成，但是较为繁琐(因为需要对计算属性依赖的每个属性都进行监听和处理)，此时优先计算属性。\",\"watch能完成的功能，computed不一定能完成，例如：watch 可以进行异步操作\"]},\"1383\":{\"h\":\"(2).两个重要的原则\",\"t\":[\"目的：不改变 this 的指向\",\"所被 Vue 管理的函数，最好写成普通函数，这样 this 的指向才是 vm 或 组件实例对象。\",\"所有不被 Vue 所管理的函数（定时器的回调函数、ajax 的回调函数等、Promise 的回调函数），最好写成箭头函数，这样 this 的指向才是 vm 或组件实例对象。\"]},\"1384\":{\"h\":\"10. 绑定样式\"},\"1385\":{\"h\":\"(1).class 样式\",\"t\":[\":class=\\\"xxx\\\"，xxx 可以是 字符串、对象、数组 。\",\"字符串写法适用于：类名不确定，要动态获取。\",\"<div class=\\\"basic\\\" :class=\\\"mood\\\" @click=\\\"changeMood\\\">{{name}}</div> <br /> <br />\",\"在 data 中动态配置mood的值\",\"对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。\",\"<div class=\\\"basic\\\" :class=\\\"classObj\\\">{{name}}</div>\",\"data 配置\",\"classObj:{ style1:false, style2:false, }\",\"只有对象属性的值为true时，才会加载此样式\",\"数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。\",\"<div class=\\\"basic\\\" :class=\\\"classArr\\\">{{name}}</div>\",\"data 配置\",\"classArr:['sty1','sty2','sty3'],\"]},\"1386\":{\"h\":\"(2).style 样式\",\"t\":[\":style=\\\"{fontSize: xxx}\\\"，其中 xxx 是动态值。\",\":style=\\\"[a,b]\\\"，其中 a、b 是样式对象。\"]},\"1387\":{\"h\":\"11. 条件渲染\"},\"1388\":{\"h\":\"(1).v-if\",\"t\":[\"写法： \",\"v-if=\\\"表达式\\\"\",\"v-else-if=\\\"表达式\\\"\",\"v-else=\\\"表达式\\\"\",\"适用于：切换频率较低的场景。\",\"特点：不展示的 DOM 元素直接被 移除 。\",\"注意：v-if可以和v-else-if、v-else一起使用，但要求结构不能被“打断”。\",\"原理拓展\",\"vue 解析模板属性时会解析出v-if的值，在 AST 节点上添加如下属性（模板解析阶段）\",\"el.if = exp el.ifConditions = [ { exp: exp, block: el, }, ... ] el.else = true el.elseif = true\",\"代码生成阶段\",\"if (el.if && !el.ifProcessed) { return genIf(el, state); }\",\"genIf生成的代码如下\",\"conditions = [ { exp: 'isShow', block: { tag: 'div', attrs: { class: 'show', }, }, }, { exp: '!isShow', block: { tag: 'div', attrs: { class: 'hide', }, }, }, ]; // result (\\\"(isShow)?_c('div',{staticClass:'show'}):((!isShow)?_c('div',{staticClass:'hide'}):_e())\\\");\"]},\"1389\":{\"h\":\"(2).v-show\",\"t\":[\"写法：v-show=\\\"表达式\\\"\",\"适用于：切换频率较高的场景。\",\"特点：不展示的 DOM 元素未被移除，仅仅是使用样式 隐藏 掉\"]},\"1390\":{\"h\":\"(3).注意\",\"t\":[\"​ 使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到。\"]},\"1391\":{\"h\":\"12. 列表渲染\"},\"1392\":{\"h\":\"(1).基本使用\",\"t\":[\"v-for指令\",\"用于展示列表数据\",\"语法：v-for=\\\"(item, index) in xxx\\\" :key=\\\"yyy\\\"\",\"可遍历(xxx 的类型)：数组、对象、字符串（用的很少）、指定次数（用的很少）\",\"<h2>人员列表</h2> <ul> <li v-for=\\\"(p,index) of persons\\\" :key=\\\"index\\\">{{p.name}}-{{p.age}}</li> </ul>\",\"原理拓展\",\"vue 解析模板属性时会解析出v-for的值，在 AST 节点上添加如下属性（模板解析阶段）\",\"// input input: '(item,index) in arr' // output output: {for: 'arr', alias: 'item', iterator1: 'index'} el.for = 'arr' el.alias = 'item' el.iterator1 = 'index'\",\"代码生成阶段\",\"if (el.for && !el.forProcessed) { return genFor(el, state); }\",\"genFor生成的代码如下\",\"// template <div v-for=\\\"item in items\\\" :key=\\\"item.id\\\">{{ item.name }}</div> // result `_l((items), function(item) { return _c('div', { key: item.id }, [_v(_s(item.name))]); })`\",\"其中_l表示renderList，返回一个 vnode 数组\"]},\"1393\":{\"h\":\"(2).列表过滤\",\"t\":[\"Array.filter(function(element, index, array)\",\"element 数组中当前正在处理的元素\",\"index 正在处理的元素在数组中的索引\",\"array 调用了filter的数组本身\",\"<div id=\\\"root\\\"> <h2>人员列表</h2> <input type=\\\"text\\\" placeholder=\\\"请输入名字\\\" v-model=\\\"keyWord\\\" /> <ul> <li v-for=\\\"(p,index) of filPerons\\\" :key=\\\"index\\\">{{p.name}}-{{p.age}}-{{p.sex}}</li> </ul> </div>\",\"new Vue({ el: '#root', data: { keyWord: '', persons: [ { id: '001', name: '马冬梅', age: 19, sex: '女' }, { id: '002', name: '周冬雨', age: 20, sex: '女' }, { id: '003', name: '周杰伦', age: 21, sex: '男' }, { id: '004', name: '温兆伦', age: 22, sex: '男' }, ], }, computed: { filPerons() { return this.persons.filter((p) => { return p.name.indexOf(this.keyWord) !== -1; }); }, }, });\",\"效果演示\"]},\"1394\":{\"h\":\"(3).key 的原理\",\"t\":[\"虚拟 DOM 中 key 的作用：\",\"key 是虚拟 DOM 对象的标识，当数据发生变化时 ，Vue 会根据 新数据 生成 【新的虚拟 DOM】 , 随后 Vue 进行 【新虚拟 DOM】 与 【旧虚拟 DOM】 的差异 比较 ，比较规则如下：\",\"对比规则：\",\"旧虚拟 DOM 中找到了与新虚拟 DOM 相同 的 key：\",\"①.若虚拟 DOM 中内容没变, 直接使用之前的真实 DOM( 复用 )\",\"②.若虚拟 DOM 中内容变了, 则生成 新的真实 DOM ，随后替换掉页面中之前的真实 DOM。\",\"旧虚拟 DOM 中 未找到 与新虚拟 DOM 相同的 key，则创建 新的真实 DOM ，随后渲染到到页面。\",\"用index作为 key 可能会引发的问题：\",\"若对数据进行：逆序添加、逆序删除等破坏顺序操作：会产生没有必要的真实 DOM 更新 ==> 界面效果没问题, 但效率低。\",\"如果结构中还包含输入类的 DOM：会产生错误 DOM 更新 ==> 界面有问题。\",\"开发中如何选择 key:\",\"最好使用每条数据的唯一标识作为 key, 比如 id、手机号、身份证号、学号等唯一值。\",\"如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用 index 作为 key 是没有问题的。\",\"原理拓展\",\"在新旧vnode.children之间的patch时，会按照如下的顺序进行 diff\",\"diff 的第一步就是判断新旧节点是否相同，相同的话则进行两节点间的patch操作，而判断是否相同的第一步就是对比两者的key是否相同，如果不同则直接判定不同。\",\"function sameVnode(a, b) { return ( a.key === b.key && ((a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b)) || (isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error))) ); }\"]},\"1395\":{\"h\":\"(4).列表排序\",\"t\":[\"arr.sort([compareFunction]) 用来指定按某种顺序进行排列的函数\",\"computed:{ filPerons(){ const arr = this.persons.filter((p)=>{ return p.name.indexOf(this.keyWord) !== -1 }) //判断一下是否需要排序 if(this.sortType){ arr.sort((p1,p2)=>{ return this.sortType === 1 ? p2.age-p1.age : p1.age-p2.age }) } return arr } }\"]},\"1396\":{\"h\":\"(5).Vue 监视数据的原理\",\"t\":[\"vue 会监视 data 中所有层次的数据。\",\"如何监测对象中的数据？\",\"通过setter实现监视，且要在new Vue时就传入要监测的数据。\",\"最简单的模拟实现\",\"let data = { name: '尚硅谷', address: '北京', }; //1. 加工data function Observer(obj) { //汇总对象中所有的属性形成一个数组 const keys = Object.keys(obj); keys.forEach((k) => { Object.defineProperty(this, k, { get() { return obj[k]; }, set(val) { console.log(`${k}被改了，我要去解析模板，生成虚拟DOM.....我要开始忙了`); obj[k] = val; }, }); }); } //创建一个监视的实例对象，用于监视data中属性的变化 const obs = new Observer(data); //准备一个vm实例对象 //2. 将data的值赋给_data let vm = {}; vm._data = data = obs;\",\"对象中后追加的属性，Vue 默认不做响应式处理\",\"如需给后添加的属性做响应式，请使用如下 API：\",\"Vue.set(target，propertyName/index，value) //或 vm.$set(target，propertyName/index，value)\",\"如何监测数组中的数据？\",\"通过包裹数组更新元素的方法实现，本质就是做了两件事：\",\"调用原生对应的方法对数组进行更新。\",\"重新解析模板，进而更新页面。\",\"在 Vue 修改数组中的某个元素一定要用如下方法：\",\"使用这些 API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()\",\"Vue.set() 或 vm.$set()\",\"其他方法没有进行包裹实现，更改数据时不会重新解析模板\",\"注意特别注意：Vue.set() 和 vm.$set() 不能给 vm 或 vm 的根数据对象(vm._data) 添加属性！！！ :::\"]},\"1397\":{\"h\":\"13. 过滤器\",\"t\":[\"定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。\",\"语法：\",\"注册过滤器\",\"Vue.filter(name,callback) --全局过滤器(其他组件也可使用)\",\"Vue.filter('mySlice', function (value) { return value.slice(0, 4); });\",\"new Vue({filters:{}}) --局部过滤器\",\"new Vue({ el: '#root', data: { time: 1621561377603, //时间戳 }, filters: { timeFormater(value, str = 'YYYY年MM月DD日 HH:mm:ss') { return dayjs(value).format(str); }, }, });\",\"使用过滤器\",\"{ { xxx | 过滤器名} } 或 v-bind:属性 = \\\"xxx | 过滤器名\\\"\",\"备注：\",\"过滤器也可以接收额外参数、多个过滤器也可以串联\",\"并没有改变原本的数据, 是产生新的对应的数据\",\"过滤器的功能本质上用computed或者methods都可以实现\",\"过滤器的具体原理可以查看过滤器解析器\"]},\"1398\":{\"h\":\"14. 一些其他的内置指令\"},\"1399\":{\"h\":\"(1).v-text\",\"t\":[\"作用：向其所在的节点中渲染文本内容。\",\"与插值语法的区别：v-text会替换掉节点中的内容，{ { xx } }则不会。\"]},\"1400\":{\"h\":\"(2).v-html\",\"t\":[\"作用：向指定节点中渲染包含 html 结构的内容。\",\"与插值语法的区别 \",\"v-html会替换掉节点中所有的内容，{ { xx } }则不会。\",\"v-html可以识别 html 结构。\",\"危险\",\"v-html存在安全性问题\",\"在网站上动态渲染任意 HTML 是非常危险的，容易导致 XSS 攻击。\",\"一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！\"]},\"1401\":{\"h\":\"(3).v-cloak（没有值）\",\"t\":[\"本质是一个特殊属性，Vue 实例创建完毕并接管容器后，会删掉v-cloak属性。\",\"使用 css 配合 v-cloak 可以解决网速慢时页面展示出{ { xxx } }的问题。\",\"[v-cloak] { display: none; }\",\"<div id=\\\"root\\\"> <h2 v-cloak>{{name}}</h2> </div>\"]},\"1402\":{\"h\":\"(4).v-once（没有值）\",\"t\":[\"v-once所在节点在初次动态渲染后，就视为静态内容了。\",\"以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。\",\"用于一些动态显示初始值的地方。\"]},\"1403\":{\"h\":\"(5).v-pre（没有值）\",\"t\":[\"跳过其所在节点的编译过程。\",\"可利用它跳过：没有使用 指令语法 、没有使用 插值语法 的节点，会加快编译。\"]},\"1404\":{\"h\":\"15. 现有指令总结\",\"t\":[\"指令\",\"功能\",\"v-bind\",\"单向绑定解析表达式, 可简写为 :xxx\",\"v-model\",\"双向数据绑定\",\"v-for\",\"遍历数组/对象/字符串\",\"v-on\",\"绑定事件监听, 可简写为@\",\"v-if\",\"条件渲染（动态控制节点是否存在）\",\"v-else-if\",\"条件渲染（动态控制节点是否存在）\",\"v-else\",\"条件渲染（动态控制节点是否存在）\",\"v-show\",\"条件渲染 (动态控制节点是否展示)\",\"v-text\",\"向其所在的节点中渲染仅文本内容 (不解析 html 结构)\",\"v-html\",\"向指定节点中渲染包含 html 结构的内容\",\"v-cloak\",\"此指令保持在节点上直到关联实例结束编译\",\"v-once\",\"仅动态渲染一次所在的节点\",\"v-pre\",\"跳过其所在节点的编译过程。\"]},\"1405\":{\"h\":\"16. 自定义指令\"},\"1406\":{\"h\":\"(1).定义语法\",\"t\":[\"局部指令：\",\"//完整形式 new Vue({ directives:{ 指令名:{ bind(element,binding){}, inserted(element,binding){}, update(element,binding){} } }) //或 //简写形式 new Vue({ directives{ 指令名(element,binding){} } })\",\"全局指令：\",\"Vue.directive(指令名,配置对象) 或 Vue.directive(指令名,回调函数)\"]},\"1407\":{\"h\":\"(2).配置对象中常用的 3 个回调\",\"t\":[\"bind：指令与元素成功 绑定 时调用。\",\"dom 元素已创建但是还未插入到父节点中，所以 此时可以获取到当前元素的子元素，但是获取不到父元素\",\"例如：为元素添加属性、值或者绑定事件。\",\"inserted：指令所在元素被插入页面时调用(一些 dom 操作)。\",\"例如：获取元素焦点(focus)、获取元素的父元素(parentNode)\",\"update：指令所在模板结构被重新解析时调用。\",\"一般情况下与bind阶段相同\",\"这三个函数中的this均指向window。\",\"directives:{ //简写形式 big(element,binding){ console.log('big',this) //注意此处的this是window element.innerText = binding.value * 10 }, //完整形式 fbind:{ //指令与元素成功绑定时（一上来） bind(element,binding){ element.value = binding.value }, //指令所在元素被插入页面时 inserted(element,binding){ element.focus() }, //指令所在的模板被重新解析时 update(element,binding){ element.value = binding.value } } }\",\"原理拓展\",\"将定义的指令挂载到Vue.option['directives']或vm.$options['directives']\",\"Vue.options = Object.create(null); Vue.options['directives'] = Object.create(null); Vue.directive = function (id, definition) { if (!definition) { return this.options['directives'][id]; } else { if (type === 'directive' && typeof definition === 'function') { definition = { bind: definition, update: definition }; } this.options['directives'][id] = definition; return definition; } };\",\"vue 在编译模板时会解析标签属性中的指令，在 AST 节点上添加如下属性\",\"addDirective( el, name, // 去掉v-和:value rawName, // 全名 value, arg, // value isDynamic, modifiers, list[i] ); // el.directives directives: [ { name: 'on', rawName: 'v-on', value: 'handleClick', arg: 'click', modifiers: { prevent: true }, }, { name: 'bind', rawName: 'v-bind', value: 'message', arg: 'text', modifiers: { sync: true }, }, ];\",\"代码生成阶段\",\"const dirs = genDirectives(el, state); if (dirs) data += dirs + ',';\",\"genDirectives生成的代码如下：\",\"\\\"directives:[{name:\\\"on\\\",rawName:\\\"v-on\\\",value:(handleClick),expression:\\\"handleClick\\\",arg:\\\"click\\\",modifiers:{\\\"prevent\\\":true}},{name:\\\"bind\\\",rawName:\\\"v-bind\\\",arg:\\\"text\\\"}]\\\"\",\"执行时机\",\"具体内容参考指令篇 | 自定义指令，我们知道，在虚拟DOM渲染更新的create、update、destory阶段执行updateDirectives函数，其中会执行如下函数：\",\"// 获取新旧指令集合 const oldDirs = normalizeDirectives(oldVnode.data.directives, oldVnode.context); const newDirs = normalizeDirectives(vnode.data.directives, vnode.context);\",\"其中会将vnode.context.$options['directives']即第一步生成的内容添加到vnode.data.directives[name].def。这样就得到了一个指令需要的所有数据 。\",\"然后只需要在合适的时间点 执行指令定义中的钩子函数 即可。\"]},\"1408\":{\"h\":\"(3).备注\",\"t\":[\"指令定义时不加v-，但使用时要加v-。\",\"简写形式实际上是默认将定义的回调函数在bind和update阶段执行\",\"指令名如果是多个单词，要使用 kebab-case(-断词)命名方式，不要用 camelCase(驼峰)命名。\"]},\"1409\":{\"h\":\"17. Vue 的生命周期\",\"t\":[\"声明周期\"]},\"1410\":{\"h\":\"(1).常用的生命周期钩子：\",\"t\":[\"mounted: 发送 ajax 请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】。\",\"beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】。\"]},\"1411\":{\"h\":\"(2).关于销毁 Vue 实例\",\"t\":[\"销毁后借助 Vue 开发者工具看不到任何信息。\",\"销毁后自定义事件会失效，但原生 DOM 事件依然有效( 已经更新，现在所有的事件均会失效 )。\",\"一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。\",\"原理拓展\",\"vue 工作内容\",\"image-20230914192225280\"]},\"1412\":{\"h\":\"二、 组件化编程\"},\"1413\":{\"h\":\"1. 为什么要使用组件化编程\",\"t\":[\"传统的编程方式:\",\"组件化编程方式：\",\"组件与 vm 实例的关系：\"]},\"1414\":{\"h\":\"2. 基本使用\"},\"1415\":{\"h\":\"(1).定义组件(创建组件)\",\"t\":[\"使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，但也有点区别。\",\"//创建school组件 const school = Vue.extend({ template: ` <div> <h2>学校名称：{{schoolName}}</h2> <h2>学校地址：{{address}}</h2> <button @click=\\\"showName\\\">点我提示学校名</button> </div> `, data() { return { schoolName: '逸夫', address: '北京', }; }, methods: { showName() { alert(this.schoolName); }, }, });\",\"区别如下\",\"el不要写，为什么？ ——— 最终所有的组件都要经过一个 vm 的管理，由 vm 中的el决定服务哪个容器。\",\"data必须写成函数，为什么？ ———— 避免组件被复用时，数据存在引用关系。\",\"备注：使用template可以配置组件结构。\"]},\"1416\":{\"h\":\"(2).注册组件\",\"t\":[\"局部注册：靠new Vue的时候传入components选项\",\"全局注册：靠Vue.component('组件名',组件)\",\"//创建vm new Vue({ el: '#root', //注册组件（局部注册） components: { school, student, }, }); //全局注册 Vue.component('hello', hello);\"]},\"1417\":{\"h\":\"(3).使用组件(写组件标签)\",\"t\":[\"​ <school></school>\"]},\"1418\":{\"h\":\"3. 几个注意点\"},\"1419\":{\"h\":\"(1).组件名\",\"t\":[\"一个单词组成\",\"第一种写法(首字母小写)：school\",\"第二种写法(首字母大写)：School\",\"多个单词组成\",\"第一种写法(kebab-case 命名)：my-school\",\"第二种写法(CamelCase 命名)：MySchool (需要 Vue 脚手架支持)\",\"备注：\",\"组件名尽可能回避 HTML 中已有的元素名称，例如：h2、H2都不行。\",\"可以使用 name 配置项指定组件在开发者工具中呈现的名字。\"]},\"1420\":{\"h\":\"(2).关于组件标签\",\"t\":[\"第一种写法：<school></school>\",\"第二种写法：<school/>\",\"备注：不用使用脚手架时，<school/>会导致后续组件不能渲染。\"]},\"1421\":{\"h\":\"(3).创建组件的简写方式\",\"t\":[\"const school = Vue.extend(options); //可简写为 const school = options;\",\"当没有使用extend定义时，系统会进行判断自动将其调用。\"]},\"1422\":{\"h\":\"4. 组件的嵌套\",\"t\":[\"​ 当各组件发生嵌套时，只需要在父组件中注册子组件，并在父组件的模板中使用组件标签。\",\"//定义hello组件 const hello = Vue.extend({ template: `<h1>{{msg}}</h1>`, data() { return { msg: 'Hello World！', }; }, }); //定义app组件 const app = Vue.extend({ template: ` <div> <hello></hello> </div> `, components: { hello, }, });\"]},\"1423\":{\"h\":\"5. 关于 VueComponent\",\"t\":[\"组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。\",\"// 全局注册 // 当注册组件时的配置对象为原生对象，自动调用vue.extend() if (type === 'component' && isPlainObject(definition)) { definition.name = definition.name || id; definition = this.options._base.extend(definition); } // 局部注册' // _createElement Ctor = resolveAsset(context.$options, 'components', tag); // ... // createComponent if (isObject(Ctor)) { Ctor = baseCtor.extend(Ctor); }\",\"我们只需要写<school/>或<school></school>，Vue 解析时会帮我们创建 school 组件的 实例对象 ， 即 Vue 帮我们执行的：new VueComponent(options)。\",\"原理拓展\",\"在进行 patch 操作，使用createElm创建 dom 元素且当前 vnode 为组件占位 vnode 时，调用组件的 init 钩子函数 ，其中进行了如下操作：\",\"const child = (vnode.componentInstance = new vnode.componentOptions.Ctor(options)); child.$mount(hydrating ? vnode.elm : undefined, hydrating);\",\"特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！（因为是一个新的子类）\",\"关于 this 指向：\",\"组件配置中：\",\"data函数、methods中的函数、watch中的函数、computed中的函数，它们的 this 均是 VueComponent 实例对象 。\",\"new Vue(options)配置中：\",\"data函数、methods中的函数、watch中的函数、computed中的函数 它们的 this 均是 Vue 实例对象 。\",\"VueComponent的实例对象，以后简称 vc(也可称之为:组件实例对象);Vue 的实例对象，以后简称 vm。\"]},\"1424\":{\"h\":\"6. 和 的关系\",\"t\":[\"它们之前存在一个重要的内置关系\",\"VueComponent.prototype.__proto__ === Vue.prototype;\",\"以此来让组件实例对象可以访问到 Vue 原型上的属性、方法。\",\"原理拓展\",\"// Vue.extend const Super = this; const Sub = function VueComponent(options) { this._init(options); }; Sub.prototype = Object.create(Super.prototype); //子类的原型指向vue的原型对象 Sub.prototype.constructor = Sub;\"]},\"1425\":{\"h\":\"三、 Vue 脚手架\",\"t\":[\"注意\",\"现在官方推荐使用 create-vue 来创建基于 Vite 的新项目，这里的Vue CLI仅作为学习使用。另外请参考 Vue 3 工具链指南 以了解最新的工具推荐。\"]},\"1426\":{\"h\":\"1. 安装\",\"t\":[\"第一步（仅第一次执行）：全局安装@vue/cli。\",\"npm install -g @vue/cli\",\"切换到你要创建项目的目录，然后使用命令创建项目\",\"vue create xxxx\",\"启动项目\",\"npm run serve\",\"提示\",\"如出现下载缓慢请配置 npm 淘宝镜像：npm config set registry https://registry.npm.taobao.org\"]},\"1427\":{\"h\":\"2. 目录结构\",\"t\":[\". ├─ node_modules | | ├─ public │ ├── favicon.ico: 页签图标 │ └── index.html: 主页面 | | ├─ src │ ├── assets: 存放静态资源 │ │ └── logo.png | | │ │── component: 存放组件 │ │ └── HelloWorld.vue | | │ │── App.vue: 汇总所有组件 │ │── main.js: 入口文件 | | ├─ .gitignore: git 版本管制忽略的配置 | ├─ babel.config.js: babel 的配置文件 | ├─ jsconfig.json: js编译器的配置文件 | ├─ package.json: 应用包配置文件 | ├─ README.md: 应用描述文件 | ├─ package-lock.json：包版本控制文件 | └─ vue.config.js: vue的全局配置文件\",\"main.js\",\"该文件是整个文件的入口文件\",\"//引入Vue import Vue from 'vue'; //引入App组件，他是所有组件的父组件 import App from './App.vue'; //关闭vue的生产提示 Vue.config.productionTip = false; //创建Vue实例对象---vm new Vue({ //将app组件放入容器中 //h表示createElement函数 render: (h) => h(App), }).$mount('#app');\",\"vue.js 与 vue.runtime.xxx.js 的区别：\",\"vue.js 是完整版的 Vue，包含：核心功能 + 模板解析器。\",\"vue.runtime.xxx.js 是运行版的 Vue，只包含核心功能；没有模板解析器，模板解析的功能有 vue-loader 完成\",\"因为 vue.runtime.xxx.js 没有模板解析器，所以不能使用template配置项，需要使用 render函数接收到的createElement函数去指定具体内容。\"]},\"1428\":{\"h\":\"3. ref 属性\",\"t\":[\"ref被用来给元素或子组件注册引用信息（id 的替代者），当应用在 html 标签上获取的是真实 DOM 元素，应用在组件标签上是组件实例对象。\",\"打标识：\",\"<h1 ref=\\\"xxx\\\">.....</h1> 或 <School ref=\\\"xxx\\\"></School>\",\"获取：\",\"this.$refs.xxx\",\"注意\",\"当子组件中有多个同名的ref，this.$refs.xxx只会指向最后一次声明的元素;\",\"当对v-for的标签元素使用ref，this.$refs.xxx会得到一个数组。\",\"原理拓展\",\"在模板解析阶段首先会将ref作为普通的属性解析到匹配的attrs中生成 AST 节点\",\"在调用end函数处理 AST 节点时，解析其中 ref，如果 attrs 中包含 ref 属性，将其值添加到 AST 节点的同名属性上\",\"const ref = getBindingAttr(el, 'ref'); if (ref) { el.ref = ref; el.refInFor = checkInFor(el); }\",\"生成render函数阶段，生成如下代码：\",\"if (el.ref) { data += `ref:${el.ref},`; }\",\"ref 指令的定义如下：\",\"{ create(_: any, vnode: VNodeWithData) { registerRef(vnode); }, update(oldVnode: VNodeWithData, vnode: VNodeWithData) { if (oldVnode.data.ref !== vnode.data.ref) { registerRef(oldVnode, true); registerRef(vnode); } }, destroy(vnode: VNodeWithData) { registerRef(vnode, true); }, };\",\"其中registerRef用来登记 ref\",\"export function registerRef(vnode: VNodeWithData, isRemoval: ?boolean) { const key = vnode.data.ref; if (!isDef(key)) return; const vm = vnode.context; const ref = vnode.componentInstance || vnode.elm; // vnode对应的组件实例或dom元素 const refs = vm.$refs; // 移除 if (isRemoval) { if (Array.isArray(refs[key])) { remove(refs[key], ref); } else if (refs[key] === ref) { refs[key] = undefined; } } // 添加 else { if (vnode.data.refInFor) { if (!Array.isArray(refs[key])) { refs[key] = [ref]; } else if (refs[key].indexOf(ref) < 0) { // $flow-disable-line refs[key].push(ref); } } else { refs[key] = ref; } } }\"]},\"1429\":{\"h\":\"4. props 配置项\",\"t\":[\"功能：让组件接收外部( 组件标签使用时 )传过来的数据\",\"传递数据：<Demo name=\\\"xxx\\\"/>\",\"因为传递数据时要使用组件标签，所以一般这种消息传递发生于 父子组件 之中。\",\"使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为 props 是不可以修改的！\",\"props传过来的若是对象类型的值，修改对象中的属性时 Vue 不会报错，但不推荐这样做。\",\"props 适用于：\",\"父组件 --> 子组件 通信\",\"子组件 --> 父组件 通信（要求父先给子一个函数,子通过传参来进行通信）\",\"接收数据：\",\"第一种方式（只接收）：props:['name'] \",\"第二种方式（限制类型）：props:{name:String}\",\"第三种方式（限制类型、限制必要性、指定默认值）：\",\"props:{ name:{ type:String, //类型 required:true, //必要性 default:'老王' //默认值 } }\",\"注意\",\"props是只读的，Vue 底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改 data 中的数据。\"]},\"1430\":{\"h\":\"相关的 api\",\"t\":[\"$props\",\"访问组件中接受的所有props\",\"// 循环添加组件中中定义的每个prop defineReactive(vm._props, key, value); Object.defineProperty(Vue.prototype, '$props', { get() { return this._props; }, });\",\"$attrs\",\"defineReactive( vm, '$attrs', (parentData && parentData.attrs) || emptyObject, // vm.$vnode.data.attrs () => { // 设置时报错 !isUpdatingChildComponent && warn(`$attrs is readonly.`, vm); }, true // 浅响应 );\"]},\"1431\":{\"h\":\"5. mixin 混入\",\"t\":[\"功能：可以把 多个组件共用的配置项 提取成一个混入对象\",\"使用方式：\",\"第一步：定义混合\",\"//mixin.js export const mixin = { data(){....}, methods:{....} .... }\",\"第二步：使用混合\",\"全局混入\",\"//main.js import { mixin } from './mixin.js'; Vue.mixin(mixin);\",\"局部混入\",\"//应用混合的组件内 import { mixin } from '../mixin.js'; mixins: [mixin];\",\"原理拓展\",\"全局混入使用全局 api：Vue.mixin\",\"Vue.mixin = function (mixin: Object) { this.options = mergeOptions(this.options, mixin); return this; };\",\"局部混入时在组件实例化时调用vue.extend，其中会使用同一个函数进行合并配置项\",\"// 合并 options 配置 Sub.options = mergeOptions(Super.options, extendOptions); Sub['super'] = Super;\"]},\"1432\":{\"h\":\"6. plugins 插件\",\"t\":[\"功能：用于增强 Vue\",\"本质：包含install方法的一个对象，install的第一个参数是 Vue 的构造函数，第二个以后的参数是插件使用者传递的数据。\",\"定义插件：\",\"对象.install = function (Vue, options) { // 1. 添加全局过滤器 Vue.filter(....) // 2. 添加全局指令 Vue.directive(....) // 3. 配置全局混入(合) Vue.mixin(....) // 4. 添加实例方法 Vue.prototype.$myMethod = function () {...} Vue.prototype.$myProperty = xxxx }\",\"使用插件：Vue.use()\"]},\"1433\":{\"h\":\"7. scoped 样式\",\"t\":[\"作用：隔离样式，防止样式代码冲突。\",\"写法：<style scoped>\",\"一般我们在 App 组件中不使用 scoped，默认此样式全局生效，而在我们自定义的组件中一般要使用此关键字\",\"原理拓展\",\"当我们添加scoped时，vue会将 当前组件的每个标签 和 子组件的根标签 添加自定义属性标识 data-v-xxx，子组件的其他元素则没有此标识。\",\"单层 css：.c1[data-v-xxx]\",\"多层 css：.c1 .c2 .c3[data-v-xxx]\",\"包含子组件：.c1 .c2 .c3 .c4 .c5[data-v-xxx]\",\"此时在父组件中设置 c5 的样式，会转为.c5[data-v-xxx]，但是因为 c5 类本身没有添加自定义属性标识 data-v-xxx，选择器失效，样式同样失效。\",\"当父子组件都添加了scoped样式时，在子组件根标签上会出现两个自定义属性标识\",\"image-20230906131935290\",\"那么当父子组件为 c4 设置了不同的属性时，哪个样式会生效？\",\"image-20230906132229897\",\"如图可以看到父组件设置的样式最终显现出来，因为选择器的优先级相同，则哪个样式生效由 样式编码的顺序 决定，而子组件的样式优先进行了加载，则靠后的是父组件的样式，对其进行了覆盖。\",\"image-20230906132633084\",\"解决方案\",\"vue 提供的 api：:deep(选择器)\",\"当我们将选择器使用此函数进行包裹时，会告诉vue从此选择器开始为子组件的内容，自定义属性标识会添加在上一级选择器中。.c1 .c2 .c3 .c4[data-v-xxx] .c5\",\"为未添加自定义属性标识的样式新开一个<style></style>，不添加scoped\"]},\"1434\":{\"h\":\"8. lang 属性\",\"t\":[\"在创建<style>标签时可以通过lang = \\\"xxx\\\"来指定使用的语言，默认使用 css，当使用其他的语言时，需要安装对应的插件。\",\"npm i less-loader\"]},\"1435\":{\"h\":\"9. 组件化编码流程\",\"t\":[\"拆分静态组件：组件要按照功能点拆分，命名不要与 html 元素冲突。\",\"实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：\",\"一个组件在用：放在组件自身即可。\",\"一些组件在用：放在他们共同的父组件上（ 状态提升 ）。\",\"实现交互：从绑定事件开始。\"]},\"1436\":{\"h\":\"10. webStorage\",\"t\":[\"存储内容大小一般支持 5MB 左右（不同浏览器可能还不一样）\",\"浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。\",\"相关 API：\",\"xxxxxStorage.setItem('key', 'value'); 该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。\",\"xxxxxStorage.getItem('person');\",\"​ 该方法接受一个键名作为参数，返回键名对应的值。\",\"xxxxxStorage.removeItem('key');\",\"​ 该方法接受一个键名作为参数，并把该键名从存储中删除。\",\" xxxxxStorage.clear()\",\"​ 该方法会清空存储中的所有数据。\",\"备注：\",\"SessionStorage 存储的内容会随着浏览器窗口关闭而消失。\",\"LocalStorage 存储的内容，需要手动清除才会消失。\",\"xxxxxStorage.getItem(xxx)如果 xxx 对应的 value 获取不到，那么 getItem 的返回值是null。\",\"JSON.parse(null)的结果依然是null。\"]},\"1437\":{\"h\":\"11. 组件的自定义事件\",\"t\":[\"一种组件间通信的方式，适用于：子组件 => 父组件\",\"使用场景：A 是父组件，B 是子组件，B 想给 A 传数据，那么就要在 A 中给 B 绑定自定义事件（ 事件的回调在 A 中 ）。\",\"绑定自定义事件：\",\"第一种方式，在父组件中：<Demo @click=\\\"test\\\"/> 或 <Demo v-on:click=\\\"test\\\"/>\",\"第二种方式，在父组件中：\",\"<Demo ref=\\\"demo\\\"/> ...... mounted(){ this.$refs.xxx.$on('click',this.test) }\",\"若想让自定义事件只能触发一次，可以使用once修饰符，或$once方法。\",\"触发自定义事件：this.$emit('click',数据)\",\"解绑自定义事件this.$off('click')\",\"组件上也可以绑定原生 DOM 事件，需要使用.native修饰符。\",\"注意：通过this.$refs.xxx.$on('click',回调)绑定自定义事件时，回调 要么配置在 methods 中，要么用箭头函数 ，否则 this 指向会出问题！\"]},\"1438\":{\"h\":\"12. 全局事件总线（GlobalEventBus）\",\"t\":[\"一种组件间通信的方式，适用于 任意组件间通信 。\",\"安装全局事件总线：\",\"new Vue({ ...... beforeCreate() { Vue.prototype.$bus = this //安装全局事件总线，$bus就是当前应用的vm }, ...... })\",\"使用事件总线：\",\"接收数据：A 组件想接收数据，则在 A 组件中给$bus绑定自定义事件，事件的 回调留在 A 组件自身。\",\"methods(){ demo(data){......} } ...... mounted() { this.$bus.$on('xxxx',this.demo) }\",\"提供数据：this.$bus.$emit('xxxx',数据)\",\"最好在beforeDestroy钩子中，用$off去解绑 当前组件所用到的 事件。\"]},\"1439\":{\"h\":\"13. 消息订阅与发布（pubsub）\",\"t\":[\"一种组件间通信的方式，适用于 任意组件间通信 。\",\"使用步骤：\",\"安装 pubsub：npm i pubsub-js\",\"引入: import pubsub from 'pubsub-js'\",\"接收数据：A 组件想接收数据，则在 A 组件中订阅消息，订阅的 回调留在 A 组件自身。\",\"methods(){ demo(data){......} } ...... mounted() { this.pid = pubsub.subscribe('xxx',this.demo) //订阅消息 }\",\"提供数据：pubsub.publish('xxx',数据)\",\"最好在beforeDestroy钩子中，用PubSub.unsubscribe(pid)去 取消订阅。\",\"提示\",\"用这种方式实现组件间的通讯，具体的中间流程无法通过 Vue 的插件进行观察\"]},\"1440\":{\"h\":\"14.\",\"t\":[\"语法：this.$nextTick(回调函数)\",\"作用：在下一次 DOM 更新结束后执行其指定的回调。\",\"什么时候用：当改变数据后，要基于更新后的新 DOM 进行某些操作时，要在nextTick所指定的回调函数中执行。\"]},\"1441\":{\"h\":\"15. Vue 封装的过渡与动画\",\"t\":[\"作用：在插入、更新或移除 DOM 元素时，在合适的时候给元素添加样式类名。\",\"图示：\",\"写法：\",\"准备好样式：\",\"元素进入的样式： \",\"v-enter：进入的起点\",\"v-enter-active：进入过程中\",\"v-enter-to：进入的终点\",\"元素离开的样式： \",\"v-leave：离开的起点\",\"v-leave-active：离开过程中\",\"v-leave-to：离开的终点\",\"封装动画的时候一般只需要使用v-enter-active和v-leave-active，而封装过渡的话一般需要用到所有 api。\",\"使用<transition>包裹要过渡的元素，并配置 name 属性：\",\"<transition name=\\\"hello\\\"> <h1 v-show=\\\"isShow\\\">你好啊！</h1> </transition>\",\"备注：若有多个元素需要过渡，则需要使用：<transition-group>，且每个元素都要指定key值。\",\"继承第三方动画(这里使用Animate.css作为演示)\",\"下载第三方库\",\"$ npm install animate.css --save\",\"导入 css 文件\",\"import 'animate.css';\",\"使用具体的类名引入相关动画效果\",\"<transition-group appear name=\\\"animate__animated animate__bounce\\\" enter-active-class=\\\"animate__swing\\\" leave-active-class=\\\"animate__backInUp\\\"> <h1 v-show=\\\"isShow\\\" key=\\\"1\\\">你好啊</h1> <h1 v-show=\\\"isShow\\\" key=\\\"2\\\">哇哈哈</h1> </transition-group>\"]},\"1442\":{\"h\":\"四、 Vue 中的 ajax\",\"t\":[\"在ajax 的基础中，总结了两种 ajax 跨域问题的解决方案，其中 CORS 算是解决跨域问题的真正解决方式，但是需要与后端提前协定好可以访问资源的客户端。其实，常见的还有第三种方式：代理服务器。\"]},\"1443\":{\"h\":\"1. vue 脚手架配置代理\"},\"1444\":{\"h\":\"方法一\",\"t\":[\"在vue.config.js中添加如下配置：\",\"devServer: { proxy: 'http://localhost:5000'; }\",\"说明：\",\"优点：配置简单，请求资源时直接发给前端（8080）即可。\",\"缺点：不能配置多个代理，不能灵活的控制请求是否走代理。\",\"工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）\"]},\"1445\":{\"h\":\"方法二\",\"t\":[\"编写 vue.config.js 配置具体代理规则：\",\"module.exports = { devServer: { proxy: { '/api1': { // 匹配所有以 '/api1'开头的请求路径 target: 'http://localhost:5000', // 代理目标的基础路径 changeOrigin: true, pathRewrite: { '^/api1': '' }, }, '/api2': { // 匹配所有以 '/api2'开头的请求路径 target: 'http://localhost:5001', // 代理目标的基础路径 changeOrigin: true, pathRewrite: { '^/api2': '' }, }, }, }, }; /* changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000 changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080 changeOrigin默认值为true */\",\"getStudents(){ axios.get('http://localhost:8081/api/students1').then( response=>{ console.log('请求成功了',response.data); }, error=>{ console.log('请求失败了',error.message); } ) }\",\"说明：\",\"优点：可以配置多个代理，且可以灵活的控制请求是否走代理。\",\"缺点：配置略微繁琐，请求资源时必须加前缀。\",\"提醒\",\"在 vue1.x 中还有一个插件库使用广泛，即：vue-resource，使用方式除了关键词由 axios 变为$http，其余均与 axios 相同，但如今 官方已经不再维护 。\"]},\"1446\":{\"h\":\"2. slot 插槽\",\"t\":[\"作用：让父组件可以向子组件指定位置插入 html 结构 ，也是一种组件间通信的方式，适用于 父组件 => 子组件 。\",\"分类：默认插槽、具名插槽、作用域插槽\",\"使用方式\",\"默认插槽\",\"<!-- 父组件中：--> <Category> <div>html结构1</div> </Category> <!-- 子组件中：--> <template> <div> <!-- 定义插槽 --> <slot>插槽默认内容...</slot> </div> </template>\",\"具名插槽\",\"<!-- 父组件中：--> <Category> <template slot=\\\"center\\\"> <div>html结构1</div> </template> <template v-slot:footer> <div>html结构2</div> </template> </Category> <!-- 子组件中：--> <template> <div> <!-- 定义插槽 --> <slot name=\\\"center\\\">插槽默认内容...</slot> <slot name=\\\"footer\\\">插槽默认内容...</slot> </div> </template>\",\"作用域插槽\",\"理解：数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。 （games 数据在 Category 组件中，但使用数据所遍历出来的结构由 App 组件决定）\",\"具体编码\",\"<!-- 父组件中：--> <Category> <template scope=\\\"scopeData\\\"> <!-- 生成的是ul列表 --> <ul> <li v-for=\\\"g in scopeData.games\\\" :key=\\\"g\\\">{{g}}</li> </ul> </template> </Category> <Category> <template slot-scope=\\\"scopeData\\\"> <!-- 生成的是h4标题 --> <h4 v-for=\\\"g in scopeData.games\\\" :key=\\\"g\\\">{{g}}</h4> </template> </Category> <!-- 子组件中：--> <template> <div> <slot :games=\\\"games\\\"></slot> </div> </template> <script> export default { name: 'Category', props: ['title'], //数据在子组件自身 data() { return { games: ['红色警戒', '穿越火线', '劲舞团', '超级玛丽'], }; }, }; </script>\",\"在vue2中我们有以下两种 API 访问父组件传递的插槽。\",\"vm.$slots：用来访问父组件传递的 静态插槽 ，包含对应插槽名称的 vnode 节点数组\",\"image-20230830171539704\",\"vm.$scopedSlots：用来访问 作用域插槽 ，包含一个返回相应 VNode 的函数。\",\"image-20230830171859963\",\"slots是将父组件编译生成的插槽 VNode，在渲染子组件时，放置到对应子组件渲染 VNode 树中。\",\"vm.$slots = { header: [VNode], footer: [VNode], default: [VNode], };\",\"scopedslots是将父组件中插槽内容编译成一个 函数 ，在渲染子组件时，传入子组件 props（作为参数），生成对应的VNode。通过编译成函数，可以将父组件中定义的插槽内容作为动态的函数参数传递给子组件。子组件可以接收这个函数参数并在合适的时候执行它，生成相应的 VNode。\",\"模板编译时：\",\"image-20231012134023642\",\"组件实例化时：\",\"// initRender const { render, _parentVnode } = vm.$options; if (_parentVnode) { vm.$scopedSlots = normalizeScopedSlots( _parentVnode.data.scopedSlots, // 上述图片中的内容 vm.$slots, vm.$scopedSlots ); }\",\"最终$scopedSlots为如下形式：\",\"{ hello:function () { let res = arguments.length ? fn.apply(null, arguments) : fn({}); res = res && typeof res === \\\"object\\\" && !Array.isArray(res) ? [res] // single vnode : normalizeChildren(res); return res && res.length === 0 ? undefined : res; }; ... }\",\"自 2.6.0 后，所有的 $slots 都会作为函数暴露在 $scopedSlots 中，所以上图中也包含了静态插槽 pre；基于此，在 vue3 中将这两个 API 进行了统一，合并为：$slots。\"]},\"1447\":{\"h\":\"\"},\"1448\":{\"h\":\"1. 概念\",\"t\":[\"在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 vue 应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。\"]},\"1449\":{\"h\":\"2. 何时使用？\",\"t\":[\"​ 多个组件需要共享数据(即对公共数据进行读/写)时。(包括一些共享的业务逻辑可以编写在actions中)\"]},\"1450\":{\"h\":\"3. 搭建 vuex 环境\",\"t\":[\"创建文件：src/store/index.js\",\"//引入Vue核心库 import Vue from 'vue'; //引入Vuex import Vuex from 'vuex'; //应用Vuex插件 Vue.use(Vuex); //准备actions对象——响应组件中用户的动作 const actions = {}; //准备mutations对象——修改state中的数据 const mutations = {}; //准备state对象——保存具体的数据 const state = {}; //创建并暴露store export default new Vuex.Store({ actions, mutations, state, });\",\"在main.js中创建 vm 时传入store配置项\",\"...... //引入store import store from './store' ...... //创建vm new Vue({ el:'#app', render: h => h(App), //对象的简写形式 store })\"]},\"1451\":{\"h\":\"4. 基本使用\",\"t\":[\"基本配置项\",\"初始化数据state、配置actions、配置mutations，操作文件store.js\",\"//引入Vue核心库 import Vue from 'vue'; //引入Vuex import Vuex from 'vuex'; //引用Vuex Vue.use(Vuex); const actions = { //响应组件中加的动作 jia(context, value) { // console.log('actions中的jia被调用了',miniStore,value) context.commit('JIA', value); }, }; const mutations = { //执行加 JIA(state, value) { // console.log('mutations中的JIA被调用了',state,value) state.sum += value; }, }; //初始化数据 const state = { sum: 0, }; //创建并暴露store export default new Vuex.Store({ actions, mutations, state, });\",\"组件中读取 vuex 中的数据：$store.state.sum\",\"组件中修改 vuex 中的数据：\",\"$store.dispatch('action中的方法名', 数据); //或 $store.commit('mutations中的方法名', 数据);\",\"提示\",\"备注：若没有网络请求或其他业务逻辑，组件中也可以越过 actions，即不写dispatch，直接编写commit\"]},\"1452\":{\"h\":\"5. getters 的使用\",\"t\":[\"概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。\",\"当加工逻辑比较复杂且其他组件需要进行复用时\",\"在store.js中追加getters配置\",\"...... const getters = { bigSum(state){ return state.sum * 10 } } //创建并暴露store export default new Vuex.Store({ ...... getters })\",\"组件中读取数据：$store.getters.bigSum\"]},\"1453\":{\"h\":\"6. 四个 map 方法的使用\",\"t\":[\"mapState 方法：用于帮助我们映射state中的数据为计算属性(computed)\",\"computed: { //借助mapState生成计算属性：sum、school、subject（对象写法） ...mapState({sum:'sum',school:'school',subject:'subject'}), //借助mapState生成计算属性：sum、school、subject（数组写法） ...mapState(['sum','school','subject']), },\",\"mapGetters 方法：用于帮助我们映射getters中的数据为计算属性(computed)\",\"computed: { //借助mapGetters生成计算属性：bigSum（对象写法） ...mapGetters({bigSum:'bigSum'}), //借助mapGetters生成计算属性：bigSum（数组写法） ...mapGetters(['bigSum']) },\",\"原始方法\",\"computed:{ sum(){ return this.$store.state.sum } }\",\"提示\",\"使用这两种映射简化上述定义计算属性的操作，从而令我们使用这些数据时不需要重复的this.$store.state.xxx，直接使用xxx\",\"mapActions 方法：用于帮助我们生成与actions对话的方法(methods)\",\"即：包含$store.dispatch(xxx)的函数\",\"methods:{ //靠mapActions生成：incrementOdd、incrementWait（对象形式） ...mapActions({incrementOdd:'jiaOdd',incrementWait:'jiaWait'}) //靠mapActions生成：incrementOdd、incrementWait（数组形式） ...mapActions(['jiaOdd','jiaWait']) }\",\"mapMutations 方法：用于帮助我们生成与mutations对话的方法(methods)\",\"即：包含$store.commit(xxx)的函数\",\"methods:{ //靠mapActions生成：increment、decrement（对象形式） ...mapMutations({increment:'JIA',decrement:'JIAN'}), //靠mapMutations生成：JIA、JIAN（对象形式） ...mapMutations(['JIA','JIAN']), }\",\"原始方法\",\"methods:{ jia(){ this.$store.dispatch('jia',this.n) } }\",\"注意\",\"mapActions 与 mapMutations 使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。\"]},\"1454\":{\"h\":\"7. 模块化+命名空间\",\"t\":[\"目的：让代码更好维护，让多种数据分类更加明确。\",\"修改store.js\",\"const countAbout = { namespaced:true,//开启命名空间 state:{x:1}, mutations: { ... }, actions: { ... }, getters: { bigSum(state){ return state.sum * 10 } } } const personAbout = { namespaced:true,//开启命名空间 state:{ ... }, mutations: { ... }, actions: { ... } } const store = new Vuex.Store({ modules: { countAbout, personAbout } })\",\"可将两种不同的数据拆分为两个 js 文件再将其引入index.js中，这样可以使结构更加清晰明了。\",\"开启命名空间后，组件中读取state数据：\",\"//方式一：自己直接读取 this.$store.state.personAbout.list //方式二：借助mapState读取： ...mapState('countAbout',['sum','school','subject']),\",\"开启命名空间后，组件中读取getters数据：\",\"//方式一：自己直接读取 this.$store.getters['personAbout/firstPersonName'] //方式二：借助mapGetters读取： ...mapGetters('countAbout',['bigSum'])\",\"开启命名空间后，组件中调用dispatch\",\"//方式一：自己直接dispatch this.$store.dispatch('personAbout/addPersonWang',person) //方式二：借助mapActions： ...mapActions('countAbout',{incrementOdd:'jiaOdd',incrementWait:'jiaWait'})\",\"开启命名空间后，组件中调用commit\",\"//方式一：自己直接commit this.$store.commit('personAbout/ADD_PERSON',person) //方式二：借助mapMutations： ...mapMutations('countAbout',{increment:'JIA',decrement:'JIAN'}),\"]},\"1455\":{\"h\":\"\",\"t\":[\"理解： 一个路由（route）就是一组 映射关系（key - value） ，多个路由需要路由器（router）进行管理。\",\"前端路由：key 是路径，value 是组件。\",\"后端路由：key 是路径，value 是对应的响应函数。\"]},\"1456\":{\"h\":\"1. 基本使用\",\"t\":[\"安装vue-router，命令：\",\"npm i vue-router\",\"应用插件：Vue.use(VueRouter)\",\"编写 router 配置项:\",\"//引入VueRouter import VueRouter from 'vue-router'; //引入Luyou 组件 import About from '../components/About'; import Home from '../components/Home'; //创建router实例对象，去管理一组一组的路由规则 const router = new VueRouter({ routes: [ { path: '/about', component: About, }, { path: '/home', component: Home, }, ], }); //暴露router export default router;\",\"借助<router-link>标签实现路由切换（active-class可配置高亮样式）\",\"<router-link active-class=\\\"active\\\" to=\\\"/about\\\">About</router-link>\",\"to 指定要跳转的路由\",\"指定组件的呈现位置\",\"<router-view></router-view>\"]},\"1457\":{\"h\":\"2. 几个注意点\",\"t\":[\"路由组件通常存放在pages文件夹，一般组件通常存放在components文件夹。\",\"通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。\",\"每个组件都有自己的$route属性，里面存储着自己的路由信息。\",\"整个应用只有一个 router，可以通过组件的$router属性获取到。\"]},\"1458\":{\"h\":\"3. 嵌套路由（多级路由）\",\"t\":[\"配置路由规则，使用children配置项：\",\"routes: [ { path: '/about', component: About, }, { path: '/home', component: Home, children: [ //通过children配置子级路由 { path: 'news', //此处一定不要写：/news component: News, }, { path: 'message', //此处一定不要写：/message component: Message, }, ], }, ];\",\"跳转（要写完整路径）：\",\"<router-link to=\\\"/home/news\\\">News</router-link>\"]},\"1459\":{\"h\":\"4. 路由的 query 参数\",\"t\":[\"传递参数\",\"<!-- 跳转并携带query参数，to的字符串写法 --> <router-link :to=\\\"`/home/message/detail?id=${message.id}&title=${message.title}`\\\">跳转</router-link> <!-- 跳转并携带query参数，to的对象写法 --> <router-link :to=\\\"{ path: '/home/message/detail', query: { id: message.id, title: message.title, }, }\\\"> 跳转 </router-link>\",\"接收参数：\",\"$route.query.id; $route.query.title;\"]},\"1460\":{\"h\":\"5. 命名路由\",\"t\":[\"作用：可以简化路由的跳转(当路径较长时)。\",\"如何使用\",\"给路由命名：\",\"{ path:'/demo', component:Demo, children:[ { path:'test', component:Test, children:[ { name:'hello' //给路由命名 path:'welcome', component:Hello, } ] } ] }\",\"简化跳转：\",\"<!--简化前，需要写完整的路径 --> <router-link to=\\\"/demo/test/welcome\\\">跳转</router-link> <!--简化后，直接通过名字跳转 --> <router-link :to=\\\"{ name: 'hello' }\\\">跳转</router-link> <!--简化写法配合传递参数 --> <router-link :to=\\\"{ name: 'hello', query: { id: 666, title: '你好', }, }\\\">跳转</router-link>\"]},\"1461\":{\"h\":\"6. 路由的 params 参数\",\"t\":[\"配置路由，声明接收params参数\",\"{ path:'/home', component:Home, children:[ { path:'news', component:News }, { component:Message, children:[ { name:'xiangqing', path:'detail/:id/:title', //使用占位符声明接收params参数 component:Detail } ] } ] }\",\"传递参数\",\"<!-- 跳转并携带params参数，to的字符串写法 --> <router-link :to=\\\"/home/message/detail/666/你好\\\">跳转</router-link> <!-- 跳转并携带params参数，to的对象写法 --> <router-link :to=\\\"{ name: 'xiangqing', params: { id: 666, title: '你好', }, }\\\">跳转</router-link>\",\"警告\",\"路由携带params参数时，若使用 to 的对象写法，则不能使用path配置项，必须使用name配置！\",\"接收参数：\",\"$route.params.id; $route.params.title;\"]},\"1462\":{\"h\":\"7. 路由的 props 配置\",\"t\":[\"作用：让路由组件更方便的收到参数\",\"{ name:'xiangqing', path:'detail/:id', component:Detail, //第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件 // props:{a:900} //第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件（不适用于query参数） // props:true //第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件 props(route){ return { id:route.query.id, title:route.query.title } } }\",\"接收参数\",\"//模板中使用 {{id}} //组件配置 export default { ... props:['id','title'], ... }\"]},\"1463\":{\"h\":\"8. 的 replace 属性\",\"t\":[\"作用：控制路由跳转时操作浏览器历史记录的模式\",\"浏览器的历史记录有两种写入方式：分别为push和replace，push是追加历史记录，replace是替换当前记录。路由跳转时候默认为push\",\"如何开启replace模式：<router-link replace .......>News</router-link>\"]},\"1464\":{\"h\":\"9. 编程式路由导航\",\"t\":[\"作用：不借助<router-link> 实现路由跳转，让路由跳转更加灵活\",\"具体编码：\",\"//$router的两个API this.$router.push({ name: 'xiangqing', params: { id: xxx, title: xxx, }, }); this.$router.replace({ name: 'xiangqing', params: { id: xxx, title: xxx, }, }); //操作浏览器的前进与后退 this.$router.forward(); //前进 this.$router.back(); //后退 this.$router.go(); //可前进也可后退\"]},\"1465\":{\"h\":\"10. 缓存路由组件\",\"t\":[\"作用：让不展示的路由组件保持挂载，不被销毁。\",\"具体编码：\",\"<!-- 缓存单个路由组件 --> <keep-alive include=\\\"News\\\"> <router-view></router-view> </keep-alive> <!-- 缓存多个路由组件 --> <keep-alive :include=\\\"['News', 'Message']\\\"> <router-view></router-view> </keep-alive>\",\"include属性中包含的是组件的名字\"]},\"1466\":{\"h\":\"11. 两个新的生命周期钩子\",\"t\":[\"作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。\",\"具体名字： \",\"activated路由组件被激活时触发。\",\"deactivated路由组件失活时触发。\"]},\"1467\":{\"h\":\"12. 路由守卫\",\"t\":[\"作用：对路由进行权限控制\",\"分类：全局守卫、独享守卫、组件内守卫\",\"全局守卫(分为前置和后置守卫)\",\"//全局前置守卫：初始化时执行、每次路由切换前执行 router.beforeEach((to, from, next) => { console.log('beforeEach', to, from); if (to.meta.isAuth) { //判断当前路由是否需要进行权限控制 if (localStorage.getItem('school') === 'atguigu') { //权限控制的具体规则 next(); //放行 } else { alert('暂无权限查看'); // next({name:'guanyu'}) } } else { next(); //放行 } }); //全局后置守卫：初始化时执行、每次路由切换后执行 router.afterEach((to, from) => { console.log('afterEach', to, from); if (to.meta.title) { document.title = to.meta.title; //修改网页的title } else { document.title = 'vue_test'; } });\",\"独享守卫:\",\"beforeEnter(to,from,next){ console.log('beforeEnter',to,from) if(to.meta.isAuth){ //判断当前路由是否需要进行权限控制 if(localStorage.getItem('school') === 'atguigu'){ next() }else{ alert('暂无权限查看') // next({name:'guanyu'}) } }else{ next() } }\",\"没有后置守卫，可以与全局后置守卫组合使用\",\"写在具体的路由配置项里\",\"组件内守卫：\",\"//进入守卫：通过路由规则，进入该组件时被调用 beforeRouteEnter (to, from, next) { }, //离开守卫：通过路由规则，离开该组件时被调用 beforeRouteLeave (to, from, next) { }\",\"写在具体的组件内部\"]},\"1468\":{\"h\":\"13. 路由器的两种工作模式\",\"t\":[\"对于一个 url 来说，什么是 hash 值？—— #及其后面的内容就是 hash 值。\",\"hash 值不会包含在 HTTP 请求中，即：hash 值不会带给服务器。\",\"hash 模式（默认为 hash 模式）：\",\"地址中永远带着#号，不美观 。\",\"若以后将地址通过第三方手机 app 分享，若 app 校验严格，则地址会被标记为不合法。\",\"兼容性较好。\",\"history 模式：\",\"mode:'history'(创建路由器的时候)\",\"地址干净，美观 。\",\"兼容性和 hash 模式相比略差。\",\"应用部署上线时需要后端人员支持，解决刷新页面服务端 404 的问题。\",\"提示\",\"推荐包：connect-history-api-fallback，专门用来解决 history 模式的问题\"]},\"1469\":{\"h\":\"七、Vue UI 组件库\"},\"1470\":{\"h\":\"1. 移动端常用 UI 组件库\",\"t\":[\"Vant\",\"Cube UI\",\"Mint UI\"]},\"1471\":{\"h\":\"2. PC 端常用 UI 组件库\",\"t\":[\"Element UI\",\"IView UI \"]},\"1472\":{\"c\":[\"前端\"]},\"1473\":{\"c\":[\"框架\",\"vue\"]},\"1474\":{\"h\":\"Vue3基础\"},\"1475\":{\"h\":\"Vue3 简介\",\"t\":[\"2020 年 9 月 18 日，Vue.js 发布 3.0 版本，代号：One Piece（海贼王）\",\"耗时 2 年多、2600+次提交、30+个 RFC、600+次 PR、99 位贡献者\",\"github 上的 tags 地址：https://github.com/vuejs/vue-next/releases/tag/v3.0.0\"]},\"1476\":{\"h\":\"Vue3 带来了什么\"},\"1477\":{\"h\":\"1.性能的提升\",\"t\":[\"打包大小减少 41%\",\"初次渲染快 55%, 更新渲染快 133%\",\"内存减少 54%\",\"......\"]},\"1478\":{\"h\":\"2.源码的升级\",\"t\":[\"使用 Proxy 代替 defineProperty 实现响应式\",\"重写虚拟 DOM 的实现和 Tree-Shaking\",\"......\"]},\"1479\":{\"h\":\"3.拥抱 TypeScript\",\"t\":[\"Vue3 可以更好的支持 TypeScript\"]},\"1480\":{\"h\":\"4.新的特性\",\"t\":[\"Composition API（组合 API）\",\"setup 配置\",\"ref 与 reactive\",\"watch 与 watchEffect\",\"provide 与 inject\",\"......\",\"新的内置组件\",\"Fragment\",\"Teleport\",\"Suspense\",\"其他改变\",\"新的生命周期钩子\",\"data 选项应始终被声明为一个函数\",\"移除 keyCode 支持作为 v-on 的修饰符\",\"......\"]},\"1481\":{\"h\":\"一、创建 Vue3.0 工程\"},\"1482\":{\"h\":\"1.使用 vue-cli 创建\",\"t\":[\"官方文档：https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create\",\"## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上 vue --version ## 安装或者升级你的@vue/cli npm i -g @vue/cli ## 创建 vue create vue_test ## 启动 cd vue_test npm run serve\"]},\"1483\":{\"h\":\"2.使用 vite 创建\",\"t\":[\"官方文档：https://v3.cn.vuejs.org/guide/installation.html#vite\",\"vite 官网：https://vitejs.cn\",\"什么是 vite？—— 新一代前端构建工具。\",\"优势如下： \",\"开发环境中，无需打包操作，可快速的冷启动。\",\"轻量快速的热重载（HMR）。\",\"真正的按需编译，不再等待整个应用编译完成。\",\"传统构建 与 vite 构建对比图\",\"image-20230508115022383\",\"image-20230508115106933\",\"## 创建工程 npm create vite@latest ## 进入工程目录 cd <project-name> ## 安装依赖 npm i ## 运行 npm run dev\"]},\"1484\":{\"h\":\"3. vue3 的 main.js\",\"t\":[\"//引入的不再是Vue构造函数了，引入的是一个名为createApp的工厂函数 //且现在的语法与vue2不兼容，直接使用import vue from 'vue'，vue为undefined import { createApp } from 'vue'; import App from './App.vue'; //创建应用实例对象——app(类似于之前Vue2中的vm，但app比vm更“轻”) const app = createApp(App); //挂载 app.mount('#app'); //createApp(App).mount('#app')\"]},\"1485\":{\"h\":\"二、常用 Composition API\",\"t\":[\"官方文档: https://v3.cn.vuejs.org/guide/composition-api-introduction.html\",\"VUE3和VUE2的不同点较多，相较于其他的一些小的改动，Vue3 采用的组合式 API(Composition API) 与 Vue2 采用的 选项式 API(Options API) 应该是我们自己在编程的时候，体感变动最大的部分，也是需要我们主要适应的部分。\",\"两种 API 风格都能够覆盖大部分的应用场景。它们只是同一个底层系统所提供的两套不同的接口。实际上，选项式 API 是在组合式 API 的基础上实现的！关于 Vue 的基础概念和知识在它们之间都是通用的。\",\"选项式 API 以“ 组件实例 ”的概念为中心 ，对于有面向对象语言背景的用户来说，这通常与基于类的心智模型更为一致。同时，它将响应性相关的细节抽象出来，并强制按照选项来组织代码，从而对初学者而言更为友好。\",\"组合式 API 的核心思想是直接在函数作用域内定义响应式状态变量，并将从多个函数中得到的状态组合起来处理复杂问题。这种形式更加自由，也需要你对 Vue 的响应式系统有更深的理解才能高效使用。相应的，它的灵活性也使得组织和重用逻辑的模式变得更加强大。\",\"简单一句话总结：旧的选项型 API 在代码里分割了不同的属性: data,computed 属性,methods 等等。新的合成型 API 能让我们用方法（function）来分割，相比于旧的 API 使用属性来分组，这样代码会更加简便和整洁。组合式 API 目的是为了解决 Vue2 中“数据和业务逻辑不分离”的问题\"]},\"1486\":{\"h\":\"1.拉开序幕的 setup\",\"t\":[\"理解：Vue3.0 中一个新的配置项，值为一个函数。\",\"setup 是所有Composition API（组合 API）“ 表演的舞台 ”。\",\"组件中所用到的：数据、方法等等，均要配置在 setup 中。\",\"setup 函数的两种 返回值 ：\",\"若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）\",\"setup(){ //数据 let name = '张三' let age = 18 //方法 function sayHello(){ alert(`我叫${name}，我${age}岁了，你好啊！`) } function test2(){ console.log(name) console.log(age) console.log(sayHello) } //返回一个对象（常用） return { name, age, sayHello, test2, } //返回一个函数（渲染函数） // return ()=> h('h1','Hello World') }\",\"若返回一个渲染函数：则可以自定义渲染内容。（了解）\",\"不写<template>标签的时候，可以直接代码渲染\",\"注意点：\",\"尽量不要与 Vue2.x 配置混用 \",\"Vue2.x 配置（data、methos、computed...）中可以访问到setup 中的属性、方法。\",\"但在 setup 中不能访问到Vue2.x 配置（data、methos、computed...）。\",\"如果有重名, setup 优先。\",\"setup 不能是一个 async 函数，因为返回值不再是 return 的对象, 而是 promise, 模板看不到 return 对象中的属性。（后期也可以返回一个 Promise 实例，但需要 Suspense 和异步组件的配合）\",\"<script setup>\",\"在 setup() 函数中手动暴露大量的状态和方法非常繁琐。幸运的是，我们可以通过使用构建工具来简化该操作。当使用单文件组件（SFC）时，我们可以使用 <script setup> 来大幅度地简化代码。\",\"<script setup> import { reactive } from 'vue'; const state = reactive({ count: 0 }); function increment() { state.count++; } </script> <template> <button @click=\\\"increment\\\"> {{ state.count }} </button> </template>\",\"<script setup>中的顶层的导入和变量声明可在同一组件的模板中直接使用。你可以理解为模板中的表达式和 <script setup> 中的代码处在同一个作用域中。\"]},\"1487\":{\"h\":\"2.ref 函数\",\"t\":[\"作用: 定义一个响应式的数据\",\"语法: const xxx = ref(initValue)\",\"创建一个包含响应式数据的引用对象（reference 对象，简称 ref 对象）。\",\"JS 中操作数据： xxx.value\",\"模板中读取数据: 不需要.value，直接：\",\"<div>{{xxx}}</div>\",\"备注：\",\"接收的数据可以是：基本类型、也可以是对象类型。\",\"基本类型的数据：响应式依然是靠Object.defineProperty()的get与set完成的。\",\"对象类型的数据：内部 “ 求助 ” 了 Vue3.0 中的一个新函数—— reactive函数。\"]},\"1488\":{\"h\":\"3.reactive 函数\",\"t\":[\"作用: 定义一个对象类型的响应式数据（基本类型不要用它，要用ref函数）\",\"语法：const 代理对象= reactive(源对象)接收一个对象（或数组），返回一个代理对象（Proxy 的实例对象，简称 proxy 对象）\",\"reactive 定义的响应式数据是“深层次的”。\",\"内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。\",\"setup(){ //数据 let person = reactive({ name:'张三', age:18, job:{ type:'前端工程师', salary:'30K', a:{ b:{ c:666 } } }, hobby:['抽烟','喝酒','烫头'] }) //方法 function changeInfo(){ person.name = '李四' person.age = 48 person.job.type = 'UI设计师' person.job.salary = '60K' person.job.a.b.c = 999 person.hobby[0] = '学习' } //返回一个对象 return { person, changeInfo } }\"]},\"1489\":{\"h\":\"4.Vue3.0 中的响应式原理\"},\"1490\":{\"h\":\"vue2.x 的响应式\",\"t\":[\"实现原理：\",\"对象类型：通过Object.defineProperty()对属性的读取、修改进行拦截（数据劫持）。\",\"数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。\",\"Object.defineProperty(data, 'count', { get() {}, set() {}, });\",\"存在问题：\",\"新增属性、删除属性, 界面不会更新。 \",\"$set()、$delete()\",\"直接通过下标修改数组, 界面不会自动更新。 \",\".splice()\"]},\"1491\":{\"h\":\"Vue3.0 的响应式\",\"t\":[\"实现原理:\",\"通过 Proxy（代理）: 拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。\",\"通过 Reflect（反射）: 对源对象的属性进行操作。\",\"MDN 文档中描述的 Proxy 与 Reflect：\",\"Proxy：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\",\"Reflect：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\",\"new Proxy(data, { // 拦截读取属性值 get(target, prop) { return Reflect.get(target, prop); }, // 拦截设置属性值或添加新属性 set(target, prop, value) { return Reflect.set(target, prop, value); }, // 拦截删除属性 deleteProperty(target, prop) { return Reflect.deleteProperty(target, prop); }, }); proxy.name = 'tom';\"]},\"1492\":{\"h\":\"5.reactive 对比 ref\",\"t\":[\"从定义数据角度对比： \",\"ref 用来定义：基本类型数据 。\",\"reactive 用来定义：对象（或数组）类型数据 。\",\"备注：ref 也可以用来定义 对象（或数组）类型数据 , 它内部会自动通过reactive转为 代理对象 。\",\"从原理角度对比： \",\"ref 通过Object.defineProperty()的get与set来实现响应式（数据劫持）。\",\"reactive 通过使用 Proxy 来实现响应式（数据劫持）, 并通过 Reflect 操作 源对象 内部的数据。\",\"从使用角度对比： \",\"ref 定义的数据：操作数据 需要.value，读取数据时模板中直接读取 不需要.value。\",\"reactive 定义的数据：操作数据与读取数据：均不需要.value。\"]},\"1493\":{\"h\":\"6.setup 的两个注意点\",\"t\":[\"setup 执行的时机\",\"在beforeCreate之前执行一次，this 是undefined。\",\"setup 的 参数\",\"props：值为对象，包含：组件外部传递过来，且 组件内部声明接收了 的属性。\",\"context：上下文对象\",\"attrs: 值为对象，包含：组件外部传递过来，但 没有在 props 配置中声明 的属性, 相当于 this.$attrs。\",\"slots: 收到的插槽内容, 相当于 this.$slots。\",\"emit: 分发自定义事件的函数, 相当于 this.$emit。\",\"expose: 函数用于显式地限制该组件暴露出的属性。\",\"我们可以在父组件中引用子组件对象，而在子组件对象中的内容，应该都可以算作子组件的相关属性和函数。就应该能访问的到。但是出于安全性考虑，默认直接访问是关闭的，如果要访问，可以将子组件中想要被父组件访问的内容进行暴露就可以了。\",\"setup(props,{expose}) { let username = \\\"rose\\\"; let count = ref(1); let increment = () => ++count.value; let decrement = () => --count.value; expose({ increment,username }) return {count,username,increment,decrement} }\",\"props\",\"defineProps 是一个仅 <script setup> 中可用的编译宏命令，并不需要显式地导入。声明的 props 会自动暴露给模板。defineProps 会返回一个对象，其中包含了可以传递给组件的所有 props:\",\"<!-- BlogPost.vue --> <script setup> defineProps(['title']); </script> <template> <h4>{{ title }}</h4> </template>\",\"emit\",\"和 defineProps 类似，defineEmits 仅可用于 <script setup> 之中，并且不需要导入，它返回一个等同于 $emit 方法的 emit 函数。它可以被用于在组件的 <script setup> 中抛出事件，因为此处无法直接访问 $emit：\",\"<script setup> const emit = defineEmits(['enlarge-text']); emit('enlarge-text'); </script>\",\"attrs 和 slots\",\"而attrs和slots在 使用<script setup> 时，可以直接在模板中通过 $slots 和 $attrs 来访问，如果代码中需要，也可以使用 useSlots 和 useAttrs 两个辅助函数。\",\"<script setup> import { useSlots, useAttrs } from 'vue'; const slots = useSlots(); const attrs = useAttrs(); </script>\",\"expose\",\"可以通过 defineExpose 编译器宏来显式指定在 <script setup> 组件中要暴露出去的属性：\",\"<script setup> import { ref } from 'vue'; const a = 1; const b = ref(2); defineExpose({ a, b, }); </script>\"]},\"1494\":{\"h\":\"7. slot 插槽\",\"t\":[\"在vue2中我们有以下两种 API 访问父组件传递的插槽。\",\"vm.$slots：用来访问父组件传递的 静态插槽 ，包含对应插槽名称的 vnode 节点数组\",\"image-20230830171539704\",\"vm.$scopedSlots：用来访问 作用域插槽 ，包含一个返回相应 VNode 的函数。\",\"image-20230830171859963\",\"slots是将父组件编译生成的插槽 VNode，在渲染子组件时，放置到对应子组件渲染 VNode 树中。\",\"scopedslots是将父组件中插槽内容编译成一个 函数 ，在渲染子组件时，传入子组件 props（作为参数），生成对应的VNode。通过编译成函数，可以将父组件中定义的插槽内容作为动态的函数参数传递给子组件。子组件可以接收这个函数参数并在合适的时候执行它，生成相应的 VNode。\",\"自 2.6.0 后，所有的 $slots 都会作为函数暴露在 $scopedSlots 中，所以上图中也包含了静态插槽 pre；基于此，在 vue3 中将这两个 API 进行了统一，合并为：$slots。\"]},\"1495\":{\"h\":\"8.计算属性与监视\"},\"1496\":{\"h\":\"1.computed 函数\",\"t\":[\"与 Vue2.x 中 computed 配置功能一致\",\"写法\",\"import {computed} from 'vue' setup(){ ... //计算属性——简写 let fullName = computed(()=>{ return person.firstName + '-' + person.lastName }) //计算属性——完整 let fullName = computed({ get(){ return person.firstName + '-' + person.lastName }, set(value){ const nameArr = value.split('-') person.firstName = nameArr[0] person.lastName = nameArr[1] } }) }\"]},\"1497\":{\"h\":\"2.watch 函数\",\"t\":[\"与 Vue2.x 中 watch 配置功能一致\",\"两个小“坑”：\",\"监视 reactive 定义的响应式数据时：oldValue 无法正确获取、强制开启了深度监视（deep 配置失效）。\",\"监视 reactive 定义的响应式数据中某个属性时：deep 配置有效。\",\"//情况一：监视ref定义的响应式数据 watch( sum, (newValue, oldValue) => { console.log('sum变化了', newValue, oldValue); }, { immediate: true } ); //情况二：监视多个ref定义的响应式数据 watch([sum, msg], (newValue, oldValue) => { console.log('sum或msg变化了', newValue, oldValue); }); /* 情况三：监视reactive定义的响应式数据 若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！ 若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 */ watch( person, (newValue, oldValue) => { console.log('person变化了', newValue, oldValue); }, { immediate: true, deep: false } ); //此处的deep配置不再奏效 //情况四：监视reactive定义的响应式数据中的某个属性 watch( () => person.job, (newValue, oldValue) => { console.log('person的job变化了', newValue, oldValue); }, { immediate: true, deep: true } ); //情况五：监视reactive定义的响应式数据中的某些属性 watch( [() => person.job, () => person.name], (newValue, oldValue) => { console.log('person的job变化了', newValue, oldValue); }, { immediate: true, deep: true } ); //特殊情况 watch( () => person.job, (newValue, oldValue) => { console.log('person的job变化了', newValue, oldValue); }, { deep: true } ); //此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效\"]},\"1498\":{\"h\":\"3.watchEffect 函数\",\"t\":[\"watch 的套路是：既要指明监视的属性，也要指明监视的回调。\",\"watchEffect 的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。\",\"watchEffect 有点像 computed：\",\"但 computed 注重的计算出来的值（回调函数的返回值），所以必须要写返回值。\",\"而 watchEffect 更注重的是过程（回调函数的函数体），所以不用写返回值。\",\"//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。 watchEffect(() => { const x1 = sum.value; const x2 = person.age; console.log('watchEffect配置的回调执行了'); });\",\"回调的触发时机\",\"当你更改了响应式状态，它可能会同时触发 Vue 组件更新和侦听器回调。\",\"类似于组件更新，用户创建的侦听器回调函数也会被批量处理以避免重复调用。例如，如果我们同步将一千个项目推入被侦听的数组中，我们可能不希望侦听器触发一千次。\",\"默认情况下，侦听器回调会在父组件更新 (如有) 之后、所属组件的 DOM 更新之前被调用。这意味着如果你尝试在侦听器回调中访问所属组件的 DOM，那么 DOM 将处于更新前的状态。\",\"如果想在侦听器回调中能访问被 Vue 更新之后的所属组件的 DOM，你需要指明 flush: 'post' 选项：\",\"watch(source, callback, { flush: 'post', }); watchEffect(callback, { flush: 'post', });\"]},\"1499\":{\"h\":\"4. ref 属性的问题\",\"t\":[\"众所周知，在 vue2 中，我们可以在一个 dom 元素上添加 ref 属性，然后通过组件实例的$refs访问到指定的这个 dom 元素从而进行一些 dom 操作。在 vue3 中已经取消了这个 api，为了通过组合式 API 获得该模板引用，我们需要声明一个同名的 ref：\",\"字符串值\",\"<script setup> import { ref, onMounted } from 'vue'; // 声明一个 ref 来存放该元素的引用 // 必须和模板里的 ref 同名 const input = ref(null); onMounted(() => { input.value.focus(); }); </script> <template> <input ref=\\\"input\\\" /> </template>\",\"函数\",\"除了使用字符串值作名字，ref attribute 还可以绑定为一个函数，会在每次组件更新时都被调用。该函数会收到元素引用作为其第一个参数：\",\"<input :ref=\\\"(el) => { /* 将 el 赋值给一个数据属性或 ref 变量 */ }\\\">\",\"注意我们这里需要使用动态的 :ref 绑定才能够传入一个函数。当绑定的元素被卸载时，函数也会被调用一次，此时的 el 参数会是 null。你当然也可以绑定一个组件方法而不是内联函数。\",\"组件\",\"模板引用也可以被用在一个子组件上。这种情况下引用中获得的值是组件实例：\",\"<script setup> import { ref, onMounted } from 'vue'; import Child from './Child.vue'; const child = ref(null); onMounted(() => { // child.value 是 <Child /> 组件的实例 }); </script> <template> <Child ref=\\\"child\\\" /> </template>\",\"如果一个子组件使用的是选项式 API 或没有使用 <script setup>，被引用的组件实例和该子组件的 this 完全一致，这意味着父组件对子组件的每一个属性和方法都有完全的访问权。这使得在父组件和子组件之间创建紧密耦合的实现细节变得很容易，当然也因此，应该只在绝对需要时才使用组件引用。大多数情况下，你应该首先使用标准的 props 和 emit 接口来实现父子组件交互。\",\"有一个例外的情况，使用了 <script setup> 的组件是默认私有的：一个父组件无法访问到一个使用了 <script setup> 的子组件中的任何东西，除非子组件在其中通过 defineExpose 宏显式暴露：\",\"<script setup> import { ref } from 'vue'; const a = 1; const b = ref(2); // 像 defineExpose 这样的编译器宏不需要导入 defineExpose({ a, b, }); </script>\",\"当父组件通过模板引用获取到了该组件的实例时，得到的实例类型为 { a: number, b: number } (ref 都会自动解包，和一般的实例一样)。\"]},\"1500\":{\"h\":\"9.生命周期\",\"t\":[\"vue2.x 生命周期\",\"vue3.x 生命周期\",\"Vue3.0 中可以继续使用 Vue2.x 中的生命周期钩子，但有两个被更名： \",\"beforeDestroy改名为 beforeUnmount\",\"destroyed改名为 unmounted\",\"Vue3.0 也提供了 Composition API 形式的生命周期钩子，与 Vue2.x 中钩子对应关系如下： \",\"beforeCreate===>setup()\",\"created===>setup()\",\"beforeMount ===>onBeforeMount\",\"mounted===>onMounted\",\"beforeUpdate===>onBeforeUpdate\",\"updated ===>onUpdated\",\"beforeUnmount ===>onBeforeUnmount\",\"unmounted ===>onUnmounted\"]},\"1501\":{\"h\":\"10.自定义 hook 函数\",\"t\":[\"什么是 hook？—— 本质是一个函数，把 setup 函数中使用的 Composition API 进行了封装。\",\"类似于 vue2.x 中的mixin。\",\"自定义 hook 的优势: 复用代码, 让 setup 中的逻辑更清楚易懂。\",\"组合式函数相对于无渲染组件的主要优势是：组合式函数不会产生额外的组件实例开销。当在整个应用中使用时，由无渲染组件产生的额外组件实例会带来无法忽视的性能开销。\",\"我们推荐在纯逻辑复用时使用组合式函数，在需要同时复用逻辑和视图布局时使用无渲染组件。\"]},\"1502\":{\"h\":\"11.toRef\",\"t\":[\"作用：创建一个 ref 对象，其 value 值指向另一个对象中的某个属性。\",\"语法：const name = toRef(person,'name')\",\"应用: 要将响应式对象中的某个属性单独提供给外部使用时。\",\"扩展：toRefs 与toRef功能一致，但可以批量创建多个 ref 对象，语法：toRefs(person)\"]},\"1503\":{\"h\":\"三、其它 Composition API\"},\"1504\":{\"h\":\"1.shallowReactive 与 shallowRef\",\"t\":[\"shallowReactive：只处理对象最外层属性的响应式（浅响应式）。\",\"shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。\",\"什么时候使用?\",\"如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===> shallowReactive。\",\"如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===> shallowRef。\"]},\"1505\":{\"h\":\"2.readonly 与 shallowReadonly\",\"t\":[\"readonly: 让一个响应式数据变为只读的（深只读）。\",\"shallowReadonly：让一个响应式数据变为只读的（浅只读）。\",\"应用场景: 不希望数据被修改时。\",\"person = readonly(person); sum = shallowReadonly(sum);\"]},\"1506\":{\"h\":\"3.toRaw 与 markRaw\",\"t\":[\"toRaw： \",\"作用：将一个由reactive生成的响应式对象转为普通对象。\",\"使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。\",\"markRaw： \",\"作用：标记一个对象，使其永远不会再成为响应式对象。\",\"应用场景: \",\"有些值不应被设置为响应式的，例如复杂的第三方类库等。\",\"当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。\"]},\"1507\":{\"h\":\"4.customRef\",\"t\":[\"作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。\",\"实现防抖效果：\",\"<template> <input type=\\\"text\\\" v-model=\\\"keyword\\\" /> <h3>{{ keyword }}</h3> </template> <script> import { ref, customRef } from 'vue'; export default { name: 'Demo', setup() { // let keyword = ref('hello') //使用Vue准备好的内置ref //自定义一个myRef function myRef(value, delay) { let timer; //通过customRef去实现自定义 return customRef((track, trigger) => { return { get() { track(); //告诉Vue这个value值是需要被“追踪”的 return value; }, set(newValue) { clearTimeout(timer); timer = setTimeout(() => { value = newValue; trigger(); //告诉Vue去更新界面 }, delay); }, }; }); } let keyword = myRef('hello', 500); //使用程序员自定义的ref return { keyword, }; }, }; </script>\"]},\"1508\":{\"h\":\"5.provide 与 inject\",\"t\":[\"prop 逐级透传\",\"provide 和 inject\",\"作用：实现祖与后代组件间通信\",\"套路：父组件有一个 provide 选项来提供数据，后代组件有一个 inject 选项来开始使用这些数据\",\"具体写法：\",\"祖组件中：\",\"setup(){ ...... let car = reactive({name:'奔驰',price:'40万'}) provide('car',car) ...... }\",\"后代组件中：\",\"setup(props,context){ ...... const car = inject('car') return {car} ...... }\"]},\"1509\":{\"h\":\"6.响应式数据的判断\",\"t\":[\"isRef: 检查一个值是否为一个 ref 对象\",\"isReactive: 检查一个对象是否是由 reactive 创建的响应式代理\",\"isReadonly: 检查一个对象是否是由 readonly 创建的只读代理\",\"isProxy: 检查一个对象是否是由 reactive 或者 readonly 方法创建的代理\"]},\"1510\":{\"h\":\"四、Composition API 的优势\"},\"1511\":{\"h\":\"1.Options API 存在的问题\",\"t\":[\"使用传统 OptionsAPI 中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。\"]},\"1512\":{\"h\":\"2.Composition API 的优势\",\"t\":[\"我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。\"]},\"1513\":{\"h\":\"五、新的组件\"},\"1514\":{\"h\":\"1.Fragment\",\"t\":[\"在 Vue2 中: 组件必须有一个根标签\",\"在 Vue3 中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中\",\"好处: 减少标签层级, 减小内存占用\"]},\"1515\":{\"h\":\"2.Teleport\",\"t\":[\"interface TeleportProps { /** * 必填项。指定目标容器。 * 可以是选择器或实际元素。 */ to: string | HTMLElement; /** * 当值为 `true` 时，内容将保留在其原始位置 * 而不是移动到目标容器中。 * 可以动态更改。 */ disabled?: boolean; }\",\"什么是 Teleport？—— Teleport 是一种能够将我们的 组件 html 结构 移动到指定位置的技术。\",\"<teleport to=\\\"移动位置\\\"> <div v-if=\\\"isShow\\\" class=\\\"mask\\\"> <div class=\\\"dialog\\\"> <h3>我是一个弹窗</h3> <button @click=\\\"isShow = false\\\">关闭弹窗</button> </div> </div> </teleport>\",\"移动位置处可以使用 css 选择器\",\"<Teleport to=\\\"#some-id\\\" /> <Teleport to=\\\".some-class\\\" /> <Teleport to=\\\"[data-teleport]\\\" />\"]},\"1516\":{\"h\":\"3.Suspense\",\"t\":[\"等待异步组件时渲染一些额外内容，让应用有更好的用户体验\",\"使用步骤：\",\"异步引入组件\",\"import { defineAsyncComponent } from 'vue'; const Child = defineAsyncComponent(() => import('./components/Child.vue'));\",\"使用Suspense包裹组件，并配置好default 与 fallback\",\"<template> <div class=\\\"app\\\"> <h3>我是App组件</h3> <Suspense> <template v-slot:default> <Child /> </template> <template v-slot:fallback> <h3>加载中.....</h3> </template> </Suspense> </div> </template>\"]},\"1517\":{\"h\":\"六、其他\"},\"1518\":{\"h\":\"1.全局 API 的转移\",\"t\":[\"Vue 2.x 有许多全局 API 和配置。\",\"例如：注册全局组件、注册全局指令等。\",\"//注册全局组件 Vue.component('MyButton', { data: () => ({ count: 0 }), template: '<button @click=\\\"count++\\\">Clicked {{ count }} times.</button>' }) //注册全局指令 Vue.directive('focus', { inserted: el => el.focus() }\",\"Vue3.0 中对这些 API 做出了调整，将全局的 API，即：Vue.xxx调整到应用实例（app）上\",\"2.x 全局 API（Vue）\",\"3.x 实例 API (app)\",\"Vue.config.xxxx\",\"app.config.xxxx\",\"Vue.config.productionTip\",\"移除\",\"Vue.component\",\"app.component\",\"Vue.directive\",\"app.directive\",\"Vue.mixin\",\"app.mixin\",\"Vue.use\",\"app.use\",\"Vue.prototype\",\"app.config.globalProperties\"]},\"1519\":{\"h\":\"2.其他改变\",\"t\":[\"data 选项应始终被声明为一个函数。\",\"过渡类名的更改：\",\"Vue2.x 写法\",\".v-enter, .v-leave-to { opacity: 0; } .v-leave, .v-enter-to { opacity: 1; }\",\"Vue3.x 写法\",\".v-enter-from, .v-leave-to { opacity: 0; } .v-leave-from, .v-enter-to { opacity: 1; }\",\"移除keyCode 作为 v-on 的修饰符，同时也不再支持config.keyCodes\",\"移除v-on.native修饰符\",\"父组件中绑定事件\",\"<my-component v-on:close=\\\"handleComponentEvent\\\" v-on:click=\\\"handleNativeClickEvent\\\" />\",\"子组件中声明自定义事件\",\"<script> export default { emits: ['close'], }; </script>\",\"移除过滤器（filter）\",\"过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。\",\"关于defineComponent\",\"这个函数，其实就是因为Typescript而存在的\",\"为了让 TypeScript 正确地推导出组件选项内的类型，我们需要通过 defineComponent() 这个全局 API 来定义组件\",\"带给我们唯一的好处就是，可以在编写组件的时候，typescript可以更加清楚的进行类型推断的提示，当然，现在我们使用的VS Code已经不需要纠结这个问题，只要你是 TS 的项目，写没写这个 defineComponent，VS Code都会帮我们提示。\"]},\"1520\":{\"c\":[\"前端\"]},\"1521\":{\"c\":[\"框架\",\"vue\"]},\"1522\":{\"h\":\"浏览器渲染原理\"},\"1523\":{\"c\":[\"前端\"]},\"1524\":{\"c\":[\"浏览器渲染原理\"]},\"1525\":{\"h\":\"浏览器是如何工作的\"},\"1526\":{\"h\":\"一、浏览器是如何渲染页面的\",\"t\":[\"当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。\",\"整个渲染流程分为多个阶段，分别是： HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画。每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。\",\"这样，整个渲染流程就形成了一套组织严密的生产流水线。\",\"渲染的第一步是 解析 HTML 。解析过程中遇到 CSS 解析 CSS，遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS 文件和 外部的 JS 文件。\",\"如果主线程解析到link位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的 HTML。这是因为下载和解析 CSS 的工作是在预解析线程中进行的。这就是 CSS 不会阻塞 HTML 解析的根本原因。\",\"如果主线程解析到script位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML。这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停。这就是 JS 会阻塞 HTML 解析的根本原因。\",\"第一步完成后，会得到 DOM 树和 CSSOM 树，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在 CSSOM 树中。\",\"渲染的下一步是 样式计算 。主线程会遍历得到的 DOM 树，依次为树中的每个节点计算出它最终的样式，称之为 Computed Style。在这一过程中，很多预设值会变成绝对值，比如red会变成rgb(255,0,0)；相对单位会变成绝对单位，比如em会变成px。这一步完成后，会得到一棵带有样式的 DOM 树。\",\"接下来是 布局 ，布局完成后会得到布局树。布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含块的位置。大部分时候，DOM 树和布局树并非一一对应。\",\"比如display:none的节点没有几何信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然 DOM 树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。\",\"下一步是 分层。主线程会使用一套复杂的策略对整个布局树中进行分层。分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率。滚动条、堆叠上下文、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过will-change属性更大程度的影响分层结果。\",\"再下一步是 绘制 。主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。\",\"完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。合成线程首先对每个图层进行分块，将其划分为更多的小区域。它会从线程池中拿取多个线程来完成分块工作。\",\"分块完成后，进入 光栅化 阶段。合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化。\",\"GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。光栅化的结果，就是一块一块的位图\",\"最后一个阶段就是 画 了。合成线程拿到每个层、每个块的位图后，生成一个个「指引（quad）」信息。\",\"指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。变形发生在合成线程，与渲染主线程无关，这就是transform效率高的本质原因。合成线程会把 quad 提交给 GPU 进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像。\"]},\"1527\":{\"h\":\"二、什么是 reflow？\",\"t\":[\"reflow 的本质就是重新计算 layout 树。当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout。\",\"为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算。所以，改动属性造成的 reflow 是异步完成的。也同样因为如此，当 JS 获取布局属性时，就可能造成无法获取到最新的布局信息。浏览器在反复权衡下，最终决定获取属性立即 reflow。\"]},\"1528\":{\"h\":\"三、什么是 repaint？\",\"t\":[\"repaint 的本质就是重新根据分层信息计算了绘制指令。当改动了可见样式后，就需要重新计算，会引发 repaint。\",\"由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint。\"]},\"1529\":{\"h\":\"四、为什么 transform 的效率高？\",\"t\":[\"因为 transform 既不会影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个「draw」阶段\",\"由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化。\"]},\"1530\":{\"h\":\"五、浏览器输入 URL 地址之后\",\"t\":[\"在浏览器地址栏输入地址，并按下回车键后，发生了哪些事情？\",\"浏览器自动补全协议、端口\",\"浏览器自动完成 url 编码\",\"浏览器根据 url 地址查找本地缓存，根据缓存规则看是否命中缓存，若命中缓存则直接使用缓存，不再发出请求\",\"通过 DNS 解析找到服务器的 IP 地址\",\"浏览器向服务器发出建立 TCP 连接的申请，完成三次握手后，连接通道建立\",\"若使用了 HTTPS 协议，则还会进行 SSL 握手，建立加密信道。使用 SSL 握手时，会确定是否使用 HTTP2\",\"浏览器决定要附带哪些 cookie 到请求头中\",\"浏览器自动设置好请求头、协议版本、cookie，发出 GET 请求\",\"服务器处理请求，进入后端处理流程。完成处理后，服务器响应一个 HTTP 报文给浏览器。\",\"浏览器根据使用的协议版本，以及 Connection 字段的约定，决定是否要保留 TCP 连接。\",\"浏览器根据响应状态码决定如何处理这一次响应\",\"浏览器根据响应头中的 Content-Type 字段识别响应类型，如果是 text/html，则对响应体的内容进行 HTML 解析，否则做其他处理\",\"浏览器根据响应头的其他内容完成缓存、cookie 的设置\",\"浏览器开始从上到下解析 HTML，若遇到外部资源链接，则进一步请求资源\",\"解析过程中生成 DOM 树、CSSOM 树，然后一边生成，一边把二者合并为渲染树（rendering tree），随后对渲染树中的每个节点计算位置和大小（reflow），最后把每个节点利用 GPU 绘制到屏幕（repaint）\",\"在解析过程中还会触发一系列的事件，当 DOM 树完成后会触发 DOMContentLoaded 事件，当所有资源加载完毕后会触发 load 事件\"]},\"1531\":{\"c\":[\"前端\"]},\"1532\":{\"c\":[\"浏览器渲染原理\"]},\"1533\":{\"h\":\"浏览器缓存\",\"t\":[\"最基本的缓存分为两种：\",\"客户端缓存\",\"服务器缓存\",\"本文仅讨论客户端缓存\",\"所谓客户端缓存，顾名思义，是将某一次的响应结果保存在客户端（比如浏览器）中，而后续的请求仅需要从缓存中读取即可，极大的降低了服务器的处理压力。\",\"客户端缓存的原理如下：\",\"这里就涉及到一个缓存策略的问题，这些问题包括：\",\"哪些资源需要加入到缓存，哪些不需要？\",\"缓存的时间是多久呢？\",\"如果服务器的资源有改动，客户端如何更新缓存呢？\",\"如果缓存过期了，可是服务器上的资源并没有发生变动，又该如何处理呢？\",\".......\",\"要回答这些问题，就必须要清楚http中关于缓存的协议\"]},\"1534\":{\"h\":\"来自服务器的缓存指令\",\"t\":[\"当客户端发出一个get请求到服务器，服务器可能有以下的内心活动：「你请求的这个资源，我很少会改动它，干脆你把它缓存起来吧，以后就不要来烦我了」\",\"为了表达这个美好的愿望，服务器在响应头中加入了以下内容：\",\"Cache-Control: max-age=3600 ETag: W/\\\"121-171ca289ebf\\\" Date: Thu, 30 Apr 2020 12:39:56 GMT Last-Modified: Thu, 30 Apr 2020 08:16:31 GMT\",\"这个响应头表达了下面的信息：\",\"Cache-Control: max-age=3600，我希望你把这个资源缓存起来，缓存时间是 3600 秒（1 小时）\",\"ETag: W/\\\"121-171ca289ebf\\\"，这个资源的编号是W/\\\"121-171ca289ebf\\\"\",\"Date: Thu, 30 Apr 2020 12:39:56 GMT，我给你响应这个资源的服务器时间是格林威治时间2020-04-30 12:39:56\",\"Last-Modified: Thu, 30 Apr 2020 08:16:31 GMT，这个资源的上一次修改时间是格林威治时间2020-04-30 08:16:31\",\"这个美好的缓存愿望，就这样通过响应头传递给客户端了\",\"如果客户端是其他应用程序，可能并不会理会服务器的愿望，也就是说，可能根本不会缓存任何东西。\",\"但是凑巧客户端是一个浏览器，它和服务器一直以来都是相亲相爱的小伙伴，当它看到服务器的这个响应头表达的美好愿望后，立即忙起来：\",\"浏览器把这次请求得到的响应体缓存到本地文件中\",\"浏览器标记这次请求的请求方法和请求路径\",\"浏览器标记这次缓存的时间是 3600 秒\",\"浏览器记录服务器的响应时间是格林威治时间2020-04-30 12:39:56\",\"浏览器记录服务器给予的资源编号W/\\\"121-171ca289ebf\\\"\",\"浏览器记录资源的上一次修改时间是格林威治时间2020-04-30 08:16:31\",\"这一次的记录非常重要，它为以后浏览器要不要去请求服务器提供了各种依据\"]},\"1535\":{\"h\":\"来自客户端的缓存指令\",\"t\":[\"当客户端收拾好行李，准备再次请求GET /index.js时，它突然想起了一件事：我需要的东西在不在缓存里呢？\",\"此时，客户端会到缓存中去寻找是否有缓存的资源\",\"寻找的过程如下：\",\"缓存中是否有匹配的请求方法和路径？\",\"如果有，该缓存资源是否还有效呢？\",\"以上两个验证会导致浏览器产生不同的行为\",\"要验证是否有匹配的缓存非常简单，只需要验证当前的请求方法GET和当前的请求路径/index.js是否有对应的缓存存在即可\",\"如果没有，就直接请求服务器，就和第一次请求服务器时一样，这种情况没有什么好讨论的\",\"关键在于验证缓存是否有效\",\"如何验证呢？\",\"非常简单，就是把max-age + Date，得到一个过期时间，看看这个过期时间是否大于当前时间，如果是，则表示缓存还没有过期，仍然有效，如果不是，则表示缓存失效。\"]},\"1536\":{\"h\":\"缓存有效\",\"t\":[\"当浏览器发现缓存有效时，完全不会请求服务器，直接使用缓存即可得到结果，这种情况，又叫做强制缓存\",\"此时，如果你断开网络，会发现资源仍然可用\",\"这种情况会极大的降低服务器压力，但当服务器更改了资源后，浏览器是不知道的，只要缓存有效，它就会直接使用缓存\"]},\"1537\":{\"h\":\"缓存无效\",\"t\":[\"当浏览器发现缓存已经过期，它并不会简单的把缓存删除，而是抱着一丝希望，想问问服务器，我这个缓存还能继续使用吗？\",\"于是，浏览器向服务器发出了一个带缓存的请求，又称之为协商缓存\",\"所谓带缓存的请求，无非就是加入了以下的请求头：\",\"If-Modified-Since: Thu, 30 Apr 2020 08:16:31 GMT If-None-Match: W/\\\"121-171ca289ebf\\\"\",\"它们表达了下面的信息：\",\"If-Modified-Since: Thu, 30 Apr 2020 08:16:31 GMT，亲，你曾经告诉我，这个资源的上一次修改时间是格林威治时间2020-04-30 08:16:31，请问这个资源在这个时间之后有发生变动吗？\",\"If-None-Match: W/\\\"121-171ca289ebf\\\"，亲，你曾经告诉我，这个资源的编号是W/\\\"121-171ca289ebf，请问这个资源的编号发生变动了吗？\",\"其实，这两个问题可以合并为一个问题：快说！资源到底变了没有！\",\"之所以要发两个信息，是为了兼容不同的服务器，因为有些服务器只认If-Modified-Since，有些服务器只认If-None-Match，有些服务器两个都认\",\"目前的很多服务器，只要发现If-None-Match存在，就不会去看``If-Modified-Since`\",\"If-Modified-Since是http1.0版本的规范，If-None-Match是http1.1的规范\",\"此时，问题又抛给了服务器，接下来，就是服务器的表演时间了\",\"服务器可能会产生两个情况：\",\"缓存已经失效\",\"缓存仍然有效\",\"如果是第一种情况——缓存已经失效，那么非常简单，服务器再次给予一个正常的响应（响应码200 带响应体），同时可以附带上新的缓存指令，这就回到了上一节——来自服务器的缓存指令\",\"这样一来，客户端就会重新缓存新的内容\",\"但如果服务器觉得缓存仍然有效，它可以通过一种极其简单的方式告诉客户端：\",\"响应码为304 Not Modified\",\"无响应体\",\"响应头带上新的缓存指令，见上一节——来自服务器的缓存指令\",\"这样一来，就相当于告诉客户端：「你的缓存资源仍然可用，我给你一个新的缓存时间，你那边更新一下就可以了」\",\"于是，客户端就继续 happy 的使用缓存了\",\"这样一来，可以最大程度的减少网络传输，因为如果资源还有效，服务器就不会传输消息体\",\"它们完整的交互过程如下： \"]},\"1538\":{\"h\":\"细节\",\"t\":[\"上面描述了客户端缓存的基本概念和过程\",\"但其中仍然有不少细节值得我们注意\"]},\"1539\":{\"h\":\"Cache-Control\",\"t\":[\"在上述的讲解中，Cache-Control是服务器向客户端响应的一个消息头，它提供了一个max-age用于指定缓存时间。\",\"实际上，Cache-Control还可以设置下面一个或多个值：\",\"public：指示服务器资源是公开的。比如有一个页面资源，所有人看到的都是一样的。这个值对于浏览器而言没有什么意义，但可能在某些场景可能有用。本着「我告知，你随意」的原则，http协议中很多时候都是客户端或服务器告诉另一端详细的信息，至于另一端用不用，完全看它自己。\",\"private：指示服务器资源是私有的。比如有一个页面资源，每个用户看到的都不一样。这个值对于浏览器而言没有什么意义，但可能在某些场景可能有用。本着「我告知，你随意」的原则，http协议中很多时候都是客户端或服务器告诉另一端详细的信息，至于另一端用不用，完全看它自己。\",\"no-cache：告知客户端，你可以缓存这个资源，但是不要直接使用它。当你缓存之后，后续的每一次请求都需要附带缓存指令，让服务器告诉你这个资源有没有过期。见：「来自客户端的缓存指令 - 缓存无效」\",\"no-store：告知客户端，不要对这个资源做任何的缓存，之后的每一次请求都按照正常的普通请求进行。若设置了这个值，浏览器将不会对该资源做出任何的缓存处理。\",\"max-age：不再赘述\",\"比如，Cache-Control: public, max-age=3600表示这是一个公开资源，请缓存 1 个小时。\"]},\"1540\":{\"h\":\"Expires\",\"t\":[\"在http1.0版本中，是通过Expires响应头来指定过期时间点的，例如：\",\"Expires: Thu, 30 Apr 2020 23:38:38 GMT\",\"到了http1.1版本，已更改为通过Cache-Control的max-age来记录了。\"]},\"1541\":{\"h\":\"记录缓存时的有效期\",\"t\":[\"浏览器会按照服务器响应头的要求，自动记录缓存到本地文件，并设置各种相关信息\",\"在这些信息中，有效期尤为关键，它决定了这个缓存可以使用多久\",\"浏览器会根据服务器不同的响应情况，设置不同的有效期\",\"具体的有效期设置，按照下面的流程进行： \",\"例如，当max-age设置为 0 时，缓存立即过期\",\"虽然立即过期，但缓存仍然被记录下来，后续的请求通过缓存指令发送到服务器，来确认资源是否被更改。\",\"因此，Cache-Control: max-age=0类似于Cache-Control: no-cache\"]},\"1542\":{\"h\":\"Pragma\",\"t\":[\"这是http1.0版本的消息头\",\"当该消息头出现在请求中时，是向服务器表达：不要考虑任何缓存，给我一个正常的结果。\",\"在http1.1版本中，可以在请求头中加入Cache-Control: no-cache实现同样的含义。\",\"是的，Cache-Control可以出现在请求头中\",\"在Chrome浏览器中调试时，如果勾选了Disable cache，则发送的请求中会附带该信息\"]},\"1543\":{\"h\":\"使用 hash 或版本号\",\"t\":[\"如果你是一个前端工程师，使用过vue或其他基于webpack搭建的工程\",\"你会发现打包的结果中很多文件名类似于这样：\",\"app.68297cd8.css\",\"文件的中间部分使用了hash值\",\"这样做的好处是，可以让客户端大胆的、长时间的缓存该文件，减轻服务器的压力\",\"当文件改动后，它的文件hash值也会随之而变，比如变成了app.446fccb8.css\",\"这样一来，客户端要请求新的文件时，就会发现路径从/app.68297cd8.css变成了app.446fccb8.css，由于之前的缓存路径无法匹配到，因此就会发送新的请求来获取新资源了。\",\"以上是现代流行的做法。\",\"而在古老的年代，还没有构建工具出现时，人们使用的办法是在资源路径后面加入版本号来获取新版本的文件\",\"比如，页面中引入了一个 css 资源app.css，它可能的引入方式是：\",\"<link href=\\\"/app.css?v=1.0.0\\\" />\",\"这样一来，缓存的路径是/app.css?v=1.0.0\",\"当服务器的版本发生变化时，可以给予新的版本号，让 html 中的路径发生变动\",\"<link href=\\\"/app.css?v=1.0.1\\\" />\",\"由于新的路径无法命中缓存，于是浏览器就会发送新的普通请求来获取这个资源\",\"最后，通过客户端和服务器的视角，来总结一下以上内容\"]},\"1544\":{\"h\":\"服务器视角\",\"t\":[\"服务器无法知道客户端到底有没有像浏览器那样缓存文件，它只管根据请求的情况来决定如何响应 很多后端语言搭建的服务器都会自带自己的默认缓存规则，当然也支持不同程度的修改\"]},\"1545\":{\"h\":\"浏览器视角\",\"t\":[\"浏览器在发出请求时会判断要不要使用缓存 \",\"当收到服务器响应时，会自动根据缓存指令进行处理\"]},\"1546\":{\"c\":[\"前端\"]},\"1547\":{\"c\":[\"浏览器缓存\"]},\"1548\":{\"h\":\"浏览器\"},\"1549\":{\"c\":[\"浏览器通信\"]},\"1550\":{\"c\":[\"浏览器\",\"渲染原理\",\"v8引擎\"]},\"1551\":{\"h\":\"事件循环\"},\"1552\":{\"h\":\"一、浏览器的进程模型\"},\"1553\":{\"h\":\"1. 何为进程？\",\"t\":[\"程序运行需要有它自己专属的内存空间，可以把这块内存空间简单的理解为进程\",\"每个应用至少有一个进程，进程之间相互独立，即使要通信，也需要双方同意。\"]},\"1554\":{\"h\":\"2. 何为线程？\",\"t\":[\"有了进程后，就可以运行程序的代码了。\",\"运行代码的「人」称之为「线程」。\",\"一个进程至少有一个线程，所以在进程开启后会自动创建一个线程来运行代码，该线程称之为主线程。\",\"如果程序需要同时执行多块代码，主线程就会启动更多的线程来执行代码，所以一个进程中可以包含多个线程。\",\"image-20220809210859457\"]},\"1555\":{\"h\":\"3. 浏览器有哪些进程和线程？\",\"t\":[\"浏览器是一个多进程多线程的应用程序。浏览器内部工作极其复杂。为了避免相互影响，为了减少连环崩溃的几率，当启动浏览器后，它会自动启动多个进程。\",\"image-20220809213152371\",\"可以在浏览器的任务管理器中查看当前的所有进程\",\"其中，最主要的进程有：\",\"浏览器进程\",\"主要负责界面显示、用户交互、子进程管理等。浏览器进程内部会启动多个线程处理不同的任务。\",\"网络进程\",\"负责加载网络资源。网络进程内部会启动多个线程来处理不同的网络任务。\",\"渲染进程（本节课重点讲解的进程）\",\"渲染进程启动后，会开启一个渲染主线程，主线程负责执行 HTML、CSS、JS 代码。\",\"默认情况下，浏览器会为每个标签页开启一个新的渲染进程，以保证不同的标签页之间不相互影响。\",\"将来该默认模式可能会有所改变，有兴趣的同学可参见chrome 官方说明文档\"]},\"1556\":{\"h\":\"二、渲染主线程是如何工作的？\",\"t\":[\"渲染主线程是浏览器中最繁忙的线程，需要它处理的任务包括但不限于：\",\"解析 HTML\",\"解析 CSS\",\"计算样式\",\"布局\",\"处理图层\",\"每秒把页面画 60 次\",\"执行全局 JS 代码\",\"执行事件处理函数\",\"执行计时器的回调函数\",\"......\",\"思考题：为什么渲染进程不适用多个线程来处理这些事情？\",\"要处理这么多的任务，主线程遇到了一个前所未有的难题：如何调度任务？\",\"比如：\",\"我正在执行一个 JS 函数，执行到一半的时候用户点击了按钮，我该立即去执行点击事件的处理函数吗？\",\"我正在执行一个 JS 函数，执行到一半的时候某个计时器到达了时间，我该立即去执行它的回调吗？\",\"浏览器进程通知我“用户点击了按钮”，与此同时，某个计时器也到达了时间，我应该处理哪一个呢？\",\"......\",\"渲染主线程想出了一个绝妙的主意来处理这个问题：排队\",\"image-20220809223027806\",\"在最开始的时候，渲染主线程会进入一个无限循环\",\"每一次循环会检查消息队列中是否有任务存在。如果有，就取出第一个任务执行，执行完一个后进入下一次循环；如果没有，则进入休眠状态。\",\"其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加到消息队列的末尾。在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务\",\"这样一来，就可以让每个任务有条不紊的、持续的进行下去了。\",\"整个过程，被称之为事件循环（消息循环）\"]},\"1557\":{\"h\":\"三、若干解释\"},\"1558\":{\"h\":\"何为异步？\",\"t\":[\"代码在执行过程中，会遇到一些无法立即处理的任务，比如：\",\"计时完成后需要执行的任务 —— setTimeout、setInterval\",\"网络通信完成后需要执行的任务 -- XHR、Fetch\",\"用户操作后需要执行的任务 -- addEventListener\",\"如果让渲染主线程等待这些任务的时机达到，就会导致主线程长期处于「阻塞」的状态，从而导致浏览器「卡死」\",\"image-20220810104344296\",\"渲染主线程承担着极其重要的工作，无论如何都不能阻塞！\",\"因此，浏览器选择异步来解决这个问题\",\"image-20220810104858857\",\"使用异步的方式，渲染主线程永不阻塞\",\"面试题：如何理解 JS 的异步？\",\"参考答案：\",\"JS 是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。\",\"而渲染主线程承担着诸多的工作，渲染页面、执行 JS 都在其中运行。\",\"如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行。这样一来，一方面会导致繁忙的主线程白白的消耗时间，另一方面导致页面无法及时更新，给用户造成卡死现象。\",\"所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。当其他线程完成时，将事先传递的回调函数包装成任务，加入到消息队列的末尾排队，等待主线程调度执行。\",\"在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。\"]},\"1559\":{\"h\":\"JS 为何会阻碍渲染？\",\"t\":[\"先看代码\",\"<h1>Mr.Yuan is awesome!</h1> <button>change</button> <script> var h1 = document.querySelector('h1'); var btn = document.querySelector('button'); // 死循环指定的时间 function delay(duration) { var start = Date.now(); while (Date.now() - start < duration) {} } btn.onclick = function () { h1.textContent = '袁老师很帅！'; delay(3000); }; </script>\",\"点击按钮后，会发生什么呢？\",\"<见具体演示>\"]},\"1560\":{\"h\":\"任务有优先级吗？\",\"t\":[\"任务没有优先级，在消息队列中先进先出\",\"但消息队列是有优先级的\",\"根据 W3C 的最新解释:\",\"每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。\",\"浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行 https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint\",\"随着浏览器的复杂度急剧提升，W3C 不再使用宏队列的说法\",\"在目前 chrome 的实现中，至少包含了下面的队列：\",\"延时队列：用于存放计时器到达后的回调任务，优先级「中」\",\"交互队列：用于存放用户操作后产生的事件处理任务，优先级「高」\",\"微队列：用户存放需要最快执行的任务，优先级「最高」\",\"添加任务到微队列的主要方式主要是使用 Promise、MutationObserver\",\"例如：\",\"// 立即把一个函数添加到微队列 Promise.resolve().then(函数);\",\"浏览器还有很多其他的队列，由于和我们开发关系不大，不作考虑\",\"面试题：阐述一下 JS 的事件循环\",\"参考答案：\",\"事件循环又叫做消息循环，是浏览器渲染主线程的工作方式。\",\"在 Chrome 的源码中，它开启一个不会结束的 for 循环，每次循环从消息队列中取出第一个任务执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。\",\"过去把消息队列简单分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。\",\"根据 W3C 官方的解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同的任务可以属于不同的队列。不同任务队列有不同的优先级，在一次事件循环中，由浏览器自行决定取哪一个队列的任务。但浏览器必须有一个微队列，微队列的任务一定具有最高的优先级，必须优先调度执行。\",\"面试题：JS 中的计时器能做到精确计时吗？为什么？\",\"参考答案：\",\"不行，因为：\",\"计算机硬件没有原子钟，无法做到精确计时\",\"操作系统的计时函数本身就有少量偏差，由于 JS 的计时器最终调用的是操作系统的函数，也就携带了这些偏差\",\"按照 W3C 的标准，浏览器实现计时器时，如果嵌套层级超过 5 层，则会带有 4 毫秒的最少时间，这样在计时时间少于 4 毫秒时又带来了偏差\",\"受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了偏差\"]},\"1561\":{\"c\":[\"前端\"]},\"1562\":{\"c\":[\"事件循环\"]},\"1563\":{\"h\":\"V8引擎对象存储的优化\"},\"1564\":{\"h\":\"网络通信\"},\"1565\":{\"c\":[\"浏览器通信\"]},\"1566\":{\"c\":[\"网络模型\",\"浏览器通信\",\"跨域\",\"websocket\",\"网络安全\"]},\"1567\":{\"h\":\"浏览器的通信能力\"},\"1568\":{\"h\":\"一、用户代理\",\"t\":[\"浏览器可以代替用户完成 http 请求，代替用户解析响应结果，所以我们称之为：\",\"用户代理 user agent\",\"在网络层面，对于前端开发者，必须要知道浏览器拥有的两大核心能力：\",\"自动发出请求的能力\",\"自动解析响应的能力\"]},\"1569\":{\"h\":\"1. 自动发出请求的能力\",\"t\":[\"当一些事情发生的时候，浏览器会代替用户自动发出 http 请求，常见的包括：\",\"用户在地址栏输入了一个 url 地址，并按下了回车\",\"浏览器会自动解析 URL，并发出一个GET请求，同时抛弃当前页面。\",\"当用户点击了页面中的 a 元素\",\"浏览器会拿到 a 元素的 href 地址，并发出一个GET请求，同时抛弃当前页面。\",\"当用户点击了提交按钮<button type=\\\"submit\\\">...</button>\",\"浏览器会获取按钮所在的<form>元素，拿到它的action属性地址，同时拿到它method属性值，然后把表单中的数据组织到请求体中，发出指定方法的请求，同时抛弃当前页面。\",\"这种方式的提交现在越来越少见了\",\"当解析 HTML 时遇到了<link> <img> <script> <video> <audio>等元素\",\"浏览器会拿到对应的地址，发出GET请求\",\"当用户点击了刷新\",\"浏览器会拿到当前页面的地址，以及当前页面的请求方法，重新发一次请求，同时抛弃当前页面。\",\"浏览器在发出请求时，会自动附带一些请求头\",\"重点来了\",\"从古至今，浏览器都有一个约定：\",\"当发送 GET 请求时，浏览器不会附带请求体\",\"这个约定深刻的影响着后续的前后端各种应用，现在，几乎所有人都在潜意识中认同了这一点，无论是前端开发人员还是后端开发人员。\",\"由于前后端程序的默认行为，逐步造成了 GET 和 POST 的各种差异：\",\"浏览器在发送 GET 请求时，不会附带请求体\",\"GET 请求的传递信息量有限，适合传递少量数据；POST 请求的传递信息量是没有限制的，适合传输大量数据。\",\"GET 请求只能传递 ASCII 数据，遇到非 ASCII 数据需要进行编码；POST 请求没有限制\",\"大部分 GET 请求传递的数据都附带在 path 参数中，能够通过分享地址完整的重现页面，但同时也暴露了数据，若有敏感数据传递，不应该使用 GET 请求，至少不应该放到 path 中\",\"POST 不会被保存到浏览器的历史记录中\",\"刷新页面时，若当前的页面是通过 POST 请求得到的，则浏览器会提示用户是否重新提交。若是 GET 请求得到的页面则没有提示。\"]},\"1570\":{\"h\":\"2. 自动解析响应的能力\",\"t\":[\"浏览器不仅能发送请求，还能够针对服务器的各种响应结果做出不同的自动处理\",\"常见的处理有：\",\"识别响应码\",\"浏览器能够自动识别响应码，当出现一些特殊的响应码时浏览器会自动完成处理，比如301、302\",\"根据响应结果做不同的处理\",\"浏览器能够自动分析响应头中的Content-Type，根据不同的值进行不同处理，比如：\",\"text/plain: 普通的纯文本，浏览器通常会将响应体原封不动的显示到页面上\",\"text/html：html 文档，浏览器通常会将响应体作为页面进行渲染\",\"text/javascript或application/javascript：js 代码，浏览器通常会使用 JS 执行引擎将它解析执行\",\"text/css：css 代码，浏览器会将它视为样式\",\"image/jpeg：浏览器会将它视为 jpg 图片\",\"application/octet-stream：二进制数据，会触发浏览器下载功能\",\"attachment：附件，会触发下载功能\",\"该值和其他值不同，应放到Content-Disposition头中。\"]},\"1571\":{\"h\":\"3. 基本流程\",\"t\":[\"访问：https://oss.duyiedu.com/test/index.html\",\"image-20220428165629557\"]},\"1572\":{\"h\":\"二、AJAX\",\"t\":[\"浏览器本身就具备网络通信的能力，但在早期，浏览器并没有把这个能力开放给 JS。\",\"最早是微软在 IE 浏览器中把这一能力向 JS 开放，让 JS 可以在代码中实现发送请求，并不会刷新页面，这项技术在 2005 年被正式命名为 AJAX（Asynchronous Javascript And XML）\",\"AJAX 就是指在 web 应用程序中异步向服务器发送请求。\",\"AJAX 最主要的两个特性：\",\"在不重新加载页面的情况下发送请求给服务器。\",\"接受并使用从服务器发来的数据。\",\"AJAX 的优点\",\"可以无需刷新页面而与服务器端进行通信\",\"允许你根据用户事件来更新部分页面内容\",\"AJAX 缺点\",\"没有浏览历史，不能回退\",\"存在跨域问题\",\"SEO 不友好（爬虫爬不到）\",\"它的实现方式有两种，XMLHttpRequest 简称XHR和Fetch\",\"以下是两者的对比\",\"功能点\",\"XHR\",\"Fetch\",\"基本的请求能力\",\"✅\",\"✅\",\"基本的获取响应能力\",\"✅\",\"✅\",\"监控请求进度\",\"✅\",\"❌\",\"监控响应进度\",\"✅\",\"✅\",\"Service Worker 中是否可用\",\"❌\",\"✅\",\"控制 cookie 的携带\",\"❌\",\"✅\",\"控制重定向\",\"❌\",\"✅\",\"请求取消\",\"✅\",\"✅\",\"自定义 referrer\",\"❌\",\"✅\",\"流\",\"❌\",\"✅\",\"API 风格\",\"Event\",\"Promise\",\"活跃度\",\"停止更新\",\"不断更新\"]},\"1573\":{\"h\":\"1.express 的简单使用\",\"t\":[\"​ 我们使用 express 来模拟后台服务端，下述步骤 124 为固定步骤，在后续的操作中我们主要针对步骤 3 进行修改。\",\"//1. 引入express const express = require('express'); //2. 创建应用对象 const app = express(); //3. 创建路由规则 // request 是对请求报文的封装 // response 是对响应报文的封装 app.get('/', (request, response) => { //设置响应 response.send('HELLO EXPRESS'); }); //4. 监听端口启动服务 app.listen(8000, () => { console.log('服务已经启动, 8000 端口监听中....'); });\",\"打开终端，键入命令 node js文件名，开始监听端口开启服务\"]},\"1574\":{\"h\":\"2.原生 AJAX 的实现\"},\"1575\":{\"h\":\"1.服务端的基本流程\",\"t\":[\"获取元素对象\",\"为元素对象绑定事件\",\"创建 XMLHttpRequest 对象\",\"发送 http 请求\",\"初始化请求参数 open（http请求方法（大写）,URL,是否异步）\",\"发送请求 send（body）\",\"get 请求不传 body 参数，只有 post 请求使用\",\"为 XMLHttpRequest 对象绑定事件，处理服务端响应\",\"xhr.onreadystatechange; //当redystate状态值发生变化时触发\",\"0 (未初始化) or (请求还未初始化)\",\"1 (正在加载) or (已建立服务器链接)\",\"2 (加载成功) or (请求已接受)\",\"3 (交互) or (正在处理请求)\",\"4 (完成) or (请求已完成并且响应已准备好)\",\"当服务器正常进行响应时处理响应结果\",\"if (xhr.readyState === 4) { //判断响应状态码 200 404 403 401 500 // 2xx 成功 if (xhr.status >= 200 && xhr.status < 300) { //处理结果 } else { //异常处理 } }\",\"xhr.status //状态码 OK\",\"xhr.statusText //状态字符串 200\",\"xhr.getAllResponseHeaders() //所有响应头\",\"xhr.response //响应体\"]},\"1576\":{\"h\":\"2.GET 请求\",\"t\":[\"要求：点击按钮时获取响应内容显示在 result 框中\",\"网页端\",\"//获取button元素 const btn = document.getElementsByTagName('button')[0]; const result = document.getElementById('result'); //绑定事件 btn.onclick = function () { //1. 创建对象 const xhr = new XMLHttpRequest(); //2. 初始化 设置请求方法和 url //（HTTP请求方法--大写，url，是否异步） xhr.open('GET', 'http://127.0.0.1:8000/server?a=100&b=200&c=300'); //3. 发送 xhr.send(); //4. 事件绑定 处理服务端返回的结果 xhr.onreadystatechange = function () { //判断 (服务端返回了所有的结果) if (xhr.readyState === 4) { if (xhr.status >= 200 && xhr.status < 300) { //设置 result 的文本 result.innerHTML = xhr.response; } else { } } }; };\",\"URL 拼接?a=100&b=200&c=300传参\",\"服务端\",\"app.get('/server', (request, response) => { //设置响应头 设置允许跨域 response.setHeader('Access-Control-Allow-Origin', '*'); //设置响应体 response.send('HELLO AJAX'); });\",\"跨域问题后面会详细说明，此处不做讲解\",\"效果\"]},\"1577\":{\"h\":\"3.POST 请求\",\"t\":[\"要求：当鼠标移入 result 框中时获取响应内容显示在 result 框中\",\"网页端\",\"const result = document.getElementById('result'); result.addEventListener('mouseover', function () { const xhr = new XMLHttpRequest(); xhr.open('POST', 'http://127.0.0.1:8000/server'); //设置请求头 xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded'); xhr.setRequestHeader('name', 'ggbond'); xhr.send('a=100&b=200&c=300'); //传参 xhr.onreadystatechange = function () { if (xhr.readyState === 4) { if (xhr.status >= 200 && xhr.status < 300) { result.innerHTML = xhr.response; } } }; });\",\"设置请求头部分为了解决跨域问题，后续统一讲解\",\"服务端\",\"//可以接收任意类型的请求 app.all('/server', (request, response) => { //设置响应头 设置允许跨域 response.setHeader('Access-Control-Allow-Origin', '*'); //响应头 response.setHeader('Access-Control-Allow-Headers', '*'); //设置响应体 response.send('HELLO AJAX POST'); });\",\"效果\"]},\"1578\":{\"h\":\"4.服务端响应 json 格式的数据\",\"t\":[\"服务端\",\"app.all('/json-server', (request, response) => { //设置响应头 设置允许跨域 response.setHeader('Access-Control-Allow-Origin', '*'); response.setHeader('Access-Control-Allow-Headers', '*'); //响应一个数据 const data = { name: 'wahaha', }; //对对象进行字符串转换 let str = JSON.stringify(data); response.send(str); });\",\"网页端\",\"手动对数据进行转化\",\"let data = JSON.parse(xhr.response); result.innerHTML = data.name;\",\"自动转换\",\"//设置响应体数据的类型 xhr.responseType = 'json'; result.innerHTML = xhr.response.name;\",\"自动转换结果\"]},\"1579\":{\"h\":\"5.ie 缓存问题\",\"t\":[\"旧版的 ie 浏览器会自动将 ajax 的响应缓存起来，导致服务器端的数据变化网页端无法进行同步更新。\",\"解决方案\",\"在初始化 http 请求参数时给 URL 添加如下参数：\",\"xhr.open('GET', 'http://127.0.0.1:8000/ie?t=' + Date.now());\",\"Date.now()获取的时间戳每时每刻都不相同，则浏览器将这样的请求视为不同的请求而不会读入缓存\",\"效果\"]},\"1580\":{\"h\":\"6.超时与网络异常\",\"t\":[\"超时设置\",\"//超时设置 2s 设置 xhr.timeout = 2000; //超时回调 xhr.ontimeout = function () { alert('网络异常, 请稍后重试!!'); };\",\"服务端使用setTimeout模拟耗时较长的操作\",\"效果\",\"网络异常设置\",\"//网络异常回调 xhr.onerror = function () { alert('你的网络似乎出了一些问题!'); };\",\"使用浏览器自带的调试器模拟离线操作\",\"image-20220930105508809\"]},\"1581\":{\"h\":\"7.取消请求\",\"t\":[\"网页端\",\"const btns = document.querySelectorAll('button'); let xhr = null; btns[0].onclick = function () { xhr = new XMLHttpRequest(); xhr.open('GET', 'http://127.0.0.1:8000/delay'); xhr.send(); }; // abort 取消请求 btns[1].onclick = function () { xhr.abort(); };\",\"效果\"]},\"1582\":{\"h\":\"8.重复请求问题\",\"t\":[\"当多次点击发送请求时会增加服务器的负担，因此可以将多次重复的请求默认只获取一次\",\"网页端\",\"const btns = document.querySelectorAll('button'); let x = null; //标识变量 let isSending = false; // 是否正在发送AJAX请求 btns[0].onclick = function () { //判断标识变量 if (isSending) x.abort(); // 如果正在发送, 则取消该请求, 创建一个新的请求 x = new XMLHttpRequest(); //修改 标识变量的值 isSending = true; x.open('GET', 'http://127.0.0.1:8000/delay'); x.send(); x.onreadystatechange = function () { if (x.readyState === 4) { //修改标识变量 isSending = false; } }; }; // abort btns[1].onclick = function () { x.abort(); };\",\"效果\"]},\"1583\":{\"h\":\"3.axios-AJAX 的实现\",\"t\":[\"github 地址: https://github.com/axios/axios\",\"首先 npm 安装 axios 或者直接用 script 引用静态资源\",\"npm i axios\",\"<script src=\\\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\\\"></script>\",\"jsdeliver 是一个国外的静态资源网站，也可以改用其他国内的资源以提升访问速度\"]},\"1584\":{\"h\":\"1.get 请求\",\"t\":[\"axios.get(url[,config])\",\"函数返回结果是一个promise对象，用then回调处理\",\"axios.defaults.baseURL = 'http://127.0.0.1:8000/'; axios .get('/axios-server', { //请求参数（加在url后面） params: { id: 100, vip: 7, }, //请求头 headers: { name: 'wahaha', age: 20, }, }) .then((value) => { console.log(value); });\",\"请求参数、头信息\",\"image-20220930164358473\",\"控制台信息\",\"image-20220930164636149\"]},\"1585\":{\"h\":\"2.POST 请求\",\"t\":[\"axios.post(url[,data[,config]])\",\"网页端\",\"axios.post( '/axios-server', { //请求体 username: 'admin', password: 'admin', }, { //请求参数 params: { id: 200, vip: 9, }, //请求头参数 headers: { height: 180, weight: 180, }, } );\"]},\"1586\":{\"h\":\"3.通用方法\",\"t\":[\"网页端\",\"axios.defaults.baseURL = 'http://127.0.0.1:8000/'; axios({ //请求方法 method: 'POST', //url url: '/axios-server', //url参数 params: { vip: 10, level: 30, }, //头信息 headers: { a: 100, b: 200, }, //请求体参数 data: { username: 'admin', password: 'admin', }, }).then((response) => { //响应状态码 console.log(response.status); //响应状态字符串 console.log(response.statusText); //响应头信息 console.log(response.headers); //响应体 console.log(response.data); });\"]},\"1587\":{\"h\":\"4.fetch-AJAX 的实现\",\"t\":[\"fetch：window 的全局对象\",\"文档地址：https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/fetch\",\"网页端\",\"fetch('http://127.0.0.1:8000/server-fetch?a=100&b=100', { // 请求方法 method: 'POST', // 请求头 headers: { c: 300, d: 400, }, // 请求体 body: 'e=500&f=600', }) .then((response) => { //指定响应的返回类型 // return response.text(); return response.json(); }) .then((response) => { console.log(response); });\"]},\"1588\":{\"h\":\"三、实战\"},\"1589\":{\"h\":\"1. 请求并获取响应数据\",\"t\":[\"请求地址：https://study.duyiedu.com/api/herolist\",\"请求方法：GET\",\"响应类型：application/json\",\"响应结果：王者荣耀英雄数据\"]},\"1590\":{\"h\":\"2. 上传文件并监控进度\"},\"1591\":{\"h\":\"准备工作：启动本地文件上传服务器\",\"t\":[\"如果没有安装 node\",\"下载安装 node，https://nodejs.org/zh-cn/\",\"打开命令行工具，设置淘宝源\",\"npm config set registry https://registry.npm.taobao.org\",\"安装依赖\",\"在命令行进入upload-server目录\",\"运行npm i\",\"启动服务器\",\"在命令行进入upload-server目录\",\"运行npm start\"]},\"1592\":{\"h\":\"上传接口\",\"t\":[\"请求地址：http://localhost:9527/upload/single\",\"请求方法：POST\",\"消息格式：multipart/form-data\",\"字段名称：avatar\",\"允许的后缀名：['.jpg', '.jpeg', '.bmp', '.webp', '.gif', '.png']\",\"最大尺寸：1M\",\"响应格式：JSON\",\"响应结果示例：\",\"// 成功 { \\\"data\\\": \\\"文件的访问地址\\\" } // 失败：后缀名不符号要求 { \\\"errCode\\\": 1, \\\"errMsg\\\": \\\"后缀名不符合要求\\\" } // 失败：文件过大 { \\\"errCode\\\": 2, \\\"errMsg\\\": \\\"文件过大\\\" }\"]},\"1593\":{\"h\":\"3. 登录和鉴权\",\"t\":[\"由于 HTTP 协议的特点，每次「请求-响应」都是独立的，这就会导致身份信息丢失的问题\",\"这个问题可以使用token令牌解决\",\"在使用 AJAX 时可以按照这样一种通用模式处理：\",\"在处理响应结果时，只要服务器给我的响应头中包含了token，就将其保存在localStorage中\",\"在请求时，只要localStorage中有token，就将其代入到响应头发送到服务器。\"]},\"1594\":{\"h\":\"接口参考\",\"t\":[\"登录：https://yapi.duyiedu.com/project/72/interface/api/105\",\"获取账号信息：https://yapi.duyiedu.com/project/72/interface/api/114\",\"获取聊天记录：https://yapi.duyiedu.com/project/72/interface/api/117\",\"发送聊天消息：https://yapi.duyiedu.com/project/72/interface/api/120\"]},\"1595\":{\"h\":\"思考\",\"t\":[\"不要写代码，思考一个问题：\",\"你开发了一个网站，你能否在你的网站中写入一段 JS 脚本，获取淘宝网站保存的localStorage的值？\",\"如果你觉得应该进行限制，那么使用怎样的限制规则是合理的？\"]},\"1596\":{\"c\":[\"前端\"]},\"1597\":{\"c\":[\"ajax\",\"通信\"]},\"1598\":{\"h\":\"跨域问题及解决方案\"},\"1599\":{\"h\":\"一、同源策略及跨域问题\",\"t\":[\"同源策略是一套浏览器安全机制，当一个源的文档和脚本，与另一个源的资源进行通信时，同源策略就会对这个通信做出不同程度的限制。\",\"简单来说，同源策略对 同源资源放行，对 异源资源限制\",\"因此限制造成的开发问题，称之为跨域（异源）问题\",\"跨域是因为浏览器的安全机制带来的问题\"]},\"1600\":{\"h\":\"1. 同源和异源\",\"t\":[\"源(origin) = 协议 + 域名 + 端口\",\"例如:\",\"https://study.duyiedu.com/api/movie的源为https://study.duyiedu.com\",\"http://localhost:7001/index.html的源为http://localhost:7001\",\"两个 URL 地址的源完全相同，则称之为同源，否则称之为异源（跨域）\",\"image-20230112163455982\"]},\"1601\":{\"h\":\"2. 跨域出现的场景\",\"t\":[\"跨域可能出现在三种场景：\",\"网络通信\",\"a 元素的跳转；加载 css、js、图片等；AJAX 等等\",\"JS API\",\"window.open、window.parent、iframe.contentWindow等等\",\"存储\",\"WebStorage、IndexedDB等等\",\"对于不同的跨域场景，以及每个场景中不同的跨域方式，同源策略都有不同的限制。\",\"本文重点讨论网络通信中AJAX的跨域问题\"]},\"1602\":{\"h\":\"3. 网络中的跨域\",\"t\":[\"当浏览器运行页面后，会发出很多的网络请求，例如 CSS、JS、图片、AJAX 等等\",\"请求页面的源称之为页面源，在该页面中发出的请求称之为目标源。\",\"当页面源和目标源一致时，则为同源请求，否则为异源请求（跨域请求）\",\"image-20230112163616513\"]},\"1603\":{\"h\":\"4. 浏览器如何限制异源请求？\",\"t\":[\"浏览器出于多方面的考量，制定了非常繁杂的规则来限制各种跨域请求，但总体的原则非常简单：\",\"对标签发出的跨域请求轻微限制\",\"对 AJAX 发出的跨域请求严厉限制\",\"image-20230112201027855\"]},\"1604\":{\"h\":\"二、解决方案\"},\"1605\":{\"h\":\"1. CORS\",\"t\":[\"CORS（Cross-Origin Resource Sharing）是最正统的跨域解决方案，同时也是浏览器推荐的解决方案。\",\"CORS 是一套规则，用于帮助浏览器判断是否校验通过。\",\"image-20230112202539003\",\"CORS 的基本理念是：\",\"只要服务器明确表示允许，则校验通过\",\"服务器明确拒绝或没有表示，则校验不通过\",\"所以，使用 CORS 解决跨域，必须要保证服务器是「自己人」\"]},\"1606\":{\"h\":\"请求分类\",\"t\":[\"CORS 将请求分为两类：简单请求 和 预检请求。\",\"对不同种类的请求它的规则有所区别。\",\"所以要理解 CORS，首先要理解它是如何划分请求的。\"]},\"1607\":{\"h\":\"简单请求\",\"t\":[\"完整判定逻辑：https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests\",\"简单来说，只要全部满足下列条件，就是简单请求：\",\"请求方法是GET、POST、HEAD之一\",\"头部字段满足 CORS 安全规范，详见 W3C\",\"浏览器默认自带的头部字段都是满足安全规范的，只要开发者不改动和新增头部，就不会打破此条规则\",\"如果有Content-Type，必须是下列值中的一个\",\"text/plain\",\"multipart/form-data\",\"application/x-www-form-urlencoded\"]},\"1608\":{\"h\":\"预检请求(preflight)\",\"t\":[\"只要不是简单请求，均为预检请求\"]},\"1609\":{\"h\":\"练习\",\"t\":[\"// 下面的跨域请求哪些是简单请求，哪些是预检请求 // 1 fetch('https://douyin.com'); // 简单 // 2 // 预检（新增头部） fetch('https://douyin.com', { headers: { a: 1, }, }); // 3 // 简单 fetch('https://douyin.com', { method: 'POST', body: JSON.stringify({ a: 1, b: 2 }), }); // 4 // 预检（MIME类型） fetch('https://douyin.com', { method: 'POST', headers: { 'content-type': 'application/json', }, body: JSON.stringify({ a: 1, b: 2 }), });\"]},\"1610\":{\"h\":\"对简单请求的验证\",\"t\":[\"image-20230112204546583\"]},\"1611\":{\"h\":\"对预检请求的验证\",\"t\":[\"发送预检请求\",\"image-20230112204634493\",\"发送真实请求（和简单请求一致）\"]},\"1612\":{\"h\":\"细节 1 - 关于 cookie\",\"t\":[\"默认情况下，ajax 的跨域请求并不会附带 cookie，这样一来，某些需要权限的操作就无法进行\",\"不过可以通过简单的配置就可以实现附带 cookie\",\"// xhr var xhr = new XMLHttpRequest(); xhr.withCredentials = true; // fetch api fetch(url, { credentials: 'include', });\",\"这样一来，该跨域的 ajax 请求就是一个附带身份凭证的请求\",\"当一个请求需要附带 cookie 时，无论它是简单请求，还是预检请求，都会在请求头中添加cookie字段\",\"而服务器响应时，需要明确告知客户端：服务器允许这样的凭据\",\"告知的方式也非常的简单，只需要在响应头中添加：Access-Control-Allow-Credentials: true即可\",\"对于一个附带身份凭证的请求，若服务器没有明确告知，浏览器仍然视为跨域被拒绝。\",\"另外要特别注意的是：对于附带身份凭证的请求，服务器不得设置 Access-Control-Allow-Origin 的值为*。这就是为什么不推荐使用*的原因\"]},\"1613\":{\"h\":\"细节 2 - 关于跨域获取响应头\",\"t\":[\"在跨域访问时，JS 只能拿到一些最基本的响应头，如：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma，如果要访问其他头，则需要服务器设置本响应头。\",\"Access-Control-Expose-Headers头让服务器把允许浏览器访问的头放入白名单，例如：\",\"Access-Control-Expose-Headers: authorization, a, b\",\"这样 JS 就能够访问指定的响应头了。\"]},\"1614\":{\"h\":\"2. JSONP\",\"t\":[\"在很久很久以前...并没有 CORS 方案\",\"image-20230112205454350\",\"在那个年代，古人靠着非凡的智慧来解决这一问题\",\"image-20230112205613983\",\"虽然可以解决问题，但 JSONP 有着明显的缺陷：\",\"仅能使用 GET 请求\",\"容易产生安全隐患\",\"恶意攻击者可能利用callback=恶意函数的方式实现XSS攻击\",\"容易被非法站点恶意调用\",\"因此，除非是某些特殊的原因，否则永远不应该使用 JSONP\"]},\"1615\":{\"h\":\"3. 代理\",\"t\":[\"CORS 和 JSONP 均要求服务器是「自己人」\",\"那如果不是呢？\",\"那就找一个中间人（代理）\",\"image-20230115133326930\",\"比如，前端小王想要请求获取王者荣耀英雄数据，但直接请求腾讯服务器会造成跨域\",\"image-20230115133732560\",\"由于腾讯服务器不是「自己人」，小王决定用代理解决\",\"image-20230115133817554\"]},\"1616\":{\"h\":\"4. 如何选择\",\"t\":[\"最重要的，是要保持生产环境和开发环境一致\",\"下面是一张决策图\",\"image-20230115145335319\",\"具体的几种场景\",\"image-20230115150610750\",\"image-20230115151406797\"]},\"1617\":{\"c\":[\"前端\"]},\"1618\":{\"c\":[\"ajax\",\"通信\",\"同源策略\",\"跨域\"]},\"1619\":{\"h\":\"网络分层模型和应用协议\"},\"1620\":{\"h\":\"一、分层模型\"},\"1621\":{\"h\":\"1. 分层的意义\",\"t\":[\"当遇到一个复杂问题的时候，可以使用分层的思想把问题简单化\",\"比如，你有半杯 82 年的可乐，想分享给你的朋友王富贵，但你们已经 10 年没有联系了。要完成这件事，你可能要考虑：\",\"我用什么装可乐？\",\"可能的方案：塑料瓶、玻璃瓶、煤气罐\",\"怎么保证可乐始终处于低温？\",\"可能的方案：保温杯、小冰箱、冰盒\",\"如何保证可乐不被运输的人偷喝？\",\"可能的方案：封条、在上面写「毒药」\",\"如何获取王富贵的地址？\",\"可能的方案：报案失踪、联系私人侦探、联系物流公司的朋友\",\"如何运输？\",\"可能的方案：自行车、汽车、火车、高铁、飞机、火箭\",\"这就形成了一个分层结构\",\"从常理出发，我们可以得出以下结论：\",\"每层相对独立，只需解决自己的问题\",\"每层无须考虑上层的交付，仅需把自己的结果交给下层即可\",\"每层有多种方案可供选择，选择不同的方案不会对上下层造成影响\",\"每一层会在上一层的基础上增加一些额外信息\"]},\"1622\":{\"h\":\"2. 五层网络模型\",\"t\":[\"网络要解决的问题是：两个程序之间如何交换数据。\",\"这是一个非常复杂的问题，因为两个程序有可能出现在不同的设备上。\",\"面对复杂的问题，可以使用分层的方式来简化。\",\"经过不断的演化，网络最终形成了五层模型：\",\"image-20211008163417521\"]},\"1623\":{\"h\":\"3. 数据的传输\",\"t\":[\"image-20211008163458168\"]},\"1624\":{\"h\":\"4. 四层、五层、七层\",\"t\":[\"image-20211008164017299\"]},\"1625\":{\"h\":\"二、应用层协议\"},\"1626\":{\"h\":\"1. URL\",\"t\":[\"URL（uniform resource locator，统一资源定位符）用于定位网络服务\",\"image-20230112104100679\",\"URL 是一个固定格式的字符串\",\"image-20230112102913056\",\"它表达了：\",\"从网络中 哪台计算机（domain） 中的 哪个程序（port） 寻找 哪个服务（path） ，并注明了获取服务的 具体细节（query） ，以及要用什么样的 协议通信（schema）\",\"这里面包含了一些细节：\",\"当协议是http端口为80时，端口可以省略\",\"当协议是https端口为443时，端口可以省略\",\"schema、domain、path是必填的，其他的根据具体的要求填写\"]},\"1627\":{\"h\":\"2. HTTP\",\"t\":[\"超文本传输协议（Hyper Text Transfer Protocol，HTTP）是一个广泛运用于互联网的应用层协议。\",\"99%的情况下，前端开发者接触的都是 HTTP 协议。\",\"该协议规定了两个方面的内容：\",\"传递消息的模式\",\"传递消息的格式\"]},\"1628\":{\"h\":\"1. 传递消息的模式\",\"t\":[\"image-20230112110047746\",\"HTTP 使用了一种极为简单的消息传递模式，「请求-响应」模式\",\"发起请求的称之为客户端，接收请求并完成响应的称之为服务器。\",\"「请求-响应」完成后，一次交互结束。\"]},\"1629\":{\"h\":\"2. 传递消息的格式\",\"t\":[\"image-20230113214343300\",\"HTTP 的消息格式是一种纯文本的格式，文本分为三个部分：\",\"请求行 请求头 请求体\",\"具体每一部分写什么内容，要看具体的服务要求\"]},\"1630\":{\"h\":\"3. 试一试\",\"t\":[\"有非常多的工具可以发送 http 请求，这里推荐一个非常直观的工具\",\"安装vscode插件REST Clinet\",\"image-20230112114542925\",\"新建文件xxx.http\",\"编写请求文本\",\"POST /api/user/login HTTP/1.1 Host: study.duyiedu.com Content-Type: application/json { \\\"loginId\\\":\\\"admin\\\", \\\"loginPwd\\\":\\\"123123\\\" }\",\"发送请求\"]},\"1631\":{\"h\":\"4. 熟悉关键信息\"},\"1632\":{\"h\":\"请求方法\",\"t\":[\"请求行中的第一个单词是请求方法\",\"在 HTTP 协议中，请求方法仅有语义的区别，只是表达了这次请求的「愿望」。\",\"关于请求方法的协议原文见 HTTP/1.1 规范 RFC7231-Chapter4\",\"image-20230113190854930\",\"比如GET表达了客户端想要获取一些东西，POST表达了客户端想要提交一些东西\",\"常见的请求方法有：\",\"GET：获取\",\"POST：提交\",\"PUT：修改\",\"DELETE：删除\",\"具体在开发中应该选择什么请求方法，一定是看服务方的要求\",\"通常情况下：\",\"获取数据一般使用GET\",\"提交数据一般使用POST\",\"各种静态资源的获取，一般使用GET\"]},\"1633\":{\"h\":\"请求头 -\",\"t\":[\"Host标注了URL地址中的Domain + Port\",\"示例：\",\"Host: study.duyiedu.com\"]},\"1634\":{\"h\":\"请求头 -\",\"t\":[\"Content-Type标注了附带的请求体是什么格式\",\"比如，请求体的数据为loginId:admin, loginPwd:123456，请求体可以用不同的格式发出\",\"Content-Type: application/x-www-form-urlencoded loginId=admin&loginPwd=123123\",\"Content-Type: application/json { \\\"loginId\\\": \\\"admin\\\", \\\"loginPwd\\\": \\\"123123\\\" }\",\"Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryraPtlntBIqy4X2Ho ------WebKitFormBoundaryraPtlntBIqy4X2Ho Content-Disposition: form-data; name=\\\"loginId\\\" admin ------WebKitFormBoundaryraPtlntBIqy4X2Ho Content-Disposition: form-data; name=\\\"loginPwd\\\" 123456 ------WebKitFormBoundaryraPtlntBIqy4X2Ho--\",\"一般用于文件上传，boundary 指的是中间的分割符\"]},\"1635\":{\"h\":\"响应码\",\"t\":[\"响应码（状态码、消息码）是响应行中的一个数字，后面往往跟上一个对应的单词，用于表达服务器对这个响应的整体「态度」\",\"常见的响应码有：\",\"image-20230112131000507\",\"常见的状态码有：\",\"200 OK：一切正常。\",\"301 Moved Permanently：资源已被永久重定向。\",\"你的请求我收到了，但是呢，你要的东西不在这个地址了，我已经永远的把它移动到了一个新的地址，麻烦你取请求新的地址，地址我放到了响应头的Location中了\",\"试试请求：www.douyutv.com\",\"302 Found：资源已被临时重定向。\",\"你的请求我收到了，但是呢，你要的东西不在这个地址了，我临时的把它移动到了一个新的地址，麻烦你取请求新的地址，地址我放到了请求头的Location中了\",\"304 Not Modified：文档内容未被修改。\",\"你的请求我收到了，你要的东西跟之前是一样的，没有任何的变化，所以我就不给你结果了，你自己就用以前的吧。啥？你没有缓存以前的内容，关我啥事\",\"400 Bad Request：语义有误，当前请求无法被服务器理解。\",\"你给我发的是个啥啊，我听都听不懂\",\"403 Forbidden：服务器拒绝执行。\",\"你的请求我已收到，但是我就是不给你东西\",\"404 Not Found：资源不存在。\",\"你的请求我收到了，但我没有你要的东西\",\"500 Internal Server Error：服务器内部错误。\",\"你的请求我已收到，但这道题我不会，解不出来，先睡了\"]},\"1636\":{\"h\":\"响应头 -\",\"t\":[\"Content-Type标注了附带的响应体是什么格式\",\"常见的值有：\",\"text/plain: 普通的纯文本\",\"text/html：html 文档\",\"text/javascript 或 application/javascript：js 代码\",\"text/css：css 代码\",\"image/jpeg：jpg 图片\",\"attachment：附件\",\"其他MIME类型\"]},\"1637\":{\"h\":\"三、答疑环节\"},\"1638\":{\"h\":\"长连接\",\"t\":[\"复用创建好的 TCP 连接，节省创建连接的开销\"]},\"1639\":{\"h\":\"URL 编码\",\"t\":[\"在 http 的请求和响应中，行和头的部分不允许出现非 ASCII 字符。当出现非 ASCII 字符时（比如 query 携带中文参数），浏览器会自动进行 URL 编码。\"]},\"1640\":{\"h\":\"SSR 和 CSR\",\"t\":[\"分别指代服务端渲染和客户端渲染。两者之间的差别在于将数据拼接 HTML 字符串这件事放在服务端还是客户端。\",\"SSR 每次请求都会在服务端将页面渲染好再交给客户端，可以减少浏览器的请求次数，一般用于首屏的性能优化。而 CSR 则相反，虽然首屏加载较慢，但一旦这些请求完成之后，用户和页面之间交互时用户的体验就会好很多。\",\"前端进行 SSR\"]},\"1641\":{\"c\":[\"前端\"]},\"1642\":{\"c\":[\"分层模型\"]},\"1643\":{\"h\":\"WebSocket\"},\"1644\":{\"h\":\"一、WebSocket 基础知识\",\"t\":[\"在讲解 WebSocket 之前，大家首先考虑一下网页中如果出现以下的场景，应该怎么处理？\",\"弹幕\",\"在线教育\",\"股票等金融产品实时报价股\",\"体育实况更新\",\"视频会议和聊天\",\"基于位置的应用\",\"抢座\",\"抢购页面的库存\",\"......\",\"上述场景有一个共同特点——实时性\",\"这种对实时性有要求的页面，会带来一些问题\",\"比如下面的聊天场景\",\"img\",\"因为我们的 HTTP 协议是 request(请求)-response(响应)模式,请求必须在前，响应必须在后，这就导致了服务器无法「主动」的把消息告诉客户端。\",\"开发者想了很多办法来解决这一问题\",\"当然终极解决方案自然是 WebSocket，但了解过去的一些做法、参观前辈们经历的痛苦还是有益的。\"]},\"1645\":{\"h\":\"1. 短轮询 short polling\",\"t\":[\"短轮询是一种 「话痨式」 的方式\",\"客户端每隔一小段时间就向服务器请求一次，询问有没有新消息\",\"sequenceDiagram 客户端->>服务器: 有新消息吗？ 服务器->>客户端: 没有 Note over 客户端,服务器: 一段时间后... 客户端->>服务器: 有新消息吗？ 服务器->>客户端: 没有 Note over 客户端,服务器: 一段时间后... 客户端->>服务器: 有新消息吗？ 服务器->>客户端: 有，user1对你说：你好 Note over 客户端,服务器: 一段时间后... 客户端->>服务器: 有新消息吗？ 服务器->>客户端: 没 Note over 客户端,服务器: 一段时间后... 客户端->>服务器: 有新消息吗？ 服务器->>客户端: 没\",\"实现短轮询是非常简单的，客户端只需要设置一个计时器不断发送请求即可\",\"这种方案的缺陷是非常明显的：\",\"会产生大量无意义的请求\",\"会频繁打开关闭连接\",\"实时性并不高\"]},\"1646\":{\"h\":\"2. 长轮询 long polling\",\"t\":[\"http 长轮询是服务器收到请求后如果有数据, 立刻响应请求; 如果没有数据就会 hold 一段时间,这段时间内如果有数据立刻响应请求; 如果时间到了还没有数据, 则响应 http 请求;浏览器受到 http 响应后立在发送一个同样 http 请求查询是否有数据;\",\"sequenceDiagram 客户端->>+服务器: 有新消息吗？ Note right of 服务器: 没有消息hold,不会响应 Note right of 服务器: 一段时间之后,有消息了 服务器->>-客户端: user1对你说：在吗? 客户端->>+服务器: 有新消息吗？ Note right of 服务器: 没有消息hold,不会响应 Note right of 服务器: 一段时间之后,有消息了 服务器->>-客户端: user1对你说：你好,我是韩梅梅 客户端->>服务器: ......\",\"长轮询有效的解决了「话痨问题」，让每一次请求和响应都是有意义的\",\"但长轮询仍然存在问题：\",\"客户端长时间收不到响应会导致超时，从而主动断开和服务器的连接\",\"这种情况是可以处理的，在 ajax 请求因为超时而结束时，立即重新发送请求到服务器\",\"虽然这种做法会让之前的请求变得无意义，但毕竟比短轮询好多了\",\"由于客户端可能「过早的」请求了服务器，服务器不得不挂起这个请求直到新消息的出现。这会让服务器长时间的占用资源却没什么实际的事情可做。\"]},\"1647\":{\"h\":\"3. WebSocket\",\"t\":[\"WebSocket 是 HTML5 中新协议、新 API，在单个 TCP 连接上提供全双工的通讯模式。\",\"WebSocket 是独立的基于 TCP 的协议。\",\"WebSocket 和 HTTP 的关系是，WebSocket 是基于 Http 协议的，或者说借用了 Http 协议来完成一部分握手。WebSocket 的握手被翻译成 HTTP 的升级请求。\",\"下图描述了 HTTP 与 WebSocket 之间的简单关系\",\"img\",\"WebSocket 从协议上赋予了服务器主动推送消息的能力\",\"img\",\"从上图可以看出：\",\"WebSocket 也是建立在 TCP 协议之上的，利用的是 TCP 全双工通信的能力\",\"使用 WebSocket，会经历两个阶段：握手阶段、通信阶段\",\"虽然优于轮询方案，但 WebSocket 仍然是有缺点的：\",\"兼容性\",\"WebSocket 是 HTML5 新增的内容，因此古董版本的浏览器并不支持\",\"维持 TCP 连接需要耗费资源\",\"对于那些消息量少的场景，维持 TCP 连接确实会造成资源的浪费\",\"为了充分利用 TCP 连接的资源，在使用了 WebSocket 的页面，可以放弃 ajax，都用 WebSocket 进行通信，当然这会带来程序设计上的一些问题，需要权衡。\"]},\"1648\":{\"h\":\"4. 握手\",\"t\":[\"WebSocket 协议是一个高扩展性的协议，详细内容会比较复杂，这里仅讲解面试中会问到的握手协议\",\"当客户端需要和服务器使用 WebSocket 进行通信时，首先会使用HTTP 协议完成一次特殊的请求-响应，这一次请求-响应就是WebSocket 握手\",\"在握手阶段，首先由客户端向服务器发送一个请求，请求地址格式如下：\",\"# 使用HTTP ws://yingside.com/path # 使用HTTPS wss://yingside.com/path\",\"请求头如下：\",\"Connection: Upgrade /* hey，后续咱们别用HTTP了，升级吧 */ Upgrade: websocket /* 我们把后续的协议升级为websocket */ Sec-WebSocket-Version: 13 /* websocket协议版本就用13好吗？ */ Sec-WebSocket-Key: YWJzZmFkZmFzZmRhYw== /* 密钥：一二三四五 */\",\"服务器如果同意，就应该响应下面的消息\",\"HTTP/1.1 101 Switching Protocols /* 换，马上换协议 */ Connection: Upgrade /* 协议升级了 */ Upgrade: websocket /* 升级到websocket */ Sec-WebSocket-Accept: ZzIzMzQ1Z2V3NDUyMzIzNGVy /* 密钥：上山打老虎 */\",\"握手完成，后续消息收发不再使用 HTTP，任何一方都可以主动发消息给对方\",\"img\"]},\"1649\":{\"h\":\"二、面试题\",\"t\":[\"webSocket 协议是什么，能简述一下吗？\",\"参考答案：\",\"websocket 协议 HTML5 带来的新协议，相对于 http，它是一个持久连接的协议，它利用 http 协议完成握手，然后通过 TCP 连接通道发送消息，使用 websocket 协议可以实现服务器主动推送消息。\",\"首先，客户端若要发起 websocket 连接，首先必须向服务器发送 http 请求以完成握手，请求行中的 path 需要使用ws:开头的地址，请求头中要分别加入upgrade、connection、Sec-WebSocket-Key、Sec-WebSocket-Version标记\",\"然后，服务器收到请求后，发现这是一个 websocket 协议的握手请求，于是响应行中包含Switching Protocols，同时响应头中包含upgrade、connection、Sec-WebSocket-Accept标记\",\"当客户端收到响应后即可完成握手，随后使用建立的 TCP 连接直接发送和接收消息。\",\"webSocket 与传统的 http 有什么优势\",\"参考答案：\",\"当页面中需要观察实时数据的变化（比如聊天、k 线图）时，过去我们往往使用两种方式完成\",\"第一种是短轮询，即客户端每隔一段时间就向服务器发送消息，询问有没有新的数据\",\"第二种是长轮询，发起一次请求询问服务器，服务器可以将该请求挂起，等到有新消息时再进行响应。响应后，客户端立即又发起一次请求，重复整个流程。\",\"无论是哪一种方式，都暴露了 http 协议的弱点，即响应必须在请求之后发生，服务器是被动的，无法主动推送消息。而让客户端不断的发起请求又白白的占用了资源。\",\"websocket 的出现就是为了解决这个问题，它利用 http 协议完成握手之后，就可以与服务器建立持久的连接，服务器可以在任何需要的时候，主动推送消息给客户端，这样占用的资源最少，同时实时性也最高。\",\"前端如何实现即时通讯？\",\"参考答案：\",\"短轮询。即客户端每隔一段时间就向服务器发送消息，询问有没有新的数据\",\"长轮询，发起一次请求询问服务器，服务器可以将该请求挂起，等到有新消息时再进行响应。响应后，客户端立即又发起一次请求，重复整个流程。\",\"websocket，握手完毕后会建立持久性的连接通道，随后服务器可以在任何时候推送新消息给客户端\"]},\"1650\":{\"h\":\"三、常用库\",\"t\":[\"socket.io、ws\"]},\"1651\":{\"c\":[\"前端\"]},\"1652\":{\"c\":[\"通信\",\"WebSocket\"]},\"1653\":{\"h\":\"pytorch基础\"},\"1654\":{\"h\":\"一、导入数据集\"},\"1655\":{\"h\":\"1. 处理数据集\",\"t\":[\"torch.utils.data.TensorDataset(*tensors)\",\"这是 PyTorch 中的一个数据集类，用于针对张量数据创建数据集，即将张量表示的数据封装为数据集对象，以便于之后用于训练模型。\",\"该类接受一个或多个张量作为参数，其中每个张量表示数据集中的一个特征。例如，如果一个数据集包含图像和相应的标签，则需要使用两个张量来描述数据集，一个张量表示图像数据，另一个张量表示标签数据。\",\"该类的初始化函数将所有参数合并为一个张量元组，即 (*tensors)，同时还可以定义一些额外的参数，例如 transform=None 用于对数据进行转换，target_transform=None 用于对标签进行转换。\",\"例如，以下代码创建了一个 TensorDataset 对象，包含数据 X 和标签 y：\",\"import torch from torch.utils.data import TensorDataset X = torch.randn(100, 10) y = torch.randint(0, 2, (100,)) ds = TensorDataset(X, y)\",\"在上面的代码中，我们创建了一个大小为 (100, 10) 的张量 X，和一个大小为 (100,) 的张量 y，分别代表输入数据和标签。然后，我们创建了一个 TensorDataset 对象 ds，将 X 和 y 作为参数传入。这样，我们就将数据 X 与标签 y 封装为了一个 PyTorch 的数据集对象，即 ds。\",\"torch.utils.data.Dataset\",\"这是一个抽象类，用作自定义数据集的基础。如果要自定义数据集，需要继承它并实现其中的两个方法：len() 和 getItem()。\",\"len() 方法返回数据集中的样本数量，getitem() 方法传递样本索引并返回样本及其标签（如果不需要标签，则可以选择省略）。在__init__方法中，我们可以将数据集读取到内存中，可以使用 Pandas 库等来读取 CSV 格式的数据，也可以通过自己编写函数读取图像数据。\",\"import torch from torch.utils.data import Dataset import pandas as pd from PIL import Image class MyCustomDataset(Dataset): def __init__(self, csv_file, root_dir, transform=None): \\\"\\\"\\\" csv_file (string): 文件路径，包括标签和图像信息。 root_dir (string): 图像所在的目录。 transform (callable, optional): 可选的图片转换(自定义或PyTorch中的)操作来增强数据。 \\\"\\\"\\\" self.annotations = pd.read_csv(csv_file) self.root_dir = root_dir self.transform = transform def __len__(self): return len(self.annotations) def __getitem__(self, index): img_path = os.path.join(self.root_dir, self.annotations.iloc[index, 0]) image = Image.open(img_path) label = self.annotations.iloc[index, 1] if self.transform: image = self.transform(image) return (image, label)\",\"在训练模型时，我们可以通过 DataLoader 类来使用 TensorDataset 或者Dataset对象，从而实现批量加载数据，并且可以进行数据增强和多线程加载等操作。\",\"torch.utils.data.DataLoader(dataset, batch_size=1, shuffle=False, sampler=None, num_workers=0, collate_fn=None, pin_memory=False, drop_last=False)\",\"这是 PyTorch 中用于数据加载的工具类，用于在训练过程中批量加载数据，进行数据增强、数据划分和多线程等操作。\",\"dataset: 加载数据所在的数据集。\",\"batch_size: 批处理大小。\",\"shuffle: 是否打乱数据。\",\"sampler: 样本抽样方式，可以自定义。\",\"num_workers: 线程的数量，0 表示不使用多线程。\",\"collate_fn: 自定义的 batch 操作。\",\"pin_memory: 是否将数据保存到 CUDA 的固定内存上，提高 GPU 效率。\",\"drop_last: 如果 dataset 中数据总数不能被 batch_size 整除，则 drop_last 如果为 True，则将多余的数据删除；否则放到最后一个 batch 里去。\",\"例如，以下代码展示了如何使用 DataLoader 加载一个 TensorDataset 对象：\",\"import torch from torch.utils.data import TensorDataset, DataLoader X = torch.randn(100, 10) y = torch.randint(0, 2, (100,)) ds = TensorDataset(X, y) loader = DataLoader(ds, batch_size=10, shuffle=True) for batch_idx, (data, target) in enumerate(loader): # 进行训练或推理的代码 pass\",\"在上面的代码中，我们首先创建了一个大小为 (100, 10) 的数据张量 X 和大小为 (100,) 的标签张量 y，然后使用 TensorDataset 将这两个张量封装成一个数据集 ds。\",\"接着，我们使用 DataLoader 对象 loader 加载数据集，批处理大小为 10，shuffle 为 True 表示每个 epoch 都会对数据进行随机打乱。在训练模型时，我们可以通过 enumerate 函数对 loader 进行迭代，通过 (data, target) 获取每个批次的输入数据和标签数据，进行模型的训练和推理。\",\"以下代码展示使用DataLoader 加载一个 Dataset 对象：\",\"# 创建自定义数据集 custom_dataset = MyCustomDataset(data,csv_file, root_dir) # 使用 DataLoader 加载数据 dataloader = DataLoader(custom_dataset, batch_size=2, shuffle=True) # 迭代 DataLoader 并打印数据和标签 for inputs, labels in dataloader: print(inputs, labels)\"]},\"1656\":{\"h\":\"2. 集成的数据集\",\"t\":[\"torchvision.datasets\",\"torchvision 是 PyTorch 中的一个视觉处理库，提供了数据集、图片变换等一系列图像处理操作。\",\"torchvision.datasets 中包含了一些常用的数据集，例如 MNIST、CIFAR10、CIFAR100、ImageNet 等。这些数据集通常是用于测试和比较不同模型的性能，同时也可以用于训练模型。\",\"使用 torchvision.datasets 可以方便地下载、加载和预处理这些常用数据集。常用函数和参数如下：\",\"torchvision.datasets.MNIST\",\"：加载 MNIST 数据集。\",\"root：MNIST 数据集的根目录。\",\"train：选择是否加载训练集，默认为 True。\",\"transform：数据预处理函数，例如缩放、剪裁、随机切割等。\",\"target_transform：标签数据的预处理函数。\",\"download：是否下载 MNIST 数据集。如果数据已经下载过，则会直接读取本地数据。\",\"torchvision.datasets.CIFAR10：加载 CIFAR10 数据集，参数和 MNIST 数据集类似。\",\"例如，以下代码给出了如何使用 torchvision.datasets 加载 MNIST 数据集并进行数据预处理：\",\"import torchvision.datasets as datasets import torchvision.transforms as transforms # 数据预处理，将输入数据放缩到 (0, 1) 范围内 transform = transforms.Compose( [transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))]) # 下载和加载数据集 train_data = datasets.MNIST('data/MNIST', train=True, download=True, transform=transform) test_data = datasets.MNIST('data/MNIST', train=False, download=True, transform=transform)\",\"在上面的代码中，我们首先定义了一个数据预处理函数 transform，将输入数据放缩到 (0, 1) 范围内。然后，我们使用 datasets.MNIST 来下载和加载 MNIST 数据集，其中传入了一些参数，例如 root 表示数据存放的根目录，train 表示加载训练数据集，transform 是数据预处理函数。\",\"最后，我们得到了 train_data 和 test_data 两个数据集对象，分别用于模型的训练和测试。\"]},\"1657\":{\"h\":\"二、优化算法\"},\"1658\":{\"h\":\"1. 训练优化中的问题\",\"t\":[\"局部最小值\",\"深度学习模型的目标函数通常有许多局部最优解。当优化问题的数值解接近局部最优值时，随着目标函数解的梯度接近或变为零，通过最终迭代获得的数值解可能仅使目标函数局部最优，而不是全局最优。只有一定程度的噪声可能会使参数跳出局部最小值。事实上，这是小批量随机梯度下降的有利特性之一。\",\"../_images/output_optimization-intro_70d214_51_0.svg\",\"鞍点\",\"除了局部最小值之外，鞍点是梯度消失的另一个原因。鞍点（saddle point）是指函数的所有梯度都消失但既不是全局最小值也不是局部最小值的任何位置。考虑这个函数 f(x)=x^3。它的一阶和二阶导数在 x=0 时消失。这时优化可能会停止，尽管它不是最小值。\",\"../_images/output_optimization-intro_70d214_66_0.svg\",\"梯度消失\",\"假设我们想最小化函数f(x)=tanh⁡(x)，然后我们恰好从x=4开始。正如我们所看到的那样，f 的梯度接近零。更具体地说，f′(x)=1−tanh2⁡(x)，因此是f′(4)=0.0013。因此，在我们取得进展之前，优化将会停滞很长一段时间。事实证明，这是在引入 ReLU 激活函数之前训练深度学习模型相当棘手的原因之一。\",\"../_images/output_optimization-intro_70d214_96_0.svg\"]},\"1659\":{\"h\":\"2. 优化算法\",\"t\":[\"随机梯度下降\",\"torch.optim.SGD(params, lr, momentum=0, dampening=0, weight_decay=0, nesterov=False)\",\"torch.optim.SGD(params, lr, momentum=0, dampening=0, weight_decay=0, nesterov=False) 是 PyTorch 中的一个优化器类，实现了随机梯度下降（SGD）算法。该算法是常用的优化算法之一，通过计算当前梯度和历史梯度的加权平均值来更新模型参数。\",\"params：待优化的参数。\",\"lr：学习率，控制每次更新的步长大小。\",\"momentum：动量（Momentum）因子，加速优化过程，防止参数在更新方向改变时来回摆动。默认值为 0。\",\"dampening：动量的抑制因子，范围为 [0, 1]。默认值为 0。\",\"weight_decay：权重衰减因子，用于控制模型复杂度。默认为 0，表示不使用权重衰减。\",\"nesterov：是否使用 Nesterov 加速梯度，即使用当前位置的动量项进行梯度估计，可以提高优化效果。默认值为 False。\",\"例如，以下代码给出了如何使用 torch.optim.SGD 将模型的权重向量 w 进行随机梯度下降更新：\",\"import torch import torch.optim as optim model = MyModel() optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9) for inputs, labels in data_loader: optimizer.zero_grad() loss = loss_fn(model(inputs), labels) loss.backward() optimizer.step()\",\"在上面的代码中，我们首先定义了一个模型 MyModel，然后使用 model.parameters() 获取模型的参数，传入 optim.SGD() 函数中创建一个 SGD 优化器对象 optimizer。在模型的训练过程中，我们使用 optimizer.zero_grad() 来清空历史梯度，然后进行前向传播和反向传播，最后通过 optimizer.step() 来更新模型的参数。\"]},\"1660\":{\"h\":\"三、网络层结构\"},\"1661\":{\"h\":\"1. 展平层\",\"t\":[\"nn.Flatten() 是 PyTorch 中的一个层（layer），用于将输入张量展平成一个向量，例如将一个大小为 (n, c, h, w) 的四维张量展平为一个大小为 (n, c*h*w) 的二维张量。\",\"这个操作在神经网络中经常用到，通常出现在卷积和池化层后以便将其输出进入全连接层。具体来说，当卷积和池化层的输出为四维张量，而全连接层的输入为二维张量时，这时就需要使用 nn.Flatten() 来将张量展平为一个向量。\",\"例如，以下代码演示了如何使用 nn.Flatten()：\",\"import torch.nn as nn model = nn.Sequential( nn.Conv2d(in_channels=3, out_channels=32, kernel_size=3, padding=1), nn.ReLU(), nn.MaxPool2d(kernel_size=2), nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, padding=1), nn.ReLU(), nn.MaxPool2d(kernel_size=2), nn.Flatten(), nn.Linear(in_features=64*8*8, out_features=10) )\",\"在上面的代码中，我们定义了一个简单的 CNN 模型，其中包含了两个卷积层、两个 ReLU 激活层和两个 MaxPool 层。这些层的输出都是四维张量，因此我们需要在最后一个 MaxPool2d 层之后使用 nn.Flatten() 层将输出张量展平成二维张量，然后才能进入全连接层进行分类。\"]},\"1662\":{\"h\":\"2. 卷积层\",\"t\":[\"nn.Conv2d是 PyTorch 中用于定义二维卷积层的函数。它是基于 torch.nn.Module 构造出的类，可以直接使用 PyTorch 提供的 API 进行调用，其主要参数包括：输入通道数，输出通道数，卷积核大小，步长、填充等。当定义了卷积层后，需要调用 forward 函数计算输出值。\",\"例如，下面是一个使用 nn.Conv2d 定义卷积层的简单示例：\",\"import torch.nn as nn import torch # 定义卷积层 conv_layer = nn.Conv2d(in_channels=3, out_channels=64, kernel_size=3, stride=1, padding=1) # 假设输入一个大小为 [batch_size, 3, 28, 28] 的张量 x x = torch.randn(16, 3, 28, 28) # 计算卷积层输出 output = conv_layer(x) # 输出结果的大小: [batch_size, 64, 28, 28] print(output.size())\",\"这个示例中，定义了一个输入通道数为 3，输出通道数为 64，卷积核大小为 3x3，步长、填充均为 1 的卷积层，并将其应用到一个大小为[16, 3, 28, 28]的张量上，然后输出的结果大小是[16, 64, 28, 28]，其中 16 是 batch_size 的大小。\"]},\"1663\":{\"h\":\"3. 池化层\",\"t\":[\"nn.MaxPool2d\",\"nn.MaxPool2d是 PyTorch 神经网络库中提供的最大池化层。它可以在输入上执行 2D 最大池化操作，将输入划分为固定的池化区域，并在每个池化区域内找到最大值。具体而言，MaxPool2d 的作用是将输入张量在每个池化窗口内取最大值，并将所有结果组合成一个张量，作为输出。\",\"该函数有以下参数：\",\"kernel_size: 池化窗口的大小（宽度，高度）。\",\"stride： 池化窗口的移动步长。\",\"padding：对高度和宽度的零填充数量\",\"dilation: 控制滤波器元素之间距离的参数。\",\"return_indices：返回由最大值组成的张量的位置的指标，而不是最大值本身。\",\"ceil_mode：是否输出图像大小向上取整\",\"下面是一个示例：\",\"import torch import torch.nn as nn # Define a 2D max pooling layer maxpool_layer = nn.MaxPool2d(kernel_size=2, stride=2) # Apply max pooling to an input tensor input_tensor = torch.randn(1, 3, 4, 4) output_tensor = maxpool_layer(input_tensor) print(f\\\"Input shape: {input_tensor.shape}\\\") print(f\\\"Output shape: {output_tensor.shape}\\\")\",\"这段代码定义了一个 kernel 大小为 2 * 2，步幅为 2 的 2D 最大池化层，并将该层应用于一个张量。输入张量的形状为（1，3，4，4），其中 1 表示批次大小，3 表示通道数，4 和 4 表示输入图像的宽度和高度。在这种情况下，MaxPool2d 的输出张量形状为（1，3，2，2），因为窗口中的 4 个池化区域中的每个都有一个输出值。在这个示例中，不使用其他参数，因此默认参数被用到。\",\"nn.AdaptiveAvgPool2d\",\"nn.AdaptiveAvgPool2d是 PyTorch 神经网络库中提供的自适应平均池化层。它对输入进行二维平均池化，使输出具有特定形状。它可以自适应地考虑更大或更小的输入张量，并根据指定的输出大小调整窗口大小和步幅，以使输出具有期望的大小。\",\"这个函数有一个必须的参数输出大小（output_size），我们希望输出的张量大小为（batch_size，channel，output_size，output_size）\",\"nn.AdaptiveAvgPool2d的输出张量形状为指定大小的输出，无论输入张量的尺寸如何，它会自动调整窗口大小和步幅。\",\"下面是一个示例：\",\"import torch import torch.nn as nn # Define a 2D adaptive average pooling layer adaptive_avg_pool_layer = nn.AdaptiveAvgPool2d(output_size=2) # Apply adaptive average pooling to an input tensor input_tensor = torch.randn(1, 3, 4, 4) output_tensor = adaptive_avg_pool_layer(input_tensor) print(f\\\"Input shape: {input_tensor.shape}\\\") print(f\\\"Output shape: {output_tensor.shape}\\\")\",\"这段代码定义了一个 2D 自适应平均池化层，并将其应用于一个输入张量。输入张量的形状为（1，3，4，4），其中 1 表示批次大小，3 表示通道数，4 和 4 表示输入图像的宽度和高度。 在这个示例中，输出大小为（2,2），因此输出张量的形状为（1，3，2，2）。\"]},\"1664\":{\"h\":\"4. Dropout\",\"t\":[\"dropout是一种常用的正则化方法用于减少神经网络的过拟合风险。 在运行时期间，dropout以一定的概率丢弃（设置于 0）输入单元或输出单元的权重，然后从训练数据集的小批量数据中随机选择新的输入单元或输出单元的权重。 过拟合风险较大的神经元将会有较大的概率被丢弃，保留较小的概率，以减轻神经元之间的复杂协同关系。\",\"在深度学习网络训练过程中，dropout层一般加在全连接层之后，可以通过nn.Dropout(p = probability)直接实现。p 为丢弃的概率，通常取 0.2~0.5 之间的值。\",\"dropout = nn.Dropout(p=0.2)\"]},\"1665\":{\"h\":\"5. BatchNorm\",\"t\":[\"nn.BatchNorm2d是 PyTorch 中的一个批量归一化（Batch Normalization）操作类。它会对输入进行标准化处理，让前一层的输出其均值为 0，方差为 1，并通过可学习的缩放和偏移参数，使模型能够恢复任意的变换。\",\"该类的主要参数包括：\",\"num_features：输入特征的通道数。\",\"eps：为了避免分母为零的情况，在分母上加上一个很小的数 eps。\",\"momentum：用于计算移动平均值的动量系数，用于更新求得的均值和方差。\",\"affine: bool 类型，默认值为 True，表示是否启用可学习的缩放和平移参数。\",\"track_running_stats: bool 类型，默认值为 True，表示是否使用运行统计信息（如平均值和标准差）来标准化。\",\"下面是一个简单的使用实例：\",\"import torch import torch.nn as nn # 初始化一个 BatchNorm2d bn = nn.BatchNorm2d(num_features=3) input = torch.randn(2, 3, 4, 4) output = bn(input) print(input.shape) print(output.shape)\",\"该例子中，num_features被设置为 3，表示输入特征的通道数为 3。输入的张量input的形状为(2, 3, 4, 4)，表示 batch_size 为 2，通道数为 3，每个特征图的大小为(4, 4)。执行bn(input)后，返回的输出张量output具有相同的形状。\",\"在训练过程中，BatchNorm2d 对接收到的每个 feature map 分别执行以下操作：\",\"计算每个 feature map 的均值和方差，并通过移动平均的方式整合到全局均值和方差中。\",\"根据上述的均值和方差，对 feature map 进行标准化处理。\",\"通过可学习的缩放和偏移参数进行线性变换。\",\"返回标准化后的 feature map。\",\"需要注意的是，在测试模式下，BatchNorm2d 的运作方式与训练模式不同，其前向传播不会使用 mini-batch 的均值和方差，而是使用全局的均值和方差（在训练过程中通过动量方式累积得到的均值和方差）来进行标准化处理。\"]},\"1666\":{\"h\":\"6. Relu\",\"t\":[\"nn.ReLU是对输入的数据进行修正线性单元(Rectified Linear Units, ReLU)操作的类。ReLU 是深度学习中常用的激活函数，它可以通过将负值变为 0 来增强线性神经网络的非线性性。其代数式为f(x)=max(0,x)，即当输入 x 大于 0 时f(x)等于x，否则f(x)等于 0。\",\"nn.ReLU的功能很简单，它接收输入张量并将其作用于 ReLU 激活函数，输出 ReLU 激活后的张量。在 pytorch 中使用nn.ReLU的代码如下：\",\"import torch.nn as nn relu = nn.ReLU() output = relu(input)\",\"其中input是输入张量，output是经过 ReLU 激活后的输出张量。\",\"nn.ReLU(inplace=True)\",\"nn.ReLU(inplace=True)与nn.ReLU()的区别在于，它将原地修改输入张量而不是创建一个新的张量作为输出，并返回已修改的输入张量。\",\"这意味着，使用nn.ReLU(inplace=True)会省略内存分配和释放，因为不会产生新的内存分配和释放操作。这在处理大量数据时，可以有效地减少内存开销，因为每次内存分配和释放都需要消耗大量的时间和资源。同时，使用 inplace 的操作还可以提高计算性能，因为不需要将数据从一个位置复制到另一个位置。\",\"需要注意的是，使用inplace=True有时也可能会导致不可预测的结果或者梯度计算的错误。因此，在使用时需要谨慎，并根据具体情况判断是否需要开启 inplace 模式。\",\"nn.ReLU可能存在的问题有两个：\",\"梯度消失或爆炸：当输入很大或很小的时候，ReLU 的导数会变成 0 或无穷大，从而导致梯度消失或爆炸的问题。\",\"神经元死亡：如果训练期间一个 ReLU 神经元被更新成一直输出 0 的状态，那么在以后的训练过程中该神经元的参数将一直保持不变，也就是被\\\"死亡\\\"了。这种情况的发生通常与学习率过高有关，可以通过减小学习率或使用其他激活函数来缓解。\"]},\"1667\":{\"h\":\"7. 反卷积层\",\"t\":[\"nn.ConvTranspose2d 是 PyTorch 中的一个卷积转置层，用于进行反卷积（Deconvolution）操作。它的作用是将一个低维的特征图映射到一个高维空间中，可以用于图像分割、语义分割、超分辨率等任务。\",\"在具体实现中，nn.ConvTranspose2d 与 nn.Conv2d 的实现方式十分相似，都是通过卷积核与输入的特征图进行卷积操作，这里不再赘述。主要的区别在于反卷积操作是将卷积核中的值进行上采样之后进行卷积，从而实现特征图的上采样，对应于卷积操作中的下采样。\",\"具体来说， nn.ConvTranspose2d(in_channels, out_channels, kernel_size, stride=1, padding=0, output_padding=0, groups=1, bias=True, dilation=1) 的参数含义介绍如下：\",\"in_channels : 输入特征图的通道数。\",\"out_channels : 输出特征图的通道数。\",\"kernel_size : 卷积核的大小。\",\"stride : 步长，默认值为 1。\",\"padding : 填充大小，默认值为 0。\",\"output_padding : 输出特征图填充大小，默认值为 0。\",\"groups : 组数，默认值为 1。一个 ConvTranspose2d 连接了多个输入通道组和多个输出通道组。\",\"bias : 是否使用偏置，默认为 True。\",\"dilation : 卷积核的膨胀率，默认为 1。\",\"使用方法如下：\",\"import torch.nn as nn conv_trans = nn.ConvTranspose2d(in_channels=32, out_channels=64, kernel_size=3, stride=2, padding=1, output_padding=1) # 在输入特征图上进行反卷积 x = torch.randn(1, 32, 12, 12) output = conv_trans(x) print(output.size()) # 输出形状为 [1, 64, 25, 25]\",\"在这里，我们首先创建了一个反卷积层 conv_trans，将输入通道数设为 32，输出通道数设为 64，卷积核大小为 (3, 3)。接着，我们使用 PyTorch 中的 torch.randn() 函数创建了一个大小为 (1, 32, 12, 12) 的输入特征图，其中 1 表示 batch_size，32 表示输入通道数，12 表示特征图高和宽。最后，我们对输入图像做了反卷积操作，输出的特征图大小为 (1, 64, 25, 25)，其中特征图高和宽分别为 25，可以根据卷积转置的计算公式推导来进行理解。\"]},\"1668\":{\"h\":\"四、参数访问\"},\"1669\":{\"h\":\"1. 或\",\"t\":[\"使用 model.named_parameters()或 model.parameters()方法，返回一个生成器，遍历每个参数并返回对应的参数张量及名称，代码示例如下：\",\"import torch.nn as nn import torch class Net(nn.Module): def __init__(self): super(Net, self).__init__() self.conv1 = nn.Conv2d(3, 16, 3, padding=1) self.fc1 = nn.Linear(16*8*8, 64) self.fc2 = nn.Linear(64, 10) def forward(self, x): x = self.conv1(x) x = x.view(-1, 16*8*8) x = self.fc1(x) x = self.fc2(x) return x model = Net() # named_parameters()方法获取网络层参数及名称 for name, param in model.named_parameters(): print(name, param.data.shape)\",\"model.named_parameters访问的是所有层的参数，要想访问具体某一层的参数，只需要model.(层name).named_parameters.\"]},\"1670\":{\"h\":\"2.\",\"t\":[\"使用model.layer.weight和model.layer.bias直接获取某一层的权重和偏置，示例代码如下：\",\"import torch.nn as nn import torch class Net(nn.Module): def __init__(self): super(Net, self).__init__() self.layer = nn.Linear(5, 3) def forward(self, x): x = self.layer(x) return x model = Net() # 直接访问module的成员变量获取网络层参数 weight = model.layer.weight.data bias = model.layer.bias.data print(weight, bias)\",\"直接使用model.layer.weight，返回值除了值外，还包括梯度等额外信息。\"]},\"1671\":{\"h\":\"3.\",\"t\":[\"使用 model.state_dict()方法获取网络层的参数字典，该字典包含每个层的名称和参数，例如model.state_dict()['layer.weight']，示例代码如下：\",\"import torch.nn as nn import torch class Net(nn.Module): def __init__(self): super(Net, self).__init__() self.layer = nn.Linear(5, 3) def forward(self, x): x = self.layer(x) return x model = Net() # state_dict方法获取网络层参数 params_dict = model.state_dict() weight = params_dict['layer.weight'] bias = params_dict['layer.bias'] print(weight, bias)\",\"下面是state_dict()返回的结果样例\",\"OrderedDict([('weight', tensor([[ 0.3016, -0.1901, -0.1991, -0.1220, 0.1121, -0.1424, -0.3060, 0.3400]])), ('bias', tensor([-0.0291]))])\"]},\"1672\":{\"h\":\"五、保存和读取模型参数\"},\"1673\":{\"h\":\"1. 保存和读取\",\"t\":[\"PyTorch 中，我们可以使用 state_dict 来保存和读取模型的参数。state_dict 是一个 Python 字典对象，它将每个层映射到其参数张量。可以将 state_dict 存储为文件以备以后使用，也可以将其作为 Python 对象传递给其他 PyTorch 模型。\",\"下面是一个简单的示例，说明如何保存和读取模型参数：\",\"import torch import torch.nn as nn # 定义模型 class MyModel(nn.Module): def __init__(self): super(MyModel, self).__init__() self.linear = nn.Linear(10, 1) def forward(self, x): return self.linear(x) model = MyModel() # 保存模型参数 torch.save(model.state_dict(), 'model_params.pth') # 加载模型参数 model.load_state_dict(torch.load('model_params.pth'))\",\"在这个示例中，我们首先定义了一个简单的模型 MyModel，它包含一个线性层。接下来，我们通过调用 torch.save 函数，将模型的 state_dict 保存到名为 'model_params.pth' 的文件中。\",\"最后，我们使用 torch.load 函数加载保存的 state_dict。然后调用 model.load_state_dict 将加载的 state_dict 传递给模型。这将更新模型的参数。\",\"PyTorch 也支持 save 和 load 函数，这些函数将整个模型保存到文件中，并支持在 Python 和 C++ 中加载模型。这些函数在处理多个对象时更具有灵活性，但 state_dict 更适用于保存和加载模型参数。\",\"mydict = {'x': x, 'y': y} torch.save(mydict, 'mydict') mydict2 = torch.load('mydict') mydict2\",\"{'x': tensor([0, 1, 2, 3]), 'y': tensor([0., 0., 0., 0.])}\"]},\"1674\":{\"h\":\"2. 查看数据结构\",\"t\":[\"使用 torch.save()函数保存的模型权重参数文件默认是以 Python 的 pickle 格式进行序列化的，包括 datasets 中数据集默认也是以这种方式进行的存储，这种文件直接使用文本打开会显示乱码，我们可以利用 pickle 对文件进行反序列化，以查看其数据结构：\",\"import pickle filename = '../cifar10/cifar-10-batches-py/test_batch' with open(filename,'rb') as f: dataset = pickle.load(f, encoding='bytes') print(type(dataset)) # out: <class 'dict'>\"]},\"1675\":{\"h\":\"六、GPU 相关\",\"t\":[\"nvidia-smi\",\"使用nvidia-smi命令来查看显卡信息\",\"image-20230329155746146\",\"import torch from torch import nn torch.device('cpu'), torch.device('cuda'), # cuda和cuda:0等价 torch.device('cuda:1'), torch.device(f'cuda:{i}') # 常用 device = 'cuda' if torch.cuda.is_available() else 'cpu'\"]},\"1676\":{\"h\":\"1. 将模型参数放在 gpu\",\"t\":[\"在创建的时候指定 device\",\"X = torch.ones(2, 3, device=torch.device('cuda')) X\",\"使用 cuda()复制\",\"Z = X.cuda() # 参数为cuda的编号 Z\",\"使用 to()指定\",\"net = net.to(device=torch.device('cuda'))\"]},\"1677\":{\"h\":\"2. 切换模型模式\",\"t\":[\"切换：model.train()和model.eval()\",\"判断：torch.is_grad_enabled()\",\"检查当前 PyTorch 计算图是否启用梯度计算。它返回一个布尔值，如果梯度计算启用，则返回 True，否则返回 False。\"]},\"1678\":{\"h\":\"七、注意力机制\",\"t\":[\"灵长类动物的视觉系统接受了大量的感官输入， 这些感官输入远远超过了大脑能够完全处理的程度。 然而，并非所有刺激的影响都是相等的。 意识的聚集和专注使灵长类动物能够在复杂的视觉环境中将注意力引向感兴趣的物体，例如猎物和天敌。 只关注一小部分信息的能力对进化更加有意义，使人类得以生存和成功。\",\"在注意力机制中，会使用到三个重要的概念：查询(Query)、键(Keys)和值(Value)。\",\"查询(Query)：代表我们要对输入中的哪一部分进行关注和处理，通常是在计算注意力权重时所依据的向量。它是通过上一步的输出来计算的，具体的计算方式取决于注意力机制的不同类型。\",\"键(Keys)：它是用来表示输入序列中各个位置的特征的向量，一般是通过对输入进行变换（如全连接层或卷积操作）获得。\",\"值(Value)：它是输入序列中的各个位置所对应的实际数值（训练时的输出 y），是未经过变换的原始输入。\",\"在注意力机制中，我们做的实际上是以下 3 件事：\",\"首先将查询向量与键向量计算余弦相似度或欧式距离（评分函数） \",\"越小代表键靠近自己想查询的值，随之计算出的权重越大\",\"进行 softmax 激活后得到注意力权重\",\"最后将注意力权重与值向量进行加权求和\",\"这个操作的目的是对不同的输入位置赋予不同的权重，使得在对序列进行处理时，对最相关和最重要的部分给予更大的关注和权重，从而提高序列的表示能力。\",\"../_images/attention-output.svg\"]},\"1679\":{\"h\":\"八、一些通用函数\"},\"1680\":{\"h\":\"1. 训练函数\",\"t\":[\"def train_ch6(net, train_iter, test_iter, num_epochs, lr, device): # 初始化权重 def init_weights(m): if type(m) == nn.Linear or type(m) == nn.Conv2d: nn.init.xavier_uniform_(m.weight) net.apply(init_weights) print('training on:', device) net.to(device) # 优化器 optimizer = torch.optim.SGD(net.parameters(), lr=lr) # 损失函数 loss = nn.CrossEntropyLoss() animator = Animator(xlabel='epoch', xlim=[1, num_epochs], legend=['train loss', 'train acc', 'test acc']) timer, num_batches = Timer(), len(train_iter) #迭代次数 for epoch in range(num_epochs): # 训练损失之和，训练准确率之和，样本数 metric = Accumulator(3) net.train() for i, (X, y) in enumerate(train_iter): timer.start() optimizer.zero_grad() X, y = X.to(device), y.to(device) y_hat = net(X) l = loss(y_hat, y) l.backward() optimizer.step() with torch.no_grad(): metric.add(l * X.shape[0], accuracy(y_hat, y), X.shape[0]) timer.stop() train_l = metric[0] / metric[2] train_acc = metric[1] / metric[2] if (i + 1) % (num_batches // 5) == 0 or i == num_batches - 1: animator.add(epoch + (i + 1) / num_batches, (train_l, train_acc, None)) test_acc = evaluate_accuracy_gpu(net, test_iter) animator.add(epoch + 1, (None, None, test_acc)) print(f'loss: {train_l:.3f}, train acc: {train_acc:.3f}, ' f'test acc: {test_acc:.3f}') print(f'{metric[2] * num_epochs / timer.sum():.1f} examples/sec ' f'on {str(device)}')\"]},\"1681\":{\"c\":[\"深度学习\"]},\"1682\":{\"c\":[\"pytorch\"]},\"1683\":{\"h\":\"言语理解笔记\"},\"1684\":{\"h\":\"一、 看题顺序\",\"t\":[\"查看问题，确定题型 \",\"中心理解、标题填入、横线填空、接语选择、语句排序、词句理解、细节判断、逻辑填空、篇章阅读\",\"阅读文段\",\"判断选项\"]},\"1685\":{\"h\":\"二、阅读技巧\",\"t\":[\"阅读文段时秉持的根本原则：概括、定性、预判 。\",\"读完文段时要明确的内容：话题 + 总述 。\",\"针对一个段落的内容，可以大致将其结构分为两种：\",\"总分（包括总分总）结构\",\"并列结构\",\"这里的总分结构并不是说每一段都是先阐述观点再进行论证，而是说公考中的所有段落都摘自相应的日报或发言文件中，那么这段话的内容要么属于线性客观描述某件事情（仅从当前段落本身讲，从文章整体来讲肯定还是要有其存在的作用），要么表明作者的某个观点或者主张（倾向），包括常见的政策类考题。\"]},\"1686\":{\"h\":\"1. 总分结构\",\"t\":[\"总分中的 “总” 一般包括三种：评价、对策、结论 ，用来表达作者的 观点和倾向 。其中并不一定会存在直接进行总述的句子，但一定可以感觉到作者的感情色彩。而在选项的判断中，如果不存在 针对性 的对策时，可选择对于问题本身的总结。\",\"总分中的 “分” 一般包括以下五种，用来对总说进行 具体说明或铺垫 。\"]},\"1687\":{\"h\":\"背景引入\",\"t\":[\"适当略读，确定 话题\",\"这部分主要的作用是确定讨论的 “ 话题 ” ，一般出现在段首。要注意的是对某个话题定性（下定义）的行为同样属于此项，比较晦涩的时候适当跳过。\"]},\"1688\":{\"h\":\"举例说明\",\"t\":[\"适当跳过，关注其服务的 观点\",\"这部分主要的作用是增加观点的可信度，为此在其前后通常会出现其服务的观点句。观点句清楚明白的时候可以跳过。\"]},\"1689\":{\"h\":\"原因解释\",\"t\":[\"适当关注，出题的选项中 结果必不可少，带着原因更加全面\",\"这部分主要的作用是范围性的总结，点明总述，其中结果经常为总述的另一种表达。\"]},\"1690\":{\"h\":\"正反论证\",\"t\":[\"适当关注，论证中的 观点 更加重要，影响不重要\",\"这部分主要的作用是从两方面说明观点的正确性，因此其中包含的观点同样属于作者的观点，而影响部分只是为了观点服务。\"]},\"1691\":{\"h\":\"观点援引\",\"t\":[\"适当关注，根据是否 转折 确定作者自身的 观点\",\"这部分主要的作用是为了引出作者的观点（转折）或论证作者的观点（无转折）\"]},\"1692\":{\"h\":\"2. 并列结构\",\"t\":[\"对于并列结构段落的选项判断，主要采用 排除法 进行选择。\",\"筛去表述片面的选项\",\"筛去无中生有的选项\"]},\"1693\":{\"h\":\"3. 其他关注\",\"t\":[\"转折关系、因果关系、必要条件关系、并列关系、递进关系\",\"利用上述关系帮助我们理清句子之间和整个段落的行文结构 。\"]},\"1694\":{\"h\":\"三、具体题型\"},\"1695\":{\"h\":\"1. 中心理解\",\"t\":[\"阅读整体文段，根据句子定性适当略读，得出 话题 和 总述 。\"]},\"1696\":{\"h\":\"2. 标题填入\",\"t\":[\"同中心理解。当多个选项符合中心主旨时，选择更 吸引人 的答案。\"]},\"1697\":{\"h\":\"3. 语句填空\",\"t\":[\"横线在结尾：中心理解\",\"横线在开头：缺总述概括总述；不缺引出话题。保证 话题一致 。\"]},\"1698\":{\"h\":\"4. 接语选择\",\"t\":[\"类似中心理解，不同的是可以优先 阅读尾句定性 ，有困难再通读整段。保证 话题一致 。\",\"尾句\",\"接语\",\"提出问题\",\"给出政策\",\"提出政策\",\"落实政策\",\"提出宏观内容\",\"展开说明\"]},\"1699\":{\"h\":\"5. 语句排序\",\"t\":[\"从选项确定阅读顺序，主要采用 排除法 做题\",\"优先阅读选项中处于 首位的段落 。尝试给句子 定性\",\"观察选项之间存在差异的顺序进行阅读。\"]},\"1700\":{\"h\":\"6. 词句理解\",\"t\":[\"类似中心理解。不同的是可以优先找到词语所在的句子定性，阅读前后句尝试做题。\"]},\"1701\":{\"h\":\"7. 细节判断\",\"t\":[\"同中心理解。\",\"常见干扰项：无中生有、绝对表述、无关对比、因果错误\"]},\"1702\":{\"h\":\"8. 逻辑填空\",\"t\":[\"判断 词性\",\"寻找与填空词搭配的 主体\",\"寻找其他句子中与填空词 词性相同的词语\",\"根据句子之间的 关系 确定填空词的 色彩和程度\",\"根据 行文脉络 决定填空词的 色彩和重点\",\"根据填空词 对话题的契合 程度\",\"当出现明显的比喻和拟人，要挑选与之对应的选项（更 形象 ）\",\"排除主体与词语冲突的选项\"]},\"1703\":{\"h\":\"9. 篇章阅读\",\"t\":[\"根据问题分清题型，优先做存在 明显段落标志 的问题。\"]},\"1704\":{\"h\":\"四、日常积累\"},\"1705\":{\"h\":\"1. 相近成语\",\"t\":[\"话题\",\"成语\",\"形容中华文化\",\"源远流 长 、连绵不 绝 、博大精 深 、历 久 弥 新 、兼容 并 蓄\",\"传承不间断\",\"一脉相承、血脉相通、薪火相传（带有责任、精神、使命的意味）、不绝如缕（似断非断）、陈陈相因（老一套，没改进）\",\"改良旧的换新的\",\"推陈 出 新、吐故 纳 新、革 故鼎新、弃旧 图 新、去芜存菁、除旧布新\",\"心思独特、创新\",\"匠心独运（创造性）、别出心裁（与众不同）\",\"形容守旧不创新\",\"墨守 成规 、抱残守缺、因循 守旧、固步自 封 、食古不 化\"]},\"1706\":{\"c\":[\"公务员考试\"]},\"1707\":{\"c\":[\"行测\"]},\"1708\":{\"h\":\"资料分析笔记\"},\"1709\":{\"h\":\"一、 速算技巧\"},\"1710\":{\"h\":\"1. 加法技巧\"},\"1711\":{\"h\":\"尾数法\",\"t\":[\"部分求和，加快速度\",\"在多个数字 精确求和或求差 时，从“尾数入手”，为保证精度和速度，一般可观察两位。\",\"根据 选项之间的差异 决定观察一位还是两位。如果选项的最后一位均不同，则只需要观察一位；而当存在两个选项的数字尾数相同时，观察两位。\",\"6914 + 7111 + 7858 + 8334\",\"当所有选项尾数各不相同，选择选项中尾数为 7 的选项 4 + 1 + 8 + 4 = 17；\",\"当存在选项尾数相同，先去除尾数不为 7 的选项，然后同上步骤判断第二尾数（记得加上先前进位的 1）。\"]},\"1712\":{\"h\":\"高位叠加\",\"t\":[\"省去书写完整加法算式的时间\",\"与传统的加法顺序相反，从高位算起，然后错位相加。适用于 非精确求和或没有选项作为参考 的情况。\",\"3111 + 3375 + 3647 + 3919 + 4196\",\"依次计算 5 个数中每一位的和：16、20、22、28，然后错位相加。\",\"1 6 2 0 2 2 2 8 -------—————— 1 8 2 4 8\"]},\"1713\":{\"h\":\"2. 减法技巧\"},\"1714\":{\"h\":\"整数基准值\",\"t\":[\"被减数 - 减数 = （被减数 - 基准值）+（基准值 - 减数）：\",\"632 - 589 = （632 - 600）+（600 — 589）= 32 + 11 = 43\"]},\"1715\":{\"h\":\"分段法\",\"t\":[\"将三位数的减法分成两段，尽可能保证 不用借位 ，与基准值法结合使用。\",\" 2 2 | 1 - 1 4 | 2 —————————— 8 | -1 = 79\"]},\"1716\":{\"h\":\"3. 乘法技巧\"},\"1717\":{\"h\":\"百分互换\",\"t\":[\"乘法中的某个乘数可以转为某个 常见的分数 ，则将其转为两个整数的 简单除法 。\",\"需记忆的常见小数：\"]},\"1718\":{\"h\":\"乘法拆分\",\"t\":[\"乘法中有某个乘数为百分数且能 拆成两个简单数值 （上述需要记忆的百分比），则将其拆成两部分相乘，要 擅用“1%” （1 个包子）。\",\"常用的小数拆分如下：\",\"45% = 50% - 5% 55% = 50% + 5% 15% = 10% + 5% 60% = 50% + 10% 95% = 1 - 5% 90% = 1 - 10% 及所有50%、100%附近的数字（利用1%）\"]},\"1719\":{\"h\":\"4. 除法技巧\"},\"1720\":{\"h\":\"拆分法\",\"t\":[\"拆分是对直除的优化，可借助选项猜出答案，尤其 适合分子位数小于等于分母的除法计算 。\",\"拆分法具体应用：\",\"如果分子在分母的 50%附近，先拆出 50%\",\"如果分数大小约等于 1（分子分母相差不大），可先拆出 100%\",\"如果分子很小，可根据实际情况拆出 10% 或 5% 或 1%；\",\"322 304 + 18 ——— = ———————— = 50% + 3%- = 53%-（-表示比53%小一点，利用1%计算得来） 608 608 50 48 + 2 ——— = ———————— = 10% + 0.5%- = 10.5%- 484 484\"]},\"1721\":{\"h\":\"直除法\",\"t\":[\"行测资料分析部分的除法一般可分为三类：\",\"和 基期、增长率、增长量 相关，此类除法适用 假设分配法\",\"和 比重 有关（以及所有分子小于分母可看作分数的除法），此类除法适用 拆分法\",\"和 平均数、倍数、比值 等相关的除法，此类适用 直除法 。\",\"另外，选项距离极近的所有除法题目，均适用直除法。\"]},\"1722\":{\"h\":\"5. 415 份数法\",\"t\":[\"基期（A）、现期（B）、增长量（X）、增长率（R）\",\"415 份数法是将数量关系转化为份数比例关系，从而简化计算。\",\"415 份数法中“415”分别代表基期、变化量、现期的份数。\",\"若增长率为 25%（25%＝ 1/4），为方便计算我们可以将基期设为 4 份，变化量 X ＝ AR ＝ 1 份，现期为基期和变化量的和，即为 5 份。则基期、变化量、现期的份数分别为 4、1、5。这也是 415 份数法名字的由来。（同样依赖于常用小数的记忆）\",\"需要特别注意的是，增长率为负数时变化量 a 也为负数 ，此时“415 份数法”即变成“4（－1）3 份数法”。\",\"很多时候增长率 R 并不与某个分数完全相等，而是将 R 近似的看成某个分数。估算必然会产生误差，对于估算出的一份量，规则为“ 估大则一份变大、估小则一份变小 ”（把 23%估算成 1/4，即是估大了，则求出的一份量比实际量要大：把 23%估算成 1/5，即是估小了，则求出的一份量比实际量要小）。\"]},\"1723\":{\"h\":\"6. 假设分配法\",\"t\":[\"假设分配的核心思想和拆分一样，都是 “抓大放小” ，将“大数”分完，“小数”有误差也不影响结果。\",\"核心公式：X ＝ AR；\",\"使用步骤：确定分配数，画出分配树（邪恶小人😂）。\",\"【例】2021 年，全国城市供水总量 673.34 亿立方米，同比增长 6.96%；城市供水管道长度 105.99 万公里，同比增长 5.26%；……\",\"问题：2020 年，全国城市供水总量约为：\",\"A、600 亿立方米\",\"B、620 亿立方米\",\"C、630 亿立方米\",\"D、724 亿立方米\",\" 6 7 3 / | \\\\ 6 0 0 | 4 2 ( 600*7%(≈6.96%)=42 ) 3 1 ( 673-642=31 ) / \\\\ 28 3 ( 31*10%=3.1向下修正 ) 600 + 28 = 628\",\"R 的大小\",\"方法\",\"R 在 10%、20%附近\",\"用此时被分配数的 10%、20%上下修正\",\"R 在 25%左右\",\"师父：徒弟＝ 4：1\",\"R 在 33%左右\",\"师父：徒弟＝ 3：1\",\"R 在 50%左右\",\"师父：徒弟＝ 2：1\",\"R 在 66%左右\",\"师父：徒弟＝ 3：2\",\"R 在 80%以上\",\"直接师徒平分再修正\",\"由于我们近似的计算，结果肯定是存在误差的，去选项中的最相似值。\",\"一般情况下我们采用三位进行分配足够，除非选项中存在两数相差很小。\",\"在乘除法中采用近似的方法计算，存在误差是非常正常的，只要不影响做题，都在可控范围内\"]},\"1724\":{\"h\":\"二、ABRX\"},\"1725\":{\"h\":\"1. 基本概念\",\"t\":[\"A、B、R、X 分别表示基期、现期、增长率和增长量。\",\"同比是以上年同期为基期相比较，即现期某一时间段与上年某一时间段相比，可以理解为今年第 n 月与去年第 n 月的比较。\",\"环比是与上一个相邻统计周期相比较，表明统计指标逐期的发展变化,可以理解为第 n 月与第 n-1 月的比较。\"]},\"1726\":{\"h\":\"2. 基期考法\",\"t\":[\"基期：代入、直除、假设分配；\",\"基期差值：两次假设分配法求得两个基期作差。\",\"间隔基期：求出隔年增长率，即变成第一类考法；\",\"隔年增长率：R = R1 + R2 + R1 × R2\",\"已知变化情况求基期：利用 A = X / R求出基期。\"]},\"1727\":{\"h\":\"3. 现期考法\",\"t\":[\"假设增量求后期：求出 X，列不等式即可 B = A + nX。\",\"假设增速求后期：利用公式B＝A＋AR依次求出后一年，一般两到三次即可求得答案。\",\"按照实际增长率求后期：根据名义增长率求得基期后，再利用实际增长率求后期。\",\"1+R名​B​×(1+R实​)\"]},\"1728\":{\"h\":\"4. 增长率\",\"t\":[\"一般增长率：直接套用公式R＝X/A即可；\",\"隔年增长率：已知今年较去年增长 R1，去年较前年增长 R2，则今年较前年增长：\",\"R1​+R2​+R1​R2​\",\"当在段落中找不到数据时，想表达式\",\"比值增长率：符合表达式 A ＝ B/C，材料中有 B、C 增长率，求 A 的增长率，即为比值增长率（多以平均数增长率形式出现），公式为：\",\"1+RC​Rb​−Rc​\",\"乘积增长率：符合表达式 A ＝ B×C，材料中有 B、C 增长率，求 A 的增长率，即为乘积增长率，多以 实际含义关系式和部分增长率形式 出现，例如：总产=单产 × 面积，部分=整体 × 占比。具体公式为 ：\",\"Rb​+Rc​+Rb​Rc​\"]},\"1729\":{\"h\":\"5. 增长量\",\"t\":[\"一般增长量（求 X）：R 靠近某分数可使用 415 份数法，R 极小可直接 BR，其他可假设分配。\",\"两期增长量倍数或比值（X1/X2）：依次求得 X1、X2，再求比值即可。\",\"整体增量/部分增量（X ＝ X1 ＋ X2 ＋ X3…）：各部分增量相加等于总增量。\"]},\"1730\":{\"h\":\"三、比重\"},\"1731\":{\"h\":\"1. 单期比重之现期比重\",\"t\":[\"比重：套用公式即可，比重＝部分/整体、部分＝整体 × 比重、整体＝部分/比重；\",\"部分比重和或比重差：套用公式即可，比重和（比重差）＝部分和（部分差）/整体；\",\"饼状图：确定各部分所占比例，多利用 1/2、1/3、1/4、1/8 等或两部分之间的倍数关系，注意饼图中各部分的位置关系一般为从 12 点钟方向起，顺时针依次排列；\",\"根据整体求部分：假设某一部分情况和整体一致，按照整体情况求部分。\"]},\"1732\":{\"h\":\"2. 单期比重之基期比重\",\"t\":[\"基期比重等于现期比重乘上 1 ＋增长率反过来。 基期平均值、基期倍数、基期比值均可看作是“基期比重”，利用基期比重公式进行计算（1+R分母）/（1+R分子）。\",\"前期比重=本期比重×部分增长率+1整体增长率+1​\",\"我们可以利用出题人出坑的方式做题， 求出现期比重后根据增长率选择大于还是小于其的选项 。\"]},\"1733\":{\"h\":\"3. 单期比重之隔级比重\",\"t\":[\"隔级比重，指的是题目中存在大集合、中集合、小集合的关系，求得两集合的占比关系。例如，学校为大集合，班级为中集合，班级内的女同学为小集合，若问的是班级内的女同学在学校中的比重为为多少，即是隔级比重。\",\"隔级比重=中集合小集合​×大集合中集合​隔级比重=大集合小集合​÷大集合中集合​\"]},\"1734\":{\"h\":\"4. 两期比重变化之比重趋势\",\"t\":[\"比重趋势是根据分子分母增速大小来判断本期比重与前期相比变化情况的定性分析方法。\",\"分子增速大于分母，则分数变大（比重上升）\",\"分子增速小于分母，则分数变小（比重下降）\",\"注意比重趋势的逆运用，其表明比重和增速的关系。\"]},\"1735\":{\"h\":\"5. 两期比重比较之比重差\",\"t\":[\"比重差秒杀计：比重差绝对值小于增速差绝对值（比值差不能秒杀，可以使用下面公式）\",\"具体公式：\",\"比重差=本期比重−前期比重=本期整体前期部分​×(部分增长率−整体增长率)\",\"比重差=Ba​×(R1​−R2​)\",\"其中 a 使用假设分配求得。要注意比重和比值考察问法的区别：\",\"2023 年，大豆的占比比去年同期高了多少个百分点？ ——比重差\",\"2023 年，大豆的占比比去年同期高了？选项为百分数 ——比重差\",\"2023 年，大豆的亩产比去年同期高了多少公斤？ ——比值差\",\"比值差和比重差具体计算的公式相同。\",\"2023 年，大豆的亩产比去年同期高了百分之多少？ ——比值增长率\"]},\"1736\":{\"h\":\"四、比较类\",\"t\":[\"读题分两步，先查找比较，再计算，避免遗忘，反复读题。\"]},\"1737\":{\"h\":\"1. 比值大小比较\",\"t\":[\"常用来比较的比值包括 增速、比重、基期、平均数 。\",\"常用的方法包括： 双线法、趋势法（快、无需计算）；拆分法、通分法（需要计算） 。\",\"常用的 替代比较 有：\",\"用末期/基期代替 年均增长率 比较\",\"用倍数（B/A）代替增速（B/A—1）比较（AB 的倍数关系比较明显） 增速\",\"用 X/B 代替 X/A 比较（省去计算 A 的过程） 增速\",\"用部分 A/部分非 A 代替部分 A/整体比较，反之亦然。\"]},\"1738\":{\"h\":\"2. 增量大小比较\",\"t\":[\"B 越大 R 越大则 X 越大（大大则大）。\",\"我的 B 是你的 N 倍，你的 R 是我的 N 倍以上，我们的 X 才可能相等（一大一小看倍数）。\"]},\"1739\":{\"h\":\"五、盐水类\"},\"1740\":{\"h\":\"1. 盐水题目识别特征\",\"t\":[\"整体由 两部分 组成（A ＝ A1 ＋ A2），且整体部分均可表示为 A=B/C\",\"资料分析中，适用盐水思维的常见类型有：\",\"整体增长率和两部分增长率\",\"整体比重和两部分比重\",\"整体平均数（例如人均收入、人均消费、单位面积产量等）和两部分平均数（C 通常为人数或面积）\",\"两部分的划分通常有如下方式：\",\"按照时间分段 累计（累计量=当月量+上月累计量）增速和两部分（当月量、上月累计量）增速\",\"按照类型分段 出口额（出口额=贸易顺差+进口额）增速和贸易顺差进口额增速。\"]},\"1741\":{\"h\":\"2. 三浓度排序\",\"t\":[\"牢记“部分 A 浓度＞整体浓度＞部分 B 浓度”，“部分 A 浓度＞整体浓度”等价于“整体浓度＞部分 B 浓度”，反之亦然。\"]},\"1742\":{\"h\":\"3. 已知 3A 求量之比\",\"t\":[\"采用十字交叉法，所求的量之比为 分母之比 。\",\"假设分别有浓度为 a 的盐水 Ag，浓度为 b 的盐水 Bg，混合后浓度为 r，求两份盐水之比。\",\"image-20241115224004771\"]},\"1743\":{\"h\":\"4. 已知 2A 和量之比求第三 A\",\"t\":[\"首先 定性分析 ：整体的比值在中间，靠近 C 大（分母大）的一边。\",\"如果第一步完成后无法确定答案，此时再 定量分析 ：十字交叉法。\"]},\"1744\":{\"h\":\"六、平均倍数类\"},\"1745\":{\"h\":\"1. 平均数\",\"t\":[\"平均数：是指在一组数据中所有数据之和（A）再除以数据的个数（B），即平均数=总数 A/个数 B\",\"题目类型\",\"方法\",\"求单个平均数\",\"只需要注意和时间有关的平均数，明确时间间隔\",\"两个平均数之差\",\"比值差\",\"两个平均数之比\",\"A/B/C/D = AD/BC\",\"平均数的增长率\",\"比值增长率\",\"基期平均数\",\"基期比重\",\"平均数的变化情况\",\"比重趋势\",\"均前每后做分母（或简单记为后除前）\",\"(A/B)/(C/D)＝ AD/BC（两边除中间）\",\"时间平均数要注意闰年天数（366 天）、季度个数等\"]},\"1746\":{\"h\":\"2. 倍数\",\"t\":[\"1 倍=100%，倍数=增长率+100%，例如：增长了 1.5 倍=增长了 150%，A 比 B 增长了 60%，即 A 是 B 的 1.6 倍。\",\"题目题型：\",\"求单个倍数\",\"两个倍数之比（A/B/C/D）\",\"基期倍数（同基期比重）\",\"比值增长率/间隔增长率变为倍数提问（比值倍数=比值增长率+100%、间隔倍数=间隔增长率+100%）\"]},\"1747\":{\"h\":\"3. 年均增长量\",\"t\":[\"年均增长量表示的是 n 年间增量的绝对平均值，公式：年均增张量 = （末期−基期）/ n 。其中，严谨来说，基期应向前推一年（但有时按照不严谨处理），n 为末期、基期年份差值。\",\"严谨要推的情况：\",\"五年计划\",\"如 2015-2017 这 三年\",\"图标给出前一年，出题特意延后一年\"]},\"1748\":{\"h\":\"4. 年均增长率\",\"t\":[\"年均增长率表示的是 n 年间的年平均增速。公式如下：\",\"(1+r)n=基期末期​\",\"在年均增长率极小时，可简化为： 末期/基期 ≥ 1 + nr。\",\"解题思路：\",\"选项正常（相差较大），此时可以代入求解\",\"选项比较近，尺子分段\",\"选项又小又近，可以近似为 1 + nr\",\"多步间隔增长率\",\"年均增长率与间隔增长率的一种结合问题，例如：\",\"image-20241115232002977\"]},\"1749\":{\"h\":\"七、特殊题型\"},\"1750\":{\"h\":\"1. 拉动增长和增量贡献率\",\"t\":[\"拉动增长＝ 部分增量 / 整体前期（类增长率，以拉动为边界，左增量/右前期）\",\"增量贡献率＝ 部分增量 / 整体增量（类比重）\",\"当比较不同部分对同一整体的增量贡献率时，因整体增量相同，只比较部分增量大小即可\"]},\"1751\":{\"h\":\"2. 容斥问题\",\"t\":[\"若问 有无交集 ：占比之和超过 100%，则一定有交集；\",\"若问 至少 ：（1）考虑“尽量相斥”、“重合尽量少”（2）公式：a ＋ b－100%或 a ＋ b－总量\",\"若问 至多 ：（1）考虑“包含”（2）至多有“占比 较少项的比重 ”；\",\"既 A 又 B 的占比范围：在“至少”和“至多”之间。（a ＋ b－100%，AB 中较小的比重）\"]},\"1752\":{\"h\":\"八、常见思维陷阱\",\"t\":[\"同比还是环比\",\"是多少倍还是多多少倍\",\"比重问题的整体（分母）\",\"进口/出口/进出口、额/量、顺差/逆差、主客体颠倒（A 对 B 出口＝ B 从 A 进口）\",\"累计图表，当期数据＝当期累计－上期累计\",\"一二月份合并\",\"多步计算的月均\",\"图标列举不全\",\"单位坑\",\"时间坑，首年、起止时间、平年闰年\"]},\"1753\":{\"h\":\"九、整体总结\",\"t\":[\"ABRX主要考点\",\"比重考点\",\"比较类考点\",\"盐水类考点\",\"数据类型\",\"去年\",\"今年\",\"增长率\",\"增长量\",\"单一量\",\"A=B/(1+R)=X/R\",\"B=A+X=A(1+R)\",\"R=X/A，间隔增长率\",\"X=B-A\",\"比重\",\"基期比重\",\"现期比重，隔级比重\",\"比重趋势，比重差\",\"平均数\",\"基期平均数\",\"一般平均数\",\"比值增长率\",\"比值趋势，比重差\",\"其他比值\",\"基期比值\",\"比值\",\"比值增长率\",\"比值趋势，比重差\",\"乘积\",\"a × b\",\"A × B\",\"A × B - a × b\",\"乘积增长率\",\"间隔增长率、乘积增长率共用一个公式：R1 + R2 + R1 × R2\",\"比值增长率：( Rb - Rc ) / ( 1 + Rc )\",\"基期比重、基期平均数、基期比值共用一个公式：现比/平均数/比值 × （1+R分母）/（1+R分子）\",\"隔级比重：\",\"隔级比重=中集合小集合​×大集合中集合​隔级比重=大集合小集合​÷大集合中集合​\",\"比重差：\",\"比重差=Ba​×(R1​−R2​)\"]},\"1754\":{\"c\":[\"公务员考试\"]},\"1755\":{\"c\":[\"行测\"]},\"1756\":{\"h\":\"判断推理笔记\"},\"1757\":{\"h\":\"一、定义判断\",\"t\":[\"一定不能忽略被定义词，它包含了最重要的部分特征，通过具体描述厘清被定义词中关键字的含义。\",\"无论是定义判断还是类比推理，都要结合现实和常识进行联想判断。\",\"当阅读与定义相关的描述时，重点关注：被定义词、主体、对象、特殊要求。\",\"image-20241122200941199\"]},\"1758\":{\"h\":\"二、类比推理\",\"t\":[\"image-20241122182320969\"]},\"1759\":{\"h\":\"三、图形推理\"},\"1760\":{\"h\":\"四、逻辑判断\"},\"1761\":{\"h\":\"1. 逻辑论证\",\"t\":[\"逻辑论证\"]},\"1762\":{\"h\":\"2. 翻译推理\",\"t\":[\"翻译推理\"]},\"1763\":{\"h\":\"3. 分析推理\",\"t\":[\"分析推理\"]},\"1764\":{\"c\":[\"公务员考试\"]},\"1765\":{\"c\":[\"行测\"]},\"1766\":{\"h\":\"_.get() 函数\"},\"1767\":{\"h\":\"题目描述\",\"t\":[\"补充函数的 TODO 部分，模拟 lodash 中的 _.get() 函数。\"]},\"1768\":{\"h\":\"测试用例\",\"t\":[\"输入：\",\"const obj = { selector: { to: { toutiao: 'FE Coder' } }, target: [1, 2, { name: 'byted' }] }; get(obj, 'selector.to.toutiao', 'target[0]', 'target[2].name');\",\"输出：['FE coder', 1, 'byted']\"]},\"1769\":{\"h\":\"代码\",\"t\":[\"function get(object, ...path) { // 如果object是null，则直接返回undefined即可 if (object == null) { return undefined; } // 对path逐个处理，并依靠map方法，返回处理结果 return path.map((item) => { // 第1步，先处理下标`[*]`情况，并转换为数组 // a[3].b.c => a.3.b.c => [a, 3, b, c] const keys = item.replace(/\\\\[(\\\\d+)\\\\]/g, '.$1').split('.'); let result = object; let index = 0; const length = keys.length; // 逐级获取object的下标结果 while (result !== null && index < length && typeof result !== 'undefined') { result = result[keys[index++]]; } // 最终返回结果，只有遍历完keys，才返回result，否则，视为中途出错，返回undefined return index && index == length ? result : undefined; }); }\"]},\"1770\":{\"c\":[\"源码解析\"]},\"1771\":{\"c\":[\"Lodash\"]},\"1772\":{\"h\":\"async的实现原理\",\"t\":[\"async 函数的实现原理，就是将 Generator 函数和自动执行器，包装在一个函数里。\",\"async function fn(args) { // ... } // 等同于 function fn(args) { return spawn(function* () { // ... }); }\",\"所有的async函数都可以写成上面的第二种形式，其中的spawn函数就是自动执行器。\",\"function spawn(genF) { return new Promise(function (resolve, reject) { const gen = genF(); function step(nextF) { let next; try { next = nextF(); //{value,done} } catch (e) { return reject(e); } if (next.done) { return resolve(next.value); } Promise.resolve(next.value).then( function (v) { step(function () { return gen.next(v); }); }, function (e) { step(function () { return gen.throw(e); }); } ); } step(function () { return gen.next(undefined); }); }); }\"]},\"1773\":{\"c\":[\"源码解析\"]},\"1774\":{\"c\":[\"async和await\"]},\"1775\":{\"h\":\"手写promise\"},\"1776\":{\"h\":\"一、Promise 规范\",\"t\":[\"Promise 是一套专门处理异步场景的规范，它能有效的避免回调地狱的产生，使异步代码更加清晰、简洁、统一\",\"这套规范最早诞生于前端社区，规范名称为Promise A+\",\"该规范出现后，立即得到了很多开发者的响应\",\"Promise A+ 规定：\",\"所有的异步场景，都可以看作是一个异步任务，每个异步任务，在 JS 中应该表现为一个对象，该对象称之为Promise 对象，也叫做任务对象\",\"每个任务对象，都应该有两个阶段、三个状态\",\"根据常理，它们之间存在以下逻辑：\",\"任务总是从未决阶段变到已决阶段，无法逆行\",\"任务总是从挂起状态变到完成或失败状态，无法逆行\",\"时间不能倒流，历史不可改写，任务一旦完成或失败，状态就固定下来，永远无法改变\",\"挂起->完成，称之为resolve；挂起->失败称之为reject。任务完成时，可能有一个相关数据；任务失败时，可能有一个失败原因。\",\"可以针对任务进行后续处理，针对完成状态的后续处理称之为 onFulfilled，针对失败的后续处理称之为 onRejected\"]},\"1777\":{\"h\":\"二、手写 Promise\",\"t\":[\"// 处理硬编码问题 const PENDING = 'pending'; const FULFILLED = 'fulfilled'; const REJECTED = 'rejected'; class MyPromise { #state = PENDING; #result = undefined; // 可能定义有多个then回调，所以使用数组进行存储 #handler = []; // 一、构造器（处理所有输入） // promise实例完成状态的时机在内部函数中指定 constructor(executor) { // 注入promise内部函数的参数 const resolve = (data) => { this.#changeState(FULFILLED, data); }; const reject = (reason) => { this.#changeState(REJECTED, reason); }; // 执行promise内部函数（只能捕获同步的错误） try { executor(resolve, reject); } catch (error) { // 出错时将promise的状态变为rejected reject(error); } } // 改变promise的状态 #changeState(state, result) { // 状态一经更改就不会再改变了 if (this.#state !== PENDING) return; // 变更状态 this.#state = state; this.#result = result; // 状态变更时执行对应的回调函数 this.#run(); } // 判断值是否为thenable对象 #isPromsiseLike(value) { if (value !== null && (typeof value === 'object' || typeof value === 'function')) { return typeof value.then === 'function'; } return false; } // 模拟promise在微队列中执行 #runMicroTask(func) { // Node环境 if (typeof process === 'object' && typeof process.nextTick === 'function') { process.nextTick(func); } else if (typeof MutationObserver === 'function') { // 浏览器环境 const ob = new MutationObserver(func); const textNode = document.createTextNode('1'); ob.observe(textNode, { characterData: true }); textNode.data = '2'; } else { setTimeout(func, 0); } } #runOne(callBack, resolve, reject) { this.#runMicroTask(() => { // 传递的回调不是函数（状态穿透） if (typeof callBack !== 'function') { const settled = this.#state === FULFILLED ? resolve : reject; settled(this.#result); return; } try { const data = callBack(this.#result); // 回调函数返回了一个promise if (this.#isPromsiseLike(data)) { data.then(resolve, reject); } else { resolve(data); } } catch (error) { reject(this.#result); } }); } // 执行then中定义的回调 #run() { if (this.#state === PENDING) return; // 顺序执行then中注册的回调 while (this.#handler.length) { const { onFulfilled, onRejected, resolve, reject } = this.#handler.shift(); // promise执行回调 if (this.#state === FULFILLED) { this.#runOne(onFulfilled, resolve, reject); } else { this.#runOne(onRejected, resolve, reject); } } } // 1. then方法回调的调用时机 // 2. then方法返回值也是一个promise，它的状态如何确定 // - 对应的回调不是函数 // - 对应的回调是函数 // - 返回结果是promise then(onFulfilled, onRejected) { return new MyPromise((resolve, reject) => { // 利用闭包记录对应的参数 this.#handler.push({ onFulfilled, onRejected, resolve, reject, }); this.#run(); }); } // 以下不属于promiseA+规范 catch(onRejected) { return this.then(undefined, onRejected); } finally(onFinally) { return this.then( (data) => { onFinally(); return data; }, (error) => { onFinally(); throw error; } ); } static resolve(value) { if (value instanceof MyPromise) return value; let _resolve, _reject; const p = new MyPromise((resolve, reject) => { _resolve = resolve; _reject = reject; }); if (p.#isPromiseLike(value)) { value.then(_resolve, _reject); } else { _resolve(value); } return p; } static reject(reason) { return new MyPromise((resolve, reject) => { reject(reason); }); } }\",\"promise.then(callback)返回一个新的promise，它的状态由如下确定：\",\"callback是函数且返回值不是thenable对象，则resolve(callback())\",\"callback是函数且返回值是thenable对象，则 callback().then(resolve, reject);，但在浏览器实际的实现中与规范有出入，具体可看下面的面试题目。\",\"callback不是函数，则它的状态和原始promise相同（状态穿透）\"]},\"1778\":{\"h\":\"三、Promise.all\",\"t\":[\"Promise.myall = function (promises) { return new Promise(function (resolve, reject) { if (typeof promises[Symbol.iterator] !== 'function') { throw TypeError('args must be Iterable'); } let count = 0; // 统计promises内元素的数量 let resolvedCounter = 0; // 成功的promise数量 let result = []; let i = 0; for (const prom of promises) { const index = i; // 保存当前prom的索引 i++; count++; Promise.resolve(prom).then( (data) => { resolvedCounter++; result[index] = data; if (resolvedCounter === count) { resolve(result); } }, (reason) => { reject(reason); } ); } if (count === 0) { resolve([]); } }); }; Promise.myall([1, 2, 3, 4]).then( (data) => { console.log(data); }, (err) => { console.log(err); } );\"]},\"1779\":{\"h\":\"四、面试题\",\"t\":[\"Promise.resolve() .then(() => { console.log(0); return Promise.resolve(4); }) .then((res) => { console.log(res); }); Promise.resolve() .then(() => { console.log(1); }) .then(() => { console.log(2); }) .then(() => { console.log(3); }) .then(() => { console.log(5); }) .then(() => { console.log(6); });\",\"按照上述 promiseA+规范的复现，输出结果应该为0 1 2 4 3 5 6，但是在浏览器中上述代码输出的结果为：0 1 2 3 4 5 6，具体流程可参考知乎 | promise.then 中 return Promise.resolve 后，发生了什么。\",\"总结来说，在 chrome 的实现中，return Promise.resolve(4) 的写法额外 enqueue 了 2 个任务，\",\"求值（Promise.resolve(4)）的任务（ 额外 ）\",\"「Promise { 4 }」的 onfulfill， 即Promise.resolve().then返回 promise 的 resolve 函数（ 规范 ）\",\"let p2 = Promise.resolve().then(() => { console.log(0); return Promise.resolve(4); }); Promise.resolve(4).then(resolve); // p2的resolve\",\"image-20240308195733073\"]},\"1780\":{\"c\":[\"源码解析\"]},\"1781\":{\"c\":[\"promise\"]},\"1782\":{\"h\":\"vue2源码理解（总览篇）\",\"t\":[\"目录结构\",\"├─src # 项目源代码 │ ├─complier # 与模板编译相关的代码 │ ├─core # 通用的、与运行平台无关的运行时代码 │ │ ├─observe # 实现变化侦测的代码 │ │ ├─vdom # 实现virtual dom的代码 │ │ ├─instance # Vue.js实例的构造函数和原型方法 │ │ ├─global-api # 全局api的代码 │ │ └─components # 内置组件的代码 │ ├─server # 与服务端渲染相关的代码 │ ├─platforms # 特定运行平台的代码，如weexsh │ ├─sfc # 单文件组件的解析代码 │ └─shared # 项目公用的工具代码\",\"我们可以知道，Vue 实际上完成了两件事， 组件化 和 响应式 。\",\"响应式使我们更加关注于数据的变化，由 Vue 自身来根据数据变化驱动视图更新。组件化中包含了 模板编译 ， Diff 算法 ， 渲染器 等内容。\",\"template ==> render ==> VNode ==> DOM\"]},\"1783\":{\"h\":\"一、响应式\",\"t\":[\"要想实现响应式，有两个关键性的问题，一个是 时机 ，一个是 对象 。即我们首先要知道数据什么时候发生变化，其次要知道数据变化时通知哪部分的视图进行更新（谁用到数据更新谁）。\"]},\"1784\":{\"h\":\"1. 对象的响应式\",\"t\":[\"reactive\",\"当为添加了响应式的对象属性设置新的值时，会取出prop.__ob__.dep中的所有watcher实例，重新执行其中的expOrFn。\",\"Observer(value)\",\"功能：\",\"实例化时递归地为 value 对象的每个属性添加getter/setter，在getter中收集依赖，在setter中通知依赖更新。\",\"为 value 添加了__ob__属性，指向创建的Observer实例，标记此数据已经转为响应式。\",\"实例属性：\",\"value：观察对象；\",\"dep：依赖管理器\",\"vmCount：将 value 作为 data 的组件数量\",\"Dep()\",\"功能：用来管理已添加getter/setter属性的依赖\",\"实例属性：\",\"id：dep 的唯一标识\",\"subs：管理依赖的数组（其中存储的为 watcher 实例）\",\"静态属性：\",\"target：用来暂存当前运行中的 watcher 实例\",\"Watcher(vm,expOrFn,cb,[options,isRenderWatcher])\",\"功能：类似于副作用函数的注册函数，dep 存储的依赖本身，通知更新时重新执行副作用函数。\",\"实例属性：\",\"deep: 是否深度监测\",\"user：此 watcher 实例是否为用户手动创建\",\"lazy：是否懒执行\",\"dirty：与 lazy 配套使用表明执行时机\",\"sync：是否同步\",\"当sync为true时，表示该 Watcher 是同步执行的。即，在数据变化后，Watcher 会立即执行同步任务队列中的回调，而不会异步延迟执行\",\"当sync为false时，表示该 Watcher 是异步执行的。即，在数据变化后，Watcher 会被推入异步任务队列中，等待下一个事件循环（Event Loop）时才执行回调函数。这样可以利用 Vue 的 批量异步更新机制 ，提高性能和效率。\",\"before： 需要在回调前执行的函数\"]},\"1785\":{\"h\":\"2. 数组的响应式\",\"t\":[\"很明显对于使用Object.defineProperty实现的响应式并不适用于数组对象，因此 Vue 为数组设立了其独自的响应式方案。\",\"重写会改变原始数组的原生方法，将其拦截在数组实例与Array.prototype之间，这样使用这些方法时会优先使用改写之后的。\",\"定义\",\"const arrayProto = Array.prototype; export const arrayMethods = Object.create(arrayProto); const methodsToPatch = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse']; methodsToPatch.forEach(function (method) { // 缓存原生方法 const original = arrayProto[method]; def(arrayMethods, method, function mutator(...args) { const result = original.apply(this, args); const ob = this.__ob__; // 这里的this为响应式数据value let inserted; // 对数组新增元素添加侦测（push、unshift、splice） switch (method) { case 'push': case 'unshift': inserted = args; // 如果是push或unshift方法，那么传入参数就是新增的元素 break; case 'splice': inserted = args.slice(2); // 如果是splice方法，那么传入参数列表中下标为2的就是新增的元素 break; } if (inserted) ob.observeArray(inserted); // 调用observe函数将新增的元素转化成响应式 // 通知变化 ob.dep.notify(); return result; }); });\",\"调用原生方法\",\"为新增元素添加响应式\",\"通知依赖更新\",\"使用\",\"class Observer { constructor(value: any) { this.value = value; this.dep = new Dep(); // 实例化一个依赖管理器，用来收集数组依赖 this.vmCount = 0; def(value, '__ob__', this); // 附加Observer实例，标记已经转为响应式 // 让自定义的数组方法替代原生方法执行(把它挂载到数组实例与Array.prototype之间) if (Array.isArray(value)) { if (hasProto) { protoAugment(value, arrayMethods); } else { copyAugment(value, arrayMethods, arrayKeys); } this.observeArray(value); // 将数组中的所有元素都转化为可被侦测的响应式 } else { this.walk(value); } } walk(obj: Object) { const keys = Object.keys(obj); for (let i = 0; i < keys.length; i++) { defineReactive(obj, keys[i]); } } observeArray(items: Array<any>) { for (let i = 0, l = items.length; i < l; i++) { observe(items[i]); } } }\",\"arr 实例 ==> 改写后的方法对象 ==> Array 的原型对象\",\"收集依赖\",\"// ...省略其他代码 get: function reactiveGetter() { const value = getter ? getter.call(obj) : val; if (Dep.target) { dep.depend(); // 收集依赖 if (childOb) { childOb.dep.depend(); if (Array.isArray(value)) { dependArray(value); } } } return value; } // ... function dependArray(value: Array<any>) { for (let e, i = 0, l = value.length; i < l; i++) { e = value[i]; e && e.__ob__ && e.__ob__.dep.depend(); if (Array.isArray(e)) { dependArray(e); } } }\",\"在访问数组内元素时，无法像属性getter那样拦截，所以通过递归遍历数组元素，手动调用dep.depend()来收集依赖。\"]},\"1786\":{\"h\":\"3. 相关 api\",\"t\":[\"对于对象来说，通过Object.defineProperty方法实现的对object数据的观测仅仅只能观测到object数据的取值及设置值，当我们向object数据里添加一对新的key/value或删除一对已有的key/value时，它是无法观测到的。\",\"而对于数组来说，响应式都必须借由改写后的方法来实现，所以我们直接使用数组下标arr[0]=2的方式来更改数据是监测不到的。\",\"为了解决上述问题，Vue增加了两个全局 API:Vue.set和Vue.delete。\",\"Vue.set(target, propertyName / index, value)\",\"export function set(target: Array<any> | Object, key: any, val: any) { // target为undefined、null、原始值 if (process.env.NODE_ENV !== 'production' && (isUndef(target) || isPrimitive(target))) { warn(`Cannot set reactive property on undefined, null, or primitive value: ${target}`); } // 数组 if (Array.isArray(target) && isValidArrayIndex(key)) { target.length = Math.max(target.length, key); target.splice(key, 1, val); // splice已经被重写 return val; } // 对象（非新增） if (key in target && !(key in Object.prototype)) { target[key] = val; return val; } const ob = target.__ob__; // 如果tragte是 Vue 实例，或者是 Vue 实例的根数据对象 if (target._isVue || (ob && ob.vmCount)) { process.env.NODE_ENV !== 'production' && warn( 'Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.' ); return val; } // 非响应式对象 if (!ob) { target[key] = val; return val; } defineReactive(ob.value, key, val); // 更新依赖 ob.dep.notify(); return val; }\",\"数组：借用已重写的splice方法完成响应式\",\"对象（非新增 | 非响应式）：直接修改对应属性的值\",\"对象（新增）：调用defineReactive函数添加响应式\",\"通知更新\",\"Vue.delete(target, propertyName / index)\",\"export function del(target, key) { // target为undefined、null、原始值 if (process.env.NODE_ENV !== 'production' && (isUndef(target) || isPrimitive(target))) { warn(`Cannot delete reactive property on undefined, null, or primitive value: ${target}`); } // 数组 if (Array.isArray(target) && isValidArrayIndex(key)) { target.splice(key, 1); return; } const ob = target.__ob__; // 如果tragte是 Vue 实例，或者是 Vue 实例的根数据对象 if (target._isVue || (ob && ob.vmCount)) { process.env.NODE_ENV !== 'production' && warn( 'Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.' ); return; } if (!hasOwn(target, key)) { return; } delete target[key]; if (!ob) { return; } ob.dep.notify(); }\"]},\"1787\":{\"h\":\"二、Diff 算法\"},\"1788\":{\"h\":\"1. 虚拟 DOM\",\"t\":[\"所谓虚拟 DOM，就是用一个JS对象来描述一个DOM节点，像如下示例：\",\"// <div class=\\\"a\\\" id=\\\"b\\\">我是内容</div> { tag:'div', // 元素标签 attrs:{ // 属性 class:'a', id:'b' }, text:'我是内容', // 文本内容 children:[] // 子元素 }\",\"我们把组成一个DOM节点的必要东西通过一个JS对象表示出来，那么这个JS对象就可以用来描述这个DOM节点，我们把这个JS对象就称为是这个真实DOM节点的虚拟DOM节点。\",\"VNode 节点\",\"export default class VNode { constructor( tag?: string, data?: VNodeData, children?: ?Array<VNode>, text?: string, elm?: Node, context?: Component, componentOptions?: VNodeComponentOptions, asyncFactory?: Function ) { this.tag = tag; /*当前节点的标签名*/ this.data = data; /*当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息*/ this.children = children; /*当前节点的子节点，是一个数组*/ this.text = text; /*当前节点的文本*/ this.elm = elm; /*当前虚拟节点对应的真实dom节点*/ this.ns = undefined; /*当前节点的名字空间*/ this.context = context; /*当前组件节点对应的Vue实例*/ this.fnContext = undefined; /*函数式组件对应的Vue实例*/ this.fnOptions = undefined; /*函数式组件对应的配置项*/ this.fnScopeId = undefined; this.key = data && data.key; /*节点的key属性，被当作节点的标志，用以优化*/ this.componentOptions = componentOptions; /*组件的option选项*/ this.componentInstance = undefined; /*当前节点对应的组件的实例*/ this.parent = undefined; /*当前节点的父节点*/ this.raw = false; /*简而言之就是是否为原生HTML或只是普通文本，innerHTML的时候为true，textContent的时候为false*/ this.isStatic = false; /*静态节点标志*/ this.isRootInsert = true; /*是否作为跟节点插入*/ this.isComment = false; /*是否为注释节点*/ this.isCloned = false; /*是否为克隆节点*/ this.isOnce = false; /*是否有v-once指令*/ this.asyncFactory = asyncFactory; this.asyncMeta = undefined; this.isAsyncPlaceholder = false; } get child(): Component | void { return this.componentInstance; } }\",\"VNode类中包含了描述一个真实DOM节点所需要的一系列属性，如tag表示节点的标签名，text表示节点中包含的文本，children表示该节点包含的子节点等。通过 属性之间不同的搭配 ，就可以描述出各种类型的真实DOM节点。包括 注释节点、文本节点、元素节点、组件节点、函数式组件节点、克隆节点 。\",\"我们在视图渲染之前，把写好的template模板先编译成VNode并缓存下来，等到数据发生变化页面需要重新渲染的时候，我们把数据发生变化后生成的VNode与前一次缓存下来的VNode进行对比，找出差异，然后有差异的VNode对应的真实DOM节点就是需要重新渲染的节点，最后根据有差异的VNode创建出真实的DOM节点再插入到视图中，最终完成一次视图更新。\"]},\"1789\":{\"h\":\"2. Diff 算法\",\"t\":[\"操作真实 DOM 是非常消耗性能的，Vue 通过进行数据变化前后的虚拟DOM-Diff，最终做到只更新有差异的视图，从而达到尽可能少的操作真实DOM的目的，以节省性能。\",\"DOM-Diff的过程也叫patch过程，即打补丁，本质上是以新的 VNode 为基准，改造旧的 oldVNode 使之成为跟新的 VNode 一样，这就是 patch 过程要干的事。\",\"创建节点：新的VNode中有而旧的oldVNode中没有，就在旧的oldVNode中创建。\",\"删除节点：新的VNode中没有而旧的oldVNode中有，就从旧的oldVNode中删除。\",\"更新节点：新的VNode和旧的oldVNode中都有，就以新的VNode为准，更新旧的oldVNode。\",\"Vue在模板编译后，vnode为一个对象，而vnode.children为一个数组，所以vnode节点之间的patch和vnode子节点之间的patch是存在区别的（会多一个循环的过程和一些特殊情况处理）。\",\"创建元素节点\",\"// 创建元素节点 function createElm(vnode, parentElm, refElm) { const data = vnode.data; const children = vnode.children; const tag = vnode.tag; if (isDef(tag)) { vnode.elm = nodeOps.createElement(tag, vnode); // 创建元素节点 createChildren(vnode, children, insertedVnodeQueue); // 创建元素节点的子节点 insert(parentElm, vnode.elm, refElm); // 插入到DOM中 } else if (isTrue(vnode.isComment)) { vnode.elm = nodeOps.createComment(vnode.text); // 创建注释节点 insert(parentElm, vnode.elm, refElm); // 插入到DOM中 } else { vnode.elm = nodeOps.createTextNode(vnode.text); // 创建文本节点 insert(parentElm, vnode.elm, refElm); // 插入到DOM中 } } // 创建元素子节点 function createChildren(vnode, children, insertedVnodeQueue) { if (Array.isArray(children)) { if (process.env.NODE_ENV !== 'production') { checkDuplicateKeys(children); } for (let i = 0; i < children.length; ++i) { createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i); } } else if (isPrimitive(vnode.text)) { nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text))); } }\",\"存在 tag 属性，为元素节点\",\"isComment 为 true，为注释节点\",\"如果既不是元素节点，也不是注释节点，那就认为是文本节点\",\"img\",\"删除节点\",\"function removeNode(el) { const parent = nodeOps.parentNode(el); // 获取父节点 if (isDef(parent)) { nodeOps.removeChild(parent, el); // 调用父节点的removeChild方法 } }\",\"更新节点\",\"新旧 vndoe 之间的 patch\",\"function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly) { // vnode与oldVnode是否完全一样？若是，退出程序 if (oldVnode === vnode) { return; } if (isDef(vnode.elm) && isDef(ownerArray)) { // 克隆重复使用的节点 vnode = ownerArray[index] = cloneVNode(vnode); } const elm = (vnode.elm = oldVnode.elm); // 旧节点对应的dom元素 // 异步占位节点 if (isTrue(oldVnode.isAsyncPlaceholder)) { if (isDef(vnode.asyncFactory.resolved)) { hydrate(oldVnode.elm, vnode, insertedVnodeQueue); } else { vnode.isAsyncPlaceholder = true; } return; } // 在模板编译的优化阶段会标记静态节点 // vnode与oldVnode是否都是静态节点？若是，退出程序 if ( isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce)) ) { vnode.componentInstance = oldVnode.componentInstance; return; } // 一些钩子函数 let i; const data = vnode.data; if (isDef(data) && isDef((i = data.hook)) && isDef((i = i.prepatch))) { i(oldVnode, vnode); } const oldCh = oldVnode.children; const ch = vnode.children; if (isDef(data) && isPatchable(vnode)) { for (i = 0; i < cbs.update.length; ++i) cbs.update[i](oldVnode, vnode); if (isDef((i = data.hook)) && isDef((i = i.update))) i(oldVnode, vnode); } // vnode.text未定义 if (isUndef(vnode.text)) { // vnode的子节点与oldVnode的子节点是否都存在？ if (isDef(oldCh) && isDef(ch)) { // 若都存在，判断子节点是否相同，不同则更新子节点 if (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); } // 若只有vnode的子节点存在，则此节点为新增节点 else if (isDef(ch)) { if (process.env.NODE_ENV !== 'production') { checkDuplicateKeys(ch); } /** * 判断oldVnode是否有文本？ * 若没有，则把vnode的子节点添加到真实DOM中 * 若有，则清空Dom中的文本，再把vnode的子节点添加到真实DOM中 */ if (isDef(oldVnode.text)) nodeOps.setTextContent(elm, ''); // 遍历ch，为每个元素创建dom，然后插入到elm中 addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue); } // 若只有oldnode的子节点存在，此节点为需要删除的节点 else if (isDef(oldCh)) { // 清空DOM中的子节点 removeVnodes(elm, oldCh, 0, oldCh.length - 1); } // 若vnode和oldnode都没有子节点，但是oldnode中有文本 else if (isDef(oldVnode.text)) { // 清空oldnode文本 nodeOps.setTextContent(elm, ''); } } // vnode.text已定义，vnode的text属性与oldVnode的text属性是否相同？ else if (oldVnode.text !== vnode.text) { // 若不相同：则用vnode的text替换真实DOM的文本 nodeOps.setTextContent(elm, vnode.text); } if (isDef(data)) { if (isDef((i = data.hook)) && isDef((i = i.postpatch))) i(oldVnode, vnode); } }\",\"img\",\"新旧 vnode.children 之间（数组）的 patch\",\"function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) { let oldStartIdx = 0; // oldChildren开始索引 let oldEndIdx = oldCh.length - 1; // oldChildren结束索引 let oldStartVnode = oldCh[0]; // oldChildren中所有未处理节点中的第一个 let oldEndVnode = oldCh[oldEndIdx]; // oldChildren中所有未处理节点中的最后一个 let newStartIdx = 0; // newChildren开始索引 let newEndIdx = newCh.length - 1; // newChildren结束索引 let newStartVnode = newCh[0]; // newChildren中所有未处理节点中的第一个 let newEndVnode = newCh[newEndIdx]; // newChildren中所有未处理节点中的最后一个 let oldKeyToIdx, idxInOld, vnodeToMove, refElm; const canMove = !removeOnly; if (process.env.NODE_ENV !== 'production') { checkDuplicateKeys(newCh); } // 以\\\"新前\\\"、\\\"新后\\\"、\\\"旧前\\\"、\\\"旧后\\\"的方式开始比对节点 while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) { if (isUndef(oldStartVnode)) { oldStartVnode = oldCh[++oldStartIdx]; // 如果oldStartVnode不存在，则直接跳过，比对下一个 } else if (isUndef(oldEndVnode)) { oldEndVnode = oldCh[--oldEndIdx]; // 如果oldEndVnode不存在，则直接跳过，将oldEndIdx减1，比对前一个 } else if (sameVnode(oldStartVnode, newStartVnode)) { // 如果新前与旧前节点相同，就把两个节点进行patch更新 patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx); // 将新旧节点皆移向下一个节点 oldStartVnode = oldCh[++oldStartIdx]; newStartVnode = newCh[++newStartIdx]; } else if (sameVnode(oldEndVnode, newEndVnode)) { // 如果新后与旧后节点相同，就把两个节点进行patch更新 patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx); oldEndVnode = oldCh[--oldEndIdx]; newEndVnode = newCh[--newEndIdx]; } else if (sameVnode(oldStartVnode, newEndVnode)) { // 如果新后与旧前节点相同，先把两个节点进行patch更新，然后把旧前节点移动到oldChilren中所有未处理节点之后 patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx); canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm)); oldStartVnode = oldCh[++oldStartIdx]; newEndVnode = newCh[--newEndIdx]; } else if (sameVnode(oldEndVnode, newStartVnode)) { // 如果新前与旧后节点相同，先把两个节点进行patch更新，然后把旧后节点移动到oldChilren中所有未处理节点之前 patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx); canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm); oldEndVnode = oldCh[--oldEndIdx]; newStartVnode = newCh[++newStartIdx]; } else { // 如果不属于以上四种情况，就进行常规的循环比对patch if (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx); // 如果在oldChildren里找不到当前循环的newChildren里的子节点 if (isUndef(idxInOld)) { // 新增节点并插入到合适位置 createElm( newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx ); } else { // 如果在oldChildren里找到了当前循环的newChildren里的子节点 vnodeToMove = oldCh[idxInOld]; // 如果两个节点相同 if (sameVnode(vnodeToMove, newStartVnode)) { // 调用patchVnode更新节点 patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx); oldCh[idxInOld] = undefined; // canmove表示是否需要移动节点，如果为true表示需要移动，则移动节点，如果为false则不用移动 canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm); } else { // same key but different element. treat as new element createElm( newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx ); } } newStartVnode = newCh[++newStartIdx]; } } if (oldStartIdx > oldEndIdx) { /** * 如果oldChildren比newChildren先循环完毕， * 那么newChildren里面剩余的节点都是需要新增的节点， * 把[newStartIdx, newEndIdx]之间的所有节点都插入到DOM中 */ refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm; addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue); } else if (newStartIdx > newEndIdx) { /** * 如果newChildren比oldChildren先循环完毕， * 那么oldChildren里面剩余的节点都是需要删除的节点， * 把[oldStartIdx, oldEndIdx]之间的所有节点都删除 */ removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx); } }\",\"img\",\"img\"]},\"1790\":{\"h\":\"三、模板编译\",\"t\":[\"img\",\"模板编译过程就是把用户写的模板经过一系列处理最终生成render函数的过程。其具体流程可大致分为三个阶段：\",\"模板解析阶段：将一堆模板字符串用正则等方式解析成抽象语法树AST； 解析器（parse）\",\"优化阶段：遍历AST，找出其中的静态节点，并打上标记； 优化器（optimizer）\",\"代码生成阶段：将AST转换成渲染函数； 代码生成器（codegen）\",\"// 源码位置: /src/complier/index.js export const createCompiler = createCompilerCreator(function baseCompile( template: string, options: CompilerOptions ): CompiledResult { // 模板解析阶段：用正则等方式解析 template 模板中的指令、class、style等数据，形成AST const ast = parse(template.trim(), options); if (options.optimize !== false) { // 优化阶段：遍历AST，找出其中的静态节点，并打上标记； optimize(ast, options); } // 代码生成阶段：将AST转换成渲染函数； const code = generate(ast, options); return { ast, render: code.render, staticRenderFns: code.staticRenderFns, }; });\",\"img\"]},\"1791\":{\"h\":\"1. 模板解析\",\"t\":[\"在<template></template>模板内，除了有常规的HTML标签外，还会包含一些文本信息以及在文本信息中包含过滤器。而这些不同的内容在解析起来肯定需要不同的解析规则，所以解析器不可能只有一个，它应该除了有解析常规HTML的 HTML 解析器，还应该有解析文本的文本解析器以及解析文本中如果包含过滤器的过滤器解析器。\",\"HTML 解析器是主线， 先用 HTML 解析器进行解析整个模板，在解析过程中如果碰到文本内容，那就调用文本解析器来解析文本，如果碰到文本中包含过滤器那就调用过滤器解析器来解析 。\",\"export function parse(template, options) { // ... // 向parseHTML中传入start|end|chars|comment四个钩子函数 parseHTML(template, { warn, expectHTML: options.expectHTML, isUnaryTag: options.isUnaryTag, canBeLeftOpenTag: options.canBeLeftOpenTag, shouldDecodeNewlines: options.shouldDecodeNewlines, shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref, shouldKeepComment: options.comments, // 当解析到开始标签时，调用该函数 start(tag, attrs, unary) {}, // 当解析到结束标签时，调用该函数 end() {}, /** * 当解析到文本时，调用该函数，生成文本类型的AST节点 * 首先会判断文本是不是一个带变量的动态文本，如“hello ”。 * 如果是动态文本，则创建动态文本类型的AST节点； * 如果不是动态文本，则创建纯静态文本类型的AST节点。 */ chars(text) {}, // 当解析到注释时，调用该函数，该钩子函数会创建一个注释类型的AST节点。 comment(text) {}, }); return root; }\",\"在解析整个 HTML 的过程中，要完成的任务包括：\",\"需要越过合法但无效的信息，比如：DOCTYPE、条件注释\",\"提取出合法且有效的信息，并将其作为参数，依据信息类型，调用相应的钩子函数生成 AST\",\"其中AST的结构如下：\",\"function createASTElement( tag: string, attrs: Array<ASTAttr>, parent: ASTElement | void ): ASTElement { return { type: 1, tag, attrsList: attrs, attrsMap: makeAttrsMap(attrs), rawAttrsMap: {}, parent, children: [], }; }\",\"在调用parseHTML传入的配置项中，定义了四个钩子函数：start、end、chars、comment。\",\"钩子函数\",\"实现功能\",\"start\",\"创建元素类型（1）的 AST 节点，进行一些预变换操作，执行解析模板中的结构化指令（v-for、v-if、v-once）\",\"end\",\"弹出调用栈栈顶的 AST 节点，在编译过程中处理元素的关闭操作，并进行相应的树管理（AST 节点之间的层级关系）\",\"chars\",\"处理文本之间的回车符、空白符和编解码，调用 parseText 解析文本，根据返回的结果创建带变量（2）的 AST 节点或纯文本节点（3）\",\"comment\",\"创建注释节点（3 且 isComment 为 true）\"]},\"1792\":{\"h\":\"HTML 解析器\",\"t\":[\"当前 html 字符串没有父节点或者父节点不是纯文本标签(script,style,textarea) \",\"如果 html 字符串是以<开头,则有以下五种可能，一一去匹配尝试 \",\"开始标签:<div>，提取组织数据格式，调用start(tagName, attrs, unary, match.start, match.end)\",\"结束标签:</div>，调用end(stack[i].tag, start, end)\",\"注释:<!-- 我是注释 -->，调用comment('我是注释',start,end)创建注释 AST\",\"条件注释:<!-- [if !IE] --> <!-- [endif] -->，直接越过\",\"DOCTYPE:<!DOCTYPE html>，直接越过\",\"< 不在第一个位置，说明 html 字符串以文本开头,需要提取出这段文本，然后越过\",\"整个模板字符串里没有找到<,说明整个模板字符串都是文本\",\"越过文本内容，然后把截取出来的text转化成textAST，chars(text, start, end)\",\"父元素为script、style、textarea时，因为在这三个标签里的内容肯定不会有 HTML 标签，所以其内部的内容全部当做纯文本处理\",\"export function parseHTML(html, options) { const stack = []; // 维护AST节点层级的栈 const expectHTML = options.expectHTML; const isUnaryTag = options.isUnaryTag || no; // 是否自闭和 const canBeLeftOpenTag = options.canBeLeftOpenTag || no; //用来检测一个标签是否是可以省略闭合标签的非自闭合标签 let index = 0; //解析游标，标识当前从何处开始解析模板字符串 let last, // 存储剩余还未解析的模板字符串· lastTag; // 存储着位于 stack 栈顶的元素 // 开启一个 while 循环，循环结束的条件是 html 为空，即 html 被 parse 完毕 while (html) { last = html; // 确保即将 parse 的内容不是在纯文本标签里 (script,style,textarea) // !lastTag表示当前html字符串没有父节点 // 也就是说当前html字符串要么没有父节点要么父节点不是纯文本标签 if (!lastTag || !isPlainTextElement(lastTag)) { let textEnd = html.indexOf('<'); /** * 如果html字符串是以'<'开头,则有以下五种可能 * 1. 开始标签:<div> * 2. 结束标签:</div> * 3. 注释:<!-- 我是注释 --> * 4. 条件注释:<!-- [if !IE] --> <!-- [endif] --> * 5. DOCTYPE:<!DOCTYPE html> * 需要一一去匹配尝试 */ if (textEnd === 0) { // 若为注释，则继续查找是否存在'-->' if (comment.test(html)) { const commentEnd = html.indexOf('-->'); if (commentEnd >= 0) { // 若存在 '-->',继续判断options中是否保留注释 if (options.shouldKeepComment) { // 若保留注释，则把注释截取出来传给options.comment，创建注释类型的AST节点 options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3); } // 若不保留注释，则将游标移动到'-->'之后，继续向后解析 advance(commentEnd + 3); continue; } } // 解析是否是条件注释 if (conditionalComment.test(html)) { // 若为条件注释，则继续查找是否存在']>' const conditionalEnd = html.indexOf(']>'); // 若存在 ']>',则从原本的html字符串中把条件注释截掉， // 把剩下的内容重新赋给html，继续向后匹配 if (conditionalEnd >= 0) { advance(conditionalEnd + 2); continue; } } // 解析是否是DOCTYPE const doctypeMatch = html.match(doctype); if (doctypeMatch) { advance(doctypeMatch[0].length); continue; } // 解析是否是结束标签 const endTagMatch = html.match(endTag); if (endTagMatch) { const curIndex = index; advance(endTagMatch[0].length); parseEndTag(endTagMatch[1], curIndex, index); continue; } // 解析是否是开始标签 const startTagMatch = parseStartTag(); // match{tagName,attrs,start} if (startTagMatch) { handleStartTag(startTagMatch); if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) { advance(1); } continue; } } let text, rest, next; // '<' 不在第一个位置，说明html字符串以文本开头,需要提取出这段文本 if (textEnd >= 0) { // 如果html字符串不是以'<'开头,说明'<'前面的都是纯文本，无需处理 // 那就把'<'以后的内容拿出来赋给rest rest = html.slice(textEnd); while ( !endTag.test(rest) && !startTagOpen.test(rest) && !comment.test(rest) && !conditionalComment.test(rest) ) { /** * 用'<'以后的内容rest去匹配endTag、startTagOpen、comment、conditionalComment * 如果都匹配不上，表示'<'是属于文本本身的内容 */ // 在'<'之后查找是否还有'<' next = rest.indexOf('<', 1); // 如果没有了，表示'<'后面也是文本 if (next < 0) break; // 如果还有，表示'<'是文本中的一个字符 textEnd += next; // 那就把next之后的内容截出来继续下一轮循环匹配 rest = html.slice(textEnd); } // '<'是结束标签的开始 ,说明从开始到'<'都是文本，截取出来 text = html.substring(0, textEnd); } // 整个模板字符串里没有找到`<`,说明整个模板字符串都是文本 if (textEnd < 0) { text = html; } if (text) { advance(text.length); } // 把截取出来的text转化成textAST if (options.chars && text) { options.chars(text, index - text.length, index); } } // 父元素为script、style、textarea时，其内部的内容全部当做纯文本处理 // 因为在这三个标签里的内容肯定不会有HTML标签 else { let endTagLength = 0; const stackedTag = lastTag.toLowerCase(); //当前正在处理的标签名 const reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\\\\\s\\\\\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i')); // 回调函数会在每次匹配到闭合标签时被调用 const rest = html.replace(reStackedTag, function (all, text, endTag) { endTagLength = endTag.length; if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') { text = text .replace(/<!\\\\--([\\\\s\\\\S]*?)-->/g, '$1') // #7298 .replace(/<!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)]]>/g, '$1'); } if (shouldIgnoreFirstNewline(stackedTag, text)) { text = text.slice(1); } if (options.chars) { options.chars(text); } return ''; }); index += html.length - rest.length; html = rest; parseEndTag(stackedTag, index - endTagLength, index); } // 经过上述所有处理逻辑处理过后，html字符串没有任何变化，表示html字符串没有匹配上任何一条规则，那么就把html字符串当作纯文本对待 if (html === last) { options.chars && options.chars(html); if (process.env.NODE_ENV !== 'production' && !stack.length && options.warn) { options.warn(`Mal-formatted tag at end of template: \\\"${html}\\\"`, { start: index + html.length, }); } break; } } // Clean up any remaining tags // 调用parseEndTag函数并不传递任何参数 // 用于处理栈中剩余未处理的标签 parseEndTag(); /** * 移动解析游标 * @param {*} n 字符串向右移动的索引数 */ function advance(n) { index += n; html = html.substring(n); } /** * 解析开始标签 * @example * match{ * tagName:'div', * start:, * end:, * attrs:[ * [\\\"class=\\\"a\\\"\\\", \\\"class\\\", \\\"=\\\", \\\"a\\\", undefined, undefined, index: 0, input: \\\"class=\\\"a\\\" id=\\\"b\\\"></div>\\\", groups: undefined], * ... * ] * } */ function parseStartTag() { // 解析开始标签 // '<div></div>'.match(startTagOpen) => ['<div','div',index:0,input:'<div></div>'] const start = html.match(startTagOpen); if (start) { const match = { tagName: start[1], attrs: [], start: index, }; advance(start[0].length); let end, attr; /** * <div a=1 b=2 c=3></div> * 从<div之后到开始标签的结束符号'>'之前，一直匹配属性attrs * 所有属性匹配完之后，html字符串还剩下 * 自闭合标签剩下：'/>' * 非自闭合标签剩下：'></div>' */ // 解析标签属性 // 不符合开始标签的结束特征（startTagClose）并且符合标签属性的特征，说明还有未提取出的标签属性 while ( !(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute)) ) { attr.start = index; advance(attr[0].length); attr.end = index; match.attrs.push(attr); } /** * 这里判断了该标签是否为自闭合标签 * 自闭合标签如:<input type='text' /> * 非自闭合标签如:<div></div> * '></div>'.match(startTagClose) => [\\\">\\\", \\\"\\\", index: 0, input: \\\"></div>\\\", groups: undefined] * '/><div></div>'.match(startTagClose) => [\\\"/>\\\", \\\"/\\\", index: 0, input: \\\"/><div></div>\\\", groups: undefined] * 因此，我们可以通过end[1]是否是\\\"/\\\"来判断该标签是否是自闭合标签 */ if (end) { match.unarySlash = end[1]; advance(end[0].length); match.end = index; return match; } } } /** * 处理提取出的信息(attrs), * 组装好数据之后创建ast节点 * @example * attrs:[ * { * name:'class', * value:'a' * } * ] * */ function handleStartTag(match) { const tagName = match.tagName; // 开始标签的标签名 const unarySlash = match.unarySlash; // 是否为自闭合标签的标志，自闭合为\\\"\\\",非自闭合为\\\"/\\\" if (expectHTML) { if (lastTag === 'p' && isNonPhrasingTag(tagName)) { parseEndTag(lastTag); } if (canBeLeftOpenTag(tagName) && lastTag === tagName) { parseEndTag(tagName); } } const unary = isUnaryTag(tagName) || !!unarySlash; // 布尔值，标志是否为自闭合标签 const l = match.attrs.length; // match.attrs 数组的长度 const attrs = new Array(l); // 一个与match.attrs数组长度相等的数组 for (let i = 0; i < l; i++) { // [\\\"class=\\\"a\\\"\\\", \\\"class\\\", \\\"=\\\", \\\"a\\\", undefined, undefined, index: 0, input: \\\"class=\\\"a\\\" id=\\\"b\\\"></div>\\\", groups: undefined] const args = match.attrs[i]; const value = args[3] || args[4] || args[5] || ''; // 做一些兼容性处理， 如果 shouldDecodeNewlines 为 true，意味着 Vue 在编译模板的时候，要对属性值中的换行符或制表符做兼容处理。 // shouldDecodeNewlinesForHref为true 意味着Vue在编译模板的时候，要对a标签的 href属性值中的换行符或制表符做兼容处理 const shouldDecodeNewlines = tagName === 'a' && args[1] === 'href' ? options.shouldDecodeNewlinesForHref : options.shouldDecodeNewlines; attrs[i] = { name: args[1], // 标签属性的属性名，如class value: decodeAttr(value, shouldDecodeNewlines), // 标签属性的属性值，如class对应的a }; if (process.env.NODE_ENV !== 'production' && options.outputSourceRange) { attrs[i].start = args.start + args[0].match(/^\\\\s*/).length; attrs[i].end = args.end; } } // 如果该标签是非自闭合标签，则将标签推入栈中 if (!unary) { stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs, start: match.start, end: match.end, }); lastTag = tagName; } // 如果该标签是自闭合标签，调用start钩子函数并传入处理好的参数来创建AST节点 if (options.start) { options.start(tagName, attrs, unary, match.start, match.end); } } /** 解析结束标签，从标签栈中匹配正确的标签 */ function parseEndTag(tagName, start, end) { let pos, lowerCasedTagName; if (start == null) start = index; if (end == null) end = index; /** * 如果tagName存在，那么就从后往前遍历栈， * 在栈中寻找与tagName相同的标签并记录其所在的位置pos， * 如果tagName不存在，则将pos置为0 */ if (tagName) { lowerCasedTagName = tagName.toLowerCase(); for (pos = stack.length - 1; pos >= 0; pos--) { if (stack[pos].lowerCasedTag === lowerCasedTagName) { break; } } } else { // If no tag name is provided, clean shop pos = 0; } // pos>=0，说明栈中存在与之对应的开始标签 if (pos >= 0) { /** * 正常的pos应该是栈顶位置，后面不应该再有元素， * 如果后面还有元素，那么后面的元素就都缺少闭合标签 */ for (let i = stack.length - 1; i >= pos; i--) { if (process.env.NODE_ENV !== 'production' && (i > pos || !tagName) && options.warn) { options.warn(`tag <${stack[i].tag}> has no matching end tag.`, { start: stack[i].start, }); } if (options.end) { options.end(stack[i].tag, start, end); } } // 把pos位置以后的元素都从stack栈中弹出，以及把lastTag更新为栈顶元素: stack.length = pos; lastTag = pos && stack[pos - 1].tag; } // pos<0,在 stack 栈中没有找到对应的开始标签 // 判断 tagName 是否为br 或p标签 // 浏览器会自动把</br>标签解析为正常的 <br>标签，而对于</p>浏览器则自动将其补全为<p></p> else if (lowerCasedTagName === 'br') { if (options.start) { options.start(tagName, [], true, start, end); // 创建<br>AST节点 } } else if (lowerCasedTagName === 'p') { // 补全p标签并创建AST节点 if (options.start) { options.start(tagName, [], false, start, end); } if (options.end) { options.end(tagName, start, end); } } } }\"]},\"1793\":{\"h\":\"文本解析器\",\"t\":[\"export function parseText( text: string, //传入的文本 delimiters?: [string, string] //可选参数，自定义包裹变量所用符号 ): TextParseResult | void { const tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE; if (!tagRE.test(text)) { return; } const tokens = []; const rawTokens = []; let lastIndex = (tagRE.lastIndex = 0); // tagRE.lastIndex表示下一次开始搜索的索引值 let match, index, tokenValue; while ((match = tagRE.exec(text))) { // ['{{name}}', 'name', index: 0, input: '{{name}}', groups: undefined] index = match.index; // 第一个匹配项的起始位置 // push text token if (index > lastIndex) { // 先把'{{'前面的文本放入tokens中 rawTokens.push((tokenValue = text.slice(lastIndex, index))); tokens.push(JSON.stringify(tokenValue)); } // 如果index不大于lastIndex，那说明index也为0，即该文本一开始就是变量 // 取出'{{ }}'中间的变量exp const exp = parseFilters(match[1].trim()); // 把变量exp改成_s(exp)形式也放入tokens中 tokens.push(`_s(${exp})`); rawTokens.push({ '@binding': exp }); // 更新lastIndex lastIndex = index + match[0].length; } // 当剩下的text不再被正则匹配上时，表示所有变量已经处理完毕 // 此时如果lastIndex < text.length，表示在最后一个变量后面还有文本 // 最后将后面的文本再加入到tokens中 if (lastIndex < text.length) { rawTokens.push((tokenValue = text.slice(lastIndex))); tokens.push(JSON.stringify(tokenValue)); } return { expression: tokens.join('+'), tokens: rawTokens, }; }\",\"判断传入的文本是否包含变量\",\"构造expression\",\"构造tokens\",\"//\\\"我叫{{name}}，我今年{{age}}岁了\\\" res = { expression:\\\"我叫\\\"+_s(name)+\\\"，我今年\\\"+_s(age)+\\\"岁了\\\", tokens:[ \\\"我叫\\\", {'@binding': name }, \\\"，我今年\\\" {'@binding': age }, \\\"岁了\\\", ] }\"]},\"1794\":{\"h\":\"过滤器解析器\",\"t\":[\"export function parseFilters(exp: string): string { let inSingle = false; // exp是否在 '' 中 let inDouble = false; // exp是否在 \\\"\\\" 中 let inTemplateString = false; // exp是否在 `` 中 let inRegex = false; // exp是否在 \\\\\\\\ 中 let curly = 0; // 在exp中发现一个 { 则curly加1，发现一个 } 则curly减1，直到culy为0 说明 { ... }闭合 let square = 0; // 在exp中发现一个 [ 则curly加1，发现一个 ] 则curly减1，直到culy为0 说明 [ ... ]闭合 let paren = 0; // 在exp中发现一个 ( 则curly加1，发现一个 ) 则curly减1，直到culy为0 说明 ( ... )闭合 let lastFilterIndex = 0; let c, prev, i, expression, filters; for (i = 0; i < exp.length; i++) { prev = c; c = exp.charCodeAt(i); // \\\\'、\\\\\\\"、\\\\`、\\\\/ if (inSingle) { if (c === 0x27 && prev !== 0x5c) inSingle = false; } else if (inDouble) { if (c === 0x22 && prev !== 0x5c) inDouble = false; } else if (inTemplateString) { if (c === 0x60 && prev !== 0x5c) inTemplateString = false; } else if (inRegex) { if (c === 0x2f && prev !== 0x5c) inRegex = false; } // 单个 | 符号且括号闭合 else if ( c === 0x7c && exp.charCodeAt(i + 1) !== 0x7c && exp.charCodeAt(i - 1) !== 0x7c && !curly && !square && !paren ) { if (expression === undefined) { // first filter, end of expression lastFilterIndex = i + 1; expression = exp.slice(0, i).trim(); // 存储待处理的表达式 } // 存在多个‘|’符，将中间的filter放入filters数组 else { pushFilter(); } } else { switch (c) { case 0x22: inDouble = true; break; // \\\" case 0x27: inSingle = true; break; // ' case 0x60: inTemplateString = true; break; // ` case 0x28: paren++; break; // ( case 0x29: paren--; break; // ) case 0x5b: square++; break; // [ case 0x5d: square--; break; // ] case 0x7b: curly++; break; // { case 0x7d: curly--; break; // } } if (c === 0x2f) { // / let j = i - 1; let p; // find first non-whitespace prev char for (; j >= 0; j--) { p = exp.charAt(j); if (p !== ' ') break; } if (!p || !validDivisionCharRE.test(p)) { inRegex = true; } } } } // 不存在 | 过滤符，全部为表达式 if (expression === undefined) { expression = exp.slice(0, i).trim(); } // 将最后一个|过滤符后面的加入fiters else if (lastFilterIndex !== 0) { pushFilter(); } function pushFilter() { (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim()); lastFilterIndex = i + 1; } if (filters) { for (i = 0; i < filters.length; i++) { expression = wrapFilter(expression, filters[i]); } } return expression; }\",\"示例\",\"// input: message | filter1 | filter2(arg); // wrapFilter调用前 expression = 'message'; filters = ['filter1', 'filter2(arg)']; // wrapFilter调用后 _f('filter2')(_f('filter1')('message'), arg);\"]},\"1795\":{\"h\":\"2. 优化阶段\",\"t\":[\"有一种节点一旦首次渲染之后不管状态再怎么变化它都不会变了，这种节点叫做静态节点。优化节点的目标就是：\",\"在AST中找出所有静态节点并打上标记；\",\"在AST中找出所有静态根节点并打上标记；\",\"判断一个 ast 节点本身是否为静态节点\",\"function isStatic(node: ASTNode): boolean { if (node.type === 2) { // 包含变量的动态文本节点 return false; } if (node.type === 3) { // 不包含变量的纯文本节点 return true; } // 此时为元素节点，进一步判断 return !!( ( node.pre || //使用了v-pre指令 (!node.hasBindings && // 不能使用动态绑定语法，即标签上不能有v-、@、:开头的属性； !node.if && // 不能使用v-if、v-else、v-for指令 !node.for && // not v-if or v-for or v-else !isBuiltInTag(node.tag) && // 不能是内置组件，即标签名不能是slot和component； isPlatformReservedTag(node.tag) && // 标签名必须是平台保留标签，即不能是组件 !isDirectChildOfTemplateFor(node) && //当前节点的父节点不能是带有 v-for 的 template 标签； Object.keys(node).every(isStaticKey)) ) //节点的所有属性的 key 都必须是静态节点才有的 key； ); }\",\"标记静态节点\",\"function markStatic(node: ASTNode) { node.static = isStatic(node); if (node.type === 1) { // 不处理slot函数内部的组件 if ( !isPlatformReservedTag(node.tag) && node.tag !== 'slot' && node.attrsMap['inline-template'] == null ) { return; } for (let i = 0, l = node.children.length; i < l; i++) { const child = node.children[i]; // 递归标记子节点，有一个为false即为false markStatic(child); if (!child.static) { node.static = false; } } /** * 循环node.children后还不算把所有子节点都遍历完， * 因为如果当前节点的子节点中有标签带有v-if、v-else-if、v-else等指令时， * 这些子节点在每次渲染时都只渲染一个，所以其余没有被渲染的肯定不在node.children中， * 而是存在于node.ifConditions，所以我们还要把node.ifConditions循环一遍 */ if (node.ifConditions) { for (let i = 1, l = node.ifConditions.length; i < l; i++) { const block = node.ifConditions[i].block; markStatic(block); if (!block.static) { node.static = false; } } } } }\",\"标记静态根节点\",\"function markStaticRoots(node: ASTNode, isInFor: boolean) { if (node.type === 1) { //已经是 static 的节点或者是 v-once 指令的节点 if (node.static || node.once) { node.staticInFor = isInFor; } /* * 为了使节点有资格作为静态根节点，它应具有不只是静态文本的子节点。 否则，优化的成本将超过收益，最好 * 始终将其更新。 */ if ( node.static && node.children.length && !(node.children.length === 1 && node.children[0].type === 3) ) { node.staticRoot = true; return; } else { node.staticRoot = false; } // 如果当前节点不是静态根节点，那就继续递归遍历它的子节点 if (node.children) { for (let i = 0, l = node.children.length; i < l; i++) { markStaticRoots(node.children[i], isInFor || !!node.for); } } if (node.ifConditions) { for (let i = 1, l = node.ifConditions.length; i < l; i++) { markStaticRoots(node.ifConditions[i].block, isInFor); } } } }\",\"静态根节点必须满足如下条件，否则的话，对它的优化成本将大于优化后带来的收益。\",\"节点本身必须是静态节点；\",\"必须拥有子节点 children；\",\"子节点不能只是只有一个文本节点；\"]},\"1796\":{\"h\":\"3.代码生成\",\"t\":[\"export function generate(ast, option) { const state = new CodegenState(options); const code = ast ? genElement(ast, state) : '_c(\\\"div\\\")'; return { render: `with(this){return ${code}}`, staticRenderFns: state.staticRenderFns, }; }\",\"genElement函数定义如下：\",\"export function genElement(el: ASTElement, state: CodegenState): string { if (el.staticRoot && !el.staticProcessed) { return genStatic(el, state); } else if (el.once && !el.onceProcessed) { return genOnce(el, state); } else if (el.for && !el.forProcessed) { return genFor(el, state); } else if (el.if && !el.ifProcessed) { return genIf(el, state); } else if (el.tag === 'template' && !el.slotTarget) { return genChildren(el, state) || 'void 0'; } else if (el.tag === 'slot') { return genSlot(el, state); } else { // component or element let code; if (el.component) { code = genComponent(el.component, el, state); } else { const data = el.plain ? undefined : genData(el, state); const children = el.inlineTemplate ? null : genChildren(el, state, true); code = `_c('${el.tag}'${ data ? `,${data}` : '' // data }${ children ? `,${children}` : '' // children })`; } // module transforms for (let i = 0; i < state.transforms.length; i++) { code = state.transforms[i](el, code); } return code; } }\",\"根据当前 AST 元素节点属性的不同从而执行不同的代码生成函数：\",\"元素节点：_c(tagName,data,children)\",\"文本节点：_v(text.expression)或_v(text)\",\"注释节点：_e(comment.text)\",\"slot：_t(slotName,children,attrs)\",\"......\"]},\"1797\":{\"h\":\"举例\",\"t\":[\"template\",\"<div id=\\\"NLRX\\\"><p>Hello {{name}}</p></div>\",\"模板编译优化后的AST\",\"ast = { type: 1, tag: 'div', attrsList: [ { name: 'id', value: 'NLRX', }, ], attrsMap: { id: 'NLRX', }, static: false, parent: undefined, plain: false, children: [ { type: 1, tag: 'p', plain: false, static: false, children: [ { type: 2, expression: '\\\"Hello \\\"+_s(name)', text: 'Hello {{name}}', static: false, }, ], }, ], };\",\"生成的 render 代码\",\"{ render: ` with(this){ return _c( 'div', { attrs:{\\\"id\\\":\\\"NLRX\\\"}, }, [ _c( 'p', { attrs:{} }, [ _v(\\\"Hello \\\"+_s(name)) ] ) ] ) }`, staticRenderFns: state.staticRenderFns, };\",\"_c、_v、_e 代表了不同的辅助函数，利用其括号内传入的参数，生成不同的VNode节点。\",\"_c：_c 是 createElement 函数的别名，用于创建 VNode，即创建一个虚拟 DOM 元素。它接受三个参数，分别是标签名、元素属性对象和子元素数组。\",\"_v：_v 是 createTextVNode 函数的别名，用于创建文本节点的 VNode，即创建一个只包含文本内容的虚拟 DOM 元素。它接受一个参数，即要显示的文本内容。\",\"_s：_s 是 toString 函数的别名，用于将 JavaScript 表达式转换为字符串。它接受一个参数，即要转换为字符串的表达式。\",\"_e：_e 是 createEmptyVNode 函数的别名，用于创建一个空的 VNode。它可以用作占位符，或者在某些无内容的情况下作为默认 VNode（注释节点）\",\"其他辅助函数\",\"export function installRenderHelpers(target: any) { target._o = markOnce; //v-once target._n = toNumber; target._s = toString; target._l = renderList; //v-for target._t = renderSlot; target._q = looseEqual; target._i = looseIndexOf; target._m = renderStatic; target._f = resolveFilter; //filter target._k = checkKeyCodes; target._b = bindObjectProps; target._v = createTextVNode; target._e = createEmptyVNode; target._u = resolveScopedSlots; target._g = bindObjectListeners; target._d = bindDynamicKeys; target._p = prependModifier; }\"]},\"1798\":{\"h\":\"四、生命周期\",\"t\":[\"声明周期\"]},\"1799\":{\"h\":\"1. 初始化整体流程\",\"t\":[\"在初始化阶段的工作主要是：\",\"初始化配置项，包括初始化组件的配置项和合并配置项\",\"初始化代理，在访问 vm 属性出错时提示错误\",\"初始化生命周期、初始化事件、初始化渲染\",\"调用beforeCreate生命周期钩子函数\",\"初始化 injections、初始化 State(props,methods,data,computed,watch)、初始化 provide\",\"调用created生命周期钩子函数\",\"如果 el 存在，调用$mount 挂载\",\"整个初始化阶段就是在给 vm 挂载各种的属性对象。\",\"function Vue(options) { if (process.env.NODE_ENV !== \\\"production\\\" && !(this instanceof Vue)) { warn(\\\"Vue is a constructor and should be called with the `new` keyword\\\"); } this._init(options); } export function initMixin (Vue: Class<Component>) { Vue.prototype._init = function (options?: Object) { const vm: Component = this // a uid vm._uid = ++ let startTag, endTag /* istanbul ignore if */ if (process.env.NODE_ENV !== 'production' && config.performance && mark) { startTag = `vue-perf-start:${vm._uid}` endTag = `vue-perf-end:${vm._uid}` mark(startTag) } // a flag to avoid this being observed vm._isVue = true // 合并配置项 if (options && options._isComponent) { // optimize internal component instantiation // since dynamic options merging is pretty slow, and none of the // internal component options needs special treatment. initInternalComponent(vm, options) } else { // 合并配置项（其中规范化了props、inject、directives） vm.$options = mergeOptions( resolveConstructorOptions(vm.constructor), options || {}, vm ) } /* istanbul ignore else */ if (process.env.NODE_ENV !== 'production') { // 在访问vm属性出错时提示错误 initProxy(vm) } else { vm._renderProxy = vm } // expose real self vm._self = vm initLifecycle(vm) // 初始化生命周期 initEvents(vm) // 初始化事件 initRender(vm) // 初始化渲染 callHook(vm, 'beforeCreate') // 调用生命周期钩子函数 initInjections(vm) // 初始化injections initState(vm) // 初始化props,methods,data,computed,watch initProvide(vm) // 初始化 provide callHook(vm, 'created') // 调用生命周期钩子函数 /* istanbul ignore if */ // 衡量性能 if (process.env.NODE_ENV !== 'production' && config.performance && mark) { vm._name = formatComponentName(vm, false) mark(endTag) measure(`vue ${vm._name} init`, startTag, endTag) } if (vm.$options.el) { vm.$mount(vm.$options.el) } } }\",\"在生命周期开始前先 合并配置项 ，确定vm.$options的取值。\"]},\"1800\":{\"h\":\"2. 初始化生命周期\",\"t\":[\"确定父子关系 ，初始化部分属性\",\"export function initLifecycle(vm: Component) { const options = vm.$options; // 寻找第一个非抽象类型的父级 let parent = options.parent; if (parent && !options.abstract) { while (parent.$options.abstract && parent.$parent) { parent = parent.$parent; } parent.$children.push(vm); } vm.$parent = parent; // 父组件实例 vm.$root = parent ? parent.$root : vm; // 根组件实例 vm.$children = []; vm.$refs = {}; vm._watcher = null; // 用来挂载渲染watcher vm._inactive = null; // 指示组件是否处于激活状态 vm._directInactive = false; vm._isMounted = false; vm._isDestroyed = false; vm._isBeingDestroyed = false; }\",\"抽象组件是一种特殊的组件，在 Vue 中不会被渲染成真实的 DOM 元素，而是被用作其他组件的模板或占位符。它们通常用于封装通用的逻辑或行为，并可以通过继承或混入来复用确定父子关系。（<transition>和<keep-alive>）\",\"Vue.component('my-component', { abstract: true, // 设置为抽象组件 // 其他组件选项 });\",\"给实例初始化了一些属性，包括以$开头的供用户使用的外部属性，也包括以_开头的供内部使用的内部属性\",\"确定父子关系：vm.$parent，vm.$children，vm.$root\"]},\"1801\":{\"h\":\"3. 初始化事件\",\"t\":[\"将父组件在模板中使用 v-on 或@注册的监听子组件内触发的事件 ，挂载到vm._events(通过调用$on)\",\"在模板编译时，遇到闭合标签，会调用end钩子函数，其内部调用了closeElement函数处理元素的关闭操作，并进行相应的 dom 结构管理（start钩子函数中遇到自闭和也会调用）\"]},\"1802\":{\"h\":\"举例说明\",\"t\":[\"在编译阶段 模板解析 生成如下的 AST 节点属性\",\"el.events = { select: { value: 'selectHandler', }, }; el.nativeEvents = { click: { value: 'clickHandler', }, };\",\"在编译阶段 代码生成 后会生成如下的data数据传入_c(tagName,data,children):\",\"{ // ... on: {\\\"select\\\": selectHandler}, nativeOn: {\\\"click\\\": function($event) { return clickHandler($event) } } // ... }\",\"调用 render 函数 生成虚拟 dom 中，会调用createComponent函数创建占位符 VNode 节点，其中把自定义事件data.on 赋值给了 listeners，把浏览器原生事件 data.nativeOn 赋值给了 data.on，这说明 所有的原生浏览器事件处理是在当前父组件环境中处理的 。\",\"export function createComponent( Ctor: Class<Component> | Function | Object | void, data: ?VNodeData, context: Component, children: ?Array<VNode>, tag?: string ): VNode | Array<VNode> | void { // ... const listeners = data.on; data.on = data.nativeOn; // ... const name = Ctor.options.name || tag; const vnode = new VNode( `vue-component-${Ctor.cid}${name ? `-${name}` : ''}`, data, undefined, undefined, undefined, context, { Ctor, propsData, listeners, tag, children }, asyncFactory ); return vnode; }\",\"而对于自定义事件，会把 listeners 作为 vnode 的 componentOptions 传入，放在 子组件初始化阶段 中处理， 在子组件初始化的时候， 拿到父组件传入的 listeners，然后在执行 initEvents 的过程中，会处理这个 listeners。\",\"合并配置项\",\"// _init if (options && options._isComponent) { initInternalComponent(vm, options); } // initInternalComponent内部 const vnodeComponentOptions = parentVnode.componentOptions; // 占位符组件的配置项 opts.propsData = vnodeComponentOptions.propsData; opts._parentListeners = vnodeComponentOptions.listeners; opts._renderChildren = vnodeComponentOptions.children; opts._componentTag = vnodeComponentOptions.tag;\",\"initEvent 函数\",\"export function initEvents(vm: Component) { vm._events = Object.create(null); vm._hasHookEvent = false; // init parent attached events const listeners = vm.$options._parentListeners; // 父组件注册的事件 if (listeners) { updateComponentListeners(vm, listeners); } } function add(event, fn) { target.$on(event, fn); } function remove(event, fn) { target.$off(event, fn); } export function updateComponentListeners(vm: Component, listeners: Object, oldListeners: ?Object) { target = vm; updateListeners( listeners, oldListeners || {}, add, // $on remove, // $off createOnceHandler, vm ); target = undefined; } export function updateListeners( on: Object, oldOn: Object, add: Function, remove: Function, createOnceHandler: Function, vm: Component ) { let name, def, cur, old, event; for (name in on) { def = cur = on[name]; old = oldOn[name]; event = normalizeEvent(name); /* istanbul ignore if */ if (__WEEX__ && isPlainObject(def)) { cur = def.handler; event.params = def.params; } if (isUndef(cur)) { process.env.NODE_ENV !== 'production' && warn(`Invalid handler for event \\\"${event.name}\\\": got ` + String(cur), vm); } else if (isUndef(old)) { if (isUndef(cur.fns)) { cur = on[name] = createFnInvoker(cur, vm); } if (isTrue(event.once)) { cur = on[name] = createOnceHandler(event.name, cur, event.capture); } add(event.name, cur, event.capture, event.passive, event.params); } else if (cur !== old) { old.fns = cur; on[name] = old; } } for (name in oldOn) { if (isUndef(on[name])) { event = normalizeEvent(name); remove(event.name, oldOn[name], event.capture); } } }\",\"父组件给子组件的注册事件中，把自定义事件传给子组件，在子组件实例化的时候进行初始化；而浏览器原生事件是在父组件中处理。\",\"初始化事件函数initEvents实际上初始化的是 父组件在模板中使用 v-on 或@注册的监听子组件内触发的事件 ，挂载到vm._events(通过调用$on)。\"]},\"1803\":{\"h\":\"4. 初始化 inject\",\"t\":[\"父组件可以使用provide选项给自己的下游子孙组件内注入一些数据，在下游子孙组件中可以使用inject选项来接收这些数据以便为自己所用。另外，这里有一点需要注意：\",\"provide 和 inject 选项绑定的数据不是响应式的。\",\"export function initProvide(vm: Component) { const provide = vm.$options.provide; if (provide) { vm._provided = typeof provide === 'function' ? provide.call(vm) : provide; } } /** 将注入（inject）的属性添加到vm实例上 */ export function initInjections(vm: Component) { const result = resolveInject(vm.$options.inject, vm); if (result) { // 告诉defineReactive函数仅仅是把键值添加到当前实例上而不需要将其转换成响应式 toggleObserving(false); // shouldObserve = false Object.keys(result).forEach((key) => { /* istanbul ignore else */ if (process.env.NODE_ENV !== 'production') { defineReactive(vm, key, result[key], () => { warn( `Avoid mutating an injected value directly since the changes will be ` + `overwritten whenever the provided component re-renders. ` + `injection being mutated: \\\"${key}\\\"`, vm ); }); } else { defineReactive(vm, key, result[key]); } }); toggleObserving(true); } } /** 将inject对象转为key-value值的形式 */ export function resolveInject(inject: any, vm: Component): ?Object { if (inject) { // inject is :any because flow is not smart enough to figure out cached const result = Object.create(null); const keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject); for (let i = 0; i < keys.length; i++) { const key = keys[i]; // #6574 in case the inject object is observed... if (key === '__ob__') continue; const provideKey = inject[key].from; let source = vm; // 按父组件层级依次向上找到provide while (source) { if (source._provided && hasOwn(source._provided, provideKey)) { result[key] = source._provided[provideKey]; break; } source = source.$parent; } // 父组件中没找到provide if (!source) { if ('default' in inject[key]) { const provideDefault = inject[key].default; result[key] = typeof provideDefault === 'function' ? provideDefault.call(vm) : provideDefault; } else if (process.env.NODE_ENV !== 'production') { warn(`Injection \\\"${key}\\\" not found`, vm); } } } return result; } }\",\"初始化 inject 在初始化 provide 之前？ \",\"因为initInjections是将当前组件实例用到的inject挂载为其自身属性，它用到的provide注入的对象在父组件初始化时已经挂载到了vm.__provided，而initProvide是将当前组件实例注入的属性挂载，在子孙组件中使用。\",\"初始化 inject 在初始化 State 之前？ \",\"因为在初始化 State 中，props,methods,data,computed,watch中有可能会用到inject的数据\"]},\"1804\":{\"h\":\"5. 初始化 State\",\"t\":[\"初始化 State 的整体流程很简单，在 options 中传了哪些配置就调用对应的初始化函数进行初始化。\",\"export function initState(vm: Component) { vm._watchers = []; // 用来存储当前实例中所有的watcher实例 const opts = vm.$options; if (opts.props) initProps(vm, opts.props); if (opts.methods) initMethods(vm, opts.methods); if (opts.data) { initData(vm); } else { observe((vm._data = {}), true /* asRootData */); } if (opts.computed) initComputed(vm, opts.computed); if (opts.watch && opts.watch !== nativeWatch) { initWatch(vm, opts.watch); } }\",\"vm._watchers属性，用来存放这个组件内用到的所有状态的依赖，当其中一个状态发生变化时，就会通知到组件，然后由组件内部使用虚拟DOM进行数据比对，从而降低内存开销，提高性能。\",\"initProps\",\"function initProps(vm: Component, propsOptions: Object) { const propsData = vm.$options.propsData || {}; //父组件传入的真实props数据 const props = (vm._props = {}); // 指向vm._props的指针，所有设置到props变量中的属性都会保存到vm._props中 // 指向vm.$options._propKeys的指针，缓存props对象中的key， // 将来更新props时只需遍历vm.$options._propKeys数组即可得到所有props的key。 const keys = (vm.$options._propKeys = []); const isRoot = !vm.$parent; // 当前组件是否为根组件。 // root instance props should be converted if (!isRoot) { toggleObserving(false); } for (const key in propsOptions) { keys.push(key); const value = validateProp(key, propsOptions, propsData, vm); // 校验数据类型是否匹配 /* istanbul ignore else */ if (process.env.NODE_ENV !== 'production') { const hyphenatedKey = hyphenate(key); if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) { warn( `\\\"${hyphenatedKey}\\\" is a reserved attribute and cannot be used as component prop.`, vm ); } defineReactive(props, key, value, () => { if (!isRoot && !isUpdatingChildComponent) { warn( `Avoid mutating a prop directly since the value will be ` + `overwritten whenever the parent component re-renders. ` + `Instead, use a data or computed property based on the prop's ` + `value. Prop being mutated: \\\"${key}\\\"`, vm ); } }); } else { defineReactive(props, key, value); } // static props are already proxied on the component's prototype // during Vue.extend(). We only need to proxy props defined at // instantiation here. // 当使用vm[key]访问数据时，其实访问的是vm._props[key] if (!(key in vm)) { proxy(vm, `_props`, key); } } toggleObserving(true); }\",\"将 props 传递的属性添加到组件实例中(vm._props:{key,value})\",\"类型验证、 默认值处理、 添加响应式\",\"当使用vm[key]访问数据时，其实访问的是vm._props[key]，触发响应式\",\"initMethods \",\"function initMethods(vm: Component, methods: Object) { const props = vm.$options.props; for (const key in methods) { if (process.env.NODE_ENV !== 'production') { if (typeof methods[key] !== 'function') { warn( `Method \\\"${key}\\\" has type \\\"${typeof methods[key]}\\\" in the component definition. ` + `Did you reference the function correctly?`, vm ); } // props和methods重名 if (props && hasOwn(props, key)) { warn(`Method \\\"${key}\\\" has already been defined as a prop.`, vm); } //提示用户方法名命名不规范（以$ | _ 开头） if (key in vm && isReserved(key)) { warn( `Method \\\"${key}\\\" conflicts with an existing Vue instance method. ` + `Avoid defining component methods that start with _ or $.` ); } } vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm); } }\",\"类型检查\",\"将methods中定义的方法添加到组件实例上（vm[method.name]）\",\"initData\",\"function initData(vm: Component) { let data = vm.$options.data; data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {}; if (!isPlainObject(data)) { data = {}; process.env.NODE_ENV !== 'production' && warn( 'data functions should return an object:\\\\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm ); } // proxy data on instance const keys = Object.keys(data); const props = vm.$options.props; const methods = vm.$options.methods; let i = keys.length; while (i--) { const key = keys[i]; // 不能重名 if (process.env.NODE_ENV !== 'production') { if (methods && hasOwn(methods, key)) { warn(`Method \\\"${key}\\\" has already been defined as a data property.`, vm); } } if (props && hasOwn(props, key)) { process.env.NODE_ENV !== 'production' && warn( `The data property \\\"${key}\\\" is already declared as a prop. ` + `Use prop default value instead.`, vm ); } else if (!isReserved(key)) { // 将data对象中key不以_或$开头的属性代理到实例vm上， // 这样，我们就可以通过this.xxx来访问data选项中的xxx数据 proxy(vm, `_data`, key); } } // 添加响应式 observe(data, true /* asRootData */); } export function getData(data: Function, vm: Component): any { // 暂停依赖收集 pushTarget(); try { return data.call(vm, vm); } catch (e) { handleError(e, vm, `data()`); return {}; } finally { popTarget(); } }\",\"类型检查、重名检查\",\"代理 vm 属性，访问this.xxx实际访问的是this._data.xxx\",\"为 data 添加响应式\",\"initComputed\",\"function initComputed(vm: Component, computed: Object) { const watchers = (vm._computedWatchers = Object.create(null)); const isSSR = isServerRendering(); for (const key in computed) { const userDef = computed[key]; const getter = typeof userDef === 'function' ? userDef : userDef.get; if (process.env.NODE_ENV !== 'production' && getter == null) { warn(`Getter is missing for computed property \\\"${key}\\\".`, vm); } if (!isSSR) { // create internal watcher for the computed property. watchers[key] = new Watcher( vm, getter || noop, noop, computedWatcherOptions // lazy ); } if (!(key in vm)) { defineComputed(vm, key, userDef); } // 重名问题 else if (process.env.NODE_ENV !== 'production') { if (key in vm.$data) { warn(`The computed property \\\"${key}\\\" is already defined in data.`, vm); } else if (vm.$options.props && key in vm.$options.props) { warn(`The computed property \\\"${key}\\\" is already defined as a prop.`, vm); } } } } // 描述器模板 const sharedPropertyDefinition = { enumerable: true, configurable: true, get: noop, set: noop, }; export function defineComputed(target: any, key: string, userDef: Object | Function) { const shouldCache = !isServerRendering(); //非服务端渲染时应缓存 if (typeof userDef === 'function') { // 仅读取 sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef); sharedPropertyDefinition.set = noop; } else { // 读取和设置 sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop; sharedPropertyDefinition.set = userDef.set || noop; } if (process.env.NODE_ENV !== 'production' && sharedPropertyDefinition.set === noop) { sharedPropertyDefinition.set = function () { warn(`Computed property \\\"${key}\\\" was assigned to but it has no setter.`, this); }; } // 将计算属性添加到vm上 Object.defineProperty(target, key, sharedPropertyDefinition); } /** 完成计算属性的缓存功能 */ function createComputedGetter(key) { return function computedGetter() { const watcher = this._computedWatchers && this._computedWatchers[key]; if (watcher) { if (watcher.dirty) { watcher.evaluate(); // 重新收集依赖并将watcher的dirty变为false } if (Dep.target) { watcher.depend(); } return watcher.value; } }; } function createGetterInvoker(fn) { return function computedGetter() { return fn.call(this, this); }; }\",\"重名检查\",\"为计算属性的getter创建watcher\",\"将计算属性添加到 vm 上\",\"完成计算属性的缓存功能\",\"initWatch \",\"function initWatch(vm: Component, watch: Object) { for (const key in watch) { const handler = watch[key]; if (Array.isArray(handler)) { for (let i = 0; i < handler.length; i++) { createWatcher(vm, key, handler[i]); } } else { createWatcher(vm, key, handler); } } } function createWatcher(vm: Component, expOrFn: string | Function, handler: any, options?: Object) { // 对象写法 if (isPlainObject(handler)) { options = handler; handler = handler.handler; } // 字符串写法 if (typeof handler === 'string') { handler = vm[handler]; } return vm.$watch(expOrFn, handler, options); }\",\"这 5 个选项中的所有属性最终都会被绑定到实例上，这也就是我们为什么可以使用this.xxx来访问任意属性。\",\"除此之外还有this._props、this._data、this._watchers\"]},\"1805\":{\"h\":\"6. 模板编译\",\"t\":[\"img\",\"Vue源码构建有两种版本：完整版本和只包含运行时版本。模板编译阶段只存在于完整版中，在只包含运行时版本中不存在该阶段，这是因为在只包含运行时版本中，当使用vue-loader或vueify时，*.vue文件内部的模板会在构建时预编译成渲染函数，所以是不需要编译的，从而不存在模板编译阶段。\",\"模板编译发生在 完整版本 中调用$mount时：\",\"const mount = Vue.prototype.$mount; // 原$mount的备份 Vue.prototype.$mount = function (el?: string | Element, hydrating?: boolean): Component { // 根据传入的el参数获取DOM元素 el = el && query(el); /* istanbul ignore if */ if (el === document.body || el === document.documentElement) { process.env.NODE_ENV !== 'production' && warn(`Do not mount Vue to <html> or <body> - mount to normal elements instead.`); return this; } // 在用户没有手写render函数的情况下获取传入的模板template const options = this.$options; // resolve template/el and convert to render function if (!options.render) { let template = options.template; if (template) { // 可以使用id选择器将页面中已存在的一个DOM元素作为模板 if (typeof template === 'string') { // id选择器 if (template.charAt(0) === '#') { template = idToTemplate(template); /* istanbul ignore if */ if (process.env.NODE_ENV !== 'production' && !template) { warn(`Template element not found or is empty: ${options.template}`, this); } } } // dom元素 else if (template.nodeType) { template = template.innerHTML; } else { if (process.env.NODE_ENV !== 'production') { warn('invalid template option:' + template, this); } return this; } } else if (el) { template = getOuterHTML(el); } if (template) { /* istanbul ignore if */ if (process.env.NODE_ENV !== 'production' && config.performance && mark) { mark('compile'); } // 将获取到的template编译成render函数 const { render, staticRenderFns } = compileToFunctions( template, { outputSourceRange: process.env.NODE_ENV !== 'production', shouldDecodeNewlines, shouldDecodeNewlinesForHref, delimiters: options.delimiters, comments: options.comments, }, this ); options.render = render; options.staticRenderFns = staticRenderFns; /* istanbul ignore if */ if (process.env.NODE_ENV !== 'production' && config.performance && mark) { mark('compile end'); measure(`vue ${this._name} compile`, 'compile', 'compile end'); } } } // 调用原mount return mount.call(this, el, hydrating); };\",\"调用compileToFunctions将配置项中的template编译成render函数\",\"将render挂载到options.render，调用原mount\"]},\"1806\":{\"h\":\"7. 模板挂载\",\"t\":[\"模板编译阶段完成之后，接下来就进入了挂载阶段，从官方文档给出的生命周期流程图中可以看到，挂载阶段所做的主要工作是创建Vue实例并用其替换el选项对应的DOM元素，同时还要开启对模板中数据（状态）的监控，当数据（状态）发生变化时通知其依赖进行视图更新。\",\"img\",\"$mount\",\"Vue.prototype.$mount = function (el, hydrating) { el = el && inBrowser ? query(el) : undefined; return mountComponent(this, el, hydrating); }; export function mountComponent(vm, el, hydrating) { vm.$el = el; if (!vm.$options.render) { vm.$options.render = createEmptyVNode; // 创建一个注释类型的VNode节点 } callHook(vm, 'beforeMount'); // 触发beforeMount生命周期钩子函数 let updateComponent; // 将最新的模板内容渲染到视图页面（dom更新） updateComponent = () => { vm._update(vm._render(), hydrating); }; new Watcher( vm, updateComponent, noop, { before() { if (vm._isMounted) { callHook(vm, 'beforeUpdate'); } }, }, true /* isRenderWatcher */ ); hydrating = false; if (vm.$vnode == null) { vm._isMounted = true; callHook(vm, 'mounted'); // 调用挂载完成的生命周期钩子函数mounted } return vm; }\",\"vm._render()会调用render函数生成最新的VNode，而vm._update中会调用vm.__patch__实现新旧 VNode 的对比并更新 DOM 节点，完成一次渲染。（ 创建 vm.$el 并用其替换 el ）\",\"创建一个Watcher实例，将定义好的updateComponent函数传入。创建时会执行函数，从而触发函数内数据的getter方法，而在getter方法中会将watcher实例添加到该数据的依赖列表中，当该数据发生变化时就会通知依赖列表中所有的依赖（包括此watcher实例），依赖接收到通知后就会重新执行updateComponent函数完成新一轮渲染。\",\"isRenderWatcher为 true，这会将此watcher赋值给vm._watcher_\"]},\"1807\":{\"h\":\"8. 销毁阶段\",\"t\":[\"接下来到了生命周期流程的最后一个阶段——销毁阶段。从官方文档给出的生命周期流程图中可以看到，当调用了vm.$destroy方法，Vue实例就进入了销毁阶段，该阶段所做的主要工作是 将当前的 Vue 实例从其父级实例中删除，取消当前实例上的所有依赖追踪并且移除实例上的所有事件监听器 。\",\"img\",\"$destroy\",\" Vue.prototype.$destroy = function () { const vm: Component = this; if (vm._isBeingDestroyed) { return; } callHook(vm, \\\"beforeDestroy\\\"); // 调用beforeDestroy的钩子函数 vm._isBeingDestroyed = true; // 将当前的Vue实例从其父级实例中删除 const parent = vm.$parent; if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) { remove(parent.$children, vm); } // teardown watchers if (vm._watcher) { vm._watcher.teardown(); // 将渲染实例从其他数据的依赖列表中删除 } let i = vm._watchers.length; while (i--) { vm._watchers[i].teardown(); // 移除实例内数据对其他数据的依赖 } // remove reference from data ob // frozen object may not have observer. // 组件实例的数量 if (vm._data.__ob__) { vm._data.__ob__.vmCount--; } // call the last hook... vm._isDestroyed = true; // 将实例的VNode树设置为null vm.__patch__(vm._vnode, null); // 调用destroyed的钩子函数 callHook(vm, \\\"destroyed\\\"); // 移除实例上的所有事件监听器 vm.$off(); // remove __vue__ reference if (vm.$el) { vm.$el.__vue__ = null; } // release circular reference (#6759) if (vm.$vnode) { vm.$vnode.parent = null; } }; }\"]},\"1808\":{\"h\":\"五、实例方法\",\"t\":[\"实例方法是将各种自定义方法挂载到Vue的原型对象上，Vue..prototype.$xxx = xxx\"]},\"1809\":{\"h\":\"1. 数据相关\",\"t\":[\"与数据相关的实例方法有 3 个，分别是vm.$set、vm.$delete和vm.$watch。它们是在stateMixin函数中挂载到Vue原型上的。\"]},\"1810\":{\"h\":\"vm.$watch\",\"t\":[\"Vue.prototype.$watch = function (expOrFn, cb, options) { const vm: Component = this; if (isPlainObject(cb)) { // cb中包含回调和配置，拆分出来再调用$watch return createWatcher(vm, expOrFn, cb, options); } options = options || {}; options.user = true; const watcher = new Watcher(vm, expOrFn, cb, options); if (options.immediate) { cb.call(vm, watcher.value); } return function unwatchFn() { watcher.teardown(); }; };\",\"统一不同的传参情况，解析出回调和配置，实例化watcher\",\"传入immediate配置，立即调用\",\"返回watcher的卸载函数\"]},\"1811\":{\"h\":\"\"},\"1812\":{\"h\":\"\"},\"1813\":{\"h\":\"2. 事件相关\",\"t\":[\"与事件相关的实例方法有 4 个，分别是vm.$on、vm.$emit、vm.$off和vm.$once。它们是在eventsMixin函数中挂载到Vue原型上的。\",\"所有的方法都围绕着vm._events\"]},\"1814\":{\"h\":\"vm.$on\",\"t\":[\"Vue.prototype.$on = function (event, fn) { const vm: Component = this; if (Array.isArray(event)) { for (let i = 0, l = event.length; i < l; i++) { this.$on(event[i], fn); } } else { (vm._events[event] || (vm._events[event] = [])).push(fn); } return vm; };\",\"将定义的事件和回调存入vm._events\"]},\"1815\":{\"h\":\"vm.$emit\",\"t\":[\"Vue.prototype.$emit = function (event: string): Component { const vm: Component = this let cbs = vm._events[event] if (cbs) { cbs = cbs.length > 1 ? toArray(cbs) : cbs const args = toArray(arguments, 1) for (let i = 0, l = cbs.length; i < l; i++) { try { cbs[i].apply(vm, args) } catch (e) { handleError(e, vm, `event handler for \\\"${event}\\\"`) } } } return vm } }\",\"取出vm._event中对应事件名的回调函数并执行\"]},\"1816\":{\"h\":\"vm.$off\",\"t\":[\"Vue.prototype.$off = function (event, fn) { const vm: Component = this; // 不传参移除所有事件 if (!arguments.length) { vm._events = Object.create(null); return vm; } // array of events if (Array.isArray(event)) { for (let i = 0, l = event.length; i < l; i++) { this.$off(event[i], fn); } return vm; } // specific event const cbs = vm._events[event]; if (!cbs) { return vm; } if (!fn) { vm._events[event] = null; return vm; } if (fn) { // specific handler let cb; let i = cbs.length; while (i--) { cb = cbs[i]; if (cb === fn || cb.fn === fn) { cbs.splice(i, 1); break; } } } return vm; };\",\"根据传参的不同作不同的处理：\",\"不传参，移除所有事件\"]},\"1817\":{\"h\":\"vm.$once\",\"t\":[\"监听一个自定义事件，但是只触发一次。一旦触发之后，监听器就会被移除。\",\"Vue.prototype.$once = function (event, fn) { const vm: Component = this; function on() { vm.$off(event, on); fn.apply(vm, arguments); } on.fn = fn; vm.$on(event, on); return vm; };\",\"注册一个事件，在事件回调中卸载事件并执行回调函数\"]},\"1818\":{\"h\":\"3. 生命周期相关\",\"t\":[\"与生命周期相关的实例方法有 4 个，分别是vm.$mount、vm.$forceUpdate、vm.$nextTick和vm.$destory。其中，$forceUpdate和$destroy方法是在lifecycleMixin函数中挂载到Vue原型上的，$nextTick方法是在renderMixin函数中挂载到Vue原型上的，而$mount方法是在跨平台的代码中挂载到Vue原型上的。\"]},\"1819\":{\"h\":\"\"},\"1820\":{\"h\":\"\"},\"1821\":{\"h\":\"vm.$forceUpdate\",\"t\":[\"迫使 Vue 实例重新渲染。也就是说，当调用了该方法，当前实例会立即 重新渲染 。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。\",\"谈到重新渲染，理所当然会想到watcher渲染实例的update函数，其调用时会重新渲染组件\",\"Vue.prototype.$forceUpdate = function () { const vm: Component = this; if (vm._watcher) { vm._watcher.update(); } };\"]},\"1822\":{\"h\":\"vm.$nextTick\",\"t\":[\"将回调延迟到下次 DOM 更新循环之后执行。\",\"// 检测浏览器是否原生支持 Promise if (typeof Promise !== 'undefined' && isNative(Promise)) { const p = Promise.resolve(); timerFunc = () => { p.then(flushCallbacks); if (isIOS) setTimeout(noop); }; isUsingMicroTask = true; // 是否为微任务 } // 检测浏览器是否原生支持MutationObserver else if ( !isIE && typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) || MutationObserver.toString() === '[object MutationObserverConstructor]') ) { let counter = 1; const observer = new MutationObserver(flushCallbacks); const textNode = document.createTextNode(String(counter)); observer.observe(textNode, { characterData: true, }); timerFunc = () => { counter = (counter + 1) % 2; textNode.data = String(counter); }; isUsingMicroTask = true; } // 检测是否支持原生 setImmediate(高版本 IE 和 Edge 支持) else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) { timerFunc = () => { setImmediate(flushCallbacks); }; } // 都不支持直接使用setTimeout else { timerFunc = () => { setTimeout(flushCallbacks, 0); }; }\",\"根据不同的环境以不同的方式执行回调\",\"export function nextTick(cb?: Function, ctx?: Object) { let _resolve; // 将回调函数推入回调队列 callbacks.push(() => { if (cb) { try { cb.call(ctx); } catch (e) { handleError(e, ctx, 'nextTick'); } } else if (_resolve) { _resolve(ctx); } }); // 如果异步锁未锁上，锁上异步锁，调用异步函数，准备等同步函数执行完后，就开始执行回调函数队列 if (!pending) { pending = true; timerFunc(); } // 如果没有提供回调，并且支持Promise，返回一个Promise if (!cb && typeof Promise !== 'undefined') { return new Promise((resolve) => { _resolve = resolve; }); } } const callbacks = []; let pending = false; function flushCallbacks() { pending = false; // 重置异步锁 const copies = callbacks.slice(0); callbacks.length = 0; // 清空回调队列 // 执行回调函数队列 for (let i = 0; i < copies.length; i++) { copies[i](); } }\",\"异步锁是为了每次事件循环中只执行一次flushCallbacks来清空回调队列\"]},\"1823\":{\"h\":\"六、全局 API\"},\"1824\":{\"h\":\"1. vue.use\",\"t\":[\"参数：\",\"{Object | Function} plugin\",\"用法：\",\"安装 Vue.js 插件。如果插件是一个对象，必须提供 install 方法。如果插件是一个函数，它会被作为 install 方法。install 方法调用时，会将 Vue 作为参数传入。\",\"该方法需要在调用 new Vue() 之前被调用。\",\"当 install 方法被同一个插件多次调用，插件将只会被安装一次 。\",\"/** 添加Vue.use全局api */ export function initUse(Vue: GlobalAPI) { Vue.use = function (plugin: Function | Object) { const installedPlugins = this._installedPlugins || (this._installedPlugins = []); //已安装过此插件 if (installedPlugins.indexOf(plugin) > -1) { return this; } // vue.use除插件名外的其他参数将作为插件运行的参数 const args = toArray(arguments, 1); args.unshift(this); // 将Vue作为传入的第一个参数 if (typeof plugin.install === 'function') { plugin.install.apply(plugin, args); } else if (typeof plugin === 'function') { plugin.apply(null, args); } installedPlugins.push(plugin); return this; }; }\"]},\"1825\":{\"h\":\"2. vue.extend\",\"t\":[\"参数：\",\"{Object} options\",\"用法：\",\"使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。\",\"data 选项是特例，需要注意 - 在 Vue.extend() 中它必须是函数\",\"// 创建构造器 var Profile = Vue.extend({ template: '<p>{{firstName}} {{lastName}} aka {{alias}}</p>', data: function () { return { firstName: 'Walter', lastName: 'White', alias: 'Heisenberg', }; }, }); // 创建 Profile 实例，并挂载到一个元素上。 new Profile().$mount('#mount-point');\",\"/** * 使用基础 Vue 构造器，创建一个“子类”，作为组件实例的构造函数 */ Vue.extend = function (extendOptions: Object): Function { extendOptions = extendOptions || {}; const Super = this; const SuperId = Super.cid; // 缓存池，用于缓存创建出来的类 const cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {}); if (cachedCtors[SuperId]) { return cachedCtors[SuperId]; } // 获取到传入的选项参数中的name字段，并且在开发环境下校验name字段是否合法 const name = extendOptions.name || Super.options.name; if (process.env.NODE_ENV !== 'production' && name) { validateComponentName(name); } // 将要继承基础Vue类的子类 const Sub = function VueComponent(options) { this._init(options); }; Sub.prototype = Object.create(Super.prototype); //子类的原型指向vue的原型对象 Sub.prototype.constructor = Sub; Sub.cid = cid++; //唯一标识 Sub.options = mergeOptions(Super.options, extendOptions); Sub['super'] = Super; if (Sub.options.props) { initProps(Sub); } if (Sub.options.computed) { initComputed(Sub); } // 将父类中的一些属性复制到子类中 Sub.extend = Super.extend; Sub.mixin = Super.mixin; Sub.use = Super.use; //'component','directive','filter' ASSET_TYPES.forEach(function (type) { Sub[type] = Super[type]; }); // enable recursive self-lookup if (name) { Sub.options.components[name] = Sub; } // 给子类新增三个独有的属性 Sub.superOptions = Super.options; // 父类Vue的配置项 Sub.extendOptions = extendOptions; // 子类的配置项 Sub.sealedOptions = extend({}, Sub.options); // 合并之后的配置项 // 缓存构造器 cachedCtors[SuperId] = Sub; return Sub; };\",\"initComputed将组件定义的计算属性挂载到组件构造函数的 原型对象 上（生成子类阶段，未实例化）\",\"可以通过vm[computedName]访问计算属性\",\"我们编写的所有配置文件（data、props 等）皆用于创建组件的构造函数，即作为Vue.extend调用的参数，而生成组件实例是在模板挂载时发生的，VueComponent(options)中传入的options格式如下所示：\",\"const options: InternalComponentOptions = { _isComponent: true, //是否为组件 _parentVnode: vnode, // 组件占位符 VNode parent, // 父组件实例 };\"]},\"1826\":{\"h\":\"3. vue.mixin\",\"t\":[\"参数：\",\"{Object} mixin\",\"用法：\",\"全局注册一个混入，影响注册之后所有创建的每个 Vue 实例。插件作者可以使用混入，向组件注入自定义的行为。不推荐在应用代码中使用。\",\"Vue.mixin = function (mixin: Object) { this.options = mergeOptions(this.options, mixin); return this; };\"]},\"1827\":{\"h\":\"4. Vue.observable( object )\",\"t\":[\"参数：\",\"{Object} object\",\"用法：\",\"让一个对象可响应。Vue 内部会用它来处理 data 函数返回的对象。\",\"返回的对象可以直接用于渲染函数和计算属性内，并且会在发生变更时触发相应的更新。也可以作为最小化的跨组件状态存储器，用于简单的场景：\",\"const state = Vue.observable({ count: 0 }); const Demo = { render(h) { return h( 'button', { on: { click: () => { state.count++; }, }, }, `count is: ${state.count}` ); }, };\",\"Vue.observable = (obj) => { observe(obj); return obj; };\"]},\"1828\":{\"h\":\"5. directive、filter、component\",\"t\":[\"export const ASSET_TYPES = ['component', 'directive', 'filter']; Vue.options = Object.create(null); ASSET_TYPES.forEach((type) => { Vue.options[type + 's'] = Object.create(null); }); ASSET_TYPES.forEach((type) => { Vue[type] = function (id, definition) { if (!definition) { return this.options[type + 's'][id]; } else { if (process.env.NODE_ENV !== 'production' && type === 'component') { validateComponentName(id); } if (type === 'component' && isPlainObject(definition)) { definition.name = definition.name || id; definition = this.options._base.extend(definition); } if (type === 'directive' && typeof definition === 'function') { definition = { bind: definition, update: definition }; } this.options[type + 's'][id] = definition; return definition; } }; });\",\"在Vue类上创建了options属性，其属性值为一个空对象，并且在options属性中添加了directives、filters、components属性，其值也是空对象，分别用来存放指令、过滤器和注册的组件。\",\"如果没有传入definition参数，表示为获取操作，根据id来读取相应的对象。\",\"如果传入了definition参数，表示为注册操作，对definition处理之后保存在this.options[type]中。\"]},\"1829\":{\"c\":[\"源码解析\"]},\"1830\":{\"c\":[\"vue\"]},\"1831\":{\"h\":\"Vue2源码（功能篇）\"},\"1832\":{\"h\":\"一、组件挂载\",\"t\":[\"image-20230922182344463\"]},\"1833\":{\"h\":\"二、生成 vnode\",\"t\":[\"_render函数的总流程大致如下：\",\"render2.jpg\"]},\"1834\":{\"h\":\"1. 组件占位符 VNode 数据结构\",\"t\":[\"假设组件标签如下\",\"<HelloWorld id=\\\"js_hello\\\" :flag=\\\"flag\\\" msg=\\\"Welcome to Your Vue.js App\\\" />\",\"{ // 组件占位符 VNode 特有的属性 componentInstance: undefined, // 子组件的 Vue 实例，子组件Vue实例创建完成后赋值 componentOptions: { // 组件占位符 VNode 特有的属性 propsData: { // 根据子组件定义的 props 属性，获取传入子组件的值 flag: 1, msg: \\\"Welcome to Your Vue.js App\\\" } listeners: undefined, // 自定义事件 tag: 'HelloWorld', // 组件名 children: undefined, // 插槽内容 Ctor: ƒ // 构建子组件 Vue实例 的构造函数 }, context: {…}, // 父组件的 Vue实例, data: { // 组件标签上的属性或者 render 函数的第二个参数 attrs: { // 组件标签上的属性，不包含子组件中定义的 props 属性 id: 'js_hello' }, on: undefined, // 有 .native 修饰符的事件 hook: {…} // 钩子函数，在 patch 的不同时机触发 }, elm: DOM, // 组件根元素，在 patch 过程创建 tag: \\\"vue-component-2-HelloWorld\\\" }\",\"组件占位符 VNode 里面存储子组件 Vue 实例的构造函数、以及存储传给子组件的数据。他的作用其实就是一个占位符。当子组件的 DOM 创建完成，会将 DOM 赋值给组件占位符 VNode 的elm 属性。而渲染时使用的就是这个elm。\",\"image-20230922172952626\",\"vm.$vnode = parentVnode组件实例的$vnode属性指向组件的占位符 VNode\",\"vm.$options._parentVnode = parentVnode;\",\"vnode.parent = parentVnode组件渲染 VNode 的parent属性指向组件的占位符 VNode\"]},\"1835\":{\"h\":\"2. 渲染 VNode 数据结构\",\"t\":[\"假设组件内容如下\",\"<template> <div class=\\\"hello\\\"> <h1>{{ msg }}</h1> </div> </template>\",\"{ children: [{ // 子元素 context: {}, data: { // 组件标签上的属性或者 render 函数的第二个参数 staticClass: 'hello', }, elm: undefined, // 根的 DOM 元素 parent: undefined, // 组件的组件占位符VNode，只有组件 根VNode 才有 tag: 'h1', children:[{ text: \\\"Welcome to Your Vue.js App\\\", context: undefined, data: undefined, elm: undefined, parent: undefined, tag: undefined }] }], context: {}, // 当前组件的Vue实例 data: { // 组件标签上的属性或者 render 函数的第二个参数 staticClass: 'hello', }, elm: undefined, // 根的 DOM 元素 parent: {}, // 组件的组件占位符VNode，只有组件 根VNode 才有 tag: 'div' }\",\"组件占位符 VNode 和渲染 VNode 的区别:\",\"组件占位符 VNode，是一个占位符；描述的是 组件标签 。存储传递给子组件的信息componentOptions\",\"渲染 VNode，描述普通标签。存储标签信息。\",\"vue 中将template编译为render函数并挂载到组件实例的$options中，其中render函数使用了如下方式进行包裹以便在模板中可以直接访问组件实例的属性和方法。\",\"with(this){return ${code}}\"]},\"1836\":{\"h\":\"三、data\",\"t\":[\"在组件实例化（ new vue | vm ）时会进行组件的初始化（ _init ），初始化阶段操作的主要对象是vm.$options，即用户自定义的配置对象，会将 data、props、computed、watch 设置为 响应式对象 ，另外为了方便用户的操作，将配置项中的部分内容挂载到组件实例上。\",\"vm._data\",\"vm._props\",\"vm._computedWatchers\",\"vm[key]=methods[key]\",\"observer.jpg\",\"data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {}; proxy(vm, `_data`, key); // 代理到组件属性 observe(data, true /* asRootData */); // 添加响应式 const dataDef = {}; dataDef.get = function () { return this._data; }; Object.defineProperty(Vue.prototype, '$data', dataDef);\",\"在 Vue 的设计中，_ 开头的属性被认为是私有的，可能会修改，而 $ 开头的属性则被认为是内部的，可以被外部调用但不应被外部赋值。为了保护 _data，不让外部直接操作，所以通过 Object.defineProperty 来创建 $data，只允许获取 _data，而无法设置它。\",\"image-20240316094656477\"]},\"1837\":{\"h\":\"四、props\"},\"1838\":{\"h\":\"1. 子组件获取传入的 数据\",\"t\":[\"在执行父组件的render函数时，会为子组件创建组件占位符 VNode，此时会根据子组件中props的定义从组件标签的属性中匹配传入的数据，并存储在组件占位符 VNode 中。\",\"image-20230922184232782\",\"const value = validateProp(key, propsOptions, propsData, vm); defineReactive(props, key, value); proxy(vm, `_props`, key); const propsDef = {}; propsDef.get = function () { return this._props; }; Object.defineProperty(Vue.prototype, '$props', propsDef);\",\"image-20240316153703286\"]},\"1839\":{\"h\":\"2. props 的初始化\",\"t\":[\"initprops.jpg\"]},\"1840\":{\"h\":\"3. props 更新\",\"t\":[\"初始化子组件的 Vue 实例时，通过Object.defineProperty给传入的prop数据添加拦截，如果传入的是一个对象类型，由于父组件已经对对象的属性添加了拦截，所以不会再次在子组件添加拦截。\",\"和data的区别就是，data中的属性如果不是基本数据类型会为这个属性创建Observer实例；而props的数据不会；有一种情况除外，就是prop默认值是对象类型，会给这个默认值创建Observer实例。\",\"注意 ：当父组件传递给子组件的 prop 是一个固定值而不是绑定值时，例如 msg=\\\"hello\\\"，Vue 并不会检测到这个 prop 数据的变化。\",\"Vue 的响应式系统只会追踪和响应通过 数据绑定 传递的 prop 数据的变化。对于直接传递的固定值，Vue 认为它是静态的，不会进行追踪和更新。\",\"接下来从两个方面分别说一下依赖收集和派发更新\",\"传给子组件的是基本数据类型\",\"传给子组件的是对象\"]},\"1841\":{\"h\":\"传给子组件的是基本数据类型\",\"t\":[\"父组件创建 VNode 时，收集当前 Render Watcher 到响应式属性的dep.subs中。创建 子组件 VNode 时，也会收集当前 Render Watcher 到prop数据的dep.subs中。\",\"当父组件修改数据时，触发父组件的视图更新，获取最新的prop数据；在创建父组件 DOM 树的过程中，赋值给子组件的vm._props；从而被prop数据的setter捕获，触发子组件视图更新。\",\"也就是说，如果传给子组件的是基本数据类型，他们的更新原理是父组件驱动子组件更新\"]},\"1842\":{\"h\":\"传给子组件的是对象\",\"t\":[\"父组件创建 VNode 时，收集当前 Render Watcher 到响应式属性的dep.subs中。创建 子组件 VNode 时，也会收集当前 Render Watcher 到prop数据的dep.subs中。和上面不同的是，当子组件使用的是prop数据的内部属性时，会将 Render Watcher 添加到父组件对应内部属性的dep.subs中。\",\"当父组件修改属性的内部属性时，不会触发父组件更新，因为父组件没有使用这个内部属性，而使用的是整个对象。但是会触发子组件更新，因为子组件的 Render Watcher 被收集到了这个内部属性的dep.subs里面了。\",\"也就是说如果传给子组件的是一个对象，并且子组件使用了这个内部属性，子组件的 Render Watcher 会被这个内部属性的 dep.subs 收集\",\"如果父组件直接修改这个对象的引用，则和传入基本数据类型的更新流程一致。\"]},\"1843\":{\"h\":\"五、computed\"},\"1844\":{\"h\":\"1. 初始化\"},\"1845\":{\"h\":\"组件 的初始化\",\"t\":[\"对于组件computed的初始化，就是在创建组件构造函数（ vue.extend ）时，通过Object.defineProperty方法将组件中所有计算属性添加到 组件构造函数的原型对象 上，并设置存取描述符。\",\"与data和 props不同，同一个构造函数不同的组件实例之间computed属性是不会变的，所以将computed定义在了构造函数的原型对象上，而data和props则定义在具体的组件实例上。\",\"当创建组件实例时，为每个计算属性创建一个Computed Watcher，并将计算属性复制给Watcher实例的getter属性（ initComputed ）；并且开发环境下会判断computed中的key和data、props中的key是否重复。\",\"将所有创建的watcher放在vm._computedWatchers\"]},\"1846\":{\"h\":\"根实例 的初始化\",\"t\":[\"对于根实例computed的初始化，就比较简单了，就是获取计算属性，并给computed的每个key创建一个Computed Watcher，通过Object.defineProperty方法将所有计算属性挂载到组件实例上，并设置存取描述符。\"]},\"1847\":{\"h\":\"和 的区别\",\"t\":[\"// Watcher类内部代码 this.lazy = !!options.lazy; // ... this.dirty = this.lazy; // ... this.value = this.lazy ? undefined : this.get();\",\"Computed Watcher的lazy为true，并且dirty也为true；\",\"因为 lazy为true，所以在创建Computed Watcher过程中并不会执行this.get() 方法；也就不会立即获取计算属性的返回值。\",\"image-20240316161744870\"]},\"1848\":{\"h\":\"2. 响应\"},\"1849\":{\"h\":\"依赖收集\",\"t\":[\"function createComputedGetter(key) { return function computedGetter() { const watcher = this._computedWatchers && this._computedWatchers[key]; if (watcher) { // 只做一次依赖收集 if (watcher.dirty) { // dirty变为false，执行定义的get函数，收集依赖 watcher.evaluate(); } if (Dep.target) { // 将render watcher 添加到依赖属性的dep中，当依赖属性修改后，通过render watcher的get方法去触发组件更新 watcher.depend(); } // 之前获取的计算属性的值保存在watcher.value中 return watcher.value; } }; }\",\"将Computed Watcher添加到响应式变量的dep.subs中，第一次获取计算属性时，执行上述函数收集依赖（当响应式数据变化时可以更新计算属性）\",\"将组件的Render Watcher添加到该计算属性所有依赖属性的dep.subs中（当响应式数据变化时可以更新当前组件）\"]},\"1850\":{\"h\":\"通知更新\",\"t\":[\"当计算属性依赖的响应式属性修改时，会触发依赖属性的setter方法通知所有Watcher更新，其中就包括Computed Watcher和Render Watcher；调用Computed Watcher的update方法将dirty设为true。而Render Watcher会执行Watcher实例的run方法，从而重新执行组件的render函数，获取计算属性的值，从而更新计算属性的返回值并返回。\"]},\"1851\":{\"h\":\"六、watch\"},\"1852\":{\"h\":\"1. 初始化\",\"t\":[\"watch的初始化过程最终目的就是给每个watch创建一个 User Watcher，在创建过程中会对被监听的属性做依赖收集。\"]},\"1853\":{\"h\":\"2. 响应\"},\"1854\":{\"h\":\"依赖收集\",\"t\":[\"在初始化过程中会为每个watch创建一个User Watcher，而创建过程中会对被监听属性做依赖收集\",\"const watcher = new Watcher(vm, expOrFn, cb, options); // vm 组件实例 // expOrFn 被监听的属性名（xxx、'xxx.yyy'） // cb 回调函数 // options { user: true, deep: [自定义配置项], async: [自定义配置项] }\",\"实例化一个Watcher时会判断expOrFn参数的数据类型，对于User Watcher而言，expOrFn就是被监听的属性名，是一个字符串，所以会执行parsePath方法，根据.将字符串切割成字符串数组，并返回一个函数，这个函数会赋值给User Watcher的getter属性；函数内部会依次获取数组中所有元素对应的属性值并返回该属性值。\",\"假设被监听的属性名是a.b.c，则此函数会依次获取this.a、this.a.b、this.a.b.c的属性值，从而触发被监听属性的getter方法，将User Watcher添加到此属性的dep.subs中。\"]},\"1855\":{\"h\":\"通知更新\",\"t\":[\"当修改被监听属性的属性值时，触发属性的setter，通知 dep.subs中所有 Watcher 更新，执行watcher.update方法\",\"run () { if (this.active) { const value = this.get() if ( value !== this.value || isObject(value) || this.deep ) { // 当添加自定义 watcher 的时候能在回调函数的参数中拿到新旧值的原因 const oldValue = this.value this.value = value if (this.user) { try { this.cb.call(this.vm, value, oldValue) } catch (e) { handleError(e, this.vm, `callback for watcher \\\"${this.expression}\\\"`) } } else { this.cb.call(this.vm, value, oldValue) } } } }\",\"对于User Watcher的run方法，首先会调用this.get()重新让被监听属性做依赖收集，并获取最新值；如果最新值与旧老值不相等，调用回调函数，并将新旧值作为参数传入。\"]},\"1856\":{\"h\":\"3. Computed 和 watch 的区别\"},\"1857\":{\"h\":\"computed\",\"t\":[\"本质是一个具备缓存的 Watcher，只有依赖属性发生变化时才会更新视图，而且结果是在下次使用时获取\",\"不支持异步，当computed内有异步操作时无效，无法监听数据的变化\",\"当需要进行数值计算，并且依赖于其它数据时，应该使用computed，因为可以利用computed的缓存特性，避免每次获取值时都要重新计算\"]},\"1858\":{\"h\":\"watch\",\"t\":[\"没有缓存性，更多的是观察的作用，某些数据变化时会执行回调\",\"watch 支持异步；可以设置异步返回前的中间状态\",\"可以在初始化时执行回调\",\"可以深度监听对象属性\",\"可以设置回调的执行时机，通过设置sync属性可以在当前队列执行，默认是下一队列\",\"通过vm.$watch注册的监听，会返回一个unWatch函数，调用该函数可以取消监听\"]},\"1859\":{\"h\":\"4. computed 的响应原理\",\"t\":[\"在初始化阶段，会为每个计算属性创建一个Computed Watcher，通过Object.defineProperty将所有计算属性添加到组件实例 / 组件构造函数的原型对象上，并为所有计算属性添加存取描述符。\",\"当获取计算属性时，触发计算属性的getter，计算computed的值，并将dirty置为false，这样做的目的是再次获取计算属性时直接返回缓存值；在计算computed值的过程中会将Computed Watcher、Render Watcher添加到依赖属性的Dep中\",\"当依赖属性发生变化会触发Computed Watcher的更新，将dirty置为true，在下次获取计算属性时，会重新计算computed的值。也会触发当前Render Watcher的更新，从而获取最新的计算属性的值\"]},\"1860\":{\"h\":\"5. watch 的响应原理\",\"t\":[\"在初始化阶段，会为每个watch创建一个User Watcher，如果watch的immediate为true，会马上执行一次回调；创建User Watcher过程中会获取一次被监听属性的值，从而触发被监听属性的getter方法，将User Watcher添加到被监听属性的Dep实例中。\",\"当被监听属性发生改变时，通知User Watcher更新，如果watch的sync为true，会马上执行watch的回调；否则会将User Watcher的update方法通过nextTick放到缓存队列中，在下一个的事件循环中，会重新获取被监听属性的属性值，并判断新旧值是否相等、是否设置了deep为true、被监听属性是否是对象类型，如果成立就执行回调。\"]},\"1861\":{\"h\":\"七、methods\",\"t\":[\"initMethods时直接遍历所有定义的 method，将其挂载到组件实例上。\",\"vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\",\"image-20240316154022019\"]},\"1862\":{\"h\":\"八、patch\",\"t\":[\"当组件挂载时，创建Render Watcher，执行render函数获取组件的 渲染 VNode ；然后执行_update函数，_update函数内执行patch函数创建节点并插入到 DOM 中（vm.$el = vm.__patch__()）；如果组件中有子组件，调用组件占位符 VNode 的init钩子函数，为子组件创建Vue实例，执行子组件的$mount方法创建Render Watcher，并对子组件执行上述流程。\",\"if (!prevVnode) { // 首次渲染时 vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */); // 新的dom节点 } else { // 更新页面时 vm.$el = vm.__patch__(prevVnode, vnode); }\",\"等子组件执行完成之后将子组件的 DOM 树挂载到组件占位符 VNode 的elm上，并将其插入到父元素中或相邻元素前后。这样父子组件的 DOM 树就关联起来了。\",\"patch.jpg\",\"image-20240324215104187\",\"先有 vue 的组件实例，然后生成整个页面的虚拟 dom 树（此时子组件对应的是占位符 vnode），当进行 diff 操作时，创建子组件，调用 init 钩子函数，根据占位符 vnode 的信息（vnode.componentOptions.Ctor），生成子组件实例赋值给vnode.componentInstance，并执行子组件的挂载，在vm._update的阶段会将生成的新的vnode挂载到vm._node，在根据新的 vnode 生成 dom 树后将其挂载到vnode.elm。\",\"vm --> vm._vnode --> vm._vnode.children[i] --> vm._vnode.children[i].componentInstance\"]},\"1863\":{\"h\":\"九、总览\",\"t\":[\"new vue\"]},\"1864\":{\"h\":\"1. $options\",\"t\":[\"image-20240316152343097\",\"parent:当前实例的父组件，帮助initLifecycle确认组件之间的父子关系（$parent、$children、$root）\",\"propsData：父组件实际传递的props值，帮助initProps定义 prop 的响应式（vm.prop）\",\"_componentTag：当前组件的名称\",\"_parentListeners：父组件注册的自定义事件，提供了可供用户访问的公共属性vm.$listeners（initRender）\",\"_parentVnode：当前组件的占位符节点，提供了可供用户访问的公共属性vm.$vnode（initRender）\",\"_propKeys：储存所有 props 的 key 值。当一个 prop 发生变化时，Vue 需要知道哪些组件需要更新。而这个 _propKeys 数组就可以很好地帮助我们找到哪些组件是依赖于这个 prop 的。\",\"initInternalComponent 初始化组件的配置项\",\"export function initInternalComponent(vm, options) { const opts = (vm.$options = Object.create(vm.constructor.options)); // 组件配置项 const parentVnode = options._parentVnode; // 组件占位符vnode opts.parent = options.parent; // 父组件实例 opts._parentVnode = parentVnode; const vnodeComponentOptions = parentVnode.componentOptions; // 占位符节点的配置项 opts.propsData = vnodeComponentOptions.propsData; opts._parentListeners = vnodeComponentOptions.listeners; opts._renderChildren = vnodeComponentOptions.children; opts._componentTag = vnodeComponentOptions.tag; if (options.render) { opts.render = options.render; opts.staticRenderFns = options.staticRenderFns; } }\"]},\"1865\":{\"h\":\"2. 实例属性\",\"t\":[\"image-20240316201127650\",\"$parent、$root、$children、$vnode、$listeners：见上节\",\"$attrs：组件占位符节点data.attrs的供用户访问版\",\"$createElement：(a, b, c, d) => createElement(vm, a, b, c, d, true)\",\"$slots：用来访问父组件传递的 静态插槽 ，包含对应插槽名称的 vnode 节点数组\",\"上述 api 均来自initRender\",\"$scopedSlots：用来访问 作用域插槽 ，包含一个返回相应 VNode 的函数。（vm._render）\",\"自 2.6.0 后，所有的 $slots 都会作为函数暴露在 $scopedSlots 中\"]},\"1866\":{\"h\":\"3. 虚拟 dom\",\"t\":[\"渲染 vnode，即 vnode 是一个树形结构，children 中包含着它的子节点。\",\"image-20240318102542437\",\"compomnentInstance和componentOptions是组件占位符特有的属性\",\"child指向 vnode 的compomnentInstance，所以也是当 vnode 为组件占位符时才有值\"]},\"1867\":{\"h\":\"十、单文件组件\",\"t\":[\"当我们使用 webpack 或者 vue-cli 进行单文件组件的开发时，使用 vue-loader 来进行解析，具体过程可以参考一文读懂 vue-loader 原理 \"]},\"1868\":{\"c\":[\"源码解析\"]},\"1869\":{\"c\":[\"vue\"]},\"1870\":{\"h\":\"1. vue3 整体大纲\",\"t\":[\"霍春阳《Vue.js 设计与实现》的笔记\"]},\"1871\":{\"h\":\"一、vue 整体方向的选择（权衡）\"},\"1872\":{\"h\":\"1. 声明式 or 命令式\",\"t\":[\"命令式（关注过程）\",\"const div = document.querySelector('#app') // 获取 div div.innerText ='hello world' // 设置文本内容 div.addEventlistener('click'，() =>[ alert('ok') )) // 绑定点击事件\",\"声明式（关注结果）\",\"<div @click=\\\"() => alert('ok')\\\">hello world</div>\",\"这部分的选择主要基于两个方面：性能和可维护性。\",\"性能\",\"可维护性\",\"对比\",\"命令式 > 声明式\",\"声明式 >> 命令式\",\"因为声明式在命令式性能消耗的基础上多出了diff 的性能消耗，所以在性能上会差一些\",\"但随之带来的是可维护性的巨大提升\",\"Vue 封装命令式的代码，实现面向用户的声明式\"]},\"1873\":{\"h\":\"2. 虚拟 dom 的选择\",\"t\":[\"上面提到声明式带来的额外性能消耗——diff 的性能消耗，虚拟 dom 便是为了最小化此消耗采取的措施。其中虚拟 dom 是一个普通的 JS 对象，用来表示对真实 dom 的描述。\",\"const obj = { tag: 'div', children: [{ tag: 'span', children: 'hello world' }], };\",\"image-20230321131551437\"]},\"1874\":{\"h\":\"3. 运行时 or 编译时\",\"t\":[\"运行时 \",\"利用 render 函数，直接把 虚拟 DOM 转化为 真实 DOM 元素\",\"没有编译过程，无法分析用户提供的内容\",\"需要我们手写render函数（😖）\",\"编译时 \",\"直接把 template 模板 中的内容，转化为 真实 DOM 元素\",\"可以分析用户提供的内容，理论上性能会更好，但是有损灵活性\",\"运行时编译（Vue 选用） \",\"先把 template 模板 转化为 render 函数\",\"再利用 render 函数，把 虚拟 DOM 转化为 真实 DOM\"]},\"1875\":{\"h\":\"二、 框架设计的核心要素\",\"t\":[\"提升用户的开发体验\",\"引入友好的警告信息，帮助开发者里快速定位问题\",\"警告信息详细导致框架体积增大，通过判断所处环境来决定构建的版本是否包含这些警告信息\",\"引入Tree-Shaking机制\",\"配合预定义变量，排除 dead code，缩小打包体积\",\"根据应用环境的不同输出不同的构建产物（ 多版本）\",\"提供功能的特性开关，让用户自由选择是否使用\",\"提供统一的错误处理接口：callWithErrorHandling\",\"提供良好的 TS 类型支持\"]},\"1876\":{\"h\":\"三、Vue3 的设计思路\"},\"1877\":{\"h\":\"1. 描述 UI\",\"t\":[\"Vue3 中支持两种方式来描述 UI。第一种是 模板，即我们常在 template 标签中书写的内容：\",\"<h1 @click=\\\"handler\\\"><span></span></h1>\",\"这种方式 vue 最终还是会将其编译为render函数（通过编译器）\",\"另外一种是直接使用 js 对象来描述 UI，即所谓的 虚拟 DOM。\",\"import { h } from 'vue'; export default { render() { return h('h1', { onClick: handler }); // 虚拟 DOM }, };\",\"render函数运行返回一个虚拟 DOM 对象\",\"其中 h 为辅助创建虚拟 DOM 的工具函数\"]},\"1878\":{\"h\":\"2. 渲染器\",\"t\":[\"渲染器的作用就是 把虚拟 DOM 渲染为真实 DOM，以下是一个不考虑更新节点的简易版本\",\"function renderer(vnode, container) { // 使用 vnode.tag 作为标签名称创建 DOM 元素 const el = document.createElement(vnode.tag); // 遍历 vnode.props，将属性、事件添加到 DOM 元素 for (const key in vnode.props) { if (/^on/.test(key)) { // 如果 key 以 on 开头，说明它是事件 el.addEventListener( key.substr(2).toLowerCase(), // 事件名称 onClick --->click vnode.props[key] // 事件处理函数 ); } } // 处理 children if (typeof vnode.children === 'string') { // 如果 children 是字符串，说明它是元素的文本子节点 el.appendChild(document.createTextNode(vnode.children)); } else if (Array.isArray(vnode.children)) { // 递归地调用 renderer 函数渲染子节点，使用当前元素 el 作为挂载点 vnode.children.forEach((child) => renderer(child, el)); } // 将元素添加到挂载点下 container.appendChild(el); }\"]},\"1879\":{\"h\":\"3. 组件\",\"t\":[\"组件就是一组 DOM 元素的封装，这组 DOM 元素就是组件要渲染的内容。而虚拟 DOM 不光可以用来描述真实 DOM，还可以用来描述组件，只是其中tag变成了组件。\",\"const vnode = { tag: MyComponent, };\",\"//MyComponent是一个对象 const MyComponent = { render() { return { tag: 'div', props: { onclick: () => alert('hello'), }, children: 'click me', }; }, }; //MyComponent是一个函数 const MyComponent = function () { return { tag: 'div', props: { onClick: () => alert('hello'), }, children: 'click me', }; };\",\"MyComponent可以是函数，可以是对象，只要最终返回的是一组虚拟 dom 即可。我们根据MyComponent的类型对渲染器进行相应的修改\",\"function renderer(vnode, container) { if (typeof vnode.tag === 'string') { // 说明 vnode 描述的是标签元素 mountElement(vnode, container); } else if (typeof vnode.tag === 'function') { //或者=== 'Object' // 说明 vnode 描述的是组件 mountComponent(vnode, container); } }\",\"其中 mountElement 即上述渲染器的部分，而新加的处理组件的函数mountComponent，大致流程为：\",\"function mountComponent(vnode, container) { // 调用组件函数，获取组件要渲染的内容（虚拟 DOM） const subtree = vnode.tag(); //vnode.tag.render() // 递归地调用 renderer 渲染 subtree renderer(subtree, container); }\"]},\"1880\":{\"h\":\"4. 编译器\",\"t\":[\"编译器的作用是 将模板编译为渲染函数，对于编译器来说，模板就是一个普通的字符串，它会分析该字符 串并生成一个功能与之相同的渲染函数\",\"<template> <div @click=\\\"handler\\\">click me</div> </template> <script> export default { data() { /* ... */ }, methods: { handler: () => { /* ... */ }, }, }; </script>\",\"<template> 标签里的内容就是模板内容，编译器会把模板内容 编译成渲染函数并添加到 <script>标签块的组件对象上，所以最终在浏览器里运行的代码就是：\",\"export default { data() { /* ... */ }, methods: { handler: () => { /* ... */ }, }, render() { return h('div', { onClick: handler }, 'click me'); }, };\"]},\"1881\":{\"h\":\"5. 页面渲染流程\"},\"1882\":{\"c\":[\"源码解析\"]},\"1883\":{\"c\":[\"vue\"]},\"1884\":{\"h\":\"2. 基础响应系统的实现\"},\"1885\":{\"h\":\"一、 响应式数据与副作用函数\",\"t\":[\"​ 副作用函数是指会产生副作用的函数，即它会直接或间接地影响其他函数的执行。\",\"而响应式数据是指会导致视图变化的数据。\"]},\"1886\":{\"h\":\"二、 完成响应式的基本思路\",\"t\":[\"拦截响应式数据的存取行为，在读取数据时，将副作用函数存到一个“桶”里；当设置数据时，将副作用函数从“桶”里取出执行。\",\"其中拦截存取的操作，在 Vue2 中使用Object.defineProperty实现；在 Vue3 中使用Proxy实现。\",\"基本思路的实现\",\"// 存储副作用函数的桶 const bucket = new Set(); // 原始数据 const data = { text: 'hello world' }; // 对原始数据的代理 const obj = new Proxy(data, { // 拦截读取操作 get(target, key) { // 将副作用函数 effect 添加到存储副作用函数的桶中 bucket.add(effect); // 返回属性值 return target[key]; }, // 拦截设置操作 set(target, key, newVal) { // 设置属性值 target[key] = newVal; // 把副作用函数从桶里取出并执行 bucket.forEach((fn) => fn()); // 返回 true 代表设置操作成功 return true; }, });\"]},\"1887\":{\"h\":\"三、 较完善响应式的实现\"},\"1888\":{\"h\":\"1. 硬编码\",\"t\":[\"问题：硬编码，副作用函数的名字固定为 effect，导致一旦副作用函数的名字不叫 effect，那么这段代码就不能正确地工作了。\",\"action：添加副作用函数注册机制\",\"// 用一个全局变量存储被注册的副作用函数 || vue2中使用的是Dep.target let activeEffect; // effect 函数用于注册副作用函数 function effect(fn) { // 当调用 effect 注册副作用函数时，将副作用函数 fn 赋值给activeEffect activeEffect = fn; // 执行副作用函数 fn(); }\",\"当使用时\",\"effect( // 一个匿名的副作用函数 () => { document.body.innerText = obj.text; } );\",\"activeEffect 保存着当前的副作用函数，副作用函数执行时触发响应式数据 obj.text 的读取操作，进而触发代理对象 Proxy 的 get 拦截函数。\",\"相应地对代理操作进行改进，这样 响应系统就不依赖副作用函数的名字了\",\"const obj = new Proxy(data, { get(target, key) { // 将 activeEffect 中存储的副作用函数收集到“桶”中 if (activeEffect) { //改进 bucket.add(activeEffect); } return target[key]; }, set(target, key, newVal) { target[key] = newVal; bucket.forEach((fn) => fn()); return true; }, });\"]},\"1889\":{\"h\":\"2. \\\"桶\\\"结构的重新设计\",\"t\":[\"问题：没有在副作用函数与被操作的目标字段之间建立明确的联系。当读取属性时，无论读取的是哪一个属性，其实都一样，都会把副作用函数收集到“桶”里；当 设置属性时，无论设置的是哪一个属性，也都会把“桶”里的副作用函数取出并执行。\",\"action：改写“桶”的结构\",\"vue2 中使用Object.defineProperty来完成代理，属于属性级别的劫持，所以没有代理对象这层，通过闭包在属性的 get 中维护 dep 依赖。\",\"image-20230517192740314\",\"// 存储副作用函数的桶 const bucket = new WeakMap(); const obj = new Proxy(data, { // 拦截读取操作 get(target, key) { // 没有 activeEffect，直接 return if (!activeEffect) return target[key]; // 根据 target 从“桶”中取得 depsMap，它也是一个 Map 类型：key -->effects let depsMap = bucket.get(target); // 如果不存在 depsMap，那么新建一个 Map 并与 target 关联 if (!depsMap) { bucket.set(target, (depsMap = new Map())); } // 再根据 key 从 depsMap 中取得 deps，它是一个 Set 类型， // 里面存储着所有与当前 key 相关联的副作用函数：effects let deps = depsMap.get(key); // 如果 deps 不存在，同样新建一个 Set 并与 key 关联 if (!deps) { depsMap.set(key, (deps = new Set())); } // 最后将当前激活的副作用函数添加到“桶”里 deps.add(activeEffect); // 返回属性值 return target[key]; }, // 拦截设置操作 set(target, key, newVal) { // 设置属性值 target[key] = newVal; // 根据 target 从桶中取得 depsMap，它是 key --> effects const depsMap = bucket.get(target); if (!depsMap) return; // 根据 key 取得所有副作用函数 effects const effects = depsMap.get(key); // 执行副作用函数 effects && effects.forEach((fn) => fn()); }, });\",\"WeakMap 对 key 是弱引用，不影响垃圾回收器的工作。如果 target 对象没有任何引用了，说明用户侧不再需要它了， 这时垃圾回收器会完成回收任务。\",\"为了方便后续操作，将副作用收集到“桶”中的逻辑和取出执行的逻辑进行封装：\",\"将副作用函数收集到“桶”里\",\"// 在 get 拦截函数内调用 track 函数追踪变化 function track(target, key) { // 没有 activeEffect，直接 return if (!activeEffect) return; let depsMap = bucket.get(target); if (!depsMap) { bucket.set(target, (depsMap = new Map())); } let deps = depsMap.get(key); if (!deps) { depsMap.set(key, (deps = new Set())); } deps.add(activeEffect); }\",\"触发副作用函数重新执行\",\"// 在 set 拦截函数内调用 trigger 函数触发变化 function trigger(target, key) { const depsMap = bucket.get(target); if (!depsMap) return; const effects = depsMap.get(key); //依赖集合 effects && effects.forEach((fn) => fn()); }\",\"对象的代理操作\",\"const obj = new Proxy(data, { // 拦截读取操作 get(target, key) { // 将副作用函数 activeEffect 添加到存储副作用函数的桶中 track(target, key); // 返回属性值 return target[key]; }, // 拦截设置操作 set(target, key, newVal) { // 设置属性值 target[key] = newVal; // 把副作用函数从桶里取出并执行 trigger(target, key); }, });\"]},\"1890\":{\"h\":\"3. cleanup\",\"t\":[\"问题：代码分支可能会产生遗留的副作用函数，导致数据不必要的更新。\",\"action：每次副作用函数执行时，先把它从所有与之关联的依赖集合中删除（重新收集副作用函数中用到的响应式数据）\",\"document.body.innerText = obj.ok ? obj.text : 'not'\",\"当 obj.ok 为 true 时的结构如图：\",\"image-20230517182210993\",\"当修改 obj.ok 的值为 false 时，结构理应变成：\",\"image-20230517182421551\",\"然而并没有，因为这个“桶”它只进不出，之前存进去的就一直呆在里面了，所以以后再修改 obj.text 的值时，依然会触发副作用函数执行。\",\"比如模板中经常会包含 v-if 等判断分支，随着用户的交互导致最终 render 函数所执行的代码分支是变化的，因此需要对包含此副作用函数的依赖集合进行更新。为此我们需要知道哪些依赖集合中包含这个副作用函数。\",\"修改副作用注册函数\",\"// 用一个全局变量存储被注册的副作用函数 let activeEffect; function effect(fn) { const effectFn = () => { // 当 effectFn 执行时，将其设置为当前激活的副作用函数 activeEffect = effectFn; fn(); }; // activeEffect.deps 用来存储所有与该副作用函数相关联的依赖集合 // 类似于watcher.deps，不再使用类的写法 effectFn.deps = []; // 执行副作用函数 effectFn(); }\",\"vue2 中的方案是在 Dep 中维护了一个 subs 数组，用来存储依赖的 watchers；而 watcher 中同样维护了 deps 用来存储对应的依赖集合，在收集依赖时进行双向的收集。\",\"track 函数\",\"function track(target, key) { if (!activeEffect) return; let depsMap = bucket.get(target); if (!depsMap) { bucket.set(target, (depsMap = new Map())); } let deps = depsMap.get(key); if (!deps) { depsMap.set(key, (deps = new Set())); } deps.add(activeEffect); // deps 就是一个与当前副作用函数存在联系的依赖集合 // 相当于vue2中watcher实例的deps数组 // 将其添加到 activeEffect.deps 数组中 activeEffect.deps.push(deps); // 新增 }\",\"在每次副作用函数执行时，将副作用函数从依赖集合中移除\",\"修改副作用注册函数\",\"// 用一个全局变量存储被注册的副作用函数 let activeEffect; function effect(fn) { const effectFn = () => { // 调用 cleanup 函数完成清除工作 cleanup(effectFn); // 新增 activeEffect = effectFn; fn(); }; effectFn.deps = []; effectFn(); }\",\"cleanup\",\"function cleanup(effectFn) { // 遍历 effectFn.deps 数组 for (let i = ; i < effectFn.deps.length; i++) { // deps 是依赖集合 const deps = effectFn.deps[i] // 将 effectFn 从依赖集合中移除 deps.delete(effectFn) } // 最后需要重置 effectFn.deps 数组 effectFn.deps.length = 0 }\",\"将代码按上述修改之后会产生无限循环的问题，问题出现在 Trigger 函数中的循环中\",\"effects && effects.forEach((fn) => fn());\",\"解决死循环的问题\",\"当副作用函数执行时，先调用 cleanup 进行清除，然后副作用函数执行时又加回来，一个集合左边删右边加，导致循环结束不了，为此进行如下修改：\",\"trigger\",\"function trigger(target, key) { const depsMap = bucket.get(target); if (!depsMap) return; const effects = depsMap.get(key); const effectsToRun = new Set(effects); // 新增 effectsToRun.forEach((effectFn) => effectFn()); // 新增 // effects && effects.forEach(effectFn => effectFn()) // 删除 }\"]},\"1891\":{\"h\":\"4. 使 effect 可嵌套\",\"t\":[\"问题：组件是可以嵌套的，而组件的渲染函数是在 effect 中执行的，此时就发生了 effect 的嵌套，但目前的响应系统不支持嵌套。\",\"effect(() => { Foo.render(); // 嵌套 effect(() => { Bar.render(); }); });\",\"action：准备一个副作用函数栈（vue2 中采用相同的处理）\",\"不支持嵌套的原因是使用变量 activeEffect 保存当前的副作用函数，同时只能存在一个，后来的会覆盖先前的，所以我们需要一个副作用函数栈 effectStack， 在副作用函数执行时，将当前副作用函数压入栈中，待副作用函数执行完毕后将其从栈中弹出，并始终让 activeEffect 指向栈顶的副作用函数。\",\"// 用一个全局变量存储当前激活的 effect 函数 let activeEffect; // effect 栈 const effectStack = []; // 新增 function effect(fn) { const effectFn = () => { cleanup(effectFn); // 当调用 effect 注册副作用函数时，将副作用函数赋值给 activeEffect activeEffect = effectFn; // 在调用副作用函数之前将当前副作用函数压入栈中 effectStack.push(effectFn); // 新增 fn(); // 在当前副作用函数执行完毕后，将当前副作用函数弹出栈，并把activeEffect 还原为之前的值 effectStack.pop(); // 新增 activeEffect = effectStack[effectStack.length - 1]; // 新增 }; // activeEffect.deps 用来存储所有与该副作用函数相关的依赖集合 effectFn.deps = []; // 执行副作用函数 effectFn(); }\",\"image-20230518153811983\"]},\"1892\":{\"h\":\"5. 解决读写操作一起时的无限递归\",\"t\":[\"问题：类似 obj.foo++这种操作，既会读取 obj.foo 的值，又会设置 obj.foo 的值。读取 obj.foo 的值，会触发 track 操作，将当前副作用函数收集到“桶”中，接着将其加 1 后再赋值给 obj.foo，此时会触发 trigger 操作，即把“桶”中的副作用函数取出并执行。但问题是该副作用函数正在执行中，还没有执行完毕，就要开始下一次的执 行。这样会导致无限递归地调用自己，于是就产生了栈溢出。\",\"action：如果 trigger 触发执行的副作用函数与当前正在执行的副作用函数相同，则不触发执行\",\"function trigger(target, key) { const depsMap = bucket.get(target); if (!depsMap) return; const effects = depsMap.get(key); const effectsToRun = new Set(); effects && effects.forEach((effectFn) => { // 如果 trigger 触发执行的副作用函数与当前正在执行的副作用函数相同，则不触发执行 if (effectFn !== activeEffect) { // 新增 effectsToRun.add(effectFn); } }); effectsToRun.forEach((effectFn) => effectFn()); // effects && effects.forEach(effectFn => effectFn()) }\"]},\"1893\":{\"h\":\"6. 完成可调度性\",\"t\":[\"问题：我们需要在 trigger 触发副作用函数重新执行时有能力决定副作用函数执行的时机、次数以及方式。\",\"action：为副作用函数添加调度函数\",\"拓展 effect 函数\",\"function effect(fn, options = {}) { const effectFn = () => { cleanup(effectFn); // 当调用 effect 注册副作用函数时，将副作用函数赋值给 activeEffect activeEffect = effectFn; // 在调用副作用函数之前将当前副作用函数压栈 effectStack.push(effectFn); fn(); // 在当前副作用函数执行完毕后，将当前副作用函数弹出栈，并把activeEffect 还原为之前的值 effectStack.pop(); activeEffect = effectStack[effectStack.length - 1]; }; // 将 options 挂载到 effectFn 上 effectFn.options = options; // 新增 // activeEffect.deps 用来存储所有与该副作用函数相关的依赖集合 effectFn.deps = []; // 执行副作用函数 effectFn(); }\",\"trigger 函数\",\"function trigger(target, key) { const depsMap = bucket.get(target); if (!depsMap) return; const effects = depsMap.get(key); const effectsToRun = new Set(); effects && effects.forEach((effectFn) => { if (effectFn !== activeEffect) { effectsToRun.add(effectFn); } }); effectsToRun.forEach((effectFn) => { // 如果一个副作用函数存在调度器，则调用该调度器，并将副作用函数作为参数传递 if (effectFn.options.scheduler) { // 新增 effectFn.options.scheduler(effectFn); // 新增 } else { // 否则直接执行副作用函数（之前的默认行为） effectFn(); // 新增 } }); }\",\"使用时\",\"effect( () => { console.log(obj.foo); }, // options { // 调度器 scheduler 是一个函数 scheduler(fn) { // 将副作用函数放到宏任务队列中执行 setTimeout(fn); }, } );\"]},\"1894\":{\"h\":\"7. 副作用函数的懒加载\",\"t\":[\"问题：在有些场景下，我们并不希望副作用函数立即执行，而是希望它在需要的时候才执行，例如计算属性。\",\"action：在 options 中添加 lazy 属性\",\"使用时\",\"effect( // 指定了 lazy 选项，这个函数不会立即执行 () => { console.log(obj.foo); }, // options { lazy: true, } );\",\"effect 函数\",\"function effect(fn, options = {}) { const effectFn = () => { cleanup(effectFn); activeEffect = effectFn; effectStack.push(effectFn); fn(); effectStack.pop(); activeEffect = effectStack[effectStack.length - 1]; }; effectFn.options = options; effectFn.deps = []; // 只有非 lazy 的时候，才执行 if (!options.lazy) { // 新增 // 执行副作用函数 effectFn(); } // 将副作用函数作为返回值返回 return effectFn; // 新增 }\",\"通过返回值能够拿到对应的副作用函数，这样我们就能手动执行该副作用函数\"]},\"1895\":{\"h\":\"8. getter 的实现\",\"t\":[\"问题：能够手动执行副作用函数，作用并不大，我们想要拿到副作用函数（getter）的返回值\",\"action：副作用函数中添加变量保存 fn 的值\",\"effect 函数\",\"function effect(fn, options = {}) { const effectFn = () => { cleanup(effectFn); activeEffect = effectFn; effectStack.push(effectFn); // 将 fn 的执行结果存储到 res 中 const res = fn(); // 新增 effectStack.pop(); activeEffect = effectStack[effectStack.length - 1]; // 将 res 作为 effectFn 的返回值 return res; // 新增 }; effectFn.options = options; effectFn.deps = []; if (!options.lazy) { effectFn(); } return effectFn; }\"]},\"1896\":{\"h\":\"四、 计算属性 computed 的实现\",\"t\":[\"借助上述函数完成的基本框架\",\"computed 函数\",\"function computed(getter) { // 把 getter 作为副作用函数，创建一个 lazy 的 effect const effectFn = effect(getter, { lazy: true, }); const obj = { // 当读取 value 时才执行 effectFn get value() { return effectFn(); }, }; return obj; }\",\"使用\",\"const data = { foo: 1, bar: 2 }; const obj = new Proxy(data, { /* ... */ }); const sumRes = computed(() => obj.foo + obj.bar); console.log(sumRes.value); // 3\",\"只有真正读取 sumRes.value 的值时， 它才会进行计算并得到值\",\"添加缓存功能\",\"computed 函数\",\"function computed(getter) { // value 用来缓存上一次计算的值 let value; // dirty 标志，用来标识是否需要重新计算值，为 true 则意味着“脏”，需要计算 let dirty = true; const effectFn = effect(getter, { lazy: true, }); const obj = { get value() { // 只有“脏”时才计算值，并将得到的值缓存到 value 中 if (dirty) { value = effectFn(); // 将 dirty 设置为 false，下一次访问直接使用缓存到 value 中的值 dirty = false; } return value; }, }; return obj; }\",\"这时存在一个问题就是读取 value 时 dirty 被改成 false，然后变不回来了，以后一直访问的缓存值，为此利用之前实现的调度器做出如下修改：\",\"function computed(getter) { let value; let dirty = true; const effectFn = effect(getter, { lazy: true, // 添加调度器，在调度器中将 dirty 重置为 true scheduler() { dirty = true; }, }); const obj = { get value() { if (dirty) { value = effectFn(); dirty = false; } return value; }, }; return obj; }\",\"问题：在另一个 effect 中读取计算属性的值时，计算属性内属性值的变化不会触发副作用函数的重新渲染\",\"action：当读取计算属性的值时，手动调用 track 函数进行追踪；当计算属性依赖的响应式数据发生变化时，手动调用 trigger 函数触发响应\",\"compute 函数\",\"function computed(getter) { let value; let dirty = true; const effectFn = effect(getter, { lazy: true, scheduler() { if (!dirty) { dirty = true; // 当计算属性依赖的响应式数据变化时，手动调用 trigger 函数触发响应 trigger(obj, 'value'); } }, }); const obj = { get value() { if (dirty) { value = effectFn(); dirty = false; } // 当读取 value 时，手动调用 track 函数进行追踪 track(obj, 'value'); return value; }, }; return obj; }\"]},\"1897\":{\"h\":\"五、watch 的实现\",\"t\":[\"所谓 watch，其本质就是观测一个响应式数据，当数据发生变化时通知并执行相应的回调函数。watch 的实现本质上就是利用了 effect 以及 options.scheduler 选项\",\"简单实现\",\"watch 函数\",\"// watch 函数接收两个参数，source 是响应式数据，cb 是回调函数 function watch(source, cb) { effect( // 触发读取操作，从而建立联系 () => source.foo, { scheduler() { // 当数据变化时，调用回调函数 cb cb(); }, } ); }\",\"使用时\",\"const data = { foo: 1 }; const obj = new Proxy(data, { /* ... */ }); watch(obj, () => { console.log('数据变化了'); }); obj.foo++;\",\"解决 source.foo 的硬编码问题\",\"watch 函数\",\"function watch(source, cb) { effect( // 调用 traverse 递归地读取 () => traverse(source), { scheduler() { // 当数据变化时，调用回调函数 cb cb(); }, } ); }\",\"traverse 函数（通用的读取操作）\",\"function traverse(value, seen = new Set()) { // 如果要读取的数据是原始值，或者已经被读取过了，那么什么都不做 if (typeof value !== 'object' || value === null || seen.has(value)) return; // 将数据添加到 seen 中，代表遍历地读取过了，避免循环引用引起的死循环 seen.add(value); // 暂时不考虑数组等其他结构 // 假设 value 就是一个对象，使用 for...in 读取对象的每一个值，并递归地调用 traverse 进行处理 for (const k in value) { traverse(value[k], seen); } return value; }\",\"实现可监测 getter 函数\",\"watch 函数\",\"function watch(source, cb) { // 定义 getter let getter; // 如果 source 是函数，说明用户传递的是 getter，所以直接把 source 赋值给 getter if (typeof source === 'function') { getter = source; } else { // 否则按照原来的实现调用 traverse 递归地读取 getter = () => traverse(source); } effect( // 执行 getter () => getter(), { scheduler() { cb(); }, } ); }\",\"实现在 watch 回调函数中拿到新旧值\",\"利用 effect 函数的 lazy 选项\",\"watch 函数\",\"function watch(source, cb) { let getter; if (typeof source === 'function') { getter = source; } else { getter = () => traverse(source); } // 定义旧值与新值 let oldValue, newValue; // 使用 effect 注册副作用函数时，开启 lazy 选项，并把返回值存储到effectFn 中以便后续手动调用 const effectFn = effect(() => getter(), { lazy: true, scheduler() { // 在 scheduler 中重新执行副作用函数，得到的是新值 newValue = effectFn(); // 将旧值和新值作为回调函数的参数 cb(newValue, oldValue); // 更新旧值，不然下一次会得到错误的旧值 oldValue = newValue; }, }); // 手动调用副作用函数，拿到的值就是旧值 oldValue = effectFn(); }\",\"设置 immediate 为 true 来使回调函数开始执行一次;\",\"设置 flush 指定回调函数的执行时机\",\"watch 函数\",\"function watch(source, cb, options = {}) { let getter; if (typeof source === 'function') { getter = source; } else { getter = () => traverse(source); } let oldValue, newValue; // 提取 scheduler 调度函数为一个独立的 job 函数 const job = () => { newValue = effectFn(); cb(newValue, oldValue); oldValue = newValue; }; const effectFn = effect( // 执行 getter () => getter(), { lazy: true, // 使用 job 函数作为调度器函数 scheduler: () => { // 在调度函数中判断 flush 是否为 'post'，如果是，将其放到微任务队列中执行 if (options.flush === 'post') { const p = Promise.resolve(); p.then(job); } else { job(); } }, } ); if (options.immediate) { // 当 immediate 为 true 时立即执行 job，从而触发回调执行 job(); } else { oldValue = effectFn(); } }\",\"解决竞态问题（需要一种使副作用过期的手段）\",\"image-20230519093732138\",\"请求 A 是副作用函数第一次执行所产生的副作用，请求 B 是副作用函数第二次执行所产 生的副作用。由于请求 B 后发生，所以请求 B 的结果应该被视为“最 新”的，而请求 A 已经“过期”了，其产生的结果应被视为无效。\",\"watch 函数的回调函数接收第三个参数 onInvalidate，它是一个函数，类似于事件监听器，我们可以使用 onInvalidate 函数注册一个回调，这个回调函数会在当前副作用函数过期时执行：\",\"使用时\",\"watch(obj, async (newValue, oldValue, onInvalidate) => { // 定义一个标志，代表当前副作用函数是否过期，默认为 false，代表没有过期 let expired = false; // 调用 onInvalidate() 函数注册一个过期回调 onInvalidate(() => { // 当过期时，将 expired 设置为 true expired = true; }); // 发送网络请求 const res = await fetch('/path/to/request'); // 只有当该副作用函数的执行没有过期时，才会执行后续操作。 if (!expired) { finalData = res; } });\",\"watch 函数\",\"function watch(source, cb, options = {}) { let getter; if (typeof source === 'function') { getter = source; } else { getter = () => traverse(source); } let oldValue, newValue; // cleanup 用来存储用户注册的过期回调 let cleanup; // 定义 onInvalidate 函数 function onInvalidate(fn) { // 将过期回调存储到 cleanup 中 cleanup = fn; } const job = () => { newValue = effectFn(); // 在调用回调函数 cb 之前，先调用过期回调 if (cleanup) { cleanup(); } // 将 onInvalidate 作为回调函数的第三个参数，以便用户使用 cb(newValue, oldValue, onInvalidate); oldValue = newValue; }; const effectFn = effect( // 执行 getter () => getter(), { lazy: true, scheduler: () => { if (options.flush === 'post') { const p = Promise.resolve(); p.then(job); } else { job(); } }, } ); if (options.immediate) { job(); } else { oldValue = effectFn(); } }\",\"onInvalidate的过期回调在watch回调执行时注册，而过期回调是在watch回调执行前运行的，所以当属性修改触发回调执行后才注册了过期回调，当再次修改属性值时，过期回调存在优先执行，将之前回调返回的数据抛弃。\"]},\"1898\":{\"c\":[\"源码解析\"]},\"1899\":{\"c\":[\"vue\"]},\"1900\":{\"h\":\"3. 非原始值的响应式方案\",\"t\":[\"霍春阳《Vue.js 设计与实现》的笔记\"]},\"1901\":{\"h\":\"一、 理解 Proxy 和 Reflect\",\"t\":[\"使用 Proxy 可以创建一个代理对象。它能够实现对 其他对象 的代理。而代理，指的是对一个对象 基本语义 的代理。它允许我们拦截并重新定义对一个对象的基本操作。\",\"Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。这就让Proxy对象可以方便地调用对应的Reflect方法，完成默认行为，作为修改行为的基础。而且Reflect中的一些函数还能接收第三个参数，即指定接收者 receiver，你可以把它理解为函数调用过程中的 this。\"]},\"1902\":{\"h\":\"1. target[key]\",\"t\":[\"直接使用存在的问题\",\"const obj = { foo: 1, get bar() { return this.foo; }, }; const p = new Proxy(obj, { get(target, key) { track(target, key); // 注意，这里我们没有使用 Reflect.get 完成读取 return target[key]; }, set(target, key, newVal) { // 这里同样没有使用 Reflect.set 完成设置 target[key] = newVal; trigger(target, key); }, }); effect(() => { console.log(p.bar); // 1 等同于obj.foo }); p.foo++;\",\"当 effect 注册的副作用函数执行时，会读取 p.bar 属性，它发现 p.bar 是一个访问器属 性，因此执行 getter 函数。由于在 getter 函数中通过 this.foo 读取了 foo 属性值，因此我们认为副作用函数与属性 foo 之间也会建 立联系。当我们修改 p.foo 的值时应该能够触发响应，使得副作用函数重新执行才对，然而其并没有重新执行。在 get 拦截函数内，target[key] 相当于 obj.bar。因此，当我们使用 p.bar 访问 bar 属性时，它的 getter 函数内的 this 指向的其实是原始对象 obj， 这说明我们 最终访问的其实是 obj.foo。在副作用函数内通过原始对象访问它的某个属性是不会建立响应联系的。\",\"将target[key]改成Reflect.get(target, key, receiver)\",\"const obj = { foo: 1, get bar() { // 现在这里的 this 为代理对象 p return this.foo; }, };\",\"当我们使用代理对象 p 访问 bar 属性时，那么 receiver 就是 p，你可以把它简单地理解为函数调用中的 this，此时访问器属性 bar 的 getter 函数内的 this 指向代理对象 p。这会在副作用函数与响应式数据之间建立响应联系，从而达到依赖收集的效果。\"]},\"1903\":{\"h\":\"2. 理解 JS 对象和 Proxy 工作原理\",\"t\":[\"根据 ECMA，在 javascript 中分为 2 种对象：常规对象和异质对象。任何不属于常规对象的都叫异质对象。\",\"对象必要的内部方法\",\"image-20230522093515753\",\"image-20230522093616167\",\"额外的必要内部方法\",\"image-20230522093731842\",\"所以，普通对象必须具有一组被称为基本内部方法（essential internal methods）的方法所定义的默认行为，也就是上图。如果改变了默认方法，那么就是异质对象。\",\"毫无疑问，Proxy是异质对象，它可以直接性改变一些默认方法。当我们在Proxy中没有定义 Get 拦截器的时候，他会调用对象内部自己的[[Get]]，代理透明.\",\"创建代理对象时指定的拦截函数，实际上是用来 自定义代理对象本身的内部方法和行为 的，而不是用来指定被代理对象的内部方法和行为的。\"]},\"1904\":{\"h\":\"二、代理函数的完善\",\"t\":[\"原有的“读取”操作拦截太过简单，实际上读取包括：\",\"访问属性obj.foo\",\"key in obj\",\"for (const key in obj){}\",\"对象默认不包含可迭代协议，因此不考虑for..of\"]},\"1905\":{\"h\":\"1. 操作符的拦截\",\"t\":[\"访问属性通过前面说的 get 拦截函数实现。而对于in操作符，我们根据 ECMA 规范了解到 in 操作符的运算结果是通过调用一个叫作 HasProperty 的抽象方法得到的，而它的返回值是通过调用对象的内部方法 [[HasProperty]] 得到的。我们可以通过 has 拦截函数 实现对 in 操作符的代理：\",\"const obj = { foo: 1 }; const p = new Proxy(obj, { has(target, key) { track(target, key); return Reflect.has(target, key); }, });\"]},\"1906\":{\"h\":\"2. 操作符的拦截\",\"t\":[\"对于for...in操作符，根据 ECMA 规范其中使用了 EnumerateObjectProperties 这个抽象方法，该方法返回 一个迭代器对象。而其内部实现使用了 Reflect.ownKeys(obj) 来获取只属于对象自身拥有的键。所以我们使用 ownKeys 拦截函数 来拦截 Reflect.ownKeys 操作：\",\"同时也会拦截Object.keys()操作\",\"const obj = { foo: 1 }; const ITERATE_KEY = Symbol(); const p = new Proxy(obj, { ownKeys(target) { // 将副作用函数与 ITERATE_KEY 关联 track(target, ITERATE_KEY); return Reflect.ownKeys(target); }, });\",\"在读写属性值时，总是能够明确地知道当前正在操作哪一个属性，所以只需要在该属性与副作用函数之间建立联系即可。而 ownKeys 用来获取一个对象的所有属于自己的键值，这个操作明显不与任何具体的键进行绑定，因此我们只能够构造唯一的 key 作为标识，即 ITERATE_KEY。\",\"在触发响应的时候应该触发ITERATE_KEY对应的副作用函数，触发响应的情况（ length 变化 ）：\",\"为对象添加新的属性值\",\"删除对象已有的属性值\",\"trigger 函数\",\"function trigger(target, key) { const depsMap = bucket.get(target); if (!depsMap) return; // 取得与 key 相关联的副作用函数 const effects = depsMap.get(key); // 取得与 ITERATE_KEY 相关联的副作用函数 const iterateEffects = depsMap.get(ITERATE_KEY); const effectsToRun = new Set(); // 将与 key 相关联的副作用函数添加到 effectsToRun effects && effects.forEach((effectFn) => { if (effectFn !== activeEffect) { effectsToRun.add(effectFn); } }); // 将与 ITERATE_KEY 相关联的副作用函数也添加到 effectsToRun iterateEffects && iterateEffects.forEach((effectFn) => { if (effectFn !== activeEffect) { effectsToRun.add(effectFn); } }); effectsToRun.forEach((effectFn) => { if (effectFn.options.scheduler) { effectFn.options.scheduler(effectFn); } else { effectFn(); } }); }\",\"此时修改一个已存在的属性也会触发ITERATE_KEY对应的副作用函数重新执行，带来不必要的性能开销\",\"此时需要我们在 set 拦截函数内能够区分操作的类型，到底是添加新属性还是设置已有属性\",\"代理函数\",\"const p = new Proxy(obj, { // 拦截设置操作 set(target, key, newVal, receiver) { // 如果属性不存在，则说明是在添加新属性，否则是设置已有属性 const type = Object.prototype.hasOwnProperty.call(target, key) ? 'SET' : 'ADD'; // 设置属性值 const res = Reflect.set(target, key, newVal, receiver); // 将 type 作为第三个参数传递给 trigger 函数 trigger(target, key, type); return res; }, // 省略其他拦截函数 });\",\"trigger 函数\",\"function trigger(target, key, type) { const depsMap = bucket.get(target); if (!depsMap) return; const effects = depsMap.get(key); const effectsToRun = new Set(); effects && effects.forEach((effectFn) => { if (effectFn !== activeEffect) { effectsToRun.add(effectFn); } }); // 当操作类型为 ADD 或 DELETE 时，需要触发与 ITERATE_KEY 相关联的副作用函数重新执行 if (type === 'ADD' || type === 'DELETE') { const iterateEffects = depsMap.get(ITERATE_KEY); iterateEffects && iterateEffects.forEach((effectFn) => { if (effectFn !== activeEffect) { effectsToRun.add(effectFn); } }); } effectsToRun.forEach((effectFn) => { if (effectFn.options.scheduler) { effectFn.options.scheduler(effectFn); } else { effectFn(); } }); }\"]},\"1907\":{\"h\":\"3. 代理 操作符\",\"t\":[\"deleteProperty 拦截函数\",\"代理函数\",\"const p = new Proxy(obj, { deleteProperty(target, key) { // 检查被操作的属性是否是对象自己的属性 const hadKey = Object.prototype.hasOwnProperty.call(target, key); // 使用 Reflect.deleteProperty 完成属性的删除 const res = Reflect.deleteProperty(target, key); if (res && hadKey) { // 只有当被删除的属性是对象自己的属性并且成功删除时，才触发更新 trigger(target, key, 'DELETE'); } return res; }, });\"]},\"1908\":{\"h\":\"三、合理触发响应\"},\"1909\":{\"h\":\"1. 减少不必要的响应\",\"t\":[\"当为属性设置新的值时，如果值没有发生变化，则不需要触发响应。\",\"NaN === NaN 永远等于 false，故需要单独处理。\",\"代理函数\",\"const p = new Proxy(obj, { set(target, key, newVal, receiver) { // 先获取旧值 const oldVal = target[key]; const type = Object.prototype.hasOwnProperty.call(target, key) ? 'SET' : 'ADD'; const res = Reflect.set(target, key, newVal, receiver); // // 比较新值与旧值，只有当它们不全等，并且不都是 NaN 的时候才触发响应 if (oldVal !== newVal && (oldVal === oldVal || newVal === newVal)) { trigger(target, key, type); } return res; }, });\",\"添加的不都是 NaN 的判断是因为在 js 中 NaN === NaN会输出 false。\",\"封装reactive函数，该函数接收一个对象作为参数，并返回为其创建的响应式数据\",\"function reactive(obj) { return new Proxy(obj, { // 省略前文讲解的拦截函数 }); }\",\"reactive 函数只是对 Proxy 进行了一层封装\"]},\"1910\":{\"h\":\"2. 原型链继承问题\",\"t\":[\"问题演示\",\"const obj = {}; const proto = { bar: 1 }; const child = reactive(obj); const parent = reactive(proto); // 使用 parent 作为 child 的原型 Object.setPrototypeOf(child, parent); effect(() => { console.log(child.bar); // 1 }); // 修改 child.bar 的值 child.bar = 2; // 会导致副作用函数重新执行两次\",\"当我们创建两个响应式对象，并强制指定一种继承关系，使得其中一个Proxy实例继承了另一个Proxy实例时，被继承的那个实例则存在一个副作用。\",\"child对象上并没有bar这个属性，那么 js 会沿着原型链依次向上查找，就会找到parent，并执行[[Get]]去获取这个属性，然后这个动作就会被Proxy拦截。这会导致child.bar 和 parent.bar 都与副作用函数建立了响应联系。\",\"当设置新值时，ECMA 规定：如果设置的属性不存在于对象上，那么会取得其原型，并调用原型的 [[Set]] 方法。这会导致 set 函数被调用两次。\",\"解决方式\",\"在 set 拦截函数内区分这两次更新，并把原型上那次副作用函数的重新执行屏蔽。\",\"receiver 一直是触发对象，即 target 的代理对象。\",\"只有当 receiver 是 target 的代理对象时才触发更新。\",\"代理对象可以通过 raw 属性访问原始数据\",\"child.raw === obj; // true parent.raw === proto; // true\",\"reactive 函数\",\"function reactive(obj) { return new Proxy(obj, { get(target, key, receiver) { // 为下述修改作准备 if (key === 'raw') { return target; } track(target, key); return Reflect.get(target, key, receiver); }, set(target, key, newVal, receiver) { const oldVal = target[key]; const type = Object.prototype.hasOwnProperty.call(target, key) ? 'SET' : 'ADD'; const res = Reflect.set(target, key, newVal, receiver); // target === receiver.raw 说明 receiver 就是 target 的代理对象 if (target === receiver.raw) { if (oldVal !== newVal && (oldVal === oldVal || newVal === newVal)) { trigger(target, key, type); } } return res; }, // 省略其他拦截函数 }); }\"]},\"1911\":{\"h\":\"四、浅响应和深响应\",\"t\":[\"我们目前实现的 reactive 是浅响应的，只处理对象最外层属性的响应式。\",\"const obj = reactive({ foo: { bar: 1 } }); effect(() => { console.log(obj.foo.bar); }); // 修改 obj.foo.bar 的值，并不能触发响应 obj.foo.bar = 2;\",\"通过 Reflect.get 得到 obj.foo 的结果是一个普通对象，即 { bar: 1 }，它并不是一个响应式对象，所以在副作用函数中访问 obj.foo.bar 时，是不能建立响应联系的。\"]},\"1912\":{\"h\":\"1. 实现深响应\",\"t\":[\"function reactive(obj) { return new Proxy(obj, { get(target, key, receiver) { if (key === 'raw') { return target; } track(target, key); // 得到原始值结果 const res = Reflect.get(target, key, receiver); if (typeof res === 'object' && res !== null) { // 调用 reactive 将结果包装成响应式数据并返回 return reactive(res); } // 返回 res return res; }, // 省略其他拦截函数 }); }\",\"然而，并非所有情况下我们都希望深响应，这就催生了 shallowReactive，即浅响应。\"]},\"1913\":{\"h\":\"2. 完成深浅响应\",\"t\":[\"createReactive 函数\",\"// 封装 createReactive 函数，接收一个参数 isShallow，代表是否为浅响应，默认为 false，即非浅响应 function createReactive(obj, isShallow = false) { return new Proxy(obj, { // 拦截读取操作 get(target, key, receiver) { if (key === 'raw') { return target; } const res = Reflect.get(target, key, receiver); track(target, key); // 如果是浅响应，则直接返回原始值 if (isShallow) { return res; } if (typeof res === 'object' && res !== null) { return reactive(res); } return res; }, // 省略其他拦截函数 }); }\",\"reactive 和 shallowReactive 函数\",\"function reactive(obj) { return createReactive(obj); } function shallowReactive(obj) { return createReactive(obj, true); }\"]},\"1914\":{\"h\":\"五、只读和浅只读\",\"t\":[\"我们希望一些数据是只读的，当用户尝试修改只读数据时，会收到一条警告信息。\",\"createReactive 函数\",\"// 增加第三个参数 isReadonly，代表是否只读，默认为 false，即非只读 function createReactive(obj, isShallow = false, isReadonly = false) { return new Proxy(obj, { set(target, key, newVal, receiver) { // 如果是只读的，则打印警告信息并返回 if (isReadonly) { console.warn(`属性 ${key} 是只读的`); return true; } const oldVal = target[key]; const type = Object.prototype.hasOwnProperty.call(target, key) ? 'SET' : 'ADD'; const res = Reflect.set(target, key, newVal, receiver); if (target === receiver.raw) { if (oldVal !== newVal && (oldVal === oldVal || newVal === newVal)) { trigger(target, key, type); } } return res; }, deleteProperty(target, key) { // 如果是只读的，则打印警告信息并返回 if (isReadonly) { console.warn(`属性 ${key} 是只读的`); return true; } const hadKey = Object.prototype.hasOwnProperty.call(target, key); const res = Reflect.deleteProperty(target, key); if (res && hadKey) { trigger(target, key, 'DELETE'); } return res; }, get(target, key, receiver) { if (key === 'raw') { return target; } // 非只读的时候才需要建立响应联系 if (!isReadonly) { track(target, key); } const res = Reflect.get(target, key, receiver); if (isShallow) { return res; } if (typeof res === 'object' && res !== null) { return reactive(res); } return res; }, // 省略其他拦截函数 }); }\",\"如果一个数据是只读的，那就意味着任何方式都无法修改它。因此，没有必要为只读数据建立响应联系。出于这个原因，在副作用函数中读取一个只读属性的值时，不调用 track 函数追踪响应。\",\"同样的，上面实现的只读属于浅只读，为了实现深只读，应该在 get 拦截函数内递归地调用 readonly 将数据包装成只读的代理对象。\",\"function createReactive(obj, isShallow = false, isReadonly = false) { return new Proxy(obj, { // 拦截读取操作 get(target, key, receiver) { if (key === 'raw') { return target; } if (!isReadonly) { track(target, key); } const res = Reflect.get(target, key, receiver); if (isShallow) { return res; } if (typeof res === 'object' && res !== null) { // 如果数据为只读，则调用 readonly 对值进行包装 return isReadonly ? readonly(res) : reactive(res); } return res; }, // 省略其他拦截函数 }); }\",\"readonly 和 shallowReadonly 函数\",\"function readonly(obj) { return createReactive(obj, false, true); } function shallowReadonly(obj) { return createReactive(obj, true /* shallow */, true); }\"]},\"1915\":{\"h\":\"六、代理数组\",\"t\":[\"所有对数组元素或属性的“ 读取 ”操作\",\"通过索引访问数组元素值：arr[0]。\",\"访问数组的长度：arr.length。\",\"把数组作为对象，使用 for...in 循环遍历。\",\"使用 for...of 迭代遍历数组。\",\"数组的原型方法，如concat/join/every/some/find/findIndex/includes 等，以及其他所有不改变原数组的原型方法。\",\"对数组元素或属性的 设置 操作\",\"通过索引修改数组元素值：arr[1] = 3。\",\"修改数组长度：arr.length = 0。\",\"数组的栈方法：push/pop/shift/unshift。\",\"修改原数组的原型方法：splice/fill/sort 等。\"]},\"1916\":{\"h\":\"1. 数组的索引与 length\",\"t\":[\"首先要知道数组属于异质对象，因为数组对象的 [[DefineOwnProperty]] 内部方法与常规对象不同。大部分用来代理常规对象的代码对于数组也是生效的，只是与之不同的是：\",\"当通过索引设置元素值时，可能会隐式地修改 length 的属性值。因此在触发响应时，也应该触发与 length 属性相关联的副作用函数重新执行。\",\"修改 length 属性值时，那些 索引值大于或等于新的 length 属性值的元素需要触发响应。\"]},\"1917\":{\"h\":\"响应数组下标的变化\",\"t\":[\"我们给数组中不存在的元素赋值，那就是新增，反之就只是更新。 比如：\",\"arr.lenght = 2; arr[2] = 2; //新增\",\"createReactive 函数\",\"新增 对数组类型的判断 ，完善之前对ITERATE_KEY的处理。\",\"function createReactive(obj, isShallow = false, isReadonly = false) { return new Proxy(obj, { // 拦截设置操作 set(target, key, newVal, receiver) { if (isReadonly) { console.warn(`属性 ${key} 是只读的`) return true } const oldVal = target[key] // 如果属性不存在，则说明是在添加新的属性，否则是设置已有属性 const type = Array.isArray(target) // 如果代理目标是数组，则检测被设置的索引值是否小于数组长度， // 如果是，则视作 SET 操作，否则是 ADD 操作 ? Number(key) < target.length ? 'SET' : 'ADD' : Object.prototype.hasOwnProperty.call(target, key) ? 'SET' : 'ADD' const res = Reflect.set(target, key, newVal, receiver) if (target === receiver.raw) { if (oldVal !== newVal && (oldVal === oldVal || newVal === newVal)) { trigger(target, key, type) } } return res } // 省略其他拦截函数 }\",\"使用 proxy 进行响应式时，代理对象[index]可以正常触发 get 代理。\",\"trigger 函数\",\"当通过超出 length 的索引对数组进行操作时视为ADD，会隐式地修改length值，此时应该额外触发与 length 属性相关联的副作用函数重新执行。\",\"function trigger(target, key, type) { // 省略部分内容 // 当操作类型为 ADD 并且目标对象是数组时，应该取出并执行那些与 length属性相关联的副作用函数 if (type === 'ADD' && Array.isArray(target)) { // 取出与 length 相关联的副作用函数 const lengthEffects = depsMap.get('length'); // 将这些副作用函数添加到 effectsToRun 中，待执行 lengthEffects && lengthEffects.forEach((effectFn) => { if (effectFn !== activeEffect) { effectsToRun.add(effectFn); } }); } // 省略部分内容 }\"]},\"1918\":{\"h\":\"响应 length 的变化\",\"t\":[\"当修改 length 属性值时，只有那些 索引值大于或等于新的 length 属性值 的元素才需要触发响应。\",\"function createReactive(obj, isShallow = false, isReadonly = false) { return new Proxy(obj, { // 拦截设置操作 set(target, key, newVal, receiver) { if (isReadonly) { console.warn(`属性 ${key} 是只读的`); return true; } const oldVal = target[key]; const type = Array.isArray(target) ? Number(key) < target.length ? 'SET' : 'ADD' : Object.prototype.hasOwnProperty.call(target, key) ? 'SET' : 'ADD'; const res = Reflect.set(target, key, newVal, receiver); if (target === receiver.raw) { if (oldVal !== newVal && (oldVal === oldVal || newVal === newVal)) { // 增加第四个参数，即触发响应的新值（新的索引值） trigger(target, key, type, newVal); } } return res; }, }); }\",\"trigger 函数\",\"// 为 trigger 函数增加第四个参数，newVal，即新值 function trigger(target, key, type, newVal) { // 省略其他代码 // 如果操作目标是数组，并且修改了数组的 length 属性 if (Array.isArray(target) && key === 'length') { // 对于索引大于或等于新的 length 值的元素， // 需要把所有相关联的副作用函数取出并添加到 effectsToRun 中待执行 depsMap.forEach((effects, key) => { if (key >= newVal) { effects.forEach((effectFn) => { if (effectFn !== activeEffect) { effectsToRun.add(effectFn); } }); } }); } // 省略其他代码 }\"]},\"1919\":{\"h\":\"2. 遍历数组\"},\"1920\":{\"h\":\"响应使用 遍历数组\",\"t\":[\"我们应该尽量避免使用 for...in 循环遍历数组。但既然在语法上是可行的，那么这里也需要考虑。\",\"createReactive 函数\",\"function createReactive(obj, isShallow = false, isReadonly = false) { return new Proxy(obj, { // 省略其他拦截函数 ownKeys(target) { // 如果操作目标 target 是数组，则使用 length 属性作为 key 并建立响应联系 track(target, Array.isArray(target) ? 'length' : ITERATE_KEY); return Reflect.ownKeys(target); }, }); }\"]},\"1921\":{\"h\":\"响应使用 遍历数组\",\"t\":[\"for ... of是用来遍历可迭代对象的，其中调用了数组内部的迭代器，通过length判断元素是否存在，当元素存在时在 next 方法中返回元素本身。因此，只需要在副作用函数与数组长度和索引之间建立响应式联系，就是能够响应for...of。 而这一点，在上面已经实现，因此我们无需再修改代码就可以实现响应。\",\"需要指出的是，无论是使用 for...of 循环，还是调用 values 等方法，它们都会读取数组的 Symbol.iterator 属性。为了避免发生意外的错误，以及性能上的考虑，我们不应该在副作用函数与 Symbol.iterator 这类 symbol 值之间建立响应联系，我们应该在 get 的时候再判断一些，如果碰到这种，就无需追踪了。\",\"function createReactive(obj, isShallow = false, isReadonly = false) { return new Proxy(obj, { // 拦截读取操作 get(target, key, receiver) { if (key === 'raw') { return target; } // 添加判断，如果 key 的类型是 symbol，则不进行追踪 if (!isReadonly && typeof key !== 'symbol') { track(target, key); } const res = Reflect.get(target, key, receiver); if (isShallow) { return res; } if (typeof res === 'object' && res !== null) { return isReadonly ? readonly(res) : reactive(res); } return res; }, }); }\"]},\"1922\":{\"h\":\"3. 重写部分数组的查找方法\",\"t\":[\"通过proxy.includes等方法查找是否存在某属性时，方法内部的 this 为代理对象，获取数组元素时得到的值也是代理对象，使用原始值查找是查找不到的。\",\"对于数组元素的查找，需要注意的一点是，用户既可能使用代理对象进行查找，也可能使用原始对象进行查找。为了支持这两种形式，需要重写数组的查找方法。原理很简单，当用户使用这些方法查找元素时，先去代理对象中查找，如果找不到，再去原始数组中查找。\"]},\"1923\":{\"h\":\"includes 的边界考虑\",\"t\":[\"在数组的 API 中，有一些是查找的方法，这一类方法有个共同特点就是不会改变原数据，本质上都是一个循环遍历。 前文讲到，只要在副作用函数与数组长度和索引之间建立响应式联系，就能够响应数组，但是具体到某些方法，我们还是需要特殊处理，就是所谓的 边界条件 。\",\"const obj = {}; const arr = reactive([obj]); console.log(arr.includes(arr[0])); // false\",\"由于我们的reactive是会进行递归处理的，arr 内部的元素经过reactive处理后，得到的是一个代理对象，而在 includes 方法内部也会通过 arr 访问数组元素，从而也得到一个代理对象，问题是这两个代理对象是不同的。（ 每次调用 reactive 函数时都会创建一个新的代理对象 ）\",\"//reactive的递归处理 if (typeof res === 'object' && res !== null) { return isReadonly ? readonly(res) : reactive(res); } // 每次调用 reactive 时，都会创建新的代理对象 function reactive(obj) { return createReactive(obj); }\",\"我们把原始对象和对应的reactive对象存储起来，如果存在我们就不再重新生成reactive对象，这样即避免了错误，又能提高效率。\",\"// 定义一个 Map 实例，存储原始对象到代理对象的映射 const reactiveMap = new Map(); function reactive(obj) { // 优先通过原始对象 obj 寻找之前创建的代理对象，如果找到了，直接返回已有的代理对象 const existionProxy = reactiveMap.get(obj); if (existionProxy) return existionProxy; // 否则，创建新的代理对象 const proxy = createReactive(obj); // 存储到 Map 中，从而避免重复创建 reactiveMap.set(obj, proxy); return proxy; }\",\"但是此时有一个新的问题出现，console.log(arr.includes(obj)) // false，因为 includes 内部的 this 指向 的是代理对象 arr，并且在获取数组元素时得到的值也是代理对象， 所以拿原始对象 obj 去查找肯定找不到，因此返回 false。\",\"重写 includes 方法\",\"createReactive 函数\",\"const arrayInstrumentations = { includes: function () { /* ... */ }, }; function createReactive(obj, isShallow = false, isReadonly = false) { return new Proxy(obj, { // 拦截读取操作 get(target, key, receiver) { if (key === 'raw') { return target; } // 如果操作的目标对象是数组，并且 key 存在于arrayInstrumentations 上， // 那么返回定义在 arrayInstrumentations 上的值 if (Array.isArray(target) && arrayInstrumentations.hasOwnProperty(key)) { return Reflect.get(arrayInstrumentations, key, receiver); } if (!isReadonly && typeof key !== 'symbol') { track(target, key); } const res = Reflect.get(target, key, receiver); if (isShallow) { return res; } if (typeof res === 'object' && res !== null) { return isReadonly ? readonly(res) : reactive(res); } return res; }, }); }\",\"includes 函数\",\"const originMethod = Array.prototype.includes; const arrayInstrumentations = { includes: function (...args) { // this 是代理对象，先在代理对象中查找，将结果存储到 res 中 let res = originMethod.apply(this, args); if (res === false) { // res 为 false 说明没找到，通过 this.raw 拿到原始数组，再去其中查找并更新 res 值 res = originMethod.apply(this.raw, args); } // 返回最终结果 return res; }, };\"]},\"1924\":{\"h\":\"其他方法\",\"t\":[\"除了 includes 方法之外，还需要做类似处理的数组方法有 indexOf 和lastIndexOf，因为它们都属于根据给定的值返回查找结果的方法。\",\"const arrayInstrumentations = {}; ['includes', 'indexOf', 'lastIndexOf'].forEach((method) => { const originMethod = Array.prototype[method]; arrayInstrumentations[method] = function (...args) { // this 是代理对象，先在代理对象中查找，将结果存储到 res 中 let res = originMethod.apply(this, args); if (res === false || res === -1) { // res 为 false 说明没找到，通过 this.raw 拿到原始数组，再去其中查找，并更新 res 值 res = originMethod.apply(this.raw, args); } // 返回最终结果 return res; }; });\"]},\"1925\":{\"h\":\"4. 重写会修改数组长度的方法\",\"t\":[\"会隐式修改数组长度的原型方法，即 push、pop、 shift、unshift 以及 splice 等方法调用时会间接地读取和设置数组的 length 属性，因此，在不同的副作用函数内对同一个数组执行上述方法，会导致多个副作用函数之间循环调用，最终导致调用栈溢出。\",\"上面我们学习了如何处理数组中的一些遍历方法，这些方法大部分都是不会更改数组本身的，因此我们只需要处理一些边际情况就可以了，但是数组中还有一些其他方法会修改原始数据，比如最常用的push方法。\",\"push的执行流程：\",\"判断数组的 length 加上参数的 length 有没有超过范围\",\"遍历参数，设置数组内的值，然后 length+1\",\"return length\",\"可以看到，在push的时候，即会读取数组的 length，又会修改数组的 length，如果我们只是执行一次，应该不会出什么问题，但如果我们执行了多次，那就会出现爆栈。\",\"const arr = reactive([]); // 第一个副作用函数 effect(() => { arr.push(1); }); // 第二个副作用函数 effect(() => { arr.push(1); });\",\"第一个副作用函数执行，arr.push 会读取 length 属性，从而与 length 属性建立响应联系；当第二个副作用函数执行时，同样会再建立与 length 的属性，但于此同时还会设置 length 的值，于是，响应系统尝试把与 length 属性相关联的副作用函数全部取出并执行，其中就包括第一个副作用函数。问题就出在这里，可以发现，第二个副作用函数还未执行完毕，就要再次执行第一个副作用函数了。等到再次执行第一个副作用函数时又会出现上述情况，循环往复，导致调用栈溢出。\",\"在 push 的时候禁止追踪，push 完再追踪\",\"重写 push 方法\",\"// 一个标记变量，代表是否进行追踪。默认值为 true，即允许追踪 let shouldTrack = true; // 重写数组的 push 方法 ['push'].forEach((method) => { // 取得原始 push 方法 const originMethod = Array.prototype[method]; // 重写 arrayInstrumentations[method] = function (...args) { // 在调用原始方法之前，禁止追踪 shouldTrack = false; // push 方法的默认行为 let res = originMethod.apply(this, args); // 在调用原始方法之后，恢复原来的行为，即允许追踪 shouldTrack = true; return res; }; });\",\"track 函数\",\"function track(target, key) { // 当禁止追踪时，直接返回 if (!activeEffect || !shouldTrack) return; // 省略部分代码 }\",\"除了 push 方法之外，pop、shift、unshift 以及 splice 等方法都需要做类似的处理。\",\"let shouldTrack = true; // 重写数组的 push、pop、shift、unshift 以及 splice 方法 ['push', 'pop', 'shift', 'unshift', 'splice'].forEach((method) => { const originMethod = Array.prototype[method]; arrayInstrumentations[method] = function (...args) { shouldTrack = false; let res = originMethod.apply(this, args); shouldTrack = true; return res; }; });\"]},\"1926\":{\"h\":\"七、代理 Set 和 Map\",\"t\":[\"Set 类型的原型属性和方法\",\"属性/方法\",\"描述\",\"size\",\"返回集合中元素的数量\",\"add(value)\",\"向集合中添加给定的值\",\"delete(value)\",\"从集合中删除给定的值\",\"values()\",\"对于 Set 集合类型来说，keys() 与 values() 等价\",\"keys()\",\"返回一个迭代器对象。可用于 for...of 循环，迭代器对象产生的值为集合中的元素值。\",\"clear()\",\"清空集合\",\"has(value)\",\"判断集合中是否存在给定的值\",\"entries()\",\"返回一个迭代器对象。迭代过程中为集合中的每一 个元素产生一个数组值 [value, value]\",\"forEach(callback[, thisArg])\",\"forEach 函数会遍历集合中的所有元素，并对每一个元素调用 callback 函数。 forEach 函数接收可选的第二个参数 thisArg，用于指定 callback 函数执行时的 this 值\",\"Map 类型的原型属性和方法\",\"属性/方法\",\"描述\",\"size\",\"返回 Map 数据中的键值对数量\",\"get(key)\",\"读取指定 key 对应的值\",\"set(key, value)\",\"为 Map 设置新的键值对\",\"values()\",\"返回一个迭代器对象。迭代过程中会产生键值对的 value 值\",\"keys()\",\"返回一个迭代器对象。迭代过程中会产生键值对的 key 值\",\"clear()\",\"清空 Map\",\"delete(key)\",\"删除指定 key 的键值对\",\"has(key)\",\"判断 Map 中是否存在指定 key 的键值对\",\"entries()\",\"返回一个迭代器对象。迭代过程中会产生由 [key, value] 组成的数组值\",\"forEach(callback[, thisArg])\",\"forEach 函数会遍历 Map 数据的所有键值对，并对每一个键值对调用 callback 函 数。forEach 函数接收可选的第二个参数 thisArg，用于指定 callback 函数执行时的 this 值\"]},\"1927\":{\"h\":\"1. 如何代理 Set 和 Map\",\"t\":[\"在数组中，Array.length是一个属性值，是可以直接通过[[GET]]获取，但是如果你通过Proxy去获取Set.size，那么就会被报错。因为在 ECMA 中，Set.size其实是一个访问器属性。 它内部使用RequireInternalSlot(this, [[SetData]])检查 this（这里指代理对象）是否存在内部槽[[SetData]]，很显然，代理对象不存在 [[SetData]] 这个内部槽，所以抛出了这个错误。\",\"首先我们封装一个获取变量类型的函数，然后当数据是Set并且获取 size 的时候，让 this 指向本身，自然能够正确执行。\",\"const s = new Set([1, 2, 3]); const p = new Proxy(s, { get(target, key, receiver) { if (key === 'size') { // 如果读取的是 size 属性 // 通过指定第三个参数 receiver 为原始对象 target 从而修复问题 return Reflect.get(target, key, target); } // 读取其他属性的默认行为 return Reflect.get(target, key, receiver); }, }); console.log(s.size); // 3\",\"此时，当使用 delete 方法删除数据的时候会报错，因为访问 p.size 与访问 p.delete 是不同的。size 是属性，是一个访问器属性，而 delete 是一个方法。当访问 p.delete 时，delete 方法并没有执行，所以修改 receiver 并不会改变其执行时的 this。\",\"调用 delete 时，将其与原始对象绑定\",\"const s = new Set([1, 2, 3]); const p = new Proxy(s, { get(target, key, receiver) { if (key === 'size') { return Reflect.get(target, key, target); } // 将方法与原始数据对象 target 绑定后返回 return target[key].bind(target); }, }); // 调用 delete 方法删除值为 1 的元素，正确执行 p.delete(1);\",\"将其封装到 createReactive 函数中（暂不考虑与之前代码的冲突）\",\"function createReactive(obj, isShallow = false, isReadonly = false) { return new Proxy(obj, { get(target, key, receiver) { if (key === 'size') { return Reflect.get(target, key, target); } return target[key].bind(target); }, }); }\"]},\"1928\":{\"h\":\"2. 建立响应式\",\"t\":[\"在访问 size 属性时调用 track 函数进行依赖追踪，然后在 add 方法执行时调用trigger 函数触发响应（我们需要自定义 add 方法）\",\"createReactive 函数\",\"function createReactive(obj, isShallow = false, isReadonly = false) { return new Proxy(obj, { get(target, key, receiver) { if (key === 'raw') return target; if (key === 'size') { // 调用 track 函数建立响应联系 track(target, ITERATE_KEY); return Reflect.get(target, key, target); } // 返回定义在 mutableInstrumentations 对象下的方法 return mutableInstrumentations[key]; }, }); }\",\"mutableInstrumentations 对象\",\"// 定义一个对象，将自定义的 add 方法定义到该对象下 const mutableInstrumentations = { add(key) { // this 仍然指向的是代理对象，通过 raw 属性获取原始数据对象 const target = this.raw; // 通过原始数据对象执行 add 方法添加具体的值， // 注意，这里不再需要 .bind 了，因为是直接通过 target 调用并执行的 const res = target.add(key); // 调用 trigger 函数触发响应，并指定操作类型为 ADD trigger(target, key, 'ADD'); // 返回操作结果 return res; }, };\",\"指定了操作类型为 ADD\",\"如果调用 add 方法添加的元素已经存在于 Set 集合中了， 就不再需要触发响应了\",\"mutableInstrumentations 对象\",\"const mutableInstrumentations = { add(key) { const target = this.raw; // 先判断值是否已经存在 const hadKey = target.has(key); // 只有在值不存在的情况下，才需要触发响应 const res = target.add(key); if (!hadKey) { trigger(target, key, 'ADD'); } return res; }, };\",\"delete 方法的实现同上\",\"mutableInstrumentations 对象\",\"const mutableInstrumentations = { delete(key) { const target = this.raw; const hadKey = target.has(key); const res = target.delete(key); // 当要删除的元素确实存在时，才触发响应 if (hadKey) { trigger(target, key, 'DELETE'); } return res; }, };\",\"delete 方法只有在要删除的元素确实在集合中存在时，才需要触发响应，这一点恰好与 add 方法相反\"]},\"1929\":{\"h\":\"3. 避免污染原始数据\",\"t\":[\"有了实现 add、delete 等方法的经验，我们可以对应实现 Map 的 get 和 set 这两个方法。\",\"当调用 get 方法读 取数据时，需要调用 track 函数追踪依赖建立响应联系；当调用 set 方法设置数据时，需要调用 trigger 方法触发响应\",\"mutableInstrumentation 对象\",\"const mutableInstrumentations = { get(key) { // 获取原始对象 const target = this.raw // 判断读取的 key 是否存在 const had = target.has(key) // 追踪依赖，建立响应联系 track(target, key) // 如果存在，则返回结果。这里要注意的是，如果得到的结果 res 仍然是可代理的数据， // 则要返回使用 reactive 包装后的响应式数据 if (had) { const res = target.get(key) return typeof res === 'object' ? reactive(res) : res } } set(key, value) { const target = this.raw const had = target.has(key) // 获取旧值 const oldValue = target.get(key) // 设置新值 target.set(key, value) // 如果不存在，则说明是 ADD 类型的操作，意味着新增 if (!had) { trigger(target, key, 'ADD') } else if (oldValue !== value || (oldValue === oldValue && value === value)) { // 如果不存在，并且值变了，则是 SET 类型的操作，意味着修改 trigger(target, key, 'SET') } } }\",\"此时上述的代码就会出现 污染原始数据 的情况\",\"污染原始数据问题\",\"const m = new Map(); // 原始 Map 对象 m const p1 = reactive(m); // p1 是 m 的代理对象 const p2 = reactive(new Map()); // p2 是另外一个代理对象 p1.set('p2', p2); // 为 p1 设置一个键值对，值是代理对象 p2 effect(() => { console.log(m.get('p2').size); // 注意，这里我们通过原始数据 m 访问 p2 }); // 注意，这里我们通过原始数据 m 为 p2 设置一个键值对 foo --> 1 m.get('p2').set('foo', 1);\",\"通过原始数据 m 来读取数据值，然后又通过原始数据 m 设置数据值，此时发现副作用函数重新执行了。即原始数据也具备响应式，这显然是不合理的。\",\"原因 ：我们把 value 原封不动地设置到了原始数据上target.set(key, value)，如果 value 是响应式数据，就意味着设置到原始对象上的也是响应式数据，我们 把响应式数据设置到原始数据上的行为称为数据污染 。\",\"调用 target.set 函数时对值进行检查，响应式数据先通过 raw 获取原始数据，再进行设置\",\"const mutableInstrumentations = { set(key, value) { const target = this.raw; const had = target.has(key); const oldValue = target.get(key); // 获取原始数据，由于 value 本身可能已经是原始数据，所以此时value.raw 不存在，则直接使用 value const rawValue = value.raw || value; target.set(key, rawValue); if (!had) { trigger(target, key, 'ADD'); } else if (oldValue !== value || (oldValue === oldValue && value === value)) { trigger(target, key, 'SET'); } }, };\",\"这里存在一个问题，raw 属性可能与用户自定义的 raw 属性冲突，所以在一个严谨的实现中，我们需要使用唯一的标识来作为访问原始数据的键，例如使用 Symbol 类型来代替。\"]},\"1930\":{\"h\":\"4. 处理 forEach\",\"t\":[\"遍历操作只与键值对的数量有关，因此任何会修改 Map 对象键值对数量的操作都应该触发副作用函数重新执行。\",\"让副作用函数与 ITERATE_KEY 建立响应联系\",\"mutableInstrumentations 对象\",\"const mutableInstrumentations = { forEach(callback) { // 取得原始数据对象 const target = this.raw; // 与 ITERATE_KEY 建立响应联系 track(target, ITERATE_KEY); // 通过原始数据对象调用 forEach 方法，并把 callback 传递过去 target.forEach(callback); }, };\",\"直接通过原始数据对象调用 forEach 方法，并把 callback 传递过去，这意味着，传递给 callback 回调函数的参数将是非响应式数据。\",\"将 callback 函数的参数转换成响应式的\",\"mutableInstrumentations 对象\",\"const mutableInstrumentations = { forEach(callback) { // wrap 函数用来把可代理的值转换为响应式数据 const wrap = (val) => (typeof val === 'object' ? reactive(val) : val); const target = this.raw; track(target, ITERATE_KEY); // 通过原始数据对象调用 forEach 方法 target.forEach((v, k) => { // 手动调用 callback，用 wrap 函数包裹 value 和 key 后再传给callback，这样就实现了深响应 callback(wrap(v), wrap(k), this); }); }, };\",\"添加自定义 forEach 函数的第三个参数\",\"mutableInstrumentations 对象\",\"const mutableInstrumentations = { // 接收第二个参数 forEach(callback, thisArg) { const wrap = (val) => (typeof val === 'object' ? reactive(val) : val); const target = this.raw; track(target, ITERATE_KEY); target.forEach((v, k) => { // 通过 .call 调用 callback，并传递 thisArg callback.call(thisArg, wrap(v), wrap(k), this); }); }, };\",\"当使用 forEach 遍历 Map 类型的数据时，它既关心键，又关心值。所以使用set修改值时同样应该触发副作用函数重新执行。\",\"trigger 函数\",\"function trigger(target, key, type, newVal) { // 省略部分内容 if ( type === 'ADD' || type === 'DELETE' || // 如果操作类型是 SET，并且目标对象是 Map 类型的数据， // 也应该触发那些与 ITERATE_KEY 相关联的副作用函数重新执行 (type === 'SET' && Object.prototype.toString.call(target) === '[object Map]') ) { const iterateEffects = depsMap.get(ITERATE_KEY); iterateEffects && iterateEffects.forEach((effectFn) => { if (effectFn !== activeEffect) { effectsToRun.add(effectFn); } }); } // 省略部分内容 }\"]},\"1931\":{\"h\":\"5. 迭代器方法\",\"t\":[\"以目前的实现，我们直接使用for...of遍历代理对象是行不通的，因为一个对象能否迭代，取决于该对象是否实现了迭代协议，即Symbol.iterator 方法，很明显代理对象没有。\",\"但实际上循环代理对象时，内部会试图从代理对象 p 上读取 p[Symbol.iterator] 属性，我们使用上文类似的方法添加这个方法。\",\"const mutableInstrumentations = { [Symbol.iterator]() { // 获取原始数据对象 target const target = this.raw; // 获取原始迭代器方法 const itr = target[Symbol.iterator](); // 将其返回 return itr; }, };\",\"如果迭代产生的值也是可以被代理 s 的，那么也应该将其包装成响应式数据，并添加track函数\",\"const mutableInstrumentations = { [Symbol.iterator]() { const target = this.raw; const itr = target[Symbol.iterator](); const wrap = (val) => (typeof val === 'object' && val !== null ? reactive(val) : val); // 调用 track 函数建立响应联系 track(target, ITERATE_KEY); // 返回自定义的迭代器 return { next() { // 调用原始迭代器的 next 方法获取 value 和 done const { value, done } = itr.next(); return { // 如果 value 不是 undefined，则对其进行包裹 value: value ? [wrap(value[0]), wrap(value[1])] : value, done, }; }, }; }, };\",\"p.entries 与 p[Symbol.iterator] 等价，将公共代码抽离进行复用\",\"const mutableInstrumentations = { // 共用 iterationMethod 方法 [Symbol.iterator]: iterationMethod, entries: iterationMethod, }; // 抽离为独立的函数，便于复用 function iterationMethod() { const target = this.raw; const itr = target[Symbol.iterator](); const wrap = (val) => (typeof val === 'object' ? reactive(val) : val); track(target, ITERATE_KEY); return { next() { const { value, done } = itr.next(); return { value: value ? [wrap(value[0]), wrap(value[1])] : value, done, }; }, }; }\",\"但这里运行就会出错，因为这样p.entries返回值是一个带有next方法的对象，它实现了 迭代器协议 ，但是没有实现 可迭代协议 （一个对象实现了 Symbol.iterator 方法），所以为上面返回值添加可迭代协议。\",\"function iterationMethod() { // 省略部分代码 // 迭代器协议 return { next() { const { value, done } = itr.next() return { value: value ? [wrap(value[0]), wrap(value[1])] : value, done } } // 实现可迭代协议 [Symbol.iterator]() { return this } } }\"]},\"1932\":{\"h\":\"6. values 与 keys 方法\",\"t\":[\"values 方法的实现与 entries 方法类似，只是得到的仅仅是 Map 数据的值，而不是键值对。\",\"const mutableInstrumentations = { // 共用 iterationMethod 方法 [Symbol.iterator]: iterationMethod, entries: iterationMethod, values: valuesIterationMethod, }; function valuesIterationMethod() { // 获取原始数据对象 target const target = this.raw; // 通过 target.values 获取原始迭代器方法 const itr = target.values(); const wrap = (val) => (typeof val === 'object' ? reactive(val) : val); track(target, ITERATE_KEY); // 将其返回 return { next() { const { value, done } = itr.next(); return { // value 是值，而非键值对，所以只需要包裹 value 即可 value: wrap(value), done, }; }, [Symbol.iterator]() { return this; }, }; }\",\"将上面高亮部分替换为： const itr = target.keys()即实现keys方法的代理\",\"使用 for...of 循环遍历 p.keys，然后调用 p.set('key2', 'value3')会导致副作用函数重新应该执行\",\"原因 ：前面设置了 Map 数据中，即使操作类型为 SET，也会触发那些与 ITERATE_KEY 相关联的副作用函数重新执行。\",\"这对于 values 或 entries 等方法来说是必需的，但对于 keys 方法来说则没有必要，因为 keys 方法只关心 Map 类型数据的键的变 化，而不关心值的变化。\",\"const MAP_KEY_ITERATE_KEY = Symbol(); function keysIterationMethod() { // 获取原始数据对象 target const target = this.raw; // 获取原始迭代器方法 const itr = target.keys(); const wrap = (val) => (typeof val === 'object' ? reactive(val) : val); // 调用 track 函数追踪依赖，在副作用函数与 MAP_KEY_ITERATE_KEY 之间建立响应联系 track(target, MAP_KEY_ITERATE_KEY); // 将其返回 return { next() { const { value, done } = itr.next(); return { value: wrap(value), done, }; }, [Symbol.iterator]() { return this; }, }; }\",\"trigger 函数\",\"function trigger(target, key, type, newVal) { // 省略其他代码 if ( // 操作类型为 ADD 或 DELETE (type === 'ADD' || type === 'DELETE') && // 并且是 Map 类型的数据 Object.prototype.toString.call(target) === '[object Map]' ) { // 则取出那些与 MAP_KEY_ITERATE_KEY 相关联的副作用函数并执行 const iterateEffects = depsMap.get(MAP_KEY_ITERATE_KEY); iterateEffects && iterateEffects.forEach((effectFn) => { if (effectFn !== activeEffect) { effectsToRun.add(effectFn); } }); } // 省略其他代码 }\"]},\"1933\":{\"c\":[\"源码解析\"]},\"1934\":{\"c\":[\"vue\"]},\"1935\":{\"h\":\"4. 原始值的响应式方案\",\"t\":[\"霍春阳《Vue.js 设计与实现》的笔记\",\"原始值指的是 Boolean、Number、 BigInt、String、Symbol、undefined 和 null 等类型的值。在 JavaScript 中，原始值是按值传递的，而非按引用传递。这意味着，如果一个函数接收原始值作为参数，那么形参与实参之间没有引用关系，它们是两个完全独立的值，对形参的修改不会影响实参。\"]},\"1936\":{\"h\":\"1. 引入 ref\",\"t\":[\"Proxy 的代理目标必须是非原始值，所以为了实现原始值的响应式我们可以使用一个非原始值 去“ 包裹 ”原始值。\",\"const wrapper = { value: 'vue', }; // 可以使用 Proxy 代理 wrapper，间接实现对原始值的拦截 const name = reactive(wrapper); name.value; // vue // 修改值可以触发响应 name.value = 'vue3';\",\"为了方便和规范用户的使用，封装一个 函数 ，将包裹对象的创建工作都封装到该函数中。\",\"// 封装一个 ref 函数 function ref(val) { // 在 ref 函数内部创建包裹对象 const wrapper = { value: val, }; // 使用 Object.defineProperty 在 wrapper 对象上定义一个不可枚举的属性 __v_isRef，并且值为 true Object.defineProperty(wrapper, '__v_isRef', { value: true, }); // 将包裹对象变成响应式数据 return reactive(wrapper); }\",\"其中高亮部分为包裹对象定义了一个不可枚举且不可写的属性 __v_isRef，用来判断一个数据是否是 ref。\"]},\"1937\":{\"h\":\"2. 响应丢失问题\",\"t\":[\"在 vue3 中，我们经常遇到一种情况：我们使用 reactive 创建了一个响应式的对象，我们在模板中使用这个对象中的某些属性，我们不希望在模板中频繁使用obj.prop，这时便会用到解构赋值。\",\"export default { setup() { // 响应式数据 const obj = reactive({ foo: 1, bar: 2 }); // 1s 后修改响应式数据的值，不会触发重新渲染 setTimeout(() => { obj.foo = 100; }, 1000); return { ...obj, }; }, };\",\"上面的过程可以描述为：创建一个响应式的数据对象 obj，然后使用展开运算符得到一个新的对象 newObj，它是一个普通对象，不具有响应能力。\",\"使用数据代理的方式，当访问newObj.prop时，实际访问的是obj.prop\",\"toref 函数\",\"function toRef(obj, key) { const wrapper = { get value() { return obj[key]; }, }; // 定义 __v_isRef 属性 Object.defineProperty(wrapper, '__v_isRef', { value: true, }); return wrapper; }\",\"toRefs 函数\",\"function toRefs(obj) { const ret = {}; // 使用 for...in 循环遍历对象 for (const key in obj) { // 逐个调用 toRef 完成转换 ret[key] = toRef(obj, key); } return ret; }\",\"使用\",\"const newObj = { ...toRefs(obj) };\",\"toRefs返回的对象结构\",\"image-20230524180340479\",\"为toRef添加getter\",\"toRef 函数\",\"function toRef(obj, key) { const wrapper = { get value() { return obj[key]; }, // 允许设置值 set value(val) { obj[key] = val; }, }; Object.defineProperty(wrapper, '__v_isRef', { value: true, }); return wrapper; }\"]},\"1938\":{\"h\":\"3. 自动脱 ref\",\"t\":[\"toRefs 会把响应式数据的第一层属性值转换为 ref，因此必须通过 value 属性访问值，所以我们如果使用上面方式 return 数据的话，我们确实不需要频繁obj.prop，而是变成了频繁prop.value，所以需要自动脱 ref，即 如果读取的属性是一个 ref，则直接将该 ref 对应 的 value 属性值返回 。\",\"function proxyRefs(target) { return new Proxy(target, { get(target, key, receiver) { const value = Reflect.get(target, key, receiver); // 自动脱 ref 实现：如果读取的值是 ref，则返回它的 value 属性值 return value.__v_isRef ? value.value : value; }, }); } // 调用 proxyRefs 函数创建代理 const newObj = proxyRefs({ ...toRefs(obj) });\",\"同时也应该有自动为 ref 设置值的能力，为此添加 set 的拦截函数。\",\"function proxyRefs(target) { return new Proxy(target, { get(target, key, receiver) { const value = Reflect.get(target, key, receiver); return value.__v_isRef ? value.value : value; }, set(target, key, newValue, receiver) { // 通过 target 读取真实值 const value = target[key]; // 如果值是 Ref，则设置其对应的 value 属性值 if (value.__v_isRef) { value.value = newValue; return true; } return Reflect.set(target, key, newValue, receiver); }, }); }\",\"我们在编写 Vue.js 组件时，组件中的 setup 函数所返回的数据会传递给 proxyRefs 函数进行处理 ，所以我们在模板中可以直接访问 ref 的值而不用.value。\",\"const MyComponent = { setup() { const count = ref(0); // 返回的这个对象会传递给 proxyRefs return { count }; }, };\"]},\"1939\":{\"c\":[\"源码解析\"]},\"1940\":{\"c\":[\"vue\"]},\"1941\":{\"h\":\"5. 渲染器\"},\"1942\":{\"h\":\"一、 渲染器的基本概念\"},\"1943\":{\"h\":\"1. 与响应式的关系\",\"t\":[\"const count = ref(1); effect(() => { renderer(`<h1>${count.value}</h1>`, document.getElementById('app')); }); count.value++;\",\"副作用函数执行完毕后，会与响应式数据建立响应联系。当我们修改 count.value 的值时，副作用函数会重新执行，完成重新渲染。\",\"利用响应系统的能力，从而自动调用渲染器完成页面的渲染和更新。\"]},\"1944\":{\"h\":\"2. render 函数的基本实现\",\"t\":[\"作用：把虚拟 DOM（vnode）渲染为特定平台上的真实元素\",\"渲染器不仅仅包含用来渲染的 render 函数，还包括其他的功能。\",\"function createRenderer() { function render(vnode, container) { if (vnode) { // 1. 更新 // 新 vnode 存在，将其与旧 vnode 一起传递给 patch 函数，进行打补丁 patch(container._vnode, vnode, container); } else { if (container._vnode) { // 2. 卸载 // 旧 vnode 存在，且新 vnode 不存在，说明是卸载（unmount）操作 unmount(container._vnode); } } // 把 vnode 存储到 container._vnode 下，即后续渲染中的旧 vnode container._vnode = vnode; } function patch(oldVnode, Vnode, container) { if (!oldVnode) { // 3. 挂载 mountElement(Vnode, container); } else { // Vnode存在，意味着打补丁，暂时省略 } } return { render, }; }\",\"甚至createApp实际调用的也是渲染器中定义的函数\",\"const app = createApp(APP); const app = ensureRenderer().createApp(APP); // 实例化渲染器并执行其中的函数 const app = createRenderer(rendererOptions).createApp(APP); const app = baseCreateRenderer(rendererOptions).createApp(APP); const app = createAppAPI(render)(App); app.mount('#app'); const container = normalizeContainer('#app'); const vnode = createVNode(App); render(vnode, container); patch(null, vnode, container); mountComponent(vnode, container);\"]},\"1945\":{\"h\":\"二、 渲染器的设计\"},\"1946\":{\"h\":\"1. 抽离 API\",\"t\":[\"将依赖于特定平台的 API 作为配置项传入创建渲染器的函数中：\",\"// 在创建 renderer 时传入配置项 const renderer = createRenderer({ // 用于创建元素 createElement(tag) { return document.createElement(tag); }, // 用于设置元素的文本节点 setElementText(el, text) { el.textContent = text; }, // 用于在给定的 parent 下添加指定元素 insert(el, parent, anchor = null) { parent.insertBefore(el, anchor); }, });\",\"这样在createRenderer函数的内部可以通过解构获取传入的操作：\",\"const { createElement, insert, setElementText, ... } = options\"]},\"1947\":{\"h\":\"2. 渲染器的挂载操作\"},\"1948\":{\"h\":\"挂载元素\",\"t\":[\"function createRenderer(options) { // 通过 options 得到操作 DOM 的 API const { createElement, insert, setElementText } = options; function shouldSetAsProps(el, key, value) { // 特殊处理（input标签的el.form属性是一个只读属性） if (key === 'form' && el.tagName === 'INPUT') return false; // 兜底 return key in el; } // 在这个作用域内定义的函数都可以访问那些 API // 挂载真实标签 function mountElement(vnode, container, anchor) { // 在 vnode 与真实 DOM 元素之间建立联系 const el = (vnode.el = createElement(vnode.type)); if (typeof vnode.children === 'string') { // 文本节点 setElementText(el, vnode.children); } else if (Array.isArray(vnode.children)) { // 如果 children 是数组，则遍历每一个子节点，并调用 patch 函数挂载它 vnode.children.forEach((child) => { patch(null, child, el); }); } if (vnode.props) { for (const key in vnode.props) { // 调用 patchProps 函数即可 patchProps(el, key, null, vnode.props[key]); } } insert(el, container, anchor); } function patch(n1, n2, container) { // ... } function render(vnode, container) { // ... } return { render, }; }\",\"要挂载元素的子节点 --> 循环 children 数组进行递归调用\"]},\"1949\":{\"h\":\"挂载属性\",\"t\":[\"要挂载元素的属性，将其抽离为patchProps函数\",\"class 类名\",\"style 样式\",\"事件\",\"// 将属性设置相关操作封装到 patchProps 函数中，并作为渲染器选项传递 patchProps(el, key, prevValue, nextValue) { // 对事件的处理 if (/^on/.test(key)) { const invokers = el._vei || (el._vei = {}); let invoker = invokers[key]; const name = key.slice(2).toLowerCase(); if (nextValue) { if (!invoker) { invoker = el._vei[key] = (e) => { // e.timeStamp 是事件发生的时间 // 如果事件发生的时间早于事件处理函数绑定的时间，则不执行事件处理函数 if (e.timeStamp < invoker.attached) return; // 如果 invoker.value 是数组，则遍历它并逐个调用事件处理函数 if (Array.isArray(invoker.value)){ invoker.value.forEach((fn) => fn(e)); } else { // 当伪造的事件处理函数执行时，会执行真正的事件处理函数 invoker.value(e); } }; invoker.value = nextValue; // 添加 invoker.attached 属性，存储事件处理函数被绑定的时间 invoker.attached = performance.now(); el.addEventListener(name, invoker); } else { invoker.value = nextValue; } } else if (invoker) { el.removeEventListener(name, invoker); } } // 对 class 进行特殊处理 if (key === \\\"class\\\") { el.className = nextValue || \\\"\\\"; } // 优先设置dom的props else if (shouldSetAsProps(el, key, nextValue)) { const type = typeof el[key]; // 当值为空字符串时，要手动将值矫正为 true if (type === \\\"boolean\\\" && nextValue === \\\"\\\") { el[key] = true; } else { el[key] = nextValue; } } else { el.setAttribute(key, nextValue); } },\",\"如何正确设置元素的属性？ property or attribute？\",\"HTML Attributes 的作用是设置与之对应的 DOM Properties 的初始值；\",\"优先设置元素的 DOM Properties，但当值为空字符串时，要手动将值矫正为 true。\",\"DOM 中部分属性是只读的，们只能够通过 setAttribute 函数来设置。\",\"对于 class 和 style 的处理\",\"因为其值可以是多种类型，所以我们必须在设置元素的 class | style 之前将值归一化为统一的字符串形式，再把该字符串作为元素的 class | style 值去设置\",\"需要封装normalizeClass和normalizeStyle\",\"很多时候出于上层 API 的设计，vnode.props 对象中定义的属性值的类型并不总是与 DOM 元素属性的数据结构保持一致，在底层实现时需要首先对其进行规范化\",\"el.className、setAttribute 和 el.classList 三种设置类名的方法中 el.className 的性能最优。\",\"更新事件要如何处理？\",\"常规思路：先移除之前添加的事件处理函数，然后再将新的事件处理函数绑定到 DOM 元素上\",\"if (/^on/.test(key)) { const name = key.slice(2).toLowerCase(); // 移除上一次绑定的事件处理函数 prevValue && el.removeEventListener(name, prevValue); // 绑定新的事件处理函数 el.addEventListener(name, nextValue); }\",\"优化思路：在绑定事件时绑定一个伪造的事件处理函数 invoker，然后把真正的事件处理函数设置为 invoker.value 属性的值。这样当更新事件的时候，就不再需要调用 removeEventListener 函数来移除上一次绑定的事件，只需要更新 invoker.value 的值。\"]},\"1950\":{\"h\":\"3. 渲染器的卸载操作\",\"t\":[\"卸载时要连同对应的 dom 事件 、组件的 生命周期钩子函数 、自定义的 指令 操作等一起卸载。\",\"function unmount(vnode) { const parent = vnode.el.parentNode; if (parent) { parent.removeChild(vnode.el); } // 处理上述事件、生命周期和指令 // ... }\"]},\"1951\":{\"h\":\"4. patch\",\"t\":[\"完成新旧虚拟 dom 的“补丁”操作\",\"挂载 mountElement\",\"卸载 unmount\",\"深入对比 patchElement\",\"function patch(n1, n2, container, anchor) { // 新旧节点类型不同，则直接将旧 vnode 卸载 if (n1 && n1.type !== n2.type) { unmount(n1); n1 = null; } // 代码运行到这里，证明 n1 和 n2 所描述的内容相同 const { type } = n2; // 1.常规元素节点 if (typeof type === 'string') { if (!n1) { mountElement(n2, container, anchor); } else { patchElement(n1, n2); } } // 2.文本节点（注释节点同理） else if (type === Text) { if (!n1) { // 调用 createText 函数创建文本节点 const el = (n2.el = createText(n2.children)); insert(el, container); } else { const el = (n2.el = n1.el); if (n2.children !== n1.children) { // 调用 setText 函数更新文本节点的内容 setText(el, n2.children); } } } // 3.Fragment类型 else if (type === Fragment) { // 处理 Fragment 类型的 vnode if (!n1) { // 如果旧 vnode 不存在，则只需要将 Fragment 的 children 逐个挂载即可 n2.children.forEach((c) => patch(null, c, container)); } else { // 如果旧 vnode 存在，则只需要更新 Fragment 的 children 即可 patchChildren(n1, n2, container); } } // 4. 组件对象 else if (typeof type === 'object') { // vnode.type 的值是选项对象，作为组件来处理 if (!n1) { // 挂载组件 mountComponent(n2, container, anchor); } else { // 更新组件 patchComponent(n1, n2, anchor); } } else if (type === 'xxx') { // 处理其他类型的 vnode } }\",\"patchElement\",\"function patchElement(n1, n2) { // 新的 vnode 也引用了真实 DOM 元素 const el = (n2.el = n1.el); const oldProps = n1.props; const newProps = n2.props; // 第一步：更新 props for (const key in newProps) { if (newProps[key] !== oldProps[key]) { patchProps(el, key, oldProps[key], newProps[key]); } } for (const key in oldProps) { if (!(key in newProps)) { patchProps(el, key, oldProps[key], null); } } // 第二步：更新 children patchChildren(n1, n2, el); }\",\"将旧节点的 n1.el 属性赋值给新节点的 n2.el 属性，本质上是 dom 元素的复用，在复用了 DOM 元素之后，新节点也将持有对真实 DOM 的引用。\",\"image-20240906102401710\",\"pathchChildren\",\"更新子节点时共有以下九种可能：\",\"function patchChildren(n1, n2, container) { // 新子节点的类型是文本节点 if (typeof n2.children === 'string') { // 旧子节点的类型有三种可能：没有子节点、文本子节点以及一组子节点 // 只有当旧子节点为一组子节点时，才需要逐个卸载，其他情况下什么都不需要做 if (Array.isArray(n1.children)) { n1.children.forEach((c) => unmount(c)); } // 最后将新的文本节点内容设置给容器元素 setElementText(container, n2.children); } // 新子节点是一组子节点 else if (Array.isArray(n2.children)) { // 判断旧子节点是否也是一组子节点 if (Array.isArray(n1.children)) { // 代码运行到这里，则说明新旧子节点都是一组子节点，这里涉及核心的Diff 算法 } else { // 此时：旧子节点要么是文本子节点，要么不存在 // 但无论哪种情况，我们都只需要将容器清空，然后将新的一组子节点逐个挂载 setElementText(container, ''); n2.children.forEach((c) => patch(null, c, container)); } } // 代码运行到这里，说明新子节点不存在 else { // 旧子节点是一组子节点，只需逐个卸载即可 if (Array.isArray(n1.children)) { n1.children.forEach((c) => unmount(c)); } // 旧子节点是文本子节点，清空内容即可 else if (typeof n1.children === 'string') { setElementText(container, ''); } // 如果也没有旧子节点，那么什么都不需要做 } }\"]},\"1952\":{\"h\":\"三、渲染组件\"},\"1953\":{\"h\":\"1. 定义组件\",\"t\":[\"当用户定义一个组件的时候，主要定义的有两部分：模板和配置对象 。模板会经由编译器编译为 render 函数挂载到配置对象中。配置对象的主要内容如下所示：\",\"选项式 API\",\"const MyComponent = { name: 'MyComponent', data() { return { foo: 'hello world', }; }, // 组件接收名为 title 的 props，并且该 props 的类型为 String props: { title: String, }, // 组件的生命周期 beforeCreate() { console.log('beforeCreate!'); }, render() { return { type: 'div', children: ` foo 的值是: ${this.foo}; count is: ${this.title}`, // 访问data和props 数据 }; }, };\",\"Setup 函数\",\"// 返回一个函数 const Comp = { setup() { // setup 函数可以返回一个函数，该函数将作为组件的渲染函数 return () => { return { type: 'div', children: 'hello' } } } } // 返回一个对象 const Comp = { name: 'MyComponent', setup(props, { emit,slots,attrs,expose }) { const count = ref(0) // 发射 change 事件，并传递给事件处理函数两个参数 emit('change', 1, 2) onMounted(){ console.log('mounted!') } // 返回一个对象，对象中的数据会暴露到渲染函数中 return { count } }, render() { // 通过 this 可以访问 setup 暴露出来的响应式数据 return { type: 'div', children: `count is: ${this.count}` } } }\",\"从用户使用的角度来说，组件应该包含以下内容：\",\"可以通过 data 函数定义组件自身的状态，并在其变化时重新渲染组件\",\"可以通过 props 接受传入的数据，并在其变化时重新渲染组件\",\"可以定义生命周期的钩子函数，并在适当的时间点触发相应的钩子函数\",\"可以传入 setup 的配置项，并从配置中接受 props、emit、slots、attrs、expose 参数\"]},\"1954\":{\"h\":\"2. mountComponent\",\"t\":[\"渲染组件状态的代码位于mountComponent中\",\"// 任务缓存队列，用一个 Set 数据结构来表示，这样就可以自动对任务进行去重 const queue = new Set(); // 一个标志，代表是否正在刷新任务队列 let isFlushing = false; // 创建一个立即 resolve 的 Promise 实例 const p = Promise.resolve(); // 调度器的主要函数，用来将一个任务添加到缓冲队列中，并开始刷新队列 function queueJob(job) { // 将 job 添加到任务队列 queue 中 queue.add(job); // 如果还没有开始刷新队列，则刷新之 if (!isFlushing) { // 将该标志设置为 true 以避免重复刷新 isFlushing = true; // 在微任务中刷新缓冲队列 p.then(() => { try { // 执行任务队列中的任务 queue.forEach((job) => job()); } finally { // 重置状态 isFlushing = false; queue.clear = 0; } }); } } // resolveProps 函数用于解析组件 props 和 attrs 数据 function resolveProps(options, propsData) { const props = {}; const attrs = {}; // 遍历为组件传递的 props 数据 for (const key in propsData) { // 以字符串 on 开头的 props，无论是否显式地声明，都将其添加到 props数据中，而不是添加到 attrs 中 if (key in options || key.startsWith('on')) { // 如果为组件传递的 props 数据在组件自身的 props 选项中有定义，则将其视为合法的 props props[key] = propsData[key]; } else { // 否则将其作为 attrs attrs[key] = propsData[key]; } } // 最后返回 props 与 attrs 数据 return [props, attrs]; } // 全局变量，存储当前正在被初始化的组件实例 let currentInstance = null; // 该方法接收组件实例作为参数，并将该实例设置为 currentInstance function setCurrentInstance(instance) { currentInstance = instance; } function onMounted(fn) { if (currentInstance) { // 将生命周期函数添加到 instance.mounted 数组中 currentInstance.mounted.push(fn); } else { console.error('onMounted 函数只能在 setup 中调用'); } } function mountComponent(vnode, container, anchor) { const componentOptions = vnode.type; const { render, data, props: propsOption, beforeCreate, created, beforeMount, mounted, beforeUpdate, updated, } = componentOptions; // 在这里调用 beforeCreate 钩子 beforeCreate && beforeCreate(); // 调用 data 函数得到原始数据，并调用 reactive 函数将其包装为响应式数据 const state = reactive(data()); // 调用 resolveProps 函数解析出最终的 props 数据与 attrs 数据 const [props, attrs] = resolveProps(propsOption, vnode.props); // 定义组件实例，一个组件实例本质上就是一个对象，它包含与组件有关的状态信息 const instance = { // 组件自身的状态数据，即 data state, // 将解析出的 props 数据包装为 shallowReactive 并定义到组件实例上 props: shallowReactive(props), // 一个布尔值，用来表示组件是否已经被挂载，初始值为 false isMounted: false, // 组件所渲染的内容，即子树（subTree） subTree: null, slots, attrs, // 在组件实例中添加 mounted 数组，用来存储通过 onMounted 函数注册的生命周期钩子函数 mounted: [], }; // 定义 emit 函数，它接收两个参数 // event: 事件名称 // payload: 传递给事件处理函数的参数 function emit(event, ...payload) { // 根据约定对事件名称进行处理，例如 change --> onChange const eventName = `on${event[0].toUpperCase() + event.slice(1)}`; // 根据处理后的事件名称去 props 中寻找对应的事件处理函数 const handler = instance.props[eventName]; if (handler) { // 调用事件处理函数并传递参数 handler(...payload); } else { console.error('事件不存在'); } } // 直接使用编译好的 vnode.children 对象作为 slots 对象即可 const slots = vnode.children || {}; // setupContext，由于我们还没有讲解 emit 和 slots，所以暂时只需要attrs const setupContext = { attrs, emit, slots }; // 在调用 setup 函数之前，设置当前组件实例 setCurrentInstance(instance); // 调用 setup 函数，将只读版本的 props 作为第一个参数传递，避免用户意外地修改 props 的值， // 将 setupContext 作为第二个参数传递 const setupResult = setup(shallowReadonly(instance.props), setupContext); // 在 setup 函数执行完毕之后，重置当前组件实例 setCurrentInstance(null); // setupState 用来存储由 setup 返回的数据 let setupState = null; // 如果 setup 函数的返回值是函数，则将其作为渲染函数 if (typeof setupResult === 'function') { // 报告冲突 if (render) console.error('setup 函数返回渲染函数，render 选项将被忽略'); // 将 setupResult 作为渲染函数 render = setupResult; } else { // 如果 setup 的返回值不是函数，则作为数据状态赋值给 setupState setupState = setupResult; } // 将组件实例设置到 vnode 上，用于后续更新 vnode.component = instance; // 在这里调用 created 钩子 created && created.call(state); effect( () => { // 调用组件的渲染函数，获得子树 const subTree = render.call(state, state); // 检查组件是否已经被挂载 if (!instance.isMounted) { // 在这里调用 beforeMount 钩子 beforeMount && beforeMount.call(state); // 初次挂载，调用 patch 函数第一个参数传递 null patch(null, subTree, container, anchor); // 重点：将组件实例的 isMounted 设置为 true，这样当更新发生时就不会再次进行挂载操作，而是会执行更新 instance.isMounted = true; // 在这里调用 mounted 钩子 mounted && mounted.call(state); // 遍历 instance.mounted 数组并逐个执行即可 instance.mounted && instance.mounted.forEach((hook) => hook.call(renderContext)); } else { // 在这里调用 beforeUpdate 钩子 beforeUpdate && beforeUpdate.call(state); // 当 isMounted 为 true 时，说明组件已经被挂载，只需要完成自更新即可， // 所以在调用 patch 函数时，第一个参数为组件上一次渲染的子树， // 意思是，使用新的子树与上一次渲染的子树进行打补丁操作 patch(instance.subTree, subTree, container, anchor); // 在这里调用 updated 钩子 updated && updated.call(state); } // 更新组件实例的子树 instance.subTree = subTree; }, { scheduler: queueJob } ); }\",\"默认情况下重新渲染是同步执行的，这导致无法对任务去重，因此在创建渲染副作用函数时，指定副作用函数的调度器为queueJob。该调度器的作用是，当组件自身的响应式数据发生变化时，副作用函数不会立即同步执行，而是会被 queueJob 函数调度，将渲染副作用函数缓冲到微任务队列中。\",\"在 vue2 中，组件运行过程中的状态保存在组件实例中，而在 vue3 中使用函数式编程重构，需要我们手动构造一个实例对象，挂载到vnode.component。\",\"编译器会将使用组件时传入的插槽编译为返回 vnode 的函数，将定义 slot 的模板编译为children: [this.$slots.header()]。\",\"<!-- 父组件 --> <MyComponent> <template #header> <h1>我是标题</h1> </template> <template #body> <section>我是内容</section> </template> <template #footer> <p>我是注脚</p> </template> </MyComponent> <!-- MyComponent --> <template> <header><slot name=\\\"header\\\" /></header> <div> <slot name=\\\"body\\\" /> </div> <footer><slot name=\\\"footer\\\" /></footer> </template>\",\"编译结果\",\"// 父组件的渲染函数 function render() { return { type: MyComponent, // 组件的 children 会被编译成一个对象 children: { header() { return { type: 'h1', children: '我是标题' }; }, body() { return { type: 'section', children: '我是内容' }; }, footer() { return { type: 'p', children: '我是注脚' }; }, }, }; } // MyComponent function render() { return [ { type: 'header', children: [this.$slots.header()], }, { type: 'body', children: [this.$slots.body()], }, { type: 'footer', children: [this.$slots.footer()], }, ]; }\"]},\"1955\":{\"h\":\"3. patchComponent\",\"t\":[\"当父组件的状态发生变化会引起自身的重渲染，从而触发子组件的更新，相关代码位于patchComponent中。\",\"function patchComponent(n1, n2, anchor) { // 获取组件实例，即 n1.component，同时让新的组件虚拟节点 n2.component也指向组件实例 const instance = (n2.component = n1.component); // 获取当前的 props 数据 const { props } = instance; // 调用 hasPropsChanged 检测为子组件传递的 props 是否发生变化，如果没有变化，则不需要更新 if (hasPropsChanged(n1.props, n2.props)) { // 调用 resolveProps 函数重新获取 props 数据 const [nextProps] = resolveProps(n2.type.props, n2.props); // 更新 props for (const k in nextProps) { props[k] = nextProps[k]; } // 删除不存在的 props for (const k in props) { if (!(k in nextProps)) delete props[k]; } } } function hasPropsChanged(prevProps, nextProps) { const nextKeys = Object.keys(nextProps); // 如果新旧 props 的数量变了，则说明有变化 if (nextKeys.length !== Object.keys(prevProps).length) { return true; } for (let i = 0; i < nextKeys.length; i++) { const key = nextKeys[i]; // 有不相等的 props，则说明有变化 if (nextProps[key] !== prevProps[key]) return true; } return false; }\",\"父组件响应式数据变化会引起子组件的被动更新，此时会检查子组件 props 是否发生变化，如果未发生变化则子组件不会重新渲染；如果发生变化，则更新子组件的 props，因为其为浅响应，其值的变化会触发子组件重新渲染。\"]},\"1956\":{\"h\":\"4. 渲染上下文对象\",\"t\":[\"props 数据与组件自身的状态数据（data）都需要暴露到渲染函数中，并使得渲染函数能够通过 this 访问它们，因此我们需要封装一个渲染上下文对象。\",\"function mountComponent(vnode, container, anchor) { // 省略部分代码 // 创建渲染上下文对象，本质上是组件实例的代理 const renderContext = new Proxy(instance, { get(t, k, r) { // 取得组件自身状态与 props 数据 const { state, props, slots } = t; // 当 k 的值为 $slots 时，直接返回组件实例上的 slots if (k === '$slots') return slots; // 当 k 的值为 $attrs 时，直接返回组件实例上的 attrs if (k === '$attrs') return attrs; // 先尝试读取自身状态数据 if (state && k in state) { return state[k]; } else if (k in props) { // 如果组件自身没有该数据，则尝试从props 中读取 return props[k]; } else if (setupState && k in setupState) { return setupState[k]; } else { console.error('不存在'); } }, set(t, k, v, r) { const { state, props } = t; if (state && k in state) { state[k] = v; } else if (k in props) { // 会打破单项数据流 console.warn(`Attempting to mutate prop \\\"${k}\\\". Props are readonly.`); } else if (setupState && k in setupState) { setupState[k] = v; } else { console.error('不存在'); } }, }); // 生命周期函数调用时要绑定渲染上下文对象 created && created.call(renderContext); // 省略部分代码 }\",\"暴露到渲染环境的数据包括 data、props、setup 返回的数据以及定义的方法计算属性（此处省略）等。\",\"在组件模板中可以直接使用$slots和$attrs，因此需要对其进行代理，实际访问的是实例中的相应属性\"]},\"1957\":{\"c\":[\"源码解析\"]},\"1958\":{\"c\":[\"vue\"]},\"1959\":{\"h\":\"6. Diff 算法\",\"t\":[\"无论是哪种 Diff 算法，都遵循同样的处理规则：\",\"判断是否有节点需要移动，以及应该如何移动；（可复用的节点）\",\"找出那些需要被添加或移除的节点。（其他的节点）\"]},\"1960\":{\"h\":\"一、简单 Diff\"},\"1961\":{\"h\":\"1. 不考虑 dom 复用\",\"t\":[\"const oldChildren = n1.children; const newChildren = n2.children; // 旧的一组子节点的长度 const oldLen = oldChildren.length; // 新的一组子节点的长度 const newLen = newChildren.length; // 两组子节点的公共长度，即两者中较短的那一组子节点的长度 const commonLength = Math.min(oldLen, newLen); // 遍历 commonLength 次 for (let i = 0; i < commonLength; i++) { patch(oldChildren[i], newChildren[i], container); } // 如果 newLen > oldLen，说明有新子节点需要挂载 if (newLen > oldLen) { for (let i = commonLength; i < newLen; i++) { patch(null, newChildren[i], container); } } else if (oldLen > newLen) { // 如果 oldLen > newLen，说明有旧子节点需要卸载 for (let i = commonLength; i < oldLen; i++) { unmount(oldChildren[i]); } }\"]},\"1962\":{\"h\":\"2. 考虑 dom 复用\",\"t\":[\"在 patch 时，很多时候新旧节点之间存在相同的子节点，二者仅仅是顺序不同，为了提高性能，我们需要复用这些节点，通过 DOM 的移动来完成子节点的更新 。\",\"问题\",\"回答\",\"如何确定哪些节点可复用\",\"新旧节点中 key 值相同\",\"如何判断一个节点是否需要移动\",\"节点在旧 children 中的索引小于最大索引值 lastIndex\",\"一个节点该移动到哪里\",\"新 children 的顺序就是更新后真实 DOM 节点应有的顺序\",\"如何确定新增节点\",\"新节点没有在旧的一组子节点中找到可复用的节点\",\"如何确定卸载节点\",\"遍历完旧的 children 依然存在新 children 中没有的节点\",\"const oldChildren = n1.children; const newChildren = n2.children; // 用来存储寻找过程中遇到的最大索引值 let lastIndex = 0; for (let i = 0; i < newChildren.length; i++) { const newVNode = newChildren[i]; let j = 0; // 在第一层循环中定义变量 find，代表是否在旧的一组子节点中找到可复用的节点， // 初始值为 false，代表没找到 let find = false; for (j; j < oldChildren.length; j++) { const oldVNode = oldChildren[j]; // 如果找到了具有相同 key 值的两个节点，说明可以复用，但仍然需要调用patch函数更新 if (newVNode.key === oldVNode.key) { // 一旦找到可复用的节点，则将变量 find 的值设为 true find = true; patch(oldVNode, newVNode, container); // 如果当前找到的节点在旧 children 中的索引小于最大索引值lastIndex， // 说明该节点对应的真实 DOM 需要移动 if (j < lastIndex) { // 先获取 newVNode 的前一个 vnode，即 prevVNode const prevVNode = newChildren[i - 1]; // 如果 prevVNode 不存在，则说明当前 newVNode 是第一个节点，它不需要移动 if (prevVNode) { // 由于我们要将 newVNode 对应的真实 DOM 移动到prevVNode 对应真实 DOM后面 // 所以我们需要获取 prevVNode 所对应真实 DOM 的下一个兄弟节点，并将其作为锚点 const anchor = prevVNode.el.nextSibling; // 调用 insert 方法将 newVNode 对应的真实 DOM 插入到锚点元素前面， // 也就是 prevVNode 对应真实 DOM 的后面 insert(newVNode.el, container, anchor); } } else { // 如果当前找到的节点在旧 children 中的索引不小于最大索引值， // 则更新 lastIndex 的值 lastIndex = j; } break; } } // 如果代码运行到这里，find 仍然为 false， // 说明当前 newVNode 没有在旧的一组子节点中找到可复用的节点 // 也就是说，当前 newVNode 是新增节点，需要挂载 if (!find) { // 为了将节点挂载到正确位置，我们需要先获取锚点元素 // 首先获取当前 newVNode 的前一个 vnode 节点 const prevVNode = newChildren[i - 1]; let anchor = null; if (prevVNode) { // 如果有前一个 vnode 节点，则使用它的下一个兄弟节点作为锚点元素 anchor = prevVNode.el.nextSibling; } else { // 如果没有前一个 vnode 节点，说明即将挂载的新节点是第一个子节点 // 这时我们使用容器元素的 firstChild 作为锚点 anchor = container.firstChild; } // 挂载 newVNode patch(null, newVNode, container, anchor); } } // 遍历旧的一组子节点 for (let i = 0; i < oldChildren.length; i++) { const oldVNode = oldChildren[i]; // 拿旧子节点 oldVNode 去新的一组子节点中寻找具有相同 key 值的节点 const has = newChildren.find((vnode) => vnode.key === oldVNode.key); if (!has) { // 如果没有找到具有相同 key 值的节点，则说明需要删除该节点 // 调用 unmount 函数将其卸载 unmount(oldVNode); } }\",\"如果找到了具有相同 key 值的两个节点，说明可以复用，但仍然需要调用 patch 函数更新，因为新的虚拟节点子节点的内容可能发生改变。\",\"移动节点指的是，移动一个虚拟节点所对应的真实 DOM 节点，并不是移动虚拟节点本身。\",\"简单 Diff 算法的核心逻辑是，拿新的一组子节点中的节点去旧的一组子节点中寻找可复用的节点。如果找到了，则记录该节点的位置索引。我们把这个位置索引称为最大索引。在整个更新过程中，如果一 个节点的索引值小于最大索引，则说明该节点对应的真实 DOM 元素需要移动。\"]},\"1963\":{\"h\":\"二、双端 Diff\"},\"1964\":{\"h\":\"1. 简单 Diff 存在的问题\",\"t\":[\"简单 Diff 算法的问题在于，它对 DOM 的移动操作并不是最优的。如下图所示的节点，如果使用简单 Diff 来更新，会发生两次 DOM 移动操作。\",\"image-20240906111147956\",\"然而我们很容易的可以看出，其实只需要一步 DOM 节点的移动操作就可以完成更新，即只需要把真实 DOM 节点 p-3 移动到真实 DOM 节点 p-1 前面。\"]},\"1965\":{\"h\":\"2. 双端 Diff 的理想情况\",\"t\":[\"顾名思义，双端 Diff 算法是一种同时对新旧两组子节点的两个端点进行比较的算法。因此我们需要四个索引值，分别指向新旧两组子节点的端点，如图所示。\",\"image-20240906155514474\",\"理想情况下假设双端 Diff 算法的每一轮比较都会命中四个步骤中的一种，此时其过程如下图所示\",\"双端Diff的过程\",\"对应的代码实现如下\",\"function patchKeyedChildren(n1, n2, container) { const oldChildren = n1.children; const newChildren = n2.children; // 四个索引值 let oldStartIdx = 0; let oldEndIdx = oldChildren.length - 1; let newStartIdx = 0; let newEndIdx = newChildren.length - 1; // 四个索引指向的 vnode 节点 let oldStartVNode = oldChildren[oldStartIdx]; let oldEndVNode = oldChildren[oldEndIdx]; let newStartVNode = newChildren[newStartIdx]; let newEndVNode = newChildren[newEndIdx]; while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) { if (oldStartVNode.key === newStartVNode.key) { // 第一步：oldStartVNode 和 newStartVNode 比较（不用移动） // 1. patch patch(oldStartVNode, newStartVNode, container); // 2. 更新相关索引，指向下一个位置 oldStartVNode = oldChildren[++oldStartIdx]; newStartVNode = newChildren[++newStartIdx]; } else if (oldEndVNode.key === newEndVNode.key) { // 第二步：oldEndVNode 和 newEndVNode 比较（不用移动） patch(oldEndVNode, newEndVNode, container); oldEndVNode = oldChildren[--oldEndIdx]; newEndVNode = newChildren[--newEndIdx]; } else if (oldStartVNode.key === newEndVNode.key) { // 第三步：oldStartVNode 和 newEndVNode 比较（需要移动） patch(oldStartVNode, newEndVNode, container); // 将oldStartVNode移动到oldEndVNode的后面 insert(oldStartVNode.el, container, oldEndVNode.el.nextSibling); oldStartVNode = oldChildren[++oldStartIdx]; newEndVNode = newChildren[--newEndIdx]; } else if (oldEndVNode.key === newStartVNode.key) { // 第四步：oldEndVNode 和 newStartVNode 比较（需要移动） patch(oldEndVNode, newStartVNode, container); // oldEndVNode.el 移动到 oldStartVNode.el 前面 insert(oldEndVNode.el, container, oldStartVNode.el); // 移动 DOM 完成后，更新索引值，并指向下一个位置 oldEndVNode = oldChildren[--oldEndIdx]; newStartVNode = newChildren[++newStartIdx]; } } }\"]},\"1966\":{\"h\":\"3. 双端 Diff 的非理想情况\",\"t\":[\"双端 Diff 算法的每一轮比较不一定都会命中四个步骤中的一种，如下图所示，四次比较都不能命中从而进行复用，此时的做法应该是：拿新的一组子节点中的头部节点去旧的一组子节点中寻找，如果存在说明此节点可复用，将其移动到旧子节点首节点的前面；如果没有找到，说明此节点为新增节点，将其挂载到头部。\",\"可复用的情况\",\"新增的情况\",\"另外还存在一个问题是按照这四个步骤遍历完之后，新旧节点中可能存在还未处理的节点，如果存在新子节点未处理，说明需要对其进行挂载；而存在旧子节点未处理，说明需要对其进行卸载。\",\"function patchKeyedChildren(n1, n2, container) { const oldChildren = n1.children; const newChildren = n2.children; // 四个索引值 let oldStartIdx = 0; let oldEndIdx = oldChildren.length - 1; let newStartIdx = 0; let newEndIdx = newChildren.length - 1; // 四个索引指向的 vnode 节点 let oldStartVNode = oldChildren[oldStartIdx]; let oldEndVNode = oldChildren[oldEndIdx]; let newStartVNode = newChildren[newStartIdx]; let newEndVNode = newChildren[newEndIdx]; while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) { // 增加两个判断分支，如果头尾部节点为 undefined，则说明该节点已经被处理过了，直接跳到下一个位置 if (!oldStartVNode) { oldStartVNode = oldChildren[++oldStartIdx]; } else if (!oldEndVNode) { oldEndVNode = oldChildren[--oldEndIdx]; } else if (oldStartVNode.key === newStartVNode.key) { // 省略部分代码 } else if (oldEndVNode.key === newEndVNode.key) { // 省略部分代码 } else if (oldStartVNode.key === newEndVNode.key) { // 省略部分代码 } else if (oldEndVNode.key === newStartVNode.key) { // 省略部分代码 } else { const idxInOld = oldChildren.findIndex((node) => node.key === newStartVNode.key); // 1. 存在可复用的节点 if (idxInOld > 0) { const vnodeToMove = oldChildren[idxInOld]; patch(vnodeToMove, newStartVNode, container); insert(vnodeToMove.el, container, oldStartVNode.el); oldChildren[idxInOld] = undefined; newStartVNode = newChildren[++newStartIdx]; } else { // 2. 新增节点 // 将 newStartVNode 作为新节点挂载到头部，使用当前头部节点oldStartVNode.el 作为锚点 patch(null, newStartVNode, container, oldStartVNode.el); } newStartVNode = newChildren[++newStartIdx]; } } // 循环结束后检查索引值的情况， if (oldEndIdx < oldStartIdx && newStartIdx <= newEndIdx) { // 如果满足条件，则说明有新的节点遗留，需要挂载它们 // 3. 新增节点 for (let i = newStartIdx; i <= newEndIdx; i++) { patch(null, newChildren[i], container, oldStartVNode.el); } } else if (newEndIdx < newStartIdx && oldStartIdx <= oldEndIdx) { // 4. 卸载节点（移除操作） for (let i = oldStartIdx; i <= oldEndIdx; i++) { unmount(oldChildren[i]); } } }\",\"vue2 中使用的就是这种双端 Diff 的算法\"]},\"1967\":{\"h\":\"三、快速 Diff\"},\"1968\":{\"h\":\"1. 特殊情况\",\"t\":[\"快速 Diff 算法借鉴了纯文本 Diff 算法中预处理的步骤，对 Diff 过程两组子节点中 相同的前置和后置节点 优先进行处理，因为这部分前后的相对位置不变，不需要进行移动，只需要在两者之间打补丁即可。\",\"相同的前置节点和后置节点\",\"在所有旧子节点处理完毕，而新子节点中还存在未被处理的节点，则这些遗留的节点应该作为新增节点被 挂载 。\",\"在所有新子节点处理完毕，而旧子节点中还存在未被处理的节点，则这些遗留的节点应该被 卸载 。\",\"function patchKeyedChildren(n1, n2, container) { const newChildren = n2.children; const oldChildren = n1.children; // 1. 更新相同的前置节点 let j = 0; let oldVNode = oldChildren[j]; let newVNode = newChildren[j]; while (oldVNode.key === newVNode.key) { patch(oldVNode, newVNode, container); j++; oldVNode = oldChildren[j]; newVNode = newChildren[j]; } // 2. 更新相同的后置节点 // 由于新旧两组子节点的数量可能不同，所以我们需要两个索引 let oldEnd = oldChildren.length - 1; let newEnd = newChildren.length - 1; oldVNode = oldChildren[oldEnd]; newVNode = newChildren[newEnd]; while (oldVNode.key === newVNode.key) { patch(oldVNode, newVNode, container); oldEnd--; newEnd--; oldVNode = oldChildren[oldEnd]; newVNode = newChildren[newEnd]; } // 3. 需被挂载的节点 if (j > oldEnd && j <= newEnd) { // 锚点的索引 const anchorIndex = newEnd + 1; // 锚点元素 const anchor = anchorIndex < newChildren.length ? newChildren[anchorIndex].el : null; // 采用 while 循环，调用 patch 函数逐个挂载新增节点 while (j <= newEnd) { patch(null, newChildren[j++], container, anchor); } } // 4. 需被卸载的节点 else if (j > newEnd && j <= oldEnd) { // j -> oldEnd 之间的节点应该被卸载 while (j <= oldEnd) { unmount(oldChildren[j++]); } } }\"]},\"1969\":{\"h\":\"2. 一般情况处理\",\"t\":[\"在特殊情况下，给出的例子比较理想化，当 处理完相同的前置节点或后置节点后，新旧两组子节点中总会有一组子节点全部被处理完毕。在这种情况下，只需要简单地挂载、卸载节点即可。但一般情况下情况会更加复杂，如图所示：\",\"一般情况\",\"在处理完相同的前置和后置节点之后，剩下的依然是两组子节点序列。按照通用思路思考，接下来需要找出可复用的节点，是否需要移动，移动到什么位置以及需要进行挂载和删除的其他节点。\",\"这里大体的思路是：\",\"构造 source 数组：表示新子节点在旧子节点中的位置索引，长度为新子节点中尚未处理的节点数。\",\"source数组\",\"构造最长递增子序列：依据 source 数组构造最长递增子序列，此序列表示其中节点的相对位置没有发生变化。\",\"seq为最长递增子序列的索引数组\",\"即找出更新前后顺序没有发生变化的节点，移动剩下的节点从而完成最小的移动次数。\",\"function patchKeyedChildren(n1, n2, container) { const newChildren = n2.children; const oldChildren = n1.children; let j = 0; let oldVNode = oldChildren[j]; let newVNode = newChildren[j]; while (oldVNode.key === newVNode.key) { patch(oldVNode, newVNode, container); j++; oldVNode = oldChildren[j]; newVNode = newChildren[j]; } let oldEnd = oldChildren.length - 1; let newEnd = newChildren.length - 1; oldVNode = oldChildren[oldEnd]; newVNode = newChildren[newEnd]; while (oldVNode.key === newVNode.key) { patch(oldVNode, newVNode, container); oldEnd--; newEnd--; oldVNode = oldChildren[oldEnd]; newVNode = newChildren[newEnd]; } if (j > oldEnd && j <= newEnd) { const anchorIndex = newEnd + 1; const anchor = anchorIndex < newChildren.length ? newChildren[anchorIndex].el : null; while (j <= newEnd) { patch(null, newChildren[j++], container, anchor); } } else if (j > newEnd && j <= oldEnd) { while (j <= oldEnd) { unmount(oldChildren[j++]); } } else { // 构造 source 数组 // 长度为新的一组子节点中剩余未处理节点的数量，默认值为-1 const count = newEnd - j + 1; const source = new Array(count).fill(-1); const oldStart = j; const newStart = j; // 用来标志是否需要进行移动 let moved = false; // 记录最大索引值 let pos = 0; // 构建索引表，key为新子节点的key，value为其索引 const keyIndex = {}; for (let i = newStart; i <= newEnd; i++) { keyIndex[newChildren[i].key] = i; } // 新增 patched 变量，代表更新过的节点数量 let patched = 0; // 遍历旧的一组子节点中剩余未处理的节点 for (let i = oldStart; i <= oldEnd; i++) { oldVNode = oldChildren[i]; // 如果更新过的节点数量小于等于需要更新的节点数量，则执行更新 if (patched <= count) { // 与旧子节点具有相同key的新子节点的索引 const k = keyIndex[oldVNode.key]; if (typeof k !== 'undefined') { newVNode = newChildren[k]; patch(oldVNode, newVNode, container); // k - newStart表示相对索引，newStart的索引表示为0 source[k - newStart] = i; if (k < pos) { // 需要进行移动 moved = true; } else { pos = k; } } else { // 没找到，将旧子节点进行卸载 unmount(oldVNode); } } else { // 如果更新过的节点数量大于需要更新的节点数量，则卸载多余的节点 unmount(oldVNode); } } // 进行节点的移动 if (moved) { // 获取最长递增子序列的索引数组 const seq = lis(sources); // s 指向最长递增子序列的最后一个元素 let s = seq.length - 1; // i 指向新的一组子节点的最后一个元素 let i = count - 1; for (i; i >= 0; i--) { if (source[i] === -1) { // 说明索引为 i 的节点是全新的节点，应该将其挂载 // 该节点在新 children 中的真实位置索引 const pos = i + newStart; const newVNode = newChildren[pos]; // 该节点的下一个节点的位置索引 const nextPos = pos + 1; // 锚点 const anchor = nextPos < newChildren.length ? newChildren[nextPos].el : null; // 挂载 patch(null, newVNode, container, anchor); } else if (i !== seq[s]) { // 说明该节点需要移动 // 该节点在新的一组子节点中的真实位置索引 const pos = i + newStart; const newVNode = newChildren[pos]; // 该节点的下一个节点的位置索引 const nextPos = pos + 1; // 锚点 const anchor = nextPos < newChildren.length ? newChildren[nextPos].el : null; // 移动 insert(newVNode.el, container, anchor); } else { // 当 i === seq[s] 时，说明该位置的节点不需要移动 // 并让 s 指向下一个位置 s--; } } } } }\",\"在构造 source 数组时，为了提高性能，先遍历新子节点构造出索引表；然后遍历旧子节点根据相同的 key 值可以从索引表中取出对应的节点的索引，从而可以得出新子节点在旧子节点中的位置索引。\",\"索引表\",\"判断是否需要进行移动的方式与简单 Diff 相同——节点在旧 children 中的索引小于最大索引值。\"]},\"1970\":{\"c\":[\"源码解析\"]},\"1971\":{\"c\":[\"vue\"]},\"1972\":{\"h\":\"7. 编译器\",\"t\":[\"编译器将 源代码 翻译为 目标代码 的过程叫作编译（compile）。完整的编译过程通常包含词法分析、语法分析、语义分析、中间代码生成、优化、目标代码生成等步骤。\",\"image-20240816140012658\",\"Vue.js 模板编译器的目标代码其实就是渲染函数。具体而言包含以下几部分：\",\"image-20240816140132689\",\"其中关键函数包含已下三种：\",\"image-20240816140455521\",\"const templateAST = parse(template); // 解析器 const jsAST = transform(templateAST); // 转换器 const code = generate(jsAST); // 生成器\"]},\"1973\":{\"h\":\"一、 解析器\",\"t\":[\"将用户编写的模板解析为模板 AST\"]},\"1974\":{\"h\":\"1. 分阶段实现\",\"t\":[\"利用状态机在 不同状态之间的迁移 完成词法分析，形成 Token 列表\",\"状态迁移过程\",\"// 定义状态机的状态 const State = { initial: 1, // 初始状态 tagOpen: 2, // 标签开始状态 tagName: 3, // 标签名称状态 text: 4, // 文本状态 tagEnd: 5, // 结束标签状态 tagEndName: // 结束标签名称状态 } // 一个辅助函数，用于判断是否是字母 function isAlpha(char) { return char >= 'a' && char <= 'z' || char >= 'A' && char <= 'Z' } // 接收模板字符串作为参数，并将模板切割为 Token 返回 function tokenize(str) { // 状态机的当前状态：初始状态 let currentState = State.initial // 用于缓存字符 const chars = [] // 生成的 Token 会存储到 tokens 数组中，并作为函数的返回值返回 const tokens = [] // 使用 while 循环开启自动机，只要模板字符串没有被消费尽，自动机就会一直运行 while(str) { // 查看第一个字符，注意，这里只是查看，没有消费该字符 const char = str[0] // switch 语句匹配当前状态 switch (currentState) { // 状态机当前处于初始状态 case State.initial: // 遇到字符 < if (char === '<') { // 1. 状态机切换到标签开始状态 currentState = State.tagOpen // 2. 消费字符 < str = str.slice(1) } else if (isAlpha(char)) { // 1. 遇到字母，切换到文本状态 currentState = State.text // 2. 将当前字母缓存到 chars 数组 chars.push(char) // 3. 消费当前字符 str = str.slice(1) } break // 状态机当前处于标签开始状态 case State.tagOpen: if (isAlpha(char)) { // 1. 遇到字母，切换到标签名称状态 currentState = State.tagName // 2. 将当前字符缓存到 chars 数组 chars.push(char) // 3. 消费当前字符 str = str.slice(1) } else if (char === '/') { // 1. 遇到字符 /，切换到结束标签状态 currentState = State.tagEnd // 2. 消费字符 / str = str.slice(1) } break // 状态机当前处于标签名称状态 case State.tagName: if (isAlpha(char)) { // 1. 遇到字母，由于当前处于标签名称状态，所以不需要切换状态， // 但需要将当前字符缓存到 chars 数组 chars.push(char) // 2. 消费当前字符 str = str.slice(1) } else if (char === '>') { // 1.遇到字符 >，切换到初始状态 currentState = State.initial // 2. 同时创建一个标签 Token，并添加到 tokens 数组中 // 注意，此时 chars 数组中缓存的字符就是标签名称 tokens.push({ type: 'tag', name: chars.join('') }) // 3. chars 数组的内容已经被消费，清空它 chars.length = // 4. 同时消费当前字符 > str = str.slice(1) } break // 状态机当前处于文本状态 case State.text: if (isAlpha(char)) { // 1. 遇到字母，保持状态不变，但应该将当前字符缓存到 chars 数组 chars.push(char) // 2. 消费当前字符 str = str.slice(1) } else if (char === '<') { // 1. 遇到字符 <，切换到标签开始状态 currentState = State.tagOpen // 2. 从 文本状态 --> 标签开始状态，此时应该创建文本 Token， 并添加到 tokens 数组 // 注意，此时 chars 数组中的字符就是文本内容 tokens.push({ type: 'text', content: chars.join('') }) // 3. chars 数组的内容已经被消费，清空它 chars.length = // 4. 消费当前字符 str = str.slice(1) } break // 状态机当前处于标签结束状态 case State.tagEnd: if (isAlpha(char)) { // 1. 遇到字母，切换到结束标签名称状态 currentState = State.tagEndName // 2. 将当前字符缓存到 chars 数组 chars.push(char) // 3. 消费当前字符 str = str.slice(1) } break // 状态机当前处于结束标签名称状态 case State.tagEndName: if (isAlpha(char)) { // 1. 遇到字母，不需要切换状态，但需要将当前字符缓存到 chars数组 chars.push(char) // 2. 消费当前字符 str = str.slice(1) } else if (char === '>') { // 1. 遇到字符 >，切换到初始状态 currentState = State.initial // 2. 从 结束标签名称状态 --> 初始状态，应该保存结束标签名称Token // 注意，此时 chars 数组中缓存的内容就是标签名称 tokens.push({ type: 'tagEnd', name: chars.join('') }) // 3. chars 数组的内容已经被消费，清空它 chars.length = // 4. 消费当前字符 str = str.slice(1) } break } } // 最后，返回 tokens return tokens }\",\"严格按照状态迁移过程编写，但其中可优化的点很多\",\"根据 Token 列表构造 AST\",\"一棵用于描述 HTML 的 AST 将拥有与 HTML 标签非常相似的树型结构，根据 Token 列表构建 AST 的过程，其实就是对 Token 列表进行扫 描的过程。从第一个 Token 开始，顺序地扫描整个 Token 列表，直到列表中的所有 Token 处理完毕。\",\"imageonline-co-gifimage\",\"// parse 函数接收模板作为参数 function parse(str) { // 首先对模板进行标记化，得到 tokens const tokens = tokenize(str); // 创建 Root 根节点 const root = { type: 'Root', children: [], }; // 创建 elementStack 栈，起初只有 Root 根节点 const elementStack = [root]; // 开启一个 while 循环扫描 tokens，直到所有 Token 都被扫描完毕为止 while (tokens.length) { // 获取当前栈顶节点作为父节点 parent const parent = elementStack[elementStack.length - 1]; // 当前扫描的 Token const t = tokens[0]; switch (t.type) { case 'tag': // 如果当前 Token 是开始标签，则创建 Element 类型的 AST 节点 const elementNode = { type: 'Element', tag: t.name, children: [], }; // 将其添加到父级节点的 children 中 parent.children.push(elementNode); // 将当前节点压入栈 elementStack.push(elementNode); break; case 'text': // 如果当前 Token 是文本，则创建 Text 类型的 AST 节点 const textNode = { type: 'Text', content: t.content, }; // 将其添加到父节点的 children 中 parent.children.push(textNode); break; case 'tagEnd': // 遇到结束标签，将栈顶节点弹出 elementStack.pop(); break; } // 消费已经扫描过的 token tokens.shift(); } // 最后返回 AST return root; }\",\"实例测试：<div><p>Vue</p><p>Template</p></div>\",\"Tokens\",\"const tokens = [ { type: 'tag', name: 'div' }, // div 开始标签节点 { type: 'tag', name: 'p' }, // p 开始标签节点 { type: 'text', content: 'Vue' }, // 文本节点 { type: 'tagEnd', name: 'p' }, // p 结束标签节点 { type: 'tag', name: 'p' }, // p 开始标签节点 { type: 'text', content: 'Template' }, // 文本节点 { type: 'tagEnd', name: 'p' }, // p 结束标签节点 { type: 'tagEnd', name: 'div' }, // div 结束标签节点 ];\",\"AST\",\"const ast = { // AST 的逻辑根节点 type: 'Root', children: [ // 模板的 div 根节点 { type: 'Element', tag: 'div', children: [ // div 节点的第一个子节点 p { type: 'Element', tag: 'p', // p 节点的文本节点 children: [ { type: 'Text', content: 'Vue', }, ], }, // div 节点的第二个子节点 p { type: 'Element', tag: 'p', // p 节点的文本节点 children: [ { type: 'Text', content: 'Template', }, ], }, ], }, ], };\"]},\"1975\":{\"h\":\"二、转换器\",\"t\":[\"编译的目标是将模板编译为渲染函数，而渲染函数是用 JavaScript 代码描述的，所以需要将模板 AST 转换为用于描述渲染函数的 JavaScript AST。\",\"如上例所用模板，其对应的渲染函数为：\",\"function render() { return h('div', [h('p', 'Vue'), h('p', 'Template')]); }\",\"则转换后的 JavaScript AST 应该如下所示：\",\"const FunctionDeclNode = { type: 'FunctionDecl', // 代表该节点是函数声明 // 函数的名称是一个标识符，标识符本身也是一个节点 id: { type: 'Identifier', name: 'render', // name 用来存储标识符的名称，在这里它就是渲染函数的名称 render }, params: [], // 参数，目前渲染函数还不需要参数，所以这里是一个空数组 // 渲染函数的函数体只有一个语句，即 return 语句 body: [ { type: 'ReturnStatement', // 最外层的 h 函数调用 return: { type: 'CallExpression', callee: { type: 'Identifier', name: 'h' }, arguments: [ // 第一个参数是字符串字面量 'div' { type: 'StringLiteral', value: 'div', }, // 第二个参数是一个数组 { type: 'ArrayExpression', elements: [ // 数组的第一个元素是 h 函数的调用 { type: 'CallExpression', callee: { type: 'Identifier', name: 'h' }, arguments: [ // 该 h 函数调用的第一个参数是字符串字面量 { type: 'StringLiteral', value: 'p' }, // 第二个参数也是一个字符串字面量 { type: 'StringLiteral', value: 'Vue' }, ], }, // 数组的第二个元素也是 h 函数的调用 { type: 'CallExpression', callee: { type: 'Identifier', name: 'h' }, arguments: [ // 该 h 函数调用的第一个参数是字符串字面量 { type: 'StringLiteral', value: 'p' }, // 第二个参数也是一个字符串字面量 { type: 'StringLiteral', value: 'Template' }, ], }, ], }, ], }, }, ], };\"]},\"1976\":{\"h\":\"1. 深度优先遍历\",\"t\":[\"为了对 AST 进行转换，我们需要能访问 AST 的每一个节点，这样才有机会对特定节点进行修改、替换、删除等操作。因此首先需要编写一个深度优先的遍历算法，实现对 AST 中节点的访问。\",\"function traverseNode(ast) { // 当前节点，ast 本身就是 Root 节点 const currentNode = ast; // Todo：需要进行的操作 // 操作1 // 操作2 // ... // 如果有子节点，则递归地调用 traverseNode 函数进行遍历 const children = currentNode.children; if (children) { for (let i = 0; i < children.length; i++) { traverseNode(children[i]); } } }\"]},\"1977\":{\"h\":\"2. 插件化架构\",\"t\":[\"如上述代码光标处所示，如果将所有需要进行的转换操作全部写与traverseNode函数中，显得过于臃肿和耦合，为此利用回调函数的机制将此部分提取出去进行解耦。\",\"// 接收第二个参数 context function traverseNode(ast, context) { const currentNode = ast; // context.nodeTransforms 是一个数组，其中每一个元素都是一个函数 const transforms = context.nodeTransforms; for (let i = 0; i < transforms.length; i++) { // 将当前节点 currentNode 和 context 都传递给 nodeTransforms 中注册的回调函数 transforms[i](currentNode, context); } const children = currentNode.children; if (children) { for (let i = 0; i < children.length; i++) { traverseNode(children[i], context); } } } function transform(ast) { // 在 transform 函数内创建 context 对象 const context = { // 注册 nodeTransforms 数组,用来保存需要进行的转换操作 nodeTransforms: [transformElement, transformText], }; // 调用 traverseNode 完成转换 traverseNode(ast, context); }\",\"Context指的是上下文对象，是程序在 某个范围内的全局变量 。为其添加额外的上下文信息。\",\"function transform(ast) { const context = { // 增加 currentNode，用来存储当前正在转换的节点 currentNode: null, // 增加 childIndex，用来存储当前节点在父节点的 children 中的位置索引 childIndex: 0, // 增加 parent，用来存储当前转换节点的父节点 parent: null, // 用于替换节点的函数，接收新节点作为参数 replaceNode(node) { // 为了替换节点，需要修改 AST // 找到当前节点在父节点的 children 中的位置：context.childIndex // 然后使用新节点替换即可 context.parent.children[context.childIndex] = node; // 由于当前节点已经被新节点替换掉了，因此我们需要将 currentNode 更新为新节点 context.currentNode = node; }, // 用于删除当前节点 removeNode() { if (context.parent) { // 调用数组的 splice 方法，根据当前节点的索引删除当前节点 context.parent.children.splice(context.childIndex, 1); // 将 context.currentNode 置空 context.currentNode = null; } }, nodeTransforms: [transformElement, transformText], }; traverseNode(ast, context); }\",\"在合适的地方设置转换上下文对象中的数据\",\"function traverseNode(ast, context) { // 设置当前转换的节点信息 context.currentNode context.currentNode = ast; const transforms = context.nodeTransforms; for (let i = 0; i < transforms.length; i++) { transforms[i](context.currentNode, context); // 由于任何转换函数都可能移除当前节点，因此每个转换函数执行完毕后， // 都应该检查当前节点是否已经被移除，如果被移除了，直接返回即可 if (!context.currentNode) return; } const children = context.currentNode.children; if (children) { for (let i = 0; i < children.length; i++) { // 递归地调用 traverseNode 转换子节点之前，将当前节点设置为父节点 context.parent = context.currentNode; // 设置位置索引 context.childIndex = i; // 递归地调用时，将 context 透传 traverseNode(children[i], context); } } }\",\"在转换 AST 节点的过程中，往往需要根据其子节点的情况来决定如何对当前节点进行转换。这就要求父节点的转换操作必须等待其所有子节点全部转换完毕后再执行。为此做出如下设计：\",\"image-20240818162152462\",\"对节点的访问分为两个阶段，即进入阶段和退出阶段：\",\"function traverseNode(ast, context) { context.currentNode = ast; // 1. 增加退出阶段的回调函数数组 const exitFns = []; const transforms = context.nodeTransforms; for (let i = 0; i < transforms.length; i++) { // 2. 转换函数可以返回另外一个函数，该函数即作为退出阶段的回调函数 const onExit = transforms[i](context.currentNode, context); if (onExit) { // 将退出阶段的回调函数添加到 exitFns 数组中 exitFns.push(onExit); } if (!context.currentNode) return; } const children = context.currentNode.children; if (children) { for (let i = 0; i < children.length; i++) { context.parent = context.currentNode; context.childIndex = i; traverseNode(children[i], context); } } // 在节点处理的最后阶段执行缓存到 exitFns 中的回调函数 // 注意，这里我们要反序执行 let i = exitFns.length; while (i--) { exitFns[i](); } }\",\"在编写转换函数时，可以将转换逻辑编 写在退出阶段的回调函数中，从而保证在对当前访问的节点进行转换之前，其子节点一定全部处理完毕。\",\"function transformElement(node, context) { // 进入节点 // 返回一个会在退出节点时执行的回调函数 return () => { // 在这里编写退出节点的逻辑，当这里的代码运行时，当前转换节点的子节点一定处理完毕了 }; }\"]},\"1978\":{\"h\":\"3. AST 的转换\",\"t\":[\"用来创建 JavaScript AST 节点的辅助函数\",\"// 用来创建 StringLiteral 节点 function createStringLiteral(value) { return { type: 'StringLiteral', value, }; } // 用来创建 Identifier 节点 function createIdentifier(name) { return { type: 'Identifier', name, }; } // 用来创建 ArrayExpression 节点 function createArrayExpression(elements) { return { type: 'ArrayExpression', elements, }; } // 用来创建 CallExpression 节点 function createCallExpression(callee, arguments) { return { type: 'CallExpression', callee: createIdentifier(callee), arguments, }; }\",\"转换操作\",\"// 转换文本节点 function transformText(node) { // 如果不是文本节点，则什么都不做 if (node.type !== 'Text') { return } // 文本节点对应的 JavaScript AST 节点其实就是一个字符串字面量， // 因此只需要使用 node.content 创建一个 StringLiteral 类型的节点即可 // 最后将文本节点对应的 JavaScript AST 节点添加到 node.jsNode 属性下 node.jsNode = createStringLiteral(node.content) } // 转换标签节点 function transformElement(node) { // 将转换代码编写在退出阶段的回调函数中， // 这样可以保证该标签节点的子节点全部被处理完毕 return () => { // 如果被转换的节点不是元素节点，则什么都不做 if (node.type !== 'Element') { return } // 1. 创建 h 函数调用语句, // h 函数调用的第一个参数是标签名称，因此我们以 node.tag 来创建一个字符串字面量节点作为第一个参数 const callExp = createCallExpression('h', [ createStringLiteral(node.tag) ]) // 2. 处理 h 函数调用的参数 node.children.length === // 如果当前标签节点只有一个子节点，则直接使用子节点的 jsNode 作为参数 ? callExp.arguments.push(node.children[0].jsNode) // 如果当前标签节点有多个子节点，则创建一个 ArrayExpression 节点作为参数 : callExp.arguments.push( // 数组的每个元素都是子节点的 jsNode createArrayExpression(node.children.map(c => c.jsNode)) ) // 3. 将当前标签节点对应的 JavaScript AST 添加到 jsNode 属性下 node.jsNode = callExp } } // 转换 Root 根节点 function transformRoot(node) { // 将逻辑编写在退出阶段的回调函数中，保证子节点全部被处理完毕 return () => { // 如果不是根节点，则什么都不做 if (node.type !== 'Root') { return } // node 是根节点，根节点的第一个子节点就是模板的根节点， // 当然，这里我们暂时不考虑模板存在多个根节点的情况 const vnodeJSAST = node.children[0].jsNode // 创建 render 函数的声明语句节点，将 vnodeJSAST 作为 render 函数体的返回语句 node.jsNode = { type: 'FunctionDecl', id: { type: 'Identifier', name: 'render' }, params: [], body: [ { type: 'ReturnStatement', return: vnodeJSAST } ] } } }\",\"在转换标签节点时，我们需要将转换逻辑编写在退出阶段的回调函数内，这样才能保证其子节点全部被处理完毕；\",\"无论是文本节点还是标签节点，它们转换后的 JavaScript AST 节点 都存储在节点的 node.jsNode 属性下。\"]},\"1979\":{\"h\":\"三、生成器\",\"t\":[\"根据 JavaScript AST 生成渲染函数代码，代码生成本质上是字符串拼接的艺术。与 AST 转换一样，代码生成也需要上下文对象。该上下文对象用来维护代码生成过程中程序的运行状态。\",\"function generate(node) { const context = { // 存储最终生成的渲染函数代码 code: '', // 在生成代码时，通过调用 push 函数完成代码的拼接 push(code) { context.code += code; }, // 当前缩进的级别，初始值为 0，即没有缩进 currentIndent: 0, // 该函数用来换行，即在代码字符串的后面追加 \\\\n 字符， // 另外，换行时应该保留缩进，所以我们还要追加 currentIndent * 个空格字符 newline() { context.code += '\\\\n' + ` `.repeat(context.currentIndent); }, // 用来缩进，即让 currentIndent 自增后，调用换行函数 indent() { context.currentIndent++; context.newline(); }, // 取消缩进，即让 currentIndent 自减后，调用换行函数 deIndent() { context.currentIndent--; context.newline(); }, }; genNode(node, context); return context.code; } function genNode(node, context) { switch (node.type) { case 'FunctionDecl': genFunctionDecl(node, context); break; case 'ReturnStatement': genReturnStatement(node, context); break; case 'CallExpression': genCallExpression(node, context); break; case 'StringLiteral': genStringLiteral(node, context); break; case 'ArrayExpression': genArrayExpression(node, context); break; } }\",\"各自的生成函数代码\",\"function genFunctionDecl(node, context) { // 从 context 对象中取出工具函数 const { push, indent, deIndent } = context; // node.id 是一个标识符，用来描述函数的名称，即 node.id.name push(`function ${node.id.name} `); push(`(`); // 调用 genNodeList 为函数的参数生成代码 genNodeList(node.params, context); push(`) `); push(`{`); // 缩进 indent(); // 为函数体生成代码，这里递归地调用了 genNode 函数 node.body.forEach((n) => genNode(n, context)); // 取消缩进 deIndent(); push(`}`); } function genNodeList(nodes, context) { const { push } = context; for (let i = 0; i < nodes.length; i++) { const node = nodes[i]; genNode(node, context); if (i < nodes.length - 1) { push(', '); } } } function genArrayExpression(node, context) { const { push } = context; // 追加方括号 push('['); // 调用 genNodeList 为数组元素生成代码 genNodeList(node.elements, context); // 补全方括号 push(']'); } function genReturnStatement(node, context) { const { push } = context; // 追加 return 关键字和空格 push(`return `); // 调用 genNode 函数递归地生成返回值代码 genNode(node.return, context); } function genStringLiteral(node, context) { const { push } = context; // 对于字符串字面量，只需要追加与 node.value 对应的字符串即可 push(`'${node.value}'`); } function genCallExpression(node, context) { const { push } = context; // 取得被调用函数名称和参数列表 const { callee, arguments: args } = node; // 生成函数调用代码 push(`${callee.name}(`); // 调用 genNodeList 生成参数代码 genNodeList(args, context); // 补全括号 push(`)`); }\",\"依然使用之前的实例，最终生成的代码字符串如下：\",\"function render() { return h('div', [h('p', 'Vue'), h('p', 'Template')]); }\"]},\"1980\":{\"c\":[\"源码解析\"]},\"1981\":{\"c\":[\"vue\"]},\"1982\":{\"h\":\"vue3响应式总结\"},\"1983\":{\"h\":\"一、基础响应式\"},\"1984\":{\"h\":\"1. 注册副作用函数\",\"t\":[\"解决 effet 嵌套问题：effectStack\",\"移除副作用函数：deps、cleanup\",\"懒加载：lazy\",\"let activeEffect; let effectStack = []; const effect = function(fn, options = {}) { const effectFn = () => { cleanup(effectFn) activeEffect = effectFn effectStack.push(effectFn) // 将 fn 的执行结果存储到 res 中 const res = fn() // 执行副作用函数收集依赖 effectStack.pop() activeEffect = effectStack[effectStack.length - 1 ] // 将 res 作为 effectFn 的返回值 return res } effectFn.options = options effectFn.deps = [] // 用来存储与此副作用函数相关的依赖数组 if (!options.lazy) { effectFn() } return effectFn } // 清除过时的副作用函数 const cleanup = function(effectFn){ // 遍历 effectFn.deps 数组 for (let i = ; i < effectFn.deps.length; i++) { // deps 是依赖集合 const deps = effectFn.deps[i] // 将 effectFn 从依赖集合中移除 deps.delete(effectFn) } // 最后需要重置 effectFn.deps 数组 effectFn.deps.length = 0 }\"]},\"1985\":{\"h\":\"2. 响应式的代理操作\",\"t\":[\"调度器，当更新依赖时代替副作用函数执行\",\"解决死循环问题：cleanup 和执行副作用函数循环的 set 不同\",\"const obj = new Proxy(data, { get(target, key) { track(target, key); return Reflect.get(target, key, receiver); }, set(target, key, newVal, receiver) { // 设置属性值 const res = Reflect.set(target, key, newVal, receiver); trigger(target, key); return res; }, }); function track(target, key) { if (!activeEffect) return; let depsMap = bucket.get(target); if (!depsMap) { bucket.set(target, (depsMap = new Map())); } let deps = depsMap.get(key); if (!deps) { depsMap.set(key, (deps = new Set())); } deps.add(activeEffect); // deps 就是一个与当前副作用函数存在联系的依赖集合 // 将其添加到 activeEffect.deps 数组中 activeEffect.deps.push(deps); } function trigger(target, key) { const depsMap = bucket.get(target); if (!depsMap) return; const effects = depsMap.get(key); const effectsToRun = new Set(); effects && effects.forEach((effectFn) => { if (effectFn !== activeEffect) { effectsToRun.add(effectFn); } }); effectsToRun.forEach((effectFn) => { // 如果一个副作用函数存在调度器，则调用该调度器，并将副作用函数作为参数传递 if (effectFn.options.scheduler) { effectFn.options.scheduler(effectFn); } else { // 否则直接执行副作用函数（之前的默认行为） effectFn(); } }); }\"]},\"1986\":{\"h\":\"3. 计算属性\",\"t\":[\"懒加载：lazy 为 true，返回副作用函数effectFn\",\"可调度：调度器中设置 dirty 为 true，更新计算属性相关的依赖\",\"缓存：dirty 为 false，说明数据没有变化，直接返回缓存的数据\",\"function computed(getter) { let value; let dirty = true; const effectFn = effect(getter, { lazy: true, scheduler() { if (!dirty) { dirty = true; // 当计算属性依赖的响应式数据变化时，手动调用 trigger 函数触发响应 trigger(obj, 'value'); } }, }); const obj = { get value() { if (dirty) { value = effectFn(); dirty = false; } // 当读取 value 时，手动调用 track 函数进行追踪 track(obj, 'value'); return value; }, }; return obj; }\"]},\"1987\":{\"h\":\"4. watch\",\"t\":[\"function watch(source, cb, options = {}) { let getter; if (typeof source === 'function') { getter = source; } else { getter = () => traverse(source); } let oldValue, newValue; // 竞态问题 let cleanup; function onInvalidate(fn) { cleanup = fn; } const job = () => { // 新值 newValue = effectFn(); if (cleanup) { cleanup(); } cb(newValue, oldValue, onInvalidate); oldValue = newValue; }; const effectFn = effect(() => getter(), { lazy: true, scheduler: () => { if (options.flush === 'post') { const p = Promise.resolve(); p.then(job); } else { job(); } }, }); // immediate if (options.immediate) { job(); } else { // 旧值 oldValue = effectFn(); } }\",\"新旧值：利用调用器获取副作用函数的新值\",\"immediate\",\"竞态问题\",\"watch(obj, async (newValue, oldValue, onInvalidate) => { // 定义一个标志，代表当前副作用函数是否过期，默认为 false，代表没有过期 let expired = false; // 调用 onInvalidate() 函数注册一个过期回调 onInvalidate(() => { // 当过期时，将 expired 设置为 true expired = true; }); // 发送网络请求 const res = await fetch('/path/to/request'); // 只有当该副作用函数的执行没有过期时，才会执行后续操作。 if (!expired) { finalData = res; } });\",\"第一次执行调度器注册过期回调，发送第一次网络请求。\",\"第二次执行调度器先执行过期回调expired = true，这会将第一次网络请求的结果抛弃，然后执行 cb 回调，发送第二个网络请求。\"]},\"1988\":{\"h\":\"二、非原始值响应式\"},\"1989\":{\"h\":\"1. 读取操作\",\"t\":[\"操作\",\"对应的拦截函数\",\"obj.prop、obj[prop]\",\"get\",\"in\",\"has\",\"for...in\",\"ownKeys(ITERATE_KEY)\",\"delete\",\"deleteProperty\"]},\"1990\":{\"h\":\"2. 完善\",\"t\":[\"在set的拦截函数中判断当前操作类型（ADD or SET）\",\"要设置的属性不存在：ADD\",\"要设置的属性存在：SET\",\"添加新旧值对比，不同时才触发响应\",\"delete触发trigger时传递操作类型 DELETE\",\"ADD和DELETE触发ITERATE_KEY相关的副作用函数。\",\"在get拦截函数中访问.raw访问原始数据，只有当 receiver 是 target 的代理对象时才触发更新。\",\"trigger 函数\",\"// 当操作类型为 ADD 或 DELETE 时，需要触发与 ITERATE_KEY 相关联的副作用函数重新执行 if (type === 'ADD' || type === 'DELETE') { const iterateEffects = depsMap.get(ITERATE_KEY); iterateEffects && iterateEffects.forEach((effectFn) => { if (effectFn !== activeEffect) { effectsToRun.add(effectFn); } }); }\",\"reactive\",\"function reactive(obj) { return new Proxy(obj, { get(target, key, receiver) { // 代理对象可以通过 raw 属性访问原始数据 if (key === 'raw') { return target; } track(target, key); return Reflect.get(target, key, receiver); }, set(target, key, newVal, receiver) { const oldVal = target[key]; const type = Object.prototype.hasOwnProperty.call(target, key) ? 'SET' : 'ADD'; const res = Reflect.set(target, key, newVal, receiver); // target === receiver.raw 说明 receiver 就是 target 的代理对象 if (target === receiver.raw) { if (oldVal !== newVal && (oldVal === oldVal || newVal === newVal)) { trigger(target, key, type); } } return res; }, deleteProperty(target, key) { const hadKey = Object.prototype.hasOwnProperty.call(target, key); const res = Reflect.deleteProperty(target, key); if (res && hadKey) { trigger(target, key, 'DELETE'); } return res; }, // 省略其他拦截函数 }); }\"]},\"1991\":{\"h\":\"3. 深浅响应\",\"t\":[\"封装 createReactive 函数，接收一个参数 isShallow，代表是否为浅响应，默认为 false，即非浅响应 。\",\"function createReactive(obj, isShallow = false) { return new Proxy(obj, { get(target, key, receiver) { if (key === 'raw') { return target; } const res = Reflect.get(target, key, receiver); track(target, key); // 如果是浅响应，则直接返回原始值 if (isShallow) { return res; } // 递归响应式 if (typeof res === 'object' && res !== null) { return reactive(res); } return res; }, // 省略其他拦截函数 }); } function reactive(obj) { return createReactive(obj); } function shallowReactive(obj) { return createReactive(obj, true); }\"]},\"1992\":{\"h\":\"4. 深浅只读\",\"t\":[\"增加第三个参数 isReadonly，代表是否只读，默认为 false，即非只读 。\",\"function createReactive(obj, isShallow = false, isReadonly = false) { return new Proxy(obj, { set(target, key, newVal, receiver) { if (isReadonly) { console.warn(`属性 ${key} 是只读的`); return true; } // 省略其他代码 }, deleteProperty(target, key) { if (isReadonly) { console.warn(`属性 ${key} 是只读的`); return true; } // 省略其他代码 }, get(target, key, receiver) { // 非只读的时候才需要建立响应联系 if (!isReadonly) { track(target, key); } if (typeof res === 'object' && res !== null) { return isReadonly ? readonly(res) : reactive(res); } // 省略其他代码 }, // 省略其他拦截函数 }); } function readonly(obj) { return createReactive(obj, false, true); } function shallowReadonly(obj) { return createReactive(obj, true /* shallow */, true); }\"]},\"1993\":{\"h\":\"5. 代理数组\",\"t\":[\"通过索引读取和设置数组\",\"访问或设置length的长度\",\"for...in...、for...of...遍历数组\",\"上述操作的同时会更改length或受到length的影响\",\"function reactive(obj) { return new Proxy(obj,{ // 省略其他拦截函数 set(target, key, newVal, receiver) { if (isReadonly) { console.warn(`属性 ${key} 是只读的`) return true } const oldVal = target[key] const type = Array.isArray(target) // 如果代理目标是数组，则检测被设置的索引值是否小于数组长度， // 如果是，则视作 SET 操作，否则是 ADD 操作 ? Number(key) < target.length ? 'SET' : 'ADD' : Object.prototype.hasOwnProperty.call(target, key) ? 'SET' : 'ADD' const res = Reflect.set(target, key, newVal, receiver) if (target === receiver.raw) { if (oldVal !== newVal && (oldVal === oldVal || newVal === newVal)) { // 增加第四个参数，即触发响应的新值（新的索引值） trigger(target, key, type, newVal) } } return res } ownKeys(target) { // 如果操作目标 target 是数组，则使用 length 属性作为 key 并建立响应联系 track(target, Array.isArray(target) ? 'length' : ITERATE_KEY) return Reflect.ownKeys(target) } // 省略其他拦截函数 }) } function trigger(target, key, type) { // 省略部分内容 // 当操作类型为 ADD 并且目标对象是数组时，应该取出并执行那些与 length属性相关联的副作用函数 if (type === 'ADD' && Array.isArray(target)) { // 取出与 length 相关联的副作用函数 const lengthEffects = depsMap.get('length') // 将这些副作用函数添加到 effectsToRun 中，待执行 lengthEffects && lengthEffects.forEach(effectFn => { if (effectFn !== activeEffect) { effectsToRun.add(effectFn) } }) } if (Array.isArray(target) && key === 'length') { // 对于索引大于或等于新的 length 值的元素， // 需要把所有相关联的副作用函数取出并添加到 effectsToRun 中待执行 depsMap.forEach((effects, key) => { if (key >= newVal) { effects.forEach(effectFn => { if (effectFn !== activeEffect) { effectsToRun.add(effectFn) } }) } }) } // 省略部分内容 }\",\"includes、indexof、lastIndexOf：根据给定的值返回查找结果\",\"arr 里的 this 指向代理对象，拿原始数组中的对象去对比，找不到\",\"const arrayInstrumentations = {}; ['includes', 'indexOf', 'lastIndexOf'].forEach((method) => { const originMethod = Array.prototype[method]; arrayInstrumentations[method] = function (...args) { // this 是代理对象，先在代理对象中查找，将结果存储到 res 中 let res = originMethod.apply(this, args); if (res === false || res === -1) { // res 为 false 说明没找到，通过 this.raw 拿到原始数组，再去其中查找，并更新 res 值 res = originMethod.apply(this.raw, args); } // 返回最终结果 return res; }; }); function createReactive(obj, isShallow = false, isReadonly = false) { return new Proxy(obj, { // 拦截读取操作 get(target, key, receiver) { if (key === 'raw') { return target; } // 如果操作的目标对象是数组，并且 key 存在于arrayInstrumentations 上， // 那么返回定义在 arrayInstrumentations 上的值 if (Array.isArray(target) && arrayInstrumentations.hasOwnProperty(key)) { return Reflect.get(arrayInstrumentations, key, receiver); } if (!isReadonly && typeof key !== 'symbol') { track(target, key); } const res = Reflect.get(target, key, receiver); if (isShallow) { return res; } if (typeof res === 'object' && res !== null) { return isReadonly ? readonly(res) : reactive(res); } return res; }, }); }\",\"push、pop、shift、unshift、splice：隐式修改数组的长度\",\"push 的执行流程：\",\"判断数组的 length 加上参数的 length 有没有超过范围\",\"遍历参数，设置数组内的值，然后 length+1\",\"return length\",\"在 push 的时候，即会读取数组的 length，又会修改数组的 length，如果我们只是执行一次，应该不会出什么问题，但如果我们执行了多次，那就会出现爆栈。\",\"let shouldTrack = true; // 重写数组的 push、pop、shift、unshift 以及 splice 方法 ['push', 'pop', 'shift', 'unshift', 'splice'].forEach((method) => { const originMethod = Array.prototype[method]; arrayInstrumentations[method] = function (...args) { shouldTrack = false; let res = originMethod.apply(this, args); shouldTrack = true; return res; }; }); function track(target, key) { // 当禁止追踪时，直接返回 if (!activeEffect || !shouldTrack) return; // 省略部分代码 }\"]},\"1994\":{\"c\":[\"源码解析\"]},\"1995\":{\"c\":[\"vue\"]},\"1996\":{\"h\":\"vue3挂载流程\"},\"1997\":{\"h\":\"一、整体渲染流程\",\"t\":[\"众所周知 vue 的渲染从其入口函数，即createApp(APP).mount('#app')开始，整体的大概流程如下所示：\",\"// 1.创建app app = createApp(APP) app = ensureRenderer().createApp(APP) createRenderer(rendererOptions).createApp(APP) baseCreateRenderer(rendererOptions).createApp(APP) // 为了实现重载额外包了一层 createAppAPI(render)(App) // 2. 执行app的挂载 app.mount('#app') vnode = createVNode(APP) render(vnode,container) patch(null, vnode, container) processComponent(null, vnode, container, null); mountComponent(vnode, container, null); instance = vnode.component = createComponentInstance(vnode,null) setupComponent(instance) --------------------------------------------------- setupComponent initProps(instance, instance .vnode.props) initSlots(instance, instance .vnode.children) setupStatefulComponent(instance) instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers) setupContext = createSetupContext(instance) setupResult = setup && setup(shallowReadonly(instance.props), setupContext) handleSetupResult(instance, setupResult) instance.setupState = proxyRefs(setupResult) new Proxy(setupResult, shallowUnwrapHandlers); --------------------------------------------------- setupRenderEffect(instance, vnode, container) instance.update = effect(componentUpdateFn, { scheduler: () => { queueJob(instance.update); }, });\"]},\"1998\":{\"h\":\"二、createApp\",\"t\":[\"createApp主要完成了如下三个功能：\",\"export const createApp = (...args) => { // 1. 创建渲染器 2. 创建app const app = ensureRenderer().createApp(...args); const { mount } = app; // 3. 重写mount（添加初始化container等功能） app.mount = () => { // 省略部分代码 // 执行原始mount mount(); }; return app; // 返回app }; function ensureRenderer() { return renderer || (renderer = createRenderer(rendererOptions)); }\",\"对于 mount 的重写主要用于添加一些平台相关的额外功能，比如根据#app获取到具体的 dom 元素等\",\"ensureRenderer确保渲染器只会进行一次初始化，其中rendererOptions是一些 web 平台的 dom 操作集合对象，在分析渲染器时，我们知道 vue 为了实现跨平台，将其中一些依赖于特定平台的操作进行了封装。\",\"在createRenderer定义了一大堆函数，但对于我们理解整体流程来说，最重要的是它返回的对象，因为可以看出 vue 通过调用其返回对象中的 createApp 方法，从而创建了 app 对象。\",\"function baseCreateRenderer(options, createHydrationFns) { // 省略部分代码 return { render, hydrate, createApp: createAppAPI(render, hydrate), // 创建app的方法。这里会调用render方法 }; }\",\"hydrate是服务端渲染使用的变量这里不用管，createAppAPI(render)主要完成的功能如下：\",\"export function createAppAPI(render) { return function createApp(rootComponent) { const app = { _component: rootComponent, mount(rootContainer) { const vnode = createVNode(rootComponent); render(vnode, rootContainer); }, }; return app; }; }\",\"传入的 render 在执行app.mount的时候调用\",\"创建 app 实例并返回\"]},\"1999\":{\"h\":\"二、mount\"},\"2000\":{\"h\":\"1. mountComponent\",\"t\":[\"从上述代码可以看出原始的 mount 函数主要完成的功能为 创建 vnode 并使用 render 函数进行渲染 。其中 render 函数内部会调用patch函数，根据vnode.type进行不同的处理。初始渲染时执行的是mountComponent(vnode, container, null)（mountComponent），mountComponent 主要实现的功能如下：\",\"function mountComponent(initialVNode, container, parentComponent) { // 1. 先创建一个组件instance const instance = (initialVNode.component = createComponentInstance( initialVNode, parentComponent )); // 2. 给 instance 加工加工 setupComponent(instance); // 3. 设置渲染副作用 setupRenderEffect(instance, initialVNode, container); }\",\"setupComponent类似于组件实例的初始化，在 instance 上添加额外的属性\",\"setupRenderEffect类似于 vue2 中设置 render Watcher\"]},\"2001\":{\"h\":\"2. setupComponent\",\"t\":[\"function setupComponent(instance) { const { props, children } = instance.vnode; initProps(instance, props); // 解析props和attrs initSlots(instance, children); // 初始化slots setupStatefulComponent(instance); } function setupStatefulComponent(instance) { // 1. 创建渲染上下文 instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers); // 2. 调用 setup const Component = instance.type; const { setup } = Component; if (setup) { // 设置当前 currentInstance 的值 setCurrentInstance(instance); const setupContext = createSetupContext(instance); // { attrs, emit, slots, expose} const setupResult = setup && setup(shallowReadonly(instance.props), setupContext); setCurrentInstance(null); // 3. 处理 setupResult handleSetupResult(instance, setupResult); } else { // 给 instance 设置 render // 包含模板/渲染函数规范化以及对2.x选项式的兼容 finishComponentSetup(instance); } }\",\"初始化 props 时根据组件内部声明的 props 选项将传入组件的属性挂载到instance.props或instance.attrs\",\"父组件环境下在编译时会将使用子组件时传入的插槽编译为一个 children 对象，其中包含返回 vnode 的函数。在初始化 slots 时将 children 对象中的函数取出并挂载到instance.slots\",\"渲染上下文指的是在我们在编写 template 模板中会使用的数据，实际上是对instance.ctx 对象的代理\",\"setupContext中使用的 expose 函数本质上依然是将传入的对象挂载到instance.exposed中\",\"handleSetupResult实现的功能是根据 setup 函数返回值的类型进行不同处理\",\"如果返回值是函数，将此函数作为 render 挂载到instance.render\",\"如果返回值是对象，将此对象挂载到instance.setupState，因为此对象中的数据在模板中也需要可以直接进行访问。（在渲染上下文中对其进行处理）\",\"之所以返回对象中 ref 类型的响应式数据在模板中可以直接使用而不用xx.value，是因为在挂载时使用proxyRefs进行了解构。\",\"instance.setupState = proxyRefs(setupResult);\"]},\"2002\":{\"h\":\"3. setupRenderEffect\",\"t\":[\"function setupRenderEffect(instance, initialVNode, container) { function componentUpdateFn() { if (!instance.isMounted) { // 组件初始化的时候会执行这里 // 调用 render 函数触发依赖收集，响应式的值变更后会再次触发这个函数 const proxyToUse = instance.proxy; // 渲染上下文 const subTree = (instance.subTree = normalizeVNode( instance.render.call(proxyToUse, proxyToUse) )); // 触发beforeMount钩子函数 // patch组件内实际的内容 patch(null, subTree, container, null, instance); // 把 root element 赋值给 组件的vnode.el ，为后续调用 $el 的时候获取值 initialVNode.el = subTree.el; instance.isMounted = true; } else { // 响应式的值变更后会执行此处逻辑 // 主要就是拿到新的 vnode ，然后和之前的 vnode 进行对比 // 拿到最新的 subTree const { next, vnode } = instance; // 如果有 next 的话， 说明需要更新组件的数据（props，slots 等） // 先更新组件的数据，然后更新完成后，再继续对比当前组件的子元素 if (next) { next.el = vnode.el; updateComponentPreRender(instance, next); } const proxyToUse = instance.proxy; const nextTree = normalizeVNode(instance.render.call(proxyToUse, proxyToUse)); // 替换之前的 subTree const prevTree = instance.subTree; instance.subTree = nextTree; // 触发 beforeUpdated hook // 用旧的 vnode 和新的 vnode 交给 patch 来处理 patch(prevTree, nextTree, prevTree.el, null, instance); // 触发 updated hook } } instance.update = effect(componentUpdateFn, { scheduler: () => { queueJob(instance.update); }, }); }\",\"在 vue3.2 版本里面设置副作用函数使用的是 new ReactiveEffect，至于为什么不直接用 effect ，是因为需要一个 scope 参数来收集所有的 effect，而 effect 这个函数是对外暴露的 API ，设计上要保持简洁和稳定性，不适合频繁改变其参数和行为。所以会使用 new ReactiveEffect，因为 它是一个内部类，具有更高的灵活性来适应内部需求，包括接受额外的参数。\",\"执行instance.render函数会生成组件实际内容的 vnode，然后调用patch将其挂载\",\"当组件更新是因为内部数据变更引起的自更新时，next 的值为 null；而父组件传入子组件的 props 发生变化导致的被动更新时，next 的值为新的子组件 vnode。\",\"当在组件标签上使用 ref 获取组件实例时，实际获取的是exposeProxy，因此使用ref.value.xxx使用子组件的属性或者方法时，只能使用子组件通过 expose 暴露出来的方法和公共方法。（即$el,$props这些）\",\"本质上和 vue2 区别不大，主要实现就两部分：\",\"封装一个函数，其中先render再patch\",\"将函数设置为副作用（vue2 中的 watcher）\",\"设置副作用的时候函数会自动执行一次，将其与模板中所用到的响应式数据绑定\"]},\"2003\":{\"h\":\"三、总结\",\"t\":[\"总体来说整体流程与 vue2 区别不大，首先会实例化应用（createApp 和 new vue），然后创建组件 vnode 并执行挂载，挂载过程中会将包含render和patch的函数与响应式数据相关联，并在执行 patch 函数时挂载子节点和子组件。\"]},\"2004\":{\"c\":[\"源码解析\"]},\"2005\":{\"c\":[\"vue\"]},\"2006\":{\"h\":\"实现 mini-Pinia\",\"t\":[\"vuex 的基本原理参考：手写 vuex 原理\"]},\"2007\":{\"h\":\"一、Pinia 基础使用\"},\"2008\":{\"h\":\"1. vue3+vite 安装\",\"t\":[\"npm create vite@latest 或 npm create vue3_pinia\",\"根据提示输入项目名称创建脚手架，选择 Vue+Typescript，保证能够正确运行\"]},\"2009\":{\"h\":\"2. pinia 安装与使用\",\"t\":[\"npm install pinia\",\"项目根目录按照上述方式安装 pinia\"]},\"2010\":{\"h\":\"3. main.ts 注入 use\",\"t\":[\"import { createApp } from 'vue'; import './style.css'; import App from './App.vue'; //引入createPinia() import { createPinia } from 'pinia'; const pinia = createPinia(); //注册pinia app.use(pinia); app.mount('#app');\"]},\"2011\":{\"h\":\"4. 创建 Pinia 模块\",\"t\":[\"常规操作时在 src 文件夹下创建一个 store 文件夹专门用来管理 pinia 模块，在这个文件夹下可以创建多个 js 和 ts 模块。\",\"image-20230613223249677\"]},\"2012\":{\"h\":\"5. index.ts\",\"t\":[\"import { defineStore } from 'pinia'; export const useStore = defineStore('storeId', { state: () => { return { counter: 0, name: 'Eduardo', isAdmin: true, }; }, getters: { counterPar() { console.log('getter'); return this.counter + 100; }, }, actions: { changeCounter(val) { console.log('action'); return (this.counter += val); }, }, });\"]},\"2013\":{\"h\":\"6. 在组件中使用 pinia\",\"t\":[\"<template> <div> <h2>state值：{{ name }}</h2> <h2>getter值：{{ store.counterPar }}</h2> <h2>actions值：{{ newStore }}</h2> </div> </template> <script setup> //引入store import { useStore } from '../store'; //创建store对象 const store = useStore(); //结构name const name = store.name; //调用actions const newStore = store.changeCounter(10); </script>\"]},\"2014\":{\"h\":\"7. 最终显示\",\"t\":[\"image-20230614220822579\"]},\"2015\":{\"h\":\"8. 需求总结\",\"t\":[\"1.pinia 可以解构操作的有两个数据（createPinia）（defineStore），都是函数\",\"export function createPinia() {} export function defineStore() {}\",\"2.createPinia 返回一个 pinia 对象\",\"export function createPinia() { return pinia对象; }\",\"3.defineStore 返回一个 useStore()函数\",\"export function defineStore() { const userStore = () => {}; return userStore; }\",\"4.useStore 返回 store 存储数据对象\",\"export function defineStore() { const userStore = () => { return store对象; //所有状态机的数据state函数返回，（副作用-getters和actions） }; return userStore; }\"]},\"2016\":{\"h\":\"二、实现 createPinia\",\"t\":[\"createPinia返回的是一个 pinia 对象，首先我们需要构造一个这样的对象并返回。\",\"export function createPinia() { const piniaStore = {}; return piniaStore; }\",\"返回的 pinia 对象可以通过app.use进行注册，我们知道注册时实际执行的是对象内的 install 方法，因此还需要实现一个install函数。\",\"在 vue2 中使用Vue.use注册插件时，大多会将额外需要的数据和方法挂载到组件实例中，如 vuex 或 vue-router 中实现的那样，先将其实例作为 options 在 Vue 实例化时作为参数传入，然后利用钩子函数和组件间的父子关系挂载到每个组件的实例上，如下所示：\",\"let install = function (Vue) { Vue.mixin({ beforeCreate() { if (this.$options && this.$options.store) { // 如果是根组件 this.$store = this.$options.store; } else { //如果是子组件 this.$store = this.$parent && this.$parent.$store; } }, }); };\",\"而在 vue3 中因为不存在 vue 实例，所以需要新的全局挂载方式。全局化方法有两种写法：\",\"注入注册操作provide-inject。这种方式可以让 vue3 的所有组件都通过使用app.inject(\\\"key\\\")来访问到注入的 piniaStore。\",\"config.globalProperties。兼容 vue2 的组件实例共享模式\",\"export function createPinia() { const piniaStore = { install(app) { app.provide(piniaSymbol, piniaStore); app.config.globalProperties.$pinia = piniaStore; }, }; return piniaStore; }\",\"然后在 pinia 对象上新建一个 stores 对象来维护所有 defineStore 返回的函数创建的 store 对象。\",\"import { piniaSymbol } from './piniaSymbol'; // piniaSymbol = Symbol() export function createPinia() { const piniaStore = { _stores: new Map(), //存放所有store对象的位置 state: {}, //初始化一个state对象，后续会完成计算属性和对象的使用 install(app) { app.provide(piniaSymbol, piniaStore); app.config.globalProperties.$pinia = piniaStore; console.log('createPinia正常运行'); // 方便观察 }, }; return piniaStore; }\",\"state 是一个对象，保存的是所有 store 的状态数据。它的主要作用包括：\",\"集中管理状态数据 ：将所有 store 的状态数据集中在一个地方，方便统一管理和调试。\",\"响应式状态：Vue 的响应式系统会自动追踪 state 对象的变化，使得应用在状态变化时能够自动更新视图。\",\"快照和持久化：因为所有的状态数据都集中在 state 对象里，所以可以很容易地实现状态的快照和恢复功能，也可以将整个状态对象持久化保存并在页面刷新时恢复。\",\"为什么有了_stores还需要 state 对象？\",\"分工明确：_stores 用于管理 store 实例，state 用于管理状态数据。这样分工明确，各自处理不同的职责。\",\"提高性能：_stores 采用 Map 数据结构，查找速度快，适合存放大量 store 实例。state 是一个普通对象，更加直观且易于响应式管理。\",\"解耦合：_stores 和 state 分开存储有助于解耦逻辑，使得管理 store 实例和状态数据的逻辑彼此独立，减少相互影响。\"]},\"2017\":{\"h\":\"三、实现 defineStore\"},\"2018\":{\"h\":\"1. 基本结构\",\"t\":[\"defineStore返回一个函数，此函数执行会返回对应的 store 对象，习惯上我们会将此函数命名为use{Name}Store。\",\"export function defineStore() { //返回函数 function useStore() {} return useStore; //用户使用这个函数就能获取 store实例对象 }\"]},\"2019\":{\"h\":\"2. 参数情况\",\"t\":[\"defineStore 接受三种传参方式\",\"第一种是传入 id+options\",\"export const useStore = defineStore('stroeId', { state: () => { return { name: 'jack chen', age: 40, }; }, actions: { increment(num) { console.log(this.age + num); return this.age + num; }, }, getters: { doubleAge: (state) => state.age * 2, }, });\",\"第二种是只传入 options（而 id 包含在这个 options 内部），options 是对象\",\"export const useStore = defineStore({ id: 'storeId', state: () => { return { name: 'alice', age: 30, }; }, actions: { increment(num) { console.log(this.age + num); return this.age + num; }, }, getters: { doubleAge: (state) => state.age * 2, }, });\",\"第三种是传入 id+setup 函数\",\"export const useStore = defineStore('storedId', () => { const age = ref(21); const name = 'jack'; function changeCounter(val) { age.value = val; return age.value; } const age10 = computed(() => { return age.value + 100; }); return { age, name, changeCounter, age10, }; });\",\"首先需要根据传入参数的情况进行参数归一化，如下所示：\",\"import { computed, getCurrentInstance, inject, isReactive, reactive, isRef } from 'vue'; import { piniaSymbol } from './piniaSymbol'; export function defineStore(idOrOptions, optionsOrSetup) { //单独定义id和Options let id, options; //接受和处理第一个参数,id:string,options:object if (typeof idOrOptions == 'string') { id = idOrOptions; options = optionsOrSetup; //对象或函数 } else { options = idOrOptions; //对象 id = options.id; } function useStore() { //当前组件实例是否存在 const instance = getCurrentInstance(); //获取当前组件实例 let piniaStore = instance && inject(piniaSymbol); // 如果当前组件实例存在就注入整个piniaStore(因为只有在vue组件里才可以使用inject) if (!piniaStore._stores.has(id)) { //如果在piniastore的map中没有对应的id，则表示需要新建，如果已经存在则只需要返回数据 //录入新的数据（state,actions,getters）包含的对象一起放入map中 //id不存在则添加的是options数据 if (typeof optionsOrSetup === 'function') { //传入进来的是一个函数 //将对应的id里的options，放置到piniaStore createSetupStore(id, optionsOrSetup, piniaStore); //函数形式 } else { //前两种传参方式都用这个来解构store //将对应的id里的options，放置到piniaStore createOptionsStore(id, options, piniaStore); //对象形式 } } return piniaStore._stores.get(id); //获取目前use的这个store } return useStore; }\"]},\"2020\":{\"h\":\"3. createSetupStore\",\"t\":[\"createSetupStore 的第四个参数表示此 store 是否通过 options 调用所创建。\",\"//处理函数式defineStore function createSetupStore(id, setup, piniaStore, isOptionsStore) { //建立一个将来返回数据的响应式对象 const store = reactive({}); //执行setup函数，返回一个包含state,actions,getters的对象 const setupStore = setup(); //遍历一个store里所有的属性，做进一步处理 for (let key in setupStore) { const prop = setupStore[key]; // 1.处理actions // 改变函数的指向问题 if (typeof prop == 'function') { setupStore[key] = wrapAction(prop); } // 2.处理state // 如果是setup函数，则把里面的state存到全局state中去 // createOptionStore 直接在 pinia.state.value 中设置状态 if ((isRef(prop) && !isComputed(prop)) || isReactive(prop)) { // 如果它是ref或者reactive则说明他是state // 由于computed也是ref，所以要排除计算属性 if (!isOptionsStore) { piniaStore.state[key] = prop; } } } //判断计算属性，ref，同时也是一个effect function isComputed(v) { return isRef(v) && v.effect; } function wrapAction(action) { return function () { let ret = action.apply(store, arguments); return ret; }; } Object.assign(store, setupStore); piniaStore._stores.set(id, store); }\"]},\"2021\":{\"h\":\"4. createOptionsStore\",\"t\":[\"// defineStore传入options时调用这个函数 function createOptionsStore(id, options, piniaStore) { const { state, actions, getters } = options; //解构当前的对象数据 function setup() { // 专门处理store里的state,actions,getters piniaStore.state[id] = state ? state() : {}; //将解构出的state存入到全局state对象中 const localState = piniaStore.state[id]; return Object.assign( localState, actions, Object.keys(getters).reduce((computedGetters, name) => { computedGetters[name] = computed(() => { //获取当前store的指向 let store = piniaStore._stores.get(id); return getters[name].call(store, store); }); return computedGetters; }, {}) ); } createSetupStore(id, setup, piniaStore, true); }\"]},\"2022\":{\"c\":[\"源码解析\"]},\"2023\":{\"c\":[\"vue生态\"]},\"2024\":{\"h\":\"vue-router 原理解析\",\"t\":[\"基本原理参考：手写 vue-router 原理\"]},\"2025\":{\"h\":\"一、基本用法\",\"t\":[\"import Vue from 'vue'; import VueRouter from 'vue-router'; import Home from '../views/Home.vue'; import About from '../views/About.vue'; Vue.use(VueRouter); const routes = [ { path: '/home', name: 'Home', component: Home, }, { path: '/about', name: 'About', component: About, }, ]; const router = new VueRouter({ mode: 'history', routes, }); new Vue({ el: '#app', render: (h) => h(App), router, });\",\"我们需要做的事情如下：\",\"注册路由器\",\"定义路由表，以此 实例化 一个路由器对象，并将其实例传入 Vue 实例化的 options 中\"]},\"2026\":{\"h\":\"二、路由注册\",\"t\":[\"Vue 提供了 Vue.use 的全局 API 来注册这些插件，比如注册 VueRouter。VueRouter 本质上是一个类，实现了 install 的静态方法：VueRouter.install = install，当执行 Vue.use(VueRouter) 的时候，实际上就是在执行 install 函数。\",\"install 函数主要的功能如下：\",\"利用 Vue.mixin 去把 beforeCreate 和 destroyed 钩子函数注入到每一个组件中。\",\"Vue.mixin({ beforeCreate() { // 在实例化Vue的时候会将router实例作为options传入 // 只有当前组件为根组件时进入此分支 if (isDef(this.$options.router)) { this._routerRoot = this; this._router = this.$options.router; this._router.init(this); Vue.util.defineReactive(this, '_route', this._router.history.current); } else { this._routerRoot = (this.$parent && this.$parent._routerRoot) || this; } registerInstance(this, this); }, destroyed() { registerInstance(this); }, });\",\"主要实现的功能为：\",\"确定 router 和 route 指向的对象\",\"为 route 添加响应式，以便路由的变化触发页面的重新渲染\",\"执行 router 的初始化（router.init）。\",\"通过Object.defineProperty方法为 vue 的原型对象添加$router和$route属性，以便我们在组件内可以方便地访问路由器和当前路由对象。\",\"Object.defineProperty(Vue.prototype, '$router', { get() { return this._routerRoot._router; }, }); Object.defineProperty(Vue.prototype, '$route', { get() { return this._routerRoot._route; }, });\",\"通过 Vue.component 方法定义了全局的 <router-link> 和 <router-view> 2 个组件，这也是为什么我们在写模板的时候可以使用这两个标签。\",\"router 的初始化用于初始化路由器实例，并设置初始的路由状态。在此步骤中最重要的逻辑为：\",\"history.transitionTo(history.getCurrentLocation(), setupListeners, setupListeners);\",\"首先获取当前浏览器地址栏中的 URL，通常是浏览器地址栏中的路径和查询参数。然后根据当前的 URL 进行一次路由导航，从而初始化应用的路由状态，使应用在加载时根据当前 URL 展示相应的组件和视图。然后设置相关的事件监听器，用于处理浏览器的前进和后退等操作。\"]},\"2027\":{\"h\":\"三、VueRouter 实例化\",\"t\":[\"VueRouter 的实现是一个类，定义了一些属性和方法。当我们执行 new VueRouter 的时候会实例化一个路由器对象。主要的初始化如下：\",\"根据传入的路由表创建Matcher对象。\",\"this.matcher = createMatcher(options.routes || [], this);\",\"确定模式。在浏览器不支持 history.pushState 的情况下，根据传入的 fallback 配置参数，决定是否回退到 hash 模式。\",\"根据模式实例化对应的history对象\",\"switch (mode) { case 'history': this.history = new HTML5History(this, options.base); break; case 'hash': this.history = new HashHistory(this, options.base, this.fallback); break; case 'abstract': this.history = new AbstractHistory(this, options.base); break; default: if (process.env.NODE_ENV !== 'production') { assert(false, `invalid mode: ${mode}`); } }\"]},\"2028\":{\"h\":\"1. matcher 对象\",\"t\":[\"matcher 对象主要为后续路由的跳转提供支持，createMatcher 主要实现的功能如下：\",\"根据路由的配置描述建立映射表，包括路径、名称到路由 record 的映射关系。\",\"const { pathList, pathMap, nameMap } = createRouteMap(routes);\",\"假设有如下路由配置：\",\"const routes = [ { path: '/user/:id', component: User, children: [ { path: 'profile', component: UserProfile, }, { path: 'posts', component: UserPosts, }, ], }, { path: '/about', component: About, }, ];\",\"最终会生成如下几个映射表：\",\"pathList: ['/user/:id', '/user/:id/profile', '/user/:id/posts', '/about'] pathMap: { '/user/:id': { path: '/user/:id', component: User, children: [...] }, '/user/:id/profile': { path: '/user/:id/profile', component: UserProfile, parent: { ... } }, '/user/:id/posts': { path: '/user/:id/posts', component: UserPosts, parent: { ... }}, '/about': { path: '/about', component: About } } // nameMap: 如果路由配置中有命名路由，则会包含相应的路由记录。\",\"仿照类的写法，数据由类本身维护，返回一些操作数据的方法：\",\"return { match, addRoute, getRoutes, addRoutes, };\",\"addRoutes 方法的作用是动态添加路由配置，因为在实际开发中有些场景是不能提前把路由写死的，需要根据一些条件动态添加路由。addRoutes 的方法十分简单，再次调用 createRouteMap 即可，传入新的 routes 配置，由于 pathList、pathMap、nameMap 都是引用类型，执行 addRoutes 后会修改它们的值。\",\"function addRoutes(routes) { createRouteMap(routes, pathList, pathMap, nameMap); }\",\"match 会根据传入的位置和路径计算出新的位置并匹配到相应的路由 record ，然后根据新的位置和 record 创建新的路径并返回。通过 matcher 的 match 方法，我们会找到匹配的路径 Route，这个对 Route 的切换，组件的渲染都有非常重要的指导意义。\",\"// 假设有如下的路由配置 const routes = [ { path: '/user/:id', component: User }, { path: '/about', component: About }, { path: '*', component: NotFound } ] const router = new VueRouter({ routes }) // 匹配如下路由路径 const match = router.match('/about') console.log(match) // 输出结果，外层是一个route对象，matched是一个record对象 { path: '/about', matched: [ { path: '/about', regex: /^\\\\/about(?:\\\\/(?=$))?$/i, components: { default: About }, instances: {}, name: undefined, parent: undefined, matchAs: undefined, redirect: undefined, beforeEnter: undefined, meta: {}, props: { default: undefined } } ], params: {}, query: {}, hash: '', redirectedFrom: undefined, meta: {} }\",\"getRoutes会返回所有路由路径对应的路由配置。\",\"function getRoutes() { return pathList.map((path) => pathMap[path]); }\"]},\"2029\":{\"h\":\"2. history 对象\",\"t\":[\"push、replace --> 触发守卫，跳转路由，更改 url setupListeners --> 绑定事件 current --> 当前路由\",\"history 是一个核心概念，用于管理浏览器的历史记录和路由状态。history 对象负责处理路由的导航、路径匹配、导航钩子等。Vue Router 提供了不同的 history 模式来适应不同的需求和浏览器环境。\",\"history 中重要的 属性 包括当前路由器 router、当前路由 current 以及各种 hook 数组，还包含主要的路由跳转 方法 push 和 replace，其中都使用了同一个函数history.transitionTo，只是传入的成功回调不同。\",\"push(location, onComplete, onAbort) { const { current: fromRoute } = this; this.transitionTo( location, (route) => { pushHash(route.fullPath); // 修改页面的url handleScroll(this.router, route, fromRoute, false); onComplete && onComplete(route); }, onAbort ); } replace(location, onComplete, onAbort) { const { current: fromRoute } = this; this.transitionTo( location, (route) => { replaceHash(route.fullPath); // 修改页面的url handleScroll(this.router, route, fromRoute, false); onComplete && onComplete(route); }, onAbort ); }\",\"history.transitionTo是 vue-router 处理路由跳转的核心逻辑，其主要的步骤如下：\",\"transitionTo(location, onComplete, onAbort) { let route; // 1. 路径匹配 try { route = this.router.match(location, this.current); } catch (e) { this.errorCbs.forEach((cb) => { cb(e); }); throw e; } const prev = this.current; // 2. 确认从一个路由到另一个路由的过渡是否应该进行，并执行相应的导航守卫 this.confirmTransition( route, // 确定应该进行跳转 () => { // 更新当前路由 this.updateRoute(route); // 调用成功回调 onComplete && onComplete(route); this.ensureURL(); // 执行全局后置守卫 this.router.afterHooks.forEach((hook) => { hook && hook(route, prev); }); // fire ready cbs once if (!this.ready) { this.ready = true; this.readyCbs.forEach((cb) => { cb(route); }); } }, (err) => {} // 失败回调 ); }\",\"而confirmTransition的代码如下所示：\",\"confirmTransition(route, onComplete, onAbort) { // 省略部分代码 // ... // 确定需要更新、失活和激活的路由组件 const { updated, deactivated, activated } = resolveQueue(this.current.matched, route.matched); // 构建一个“导航守卫队列”，即在进行路由导航时，需要依次执行的各种守卫函数 const queue = [].concat( // 组件内 beforeRouteLeave 守卫 extractLeaveGuards(deactivated), // 全局前置守卫 this.router.beforeHooks, // 组件内 beforeRouteUpdate 守卫 extractUpdateHooks(updated), // 路由配置中的beforeEnter守卫 activated.map((m) => m.beforeEnter), // 异步组件的解析 resolveAsyncComponents(activated) ); const iterator = (hook, next) => { if (this.pending !== route) { return abort(createNavigationCancelledError(current, route)); } try { // 这里的回调即我们定义守卫时所用的next hook(route, current, (to: any) => { // 取消这次路由跳转，让用户停留在当前页面 if (to === false) { // next(false) this.ensureURL(true); // 强制vuerouter内部path与当前url同步 abort(createNavigationAbortedError(current, route)); } else if (isError(to)) { this.ensureURL(true); abort(to); } else if ( typeof to === 'string' || (typeof to === 'object' && (typeof to.path === 'string' || typeof to.name === 'string')) ) { // next('/') or next({ path: '/' }) -> redirect abort(createNavigationRedirectedError(current, route)); if (typeof to === 'object' && to.replace) { this.replace(to); } else { this.push(to); } } else { // 确认跳转并传递值 next(to); } }); } catch (e) { abort(e); } }; // 执行导航守卫 runQueue(queue, iterator, () => { // beforeRouteEnter const enterGuards = extractEnterGuards(activated); // resolveHooks const queue = enterGuards.concat(this.router.resolveHooks); runQueue(queue, iterator, () => { if (this.pending !== route) { return abort(createNavigationCancelledError(current, route)); } this.pending = null; onComplete(route); if (this.router.app) { this.router.app.$nextTick(() => { handleRouteEntered(route); }); } }); }); } function runQueue (queue: Array<?NavigationGuard>, fn: Function, cb: Function) { const step = index => { if (index >= queue.length) { cb() } else { if (queue[index]) { fn(queue[index], () => { step(index + 1) }) } else { step(index + 1) } } } step(0) }\",\"首先会根据跳转的path匹配到对应的路由对象，然后调用confirmTransition来确认此次跳转是否应该进行，并执行相应的导航守卫。如果确定可以跳转，则更新当前路由，执行全局的后置守卫。\",\"更新路由指的是 更新 history.current 以及 vue 实例的_route 属性\",\"updateRoute(route) { this.current = route; this.cb && this.cb(route); }\",\"在执行 router 的初始化时执行了下述代码\",\"history.listen((route) => { this.apps.forEach((app) => { app._route = route; }); });\",\"history.listen即将传入的函数保存到history.cb中。\",\"此时 vue-router 内部的路由已经更新，但是 页面的 url 尚未同步 ，通过定义 transitionTo 的成功回调来完成此部分的功能。\",\"通过pushState或者replaceState，url 会更改且不会引起页面刷新\",\"直接修改window.location.hash\",\"在执行confirmTransition时，通过对比当前路由和需要跳转的路由对象，确定需要更新、失活和激活的路由组件分别有哪些。\",\"然后构建一个“导航守卫队列”，即在进行路由导航时，需要依次执行的各种守卫函数。依次执行其中的守卫函数。\",\"从代码中可以看出当我们编写守卫函数时调用next()，会对其调用情况做出判断和处理，如果未传参则直接放行，此处的放行指的是进入下一次循环，即执行守卫队列中的下一个守卫函数，直到队列为空，则执行成功回调更新当前路由进行跳转。\",\"导航守卫实际上就是发生在路由路径切换的时候，执行的一系列钩子函数。完整的导航解析流程如下所示：\",\"导航被触发。\",\"在失活的组件里调用离开守卫。\",\"调用全局的 beforeEach 守卫。\",\"在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。\",\"在路由配置里调用 beforeEnter。\",\"解析异步路由组件。\",\"在被激活的组件里调用 beforeRouteEnter。\",\"调用全局的 beforeResolve 守卫 (2.5+)。\",\"导航被确认。（更新路由）\",\"调用全局的 afterEach 钩子。\",\"触发 DOM 更新。\",\"用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。（vue.$nextTick）\"]},\"2030\":{\"h\":\"四、全局组件\",\"t\":[\"hash 模式下具体流程：\",\"当我们点击 router-link 的时候，实际上最终会执行 router.push。\",\"push 函数会先执行 this.transitionTo 做路径切换，在切换完成的回调函数中，执行 pushHash 函数\",\"pushState 会调用浏览器原生的 history 的 pushState 接口或者 replaceState 接口，更新浏览器的 url 地址 ，并把当前 url 压入历史栈中。\",\"ensureSlash \",\"开发项目时，打开调试页面 http://localhost:8080 后会自动把 url 修改为 http://localhost:8080/#/。这是因为在实例化 HashHistory 的时候，构造函数会执行 ensureSlash() 方法，修改了 url 的原因。\"]},\"2031\":{\"h\":\"1. router-view\",\"t\":[\"路由最终的渲染离不开组件，Vue-Router 内置了 <router-view> 组件。<router-view> 是一个 functional 组件，它的渲染同样依赖 render 函数。\",\"<router-view> 是支持嵌套的， render 函数中定义了 depth 的概念，它表示 <router-view> 嵌套的深度。\",\"每个<router-view>在渲染的时候，会进行一个循环，就是从当前的 <router-view> 的父节点向上找，一直找到根 Vue 实例，在这个过程，如果父节点也是 <router-view> ，说明 <router-view> 存在嵌套的情况，depth++。遍历完成后，根据当前线路匹配的路径和 depth 找到对应的 RouteRecord，进而找到该渲染的组件。\",\"const route = parent.$route; const matched = route.matched[depth]; const component = matched && matched.components[name]; return h(component, data, children);\",\"name 是传入的 props，默认值为 default，等同于route.component，即在使用 router-view 的时候如果不传入 name，默认渲染当前路由对应的组件。\",\"注册路由实例\",\"// view组件 data.registerRouteInstance = (vm, val) => { // val could be undefined for unregistration const current = matched.instances[name]; if ((val && current !== vm) || (!val && current === vm)) { matched.instances[name] = val; } }; const registerInstance = (vm, callVal) => { let i = vm.$options._parentVnode; if (isDef(i) && isDef((i = i.data)) && isDef((i = i.registerRouteInstance))) { i(vm, callVal); } }; Vue.mixin({ beforeCreate() { // ... registerInstance(this, this); }, destroyed() { registerInstance(this); }, });\",\"在混入的 beforeCreate 钩子函数中，会执行 registerInstance 方法，进而执行 render 函数中定义的 registerRouteInstance 方法，从而给 matched.instances[name] 赋值当前组件的 vm 实例。\",\"当我们执行 transitionTo 来更改路由线路后，组件是如何重新渲染 ？\",\"在 Vue 混入的 beforeCreate 钩子函数中，我们把根 Vue 实例的 _route 属性定义成响应式的了。\",\"if (isDef(this.$options.router)) { Vue.util.defineReactive(this, '_route', this._router.history.current); }\",\"在 router-view 组件的 render 函数中首先会使用$route访问当前路由对象，从而访问 this._routerRoot._route，触发了它的 getter，相当于 <router-view> 对它有依赖，然后再执行完 transitionTo 后，更新路由updateRoute，修改了 app._route ，触发了 setter，因此会通知 <router-view> 的渲染 watcher 更新，重新渲染组件。\"]},\"2032\":{\"h\":\"2. router-link\",\"t\":[\"Vue-Router 还内置了另一个组件 <router-link>，它支持用户在具有路由功能的应用中（点击）导航。 通过 to 属性指定目标地址，默认渲染成带有正确链接的 <a> 标签，可以通过配置 tag 属性生成别的标签。另外，当目标路由成功激活时，链接元素自动设置一个表示激活的 CSS 类名。其大致逻辑如下：\",\"首先根据当前路由和目标路由进行路由解析得到location, route, href\",\"根据不同的配置对 exactActiveClass 、 activeClass 和 ariaCurrentValue 做处理\",\"创建了一个守卫函数 handler，会监听点击事件或者其它可以通过 prop 传入的事件类型，在某些情况下拦截路由跳转，放行通过后会执行 router.push 或者 router.replace 函数，实际上就是执行了 history 的 push 和 replace 方法做路由跳转。\",\"最后判断当前 tag 是否是<a>标签，<router-link> 默认会渲染成 <a> 标签，当然我们也可以修改 tag 的 prop 渲染成其他节点，这种情况下会尝试找它子元素的 <a> 标签，如果有则把事件绑定到 <a> 标签上并添加 href 属性，否则绑定到外层元素本身。\",\"整体流程\"]},\"2033\":{\"h\":\"五、总结\",\"t\":[\"路由器始终会维护当前的路由，路由切换的时候会把当前路由切换到目标路由，切换过程中会执行一系列的导航守卫钩子函数，会更改 url，同样也会渲染对应的组件，切换完毕后会把目标路由更新替换当前路由，从而作为下一次路由切换的依据。\"]},\"2034\":{\"h\":\"1. 路由变化触发组件重渲染\",\"t\":[\"以 history 模式为例，在 vue-Router3.x 中，流程如下所示：\",\"点击浏览器的前进后退，触发 popstate 事件，执行定义的回调函数\",\"const handleRoutingEvent = () => { const current = this.current; const location = getLocation(this.base); if (this.current === START && location === this._startLocation) { return; } this.transitionTo(location, (route) => { if (supportsScroll) { handleScroll(router, route, current, true); } }); };\",\"transitionTo 中会依次执行路由守卫，成功通行后更新内部的current和app._route。而 view 组件依赖与响应式数据app._route，其值的改变会触发 setter，从而通知 <router-view> 的渲染 watcher 更新，重新渲染组件。\",\"而在 vue-Router4.x 中，情况略有不同，流程如下所示：\",\"点击浏览器的前进后退，触发 popstate 事件，执行定义的回调函数\",\"const popStateHandler = (state) => { const to = createCurrentLocation(base, location); const from = currentLocation.value; const fromState = historyState.value; let delta = 0; if (state) { currentLocation.value = to; historyState.value = state; if (pauseState && pauseState === from) { pauseState = null; return; } delta = fromState ? state.position - fromState.position : 0; } else { replace(to); } // 路由器首次导航时会利用此函数添加listener listeners.forEach((listener) => { listener(currentLocation.value, from, { delta, type: NavigationType.pop, direction: delta ? delta > 0 ? NavigationDirection.forward : NavigationDirection.back : NavigationDirection.unknown, }); }); };\",\"listener 中会调用navigate函数执行路由守卫，并执行 replace || push 更改 url 并更新router.currentRoute。而 vue-Router 将其中的每个属性定义为计算属性，以此构造了一个响应式的对象作为当前路由（即我们在组件中使用 useRoute 导入的路由对象），并且 view 组件依赖于当前路由对象，因此router.currentRoute的改变会引起组件的重新渲染。\"]},\"2035\":{\"h\":\"2. 3.x 与 4.x 版本的区别\",\"t\":[\"为什么不直接使用 currentRoute 作为路由而是使用计算属性将每个属性包了一层？\",\"配合 vue3 在编译阶段的优化，实现细粒度的响应式。\",\"当使用计算属性时，Vue 的响应式系统会对各个属性进行细粒度的依赖追踪，而不仅仅是对整个对象进行依赖追踪。这就确保了无论是 currentRoute.value.path 还是 currentRoute.value.name 变化，都会精确触发相应的渲染更新，性能更高。\",\"通过 currentRoute.value 绑定整个对象，任何属性变化都会触发依赖这个对象的所有地方重新渲染：\",\"<template> <div> <p>{{ currentRoute.value.path }}</p> <p>{{ currentRoute.value.name }}</p> </div> </template>\",\"实现的结果是，如果 currentRoute.value.path 发生变化，虽然页面只需要更新对应的 <p> 标签，但实际上可能会导致 currentRoute.value.name 也被重新计算或渲染，产生不必要的开销。\",\"而使用计算属性包装后，reactiveRoute.path 和 reactiveRoute.name 自动更新时，对应的模板部分只会重新渲染需要更新的部分，而不是整个对象。\",\"push 阶段为什么使用两次 changeLocation？\",\"执行路由守卫方式的区别？\",\"3.x 版本使用面向对象的方式，4.x 迎合 vue3 组合式 api 的写法，使用函数式编程。\"]},\"2036\":{\"c\":[\"源码解析\"]},\"2037\":{\"c\":[\"vue生态\"]},\"2038\":{\"h\":\"新版 vue-Router 原理解析\",\"t\":[\"本文章内容 vue-Router 的版本为 4.x，3.x 的基本原理可以参考vue-router 原理解析\"]},\"2039\":{\"h\":\"一、createRouter 结构解析\"},\"2040\":{\"h\":\"1. 准备工作\",\"t\":[\"在开始之前，我们肯定是需要去看一下 vue-router 对应的源码，源码可以在 github 上面找到，地址如下：\",\"https://github.com/vuejs/router\",\"vue-router 整体项目采用的是 monorepo 的代码管理风格，使用 pnpm + workspace 的方式来搭建的 monorepo 项目，源码目录如下：\",\"├── .github ├── .vscode ├── packages // 项目分包 │ ├── docs // vue router API文档 │ ├── playground // 本地项目效果预览 │ └── router // vue router源码 ├── scripts // 工程脚本 ├── .gitignore ├── .npmrc // 项目的配置文件 ├── .prettierignore ├── .prettierrc ├── LICENSE ├── README.md ├── netlify.toml ├── package.json ├── pnpm-lock.yaml // 依赖版本控制 └── pnpm-workspace.yaml // 工作空间根目录\",\"其中关于 router 的源码位于 packages/router/src，结构如下：\",\"├── history ├── matcher ├── types ├── utils ├── RouterLink.ts ├── RouterView.ts ├── config.ts ├── devtools.ts ├── encoding.ts ├── errors.ts ├── global.d.ts ├── globalExtensions.ts ├── index.ts ├── injectionSymbols.ts ├── location.ts ├── navigationGuards.ts ├── query.ts ├── router.ts ├── scrollBehavior.ts ├── useApi.ts └── warning.ts\",\"作为一个项目的入口，我们自然会去 index.ts，这个 index.ts 整体比较简单，就是单纯的将其他文件的工具方法或者类型导出而已，其中就包含了非常重要的一个方法 createRouter：\",\"export { createRouter } from './router';\",\"接下来我们就可以顺藤摸瓜，到 router.ts 里面去查看 createRouter 的源码。\"]},\"2041\":{\"h\":\"2. 整体结构分析\",\"t\":[\"在分析 createRouter 方法之前，我们首先需要回忆一下，整个 createRouter 是如何使用的\",\"import { createRouter } from 'vue-router'; // 调用 createRouter 方法的时候，传入一个配置对象 const router = createRouter({ history: createWebHistory(import.meta.env.BASE_URL), routes: [ { path: '/', name: 'home', component: HomeView, }, { path: '/about', name: 'about', component: () => import('../views/AboutView.vue'), }, ], }); export default router;\",\"关于传入 createRouter 方法的配置对象所支持的配置项可以参阅：https://router.vuejs.org/zh/api/interfaces/RouterOptions.html\",\"注意：该配置对象在官方中对应的类型 RouterOptions\",\"返回值是一个对象，该对象对应的类型就是 Router，既然是对象，那么上面会有一些属性以及方法 \",\"属性：currentRoute、listening、options\",\"方法：addRoute、getRoutes、push、repalce、go、beforeEach...\",\"接下来我们会在项目中的 main.ts 中引入这个对象：\",\"import router from './router'; const app = createApp(App); app.use(router); // 注册插件\",\"接下来我们到 packages/router/src/router.ts 中，找到 createRouter 方法，该方法的整体结构如下：\",\"export function createRouter(options: RouterOptions): Router { /* * 1. 各种变量的定义 */ const matcher = ... const parseQuery = ... const stringifyQuery = ... const routerHistory = ... /* * 2. 导航守卫 */ const beforeGuards = ... const beforeResolveGuards = ... const afterGuards = ... /* * 3. 当前路由初始化 */ const currentRoute = ... let pendingLocation: RouteLocation = ... /* * 4. params 相关处理 */ const normalizeParams = ... const encodeParams = ... const decodeParams = ... /* * 5. 各种方法的定义 * 这些方法里面有供内部使用的方法，也有暴露出去给外部使用的方法 */ function addRoute( ... ) { ... } function removeRoute() { ... } function getRoutes() { ... } function hasRoute( ... ) { ... } function resolve( ... ) { ... } function locationAsObject( ... ) { ... } function checkCanceledNavigation( ... ) { ... } function push( ... ) { ... } function replace( ... ) { ... } function handleRedirectRecord( ... ) { ... } function pushWithRedirect( ... ) { ... } function checkCanceledNavigationAndReject( ... ) { ... } function runWithContext( ... ) { ... } function navigate( ... ) { ... } function triggerAfterEach( ... ) { ... } function finalizeNavigation( ... ) { ... } function setupListeners( ... ) { ... } function triggerError( ... ) { ... } function isReady( ... ) { ... } function markAsReady( ... ) { ... } function handleScroll( ... ) { ... } /* * 6. 向外部返回的对象 * 该对象会包含部分上面所定义的方法，必须要有一个 install 方法 */ const router: Router = { currentRoute, listening: true, addRoute, removeRoute, hasRoute, getRoutes, resolve, options, push, replace, go, back: () => go(-1), forward: () => go(1), beforeEach: beforeGuards.add, beforeResolve: beforeResolveGuards.add, afterEach: afterGuards.add, onError: errorListeners.add, isReady, install(){ ... } } return router; }\",\"通过上面的代码，我们能够将 createRouter 这个核心方法的整体结构搞清楚，内部声明了一些变量以及方法，最终会导出一个对象，该对象身上会包含一部分上面所声明的变量以及方法。\",\"createRouter 整体工作流程如下图所示：\"]},\"2042\":{\"h\":\"3. 创建 matcher\",\"t\":[\"createRouter 方法内部的第一句代码就是创建 matcher\",\"const matcher = createRouterMatcher(options.routes, options);\",\"createRouterMatcher 方法位于 matcher 目录下面的 index.ts，我们首先看一下该方法的方法签名：\",\"export function createRouterMatcher( // routes 是一个只读数组，里面存放的就是开发者所写的一条一条的路由记录 // 每一条路由记录是一个对象 [{ path: '/',name: 'home', component: HomeView }, {...}] routes: Readonly<RouteRecordRaw[]>, // globalOptions 就是用户调用 createRouter 方法时传入的一整个配置对象 {history: ..., routes : [...]} globalOptions: PathParserOptions ): RouterMatcher;\",\"接下来我们来看一下整个 createRouterMathcer 方法究竟在干什么？\",\"下面是整个 creatRouterMatcher 方法的整体结构：\",\"export function createRouterMatcher(routes, globalOptions) { /* * 做一些初始化工作 */ ... /* * 内部定义的方法 */ function getRecordMatcher( ... ) { ... } function addRoute( ... ) { ... } function removeRoute( ... ) { ... } function getRoutes( ... ) { ... } function insertMatcher( ... ) { ... } function resolve( ... ) { ... } /* * 遍历 routes 数组 * 利用内部的 addRoute 方法来添加路由 * 也就是，整个路由的初始化添加工作是在 createRouterMatcher 方法里面完成的 */ routes.forEach(route => addRoute(route)) /* * 向外部返回一个对象，这也就是 createRouter 方法中的 matcher 对象 * 是一个包含了内部方法的对象 */ return { addRoute, resolve, removeRoute, getRoutes, getRecordMatcher } }\",\"目前通过阅读 createRouter 以及 createRouterMatcher 方法，我们能够发现这是一种非常常见的模式。一个方法返回一个对象，这个对象里面会包含部分方法内部所定义的方法，这里其实就用到了闭包。\",\"最终外部（ createRouter 调用的地方）会拿到这个对象：\",\"const mathcer = { addRoute, resolve, removeRoute, getRoutes, getRecordMatcher };\",\"我们可以看到，在 createRouter 内部同样定义了诸如 addRoute、removeRoute 以及 getRoutes 等方法，那么我们可以很自然的想到，这些方法的内部，肯定是调用了返回的 matcher 对象的同名方法。\"]},\"2043\":{\"h\":\"4. 处理导航守卫\",\"t\":[\"接下来有一段代码是处理导航守卫：\",\"const beforeGuards = useCallbacks<NavigationGuardWithThis<undefined>>(); const beforeResolveGuards = useCallbacks<NavigationGuardWithThis<undefined>>(); const afterGuards = useCallbacks<NavigationHookAfter>();\",\"这里我们首先回忆一下，导航守卫是如何使用的：\",\"const router = createRouter({...}) router.beforeEach((to, from, next)=>{ ... })\",\"在源码中，挂在 router 对象的 beforeEach 方法对应如下：\",\"beforeEach: beforeGuards.add,\",\"也就是说，实际上在调用 beforeGuards 的 add 方法，而这个 beforeGuards 又是通过调用 useCallbacks( ) 方法所得到的\",\"useCallBack 方法位于 utils 目录下面的 callback.ts：\",\"export function useCallbacks<T>() { // 这里声明了一个 handlers 的列表 let handlers: T[] = []; // 接收守卫回调函数 function add(handler: T): () => void { // 放入到 handlers 列表里面 handlers.push(handler); // 向外部返回一个方法，该方法的作用就是将添加到 handlers 列表里面对应的守卫回调删除掉 return () => { const i = handlers.indexOf(handler); if (i > -1) handlers.splice(i, 1); }; } // 清空 handlers 列表 function reset() { handlers = []; } // 向外部返回一个对象 return { add, list: () => handlers.slice(), reset, }; }\",\"接下来我们重点来关心一下 add 方法会返回的一个方法，这个方法是将添加进去的守卫回调删除，为什么这么做？实际上这个是我们 JS 中非常常见的一种模式\",\"const callbacks = useCallbacks(); const remove = callbacks.add(() => { console.log('hello'); }); remove();\",\"这种模式非常的常见，特别是在 JS 中处理事件监听器或者需要清晰资源的时候，你可以一次性的提供添加和取消操作，使代码更加便于管理。\"]},\"2044\":{\"h\":\"5. currentRoute 声明\",\"t\":[\"const currentRoute = shallowRef<RouteLocationNormalizedLoaded>(START_LOCATION_NORMALIZED);\",\"这个 currentRoute 最终是要暴露给外部使用的。\",\"首先关于 START_LOCATION_NORMALIZED，这是 vue-router 里面的一个常量，对应的代码如下：\",\"export const START_LOCATION_NORMALIZED: RouteLocationNormalizedLoaded = { path: '/', name: undefined, params: {}, query: {}, hash: '', fullPath: '/', matched: [], meta: {}, redirectedFrom: undefined, };\",\"在这个常量里面，就对 path、name、params、query... 进行了一个初始化操作。\",\"另外需要注意，这里首先 currentRoute 是一个响应式的变量，但是这里在创建这个响应式变量的时候，使用的是 shallowRef，而非 ref。\",\"ref：创建一个深度响应式的变量\",\"const obj = ref({ count: 0 }); obj.value.count++; // 存在响应式的，依赖于 obj 的组件会重新渲染\",\"shallowRef：是创建一个不会进行深度转换的响应变量\",\"const obj = shallowRef({ count: 0 }); obj.value.count++; // 这里不存在响应式，这里的变化不会导致组件重新渲染 obj.value = { count: 1 }; // 这样子才会触发响应式\",\"因为 START_LOCATION_NORMALIZED 内部会存在一些深层次的嵌套，如果使用 ref 的话，那么这些深层次的嵌套也会变为响应式，但是这是没有必要的，所以这里使用 shallowRef 会节约不必要的性能开销。\"]},\"2045\":{\"h\":\"6. 处理 params\",\"t\":[\"接下来是关于 params 的处理：\",\"const normalizeParams = applyToParams.bind(null, (paramValue) => '' + paramValue); const encodeParams = applyToParams.bind(null, encodeParam); const decodeParams = applyToParams.bind(null, decode);\",\"这里其实这三行是三个函数，分别负责：\",\"标准化参数\",\"编码参数\",\"解码参数\",\"这里三个函数都用到了 applyToParams，因此这里我们自然会去追 applyToParams 的源码，该方法的源码位于 utils/index.ts 里面：\",\"export function applyToParams( // 函数 fn: (v: string | number | null | undefined) => string, // 要处理的参数 params: RouteParamsRaw | undefined ): RouteParams { // 初始化了一个新的参数对象 const newParams: RouteParams = {}; // 去遍历传递过来的参数 for (const key in params) { // 拿到参数每一项的值 const value = params[key]; // 如果值为数组通过 map 遍历后用 fn 来处理 // 如果不是数组，那么直接用 fn 来处理 newParams[key] = isArray(value) ? value.map(fn) : fn(value as Exclude<RouteParamValueRaw, any[]>); } return newParams; }\",\"那么通过阅读 applyToParams 源码，我们就知道上面的三个方法是干嘛的了。\",\"举个例子：\",\"// 假设这是我们的 params const params = { id: '123', name: ['Alice', 'Bob'] }; // 通过 applyToParams 方法将所有的参数转为大写 const newParams = applyToParams((v) => { v.toUpperCase(); }, params); console.log(params); // { id: '123', name: ['ALICE', 'BOB'] }\",\"接下来我们来看一下上面的三个方法：\",\"标准化参数：负责将参数值转为字符串，假设有一个参数对象 {id: 123} ，通过 normalizeParams 方法处理之后就会变为 {id: '123' }\",\"编码参数：负责对参数里面的一些特殊字符（空格、制表符）进行编码 \",\"{id: 'hello world'} 通过 encodeParam 进行编码操作，最终得到的是 { id: 'hello%20world'}\",\"解码参数：就是上面编码的逆操作\"]},\"2046\":{\"h\":\"7. 定义各种方法\",\"t\":[\"之后就是各种方法的定义了，这些方法有一些是内部方法，有一些是会随着 router 对象暴露出去给开发者使用的方法。\",\"整体的方法比较多，后面涉及哪个再来分析哪个。\",\"function addRoute( ... ) { ... } function removeRoute() { ... } function getRoutes() { ... } function hasRoute( ... ) { ... } function resolve( ... ) { ... } function locationAsObject( ... ) { ... } function checkCanceledNavigation( ... ) { ... } function push( ... ) { ... } function replace( ... ) { ... } function handleRedirectRecord( ... ) { ... } function pushWithRedirect( ... ) { ... } function checkCanceledNavigationAndReject( ... ) { ... } function runWithContext( ... ) { ... } function navigate( ... ) { ... } function triggerAfterEach( ... ) { ... } function finalizeNavigation( ... ) { ... } function setupListeners( ... ) { ... } function triggerError( ... ) { ... } function isReady( ... ) { ... } function markAsReady( ... ) { ... } function handleScroll( ... ) { ... }\"]},\"2047\":{\"h\":\"8. router 对象\",\"t\":[\"这个 router 对象，最终是要暴露给开发者使用的，里面有一堆方法，是在 createRouter 内部所定义的。\",\"但是有一个方法例外，那就是 install 方法，该方法是属于 router 对象内部所定义的方法\",\"const router: Router = { currentRoute, listening: true, addRoute, removeRoute, hasRoute, getRoutes, // ... install(){ ... } }\",\"根据 vue 官方的设计，如果要注册一个插件到 vue 应用里面，需要有这么一个 install 方法。\",\"const app = createApp({...}); app.use(myPlugin, { ... })\",\"编写插件：\",\"const myPlugin = { install(app, options) { // 一些配置 }, };\",\"有关 vue 应用中如何扩展插件，可以参阅：https://cn.vuejs.org/guide/reusability/plugins.html#introduction\",\"接下来我们就来看一下 router 内部的 install 方法的具体实现，install 方法的整体结构如下：\",\"install(app: App) { const router = this app.component('RouterLink', RouterLink) app.component('RouterView', RouterView) app.config.globalProperties.$router = router Object.defineProperty(app.config.globalProperties, '$route', { enumerable: true, get: () => unref(currentRoute), }) if ( isBrowser && !started && currentRoute.value === START_LOCATION_NORMALIZED ) { started = true push(routerHistory.location).catch(err => { if (__DEV__) warn('Unexpected error when starting the router:', err) }) } const reactiveRoute = {} as RouteLocationNormalizedLoaded for (const key in START_LOCATION_NORMALIZED) { Object.defineProperty(reactiveRoute, key, { get: () => currentRoute.value[key as keyof RouteLocationNormalized], enumerable: true, }) } app.provide(routerKey, router) app.provide(routeLocationKey, shallowReactive(reactiveRoute)) app.provide(routerViewLocationKey, currentRoute) const unmountApp = app.unmount installedApps.add(app) app.unmount = function () { installedApps.delete(app) if (installedApps.size < 1) { pendingLocation = START_LOCATION_NORMALIZED removeHistoryListener && removeHistoryListener() removeHistoryListener = null currentRoute.value = START_LOCATION_NORMALIZED started = false ready = false } unmountApp() } },\",\"接下来我们来一句一句进行解析：\",\"const router = this;\",\"这里定义了一个变量 router，把 this 的值赋给它，注意 this 的指向，这里的 this 指向包含 install 方法的对象，也就是外部所定义的 router 对象。\",\"app.component('RouterLink', RouterLink); app.component('RouterView', RouterView);\",\"这两句非常简单，就是在调用 app.component 方法来注册组件在整个应用里面。每一个组件有一个专门的 ts 文件所对应。代码如下：\",\"import { RouterLink } from './RouterLink'; import { RouterView } from './RouterView';\",\"app.config.globalProperties.$router = router;\",\"这一句其实就是将 router 对象赋值给 $router，回头在外部就可以通过 this.$router 获取到整个 router 对象\",\"Object.defineProperty(app.config.globalProperties, '$route', { enumerable: true, get: () => unref(currentRoute), });\",\"为 app.config.globalProperties 这个对象添加了一个新的属性叫做 $route，外部就可以通过 this.$route 获取当前的路由位置\",\"当外部获取的时候，内部会触发一个 getter，返回 currentRoute 对应的值。\",\"需要注意，这里使用到了 unref，vue3 里面提供了一个名为 unref 的辅助函数，该辅助函数用于处理可能是 ref 的值。\",\"如果你的参数是一个响应式的值（ref），则返回对应的值\",\"如果你的参数不是一个 ref，那么则返回原本的参数\",\"if (isBrowser && !started && currentRoute.value === START_LOCATION_NORMALIZED) { // 这里整个 if 其实就是在判断应用是否是第一次启动 // 如果是第一次启动，那么将 started 修改为 true，下一次就不会进来了 // 也就是说，这段代码只会在第一次初始化的时候执行 started = true; // 将 routerHistory.location 进行一个 push 操作 // 至于 routerHistory.location 是什么？push 又是如何操作的？ // 后面再来追 push(routerHistory.location).catch((err) => { if (__DEV__) warn('Unexpected error when starting the router:', err); }); }\",\"这里解释一下为什么要做这么一个判断？\",\"在大多数情况下，我们的单页应用就只有一个 vue-router 实例，但是在一些特殊情况下，我们可能一个页面里面有多个 vue 应用，每个 vue 应用对应一个 vue-router\",\"<div id=\\\"app1\\\"></div> <div id=\\\"app2\\\"></div>\",\"既然有多个 vue 应用，那么不同的 vue 应用可以都挂载 vue-router 实例：\",\"import { createApp } from 'vue'; import { createRouter, createWebHistory } from 'vue-router'; const router = createRouter({ history: createWebHistory(), routes: [ // routes... ], }); const app1 = createApp(App1); app1.use(router); app1.mount('#app1'); const app2 = createApp(App2); app2.use(router); app2.mount('#app2');\",\"虽然挂载 vue-router 挂了多次，但是 push(routerHistory.location) 这个操作只会在第一次挂载 vue-router 对象的时候执行，因此需要这么一个判断的代码，判断其是否是第一次启动应用。\",\"const reactiveRoute = {} as RouteLocationNormalizedLoaded; for (const key in START_LOCATION_NORMALIZED) { Object.defineProperty(reactiveRoute, key, { get: () => currentRoute.value[key as keyof RouteLocationNormalized], enumerable: true, }); }\",\"这边首先创建了一个对象，注意这个对象的类型为 RouteLocationNormalizedLoaded 这个类型，这里和 START_LOCATION_NORMALIZED 这个常量的类型是一致的。\",\"下面的 for 循环就是在遍历 START_LOCATION_NORMALIZED 这个常量对象，取出来每一个值赋值给 reactiveRoute 对象，但是这里不是简单的赋值，而是将每个值变为了一个 getter 返回的值，getter 所返回的值又和 currentRoute 进行了关联。简单来讲，就是 currentRoute 对应的值发生改变的话，那么这个 reactiveRoute 也会发生改变。\",\"举个例子：\",\"// 假设 currentRoute 对应了如下的值 let currentRoute = ref({ path: '/user/123', name: 'user', params: { id: '123' }, }); // 接下来执行了源码中对应部分的代码： const reactiveRoute = {} as RouteLocationNormalizedLoaded; for (const key in START_LOCATION_NORMALIZED) { Object.defineProperty(reactiveRoute, key, { get: () => currentRoute.value[key as keyof RouteLocationNormalized], enumerable: true, }); } // 之后修改 currentRoute，reactiveRoute 也会发生改变 currentRoute.value = { path: '/user/123/profile', name: 'user', params: { id: '123' }, }; console.log(reactiveRoute.path); // '/user/123/profile'\",\"app.provide(routerKey, router); app.provide(routeLocationKey, shallowReactive(reactiveRoute)); app.provide(routerViewLocationKey, currentRoute);\",\"这三行代码是使用到了 vue 里面的依赖注入功能，这里针对路由对象、响应式的路由值、当前路由进行注册，回头在子组件中就可以通过 inject 来访问这些注册的值。举个例子：\",\"// router/index.ts const router = createRouter({ ... }) export default router // main.ts import router from \\\"router\\\" const app = createApp({ setup(){ // 这里就是在使用 provide 来注册整个 router 对象 provide('router', router) } })\",\"注册之后，可以在其他文件或者组件里面通过 inject 很轻松的拿到这个 router 对象， 从而避免了层层传递值。\",\"import { inject } from 'vue'; export default { setup() { // 通过 inject 拿到所注入的 router 对象 const router = inject('router'); }, };\",\"实际上在源码的 useApi.ts 里面，提供了 useRouter 以及 useRoute 这两个方法：\",\"export function useRouter(): Router { return inject(routerKey)!; } export function useRoute(): RouteLocationNormalizedLoaded { return inject(routeLocationKey)!; }\",\"注意后面的 ！是属于 ts 里面的语法，表示一个东西一定存在，类似于断言。\",\"const unmountApp = app.unmount; installedApps.add(app); app.unmount = function () { installedApps.delete(app); if (installedApps.size < 1) { pendingLocation = START_LOCATION_NORMALIZED; removeHistoryListener && removeHistoryListener(); removeHistoryListener = null; currentRoute.value = START_LOCATION_NORMALIZED; started = false; ready = false; } unmountApp(); };\",\"这里重写了 vue 的 unmount 卸载方法，首先将 vue 原本的 unmount 卸载方法存储到 unmountApp 里面（后面要使用，所以这里暂时存一份），然后 app.unmount = function(){ ... } 这一块代码就是在重写 unmount 方法了，也就是说，当 vue 应用进行卸载的时候，会先执行重写的方法，但是 vue 卸载的时候，本身的卸载方法也是需要执行的，所以最后有一句 unmountApp( ) 表示执行原本 vue 应用的卸载方法。\"]},\"2048\":{\"h\":\"二、history 基础知识\",\"t\":[\"history 是浏览器环境中所支持的一个对象，该对象用于管理当前创建最近访问过的 URL 历史记录，所有的 URL 会被存储在一个名为 histroy 的对象里面，回头就可以通过 JS 脚本调用 history 对象的方法从而控制浏览器前进或者后退。\",\"例如打开浏览器，新创建一个标签页会话，然后在控制台输入 history，那么就能够看到这个对象\",\"length：表示历史记录堆栈中 URL 的数量，这包括了当前页面以及之前访问过的页面的记录。需要注意，这个属性是一个只读属性，不能够通过代码去修改的。\",\"scrollRestoration：对应的值有两个\",\"auto：默认值，回到上一个历史记录的时候，浏览器会尝试自动滚动到上一次所滚动的地方\",\"manual：需要开发者自己来处理这个滚动恢复\",\"state：这个属性表示当前历史记录条目的 state 状态对象，这个状态对象的值可以由 pushState 或者 replaceState 来创建，如果没有通过这两个方法进行创建的话，那么默认值为 null\",\"之所以要复习这个 history 对象，是因为我们的单页应用主要就是和这个 history 对象打交道。\",\"所谓单页应用，本质上只有一张 html 页面，要做到视图的变化，就需要需要前端路由去映射不同的模块。\",\"目前比较流行的单页方式有两种：\",\"hash 模式\",\"html5 模式\"]},\"2049\":{\"h\":\"1. hash 模式\",\"t\":[\"hash 模式的原理在于一个 URL 的 hash 部分的变化，不会引起和服务器之间的交互，那么我们就可以让 hash 部分的值和视图模块相对应：\",\"example.com/#/index // 首页视图 example.com/#/list // 列表视图\",\"hash 值的改变不会导致向服务器发送请求，但是 history 列表是会发生改变，那么用户就可以通过浏览器的前进和后退去控制视图的变化，开发者也可以通过 history 提供的相关方法 forward、back、go 来进行不同视图之间的跳转。\",\"hash 改变之后，会触发 hashchange 的事件，所以我们一般会去监听这个事件，从而根据 hash 值的变化来进行视图的切换：\",\"window.addEventListener('hashchange', function () { // 获取新的哈希值 const hash = window.location.hash; // 根据新的哈希值来更新页面内容 switch (hash) { case '#/page1': // 加载 page1 的内容 break; case '#/page2': // 加载 page2 的内容 break; // 更多的情况... } });\"]},\"2050\":{\"h\":\"2. html5 模式\",\"t\":[\"html5 模式用到 history 相关的 API 来通过另外一种方式实现这个单页应用：\",\"pushState：用于在浏览器堆栈里面添加一个新的状态，这个方法接收 3 个参数\",\"history.pushState(state, title, url);\",\"state：要推入的状态对象，一般要求这个对象就是一个纯粹的数据对象（能够被 JSON.stringify 转为字符串的对象）\",\"title：新页面的标题，一般浏览器都会忽略这个参数，所以一般传递一个空字符串或者 null 即可\",\"url：新的历史记录的 url\",\"例如，我们在控制台输入如下的代码：\",\"history.pushState({page:'page1'}, '', '/page1')\",\"假设浏览器的 url 原本是 www.test.com 的话，那么执行了上面的代码之后，就会变化 www.test.com/page1 ，并且不会和服务器之间进行通信，但是 history 堆栈会发生响应的变化，这就为我们通过这种方式来实现单页应用创建了良好的条件。\",\"replaceState：该方法和 pushState 方法是类似的，但是不会推入新的状态，而是替换。\",\"history.repalceState({ page: 'page1' }, '', '/page1');\",\"popState：当浏览器页面进行前进后退的时候，会触发 popState 事件，你可以监听这个事件，然后从事件对象中获取之前传递给 pushState 或者 repalceState 的 state 状态对象。\",\"window.addEventListener('popstate', function (event) { console.log('state: ', event.state); });\",\"下面我们来举一个例子，下面是基于 html5 history api 所实现的一个简单单页应用：\",\"<div id=\\\"app\\\"> <h1>My Single Page App</h1> <div> <a href=\\\"/\\\" onclick=\\\"navigate(event, '/')\\\">Home</a> | <a href=\\\"/about\\\" onclick=\\\"navigate(event, '/about')\\\">About</a> </div> <div id=\\\"content\\\"></div> </div>\",\"// 渲染函数 function render(state) { const content = document.getElementById('content'); switch (state) { case '/': content.innerHTML = '<h2>Welcome to Home Page</h2>'; break; case '/about': content.innerHTML = '<h2>About Page</h2>'; break; default: content.innerHTML = '<h2>Page Not Found</h2>'; } } // 导航函数：保证用户点击页面中的 a 标签的时候，能够进行正常跳转 function navigate(e, route) { e.preventDefault(); // 阻止默认事件 history.pushState(route, '', route); // 推入新的状态 render(route); // 渲染对应的视图 } // 监听 popstate 事件 // 保证用户点击浏览器本身的前进后退按钮的时候，视图能够进行切换 window.addEventListener('popstate', function (e) { render(e.state); }); // 初始化 document.addEventListener('DOMContentLoaded', function () { const url = window.location.pathname; history.replaceState(url, '', url); render(url); });\",\"html5 模式相比 hash 模式，外观上更加的简洁美观，没有 # 号了，但是也有一个缺点，就是当你刷新页面的时候，会发现服务器会返回 404，原因很简单，例如前面我们所举的例子，URL 变为了 www.test.com/page1 ，刷新的时候会将整个这个 URL 提交给服务器，但是服务器后端无法找到对应的资源，所以会报错。\",\"为了解决这个问题，就需要我们在服务器上面做一些配置，使得针对所有的路由请求，服务器都返回一份相同的 html 文件（通常就是 index.html），因此对于这个 URL www.test.com/page1 ，哪怕服务器找不到，也给你返回 index.html，之后再使用前端路由来接管渲染相应的内容。\",\"具体的配置方法取决于你的服务器软件。\",\"例如你使用的 express.js，那么你可以添加如下的配置：\",\"app.get('*', function (request, response) { response.sendFile(path.resolve(__dirname, 'public', 'index.html')); });\",\"如果你使用的是 nginx，那么你需要添加如下的配置：\",\"location / { try_files $uri /index.html; }\"]},\"2051\":{\"h\":\"3. location 对象\",\"t\":[\"location 对象也是浏览器环境中的一个原生对象，通过这个对象可以获取到和 location 相关的众多信息。\",\"例如：\",\"hash：如果 URL 中包含有 #，该方法将返回该符号之后的内容。例如：http://www.example.com/index.html#welcome 的 hash 是 #welcome。\",\"host：服务器的名字，例如 www.example.com 。\",\"hostname：通常等于 host，有时会省略前面的 www。\",\"href：当前页面载入的完整 URL。\",\"pathname：URL 中主机名之后的部分。例如：http://www.example.com/html/js/jsbasic/2010/0319/88.html 的 pathname 是 /html/js/jsbasic/2010/0319/88.html。\",\"port：URL 中声明的请求端口。默认情况下，大多数 URL 没有端口信息（默认为 80 端口），所以该属性通常是空白的。例如 http://www.example.com:8080/index.html 这样的 URL 的 port 属性为 '8080'。\",\"protocol：URL 中使用的协议，即双斜杠 // 之前的部分。例如 http://www.example.com 中的 protocol 属性等于 'http:'，ftp://www.example.com 的 protocol 属性等于'ftp:'。\",\"search：执行 GET 请求的 URL 中的问号 ? 后的部分，又称查询字符串。例如 http://www.example.com/search.html?tern=sunchis 中 search 属性为 ?term=sunchis。\",\"除了上面的属性以外，该对象还支持一些方法：\",\"assign 方法：载入一个新的文档\",\"reload 方法：重新载入当前文档\",\"replace 方法：用新的文档替换当前文档\",\"不过对于开发单页应用来讲，上面的方法一般不会用到，因为单页应用的特点就是一个页面，没有刷新的，也就是说至此至终都是一个文档，不会载入新的文档。\"]},\"2052\":{\"h\":\"三、createWebHistory 结构拆解\",\"t\":[\"首先我们还是来回忆一下 createWebHistory 方法是如何使用的。\",\"const router = createRouter({ history: createWebHistroy(import.meta.env.BASE_URL), });\",\"整个 createWebHistroy(import.meta.env.BASE_URL) 方法调用之后，返回的是一个对象，然后把这个对象作为传入到 createRouter 里面的配置对象的 history 对应的键值。\",\"createWebHistroy 方法所对应的源码位于 history/html5.ts 文件里面。\"]},\"2053\":{\"h\":\"1. 整体结构分析\",\"t\":[\"整体方法的结构如下：\",\"export function createWebHistory(base?: string): RouterHistory { // 1. 针对 base 做一个标准化操作 // 前加/，后去掉/ base = normalizeBase(base); // 2. 创建导航对象 // { // location: currentLocation, // state: historyState, // push, // replace // } const historyNavigation = useHistoryStateNavigation(base); // 3. 创建监听对象 const historyListeners = useHistoryListeners( base, historyNavigation.state, historyNavigation.location, historyNavigation.replace ); function go(delta: number, triggerListeners = true) { if (!triggerListeners) historyListeners.pauseListeners(); history.go(delta); } // 4. 将上面的对象合并到 routerHistory 的对象里面 const routerHistory: RouterHistory = assign( { // it's overridden right after location: '', base, go, createHref: createHref.bind(null, base), }, historyNavigation, historyListeners ); // 5. 为 routerHistory 添加 location 和 state 属性 Object.defineProperty(routerHistory, 'location', { enumerable: true, get: () => historyNavigation.location.value, }); Object.defineProperty(routerHistory, 'state', { enumerable: true, get: () => historyNavigation.state.value, }); // 6. 返回 routerHistory return routerHistory; }\",\"首先该方法接收一个可选的 base 参数，在上面的示例中，我们传入的是 import.meta.env.BASE_URL\",\"import.meta：表示 JS 的元素行，它包含了和当前 JS 模块相关的元数据。在 vite 项目中，import.meta.env 用于访问项目的环境变量\",\"BASE_URL：这是一个非常常见的环境变量，它通常用于表示一个应用程序的基础 URL。\",\"例如你将整个应用部署到 /app/ 目录下面，那么你就可以将 BASE_URL 设置为 /app/，之后当你创建一个 /home 的路由的时候，那么这个路由的完整路径就会被映射为 /app/home。\",\"关于这个 BASE_URL 默认是可以在 vite.config.ts 里面进行配置的，如果你没有配置，那么默认会是 /\",\"可以参考 vite 官方文档：https://cn.vitejs.dev/config/shared-options.html#base\"]},\"2054\":{\"h\":\"2. 标准化 base\",\"t\":[\"base = normalizeBase(base);\",\"normalizeBase 方法究竟在做什么：\",\"export function normalizeBase(base?: string): string { // 判断是否传入了 base // 如果没有传递，给一个初始值 / // 另外还对浏览器环境下的 base 标签进行了判断 if (!base) { if (isBrowser) { // respect <base> tag const baseEl = document.querySelector('base'); base = (baseEl && baseEl.getAttribute('href')) || '/'; // strip full URL origin base = base.replace(/^\\\\w+:\\\\/\\\\/[^\\\\/]+/, ''); } else { base = '/'; } } // 也就是说，经历上面的 if，base 一定是有值的 // 如果 base 的第一个字符不为 / 或者 # // 那么就手动的添加一个 / // 例如，传入的 base 为 app/，经过下面这行代码处理之后，就会变为 /app/ if (base[0] !== '/' && base[0] !== '#') base = '/' + base; // 又使用 removeTrailingSlash 方法对 base 做了某种处理 // 然后返回处理值 // /app/ --> removeTrailingSlash(base) --> /app return removeTrailingSlash(base); }\",\"removeTrailingSlash 方法对应的源码如下：\",\"const TRAILING_SLASH_RE = /\\\\/$/; export const removeTrailingSlash = (path: string) => path.replace(TRAILING_SLASH_RE, '');\",\"至此，我们就将 normalizeBase 方法搞清楚了，就是对传入的 base 做一个标准化的初始操作，不管你传入的是什么牛鬼蛇神，这边都进行一个统一处理，拿到一个相对比较统一的值。\"]},\"2055\":{\"h\":\"3. 后续操作\",\"t\":[\"const historyNavigation = useHistoryStateNavigation(base); const historyListeners = useHistoryListeners( base, historyNavigation.state, historyNavigation.location, historyNavigation.replace );\",\"上面的代码分别调用了 useHistoryStateNavigation 和 useHistoryListeners 方法，这个可以说是整个 createWebHistory 方法的核心，这两个方法分别会返回一个对象，也就是说 historyNavigation 和 historyListeners 是两个对象，这两个对象分别会被合并到 routerHistory 对象里面：\",\"const routerHistory: RouterHistory = assign( { // 覆盖右边对象的部分属性 location: '', base, go, createHref: createHref.bind(null, base), }, historyNavigation, historyListeners );\",\"合并后最终导出的就是这个 routerHistory 对象：\",\"return routerHistory;\",\"关于 useHistoryStateNavigation 和 useHistoryListeners 方法具体做了什么，我们放在后面来解析，这里先放一放。\",\"注意上面在进行对象合并的时候，第一个对象里面有一个 go 方法，对应的源码如下：\",\"function go(delta: number, triggerListeners = true) { if (!triggerListeners) historyListeners.pauseListeners(); history.go(delta); }\",\"上面的源码，第一句 if 我们可以先放一放，我们看第二句，我们发现第二句其实就是在调用原生的 history 对应的 go 方法，然后把 delta 传进去。并且这个方法会被合并到 routerHistory 上面随着 routerHistory 暴露出去。\",\"我们回忆一下，createRouter 所创建的 router 对象就有 go 方法\",\"const go = (delta: number) => routerHistory.go(delta); const router: Router = { // ... go, back: () => go(-1), forward: () => go(1), // ... };\",\"Object.defineProperty(routerHistory, 'location', { enumerable: true, get: () => historyNavigation.location.value, }); Object.defineProperty(routerHistory, 'state', { enumerable: true, get: () => historyNavigation.state.value, });\",\"最后仍然是给要暴露出去的 routerHistory 添加属性，这里添加了两个属性：\",\"location：对应的值为 historyNavigation.location.value\",\"state：对应的值我哦 historyNavigation.state.value\"]},\"2056\":{\"h\":\"四、useHistoryStateNavigation 结构解析\"},\"2057\":{\"h\":\"1. 整体结构\",\"t\":[\"该方法的整体结构如下：\",\"function useHistoryStateNavigation(base: string) { // 从原生的 window 对象里面解构出 history 和 location const { history, location } = window; // 两个私有的变量，之后会随着返回的对象暴露给外部 // 这里实际上也是用到了闭包 const currentLocation: ValueContainer<HistoryLocation> = { value: createCurrentLocation(base, location), }; // 创建一个舍去base的url的字符串 const historyState: ValueContainer<StateEntry> = { value: history.state }; // 看你是否是第一次进入页面，如果是第一次，那么此时是没有任何状态的 // 那么我们就维护一个初始化的状态 if (!historyState.value) { // ... } // 内部方法，供内部使用 function changeLocation() { // ... } // 暴露给外部的方法 function replace(to: HistoryLocation, data?: HistoryState) { // ... } // 暴露给外部的方法 function push(to: HistoryLocation, data?: HistoryState) { // ... } return { location: currentLocation, state: historyState, push, replace, }; }\",\"该方法会为我们返回一个对象，该对象主要是负责路由的历史状态和当前位置的管理，这个方法接收一个 base 作为参数，返回的对象会包含 state、location、push 和 repalce 这么几个成员。\"]},\"2058\":{\"h\":\"2. 代码拆解\",\"t\":[\"接下来我们进入到代码拆解环节\",\"const currentLocation: ValueContainer<HistoryLocation> = { value: createCurrentLocation(base, location), };\",\"currentLocation 最终对应的值为一个对象 { value: xxx } ，xxx 这个值来源于 createCurrentLocation(base, location)，接下来我们就会去看这个方法的源码：\",\"// 接收两个参数 // 1. base // 2. location 注意这个 location 是原生的 location 对象 function createCurrentLocation(base: string, location: Location): HistoryLocation { // 从原生locaton 对象里面解构出来一些值 // 假设我们的完整的 url 为 https://example.com/home/page?query=searchterm#section1 // pathname ---> /home/page // search ---> ?query=searchterm // hash ---> #section1 const { pathname, search, hash } = location; // 整个这一段是在查看 base 里面是否有 # // 如果有，那么会进入到 if 里面进行单独的处理 const hashPos = base.indexOf('#'); if (hashPos > -1) { let slicePos = hash.includes(base.slice(hashPos)) ? base.slice(hashPos).length : 1; let pathFromHash = hash.slice(slicePos); // prepend the starting slash to hash so the url starts with /# if (pathFromHash[0] !== '/') pathFromHash = '/' + pathFromHash; return stripBase(pathFromHash, ''); } const path = stripBase(pathname, base); return path + search + hash; }\",\"为了简化代码，我们先忽略 if，那么这段代码就变为了：\",\"// 接收两个参数 // 1. base // 2. location 注意这个 location 是原生的 location 对象 function createCurrentLocation(base: string, location: Location): HistoryLocation { // 从原生locaton 对象里面解构出来一些值 // 假设我们的完整的 url 为 https://example.com/home/page?query=searchterm#section1 // pathname ---> /home/page // search ---> ?query=searchterm // hash ---> #section1 const { pathname, search, hash } = location; const path = stripBase(pathname, base); return path + search + hash; }\",\"接下来调用了 stripBase 对 pathname 进行一个处理，返回 path + search + hash 的拼接，返回的值是一个字符串类型，而这里标注的是 HistoryLocation，这个 HistoryLocation 其实就是 string 的一个别名\",\"export type HistoryLocation = string;\",\"关键点就来到 stripBase，看一下这个方法做了什么：\",\"export function stripBase(pathname: string, base: string): string { // no base or base is not found at the beginning if (!base || !pathname.toLowerCase().startsWith(base.toLowerCase())) return pathname; return pathname.slice(base.length) || '/'; }\",\"该方法主要负责从一个路径中移除 base 部分的字符串，例如：\",\"const base = '/app'; const pathname = '/app/home'; const path = stripBase(pathname, base); console.log(path); // /home\",\"上面的 stripBase 方法搞清楚后，那么 createCurrentLocation 这个方法也就清晰，假设 base 为 / ，location 对应的 url 假设为 https://example.com/home/page?query=searchterm#section1 那么最终通过 createCurrentLocation 处理，得到的结果如下：\",\"const result = createCurrentLocation('/', { pathname: '/home/page', search: '?query=searchterm', hash: '#section1', }); console.log(result); // home/page?query=searchterm#section1\",\"假设 base 为 /home，location 对应的 url 不变，那么最终通过 createCurrentLocation 处理，得到的结果如下：\",\"const result = createCurrentLocation('/home', { pathname: '/home/page', search: '?query=searchterm', hash: '#section1', }); console.log(result); // /page?query=searchterm#section1\",\"因此，我们可以很清晰的知道这个 createCurrentLocation 是在干嘛了，就是创建一个 url 的字符串，但是这个 url 字符串是去除了 base 部分。\",\"至于 if 里面的逻辑，主要是检查 base 里面是否有 #， 如果有 # ， 那么需要单独处理，例如：\",\"// 当你的 base 里面还有 # 的时候 // 那么从 location 里面解构出来的 hash 部分的值是有问题 // 真正 hash 部分的值应该为 #section1，但是得到的却是 #/home/page#section1 // 所以需要把这一块进行一个处理 // 经过 if 里面的处理，最终得到的字符串为 /page#section1 const result = createCurrentLocation('#/home', { hash: '#/home/page#section1', }); console.log(result); // /page#section1\",\"最后，我们来总结一下 createCurrentLocation 调用的时候， 传入 base 和 url 对应的 location，返回一个字符串，这个字符串始终是去除了 base 部分的。\",\"const historyState: ValueContainer<StateEntry> = { value: history.state };\",\"这句代码表示从原生 history 对象上面去拿 state 状态对象。这里我们可以稍微研究一下类型的值。\",\"// ValueContainer 就是一个泛型对象，T 是什么类型取决于你传入的值 export type ValueContainer<T> = { value: T };\",\"// StateEntry interface StateEntry extends HistoryState { back: HistoryLocation | null; current: HistoryLocation; forward: HistoryLocation | null; position: number; replaced: boolean; scroll: _ScrollPositionNormalized | null | false; }\",\"// HistoryState export interface HistoryState { [x: number]: HistoryStateValue; [x: string]: HistoryStateValue; }\",\"// HistoryStateValue export type HistoryStateValue = | string | number | boolean | null | undefined | HistoryState | HistoryStateArray; // HistoryStateArray export interface HistoryStateArray extends Array<HistoryStateValue> {}\",\"// 判断你是否是首次渲染，因为第一次是没有 historyState 状态对象的 if (!historyState.value) { changeLocation( currentLocation.value, { back: null, current: currentLocation.value, forward: null, // the length is off by one, we need to decrease it position: history.length - 1, replaced: true, // don't add a scroll as the user may have an anchor, and we want // scrollBehavior to be triggered without a saved position scroll: null, }, true ); } // 内部方法 function changeLocation(to: HistoryLocation, state: StateEntry, replace: boolean): void { // ... }\",\"if 主要是判断是否是首次刷新，如果 historyState.value 值为 null，那么说明是第一次，那么就会调用 changeLocation 方法。\",\"changeLocation 方法接收三个参数：\",\"to：第一个参数刚才所得到的不包含 base 的 url 后面的字符串\",\"state：第二个参数是一个对象，这个对象的类型为 stateEntry\",\"repalce：表示是否是替换模式，这里默认传递了 true，表示使用替换模式\",\"接下来我们就需要看一下 changeLocation 内部在做什么：\",\"function changeLocation(to: HistoryLocation, state: StateEntry, replace: boolean): void { // 判断 base 里面是否包含 # 号 const hashIndex = base.indexOf('#'); // 拼接 url，所拼接的这个 url 回头会作为 pushState 或者 repalceState 方法的第三个参数传入 const url = hashIndex > -1 ? (location.host && document.querySelector('base') ? base : base.slice(hashIndex)) + to : createBaseLocation() + base + to; try { // 根据 replace 是 true 还是 false // 来决定调用 replaceState 还是 pushState // 不管调用哪个，浏览器搜索栏的 url 都会发生变化 history[replace ? 'replaceState' : 'pushState'](state, '', url); // 将 state 状态对象的值赋值给 historyState.value，从而进行一个初始化 historyState.value = state; } catch (err) { if (__DEV__) { warn('Error with push/replace State', err); } else { console.error(err); } // Force the navigation, this also resets the call count location[replace ? 'replace' : 'assign'](url); } }\",\"至此，整个 changeLocation 方法所做的事情，就非常清晰了，该方法就是根据传入的 to（url 字符串，不包含 base 部分），以及 state 状态值，来 调用原生 history 对象的 pushState 或者 repalceState 方法来修改 location ，执行该行代码后，页面搜索栏的 url 就会发生变化，并且这一次变化是会被记录到 history 堆栈里面的。\",\"最后还剩下两个方法，repalce 以及 push，这两个方法是会随着返回的对象暴露出去的。\",\"首先我们来看 repalce 方法，对应源码如下：\",\"function replace(to: HistoryLocation, data?: HistoryState) { // 创建了一个状态对象 const state: StateEntry = assign( {}, history.state, buildState( historyState.value.back, // keep back and forward entries but override current position to, historyState.value.forward, true ), data, { position: historyState.value.position } ); // 调用上面写好的 changeLocation 去改变 location changeLocation(to, state, true); // 更新新的 currentLocation 对应的值 currentLocation.value = to; }\",\"这里调用了一个 buildState 方法：\",\"function buildState( back: HistoryLocation | null, current: HistoryLocation, forward: HistoryLocation | null, replaced: boolean = false, computeScroll: boolean = false ): StateEntry { return { back, current, forward, replaced, position: window.history.length, scroll: computeScroll ? computeScrollPosition() : null, }; }\",\"这个 buildState 方法就是根据传入的参数，返回一个标准的 StateEntry 的状态对象\",\"下面是 push 方法相关的源码：\",\"function push(to: HistoryLocation, data?: HistoryState) { // 创建一个状态对象 const currentState = assign({}, historyState.value, history.state as Partial<StateEntry> | null, { forward: to, scroll: computeScrollPosition(), }); // 通过刚才创建的状态对象调用 changeLocation 来修改 location changeLocation(currentState.current, currentState, true); // 由创建一个状态对象 const state: StateEntry = assign( {}, buildState(currentLocation.value, to, null), { position: currentState.position + 1 }, data ); // 再次调用 changeLocation 方法来修改 location changeLocation(to, state, false); // 更新新的 currentLocation 对应的值 currentLocation.value = to; }\",\"面试题：为什么 useHistoryStateNavigation 内部的 push 方法要调用两次 changeLocation ？\",\"仔细观察两次所调用的 changeLocation，你会发现一个事情，第三个参数是不一样的，第一次是 true，第二次是 false，也就是说，第一次是通过 repalce 的方式（history.repalceState）来修改的 location，第二次是通过 push 的方式（history.pushState）来修改的 lcoation。\",\"因此这个问题就变成了为什么在 push 之前要先 replace 一次 ？\",\"两次 changeLocation 调用的目录是不一样的。\",\"function changeLocation(to, state, replace) { window.history[replace ? 'replaceState' : 'pushState'](state, null, to); } // 假设在调用 push 函数之前，浏览器的历史记录栈只有一个条目，这个条目表示的路由是 '/home'。 // [ '/home' ] <-- 当前历史记录条目 // 历史记录条目的状态对象如下 // { // current: '/home', // back: null, // forward: null, // // ...其他属性 // } function push(to) { const currentState = { current: '/home', forward: to, scroll: null, }; // 第一次构建状态对象和调用 changeLocation,更改forward // [ '/home' ] <-- 当前历史记录条目 // 历史记录条目的状态对象如下 // { // current: '/home', // back: null, // forward: /about, // // ...其他属性 // } changeLocation(currentState.current, currentState, true); // 第二次构建状态对象和调用 changeLocation，跳转路由 // [ '/home', '/about' ] <-- 当前历史记录条目 // 历史记录条目的状态对象如下 // { // current: '/about', // back: /home, // forward: null, // // ...其他属性 // } const state = { current: to, back: currentState.current, forward: null, }; changeLocation(to, state, false); } push('/about');\",\"在这个示例中，我们定义了一个简化版的 changeLocation 方法和 push 方法。push 方法接收一个参数 to，这个参数表示我们希望跳转到的新的路由，在上面的示例中为 /about。\",\"当我们调用 push('/about')时，首先会构建第一个状态对象 currentState，然后调用 changeLocation 来进行 location 的修改，注意这一次修改使用的是 repalce 的模式，之所以有这么一次修改，就为了让当前的这个状态对象的 forward 对应正确的目标路由。\",\"之后第二次构建状态对象 state，再次调用 changeLocation 来修改 location，这一次使用的就是 push 模式，正常的推入新的状态对象即可。\",\"也就是说，之所以第一次调用 changeLocation，就是为了让用户从 /about 回到 /home 之后，forward 里面有值，能够再次点击前进按钮回到 /about。换个说法，你从新路由（2）回退到当前路由（1）的时候，可以使用 forward 方法重新前进到新路由（回到 2）。\"]},\"2059\":{\"h\":\"五、useHistoryListeners 结构解析\",\"t\":[\"首先我们还是来看一下该方法的一个调用：\",\"const historyListeners = useHistoryListeners( base, historyNavigation.state, historyNavigation.location, historyNavigation.replace );\",\"在调用这个 useHistoryListeners 传入了 4 个参数，第一个参数是 base，而后面三个参数则是使用的是上一句代码所得到的 historyNavigation 这个对象上面的属性。\"]},\"2060\":{\"h\":\"1. 整体结构\",\"t\":[\"接下来我们来看一下 useHistoryListeners 这个方法内部的整体结构，源码如下：\",\"function useHistoryListeners( base: string, historyState: ValueContainer<StateEntry>, currentLocation: ValueContainer<HistoryLocation>, replace: RouterHistory['replace'] ) { // 三个私有变量 let listeners: NavigationCallback[] = []; let teardowns: Array<() => void> = []; let pauseState: HistoryLocation | null = null; // popstate 事件的事件处理函数 const popStateHandler: PopStateListener = ({ state }: { state: StateEntry | null }) => { // ... }; // 会暴露给外部的方法 function pauseListeners() { // ... } // 会暴露给外部的方法 function listen(callback: NavigationCallback) { // ... } // 是 beforeunload 事件的事件处理函数 function beforeUnloadListener() { // ... } // 会暴露给外部的方法 function destroy() { // ... } // 绑定了两个事件：popstate 和 beforeunload window.addEventListener('popstate', popStateHandler); window.addEventListener('beforeunload', beforeUnloadListener, { passive: true }); return { pauseListeners, listen, destroy, }; }\",\"可以看到，整体的结构也是比较清晰的，基本上和前面是类似的，调用方法后，会向外部返回一个对象，该对象上面会有方法内部的一些新定义的方法。\"]},\"2061\":{\"h\":\"2. 代码拆解\",\"t\":[\"接下来我们还是来逐行进行拆解。\",\"let listeners: NavigationCallback[] = []; let teardowns: Array<() => void> = []; let pauseState: HistoryLocation | null = null;\",\"这里的三句代码，就是声明了三个变量，需要注意一下这三个变量的类型\",\"listeners：对应的是 NavigationCallback 类型的数组\",\"// NavigationCallback 类型信息如下，注意这是一个函数 export interface NavigationCallback { (to: HistoryLocation, from: HistoryLocation, information: NavigationInformation): void; }\",\"listeners 通常会存放一组像 NavigationCallback 这样的回调函数，这些回调函数会在路由发生变化的时候被调用，这些回调函数往往是为了执行一些副作用。\",\"teardowns：仍然是一个数组，数组里面的每一项的元素类型为 ( ) => void，这个类型也是一个函数，表示一个空函数。\",\"pauseState：这个变量所对应的类型就是 HistoryLocation（string 的别名类型）或者 null\",\"接下来 popStateHandler 作为 popstate 事件处理方法，里面具体的逻辑我们先放一放，先看后面的。\",\"// 该方法是最终会暴露给外部的方法 function pauseListeners() { pauseState = currentLocation.value; }\",\"const currentLocation: ValueContainer<HistoryLocation> = { value: createCurrentLocation(base, location), };\",\"这个方法本身所做的事情也非常的简单，就是将当前的路由值（去除了 base 部分的 url 后面部分）赋值给 pauseState。\",\"在 vue-router 中，pauseState 主要是用来暂停或者停止处理路由事件的变量（相当于是一个开关），因此这个函数实际上是标记了一个暂停点，这个暂停点表示在当前的这个路由位置的时候，暂停处理路由事件。\",\"function listen(callback: NavigationCallback) { // set up the listener and prepare teardown callbacks listeners.push(callback); const teardown = () => { const index = listeners.indexOf(callback); if (index > -1) listeners.splice(index, 1); }; teardowns.push(teardown); return teardown; }\",\"这个方法接收一个 NavigationCallback 类型的 callback 回调函数，首先将这个 callback 推入到 listeners 数组里面。\",\"然后声明了一个名为 teardown 的方法，这个方法的作用是从 listeners 数组里面准确的删除刚才所推入的 callback，这个和我们之前解析的 useCallbacks 是相同的套路。\",\"不过这个 teardown 删除方法还被推入到了 teardowns，并且向外部返回 teardown 删除函数。\",\"function beforeUnloadListener() { const { history } = window; if (!history.state) return; history.replaceState(assign({}, history.state, { scroll: computeScrollPosition() }), ''); } // 绑定 beforeunload 事件 // 该事件会在页面卸载之前触发 window.addEventListener('beforeunload', beforeUnloadListener, { passive: true, });\",\"也就是说，beforeUnloadListener 是页面卸载之前会做的事情。首先会检查 window.history.state 是否存在。\",\"如果不存在，那么就不需要做任何的处理\",\"没有进入到上面的 if，说明 state 状态对象是存在，那么就在页面卸载之前保存当前的滚动位置，然后在用户下一次访问这个页面的时候，可以恢复到之前的滚动位置。\",\"function destroy() { for (const teardown of teardowns) teardown(); teardowns = []; window.removeEventListener('popstate', popStateHandler); window.removeEventListener('beforeunload', beforeUnloadListener); }\",\"destroy 顾名思义是销毁的意思，因此这里是一个销毁函数，这个方法会暴露给外部，供外部来使用。\",\"该方法首先会遍历 teardowns 数组，拿到每一个 teardown 并执行，执行每一个 teardown 删除方法意味着将之前推入到 listeners 里面的 callback 删除掉了。之后将 teardowns 数组也清空，最后卸载事件。\",\"上面的代码的意思搞定之后，接下来就让我们来看一下 popStateHandler。\",\"const popStateHandler: PopStateListener = ({ state }: { state: StateEntry | null }) => { const to = createCurrentLocation(base, location); const from: HistoryLocation = currentLocation.value; const fromState: StateEntry = historyState.value; let delta = 0; if (state) { currentLocation.value = to; historyState.value = state; if (pauseState && pauseState === from) { pauseState = null; return; } delta = fromState ? state.position - fromState.position : 0; } else { replace(to); } listeners.forEach((listener) => { listener(currentLocation.value, from, { delta, type: NavigationType.pop, direction: delta ? delta > 0 ? NavigationDirection.forward : NavigationDirection.back : NavigationDirection.unknown, }); }); }; window.addEventListener('popstate', popStateHandler);\",\"每次 popstate 事件触发，则会执行 popStateHandler。\",\"popstate 事件什么时候触发？\",\"触发之后会执行 popStateHandler，那么这个 popStateHandler 究竟做了什么？\",\"popstate 事件什么时候触发？\",\"popstate 会在当前的历史条目发生变化的时候触发，也就是说，当用户点击浏览器的前进或者后退，或者使用 history 相关的 back、forward、go 之类的方法的时候，popstate 就会触发。（而通过标签、pushState 或 replaceState 并不会触发这个事件）\",\"另外还有一个重要的信息，当 popstate 事件触发的时候，事件处理函数会收到一个事件对象，这个事件对象上面会有一个 state 属性，这个 state 属性就是之前在使用 history.pushState 或者 history.replaceState 方法时所推入的状态。\",\"下面是关于 popstate 的一个简单使用案例：\",\"<body> <button id=\\\"btn1\\\">page1</button> <button id=\\\"btn2\\\">page2</button> <button id=\\\"btn3\\\">page3</button> <script src=\\\"./temp.js\\\"></script> </body>\",\"window.addEventListener('popstate', function (event) { alert('location: ' + document.location + ', state: ' + JSON.stringify(event.state)); }); btn1.onclick = function () { history.pushState({ page: 1 }, 'title 1', '/page=1'); }; btn2.onclick = function () { history.pushState({ page: 2 }, 'title 2', '/page=2'); }; btn3.onclick = function () { history.pushState({ page: 3 }, 'title 3', '/page=3'); };\",\"触发之后会执行 popStateHandler，那么这个 popStateHandler 究竟做了什么？\",\"目前 popstate 事件触发之后，对应的回调是 popStateHandler，所以我们需要看一下这个 popStateHandler 究竟在做什么？\",\"const to = createCurrentLocation(base, location); const from: HistoryLocation = currentLocation.value; const fromState: StateEntry = historyState.value; let delta = 0;\",\"这里定义了 4 个变量：\",\"to：通过向 createCurrentLocation 传入 base 以及 location，拿到一个最新的 url，注意这个 url 是去除了 base 部分\",\"form：拿到之前的 url\",\"fromState：拿到之前的状态对象\",\"delta：主要是用来计算要前进还是后退\",\"if (state) { currentLocation.value = to; historyState.value = state; if (pauseState && pauseState === from) { pauseState = null; return; } delta = fromState ? state.position - fromState.position : 0; } else { replace(to); }\",\"首先会做一个 state 是否存在的判断，state 是触发 popstate 事件的时候随着事件对象传入的。\",\"state 存在 \",\"首先做的第一件事情就是更新当前的 currentLocation 和 historyState 这两个值\",\"接下来判断暂停状态是否存在并且是否等于 from \",\"如果存在暂停状态并且暂停状态等于之前的 url，这里就清空暂停状态，直接返回\",\"如果没有进入上面的 if，那么就做 delta 值的计算，关于这个值的计算又需要判断是否存在之前的状态对象 \",\"如果存在，通过两个状态对象之间的 position 插值来计算 delta\",\"如果不存在之前的状态对象，那么值设置为 0\",\"state 不存在：使用 replace 直接跳转到新的 url 即可\",\"listeners.forEach((listener) => { listener(currentLocation.value, from, { delta, type: NavigationType.pop, direction: delta ? delta > 0 ? NavigationDirection.forward : NavigationDirection.back : NavigationDirection.unknown, }); });\",\"遍历 listeners 数组，拿到存储在里面的每一个 callback 回调函数，只不过这里命名为了 listener，然后执行这些回调函数。注意之前计算出来的 delta 值会作为第三个参数的值的一部分传入。\",\"return { pauseListeners, listen, destroy, };\",\"最后就是向外部返回这么一个对象，也就是外部所拿到的 historyListeners 对象。\"]},\"2062\":{\"h\":\"六、RouterLink 组件解析\",\"t\":[\"首先我们还是回忆一下 router-link 这个组件是如何使用的：\",\"<router-link to=\\\"/\\\">Home</router-link> <router-link to=\\\"/contact\\\">Contact</router-link> <router-link :to=\\\"{ name: 'user', params: { username: 'erina' }}\\\">User</router-link>\",\"这里我们会传递一个 to 属性，这个 to 属性可以是一个字符串也可以是一个对象\",\"routerlink 对应的源码文件是 src/RouterLink.ts，核心的实现位于 RouterLinkImpl 这一段代码。\",\"export const RouterLinkImpl = /*#__PURE__*/ defineComponent({}); export const RouterLink: _RouterLinkI = RouterLinkImpl as any;\",\"接下来看一下 RouterLinkImpl 具体的实现：\",\"export const RouterLinkImpl = /*#__PURE__*/ defineComponent({ name: 'RouterLink', compatConfig: { MODE: 3 }, props: { // ... }, useLink, setup(props, { slots }) { // ... }, });\",\"这里 RouterLinkImpl 的整体结构就是一个标准的 vue3 组件。\"]},\"2063\":{\"h\":\"1. compatConfig\",\"t\":[\"compatConfig: { MODE: 3 },\",\"compatConfig 是一个配置对象，用于配置 vue3 相关的兼容性选项。\",\"MODE：用于指定兼容模式对应的值 \",\"3: 表示启用完全的 Vue3 模式，不支持 Vue2 的特性和语法\",\"2 | 3 ：Vue2 和 Vue3 的混合模式，同时支持 Vue2 和 Vue3 的语法\",\"2: 启用完全的 Vue2 模式，不支持 Vue3 的特性和语法\",\"GLOBAL_MOUNT：指定全局挂载的值。可以是以下选项之一： \",\"true：表示在 Vue 3 中自动全局挂载 Vue 2 的实例，使 Vue 2 的组件可以在 Vue 3 的应用程序中使用。\",\"false：表示禁用全局挂载，需要手动挂载 Vue 2 的实例。\",\"COMPAT_UTILS：指定兼容性工具的值。可以是以下选项之一： \",\"\\\"auto\\\"：表示自动检测并根据需要引入适当的兼容性工具。\",\"true：表示强制引入兼容性工具，无论是否需要。\",\"false：表示禁用兼容性工具。\",\"PRESERVE_ATTRIBUTE_CASE：指定保留属性大小写的值。可以是以下选项之一： \",\"true：表示在 Vue 3 中维持属性的原始大小写。\",\"false：表示在 Vue 3 中将属性转换为小写。\",\"关于这种兼容性的配置，可以参阅 这里。\"]},\"2064\":{\"h\":\"2. props\",\"t\":[\"完整的 props 列表如下：\",\"props: { to: { type: [String, Object] as PropType<RouteLocationRaw>, required: true, }, replace: Boolean, activeClass: String, exactActiveClass: String, custom: Boolean, ariaCurrentValue: { type: String as PropType<RouterLinkProps['ariaCurrentValue']>, default: 'page', }, },\",\"上面罗列出了完整的 props 列表，其中 to 是必须要传递的，其他的都是可选属性。\",\"to：目标路由地址，可以是一个字符串，也可以是一个具有多个属性的对象。\",\"repalce：是一个布尔值，用于指定使用哪一种模式来进行路由导航，有 repalce 模式 以及 push 模式\",\"activeClass：当前激活状态下所对应的样式类\",\"exactActiveClass：这个也是激活状态下所对应的样式类，只不过判断是否激活的条件更加的严格，需要完全匹配。\",\"custom：这是一个布尔值，用于指定是否要自定义 RouterLink 的渲染方式，默认情况下 RouterLink 是会被渲染为一个 a 标记，但是支持自定义渲染方式\",\"ariaCurrentValue：主要是设置 aria-current 的值，这个值是和 web 可访问性相关的属性值。\"]},\"2065\":{\"h\":\"3. useLink\",\"t\":[\"useLink 是一个方法，整体的结构如下：\",\"export function useLink(props: UseLinkOptions) { const router = inject(routerKey)! const currentRoute = inject(routeLocationKey)! const route = computed(() => router.resolve(unref(props.to))) const activeRecordIndex = computed<number>( ... ) const isActive = computed<boolean>( ... ) const isExactActive = computed<boolean>( ... ) function navigate(e: MouseEvent = {} as MouseEvent): Promise<void | NavigationFailure> { // ... } return { route, href: computed(() => route.value.href), isActive, isExactActive, navigate, } }\",\"接下来我们一个部分一个部分来进行解析。\",\"const router = inject(routerKey)!; const currentRoute = inject(routeLocationKey)!;\",\"这两句代码就是通过 vue 的依赖注入功能拿到对应的 router 以及当前路由的信息。\",\"const route = computed(() => router.resolve(unref(props.to)));\",\"props.to 是用户要跳转的目标路由，将这个目标路由传递给 router.resolve 方法，这个方法一看就知道是根据目标路由来做信息解析，而且内部肯定会使用 matcher.resolve，除了使用 matcher.resolve 来进行解析以外， router.resolve 方法本身也会做一定的信息解析工作，这里我们只关注最终返回的值：\",\"const matchedRoute = matcher.resolve(matcherLocation, currentLocation); return assign( { fullPath, // keep the hash encoded so fullPath is effectively path + encodedQuery + // hash hash, query: // if the user is using a custom query lib like qs, we might have // nested objects, so we keep the query as is, meaning it can contain // numbers at `$route.query`, but at the point, the user will have to // use their own type anyway. // https://github.com/vuejs/router/issues/328#issuecomment-649481567 stringifyQuery === originalStringifyQuery ? normalizeQuery(rawLocation.query) : ((rawLocation.query || {}) as LocationQuery), }, matchedRoute, { redirectedFrom: undefined, href, } );\",\"紧接着声明了三个计算属性：\",\"const activeRecordIndex = computed<number>( ... ) const isActive = computed<boolean>( ... ) const isExactActive = computed<boolean>( ... )\",\"activeRecordIndex 是一个 number 类型的值，另外两个是布尔值。\",\"activeRecordIndex 对应的源码说明如下：\",\"const activeRecordIndex = computed<number>(() => { // 从 route 对象中获取 matched 属性，该属性是一个数组，包含了当前路由匹配的所有路由记录。 const { matched } = route.value; // 获取 matched 数组的长度。 const { length } = matched; // 获取 matched 数组中最后一个元素，即当前路由匹配的路由记录。 const routeMatched: RouteRecord | undefined = matched[length - 1]; // 获取当前路由 currentRoute 的匹配路由数组。 const currentMatched = currentRoute.matched; // 如果 routeMatched 不存在或者 currentMatched 数组为空，则返回 -1，表示当前路由没有匹配到任何路由记录。 if (!routeMatched || !currentMatched.length) return -1; // 使用 findIndex 方法在 currentMatched 数组中查找与 routeMatched 相同的路由记录，并返回其索引位置。 // isSameRouteRecord 是一个用于比较两个路由记录是否相同的函数。 const index = currentMatched.findIndex(isSameRouteRecord.bind(null, routeMatched)); // 如果找到了相同的路由记录，则直接返回该索引位置。 if (index > -1) return index; // 获取匹配路由数组中倒数第二个元素的原始路径，作为可能的父级路由记录路径。 const parentRecordPath = getOriginalPath(matched[length - 2] as RouteRecord | undefined); // 如果 length 大于 1，表示存在嵌套路由。 // 如果 routeMatched 的原始路径与 parentRecordPath 相同，并且当前路由不是父级路由的路径的最后一个子路由。 // 在上述情况下，返回匹配路由数组中倒数第二个元素（即父级路由记录）在 currentMatched 数组中的索引位置。 // 否则，返回之前计算的 index。 return length > 1 && getOriginalPath(routeMatched) === parentRecordPath && currentMatched[currentMatched.length - 1].path !== parentRecordPath ? currentMatched.findIndex(isSameRouteRecord.bind(null, matched[length - 2])) : index; });\",\"activeRecordIndex 是得到一个索引值，以便在渲染链接的时候进行一些特定的处理，例如添加活动样式类，自定义样式类等，它考虑了嵌套路由的情况，并且根据一些条件来确定当前路由的位置。\",\"const isActive = computed<boolean>( // 如果当前路由的索引位置大于 -1 并且参数对象相等，则返回 true，表示当前链接处于活动状态；否则返回 false，表示当前链接不处于活动状态。 () => // 判断当前路由的索引位置是否大于 -1，表示当前路由匹配到了路由记录。 activeRecordIndex.value > -1 && // 调用 includesParams 函数，比较当前路由的参数对象和目标路由的参数对象是否相等。 includesParams(currentRoute.params, route.value.params) );\",\"这段代码的作用是为 router-link 组件提供一个计算属性 isActive，用于判断当前链接是否处于活动状态，它通过比较当前路由的索引位置和参数对象来确定链接的活动状态，以便在渲染链接的时候添加或者移除活动状态类。\",\"const isExactActive = computed<boolean>( () => activeRecordIndex.value > -1 && // 判断当前路由的索引位置是否等于当前路由的匹配路由数组长度减 1，表示当前路由是匹配路由数组中的最后一个路由记录。 activeRecordIndex.value === currentRoute.matched.length - 1 && // 调用 isSameRouteLocationParams 函数，比较当前路由的参数对象和目标路由的参数对象是否完全相等。 isSameRouteLocationParams(currentRoute.params, route.value.params) );\",\"isExactActive 计算属性用于判断当前链接是否处于精确的活动状态。\",\"接下来是一个 navigate 方法：\",\"function navigate(e: MouseEvent = {} as MouseEvent): Promise<void | NavigationFailure> { if (guardEvent(e)) { return router[unref(props.replace) ? 'replace' : 'push']( unref(props.to) // avoid uncaught errors are they are logged anyway ).catch(noop); } return Promise.resolve(); }\",\"这个 navigate 方法对应的就是用户点击 a 标签之后所对应的事件处理函数。\",\"首先看 guardEvent(e) 是否有效 \",\"如果有效，那么就通过 router 的 repalce 或者 push 方法进行路由导航\",\"如果没有效 \",\"不执行导航操作，直接返回一个已经解析的空的 Promise 对象\",\"guardEvent 具体所做的事情如下：\",\"function guardEvent(e: MouseEvent) { // 如果用户在点击链接时按住了 meta 键、alt 键、ctrl 键或 shift 键，那么这个函数就会返回 undefined，从而不处理这个事件。 // 这是因为在很多浏览器中，按住这些键点击一个链接会有特殊的行为，比如在新的标签页中打开链接。 if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) return; // 如果事件的 defaultPrevented 属性为 true，那么这个函数也会返回 undefined。 // 这表示这个事件已经被其他的事件处理器处理过，并且已经阻止了默认行为。 if (e.defaultPrevented) return; // 如果事件的 button 属性不等于 0，那么这个函数同样会返回 undefined。 // button 属性表示触发事件的鼠标按钮，0 代表左键，1 代表中键，2 代表右键。 // 因此，这一行代码的效果是，如果用户使用中键或右键点击链接，那么不处理这个事件。 if (e.button !== undefined && e.button !== 0) return; // 如果点击的元素有 target=\\\"_blank\\\" 属性，那么这个函数也会返回 undefined。 // 这是因为 target=\\\"_blank\\\" 表示链接应该在新的标签页中打开，所以不需要使用 Vue Router 来处理导航。 if (e.currentTarget && e.currentTarget.getAttribute) { const target = e.currentTarget.getAttribute('target'); if (/\\\\b_blank\\\\b/i.test(target)) return; } // 如果前面的所有条件都不满足（也就是说，这个事件应该被处理），那么这个函数会调用 e.preventDefault() 来阻止事件的默认行为，然后返回 true。 if (e.preventDefault) e.preventDefault(); return true; }\",\"guardEvent 方法主要是确定是否应该处理一个点击事件，在一些情况下的点击事件不需要被处理，那究竟要不要被处理，在 guardEvent 里面进行各种判断。\"]},\"2066\":{\"h\":\"4. setup\",\"t\":[\"最后是 setup 方法：\",\"setup(props, { slots }) { // 调用 useLink，得到一个对象 {route, href, isActive, isExactActive, navigate} const link = reactive(useLink(props)) const { options } = inject(routerKey)! // 这里是在计算具体要挂上去的样式类 const elClass = computed(() => ({ [getLinkClass( props.activeClass, options.linkActiveClass, 'router-link-active' )]: link.isActive, [getLinkClass( props.exactActiveClass, options.linkExactActiveClass, 'router-link-exact-active' )]: link.isExactActive, })) return () => { // 拿到插槽内容 const children = slots.default && slots.default(link) return props.custom ? children : h( 'a', { 'aria-current': link.isExactActive ? props.ariaCurrentValue : null, href: link.href, onClick: link.navigate, class: elClass.value, }, children ) } },\",\"getLinkClass 是一个函数，最终会返回一个字符串\",\"const getLinkClass = ( propClass: string | undefined, globalClass: string | undefined, defaultClass: string ): string => (propClass != null ? propClass : globalClass != null ? globalClass : defaultClass);\",\"根据一定的优先级顺序来获取类名，首先检查 propsClass，如果存在就使用它，如果不存在就检查 globalClass，如果存在就使用它，否则就使用 defaultClass\"]},\"2067\":{\"h\":\"七、RouterView 源码解析\",\"t\":[\"RouterView 的核心实现位于 RouterViewImpl.ts 文件，整体的结构如下：\",\"export const RouterViewImpl = /*#__PURE__*/ defineComponent({ name: 'RouterView', inheritAttrs: false, props: { ... }, compatConfig: { MODE: 3 }, setup(props, { attrs, slots }) { // ... watch( ... ) return () => { // ... } }, })\",\"这里我们重点是看 setup 里面的代码，有关 setup 里面的代码，核心又可以分为三个部分：\",\"depth 深度\",\"watch\",\"return\"]},\"2068\":{\"h\":\"1. depth 深度\",\"t\":[\"在 vue router 中，之所以要计算深度，是为了实现嵌套路由的功能。\",\"所谓嵌套路由，指的是一个路由视图内部又可以包含另一个路由视图。\",\"<!-- 布局组件 --> <div> <nav>...</nav> <router-view></router-view> <!-- depth = 0 --> </div> <!-- 在布局组件的 router-view 中 --> <div> <h1>Some Page</h1> <router-view></router-view> <!-- depth = 1 --> </div>\",\"在上面的这种情况下，每一个 router-view 都需要知道它在整个视图树里面的位置，以便能够渲染出正确的所对应的路由组件，这就是深度的作用，表示当前的 router-view 在整个嵌套的 router-view 中的位置。\",\"最顶层的 router-view 默认深度为 0，子 router-view 对应的深度为 1，依此类推。\",\"接下来我们来看一下有关深度的核心代码：\",\"setup(props, { attrs, slots }) { // 获取从父级所注入的路由对象 // 这里获取到的就是之前在 router.ts 中所注入的 app.provide(routerViewLocationKey, currentRoute) // 这里的感叹号是 TS 里面里面的语法，叫做非空断言操作符，相当于告诉 TS 这里的 routerViewLocationKey 一定不为空 const injectedRoute = inject(routerViewLocationKey)! // 这里 routeToDisplay 是一个计算属性 // 该计算属性会优先的使用 props.route，如果 props.route 不存在，那么这里就使用 injectedRoute.value // 这里我们就可以通过 props 来手动指定一个路由对象，如果没有手动指定，那么就使用从父级注入的路由对象 const routeToDisplay = computed<RouteLocationNormalizedLoaded>( () => props.route || injectedRoute.value ) // 获取从父级的 router-view 所注入的深度 // 如果父级的 router-view 注入了的话，就能够获取到 // 如果没有父级注入（说明这是一个最顶层的 router-view），那么深度的默认值为 0 const injectedDepth = inject(viewDepthKey, 0) // 这里定义了一个名为 depth 的计算属性，主要用于计算当前 router-view 的深度 const depth = computed<number>(() => { // 首先获取到从父级注入的深度值，如果是最顶层那么这个值为 0 let initialDepth = unref(injectedDepth) // 将当前路由对象的 matched 属性解构出来，matched 数组里面包含了所有匹配的路由记录 const { matched } = routeToDisplay.value // 这里定义了一个变量 matchedRoute，这其实是一个临时变量，用于临时存储匹配的路由记录 let matchedRoute: RouteLocationMatched | undefined // 首先 while 的条件是当前深度所对应的路由记录存在并且匹配上的路由没有 components // 这里就会进入到 while 循环 while ( (matchedRoute = matched[initialDepth]) && !matchedRoute.components ) { // 深度加一 // 因为能够进入此循环，说明当前找不到对应的组件 // 因此我们需要去检查下一层的路由记录 initialDepth++ } // 返回计算后的深度 return initialDepth }) // 这里又是一个计算属性 // 这里就是根据前面计算出来的深度，然后从 matched 里面获取对应深度的路由记录 const matchedRouteRef = computed<RouteLocationMatched | undefined>( () => routeToDisplay.value.matched[depth.value] ) // 向下一层 router-view 注入深度 // 注意这里在注入的时候，深度 +1 provide( viewDepthKey, computed(() => depth.value + 1) ) // 除了提供深度以外，这里还提供了 matchedRouteRef 以及 routeToDisplay provide(matchedRouteKey, matchedRouteRef) provide(routerViewLocationKey, routeToDisplay) const viewRef = ref<ComponentPublicInstance>() },\",\"总结一下，上面有关 depth 的核心代码，主要就是针对深度 depth 做了一个计算，计算出来之后需要将这个 depth 深度值提供给下一层 router-view，除此以外，还需要根据计算出来的 depth 深度获取到 matched 数组里面对应深度的匹配路由。\"]},\"2069\":{\"h\":\"2. watch\",\"t\":[\"关于 watch 我们首先需要回忆一下 vue 里面 watch 的用法：\",\"在 vue 里面 watch 接收三个参数：\",\"源（source）：这是我们想要观察的数据源，这个数据源可以是一个字符串，也可以是一个函数，例如在下面的源码中：\",\"() => [viewRef.value, matchedRouteRef.value, props.name] as const,\",\"这里所观察的数据就是 viewRef.value（组件实例）， matchedRouteRef.value（当前匹配的路由记录），props.name（路由名称）\",\"事件处理（handler）：这里表示当监视的数据发生变化的时候，会执行这里的 handler，handler 回调通常接收两个参数：第一个是当前新的值，第二个是之前旧的值。在下面的源码中：\",\"([instance, to, name], [oldInstance, from, oldName]) => { ... }\",\"选项（options）：这是一个可选参数，用于提供一些配置选项。 \",\"deep：监视的深度\",\"immediate：立即执行 handler\",\"flush：指定何时执行 handler\",\"在下面的源码中：\",\"{ flush: 'post'; }\",\"这个选项表示 handler 应该在 DOM 更新之后执行。\",\"接下来我们来对 watch 部分代码进行拆解\",\"watch( () => [viewRef.value, matchedRouteRef.value, props.name] as const, ([instance, to, name], [oldInstance, from, oldName]) => { // 首先获取检查 to 是否存在 if (to) { // 进来之后首先将 instance 保存到 to.instances[name] // 这样之后就可以通过 to.instances[name] 访问到这里的 instance to.instances[name] = instance; // 接下来下面这段代码主要目的是在组件实例被复用（路由发生了变化，但是组件实例没有发生变化）的情况下 // 复制旧的路由记录所对应的离开守卫以及更新守卫到新的路由记录里面 // 判断条件如下： // 1. 旧的路由存在 // 2. 并且旧的路由记录和新的路由记录是不相同 // 3. 组件实例存在 // 4. 当前的组件实例和之前对应的组件实例相同 if (from && from !== to && instance && instance === oldInstance) { // 检查新的路由记录 to 的离开守卫是否为空 // 如果为空，就将旧的路由记录 from 所对应的离开守卫（leaveGuards）复制到新的路由记录里面 to.leaveGuards if (!to.leaveGuards.size) { to.leaveGuards = from.leaveGuards; } // 检查新的路由记录 to 的更新守卫是否为空 // 如果为空，就将旧的路由记录 from 所对应的更新守卫（updateGuards）复制到新的路由记录里面 to.updateGuards if (!to.updateGuards.size) { to.updateGuards = from.updateGuards; } } // 总结一下，上面这段代码主要目的是为了处理组件实例被复用的情况下，旧的路由守卫的复用问题 } // 接下来下面这段代码主要目的是为了在特定条件下触发 beforeRouteEnter 守卫中的 next 回调函数 // 这一行首先需要确认如下几个条件： // 1. 组件实例 instance 存在 // 2. 并且新的路由记录 to 存在 // 3. 旧的路由记录 from 不存在或者新的路由记录 to 和旧的路由记录 from 不是同一个记录，又或者旧的组件实例 oldInstance 不存在 if (instance && to && (!from || !isSameRouteRecord(to, from) || !oldInstance)) { // 下面两行代码主要就是在执行 beforeRouteEnter 守卫中的 next 回调函数 // 有关 beforeRouteEnter 守卫所对应的回调函数，是通过 next(callback) 的方式来注册的 // 这些所注册的回调函数会保存在 to.enterCallbacks[name] 里面 (to.enterCallbacks[name] || []).forEach((callback) => callback(instance)); } // 总结一下，这段代码的目的就是为了在进入新的路由之前，执行一些特定的操作 // 这些特定的操作是定义在 beforeRouteEnter 守卫的 next 的回调函数中的 }, { flush: 'post' } );\"]},\"2070\":{\"h\":\"3. return\",\"t\":[\"最后是关于 setup 中的 return 部分的代码。\",\"return () => { // 这一段代码主要目的是为了获取一些路由信息，以及准备渲染的相应的组件 // 这里前面三个值是对应的路由信息，最后一个是对应的要渲染的组件 const route = routeToDisplay.value; const currentName = props.name; const matchedRoute = matchedRouteRef.value; // 获取要渲染的组件 // 首先看 matchedRoute 是否存在，matchedRoute 存在的情况下并且 components 属性中有对应的 currentName 的组件 // 那么这个组件就是我们要渲染的组件 const ViewComponent = matchedRoute && matchedRoute.components![currentName]; // 接下来紧接着就去看有没有找到要渲染的组件 if (!ViewComponent) { // 如果没有找到，那么就渲染默认插槽，并将对应的组件和路由信息作为插槽的参数 return normalizeSlot(slots.default, { Component: ViewComponent, route }); } // 接下来需要处理 路由所对应的 props // 在 vue-router，是可以通过 props 选项将当前路由的参数传递给路由组件 // 这个 props 选项值可以是一个布尔值、对象或者是一个函数，这段代码的主要目的就是处理不同类型的 props // 这行代码就是从匹配的路由记录中获取 props 选项 const routePropsOption = matchedRoute.props[currentName]; // 接下来对 props 进行各种判断 // 首先判断 props 是否存在 const routeProps = routePropsOption ? // 接下来判断是否为布尔值 true，如果是的话，那么 props 就是当前的路由参数 route.params routePropsOption === true ? route.params : // 接下来看 props 是否为函数，如果是函数，那么这里就是执行该函数，props 就是函数执行后的返回值 typeof routePropsOption === 'function' ? routePropsOption(route) : // 如果不是函数，那么这里就是对象，那么这个对象就是我的 props routePropsOption : null; // 因此这里总结一下，上面的这段代码主要就是根据路由配置中的 props 选项来确定组件的 props // 但是 vue-router 在设计的时候，props 的形式是多样的，所以需要根据不同的类型来处理 props // 这里定义了一个 onVnodeUnmounted 的钩子函数，该钩子函数会在组件被卸载时调用 const onVnodeUnmounted: VNodeProps['onVnodeUnmounted'] = (vnode) => { // 这行代码会检查虚拟节点所关联的组件实例是否已经被卸载 // 在 vue 中，每一个虚拟节点 vnode 都可能关联一个组件实例，这个组件实例可以通过 vnode.component 进行访问 if (vnode.component!.isUnmounted) { // 进入此 if，说明所对应的组件实例已经被卸载 // 需要将对应的组件实例从路由记录中删除掉，从而清除对已卸载的组件的引用，避免内存泄漏 matchedRoute.instances[currentName] = null; } }; // 下面这段代码主要是创建一个表示 ViewComponent 的虚拟 DOM，并且设置了相关的 props、attrs、事件监听器以及 ref // 这个虚拟 DOM 随后会被 Vue 渲染为真实的 DOM const component = h( ViewComponent, assign({}, routeProps, attrs, { onVnodeUnmounted, ref: viewRef, }) ); // 最后向外部返回上面所生成的虚拟 DOM // 因为我们是可以提供一个 default 插槽，所以如果有插槽的情况，通过插槽来决定如何使用 component 和 route // 如果没有插槽，那么就直接使用 component return normalizeSlot(slots.default, { Component: component, route }) || component; };\"]},\"2071\":{\"h\":\"八、导航守卫流程解析\",\"t\":[\"首先我们对导航守卫进行一个回顾。在 vue-router 中，导航守卫可以分为三大类：\",\"全局守卫：挂载在全局路由实例上面，每一个导航的更新都会触发 \",\"前置守卫：beforeEach\",\"解析守卫：beforeResolve\",\"后置守卫：afterEach\",\"路由独享守卫：挂载在路由配置表上面的，当进入指定路由的时候会触发 \",\"进入路由时：beforeEnter\",\"组件内守卫：定义在组件上面的，属于组件级别的守卫，当加载或者更新指定组件时候会触发 \",\"组件渲染：beforeRouteEnter\",\"组件路由更新：beforeRouteUpdate\",\"离开组件：beforeRouteLeave\",\"完整的解析流程如下图所示：\",\"image-20230915102139386\",\"导航触发，触发的形式包括 router.push、router.replace、router.go 等等\",\"在卸载的组件里面调用 beforeRouteLeave 守卫\",\"调用全局的 beforeEach 守卫，开启守卫的第一道拦截\",\"审视新的组件，判断新旧组件是否一致，如果一致的话，在重用的组件里调用 beforeRouteUpdate 守卫 \",\"例如假设有一个带有动态参数的路径 /user/:id，在 user/1 跳转到 user/2 的时候，这里渲染的组件肯定是相同的，假设是 useerDetails 组件，那么这个组件就会被复用，此时 beforeRouteUpdate 就会被调用\",\"调用路由配置表中的 beforeEnter\",\"接下来在组件的 setup 或者 beforeCreate 生命周期会调用组件级守卫 beforeRouteEnter，在组件渲染前触发一个钩子\",\"执行解析守卫 beforeResolve\",\"在导航被确认之后，就是组件的 this 对象生成后，会调用全局后置守卫 afterEach 进行拦截\",\"触发 DOM 更新\",\"销毁组件前（执行 Unmounted），会调用 beforeRouteLeave 守卫\"]},\"2072\":{\"h\":\"1. 导航守卫相关源码\",\"t\":[\"当导航触发的时候，有一个名为 navigate 的方法会被调用，这个 navigate 方法就处理了导航守卫的相关逻辑，navigate 方法位于 router.ts 文件下面，整体结构如下：\",\"function navigate(to: RouteLocationNormalized, from: RouteLocationNormalizedLoaded): Promise<any> { let guards: Lazy<any>[] const [leavingRecords, updatingRecords, enteringRecords] = extractChangingRecords(to, from) guards = extractComponentsGuards( leavingRecords.reverse(), 'beforeRouteLeave', to, from ) for (const record of leavingRecords) { record.leaveGuards.forEach(guard => { guards.push(guardToPromiseFn(guard, to, from)) }) } const canceledNavigationCheck = checkCanceledNavigationAndReject.bind( null, to, from ) guards.push(canceledNavigationCheck) return ( runGuardQueue(guards) .then(() => { // ... }) .then(() => { // ... }) .then(() => { // ... }) .then(() => { // ... }) .then(() => { // ... }) .catch(err => // ... ) ) }\",\"在上面的方法中，我们看到这里链式调用了 promise，每一个 promise 的处理就是处理一种类型的导航守卫。\",\"接下来我们来逐步解析方法的各个部分。\",\"let guards: Lazy<any>[];\",\"这里声明了一个名为 guards 的数组，你可以把这个数组看作是一个队列，这个队列里面会存放要处理的守卫回调（guard），并且这些守卫回调不是简单的放进去，而是会被转为 promise 存放进去。\"]},\"2073\":{\"h\":\"extractChangingRecords\",\"t\":[\"const [leavingRecords, updatingRecords, enteringRecords] = extractChangingRecords(to, from);\",\"extract 是“提取”的意思，该方法表示从当前路由和目标路由中提取离开的路由记录（leavingRecords）、更新的路由记录（updatingRecords）以及新进入的路由记录（enteringRecords）\",\"extractChangingRecords 方法的源码如下：\",\"function extractChangingRecords(to: RouteLocationNormalized, from: RouteLocationNormalizedLoaded) { // 接下来声明了 3 个数组 // 存放要离开的路由记录 const leavingRecords: RouteRecordNormalized[] = []; // 存放要更新的路由记录 const updatingRecords: RouteRecordNormalized[] = []; // 存放新进入的路由记录 const enteringRecords: RouteRecordNormalized[] = []; // 这里是在去 to 和 from 所对应的 matched 数组的最大值 // 因为这里 to 和 from 对应的 matched 都需要遍历，但是两者的长度可能是不一致 // 为了能够全部遍历，这里取最大值 // 假设 from 的 matched 的长度为 3， to 的 matched 的长度为 5，这里就应该以 5 为基础 const len = Math.max(from.matched.length, to.matched.length); for (let i = 0; i < len; i++) { // 首先或者 from 里面对应的 matched 的当前项目 const recordFrom = from.matched[i]; // 一定要判断一下是否存在 if (recordFrom) { // 判断是否和 to 中存在相同的路由记录，如果存在，说明该路由记录需要更新，所以将其添加到更新的数组里面 if (to.matched.find((record) => isSameRouteRecord(record, recordFrom))) updatingRecords.push(recordFrom); // 如果不存在相同的路由记录，那么说明该路由正在离开，将其添加到离开的数组 else leavingRecords.push(recordFrom); } const recordTo = to.matched[i]; // 如果 recordTo 存在，那么表示该路由记录在目标路由中存在 if (recordTo) { if (!from.matched.find((record) => isSameRouteRecord(record, recordTo))) { // 如果不存在相同的路由记录，那么说明该路由记录正在进入，将其添加到进入的数组里面 enteringRecords.push(recordTo); } } } return [leavingRecords, updatingRecords, enteringRecords]; }\",\"最后总结一下，这段代码所做的事情就是根据当前路由和目标路由的差异，提取要离开、更新以及新进入的路由记录，这些提取出来的路由记录会用于后续的操作。\"]},\"2074\":{\"h\":\"extractComponentsGuards\",\"t\":[\"guards = extractComponentsGuards(leavingRecords.reverse(), 'beforeRouteLeave', to, from);\",\"该方法从名字上面基本上就能够猜到它是做什么的：提取组件上面的守卫函数\",\"该方法的源码如下：\",\"export function extractComponentsGuards( // 根据 to 和 from 提取出来的路由记录，值为以下三者之一： // leavingRecords、updatingRecords、enteringRecords matched: RouteRecordNormalized[], // 守卫的类型，值可以是 beforeRouteEnter、beforeRouteUpdate 以及 beforeRouteLeave guardType: GuardType, // 目标路由 to: RouteLocationNormalized, // 当前路由，或者说离开的路由 from: RouteLocationNormalizedLoaded ) { const guards: Array<() => Promise<void>> = []; // 外层 for 循环是对入参 matched 进行遍历，保证 leavingRecords、updatingRecords 或者 enteringRecords // 里面所有的 record 都能够得到出来 for (const record of matched) { // 内层 for 循环对某个 record 里面的所有组件进行遍历 for (const name in record.components) { // 获取到对应的组件 let rawComponent = record.components[name]; if (guardType !== 'beforeRouteEnter' && !record.instances[name]) continue; // 判断是否是路由级别的组件 // 不管下面进入 if 还是 else，最后都会构建守卫回调对应的 promise 链 if (isRouteComponent(rawComponent)) { // ... guard && guards.push(guardToPromiseFn(guard, to, from, record, name)); } else { // ... guards.push(() => componentPromise.then((resolved) => { // ... const guard = options[guardType]; return guard && guardToPromiseFn(guard, to, from, record, name)(); }) ); } } } return guards; }\",\"在 extractComponentsGuards 方法的最后，都会做一件事情，就是将导航守卫函数转为 promise 推入到队列里面\",\"guard && guards.push(guardToPromiseFn(guard, to, from, record, name));\",\"这里对应了一个方法 guardToPromiseFn，该方法的作用就是将导航守卫转为 promise 然后推入到数组里面。\"]},\"2075\":{\"h\":\"guardToPromiseFn\",\"t\":[\"该方法的源码如下：\",\"export function guardToPromiseFn( guard: NavigationGuard, to: RouteLocationNormalized, from: RouteLocationNormalizedLoaded ): () => Promise<void>; export function guardToPromiseFn( guard: NavigationGuard, to: RouteLocationNormalized, from: RouteLocationNormalizedLoaded, record: RouteRecordNormalized, name: string ): () => Promise<void>; export function guardToPromiseFn( guard: NavigationGuard, to: RouteLocationNormalized, from: RouteLocationNormalizedLoaded, record?: RouteRecordNormalized, name?: string ): () => Promise<void> { // 这段代码是获取一个回调函数的数组，这个回调就是用户传递给 next 方法的回调函数 // 如果数组不存在，那么就给一个新数组，并将其赋值给 enterCallbacks const enterCallbackArray = record && // name is defined if record is because of the function overload (record.enterCallbacks[name!] = record.enterCallbacks[name!] || []); // 接下来向外部返回了一个 promise return () => new Promise((resolve, reject) => { // 声明 next 方法，该 next 方法就是开发者在使用导航守卫时，所传入的第三个参数 const next: NavigationGuardNext = ( valid?: boolean | RouteLocationRaw | NavigationGuardNextCallback | Error ) => { // ... }; // 这里调用了导航守卫 guard，传入了合适的参数 // 将调用的结果存储到 guardReturn 里面 const guardReturn = guard.call( record && record.instances[name!], to, from, __DEV__ ? canOnlyBeCalledOnce(next, to, from) : next ); // 接下来将调用结果包装为一个 promise let guardCall = Promise.resolve(guardReturn); // 如果导航守卫的参数的个数小于 3，那么说明导航守卫内部没有使用 next 回调 // 直接将 guardCall 设置为 guardCall.then(next) // 这样可以保证内部没有使用 next 也能够正常工作 if (guard.length < 3) guardCall = guardCall.then(next); if (__DEV__ && guard.length > 2) { // .... } guardCall.catch((err) => reject(err)); }); }\",\"这里我们可以来看一下 next 方法的实现，首先我们还是回顾一下 next 方法的用法：\",\"next( ) ：表示无任何拦截\",\"next(new Error('error message')) ：表示拦截成功，终止路由跳转\",\"next(true || false) ：true 允许跳转，false 表示终止跳转\",\"next('/index') 或者 next({path: '/index'}) ：这种情况会导致死循环，也会被拦截下来\",\"next(callback) ：执行回调函数\",\"next 部分的源码如下：\",\"const next: NavigationGuardNext = ( valid?: boolean | RouteLocationRaw | NavigationGuardNextCallback | Error ) => { // 如果参数是 false，进行路由拦截，抛出异常 if (valid === false) { reject( createRouterError<NavigationFailure>(ErrorTypes.NAVIGATION_ABORTED, { from, to, }) ); } else if (valid instanceof Error) { // 如果参数是一个 Error，进行路由拦截 reject(valid); } else if (isRouteLocation(valid)) { // 如果参数是一个路由路径，会进行重定向，此时也需要抛出异常并拦截 reject( createRouterError<NavigationRedirectError>(ErrorTypes.NAVIGATION_GUARD_REDIRECT, { from: to, to: valid, }) ); } else { // 如果是回调函数，将这个回调函数添加到 record.enterCallbacks[name]，等待导航确认后再执行 if ( enterCallbackArray && // since enterCallbackArray is truthy, both record and name also are record!.enterCallbacks[name!] === enterCallbackArray && typeof valid === 'function' ) { enterCallbackArray.push(valid); } resolve(); } };\"]},\"2076\":{\"h\":\"runGuardQueue\",\"t\":[\"该方法看名字我们就知道，是用来执行整个导航守卫队列的\",\"// 这里接收一个参数，这个参数是导航守卫队列 function runGuardQueue(guards: Lazy<any>[]): Promise<any> { // 使用 reduce 方法对 guards 数组进行一个迭代，逐个执行导航守卫，并将它们串联起来形成一个 promise 链 return guards.reduce( (promise, guard) => promise.then(() => runWithContext(guard)), // 这是 reduce 方法的初始化值，表示初始值是一个已决的 Promise Promise.resolve() ); }\"]},\"2077\":{\"h\":\"2. 导航守卫执行流程\"},\"2078\":{\"h\":\"beforeRouteLeave\",\"t\":[\"该导航守卫会在组件失活的时候被调用，对应的代码片段如下：\",\"// 首先从组件中提取 beforeRouteLeave 类型的导航守卫 // 将其放入到 guards 队列里面 guards = extractComponentsGuards(leavingRecords.reverse(), 'beforeRouteLeave', to, from); // 将 record.leaveGuards 里面的守卫回调也放入到 guards 数组里面 for (const record of leavingRecords) { record.leaveGuards.forEach((guard) => { guards.push(guardToPromiseFn(guard, to, from)); }); } // 执行 runGuardQueue(guards);\"]},\"2079\":{\"h\":\"beforeEach\",\"t\":[\"这是全局前置守卫，对应的执行代码如下：\",\".then(() => { // 首先将队列清空 guards = [] // 拿到所有 beforeEach 类型的守卫回调 for (const guard of beforeGuards.list()) { // 转为 promise 推入到 guards 数组里面 guards.push(guardToPromiseFn(guard, to, from)) } guards.push(canceledNavigationCheck) // 执行 return runGuardQueue(guards) })\"]},\"2080\":{\"h\":\"beforeRouteUpdate\",\"t\":[\"接下来是 beforeRouteUpdate 类型的守卫回调\",\".then(() => { // 这种类型的守卫回调是属于组件级别的 // 所以先从组件上面去提取对应守卫回调，这里要从组件提取，就调用前面介绍过的 extractComponentsGuards guards = extractComponentsGuards( updatingRecords, 'beforeRouteUpdate', to, from ) // 将 record.updateGuards 里面的回调也推入到 guards 数组里面 // 注意仍然是转为了 promise 后才推入进去的 for (const record of updatingRecords) { record.updateGuards.forEach(guard => { guards.push(guardToPromiseFn(guard, to, from)) }) } guards.push(canceledNavigationCheck) // 执行 return runGuardQueue(guards) })\"]},\"2081\":{\"h\":\"beforeEnter\",\"t\":[\".then(() => { // 首先清空队列 guards = [] // beforeEnter 是路由独享守卫 // 遍历 enteringRecords for (const record of enteringRecords) { // 查看当前遍历到的 record 项是否存在 beforeEnter if (record.beforeEnter) { // 接下里会判断是否是数组，如果是数组，就多了一次遍历而已 // 总之最后仍然是将对应的守卫回调转为 promise 推入到 guards 数组 if (isArray(record.beforeEnter)) { for (const beforeEnter of record.beforeEnter) guards.push(guardToPromiseFn(beforeEnter, to, from)) } else { guards.push(guardToPromiseFn(record.beforeEnter, to, from)) } } } guards.push(canceledNavigationCheck) // 执行 return runGuardQueue(guards) })\"]},\"2082\":{\"h\":\"beforeRouterEnter\",\"t\":[\".then(() => { to.matched.forEach(record => (record.enterCallbacks = {})) // 从组件上面去提取 beforeRouteEnter 类型的守卫回调 guards = extractComponentsGuards( enteringRecords, 'beforeRouteEnter', to, from ) guards.push(canceledNavigationCheck) // 执行 return runGuardQueue(guards) })\"]},\"2083\":{\"h\":\"beforeResolve\",\"t\":[\".then(() => { // 清空队列 guards = [] // 将所有 beforeResolve 类型的守卫回调转为 promise 后推入到 guards 数组 for (const guard of beforeResolveGuards.list()) { guards.push(guardToPromiseFn(guard, to, from)) } guards.push(canceledNavigationCheck) // 执行 return runGuardQueue(guards) })\"]},\"2084\":{\"h\":\"afterEach\",\"t\":[\"afterEach 作为全局后置守卫，它的触发是在 navigate 方法调用完毕后\",\"navigate(toLocation, from) .catch((error: NavigationFailure | NavigationRedirectError) => { // ... }) .then((failure: NavigationFailure | void) => { // ... triggerAfterEach(toLocation as RouteLocationNormalizedLoaded, from, failure); }) .catch(noop);\",\"在上面的代码中，afterEach 的执行就是在 triggerAfterEach 方法里面。\",\"function triggerAfterEach( to: RouteLocationNormalizedLoaded, from: RouteLocationNormalizedLoaded, failure?: NavigationFailure | void ): void { afterGuards.list().forEach((guard) => runWithContext(() => guard(to, from, failure))); }\"]},\"2085\":{\"c\":[\"源码解析\"]},\"2086\":{\"c\":[\"vue生态\"]},\"2087\":{\"h\":\"CSRF 攻击\",\"t\":[\"跨站请求伪造（Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方法。跟跨站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。\",\"假设你正在使用一个银行网页进行转账操作，攻击者可以通过以下步骤进行 CSRF 攻击：\",\"1、攻击者创建一个恶意网站，并在其中嵌入一个针对银行应用程序的攻击脚本。\",\"2、攻击者向你发送一封包含恶意网站链接的电子邮件,图片或者社交媒体消息，并诱导你点击链接。\",\"3、当你打开恶意网站时，攻击脚本会向银行应用程序发送一个伪造的转账请求，请求中包含转账金额和接收方账户信息。\",\"4、如果你已经在银行应用程序中登录，攻击脚本可以利用你的身份信息来伪造合法的请求，银行应用程序会认为请求是合法的，并将转账请求发送到服务器进行处理。\",\"5、如果攻击成功，攻击者就可以利用你的银行账户进行转账操作，从而窃取你的资金。\"]},\"2088\":{\"h\":\"防御手段\",\"t\":[\"验证来源：在服务器端对请求进行验证，判断请求的来源是否合法，如果请求不是来自同一域名下的站点，则拒绝请求。\",\"Token 验证：在用户登录时，为用户生成一个随机的 Token，并将 Token 存储在 Cookie 或者 LocalStorage 中，每次用户提交请求时，将 Token 作为参数发送到服务器端，服务器端验证 Token 是否合法，如果不合法，则拒绝请求。不过这种方式其实还是不安全，很容易被 XSS 攻击，窃取 Cookie 和 LocalStorage 中的数据\",\"SameSite Cookie属性：在设置 Cookie 时，可以将 SameSite 属性设置为 Strict 或者 Lax，防止 跨站点 Cookie 攻击。\",\"SameSite 属性是一个用于设置 cookie 的属性，它用于控制跨站点请求时是否发送 cookie。SameSite 属性有三个可选值，分别是\\\"Strict\\\"、\\\"Lax\\\"和\\\"None\\\"。\",\"SameSite=Strict： \",\"设置为 Strict 时，浏览器将只在请求与当前网站的域名完全匹配时发送 cookie。\",\"当前网站的域名必须与请求的域名完全匹配，包括协议和端口。\",\"这种设置可以提供最高级别的安全性，防止所有的跨站点请求中的 cookie 泄露。\",\"SameSite=Lax： \",\"Lax 将在导航的 GET 请求和跨站点 POST 请求中发送 cookie，但对于所有的第三方请求（如图片、链接等）则不会发送 cookie。\",\"通过在用户导航到目标网站时发送 cookie，并在来自第三方网站的 POST 请求时发送 cookie，提供了基本的防御措施，以防止跨站点请求伪造攻击（CSRF）等。\",\"SameSite=None： \",\"None 允许在所有情况下都发送 cookie，无论是跨站点的导航、POST 请求还是第三方请求。\",\"同时需要配合 Secure 属性，即只有在安全的 HTTPS 连接下才会发送 cookie。否则，浏览器将忽略这个设置。\",\"这种设置通常用于需要在不同域名之间共享 cookie 的场景，如单点登录（SSO）。\",\"验证码：在表单中添加验证码，要求用户在提交表单前必须输入正确的验证码，从而防止攻击者构造伪造的表单进行攻击。\",\"HTTP Referer：在服务器端验证请求的 Referer 头部，确保请求来自合法的来源。但是 Referer 头部可以被伪造，不是一种可靠的防御方式。\"]},\"2089\":{\"c\":[\"前端\"]},\"2090\":{\"c\":[\"网络安全\",\"攻击\"]},\"2091\":{\"h\":\"HTTPS 协议\",\"t\":[\"HTTPS （全称：Hypertext Transfer Protocol Secure），是以安全为目标的 HTTP 通道，在 HTTP 的基础上通过传输加密和身份认证保证了传输过程的安全性。HTTPS 在 HTTP 的基础上加入 SSL，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL。\",\"SSL（Secure Sockets Layer），安全套接字协议 TLS（Transport Layer Security），传输层安全性协议 TLS 是 SSL 的升级版，两者几乎是一样的 > 所以简单来说 HTTPS = HTTP + SSL/TLS\",\"有这么一个漫画描述 HTTPS 比较的浅显易懂：漫画：什么是 HTTPS 协议？\",\"介绍下 HTTPS 中间人攻击\",\"参考答案：\",\"针对 HTTPS 攻击主要有 SSL 劫持攻击和 SSL 剥离攻击两种。\",\"SSL 劫持攻击是指攻击者劫持了客户端和服务器之间的连接，将服务器的合法证书替换为伪造的证书，从而获取客户端和服务器之间传递的信息。这种方式一般容易被用户发现，浏览器会明确的提示证书错误，但某些用户安全意识不强，可能会点击继续浏览，从而达到攻击目的。\",\"SSL 剥离攻击是指攻击者劫持了客户端和服务器之间的连接，攻击者保持自己和服务器之间的 HTTPS 连接，但发送给客户端普通的 HTTP 连接，由于 HTTP 连接是明文传输的，即可获取客户端传输的所有明文数据。\",\"介绍 HTTPS 握手过程\",\"参考答案：\",\"客户端请求服务器，并告诉服务器自身支持的加密算法以及密钥长度等信息\",\"服务器响应公钥和服务器证书\",\"客户端验证证书是否合法，然后生成一个会话密钥，并用服务器的公钥加密密钥，把加密的结果通过请求发送给服务器\",\"服务器使用私钥解密被加密的会话密钥并保存起来，然后使用会话密钥加密消息响应给客户端，表示自己已经准备就绪\",\"客户端使用会话密钥解密消息，知道了服务器已经准备就绪。\",\"后续客户端和服务器使用会话密钥加密信息传递消息\",\"HTTPS 握手过程中，客户端如何验证证书的合法性\",\"参考答案：\",\"校验证书的颁发机构是否受客户端信任。\",\"通过 CRL 或 OCSP 的方式校验证书是否被吊销。\",\"对比系统时间，校验证书是否在有效期内。\",\"通过校验对方是否存在证书的私钥，判断证书的网站域名是否与证书颁发的域名一致。\",\"阐述 https 验证身份也就是 TSL/SSL 身份验证的过程\",\"参考答案：\",\"客户端请求服务器，并告诉服务器自身支持的加密算法以及密钥长度等信息\",\"服务器响应公钥和服务器证书\",\"客户端验证证书是否合法，然后生成一个会话密钥，并用服务器的公钥加密密钥，把加密的结果通过请求发送给服务器\",\"服务器使用私钥解密被加密的会话密钥并保存起来，然后使用会话密钥加密消息响应给客户端，表示自己已经准备就绪\",\"客户端使用会话密钥解密消息，知道了服务器已经准备就绪。\",\"后续客户端和服务器使用会话密钥加密信息传递消息\",\"为什么需要 CA 机构对证书签名\",\"主要是为了解决证书的可信问题。如果没有权威机构对证书进行签名，客户端就无法知晓证书是否是伪造的，从而增加了中间人攻击的风险，https 就变得毫无意义。\",\"如何劫持 https 的请求，提供思路\",\"https 有防篡改的特点，只要浏览器证书验证过程是正确的，很难在用户不察觉的情况下进行攻击。但若能够更改浏览器的证书验证过程，便有机会实现 https 中间人攻击。\",\"所以，要劫持 https，首先要伪造一个证书，并且要想办法让用户信任这个证书，可以有多种方式，比如病毒、恶意软件、诱导等。一旦证书被信任后，就可以利用普通中间人攻击的方式，使用伪造的证书进行攻击。\"]},\"2092\":{\"c\":[\"前端\"]},\"2093\":{\"c\":[\"网络安全\",\"https\"]},\"2094\":{\"h\":\"XSS 攻击\",\"t\":[\"XSS（Cross Site Scripting，跨站脚本攻击），是指攻击者利用站点的漏洞，在表单提交时，在表单内容中加入一些恶意脚本，当其他正常用户浏览页面，而页面中刚好出现攻击者的恶意脚本时，脚本被执行，从而使得页面遭到破坏，或者用户信息被窃取。 \"]},\"2095\":{\"h\":\"防御方式\",\"t\":[\"输入过滤： 对于用户输入的数据进行过滤和校验，确保数据符合预期的格式和内容，并且不包含恶意脚本代码。可以使用一些开源的输入验证库，如 OWASP ESAPI 等。\",\"输出编码： 在将数据输出到页面上之前，对数据进行编码，例如将特殊字符转义为 HTML 实体，或者使用 JavaScript 库中的 escape()或 encodeURIComponent()方法对数据进行编码。\",\"HttpOnly Cookie： 在设置 Cookie 时可以使用 HttpOnly 属性，禁止客户端 JavaScript 代码访问 Cookie，从而防止攻击者通过 JavaScript 技术窃取 Cookie 中的敏感信息。\",\"CSP： Content Security Policy（内容安全策略），是一种可以在网站上配置的安全策略，可以限制页面中可以加载的资源和可执行的脚本，从而防止恶意脚本的注入。\",\"消息过滤： 对于用户提交的数据，可以对其中的特定字符进行过滤，例如< > / ' \\\"等字符，从而防止攻击者通过注入恶意脚本代码来攻击网站。\",\"HTTPS： 使用 HTTPS 协议进行通信，可以确保数据在传输过程中的安全性，从而防止攻击者通过网络中的中间人攻击来窃取数据或者注入恶意代码。\"]},\"2096\":{\"c\":[\"前端\"]},\"2097\":{\"c\":[\"网络安全\",\"攻击\"]},\"2098\":{\"h\":\"加密\"},\"2099\":{\"h\":\"对称加密\",\"t\":[\"对称加密是使用相同的密钥来加密和解密数据。简单来说，对称加密是将明文数据使用密钥进行加密，得到密文数据，然后使用相同的密钥对密文数据进行解密，还原为明文数据。\",\"举个例子，假设 Alice 想要向 Bob 发送一条加密消息。他们可以使用对称加密算法，例如 Advanced Encryption Standard (AES)，来保护消息的机密性。Alice 和 Bob 首先要协商一个密钥，然后 Alice 使用这个密钥将消息加密，并将密文发送给 Bob。Bob 使用相同的密钥对密文进行解密以获取原始的明文消息。\",\"对称加密的优点是加密和解密速度非常快，适合用于大量数据的加密。然而，对称加密也有一个缺点，那就是密钥的管理问题。由于加密和解密使用相同的密钥，所以必须确保密钥不被泄露或被未经授权的人使用。\",\"常见算法： DES、3DES、TDEA、Blowfish、RC5、IDEA 优点： 加密、解密速度快，适合对大数据量进行加密 缺点： 在网络中需要分发密钥，增加了密钥被窃取的风险\"]},\"2100\":{\"h\":\"非对称加密\",\"t\":[\"非对称加密与对称加密不同，它需要使用两个不同的密钥：公钥和私钥。公钥可以公开发布，任何人都可以获得，而私钥只有密钥持有者才能拥有。非对称加密通常用于保护通信的安全性，例如在网上进行购物、银行转账等操作时，就需要使用非对称加密来保证数据传输的安全性。\",\"举个例子，假设小明想要给小红发送一封加密的消息。小明可以使用小红的公钥进行加密，然后将加密后的消息发送给小红。小红可以使用自己的私钥进行解密，从而获取原始消息。由于只有小红拥有私钥，因此只有小红能够解密消息，保证了消息传输的安全性。\",\"另外，非对称加密还可以用于数字签名，数字签名是一种验证数据完整性和真实性的方法。数字签名使用私钥对数据进行签名，然后使用公钥进行验证，从而确保数据没有被篡改或伪造。\",\"总的来说，非对称加密使用公钥和私钥进行加密和解密，可以保证数据传输的安全性和完整性，是网络通信中常用的加密方式。\",\"常见算法：RSA、Rabin、DSA、ECC、Elgamal、D-H 优点：安全（私钥仅被一方保存，不用于网络传输）缺点：仅能一方进行解密\"]},\"2101\":{\"h\":\"摘要/哈希/散列\",\"t\":[\"摘要、哈希和散列加密算法的具体实现方式因算法不同而异，但它们的基本原理都是将任意长度的数据转换为固定长度的输出数据。\",\"MD5 摘要算法： MD5 算法将输入数据分成 512 位的块，然后对每个块进行处理，最终得到 128 位的摘要值。例如，对\\\"Hello World\\\"进行 MD5 摘要加密，得到的摘要值为 5eb63bbbe01eeed093cb22bb8f5acdc3。\",\"SHA-256 哈希算法： SHA-256 算法将输入数据分成 512 位的块，然后对每个块进行处理，最终得到 256 位的哈希值。例如，对\\\"Hello World\\\"进行 SHA-256 哈希加密，得到的哈希值为 b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9。\",\"散列算法： 散列算法将输入数据分成多个块，然后对每个块进行哈希计算。例如，SHA-256 算法可以使用散列算法来提高加密的强度和安全性。对于密码\\\"123456\\\"，可以使用散列算法将其转换为多个块，然后对每个块进行 SHA-256 哈希计算，最终得到的哈希值可以用于保护密码的存储。\",\"常见算法：MD4、MD5、SHA-1、SHA-256、SHA-512 优点：密文占用空间小（定长的短字符串）；难以被破解缺点：无法解密\",\"MD5 加密使用：\",\"npm i md5\",\"const md5 = require('md5'); const origin = 'lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quod.'; const result = md5(origin); console.log(result);\"]},\"2102\":{\"c\":[\"前端\"]},\"2103\":{\"c\":[\"网络安全\",\"加密\"]},\"2104\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"2105\":{\"h\":\"Life\"},\"2106\":{\"h\":\"Data Structure\"},\"2107\":{\"h\":\"Method Mock\"},\"2108\":{\"h\":\"Solution\"},\"2109\":{\"h\":\"CSS\"},\"2110\":{\"h\":\"HTML\"},\"2111\":{\"h\":\"Java Script\"},\"2112\":{\"h\":\"Jquery\"},\"2113\":{\"h\":\"Preprocess\"},\"2114\":{\"h\":\"Vue\"},\"2115\":{\"h\":\"Code\"},\"2116\":{\"h\":\"Exam\"},\"2117\":{\"h\":\"Lodash\"},\"2118\":{\"h\":\"Promise\"},\"2119\":{\"h\":\"Vue2\"},\"2120\":{\"h\":\"Vue3\"},\"2121\":{\"h\":\"Vue Related\"}},\"dirtCount\":0,\"index\":[[\"散列算法将输入数据分成多个块\",{\"1\":{\"2101\":1}}],[\"散列算法\",{\"1\":{\"2101\":1}}],[\"散列\",{\"0\":{\"2101\":1}}],[\"摘要加密\",{\"1\":{\"2101\":1}}],[\"摘要算法\",{\"1\":{\"2101\":1}}],[\"摘要\",{\"0\":{\"2101\":1},\"1\":{\"2101\":1}}],[\"银行转账等操作时\",{\"1\":{\"2100\":1}}],[\"银行应用程序会认为请求是合法的\",{\"1\":{\"2087\":1}}],[\"诱导等\",{\"1\":{\"2091\":1}}],[\"恶意软件\",{\"1\":{\"2091\":1}}],[\"恶意攻击者可能利用callback=恶意函数的方式实现xss攻击\",{\"1\":{\"1614\":1}}],[\"机构对证书签名\",{\"1\":{\"2091\":1}}],[\"机可读性方面达到了一个最佳的临界点\",{\"1\":{\"895\":1}}],[\"身份验证的过程\",{\"1\":{\"2091\":1}}],[\"身份证号\",{\"1\":{\"1394\":1}}],[\"身份证长度有\",{\"1\":{\"910\":1}}],[\"阐述\",{\"1\":{\"2091\":1}}],[\"阐述一下\",{\"1\":{\"1560\":1}}],[\"剥离攻击是指攻击者劫持了客户端和服务器之间的连接\",{\"1\":{\"2091\":1}}],[\"剥离攻击两种\",{\"1\":{\"2091\":1}}],[\"劫持攻击是指攻击者劫持了客户端和服务器之间的连接\",{\"1\":{\"2091\":1}}],[\"劫持攻击和\",{\"1\":{\"2091\":1}}],[\"漫画\",{\"1\":{\"2091\":1}}],[\"漫无目的地去帮我们找合适的事件处理程序\",{\"1\":{\"1155\":1}}],[\"泄露\",{\"1\":{\"2088\":1}}],[\"窃取\",{\"1\":{\"2088\":1}}],[\"队列里面\",{\"1\":{\"2078\":1}}],[\"终止路由跳转\",{\"1\":{\"2075\":1}}],[\"终于发工资啦\",{\"1\":{\"176\":1}}],[\"终于在\",{\"1\":{\"46\":1}}],[\"审视新的组件\",{\"1\":{\"2071\":1}}],[\"紧接着声明了三个计算属性\",{\"1\":{\"2065\":1}}],[\"紧跟的表达式不需要写括号\",{\"1\":{\"1284\":1}}],[\"启用完全的\",{\"1\":{\"2063\":1}}],[\"启动本地文件上传服务器\",{\"0\":{\"1591\":1}}],[\"启动项目\",{\"1\":{\"1426\":1}}],[\"启动定时器\",{\"1\":{\"1410\":1}}],[\"启动目录\",{\"1\":{\"332\":1}}],[\"启动成功\",{\"1\":{\"305\":1}}],[\"启动服务器\",{\"1\":{\"287\":2,\"1591\":1}}],[\"启动服务\",{\"1\":{\"273\":1,\"282\":1,\"283\":1,\"284\":2,\"301\":1,\"304\":1,\"305\":1,\"329\":1,\"349\":1}}],[\"启动命令行\",{\"1\":{\"177\":1}}],[\"启动命令行工具\",{\"1\":{\"64\":1}}],[\"启动\",{\"1\":{\"157\":1,\"1482\":1}}],[\"究竟在做什么\",{\"1\":{\"2061\":1}}],[\"究竟做了什么\",{\"1\":{\"2061\":2}}],[\"究其根本原因\",{\"1\":{\"23\":1}}],[\"仔细观察两次所调用的\",{\"1\":{\"2058\":1}}],[\"迎合\",{\"1\":{\"2035\":1}}],[\"产生不必要的开销\",{\"1\":{\"2035\":1}}],[\"产品名称\",{\"1\":{\"1091\":1}}],[\"压入历史栈中\",{\"1\":{\"2030\":1}}],[\"压缩比例\",{\"1\":{\"592\":1}}],[\"压缩合并图片等\",{\"1\":{\"122\":1}}],[\"压缩\",{\"1\":{\"122\":2}}],[\"尚未同步\",{\"1\":{\"2029\":1}}],[\"尚硅谷\",{\"1\":{\"239\":1,\"732\":2,\"1396\":1}}],[\"守卫的类型\",{\"1\":{\"2074\":1}}],[\"守卫的\",{\"1\":{\"2069\":1}}],[\"守卫所对应的回调函数\",{\"1\":{\"2069\":1}}],[\"守卫中的\",{\"1\":{\"2069\":2}}],[\"守卫中传给\",{\"1\":{\"2029\":1}}],[\"守卫\",{\"1\":{\"2029\":5,\"2071\":4}}],[\"守旧\",{\"1\":{\"1705\":1}}],[\"仿照类的写法\",{\"1\":{\"2028\":1}}],[\"录入新的数据\",{\"1\":{\"2019\":1}}],[\"习惯上我们会将此函数命名为use\",{\"1\":{\"2018\":1}}],[\"副作用\",{\"1\":{\"2015\":1}}],[\"副作用函数不会立即同步执行\",{\"1\":{\"1954\":1}}],[\"副作用函数会重新执行\",{\"1\":{\"1943\":1}}],[\"副作用函数执行完毕后\",{\"1\":{\"1943\":1}}],[\"副作用函数执行时触发响应式数据\",{\"1\":{\"1888\":1}}],[\"副作用函数中添加变量保存\",{\"1\":{\"1895\":1}}],[\"副作用函数的懒加载\",{\"0\":{\"1894\":1}}],[\"副作用函数的名字固定为\",{\"1\":{\"1888\":1}}],[\"副作用函数是指会产生副作用的函数\",{\"1\":{\"1885\":1}}],[\"竞态问题\",{\"1\":{\"1987\":2}}],[\"透传\",{\"1\":{\"1977\":1}}],[\"透明到不透明\",{\"1\":{\"737\":1}}],[\"置空\",{\"1\":{\"1977\":1}}],[\"描的过程\",{\"1\":{\"1974\":1}}],[\"描述普通标签\",{\"1\":{\"1835\":1}}],[\"描述的是组件\",{\"1\":{\"1879\":1}}],[\"描述的是标签元素\",{\"1\":{\"1879\":1}}],[\"描述的是\",{\"1\":{\"1835\":1}}],[\"描述器模板\",{\"1\":{\"1804\":1}}],[\"描述了一种字符串匹配的模式\",{\"1\":{\"898\":1}}],[\"描述信息\",{\"1\":{\"828\":1}}],[\"描述绘制文本时\",{\"1\":{\"730\":1}}],[\"描述线段宽度的数字\",{\"1\":{\"708\":1}}],[\"描述\",{\"0\":{\"1877\":1},\"1\":{\"192\":1,\"307\":1,\"384\":1,\"391\":1,\"392\":1,\"393\":1,\"395\":1,\"396\":1,\"397\":1,\"398\":1,\"399\":1,\"773\":1,\"816\":1,\"1087\":2,\"1091\":1,\"1093\":1,\"1096\":1,\"1097\":1,\"1926\":2}}],[\"剩下的依然是两组子节点序列\",{\"1\":{\"1969\":1}}],[\"剩余工作将由合成线程完成\",{\"1\":{\"1526\":1}}],[\"拿原始数组中的对象去对比\",{\"1\":{\"1993\":1}}],[\"拿新的一组子节点中的头部节点去旧的一组子节点中寻找\",{\"1\":{\"1966\":1}}],[\"拿新的一组子节点中的节点去旧的一组子节点中寻找可复用的节点\",{\"1\":{\"1962\":1}}],[\"拿旧子节点\",{\"1\":{\"1962\":1}}],[\"拿到所有\",{\"1\":{\"2079\":1}}],[\"拿到所注入的\",{\"1\":{\"2047\":1}}],[\"拿到插槽内容\",{\"1\":{\"2066\":1}}],[\"拿到存储在里面的每一个\",{\"1\":{\"2061\":1}}],[\"拿到之前的状态对象\",{\"1\":{\"2061\":1}}],[\"拿到之前的\",{\"1\":{\"2061\":1}}],[\"拿到一个最新的\",{\"1\":{\"2061\":1}}],[\"拿到一个相对比较统一的值\",{\"1\":{\"2054\":1}}],[\"拿到每一个\",{\"1\":{\"2061\":1}}],[\"拿到参数每一项的值\",{\"1\":{\"2045\":1}}],[\"拿到最新的\",{\"1\":{\"2002\":1}}],[\"拿到原始数组\",{\"1\":{\"1923\":1,\"1924\":1,\"1993\":1}}],[\"拿到的值就是旧值\",{\"1\":{\"1897\":1}}],[\"拿到父组件传入的\",{\"1\":{\"1802\":1}}],[\"拿到父类原型的副本\",{\"1\":{\"466\":1,\"1072\":1}}],[\"拿到它的action属性地址\",{\"1\":{\"1569\":1}}],[\"钩子\",{\"1\":{\"1954\":6,\"2029\":1}}],[\"钩子函数中\",{\"1\":{\"2031\":2}}],[\"钩子函数注入到每一个组件中\",{\"1\":{\"2026\":1}}],[\"钩子函数\",{\"1\":{\"1423\":1,\"1791\":1,\"1834\":1,\"1862\":1}}],[\"们只能够通过\",{\"1\":{\"1949\":1}}],[\"兜底\",{\"1\":{\"1948\":1}}],[\"卸载的时候\",{\"1\":{\"2047\":1}}],[\"卸载方法存储到\",{\"1\":{\"2047\":1}}],[\"卸载方法\",{\"1\":{\"2047\":1}}],[\"卸载节点即可\",{\"1\":{\"1969\":1}}],[\"卸载节点\",{\"1\":{\"1966\":1}}],[\"卸载时要连同对应的\",{\"1\":{\"1950\":1}}],[\"卸载\",{\"1\":{\"1944\":1,\"1951\":2,\"1968\":1}}],[\"卸载指定版本\",{\"1\":{\"229\":1}}],[\"污染原始数据问题\",{\"1\":{\"1929\":1}}],[\"污染原始数据\",{\"1\":{\"1929\":1}}],[\"函\",{\"1\":{\"1926\":1}}],[\"函数主要的功能如下\",{\"1\":{\"2026\":1}}],[\"函数主要完成的功能为\",{\"1\":{\"2000\":1}}],[\"函数形式\",{\"1\":{\"2019\":1}}],[\"函数本质上依然是将传入的对象挂载到instance\",{\"1\":{\"2001\":1}}],[\"函数本质上是对象\",{\"1\":{\"402\":1}}],[\"函数递归地生成返回值代码\",{\"1\":{\"1979\":1}}],[\"函数完成代码的拼接\",{\"1\":{\"1979\":1}}],[\"函数完成清除工作\",{\"1\":{\"1890\":1}}],[\"函数逐个挂载新增节点\",{\"1\":{\"1968\":1}}],[\"函数更新\",{\"1\":{\"1962\":1}}],[\"函数更新文本节点的内容\",{\"1\":{\"1951\":1}}],[\"函数重新获取\",{\"1\":{\"1955\":1}}],[\"函数重载是一个同名函数完成不同的功能\",{\"1\":{\"485\":1}}],[\"函数调度\",{\"1\":{\"1954\":1}}],[\"函数调用的参数\",{\"1\":{\"1978\":1}}],[\"函数调用的第一个参数是标签名称\",{\"1\":{\"1978\":1}}],[\"函数调用的第一个参数是字符串字面量\",{\"1\":{\"1975\":2}}],[\"函数调用语句\",{\"1\":{\"1978\":1}}],[\"函数调用栈\",{\"1\":{\"1013\":1}}],[\"函数调用以及表达式分组\",{\"1\":{\"816\":1}}],[\"函数调用等\",{\"1\":{\"790\":1}}],[\"函数调用\",{\"1\":{\"402\":2,\"943\":1,\"1975\":1}}],[\"函数第一个参数传递\",{\"1\":{\"1954\":1}}],[\"函数之前\",{\"1\":{\"1954\":1,\"2058\":1}}],[\"函数之前实现一些其他的功能\",{\"1\":{\"402\":1}}],[\"函数注册的生命周期钩子函数\",{\"1\":{\"1954\":1}}],[\"函数注册一个过期回调\",{\"1\":{\"1897\":1,\"1987\":1}}],[\"函数注册一个回调\",{\"1\":{\"1897\":1}}],[\"函数解析出最终的\",{\"1\":{\"1954\":1}}],[\"函数得到原始数据\",{\"1\":{\"1954\":1}}],[\"函数只能在\",{\"1\":{\"1954\":1}}],[\"函数只是对\",{\"1\":{\"1909\":1}}],[\"函数定义组件自身的状态\",{\"1\":{\"1953\":1}}],[\"函数定义完\",{\"1\":{\"948\":1}}],[\"函数可以返回一个函数\",{\"1\":{\"1953\":1}}],[\"函数挂载到配置对象中\",{\"1\":{\"1953\":1}}],[\"函数挂载它\",{\"1\":{\"1948\":1}}],[\"函数即可\",{\"1\":{\"1948\":1}}],[\"函数所返回的数据会传递给\",{\"1\":{\"1938\":1}}],[\"函数所执行的代码分支是变化的\",{\"1\":{\"1890\":1}}],[\"函数创建文本节点\",{\"1\":{\"1951\":1}}],[\"函数创建代理\",{\"1\":{\"1938\":1}}],[\"函数创建了一个大小为\",{\"1\":{\"1667\":1}}],[\"函数包裹\",{\"1\":{\"1930\":1}}],[\"函数用来把可代理的值转换为响应式数据\",{\"1\":{\"1930\":1}}],[\"函数用于解析组件\",{\"1\":{\"1954\":1}}],[\"函数用于注册副作用函数\",{\"1\":{\"1888\":1}}],[\"函数用于显式地限制该组件暴露出的属性\",{\"1\":{\"1493\":1}}],[\"函数建立响应联系\",{\"1\":{\"1928\":1,\"1931\":1}}],[\"函数进行渲染\",{\"1\":{\"2000\":1}}],[\"函数进行遍历\",{\"1\":{\"1976\":1}}],[\"函数进行处理\",{\"1\":{\"1938\":1}}],[\"函数进行依赖追踪\",{\"1\":{\"1928\":1}}],[\"函数进行追踪\",{\"1\":{\"1896\":2,\"1986\":1}}],[\"函数执行时的\",{\"1\":{\"1926\":2}}],[\"函数执行完毕之后\",{\"1\":{\"1954\":1}}],[\"函数执行完后\",{\"1\":{\"1025\":1}}],[\"函数执行完自动释放\",{\"1\":{\"1002\":1}}],[\"函数接收模板作为参数\",{\"1\":{\"1974\":1}}],[\"函数接收可选的第二个参数\",{\"1\":{\"1926\":2}}],[\"函数接收两个参数\",{\"1\":{\"1897\":1}}],[\"函数会先执行\",{\"1\":{\"2030\":1}}],[\"函数会遍历\",{\"1\":{\"1926\":1}}],[\"函数会遍历集合中的所有元素\",{\"1\":{\"1926\":1}}],[\"函数会把序列对象中的元素依次放到\",{\"1\":{\"402\":1}}],[\"函数增加第四个参数\",{\"1\":{\"1918\":1}}],[\"函数追踪依赖\",{\"1\":{\"1932\":1}}],[\"函数追踪依赖建立响应联系\",{\"1\":{\"1929\":1}}],[\"函数追踪响应\",{\"1\":{\"1914\":1}}],[\"函数追踪变化\",{\"1\":{\"1889\":1}}],[\"函数作为调度器函数\",{\"1\":{\"1897\":1}}],[\"函数作用域的概念\",{\"1\":{\"987\":1}}],[\"函数作用域则只能在当前函数所创造的环境中使用\",{\"1\":{\"948\":1}}],[\"函数作用域在编码的时候就确定了\",{\"1\":{\"938\":1}}],[\"函数作用域\",{\"0\":{\"938\":1},\"1\":{\"1018\":1}}],[\"函数作用域以及\",{\"1\":{\"936\":1}}],[\"函数触发依赖收集\",{\"1\":{\"2002\":1}}],[\"函数触发响应\",{\"1\":{\"1896\":2,\"1928\":2,\"1986\":1}}],[\"函数触发变化\",{\"1\":{\"1889\":1}}],[\"函数渲染子节点\",{\"1\":{\"1878\":1}}],[\"函数保存的模型权重参数文件默认是以\",{\"1\":{\"1674\":1}}],[\"函数加载保存的\",{\"1\":{\"1673\":1}}],[\"函数计算输出值\",{\"1\":{\"1662\":1}}],[\"函数对\",{\"1\":{\"1655\":1}}],[\"函数对象的length属性是表示\",{\"1\":{\"951\":1}}],[\"函数什么时候执行\",{\"0\":{\"1375\":1}}],[\"函数式组件节点\",{\"1\":{\"1788\":1}}],[\"函数式组件对应的配置项\",{\"1\":{\"1788\":1}}],[\"函数式组件对应的vue实例\",{\"1\":{\"1788\":1}}],[\"函数式实例化时返回的是相同数据的不同对象\",{\"1\":{\"1361\":1}}],[\"函数式\",{\"1\":{\"1361\":1}}],[\"函数或变量\",{\"1\":{\"1313\":1}}],[\"函数或全局\",{\"1\":{\"990\":1,\"996\":1}}],[\"函数等特性\",{\"1\":{\"1324\":1}}],[\"函数等\",{\"1\":{\"1313\":1}}],[\"函数等只能起转发作用\",{\"1\":{\"1309\":1}}],[\"函数等效\",{\"1\":{\"888\":1}}],[\"函数和自动执行器\",{\"1\":{\"1772\":1}}],[\"函数和变量都是可用的\",{\"1\":{\"1313\":1}}],[\"函数和变量可以暴露出去\",{\"1\":{\"1309\":1}}],[\"函数和局部变量\",{\"1\":{\"1015\":1}}],[\"函数合并\",{\"1\":{\"1280\":1}}],[\"函数获取一个列表中的值\",{\"1\":{\"1268\":1}}],[\"函数需要手动的来切换执行权\",{\"1\":{\"1187\":1}}],[\"函数管道\",{\"0\":{\"1040\":1},\"1\":{\"1040\":2}}],[\"函数节流\",{\"0\":{\"1036\":1}}],[\"函数防抖\",{\"0\":{\"1035\":1},\"1\":{\"1035\":1}}],[\"函数防抖与函数节流\",{\"0\":{\"1034\":1}}],[\"函数有可能被非常频繁地调用\",{\"1\":{\"1034\":1}}],[\"函数被调用两次\",{\"1\":{\"1910\":1}}],[\"函数被调用时\",{\"1\":{\"1014\":1}}],[\"函数被大量调用\",{\"1\":{\"1030\":1}}],[\"函数返回值的类型进行不同处理\",{\"1\":{\"2001\":1}}],[\"函数返回值为一个\",{\"1\":{\"402\":1}}],[\"函数返回渲染函数\",{\"1\":{\"1954\":1}}],[\"函数返回的对象\",{\"1\":{\"1827\":1}}],[\"函数返回的只能是一个值\",{\"1\":{\"1282\":1}}],[\"函数返回结果是一个promise对象\",{\"1\":{\"1584\":1}}],[\"函数返回一个函数\",{\"1\":{\"1023\":1}}],[\"函数表达式赋值\",{\"1\":{\"1015\":1}}],[\"函数表达式声明\",{\"1\":{\"1015\":1}}],[\"函数表达式声明函数\",{\"0\":{\"929\":1}}],[\"函数环境会初始化创建\",{\"1\":{\"1015\":1}}],[\"函数环境\",{\"1\":{\"1013\":2}}],[\"函数代码\",{\"1\":{\"1013\":1}}],[\"函数也会被调用一次\",{\"1\":{\"1499\":1}}],[\"函数也是数据\",{\"1\":{\"998\":1}}],[\"函数也一样\",{\"1\":{\"77\":1}}],[\"函数修改为箭头函数\",{\"1\":{\"996\":1}}],[\"函数运行时\",{\"1\":{\"995\":1}}],[\"函数内创建\",{\"1\":{\"1977\":1}}],[\"函数内置了一个自动执行器\",{\"1\":{\"1187\":1}}],[\"函数内的局部变量没有释放\",{\"1\":{\"1025\":1}}],[\"函数内的\",{\"1\":{\"990\":1,\"996\":1,\"1902\":2}}],[\"函数内部会调用patch函数\",{\"1\":{\"2000\":1}}],[\"函数内部会依次获取数组中所有元素对应的属性值并返回该属性值\",{\"1\":{\"1854\":1}}],[\"函数内部创建包裹对象\",{\"1\":{\"1936\":1}}],[\"函数内部依然可以正常使用\",{\"1\":{\"1152\":1}}],[\"函数内部\",{\"1\":{\"958\":1}}],[\"函数没有返回值时\",{\"1\":{\"980\":1}}],[\"函数属性和方法\",{\"0\":{\"949\":1}}],[\"函数里面\",{\"1\":{\"943\":1}}],[\"函数提升比变量提升的优先级高\",{\"1\":{\"1012\":1}}],[\"函数提升\",{\"0\":{\"940\":1},\"1\":{\"1012\":1}}],[\"函数体的返回语句\",{\"1\":{\"1978\":1}}],[\"函数体内的\",{\"1\":{\"990\":2,\"996\":2}}],[\"函数体\",{\"1\":{\"929\":1,\"930\":1,\"941\":3}}],[\"函数显得尤为的重要\",{\"1\":{\"926\":1}}],[\"函数是不允许的\",{\"1\":{\"895\":1}}],[\"函数在浏览器全局环境下被简单调用\",{\"1\":{\"991\":1}}],[\"函数在\",{\"1\":{\"943\":1,\"991\":1}}],[\"函数在接收到一个值之后\",{\"1\":{\"795\":1}}],[\"函数在转换数值的时候是可以带有参数的\",{\"1\":{\"789\":1}}],[\"函数设置起点\",{\"1\":{\"711\":1}}],[\"函数设置的值总是会被字符串化\",{\"1\":{\"680\":1}}],[\"函数设置背景渐变\",{\"1\":{\"636\":1}}],[\"函数时挂载子节点和子组件\",{\"1\":{\"2003\":1}}],[\"函数时对值进行检查\",{\"1\":{\"1929\":1}}],[\"函数时都会创建一个新的代理对象\",{\"1\":{\"1923\":1}}],[\"函数时\",{\"1\":{\"405\":1,\"711\":1,\"1954\":1}}],[\"函数来移除上一次绑定的事件\",{\"1\":{\"1949\":1}}],[\"函数来设置\",{\"1\":{\"1949\":1}}],[\"函数来访问值\",{\"1\":{\"1277\":1}}],[\"函数来绑定\",{\"1\":{\"1153\":1}}],[\"函数来延迟系统通知出现\",{\"1\":{\"1105\":1}}],[\"函数来转换为相应的字符串\",{\"1\":{\"789\":1}}],[\"函数来保证父类的方法只被执行一次\",{\"1\":{\"405\":1}}],[\"函数来明确转换方式\",{\"1\":{\"395\":1}}],[\"函数功能为为成员变量赋值\",{\"1\":{\"405\":1}}],[\"函数顺序是从上往下的\",{\"1\":{\"402\":1}}],[\"函数中首先会使用$route访问当前路由对象\",{\"1\":{\"2031\":1}}],[\"函数中定义的\",{\"1\":{\"2031\":1}}],[\"函数中定义了\",{\"1\":{\"2031\":1}}],[\"函数中通过\",{\"1\":{\"1902\":1}}],[\"函数中创建一个\",{\"1\":{\"1659\":1}}],[\"函数中使用的\",{\"1\":{\"1501\":1}}],[\"函数中手动暴露大量的状态和方法非常繁琐\",{\"1\":{\"1486\":1}}],[\"函数中的循环中\",{\"1\":{\"1890\":1}}],[\"函数中的\",{\"1\":{\"958\":1,\"995\":1}}],[\"函数中两个形参名相同也不会报错\",{\"1\":{\"958\":1}}],[\"函数中相同的形参名会报错\",{\"1\":{\"958\":1}}],[\"函数中\",{\"1\":{\"402\":1,\"1927\":1,\"1949\":1}}],[\"函数中元素的索引相对应\",{\"1\":{\"388\":1}}],[\"函数处理多个序列数据\",{\"1\":{\"402\":1}}],[\"函数处理一个序列数据\",{\"1\":{\"402\":1}}],[\"函数分类\",{\"1\":{\"402\":1}}],[\"函数的声明语句节点\",{\"1\":{\"1978\":1}}],[\"函数的调用\",{\"1\":{\"1975\":2}}],[\"函数的名称是一个标识符\",{\"1\":{\"1975\":1}}],[\"函数的基本实现\",{\"0\":{\"1944\":1}}],[\"函数的回调函数接收第三个参数\",{\"1\":{\"1897\":1}}],[\"函数的第三个参数\",{\"1\":{\"1930\":1}}],[\"函数的第二个参数\",{\"1\":{\"1834\":1,\"1835\":2}}],[\"函数的第一个参数\",{\"1\":{\"995\":1}}],[\"函数的别名\",{\"1\":{\"1797\":4}}],[\"函数的实现原理\",{\"1\":{\"1772\":1}}],[\"函数的两种\",{\"1\":{\"1486\":1}}],[\"函数的触发不是由用户直接控制的\",{\"1\":{\"1034\":1}}],[\"函数的显式原型和隐式原型指向的对象不同\",{\"1\":{\"1009\":1}}],[\"函数的\",{\"1\":{\"1008\":1,\"1102\":1,\"1897\":1}}],[\"函数的参数转换成响应式的\",{\"1\":{\"1930\":1}}],[\"函数的参数可以分为两种\",{\"1\":{\"931\":1}}],[\"函数的参数设置\",{\"0\":{\"931\":1}}],[\"函数的参数不同\",{\"1\":{\"485\":1}}],[\"函数的参数代表当前字段\",{\"1\":{\"198\":1}}],[\"函数的返回值是函数\",{\"1\":{\"1954\":1}}],[\"函数的返回值是一个\",{\"1\":{\"402\":1}}],[\"函数的返回值的关键字为return\",{\"1\":{\"935\":1}}],[\"函数的返回值\",{\"0\":{\"935\":1}}],[\"函数的返回值来区分该调用哪一个函数\",{\"1\":{\"485\":1}}],[\"函数的组合\",{\"1\":{\"402\":2}}],[\"函数的作用是检查变量的类型\",{\"1\":{\"402\":1}}],[\"函数名称\",{\"1\":{\"1262\":1}}],[\"函数名相同\",{\"1\":{\"485\":1}}],[\"函数名\",{\"1\":{\"402\":1,\"930\":1,\"1088\":2}}],[\"函数不仅比较内容是否相等\",{\"1\":{\"398\":1}}],[\"函数将其卸载\",{\"1\":{\"1962\":1}}],[\"函数将其包装为响应式数据\",{\"1\":{\"1954\":1}}],[\"函数将其他类型转换为布尔值\",{\"1\":{\"796\":1}}],[\"函数将不带引号的字符串转换为带引号的字符串\",{\"1\":{\"1265\":1}}],[\"函数将带引号的字符串转换为不带引号的字符串\",{\"1\":{\"1265\":1}}],[\"函数将字典中的\",{\"1\":{\"393\":1}}],[\"函数将\",{\"1\":{\"384\":1}}],[\"函数\",{\"0\":{\"402\":1,\"926\":1,\"1487\":1,\"1488\":1,\"1496\":1,\"1497\":1,\"1498\":1,\"1501\":1,\"1766\":1},\"1\":{\"156\":1,\"378\":2,\"392\":1,\"402\":1,\"405\":3,\"493\":1,\"711\":1,\"789\":1,\"794\":1,\"795\":1,\"828\":1,\"923\":1,\"926\":1,\"952\":1,\"995\":1,\"1015\":1,\"1023\":1,\"1059\":2,\"1086\":1,\"1137\":1,\"1266\":1,\"1270\":1,\"1271\":1,\"1273\":1,\"1274\":1,\"1279\":1,\"1314\":1,\"1317\":1,\"1446\":1,\"1486\":1,\"1493\":1,\"1494\":1,\"1499\":1,\"1512\":1,\"1556\":2,\"1560\":1,\"1673\":2,\"1767\":1,\"1779\":1,\"1802\":2,\"1874\":3,\"1890\":1,\"1891\":1,\"1893\":2,\"1894\":1,\"1895\":1,\"1896\":3,\"1897\":10,\"1902\":1,\"1906\":3,\"1910\":1,\"1913\":3,\"1914\":2,\"1917\":2,\"1918\":1,\"1920\":1,\"1923\":2,\"1925\":1,\"1926\":1,\"1928\":1,\"1930\":1,\"1932\":1,\"1936\":2,\"1937\":3,\"1944\":2,\"1953\":1,\"1954\":2,\"1979\":1,\"1990\":1,\"1991\":1,\"2015\":1,\"2019\":1,\"2026\":1,\"2030\":1,\"2031\":1,\"2032\":1,\"2045\":1,\"2065\":2}}],[\"脏\",{\"1\":{\"1896\":2}}],[\"拓展\",{\"1\":{\"1893\":1}}],[\"拓展运算符\",{\"0\":{\"447\":1},\"1\":{\"469\":1}}],[\"硬编码\",{\"0\":{\"1888\":1},\"1\":{\"1888\":1}}],[\"硬件\",{\"1\":{\"1526\":1}}],[\"串并生成一个功能与之相同的渲染函数\",{\"1\":{\"1880\":1}}],[\"串均可\",{\"1\":{\"402\":1}}],[\"霍春阳\",{\"1\":{\"1870\":1,\"1900\":1,\"1935\":1}}],[\"储存所有\",{\"1\":{\"1864\":1}}],[\"帮助开发者里快速定位问题\",{\"1\":{\"1875\":1}}],[\"帮助initprops定义\",{\"1\":{\"1864\":1}}],[\"帮助initlifecycle确认组件之间的父子关系\",{\"1\":{\"1864\":1}}],[\"帮我们执行的\",{\"1\":{\"1423\":1}}],[\"ƒ\",{\"1\":{\"1834\":1}}],[\"影响注册之后所有创建的每个\",{\"1\":{\"1826\":1}}],[\"影响不重要\",{\"1\":{\"1690\":1}}],[\"皆用于创建组件的构造函数\",{\"1\":{\"1825\":1}}],[\"锁上异步锁\",{\"1\":{\"1822\":1}}],[\"锁的实例化\",{\"1\":{\"408\":1}}],[\"谈到重新渲染\",{\"1\":{\"1821\":1}}],[\"迫使\",{\"1\":{\"1821\":1}}],[\"抽离\",{\"0\":{\"1946\":1}}],[\"抽离为独立的函数\",{\"1\":{\"1931\":1}}],[\"抽象组件是一种特殊的组件\",{\"1\":{\"1800\":1}}],[\"抽烟\",{\"1\":{\"1488\":1}}],[\"衡量性能\",{\"1\":{\"1799\":1}}],[\"始终将其更新\",{\"1\":{\"1795\":1}}],[\"栈\",{\"1\":{\"1891\":1,\"1974\":1}}],[\"栈中没有找到对应的开始标签\",{\"1\":{\"1792\":1}}],[\"栈顶的元素\",{\"1\":{\"1792\":1}}],[\"栈空间\",{\"1\":{\"1000\":1}}],[\"挂了多次\",{\"1\":{\"2047\":1}}],[\"挂在\",{\"1\":{\"2043\":1}}],[\"挂起\",{\"1\":{\"1776\":2}}],[\"挂载在路由配置表上面的\",{\"1\":{\"2071\":1}}],[\"挂载在全局路由实例上面\",{\"1\":{\"2071\":1}}],[\"挂载过程中会将包含render和patch的函数与响应式数据相关联\",{\"1\":{\"2003\":1}}],[\"挂载组件\",{\"1\":{\"1951\":1}}],[\"挂载属性\",{\"0\":{\"1949\":1}}],[\"挂载真实标签\",{\"1\":{\"1948\":1}}],[\"挂载元素\",{\"0\":{\"1948\":1}}],[\"挂载到instance\",{\"1\":{\"2001\":1}}],[\"挂载到vnode\",{\"1\":{\"1954\":1}}],[\"挂载到vm\",{\"1\":{\"1801\":1,\"1802\":1}}],[\"挂载到\",{\"1\":{\"1893\":1}}],[\"挂载阶段所做的主要工作是创建vue实例并用其替换el选项对应的dom元素\",{\"1\":{\"1806\":1}}],[\"挂载各种的属性对象\",{\"1\":{\"1799\":1}}],[\"挂载\",{\"1\":{\"1484\":1,\"1799\":1,\"1944\":1,\"1951\":1,\"1962\":1,\"1968\":1,\"1969\":1}}],[\"今年\",{\"1\":{\"1753\":1}}],[\"量\",{\"1\":{\"1752\":1}}],[\"量词\",{\"1\":{\"920\":1}}],[\"量词等基本结构组合而成的\",{\"1\":{\"920\":1}}],[\"量词控制之前元素的出现次数\",{\"1\":{\"910\":1}}],[\"量词采用的是贪婪模式\",{\"1\":{\"907\":1}}],[\"量词相关元字符\",{\"0\":{\"906\":1}}],[\"额外的必要内部方法\",{\"1\":{\"1903\":1}}],[\"额外\",{\"1\":{\"1779\":1}}],[\"额\",{\"1\":{\"1752\":1}}],[\"尺子分段\",{\"1\":{\"1748\":1}}],[\"尺寸\",{\"1\":{\"609\":1}}],[\"≥\",{\"1\":{\"1748\":1}}],[\"严谨要推的情况\",{\"1\":{\"1747\":1}}],[\"严谨来说\",{\"1\":{\"1747\":1}}],[\"严格按照状态迁移过程编写\",{\"1\":{\"1974\":1}}],[\"严格意义上这不是\",{\"1\":{\"1243\":1}}],[\"严格模式详解\",{\"1\":{\"958\":1}}],[\"严格模式新增了一些保留字\",{\"1\":{\"958\":1}}],[\"严格模式创设了第三种作用域\",{\"1\":{\"958\":1}}],[\"严格模式禁止这种表示法\",{\"1\":{\"958\":1}}],[\"严格模式和普通模式区别\",{\"0\":{\"958\":1}}],[\"严格模式下\",{\"1\":{\"956\":1,\"958\":2}}],[\"严格模式是从\",{\"1\":{\"956\":1}}],[\"严格模式\",{\"0\":{\"954\":1},\"1\":{\"956\":3,\"957\":4,\"959\":1}}],[\"末期\",{\"1\":{\"1748\":1}}],[\"末期−基期\",{\"1\":{\"1747\":1}}],[\"末尾是普通值\",{\"1\":{\"452\":1}}],[\"季度个数等\",{\"1\":{\"1745\":1}}],[\"浓度为\",{\"1\":{\"1742\":1}}],[\"浓度＞整体浓度\",{\"1\":{\"1741\":1}}],[\"浓度＞整体浓度＞部分\",{\"1\":{\"1741\":1}}],[\"浓度\",{\"1\":{\"1741\":2}}],[\"牢记\",{\"1\":{\"1741\":1}}],[\"累计图表\",{\"1\":{\"1752\":1}}],[\"累计量=当月量+上月累计量\",{\"1\":{\"1740\":1}}],[\"累计\",{\"1\":{\"1740\":1}}],[\"盐水题目识别特征\",{\"0\":{\"1740\":1}}],[\"盐水类考点\",{\"1\":{\"1753\":1}}],[\"盐水类\",{\"0\":{\"1739\":1}}],[\"倍=增长了\",{\"1\":{\"1746\":1}}],[\"倍=100\",{\"1\":{\"1746\":1}}],[\"倍以上\",{\"1\":{\"1738\":1}}],[\"倍\",{\"1\":{\"1738\":1,\"1746\":1}}],[\"倍数=增长率+100\",{\"1\":{\"1746\":1}}],[\"倍数\",{\"0\":{\"1746\":1},\"1\":{\"1721\":1}}],[\"越过文本内容\",{\"1\":{\"1792\":1}}],[\"越大则\",{\"1\":{\"1738\":1}}],[\"越大\",{\"1\":{\"1738\":2}}],[\"越小代表键靠近自己想查询的值\",{\"1\":{\"1678\":1}}],[\"趋势法\",{\"1\":{\"1737\":1}}],[\"班级内的女同学为小集合\",{\"1\":{\"1733\":1}}],[\"班级为中集合\",{\"1\":{\"1733\":1}}],[\"饼状图\",{\"1\":{\"1731\":1}}],[\"套用公式即可\",{\"1\":{\"1731\":2}}],[\"套路\",{\"1\":{\"1508\":1}}],[\"＋增长率反过来\",{\"1\":{\"1732\":1}}],[\"＋\",{\"1\":{\"1729\":2,\"1740\":1,\"1751\":3}}],[\"材料中有\",{\"1\":{\"1728\":2}}],[\"徒弟＝\",{\"1\":{\"1723\":4}}],[\"师父\",{\"1\":{\"1723\":4}}],[\"≈6\",{\"1\":{\"1723\":1}}],[\"万公里\",{\"1\":{\"1723\":1}}],[\"万维网联盟\",{\"1\":{\"1084\":1}}],[\"万维网\",{\"1\":{\"266\":1}}],[\"城市供水管道长度\",{\"1\":{\"1723\":1}}],[\"亿立方米\",{\"1\":{\"1723\":5}}],[\"邪恶小人😂\",{\"1\":{\"1723\":1}}],[\"抓大放小\",{\"1\":{\"1723\":1}}],[\"估算成\",{\"1\":{\"1722\":2}}],[\"估算必然会产生误差\",{\"1\":{\"1722\":1}}],[\"估小则一份变小\",{\"1\":{\"1722\":1}}],[\"估大则一份变大\",{\"1\":{\"1722\":1}}],[\"份\",{\"1\":{\"1722\":3}}],[\"份数法名字的由来\",{\"1\":{\"1722\":1}}],[\"份数法中\",{\"1\":{\"1722\":1}}],[\"份数法是将数量关系转化为份数比例关系\",{\"1\":{\"1722\":1}}],[\"份数法\",{\"0\":{\"1722\":1},\"1\":{\"1722\":2,\"1729\":1}}],[\"＝部分和\",{\"1\":{\"1731\":1}}],[\"＝\",{\"1\":{\"1722\":3,\"1723\":1,\"1728\":2,\"1729\":1,\"1740\":1,\"1745\":1}}],[\"尤其\",{\"1\":{\"1720\":1}}],[\"尤其是\",{\"1\":{\"702\":1}}],[\"擅用\",{\"1\":{\"1718\":1}}],[\"擅长高并发的请求处理\",{\"1\":{\"507\":1}}],[\"拆成两个简单数值\",{\"1\":{\"1718\":1}}],[\"拆分出来再调用$watch\",{\"1\":{\"1810\":1}}],[\"拆分是对直除的优化\",{\"1\":{\"1720\":1}}],[\"拆分法具体应用\",{\"1\":{\"1720\":1}}],[\"拆分法\",{\"0\":{\"1720\":1},\"1\":{\"1721\":1,\"1737\":1}}],[\"拆分静态组件\",{\"1\":{\"1435\":1}}],[\"拆分成多个简单值或者复杂值\",{\"1\":{\"981\":1}}],[\"拆分成多个文件的过程称之为\",{\"1\":{\"232\":1}}],[\"省略部分代码\",{\"1\":{\"1925\":1,\"1931\":1,\"1956\":2,\"1966\":4,\"1993\":1,\"1998\":2,\"2029\":1}}],[\"省略部分内容\",{\"1\":{\"1917\":2,\"1930\":2,\"1993\":2}}],[\"省略前文讲解的拦截函数\",{\"1\":{\"1909\":1}}],[\"省略其他拦截函数\",{\"1\":{\"1906\":1,\"1910\":1,\"1912\":1,\"1913\":1,\"1914\":2,\"1917\":1,\"1920\":1,\"1990\":1,\"1991\":1,\"1992\":1,\"1993\":2}}],[\"省略其他代码\",{\"1\":{\"1785\":1,\"1918\":2,\"1932\":2,\"1992\":3}}],[\"省略格式要求\",{\"1\":{\"388\":1}}],[\"省去计算\",{\"1\":{\"1737\":1}}],[\"省去书写完整加法算式的时间\",{\"1\":{\"1712\":1}}],[\"部分代码进行拆解\",{\"1\":{\"2069\":1}}],[\"部分的源码如下\",{\"1\":{\"2075\":1}}],[\"部分的代码\",{\"1\":{\"2070\":1}}],[\"部分的\",{\"1\":{\"2058\":1,\"2061\":1}}],[\"部分的值应该为\",{\"1\":{\"2058\":1}}],[\"部分的值是有问题\",{\"1\":{\"2058\":1}}],[\"部分的值和视图模块相对应\",{\"1\":{\"2049\":1}}],[\"部分的字符串\",{\"1\":{\"2058\":1}}],[\"部分的变化\",{\"1\":{\"2049\":1}}],[\"部分\",{\"1\":{\"1741\":2,\"1767\":1,\"2058\":2,\"2061\":1}}],[\"部分非\",{\"1\":{\"1737\":1}}],[\"部分增长率−整体增长率\",{\"1\":{\"1735\":1}}],[\"部分增量\",{\"1\":{\"1729\":1,\"1750\":2}}],[\"部分差\",{\"1\":{\"1731\":1}}],[\"部分比重和或比重差\",{\"1\":{\"1731\":1}}],[\"部分＝整体\",{\"1\":{\"1731\":1}}],[\"部分=整体\",{\"1\":{\"1728\":1}}],[\"部分求和\",{\"1\":{\"1711\":1}}],[\"部分做拆解\",{\"1\":{\"494\":1}}],[\"尾数入手\",{\"1\":{\"1711\":1}}],[\"尾数法\",{\"0\":{\"1711\":1}}],[\"尾句\",{\"1\":{\"1698\":1}}],[\"化\",{\"1\":{\"1705\":1,\"1932\":1}}],[\"食古不\",{\"1\":{\"1705\":1}}],[\"抱残守缺\",{\"1\":{\"1705\":1}}],[\"墨守\",{\"1\":{\"1705\":1}}],[\"别出心裁\",{\"1\":{\"1705\":1}}],[\"别名\",{\"1\":{\"378\":1,\"1009\":1,\"1370\":1}}],[\"别名比较特别\",{\"1\":{\"77\":1}}],[\"匠心独运\",{\"1\":{\"1705\":1}}],[\"心思独特\",{\"1\":{\"1705\":1}}],[\"心跳检测\",{\"0\":{\"505\":1}}],[\"弃旧\",{\"1\":{\"1705\":1}}],[\"革\",{\"1\":{\"1705\":1}}],[\"纳\",{\"1\":{\"1705\":1}}],[\"吐故\",{\"1\":{\"1705\":1}}],[\"陈陈相因\",{\"1\":{\"1705\":1}}],[\"似断非断\",{\"1\":{\"1705\":1}}],[\"薪火相传\",{\"1\":{\"1705\":1}}],[\"血脉相通\",{\"1\":{\"1705\":1}}],[\"蓄\",{\"1\":{\"1705\":1}}],[\"弥\",{\"1\":{\"1705\":1}}],[\"弥补了\",{\"1\":{\"768\":1}}],[\"久\",{\"1\":{\"1705\":1}}],[\"历\",{\"1\":{\"1705\":1}}],[\"历史记录条目的状态对象如下\",{\"1\":{\"2058\":3}}],[\"历史记录\",{\"1\":{\"2048\":1}}],[\"历史不可改写\",{\"1\":{\"1776\":1}}],[\"历史列表数\",{\"1\":{\"1096\":1}}],[\"历史回顾\",{\"1\":{\"219\":1}}],[\"博大精\",{\"1\":{\"1705\":1}}],[\"博文原址\",{\"1\":{\"773\":1}}],[\"明显段落标志\",{\"1\":{\"1703\":1}}],[\"明确时间间隔\",{\"1\":{\"1745\":1}}],[\"明确自己的事件触发源\",{\"1\":{\"1155\":1}}],[\"明确表明这是一个文件的复制\",{\"1\":{\"772\":1}}],[\"程度\",{\"1\":{\"1702\":1}}],[\"程序会自动查找\",{\"1\":{\"1308\":1}}],[\"程序是在某个进程中的某个线程执行的\",{\"1\":{\"1170\":1}}],[\"程序是从上往下\",{\"1\":{\"817\":1}}],[\"程序的编译与运行\",{\"1\":{\"1172\":1}}],[\"程序的一次执行\",{\"1\":{\"1168\":1}}],[\"程序的运行需要内存\",{\"1\":{\"1027\":1}}],[\"程序报错\",{\"1\":{\"789\":1}}],[\"程序\",{\"1\":{\"672\":1}}],[\"程序打开一个文件是需要消耗资源的\",{\"1\":{\"247\":1}}],[\"程序运行需要有它自己专属的内存空间\",{\"1\":{\"1553\":1}}],[\"程序运行\",{\"1\":{\"253\":1}}],[\"程序运行效率较低\",{\"1\":{\"225\":1}}],[\"程序运行不稳定\",{\"1\":{\"225\":1}}],[\"程序处于何种环境\",{\"1\":{\"71\":1}}],[\"色彩和重点\",{\"1\":{\"1702\":1}}],[\"色彩和程度\",{\"1\":{\"1702\":1}}],[\"色相\",{\"1\":{\"535\":1}}],[\"尝试给句子\",{\"1\":{\"1699\":1}}],[\"落实政策\",{\"1\":{\"1698\":1}}],[\"吸引人\",{\"1\":{\"1696\":1}}],[\"筛去无中生有的选项\",{\"1\":{\"1692\":1}}],[\"筛去表述片面的选项\",{\"1\":{\"1692\":1}}],[\"筛选方法中有个叫做\",{\"1\":{\"1232\":1}}],[\"筛选方法为我们提供了解决方案\",{\"1\":{\"1204\":1}}],[\"评价\",{\"1\":{\"1686\":1}}],[\"评分函数\",{\"1\":{\"1678\":1}}],[\"倾向\",{\"1\":{\"1685\":1}}],[\"话题一致\",{\"1\":{\"1697\":1,\"1698\":1}}],[\"话题\",{\"1\":{\"1685\":1,\"1687\":2,\"1695\":1,\"1705\":1}}],[\"话痨问题\",{\"1\":{\"1646\":1}}],[\"话痨式\",{\"1\":{\"1645\":1}}],[\"阅读前后句尝试做题\",{\"1\":{\"1700\":1}}],[\"阅读尾句定性\",{\"1\":{\"1698\":1}}],[\"阅读整体文段\",{\"1\":{\"1695\":1}}],[\"阅读技巧\",{\"0\":{\"1685\":1}}],[\"阅读文段时秉持的根本原则\",{\"1\":{\"1685\":1}}],[\"阅读文段\",{\"1\":{\"1684\":1}}],[\"篇章阅读\",{\"0\":{\"1703\":1},\"1\":{\"1684\":1}}],[\"词性相同的词语\",{\"1\":{\"1702\":1}}],[\"词性\",{\"1\":{\"1702\":1}}],[\"词句理解\",{\"0\":{\"1700\":1},\"1\":{\"1684\":1}}],[\"词法分析\",{\"1\":{\"1020\":1}}],[\"词法环境\",{\"1\":{\"1015\":1}}],[\"词法环境决定\",{\"1\":{\"1015\":1}}],[\"横线在开头\",{\"1\":{\"1697\":1}}],[\"横线在结尾\",{\"1\":{\"1697\":1}}],[\"横线填空\",{\"1\":{\"1684\":1}}],[\"横向合并单元格\",{\"1\":{\"669\":1}}],[\"横向制表符\",{\"1\":{\"384\":1}}],[\"言语理解笔记\",{\"0\":{\"1683\":1}}],[\"损失函数\",{\"1\":{\"1680\":1}}],[\"件事\",{\"1\":{\"1678\":1}}],[\"训练准确率之和\",{\"1\":{\"1680\":1}}],[\"训练损失之和\",{\"1\":{\"1680\":1}}],[\"训练函数\",{\"0\":{\"1680\":1}}],[\"训练时的输出\",{\"1\":{\"1678\":1}}],[\"训练优化中的问题\",{\"0\":{\"1658\":1}}],[\"灵长类动物的视觉系统接受了大量的感官输入\",{\"1\":{\"1678\":1}}],[\"灵活的\",{\"1\":{\"298\":1}}],[\"灵活的多种导入导出方式\",{\"1\":{\"46\":1}}],[\"死亡\",{\"1\":{\"1666\":1}}],[\"死循环指定的时间\",{\"1\":{\"1559\":1}}],[\"死循环2s\",{\"1\":{\"1181\":1}}],[\"神经元被更新成一直输出\",{\"1\":{\"1666\":1}}],[\"神经元死亡\",{\"1\":{\"1666\":1}}],[\"神经网络库中提供的自适应平均池化层\",{\"1\":{\"1663\":1}}],[\"神经网络库中提供的最大池化层\",{\"1\":{\"1663\":1}}],[\"池化窗口的移动步长\",{\"1\":{\"1663\":1}}],[\"池化窗口的大小\",{\"1\":{\"1663\":1}}],[\"池化层\",{\"0\":{\"1663\":1}}],[\"卷积核的膨胀率\",{\"1\":{\"1667\":1}}],[\"卷积核的大小\",{\"1\":{\"1667\":1}}],[\"卷积核大小为\",{\"1\":{\"1662\":1,\"1667\":1}}],[\"卷积核大小\",{\"1\":{\"1662\":1}}],[\"卷积层\",{\"0\":{\"1662\":1}}],[\"展开说明\",{\"1\":{\"1698\":1}}],[\"展平层\",{\"0\":{\"1661\":1}}],[\"展示相应的组件和视图\",{\"1\":{\"2026\":1}}],[\"展示文字注音或字符注释\",{\"1\":{\"698\":1}}],[\"展示给浏览器看的内容\",{\"1\":{\"659\":1}}],[\"激活后得到注意力权重\",{\"1\":{\"1678\":1}}],[\"激活后的输出张量\",{\"1\":{\"1666\":1}}],[\"激活后的张量\",{\"1\":{\"1666\":1}}],[\"激活函数\",{\"1\":{\"1666\":1}}],[\"激活函数之前训练深度学习模型相当棘手的原因之一\",{\"1\":{\"1658\":1}}],[\"激活层和两个\",{\"1\":{\"1661\":1}}],[\"激活账号\",{\"1\":{\"91\":1}}],[\"梯度消失或爆炸\",{\"1\":{\"1666\":1}}],[\"梯度消失\",{\"1\":{\"1658\":1}}],[\"鞍点是梯度消失的另一个原因\",{\"1\":{\"1658\":1}}],[\"鞍点\",{\"1\":{\"1658\":2}}],[\"剪裁\",{\"1\":{\"1656\":1}}],[\"剪贴板中的数据存储在clipboarddata对象中\",{\"1\":{\"1161\":1}}],[\"剪贴板操作包括剪切\",{\"1\":{\"1160\":1}}],[\"剪贴板操作看起来不起眼\",{\"1\":{\"1160\":1}}],[\"剪贴板事件基本介绍\",{\"0\":{\"1160\":1}}],[\"剪贴板事件\",{\"0\":{\"1159\":1}}],[\"批处理大小为\",{\"1\":{\"1655\":1}}],[\"批处理大小\",{\"1\":{\"1655\":1}}],[\"批量异步更新机制\",{\"1\":{\"1784\":1}}],[\"批量查询数据\",{\"1\":{\"203\":1}}],[\"批量更新数据\",{\"1\":{\"202\":1}}],[\"批量删除\",{\"1\":{\"201\":1}}],[\"批量插入\",{\"1\":{\"200\":1}}],[\"密文占用空间小\",{\"1\":{\"2101\":1}}],[\"密钥\",{\"1\":{\"1648\":2}}],[\"密码框\",{\"1\":{\"670\":1,\"756\":1}}],[\"密码\",{\"1\":{\"317\":1}}],[\"升级到websocket\",{\"1\":{\"1648\":1}}],[\"升级吧\",{\"1\":{\"1648\":1}}],[\"升序\",{\"1\":{\"210\":1}}],[\"维护ast节点层级的栈\",{\"1\":{\"1792\":1}}],[\"维护一个事件中心\",{\"1\":{\"1368\":1}}],[\"维持\",{\"1\":{\"1647\":2}}],[\"立联系\",{\"1\":{\"1902\":1}}],[\"立刻响应请求\",{\"1\":{\"1646\":1}}],[\"立即执行\",{\"1\":{\"2069\":1}}],[\"立即执行函数往往只会执行一次\",{\"1\":{\"948\":1}}],[\"立即执行函数\",{\"0\":{\"948\":1}}],[\"立即调用\",{\"1\":{\"1810\":1}}],[\"立即调用函数表达式\",{\"1\":{\"29\":1}}],[\"立即得到了很多开发者的响应\",{\"1\":{\"1776\":1}}],[\"立即重新发送请求到服务器\",{\"1\":{\"1646\":1}}],[\"立即把一个函数添加到微队列\",{\"1\":{\"1560\":1}}],[\"立即忙起来\",{\"1\":{\"1534\":1}}],[\"立即被调用\",{\"1\":{\"948\":1}}],[\"立即被\",{\"1\":{\"24\":1}}],[\"询问有没有新的数据\",{\"1\":{\"1649\":2}}],[\"询问有没有新消息\",{\"1\":{\"1645\":1}}],[\"询问用户是否允许显示通知\",{\"1\":{\"1105\":1}}],[\"抢购页面的库存\",{\"1\":{\"1644\":1}}],[\"抢座\",{\"1\":{\"1644\":1}}],[\"抢占式更灵活\",{\"1\":{\"408\":1}}],[\"股票等金融产品实时报价股\",{\"1\":{\"1644\":1}}],[\"弹出调用栈栈顶的\",{\"1\":{\"1791\":1}}],[\"弹幕\",{\"1\":{\"1644\":1}}],[\"弹性项\",{\"1\":{\"591\":1}}],[\"弹性元素的垂直居中\",{\"0\":{\"604\":1}}],[\"弹性元素的水平居中\",{\"0\":{\"599\":1}}],[\"弹性元素没有弹性\",{\"1\":{\"592\":1}}],[\"弹性元素可以同时是弹性容器\",{\"1\":{\"591\":1}}],[\"弹性元素伸缩\",{\"0\":{\"591\":1}}],[\"弹性元素方向纵向排列\",{\"1\":{\"586\":1}}],[\"弹性元素纵向排列\",{\"1\":{\"586\":1}}],[\"弹性元素在容器中反向水平排列\",{\"1\":{\"586\":1}}],[\"弹性元素在容器中水平排列\",{\"1\":{\"586\":1}}],[\"弹性容器的子元素就是弹性元素\",{\"1\":{\"591\":1}}],[\"弹性容器\",{\"0\":{\"585\":1}}],[\"弹性盒\",{\"0\":{\"584\":1}}],[\"携带中文参数\",{\"1\":{\"1639\":1}}],[\"啥\",{\"1\":{\"1635\":1}}],[\"试试请求\",{\"1\":{\"1635\":1}}],[\"试一试\",{\"0\":{\"1630\":1}}],[\"麻烦你取请求新的地址\",{\"1\":{\"1635\":2}}],[\"态度\",{\"1\":{\"1635\":1}}],[\"愿望\",{\"1\":{\"1632\":1}}],[\"熟悉关键信息\",{\"0\":{\"1631\":1}}],[\"寻找之前创建的代理对象\",{\"1\":{\"1923\":1}}],[\"寻找第一个非抽象类型的父级\",{\"1\":{\"1800\":1}}],[\"寻找其他句子中与填空词\",{\"1\":{\"1702\":1}}],[\"寻找与填空词搭配的\",{\"1\":{\"1702\":1}}],[\"寻找\",{\"1\":{\"1626\":1}}],[\"寻找的过程如下\",{\"1\":{\"1535\":1}}],[\"飞机\",{\"1\":{\"1621\":1}}],[\"飞鸟实例实现\",{\"0\":{\"727\":1}}],[\"火箭\",{\"1\":{\"1621\":1}}],[\"火车\",{\"1\":{\"1621\":1}}],[\"火星引力\",{\"1\":{\"1057\":1}}],[\"汽车\",{\"1\":{\"1621\":1}}],[\"毒药\",{\"1\":{\"1621\":1}}],[\"封\",{\"1\":{\"1705\":1}}],[\"封条\",{\"1\":{\"1621\":1}}],[\"封装\",{\"1\":{\"1913\":1,\"1991\":1}}],[\"封装reactive函数\",{\"1\":{\"1909\":1}}],[\"封装命令式的代码\",{\"1\":{\"1872\":1}}],[\"封装为了一个\",{\"1\":{\"1655\":1}}],[\"封装动画的时候一般只需要使用v\",{\"1\":{\"1441\":1}}],[\"封装的过渡与动画\",{\"0\":{\"1441\":1}}],[\"封装一个\",{\"1\":{\"1936\":2}}],[\"封装一个函数\",{\"1\":{\"883\":1,\"2002\":1}}],[\"封装一些数据以及操作数据的函数\",{\"1\":{\"1025\":1}}],[\"封装了很多功能\",{\"1\":{\"298\":1}}],[\"封装到一个文件夹\",{\"1\":{\"57\":1}}],[\"冰盒\",{\"1\":{\"1621\":1}}],[\"怎么保证可乐始终处于低温\",{\"1\":{\"1621\":1}}],[\"玻璃瓶\",{\"1\":{\"1621\":1}}],[\"塑料瓶\",{\"1\":{\"1621\":1}}],[\"古人靠着非凡的智慧来解决这一问题\",{\"1\":{\"1614\":1}}],[\"详见\",{\"1\":{\"1607\":1}}],[\"详细内容会比较复杂\",{\"1\":{\"1648\":1}}],[\"详细参见对象的相关章节\",{\"1\":{\"847\":1}}],[\"详细文档\",{\"1\":{\"614\":1,\"619\":1,\"636\":1}}],[\"详细说明\",{\"1\":{\"377\":1}}],[\"框中时获取响应内容显示在\",{\"1\":{\"1577\":1}}],[\"框中\",{\"1\":{\"1576\":1,\"1577\":1}}],[\"框架设计的核心要素\",{\"0\":{\"1875\":1}}],[\"框架封装了一些\",{\"1\":{\"305\":1,\"307\":1}}],[\"框架的\",{\"1\":{\"222\":1}}],[\"框架来开发的\",{\"1\":{\"222\":1}}],[\"框架就是基于\",{\"1\":{\"222\":1}}],[\"框架\",{\"0\":{\"220\":1,\"222\":1},\"1\":{\"1025\":1},\"2\":{\"1473\":1,\"1521\":1}}],[\"活跃度\",{\"1\":{\"1572\":1}}],[\"风格\",{\"1\":{\"1572\":1}}],[\"风格都能够覆盖大部分的应用场景\",{\"1\":{\"1485\":1}}],[\"❌\",{\"1\":{\"1572\":6}}],[\"✅\",{\"1\":{\"1572\":14}}],[\"爬虫爬不到\",{\"1\":{\"1572\":1}}],[\"爬取股票\",{\"1\":{\"408\":1}}],[\"识别响应码\",{\"1\":{\"1570\":1}}],[\"识别出应该被对应的\",{\"1\":{\"138\":1}}],[\"受事件循环的影响\",{\"1\":{\"1560\":1}}],[\"受到了\",{\"1\":{\"565\":1}}],[\"袁老师很帅\",{\"1\":{\"1559\":1}}],[\"卡死\",{\"1\":{\"1558\":1}}],[\"阻塞\",{\"1\":{\"1558\":1}}],[\"阻止链接的默认跳转\",{\"1\":{\"1369\":1}}],[\"阻止默认事件\",{\"1\":{\"1369\":2,\"2050\":1}}],[\"阻止默认行为\",{\"0\":{\"1156\":1}}],[\"阻止事件冒泡\",{\"1\":{\"1219\":1,\"1369\":2}}],[\"阻止事件的默认行为\",{\"1\":{\"1219\":1}}],[\"阻止事件向上冒泡\",{\"1\":{\"1155\":1}}],[\"阻止冒泡\",{\"0\":{\"1155\":1}}],[\"阻止浏览器默认行为\",{\"1\":{\"765\":1}}],[\"阻止目标对象的默认行为\",{\"1\":{\"764\":1}}],[\"阻止背景重复平铺\",{\"1\":{\"629\":1}}],[\"持续的进行下去了\",{\"1\":{\"1556\":1}}],[\"何为异步\",{\"0\":{\"1558\":1}}],[\"何为线程\",{\"0\":{\"1554\":1}}],[\"何为进程\",{\"0\":{\"1553\":1}}],[\"何时使用\",{\"0\":{\"1449\":1}}],[\"见上节\",{\"1\":{\"1865\":1}}],[\"见上一节\",{\"1\":{\"1537\":1}}],[\"见\",{\"1\":{\"1539\":1}}],[\"细节判断\",{\"0\":{\"1701\":1},\"1\":{\"1684\":1}}],[\"细节\",{\"0\":{\"1538\":1,\"1612\":1,\"1613\":1}}],[\"亲\",{\"1\":{\"1537\":2}}],[\"干脆你把它缓存起来吧\",{\"1\":{\"1534\":1}}],[\"干杯\",{\"1\":{\"340\":1}}],[\"顾名思义是销毁的意思\",{\"1\":{\"2061\":1}}],[\"顾名思义\",{\"1\":{\"1533\":1,\"1965\":1}}],[\"握手过程中\",{\"1\":{\"2091\":1}}],[\"握手过程\",{\"1\":{\"2091\":1}}],[\"握手完毕后会建立持久性的连接通道\",{\"1\":{\"1649\":1}}],[\"握手完成\",{\"1\":{\"1648\":1}}],[\"握手阶段\",{\"1\":{\"1647\":1}}],[\"握手时\",{\"1\":{\"1530\":1}}],[\"握手\",{\"0\":{\"1648\":1},\"1\":{\"1530\":1,\"1648\":1}}],[\"率先下载\",{\"1\":{\"1526\":1}}],[\"光栅化的结果\",{\"1\":{\"1526\":1}}],[\"光栅化\",{\"1\":{\"1526\":2}}],[\"光看上面的效果\",{\"1\":{\"1123\":1}}],[\"奔驰\",{\"1\":{\"1508\":1}}],[\"祖组件中\",{\"1\":{\"1508\":1}}],[\"祖先在后\",{\"1\":{\"578\":1}}],[\"祖先的元素的层级再高也不会盖住后代元素\",{\"1\":{\"575\":1}}],[\"祖先\",{\"1\":{\"518\":1}}],[\"宏显式暴露\",{\"1\":{\"1499\":1}}],[\"众所周知\",{\"1\":{\"1499\":1,\"1997\":1}}],[\"情况略有不同\",{\"1\":{\"2034\":1}}],[\"情况五\",{\"1\":{\"1497\":1}}],[\"情况四\",{\"1\":{\"1497\":1}}],[\"情况三\",{\"1\":{\"1497\":1}}],[\"情况二\",{\"1\":{\"1497\":1}}],[\"情况一\",{\"1\":{\"1497\":1}}],[\"情人节聚餐\",{\"1\":{\"176\":1}}],[\"坑\",{\"1\":{\"1497\":1}}],[\"拦截器的时候\",{\"1\":{\"1903\":1}}],[\"拦截函数实现\",{\"1\":{\"1905\":1}}],[\"拦截函数内递归地调用\",{\"1\":{\"1914\":1}}],[\"拦截函数内区分这两次更新\",{\"1\":{\"1910\":1}}],[\"拦截函数内能够区分操作的类型\",{\"1\":{\"1906\":1}}],[\"拦截函数内\",{\"1\":{\"1902\":1}}],[\"拦截函数内调用\",{\"1\":{\"1889\":2}}],[\"拦截函数\",{\"1\":{\"1888\":1,\"1905\":1,\"1906\":1,\"1907\":1}}],[\"拦截设置操作\",{\"1\":{\"1886\":1,\"1889\":2,\"1906\":1,\"1917\":1,\"1918\":1}}],[\"拦截设置属性值或添加新属性\",{\"1\":{\"1491\":1}}],[\"拦截读取操作\",{\"1\":{\"1886\":1,\"1889\":2,\"1913\":1,\"1914\":1,\"1921\":1,\"1923\":1,\"1993\":1}}],[\"拦截读取属性值\",{\"1\":{\"1491\":1}}],[\"拦截响应式数据的存取行为\",{\"1\":{\"1886\":1}}],[\"拦截删除属性\",{\"1\":{\"1491\":1}}],[\"拦截对象中任意属性的变化\",{\"1\":{\"1491\":1}}],[\"烫头\",{\"1\":{\"1488\":1}}],[\"喝酒\",{\"1\":{\"1488\":1}}],[\"幸运的是\",{\"1\":{\"1486\":1}}],[\"均来自initrender\",{\"1\":{\"1865\":1}}],[\"均前每后做分母\",{\"1\":{\"1745\":1}}],[\"均适用直除法\",{\"1\":{\"1721\":1}}],[\"均要求服务器是\",{\"1\":{\"1615\":1}}],[\"均要配置在\",{\"1\":{\"1486\":1}}],[\"均为预检请求\",{\"1\":{\"1608\":1}}],[\"均不需要\",{\"1\":{\"1492\":1}}],[\"均是\",{\"1\":{\"1423\":2}}],[\"均是高阶函数\",{\"1\":{\"1033\":1}}],[\"拉动增长＝\",{\"1\":{\"1750\":1}}],[\"拉动增长和增量贡献率\",{\"0\":{\"1750\":1}}],[\"拉开序幕的\",{\"0\":{\"1486\":1}}],[\"拉伸比例\",{\"1\":{\"592\":1}}],[\"拥抱\",{\"0\":{\"1479\":1}}],[\"拥有强大的开发者社区\",{\"1\":{\"217\":1}}],[\"耗时\",{\"1\":{\"1475\":1}}],[\"海贼王\",{\"1\":{\"1475\":1}}],[\"海拔准确度\",{\"1\":{\"1101\":1}}],[\"美观\",{\"1\":{\"1468\":1}}],[\"美元符\",{\"1\":{\"902\":1}}],[\"权衡\",{\"0\":{\"1871\":1}}],[\"权重衰减因子\",{\"1\":{\"1659\":1}}],[\"权重计算\",{\"1\":{\"522\":1}}],[\"权限控制的具体规则\",{\"1\":{\"1467\":1}}],[\"劲舞团\",{\"1\":{\"1446\":1}}],[\"穿越火线\",{\"1\":{\"1446\":1}}],[\"离开组件\",{\"1\":{\"2071\":1}}],[\"离开该组件时被调用\",{\"1\":{\"1467\":1}}],[\"离开守卫\",{\"1\":{\"1467\":1}}],[\"离开的终点\",{\"1\":{\"1441\":1}}],[\"离开的起点\",{\"1\":{\"1441\":1}}],[\"离开过程中\",{\"1\":{\"1441\":1}}],[\"离开环境\",{\"1\":{\"1029\":1,\"1031\":2}}],[\"订阅消息\",{\"1\":{\"1439\":1}}],[\"订阅消息等\",{\"1\":{\"1410\":1}}],[\"订阅的\",{\"1\":{\"1439\":1}}],[\"决定是否回退到\",{\"1\":{\"2027\":1}}],[\"决定是否要保留\",{\"1\":{\"1530\":1}}],[\"决定观察一位还是两位\",{\"1\":{\"1711\":1}}],[\"决定填空词的\",{\"1\":{\"1702\":1}}],[\"决定\",{\"1\":{\"1433\":1}}],[\"合理触发响应\",{\"0\":{\"1908\":1}}],[\"合成线程会把\",{\"1\":{\"1526\":1}}],[\"合成线程会将块信息交给\",{\"1\":{\"1526\":1}}],[\"合成线程拿到每个层\",{\"1\":{\"1526\":1}}],[\"合成线程首先对每个图层进行分块\",{\"1\":{\"1526\":1}}],[\"合\",{\"1\":{\"1432\":1}}],[\"合并后最终导出的就是这个\",{\"1\":{\"2055\":1}}],[\"合并之后的配置项\",{\"1\":{\"1825\":1}}],[\"合并配置项\",{\"1\":{\"1799\":3,\"1802\":1}}],[\"合并为\",{\"1\":{\"1446\":1,\"1494\":1}}],[\"合并路径\",{\"1\":{\"711\":1}}],[\"合并\",{\"0\":{\"1280\":1},\"1\":{\"11\":1,\"122\":1,\"1299\":1,\"1431\":1}}],[\"合并分支时\",{\"1\":{\"11\":1}}],[\"└─shared\",{\"1\":{\"1782\":1}}],[\"└─components\",{\"1\":{\"1782\":1}}],[\"└─\",{\"1\":{\"1427\":1}}],[\"└──\",{\"1\":{\"212\":4,\"332\":6,\"1427\":3,\"2040\":3}}],[\"汇总所有组件\",{\"1\":{\"1427\":1}}],[\"汇总对象中所有的属性形成一个数组\",{\"1\":{\"1396\":1}}],[\"├─platforms\",{\"1\":{\"1782\":1}}],[\"├─sfc\",{\"1\":{\"1782\":1}}],[\"├─server\",{\"1\":{\"1782\":1}}],[\"├─src\",{\"1\":{\"1782\":1}}],[\"├─global\",{\"1\":{\"1782\":1}}],[\"├─instance\",{\"1\":{\"1782\":1}}],[\"├─vdom\",{\"1\":{\"1782\":1}}],[\"├─observe\",{\"1\":{\"1782\":1}}],[\"├─core\",{\"1\":{\"1782\":1}}],[\"├─complier\",{\"1\":{\"1782\":1}}],[\"├─\",{\"1\":{\"1427\":9}}],[\"├──\",{\"1\":{\"212\":5,\"332\":10,\"1427\":2,\"2040\":35}}],[\"脚手架配置代理\",{\"0\":{\"1443\":1}}],[\"脚手架\",{\"0\":{\"1425\":1}}],[\"脚手架支持\",{\"1\":{\"1419\":1}}],[\"脚本被执行\",{\"1\":{\"2094\":1}}],[\"脚本调用\",{\"1\":{\"2048\":1}}],[\"脚本文件的变通写法\",{\"1\":{\"957\":1}}],[\"脚本文件放置到node\",{\"1\":{\"66\":1}}],[\"脚本\",{\"1\":{\"155\":1,\"328\":1,\"345\":1,\"1595\":1}}],[\"脚本简化\",{\"1\":{\"148\":1}}],[\"脚本配置\",{\"1\":{\"64\":1}}],[\"靠近\",{\"1\":{\"1743\":1}}],[\"靠近某分数可使用\",{\"1\":{\"1729\":1}}],[\"靠mapmutations生成\",{\"1\":{\"1453\":1}}],[\"靠mapactions生成\",{\"1\":{\"1453\":3}}],[\"靠vue\",{\"1\":{\"1416\":1}}],[\"靠new\",{\"1\":{\"1416\":1}}],[\"靠的是\",{\"1\":{\"345\":1}}],[\"逸夫\",{\"1\":{\"1415\":1}}],[\"驼峰\",{\"1\":{\"1408\":1}}],[\"驼峰命名\",{\"1\":{\"685\":1}}],[\"危险\",{\"1\":{\"1400\":1}}],[\"学校为大集合\",{\"1\":{\"1733\":1}}],[\"学号等唯一值\",{\"1\":{\"1394\":1}}],[\"学习率\",{\"1\":{\"1659\":1}}],[\"学习\",{\"1\":{\"1357\":1,\"1488\":1}}],[\"学习资料\",{\"1\":{\"1155\":1}}],[\"学习阶段用的较多\",{\"1\":{\"292\":1}}],[\"学习成本低\",{\"1\":{\"175\":1}}],[\"学习好模块化\",{\"1\":{\"25\":1}}],[\"虚拟\",{\"0\":{\"1788\":1,\"1866\":1,\"1873\":1},\"1\":{\"1394\":1,\"1873\":1,\"1874\":2,\"1877\":2,\"1879\":1}}],[\"虚拟dom转真实dom\",{\"0\":{\"483\":1}}],[\"温兆伦\",{\"1\":{\"1393\":1}}],[\"掉\",{\"1\":{\"1389\":1}}],[\"侦听器回调会在父组件更新\",{\"1\":{\"1498\":1}}],[\"侦听的不同配置项\",{\"0\":{\"1378\":1}}],[\"侦听\",{\"0\":{\"1377\":1}}],[\"底层会监测你对props的修改\",{\"1\":{\"1429\":1}}],[\"底层借助了objcet\",{\"1\":{\"1373\":1}}],[\"底部\",{\"1\":{\"669\":1}}],[\"底部对齐\",{\"1\":{\"625\":1}}],[\"阶段为什么使用两次\",{\"1\":{\"2035\":1}}],[\"阶段在合成线程中\",{\"1\":{\"1529\":1}}],[\"阶段\",{\"1\":{\"1368\":1,\"1526\":1,\"1529\":1}}],[\"阶段调用gentext生成如下代码\",{\"1\":{\"1352\":1}}],[\"吃饭\",{\"1\":{\"1357\":1}}],[\"爱好\",{\"1\":{\"1357\":1}}],[\"勾选\",{\"1\":{\"1357\":2}}],[\"失活和激活的路由组件分别有哪些\",{\"1\":{\"2029\":1}}],[\"失活和激活的路由组件\",{\"1\":{\"2029\":1}}],[\"失败回调\",{\"1\":{\"2029\":1}}],[\"失败\",{\"1\":{\"1592\":2}}],[\"失去焦点再收集数据\",{\"1\":{\"1356\":1}}],[\"失效\",{\"1\":{\"386\":1}}],[\"失效的时间\",{\"1\":{\"345\":1}}],[\"延迟加载\",{\"0\":{\"1329\":1}}],[\"延时队列执行\",{\"1\":{\"1181\":1}}],[\"延时队列\",{\"1\":{\"1181\":1,\"1560\":1}}],[\"延时的系统通知\",{\"1\":{\"1105\":1}}],[\"精确求和或求差\",{\"1\":{\"1711\":1}}],[\"精神\",{\"1\":{\"1705\":1}}],[\"精简样式表\",{\"1\":{\"1324\":1}}],[\"精细的模块划分带来了更多的\",{\"1\":{\"116\":1}}],[\"满足其中任意一种即可\",{\"1\":{\"1316\":1}}],[\"满分为1\",{\"1\":{\"269\":1}}],[\"纯\",{\"0\":{\"1316\":1}}],[\"纯文本模式\",{\"1\":{\"921\":1}}],[\"花括号里的是复用的样式代码\",{\"1\":{\"1292\":1}}],[\"括起来\",{\"1\":{\"1276\":1}}],[\"括号不仅可以对元素进行分组\",{\"1\":{\"911\":1}}],[\"括号有两个功能\",{\"1\":{\"909\":1}}],[\"括号相关元字符\",{\"0\":{\"909\":1}}],[\"括号\",{\"1\":{\"902\":1,\"920\":2}}],[\"造成代码的冗余\",{\"1\":{\"1299\":1}}],[\"造成编译不出来\",{\"1\":{\"1250\":1}}],[\"造成内存的浪费\",{\"1\":{\"865\":1}}],[\"孙子\",{\"1\":{\"1243\":1}}],[\"儿子\",{\"1\":{\"1243\":2}}],[\"频繁的\",{\"1\":{\"1239\":1}}],[\"频繁的请求\",{\"1\":{\"508\":1}}],[\"了解\",{\"1\":{\"1486\":1}}],[\"了的路由组件\",{\"1\":{\"1457\":1}}],[\"了\",{\"1\":{\"1232\":1,\"1309\":1,\"1368\":1,\"1487\":1,\"1526\":1,\"1666\":1,\"1779\":1,\"1897\":1,\"1928\":1}}],[\"破坏性\",{\"1\":{\"1232\":5}}],[\"破坏了结构和行为分离的理念\",{\"1\":{\"1143\":1}}],[\"停止更新\",{\"1\":{\"1572\":1}}],[\"停止编译\",{\"1\":{\"1253\":1}}],[\"停止当前动画\",{\"1\":{\"1225\":4}}],[\"停止动画实际上有\",{\"1\":{\"1225\":1}}],[\"停止动画\",{\"0\":{\"1225\":1},\"1\":{\"1225\":1}}],[\"停止服务\",{\"1\":{\"275\":1}}],[\"往下移动\",{\"1\":{\"1224\":1}}],[\"往往需要根据其子节点的情况来决定如何对当前节点进行转换\",{\"1\":{\"1977\":1}}],[\"往往被看作是函数的返回值\",{\"1\":{\"1033\":1}}],[\"往往是自动转换类型或者默默地失败\",{\"1\":{\"980\":1}}],[\"往往不会造成什么问题\",{\"1\":{\"22\":1}}],[\"淡出的效果\",{\"1\":{\"1223\":1}}],[\"淡入的效果\",{\"1\":{\"1223\":1}}],[\"替代比较\",{\"1\":{\"1737\":1}}],[\"替代\",{\"1\":{\"1216\":1}}],[\"替换之前的\",{\"1\":{\"2002\":1}}],[\"替换为\",{\"1\":{\"1340\":1}}],[\"替换节点\",{\"0\":{\"1210\":1}}],[\"替换成\",{\"1\":{\"916\":1}}],[\"替换的原理在于插入的时候同时进行删除\",{\"1\":{\"854\":1}}],[\"替换内容\",{\"0\":{\"702\":1}}],[\"替换变量\",{\"1\":{\"389\":1}}],[\"替换\",{\"0\":{\"70\":1},\"1\":{\"854\":1,\"1976\":1}}],[\"克隆重复使用的节点\",{\"1\":{\"1789\":1}}],[\"克隆表示复制一个指定的元素\",{\"1\":{\"1213\":1}}],[\"克隆节点的语法如下\",{\"1\":{\"1123\":1}}],[\"克隆节点分为浅克隆和深克隆\",{\"1\":{\"1123\":1}}],[\"克隆节点\",{\"0\":{\"1123\":1},\"1\":{\"1788\":1}}],[\"感觉和\",{\"1\":{\"1208\":1}}],[\"百分互换\",{\"0\":{\"1717\":1}}],[\"百分比值\",{\"1\":{\"633\":1}}],[\"百分比\",{\"1\":{\"534\":1}}],[\"百度\",{\"1\":{\"1205\":2}}],[\"丰富的插件\",{\"1\":{\"1195\":1}}],[\"呢\",{\"1\":{\"1194\":1,\"1209\":1,\"1299\":1}}],[\"迭代器协议\",{\"1\":{\"1931\":2}}],[\"迭代器方法\",{\"0\":{\"1931\":1}}],[\"迭代器对象产生的值为集合中的元素值\",{\"1\":{\"1926\":1}}],[\"迭代器对象\",{\"1\":{\"1186\":1}}],[\"迭代过程中会产生由\",{\"1\":{\"1926\":1}}],[\"迭代过程中会产生键值对的\",{\"1\":{\"1926\":2}}],[\"迭代过程中为集合中的每一\",{\"1\":{\"1926\":1}}],[\"迭代遍历数组\",{\"1\":{\"1915\":1}}],[\"迭代次数\",{\"1\":{\"1680\":1}}],[\"迭代\",{\"1\":{\"1655\":1}}],[\"迭代方法\",{\"0\":{\"945\":1}}],[\"谢谢配合\",{\"1\":{\"1162\":1}}],[\"屏蔽剪贴板\",{\"1\":{\"1162\":1}}],[\"屏幕宽度\",{\"1\":{\"1098\":1}}],[\"屏幕高度\",{\"1\":{\"1098\":1}}],[\"屏幕逻辑的垂直\",{\"1\":{\"1098\":1}}],[\"屏幕逻辑的水平\",{\"1\":{\"1098\":1}}],[\"屏幕实际的垂直\",{\"1\":{\"1098\":1}}],[\"屏幕实际的水平\",{\"1\":{\"1098\":1}}],[\"屏幕的位深\",{\"1\":{\"1098\":1}}],[\"屏幕的像素宽度减去系统部件宽度之后的值\",{\"1\":{\"1098\":1}}],[\"屏幕的像素宽度\",{\"1\":{\"1098\":1}}],[\"屏幕的像素高度减去系统部件高度之后的值\",{\"1\":{\"1098\":1}}],[\"屏幕的像素高度\",{\"1\":{\"1098\":1}}],[\"屏幕阅读器\",{\"1\":{\"651\":1}}],[\"屏幕是由一个个发光的小点构成\",{\"1\":{\"646\":1}}],[\"屏幕\",{\"0\":{\"385\":1},\"1\":{\"534\":1}}],[\"屏幕大\",{\"1\":{\"200\":2}}],[\"粘贴时前面会添加\",{\"1\":{\"1161\":1}}],[\"粘滞定位和相对定位的特点基本一致\",{\"1\":{\"572\":1}}],[\"粘滞定位\",{\"0\":{\"572\":1}}],[\"快照和持久化\",{\"1\":{\"2016\":1}}],[\"快\",{\"1\":{\"1737\":1}}],[\"快说\",{\"1\":{\"1537\":1}}],[\"快捷键分别对应的是ctrl+x\",{\"1\":{\"1160\":1}}],[\"快速\",{\"0\":{\"1967\":1},\"1\":{\"1968\":1}}],[\"快速排序\",{\"0\":{\"415\":1}}],[\"快速体验模块化\",{\"1\":{\"236\":1}}],[\"讲过了事件冒泡的缺点\",{\"1\":{\"1158\":1}}],[\"辅助按键\",{\"1\":{\"1154\":1}}],[\"辅轴多轴线排列\",{\"0\":{\"590\":1}}],[\"辅轴排列\",{\"0\":{\"589\":1}}],[\"客户区\",{\"1\":{\"1153\":1}}],[\"客户端如何验证证书的合法性\",{\"1\":{\"2091\":1}}],[\"客户端如何更新缓存呢\",{\"1\":{\"1533\":1}}],[\"客户端使用会话密钥解密消息\",{\"1\":{\"2091\":2}}],[\"客户端使用用户名跟密码请求登录\",{\"1\":{\"360\":1}}],[\"客户端验证证书是否合法\",{\"1\":{\"2091\":2}}],[\"客户端请求服务器\",{\"1\":{\"2091\":2}}],[\"客户端立即又发起一次请求\",{\"1\":{\"1649\":2}}],[\"客户端若要发起\",{\"1\":{\"1649\":1}}],[\"客户端长时间收不到响应会导致超时\",{\"1\":{\"1646\":1}}],[\"客户端只需要设置一个计时器不断发送请求即可\",{\"1\":{\"1645\":1}}],[\"客户端每隔一小段时间就向服务器请求一次\",{\"1\":{\"1645\":1}}],[\"客户端每次向服务端请求资源的时候需要带着服务端签发的\",{\"1\":{\"360\":1}}],[\"客户端要请求新的文件时\",{\"1\":{\"1543\":1}}],[\"客户端就无法知晓证书是否是伪造的\",{\"1\":{\"2091\":1}}],[\"客户端就继续\",{\"1\":{\"1537\":1}}],[\"客户端就会重新缓存新的内容\",{\"1\":{\"1537\":1}}],[\"客户端会到缓存中去寻找是否有缓存的资源\",{\"1\":{\"1535\":1}}],[\"客户端缓存的原理如下\",{\"1\":{\"1533\":1}}],[\"客户端缓存\",{\"1\":{\"1533\":1}}],[\"客户端脚本实现许多以前只能在服务器端才能完成的工作\",{\"1\":{\"768\":1}}],[\"客户端才能访问服务端上受保护的资源\",{\"1\":{\"369\":1}}],[\"客户端收到\",{\"1\":{\"360\":1}}],[\"客户端的一串加密字符串\",{\"1\":{\"358\":1}}],[\"客户端关闭\",{\"1\":{\"356\":1}}],[\"客户端浏览器就会把\",{\"1\":{\"767\":1}}],[\"客户端浏览器将会保存该\",{\"1\":{\"767\":1}}],[\"客户端浏览器再次访问时只需要从该session中查找该客户的状态就可以了\",{\"1\":{\"352\":1}}],[\"客户端浏览器访问服务器的时候\",{\"1\":{\"352\":1}}],[\"客户端浏览器\",{\"1\":{\"352\":1}}],[\"客户端字符串标识\",{\"1\":{\"269\":1}}],[\"客户端\",{\"1\":{\"266\":1,\"1324\":1,\"1645\":9,\"1646\":5}}],[\"客户端软件\",{\"0\":{\"222\":1}}],[\"客户端渲染\",{\"1\":{\"219\":1}}],[\"客户端应用等诸多领域\",{\"1\":{\"217\":1}}],[\"兼容\",{\"1\":{\"1705\":1,\"2016\":1}}],[\"兼容的事件对象\",{\"1\":{\"1151\":1}}],[\"兼容性和\",{\"1\":{\"1468\":1}}],[\"兼容性较好\",{\"1\":{\"1468\":1}}],[\"兼容性\",{\"1\":{\"116\":1,\"1195\":1,\"1647\":1}}],[\"兼容性问题\",{\"1\":{\"116\":1}}],[\"级的事件能够解决这个问题\",{\"1\":{\"1214\":1}}],[\"级的事件处理方法最为常用\",{\"1\":{\"1214\":1}}],[\"级别\",{\"1\":{\"1156\":1}}],[\"级别的不同写法上也是有所区别的\",{\"1\":{\"1142\":1}}],[\"级标准中定义了\",{\"1\":{\"1148\":1}}],[\"级来添加的事件\",{\"1\":{\"1146\":2}}],[\"级事件\",{\"1\":{\"1214\":2}}],[\"级事件处理程序中\",{\"1\":{\"1156\":2}}],[\"级事件处理程序通过addeventlistener\",{\"1\":{\"1145\":1}}],[\"级事件监听器\",{\"0\":{\"1144\":1,\"1145\":1}}],[\"团队不推荐继续使用\",{\"1\":{\"1313\":1}}],[\"团队提出的另一种事件流叫做事件捕获\",{\"1\":{\"1140\":1}}],[\"团队协作\",{\"1\":{\"116\":1}}],[\"想表达式\",{\"1\":{\"1728\":1}}],[\"想分享给你的朋友王富贵\",{\"1\":{\"1621\":1}}],[\"想问问服务器\",{\"1\":{\"1537\":1}}],[\"想给\",{\"1\":{\"1437\":1}}],[\"想让\",{\"1\":{\"1350\":1}}],[\"想要向\",{\"1\":{\"2099\":1}}],[\"想要实现\",{\"1\":{\"1151\":1}}],[\"想要为这个问题寻求解决之道\",{\"1\":{\"24\":1}}],[\"想象在一张纸上的一组同心圆\",{\"1\":{\"1138\":1}}],[\"广州\",{\"1\":{\"1124\":1}}],[\"采取一种折中的方式\",{\"1\":{\"1124\":1}}],[\"采用十字交叉法\",{\"1\":{\"1742\":1}}],[\"采用的\",{\"1\":{\"1485\":1}}],[\"采用的组合式\",{\"1\":{\"1485\":1}}],[\"采用的是异步的\",{\"1\":{\"224\":1}}],[\"采用两种不同的方式来阻止浏览器默认行为\",{\"1\":{\"1156\":1}}],[\"采用\",{\"1\":{\"241\":1,\"1247\":1,\"1968\":1,\"2016\":1}}],[\"浅只读\",{\"1\":{\"1505\":1}}],[\"浅响应和深响应\",{\"0\":{\"1911\":1}}],[\"浅响应式\",{\"1\":{\"1504\":1}}],[\"浅响应\",{\"1\":{\"1430\":1}}],[\"浅克隆表示只复制当前指定的元素\",{\"1\":{\"1213\":1}}],[\"浅克隆\",{\"1\":{\"1123\":1}}],[\"浅拷贝\",{\"0\":{\"469\":1},\"1\":{\"469\":1,\"1201\":1}}],[\"旧值\",{\"1\":{\"1987\":1}}],[\"旧子节点是文本子节点\",{\"1\":{\"1951\":1}}],[\"旧子节点是一组子节点\",{\"1\":{\"1951\":1}}],[\"旧子节点要么是文本子节点\",{\"1\":{\"1951\":1}}],[\"旧子节点的类型有三种可能\",{\"1\":{\"1951\":1}}],[\"旧\",{\"1\":{\"1944\":1}}],[\"旧后\",{\"1\":{\"1789\":1}}],[\"旧前\",{\"1\":{\"1789\":1}}],[\"旧版的\",{\"1\":{\"1579\":1}}],[\"旧虚拟\",{\"1\":{\"1394\":3}}],[\"旧的路由记录\",{\"1\":{\"2069\":1}}],[\"旧的路由守卫的复用问题\",{\"1\":{\"2069\":1}}],[\"旧的路由存在\",{\"1\":{\"2069\":1}}],[\"旧的一组子节点的长度\",{\"1\":{\"1961\":1}}],[\"旧的选项型\",{\"1\":{\"1485\":1}}],[\"旧的\",{\"1\":{\"1302\":1}}],[\"旧的图像层级比较高\",{\"1\":{\"743\":1}}],[\"旧节点对应的dom元素\",{\"1\":{\"1789\":1}}],[\"旧节点\",{\"1\":{\"1119\":1,\"1122\":1}}],[\"😖\",{\"1\":{\"1874\":1}}],[\"💡\",{\"1\":{\"1112\":1}}],[\"👌\",{\"1\":{\"91\":1,\"301\":1}}],[\"测量结果的精确度就越高\",{\"1\":{\"1102\":1}}],[\"测试用例\",{\"0\":{\"1768\":1}}],[\"测试代码\",{\"1\":{\"1181\":1}}],[\"测试代码是否可用\",{\"1\":{\"92\":1}}],[\"测试为\",{\"1\":{\"1181\":1}}],[\"测试函数\",{\"1\":{\"501\":1}}],[\"测试框架\",{\"1\":{\"223\":1}}],[\"测试\",{\"0\":{\"274\":1,\"422\":1,\"425\":1,\"429\":1,\"433\":1,\"439\":1},\"1\":{\"149\":2,\"466\":1,\"967\":1,\"1071\":1,\"1072\":1,\"1161\":4}}],[\"测试等等等等\",{\"1\":{\"116\":1}}],[\"测试环境\",{\"1\":{\"71\":1}}],[\"测试没有问题后\",{\"1\":{\"10\":1}}],[\"米\",{\"1\":{\"1102\":1}}],[\"度\",{\"1\":{\"1101\":1}}],[\"角度格式\",{\"1\":{\"1101\":1}}],[\"纬度\",{\"1\":{\"1101\":1}}],[\"诸如此类的应用\",{\"1\":{\"1100\":1}}],[\"诸多缺点\",{\"1\":{\"768\":1}}],[\"跑步\",{\"1\":{\"1100\":1}}],[\"抛开<a>标签\",{\"1\":{\"1094\":1}}],[\"抛出异常\",{\"1\":{\"403\":1,\"2075\":1}}],[\"载入一个新的文档\",{\"1\":{\"1094\":1,\"2051\":1}}],[\"载荷就是存放有效信息的地方\",{\"1\":{\"366\":1}}],[\"涉及到的settimeout\",{\"1\":{\"1088\":1}}],[\"涉及setinterval\",{\"1\":{\"1088\":1}}],[\"课件\",{\"1\":{\"1155\":1}}],[\"课堂练习\",{\"1\":{\"1088\":1}}],[\"课程表\",{\"1\":{\"669\":1}}],[\"滚动条\",{\"1\":{\"1526\":1}}],[\"滚动事件\",{\"1\":{\"1153\":1}}],[\"滚动页面时在控制台会打印出当前滚动了的高度\",{\"1\":{\"1150\":1}}],[\"滚动页面时\",{\"1\":{\"1150\":1}}],[\"滚动位置\",{\"1\":{\"1087\":1}}],[\"滚动加载\",{\"0\":{\"479\":1},\"1\":{\"1036\":1}}],[\"窗口设置大小\",{\"1\":{\"1150\":1}}],[\"窗口位置移动\",{\"1\":{\"1088\":1}}],[\"窗口位置的属性也是有两组\",{\"1\":{\"1087\":1}}],[\"窗口位置\",{\"1\":{\"1087\":1}}],[\"窗口大小被重置了\",{\"1\":{\"1150\":1}}],[\"窗口大小调整\",{\"1\":{\"1088\":1}}],[\"窗口大小\",{\"1\":{\"1035\":1,\"1087\":1}}],[\"技术窃取\",{\"1\":{\"2095\":1}}],[\"技术另一个应用场景就是构建计算行走\",{\"1\":{\"1100\":1}}],[\"技术标准及实施指南\",{\"1\":{\"1084\":1}}],[\"技术领域最具权威和影响力的国际中立性技术标准机构\",{\"1\":{\"1084\":1}}],[\"技术厂商早已预见到\",{\"1\":{\"25\":1}}],[\"斗破苍穹\",{\"1\":{\"1057\":1}}],[\"辰东\",{\"1\":{\"1057\":1}}],[\"唐三\",{\"1\":{\"1057\":1}}],[\"天\",{\"1\":{\"1745\":1}}],[\"天蚕土豆\",{\"1\":{\"1057\":2}}],[\"天光云影共徘徊\",{\"1\":{\"247\":1}}],[\"浪费内存\",{\"1\":{\"1048\":1}}],[\"浪费了时间\",{\"1\":{\"37\":1}}],[\"遇到结束标签\",{\"1\":{\"1974\":1}}],[\"遇到字母\",{\"1\":{\"1974\":6}}],[\"遇到字符\",{\"1\":{\"1974\":5}}],[\"遇到闭合标签\",{\"1\":{\"1801\":1}}],[\"遇到非\",{\"1\":{\"1569\":1}}],[\"遇到\",{\"1\":{\"1526\":1}}],[\"遇到这种情况\",{\"1\":{\"1040\":1}}],[\"遇布尔值\",{\"1\":{\"806\":2}}],[\"待执行\",{\"1\":{\"1917\":1,\"1993\":1}}],[\"待副作用函数执行完毕后将其从栈中弹出\",{\"1\":{\"1891\":1}}],[\"待优化的参数\",{\"1\":{\"1659\":1}}],[\"待到函数被真正需要求值的时候\",{\"1\":{\"1039\":1}}],[\"待写入的数据\",{\"1\":{\"244\":1}}],[\"刚才我们了解了什么是\",{\"1\":{\"1195\":1}}],[\"刚才传入的参数在函数形成的闭包中被保存起来\",{\"1\":{\"1039\":1}}],[\"刚好就删除多少\",{\"1\":{\"854\":1}}],[\"崩溃等问题\",{\"1\":{\"1038\":1}}],[\"间接实现对原始值的拦截\",{\"1\":{\"1936\":1}}],[\"间接作用是使得网页达到最佳的显示效果\",{\"1\":{\"649\":1}}],[\"间隔增长率\",{\"1\":{\"1753\":2}}],[\"间隔增长率变为倍数提问\",{\"1\":{\"1746\":1}}],[\"间隔倍数=间隔增长率+100\",{\"1\":{\"1746\":1}}],[\"间隔基期\",{\"1\":{\"1726\":1}}],[\"间隔时间以毫秒来计算\",{\"1\":{\"1088\":1}}],[\"间隔时间\",{\"1\":{\"1088\":2}}],[\"间隔一段时间执行一次\",{\"1\":{\"1036\":1}}],[\"间歇调用\",{\"1\":{\"1088\":1}}],[\"邮箱验证输入检测\",{\"1\":{\"1035\":1}}],[\"司机就会多等待几秒再关门\",{\"1\":{\"1035\":1}}],[\"司机需要等最后一个人进入才能关门\",{\"1\":{\"1035\":1}}],[\"坐公交\",{\"1\":{\"1035\":1}}],[\"坐标\",{\"1\":{\"736\":2,\"745\":2,\"1087\":4}}],[\"射击游戏的\",{\"1\":{\"1034\":1}}],[\"凡是满足以下任一条件的函数\",{\"1\":{\"1033\":1}}],[\"垃圾收集器会按照固定的时间间隔周期性的执行\",{\"1\":{\"1031\":1}}],[\"垃圾收集器会定期\",{\"1\":{\"1028\":1}}],[\"垃圾回收器完成内存清理工作\",{\"1\":{\"1031\":1}}],[\"垃圾回收器完成内存清除工作\",{\"1\":{\"1029\":1}}],[\"垃圾回收器\",{\"1\":{\"1031\":1}}],[\"垃圾回收器在运行的时候会给存储在内存中的所有变量都加上标记\",{\"1\":{\"1029\":1}}],[\"垃圾回收器也不会对其进行回收\",{\"1\":{\"1023\":1}}],[\"垃圾回收器会自动回收没有引用的变量\",{\"1\":{\"1023\":1}}],[\"垃圾回收\",{\"1\":{\"1020\":1}}],[\"轻\",{\"1\":{\"1484\":1}}],[\"轻量快速的热重载\",{\"1\":{\"1483\":1}}],[\"轻量\",{\"1\":{\"1195\":2}}],[\"轻量和高效\",{\"1\":{\"224\":1}}],[\"轻则影响系统性能\",{\"1\":{\"1027\":1}}],[\"鸡翅\",{\"1\":{\"1023\":3}}],[\"鸡蛋属于生产依赖\",{\"1\":{\"72\":1}}],[\"鸡蛋\",{\"1\":{\"72\":1}}],[\"周冬雨\",{\"1\":{\"1393\":1}}],[\"周期性\",{\"1\":{\"1028\":1}}],[\"周围环境中的信息可以在函数中使用\",{\"1\":{\"1023\":1}}],[\"周杰伦\",{\"1\":{\"340\":1,\"1393\":1}}],[\"声名提前问题\",{\"1\":{\"1021\":1}}],[\"声明\",{\"0\":{\"2044\":1},\"1\":{\"2075\":1}}],[\"声明式\",{\"0\":{\"1872\":1},\"1\":{\"1872\":3}}],[\"声明一个\",{\"1\":{\"1499\":1}}],[\"声明一个变量\",{\"1\":{\"283\":1}}],[\"声明接收params参数\",{\"1\":{\"1461\":1}}],[\"声明周期\",{\"1\":{\"1409\":1,\"1798\":1}}],[\"声明方式\",{\"1\":{\"1299\":1}}],[\"声明的\",{\"1\":{\"1493\":1}}],[\"声明的代码如果不被\",{\"1\":{\"1298\":1}}],[\"声明的变量\",{\"1\":{\"1015\":1,\"1086\":1}}],[\"声明的变量会挂载到\",{\"1\":{\"987\":1}}],[\"声明的变量不能使用\",{\"1\":{\"958\":1}}],[\"声明的变量是不存在块级作用域的\",{\"1\":{\"948\":1}}],[\"声明的变量都会成为全局变量\",{\"1\":{\"938\":1}}],[\"声明的变量没有\",{\"1\":{\"786\":1}}],[\"声明的变量可以重复声明不会报错\",{\"1\":{\"786\":1}}],[\"声明了一个混合宏后\",{\"1\":{\"1293\":1}}],[\"声明了一个变量并将一个引用类型的值赋值给这个变量\",{\"1\":{\"1031\":1}}],[\"声明混合宏\",{\"0\":{\"1292\":1},\"1\":{\"1293\":1}}],[\"声明中的属性名称\",{\"1\":{\"1262\":1}}],[\"声明中间件函数\",{\"0\":{\"313\":1}}],[\"声明提前的出现就是下面提到的执行上下文引起的\",{\"1\":{\"1012\":1}}],[\"声明提前现象\",{\"0\":{\"1012\":1}}],[\"声明形参就相当于在函数内部声明了对应的变量\",{\"1\":{\"931\":1}}],[\"声明时直接赋值\",{\"1\":{\"843\":1}}],[\"声明时可以直接将匿名函数传递给\",{\"1\":{\"313\":1}}],[\"声明变量\",{\"0\":{\"779\":1,\"781\":1},\"1\":{\"777\":1,\"779\":2,\"948\":1,\"1327\":1}}],[\"声明文档类型\",{\"1\":{\"657\":1}}],[\"声明文档结构\",{\"1\":{\"200\":1}}],[\"声明是一个名值对结构\",{\"1\":{\"514\":1}}],[\"声明块由一个一个的声明组成\",{\"1\":{\"514\":1}}],[\"声明块\",{\"0\":{\"526\":1},\"1\":{\"514\":2}}],[\"声明加密的算法\",{\"1\":{\"365\":1}}],[\"声明类型\",{\"1\":{\"365\":1}}],[\"声明函数的方式\",{\"0\":{\"927\":1}}],[\"声明函数属性\",{\"1\":{\"836\":1}}],[\"声明函数\",{\"1\":{\"236\":1}}],[\"声明表达式\",{\"1\":{\"49\":2}}],[\"联系物流公司的朋友\",{\"1\":{\"1621\":1}}],[\"联系私人侦探\",{\"1\":{\"1621\":1}}],[\"联系\",{\"1\":{\"1020\":1}}],[\"隐式修改数组的长度\",{\"1\":{\"1993\":1}}],[\"隐式原型的指向\",{\"1\":{\"1063\":1}}],[\"隐式原型和原型出现的根本原因在于\",{\"1\":{\"1010\":1}}],[\"隐式原型链\",{\"1\":{\"1009\":1}}],[\"隐式原型属性\",{\"1\":{\"1007\":1}}],[\"隐藏\",{\"1\":{\"1132\":1,\"1389\":1,\"1457\":1}}],[\"隐性转换\",{\"1\":{\"801\":1}}],[\"隐性转换和显性转换\",{\"1\":{\"801\":1}}],[\"释放内存\",{\"1\":{\"1002\":1}}],[\"释放小内存空间\",{\"1\":{\"1002\":1}}],[\"临时的\",{\"1\":{\"1000\":1}}],[\"临时切换镜像源\",{\"1\":{\"67\":1}}],[\"东东\",{\"1\":{\"998\":1}}],[\"稍微改动一下\",{\"1\":{\"995\":1}}],[\"配套使用表明执行时机\",{\"1\":{\"1784\":1}}],[\"配合预定义变量\",{\"1\":{\"1875\":1}}],[\"配合\",{\"1\":{\"1401\":1,\"2035\":1}}],[\"配合keydown使用\",{\"1\":{\"1370\":1}}],[\"配合keyup使用\",{\"1\":{\"1370\":1}}],[\"配合type=\",{\"1\":{\"1356\":1}}],[\"配合resize事件\",{\"1\":{\"1150\":1}}],[\"配合着事件对象里面的属性\",{\"1\":{\"1149\":1}}],[\"配合数组对象的\",{\"1\":{\"995\":1}}],[\"配置参数\",{\"1\":{\"2027\":1}}],[\"配置有效\",{\"1\":{\"1497\":1}}],[\"配置失效\",{\"1\":{\"1497\":1}}],[\"配置功能一致\",{\"1\":{\"1496\":1,\"1497\":1}}],[\"配置混用\",{\"1\":{\"1486\":1}}],[\"配置路由\",{\"1\":{\"1461\":1}}],[\"配置路由规则\",{\"1\":{\"1458\":1}}],[\"配置mutations\",{\"1\":{\"1451\":1}}],[\"配置actions\",{\"1\":{\"1451\":1}}],[\"配置略微繁琐\",{\"1\":{\"1445\":1}}],[\"配置具体代理规则\",{\"1\":{\"1445\":1}}],[\"配置简单\",{\"1\":{\"1444\":1}}],[\"配置全局混入\",{\"1\":{\"1432\":1}}],[\"配置项指定组件在开发者工具中呈现的名字\",{\"1\":{\"1419\":1}}],[\"配置项\",{\"0\":{\"1429\":1},\"1\":{\"1379\":1,\"1456\":1}}],[\"配置deep\",{\"1\":{\"1379\":1}}],[\"配置了input的\",{\"1\":{\"1357\":1}}],[\"配置的变量值会先生效\",{\"1\":{\"1309\":1}}],[\"配置模块非常方便\",{\"1\":{\"1307\":1}}],[\"配置对象的主要内容如下所示\",{\"1\":{\"1953\":1}}],[\"配置对象中常用的\",{\"0\":{\"1407\":1}}],[\"配置对象\",{\"1\":{\"368\":1,\"1406\":1}}],[\"配置步骤如下\",{\"1\":{\"177\":1}}],[\"配置中声明\",{\"1\":{\"1493\":1}}],[\"配置中\",{\"1\":{\"1423\":1}}],[\"配置中的\",{\"1\":{\"158\":1}}],[\"配置中设置\",{\"1\":{\"142\":1}}],[\"配置之后\",{\"1\":{\"129\":1}}],[\"配置信息\",{\"1\":{\"128\":1}}],[\"配置文件也要进行相应的配置\",{\"1\":{\"148\":1}}],[\"配置文件\",{\"1\":{\"124\":1,\"212\":2}}],[\"配置淘宝镜像\",{\"0\":{\"88\":1}}],[\"配置完成之后\",{\"1\":{\"77\":1}}],[\"配置命令别名\",{\"0\":{\"77\":1}}],[\"配置环境变量各不相同\",{\"1\":{\"71\":1}}],[\"配置镜像源\",{\"0\":{\"67\":1}}],[\"配置不兼容amd的模块\",{\"1\":{\"45\":1}}],[\"配置\",{\"0\":{\"3\":1,\"1462\":1},\"1\":{\"3\":2,\"42\":1,\"69\":1,\"77\":1,\"87\":1,\"128\":1,\"148\":1,\"149\":1,\"1307\":1,\"1385\":2,\"1431\":1,\"1480\":1,\"1486\":2,\"2028\":1}}],[\"毫无疑问\",{\"1\":{\"1903\":1}}],[\"毫不夸张地说\",{\"1\":{\"990\":1}}],[\"毫秒时又带来了偏差\",{\"1\":{\"1560\":1}}],[\"毫秒的最少时间\",{\"1\":{\"1560\":1}}],[\"毫秒的数字参数\",{\"1\":{\"875\":1}}],[\"毫秒为\",{\"1\":{\"1088\":1}}],[\"毫秒除以\",{\"1\":{\"874\":1}}],[\"典型用法是\",{\"1\":{\"980\":2}}],[\"像如下示例\",{\"1\":{\"1788\":1}}],[\"像\",{\"1\":{\"1224\":1,\"1499\":1}}],[\"像在\",{\"1\":{\"980\":1}}],[\"像素的动画\",{\"1\":{\"1224\":1}}],[\"像素矩阵\",{\"1\":{\"737\":1}}],[\"像素数据\",{\"0\":{\"736\":1}}],[\"像素操作\",{\"0\":{\"734\":1}}],[\"像素和高度为\",{\"1\":{\"703\":1}}],[\"像素和物理像素的比是\",{\"1\":{\"649\":2}}],[\"像素和物理像素的比值\",{\"1\":{\"649\":2}}],[\"像素值\",{\"1\":{\"650\":1}}],[\"像素表示的设备宽度\",{\"1\":{\"649\":1}}],[\"像素越小屏幕会越清晰\",{\"1\":{\"649\":1}}],[\"像素比\",{\"0\":{\"649\":1}}],[\"像素最终由几个物理像素显示由浏览器决定\",{\"1\":{\"646\":1}}],[\"像素转换为物理像素然后再进行呈现\",{\"1\":{\"646\":1}}],[\"像素指的是编写网页时我们所用的像素\",{\"1\":{\"646\":1}}],[\"像素块越小的屏幕显示的效果越清晰\",{\"1\":{\"534\":1}}],[\"像素\",{\"0\":{\"646\":1},\"1\":{\"534\":1,\"646\":2,\"649\":4,\"703\":1,\"748\":2,\"1224\":3}}],[\"觉得这样做还不够\",{\"1\":{\"980\":1}}],[\"诞生于\",{\"1\":{\"1247\":1}}],[\"诞生时\",{\"1\":{\"980\":1}}],[\"诞生了\",{\"1\":{\"353\":1}}],[\"短轮询是一种\",{\"1\":{\"1645\":1}}],[\"短轮询\",{\"0\":{\"1645\":1},\"1\":{\"1649\":1}}],[\"短横线命名\",{\"1\":{\"1370\":1}}],[\"短路特性\",{\"1\":{\"977\":1}}],[\"短属性名\",{\"1\":{\"924\":1}}],[\"短属性名大都不是有效的\",{\"1\":{\"924\":1}}],[\"创造性\",{\"1\":{\"1705\":1}}],[\"创新\",{\"1\":{\"1705\":1}}],[\"创设\",{\"1\":{\"958\":1}}],[\"创建监听对象\",{\"1\":{\"2053\":1}}],[\"创建导航对象\",{\"1\":{\"2053\":1}}],[\"创建了一个状态对象\",{\"1\":{\"2058\":1}}],[\"创建了一个守卫函数\",{\"1\":{\"2032\":1}}],[\"创建了一个响应式的对象\",{\"1\":{\"1937\":1}}],[\"创建store对象\",{\"1\":{\"2013\":1}}],[\"创建school组件\",{\"1\":{\"1415\":1}}],[\"创建渲染上下文\",{\"1\":{\"2001\":1}}],[\"创建渲染上下文对象\",{\"1\":{\"1956\":1}}],[\"创建渲染器\",{\"1\":{\"1998\":1}}],[\"创建app的方法\",{\"1\":{\"1998\":1}}],[\"创建app\",{\"1\":{\"1997\":1,\"1998\":1}}],[\"创建代理对象时指定的拦截函数\",{\"1\":{\"1903\":1}}],[\"创建子组件\",{\"1\":{\"1862\":1}}],[\"创建子线程\",{\"1\":{\"408\":1}}],[\"创建render\",{\"1\":{\"1862\":1}}],[\"创建router实例对象\",{\"1\":{\"1456\":1}}],[\"创建user\",{\"1\":{\"1860\":1}}],[\"创建完成\",{\"1\":{\"1834\":1}}],[\"创建构造器\",{\"1\":{\"1825\":1}}],[\"创建时会执行函数\",{\"1\":{\"1806\":1}}],[\"创建时间\",{\"1\":{\"260\":1,\"368\":1}}],[\"创建<br>ast节点\",{\"1\":{\"1792\":1}}],[\"创建注释类型的ast节点\",{\"1\":{\"1792\":1}}],[\"创建注释\",{\"1\":{\"1792\":1}}],[\"创建注释节点\",{\"1\":{\"1789\":1,\"1791\":1}}],[\"创建元素类型\",{\"1\":{\"1791\":1}}],[\"创建元素子节点\",{\"1\":{\"1789\":1}}],[\"创建元素节点的子节点\",{\"1\":{\"1789\":1}}],[\"创建元素节点\",{\"1\":{\"1120\":1,\"1789\":3}}],[\"创建元素节点对象\",{\"0\":{\"1116\":1}}],[\"创建节点\",{\"1\":{\"1789\":1}}],[\"创建节点逻辑的函数\",{\"1\":{\"1038\":1}}],[\"创建自定义数据集\",{\"1\":{\"1655\":1}}],[\"创建工程\",{\"1\":{\"1483\":1}}],[\"创建并暴露store\",{\"1\":{\"1450\":1,\"1451\":1,\"1452\":1}}],[\"创建并切换分支\",{\"1\":{\"10\":1}}],[\"创建vue实例对象\",{\"1\":{\"1427\":1}}],[\"创建vm\",{\"1\":{\"1416\":1,\"1450\":1}}],[\"创建组件的简写方式\",{\"0\":{\"1421\":1}}],[\"创建组件\",{\"0\":{\"1415\":1}}],[\"创建两个文件模块\",{\"1\":{\"1319\":1}}],[\"创建属性节点\",{\"1\":{\"1124\":1}}],[\"创建于\",{\"1\":{\"1084\":1}}],[\"创建2个人\",{\"1\":{\"1047\":1}}],[\"创建规定数量的节点\",{\"1\":{\"1038\":1}}],[\"创建执行上下文\",{\"1\":{\"1020\":1}}],[\"创建变量对象\",{\"1\":{\"1015\":1}}],[\"创建阶段\",{\"1\":{\"1014\":1,\"1015\":1}}],[\"创建局部变量对象等\",{\"1\":{\"1013\":1}}],[\"创建的只读代理\",{\"1\":{\"1509\":1}}],[\"创建的响应式代理\",{\"1\":{\"1509\":1}}],[\"创建的函数都会作为\",{\"1\":{\"937\":1}}],[\"创建的变量都会作为\",{\"1\":{\"937\":1}}],[\"创建正则表达式对象\",{\"0\":{\"899\":1}}],[\"创建弱映射使用new运算符以及weakmap\",{\"1\":{\"872\":1}}],[\"创建弱集合使用new运算符和weakset\",{\"1\":{\"865\":1}}],[\"创建映射\",{\"0\":{\"868\":1}}],[\"创建数组\",{\"0\":{\"839\":1}}],[\"创建好对象以后\",{\"1\":{\"827\":1}}],[\"创建对象\",{\"0\":{\"827\":1,\"1044\":1},\"1\":{\"1576\":1}}],[\"创建动画\",{\"1\":{\"701\":1}}],[\"创建一些非常好的效果\",{\"1\":{\"641\":1}}],[\"创建一个状态对象\",{\"1\":{\"2058\":1}}],[\"创建一个舍去base的url的字符串\",{\"1\":{\"2057\":1}}],[\"创建一个深度响应式的变量\",{\"1\":{\"2044\":1}}],[\"创建一个立即\",{\"1\":{\"1954\":1}}],[\"创建一个响应式的数据对象\",{\"1\":{\"1937\":1}}],[\"创建一个watcher实例\",{\"1\":{\"1806\":1}}],[\"创建一个注释类型的vnode节点\",{\"1\":{\"1806\":1}}],[\"创建一个自定义的\",{\"1\":{\"1507\":1}}],[\"创建一个包含响应式数据的引用对象\",{\"1\":{\"1487\":1}}],[\"创建一个包含复杂对象的变量时\",{\"1\":{\"982\":1}}],[\"创建一个监视的实例对象\",{\"1\":{\"1396\":1}}],[\"创建一个文本节点\",{\"1\":{\"1112\":1}}],[\"创建一个新的请求\",{\"1\":{\"1582\":1}}],[\"创建一个新的\",{\"1\":{\"1112\":1}}],[\"创建一个空的简单\",{\"1\":{\"1073\":1}}],[\"创建一个空目录\",{\"1\":{\"64\":1}}],[\"创建一个\",{\"1\":{\"650\":1,\"828\":1,\"1502\":1,\"1825\":2,\"1896\":1,\"1978\":1}}],[\"创建一个列表\",{\"1\":{\"390\":1}}],[\"创建一个写入流对象\",{\"1\":{\"263\":1}}],[\"创建堆叠上下文的元素的背景和边框\",{\"1\":{\"578\":1}}],[\"创建堆叠上下文的元素\",{\"0\":{\"577\":1}}],[\"创建闭包\",{\"1\":{\"487\":1}}],[\"创建方式基本与线程相同\",{\"1\":{\"408\":1}}],[\"创建异常\",{\"1\":{\"403\":1}}],[\"创建应用实例对象\",{\"1\":{\"1484\":1}}],[\"创建应用\",{\"0\":{\"332\":1}}],[\"创建应用对象\",{\"1\":{\"301\":1,\"304\":1,\"305\":1,\"329\":1,\"1573\":1}}],[\"创建不带视图引擎的项目\",{\"1\":{\"331\":1}}],[\"创建路由器的时候\",{\"1\":{\"1468\":1}}],[\"创建路由器对象\",{\"1\":{\"321\":1}}],[\"创建路由\",{\"1\":{\"329\":1}}],[\"创建路由规则\",{\"1\":{\"301\":1,\"1573\":1}}],[\"创建独立的\",{\"1\":{\"321\":1}}],[\"创建服务对象\",{\"1\":{\"273\":1,\"282\":1,\"283\":1,\"284\":2,\"287\":2,\"316\":1}}],[\"创建新的路径并返回\",{\"1\":{\"2028\":1}}],[\"创建新的代理对象\",{\"1\":{\"1923\":1}}],[\"创建新的文件名\",{\"1\":{\"263\":1}}],[\"创建新的分支\",{\"1\":{\"10\":1}}],[\"创建成功\",{\"1\":{\"257\":1}}],[\"创建读取流对象\",{\"1\":{\"252\":1,\"263\":1}}],[\"创建模型对象\",{\"1\":{\"200\":1,\"212\":1}}],[\"创建文本节点\",{\"1\":{\"1789\":1}}],[\"创建文本节点对象\",{\"0\":{\"1117\":1}}],[\"创建文件\",{\"1\":{\"1450\":1}}],[\"创建文件夹\",{\"0\":{\"257\":1},\"1\":{\"91\":1,\"256\":1}}],[\"创建文档模型对象\",{\"1\":{\"191\":1}}],[\"创建文档结构对象\",{\"1\":{\"191\":1}}],[\"创建集合\",{\"0\":{\"860\":1},\"1\":{\"180\":1,\"191\":1}}],[\"创建\",{\"0\":{\"272\":1,\"739\":1,\"1481\":1,\"1482\":1,\"1483\":1,\"2011\":1,\"2042\":1},\"1\":{\"177\":1,\"236\":2,\"256\":1,\"272\":1,\"273\":1,\"301\":1,\"304\":2,\"340\":1,\"355\":1,\"368\":1,\"564\":1,\"1105\":1,\"1415\":1,\"1482\":1,\"1575\":1,\"1806\":1,\"1825\":1,\"1841\":1,\"1842\":1,\"1974\":2,\"1978\":2,\"1998\":1,\"2000\":1}}],[\"创建与发布\",{\"0\":{\"91\":1}}],[\"创建项目结构\",{\"0\":{\"34\":1,\"40\":1}}],[\"禁止客户端\",{\"1\":{\"2095\":1}}],[\"禁止追踪\",{\"1\":{\"1925\":1}}],[\"禁止转发某些成员\",{\"1\":{\"1311\":1}}],[\"禁止八进制表示法\",{\"1\":{\"958\":1}}],[\"禁用所有\",{\"1\":{\"348\":1}}],[\"静默失败\",{\"1\":{\"958\":1}}],[\"静态根节点必须满足如下条件\",{\"1\":{\"1795\":1}}],[\"静态节点标志\",{\"1\":{\"1788\":1}}],[\"静态属性\",{\"1\":{\"1784\":1}}],[\"静态插槽\",{\"1\":{\"1446\":1,\"1494\":1,\"1865\":1}}],[\"静态的\",{\"1\":{\"1020\":1}}],[\"静态方法创建数组\",{\"0\":{\"841\":1}}],[\"静态方法\",{\"0\":{\"875\":1},\"1\":{\"405\":1}}],[\"静态资源中间件响应静态资源\",{\"1\":{\"316\":1}}],[\"静态资源中间件的设置\",{\"1\":{\"316\":1}}],[\"静态资源中间件\",{\"0\":{\"316\":1}}],[\"静态资源目录\",{\"1\":{\"289\":1}}],[\"静态资源\",{\"1\":{\"288\":1,\"332\":1}}],[\"静态资源服务\",{\"0\":{\"288\":1}}],[\"静态页面的分支必须叫做\",{\"1\":{\"16\":1}}],[\"针对\",{\"1\":{\"2053\":1,\"2091\":1}}],[\"针对失败的后续处理称之为\",{\"1\":{\"1776\":1}}],[\"针对完成状态的后续处理称之为\",{\"1\":{\"1776\":1}}],[\"针对性\",{\"1\":{\"1686\":1}}],[\"针对一个段落的内容\",{\"1\":{\"1685\":1}}],[\"针对单个函数\",{\"1\":{\"957\":1}}],[\"针对整个脚本文件\",{\"1\":{\"957\":1}}],[\"针对webpack\",{\"1\":{\"133\":1}}],[\"掌握这些内容\",{\"1\":{\"956\":1}}],[\"掌握好包管理工具非常重要\",{\"1\":{\"58\":1}}],[\"体育实况更新\",{\"1\":{\"1644\":1}}],[\"体感变动最大的部分\",{\"1\":{\"1485\":1}}],[\"体现了\",{\"1\":{\"956\":1}}],[\"体验一下\",{\"1\":{\"338\":1}}],[\"消费已经扫描过的\",{\"1\":{\"1974\":1}}],[\"消费当前字符\",{\"1\":{\"1974\":8}}],[\"消费字符\",{\"1\":{\"1974\":2}}],[\"消息过滤\",{\"1\":{\"2095\":1}}],[\"消息码\",{\"1\":{\"1635\":1}}],[\"消息格式\",{\"1\":{\"1592\":1}}],[\"消息循环\",{\"1\":{\"1556\":1}}],[\"消息订阅与发布\",{\"0\":{\"1439\":1}}],[\"消息队列\",{\"1\":{\"1179\":1}}],[\"消息通知依然能够显示\",{\"1\":{\"1105\":2}}],[\"消息的代码了\",{\"1\":{\"158\":1}}],[\"消除代码运行的一些不安全之处\",{\"1\":{\"956\":1,\"959\":1}}],[\"消除\",{\"1\":{\"956\":1,\"959\":1}}],[\"懒加载\",{\"1\":{\"1984\":1,\"1986\":1}}],[\"懒散模式\",{\"1\":{\"956\":1}}],[\"懒惰模式\",{\"0\":{\"908\":1},\"1\":{\"908\":1}}],[\"稀松模式\",{\"1\":{\"956\":1}}],[\"马上换协议\",{\"1\":{\"1648\":1}}],[\"马冬梅\",{\"1\":{\"1393\":1}}],[\"马虎模式\",{\"1\":{\"956\":1}}],[\"马赛克\",{\"1\":{\"740\":1}}],[\"马赛克案例\",{\"0\":{\"740\":1}}],[\"面积\",{\"1\":{\"1728\":1}}],[\"面对复杂的问题\",{\"1\":{\"1622\":1}}],[\"面试题\",{\"0\":{\"978\":1,\"1021\":1,\"1649\":1,\"1779\":1},\"1\":{\"948\":1,\"1025\":1,\"1558\":1,\"1560\":2,\"2058\":1}}],[\"面向当前类\",{\"1\":{\"405\":1}}],[\"面向类的实例化对象\",{\"1\":{\"405\":1}}],[\"面向对象\",{\"1\":{\"402\":1}}],[\"链\",{\"1\":{\"2074\":1,\"2076\":1}}],[\"链条\",{\"1\":{\"1232\":2}}],[\"链式操作能够简化代码\",{\"1\":{\"1237\":1}}],[\"链式操作可以更加灵活的使用\",{\"1\":{\"1232\":1}}],[\"链式操作\",{\"1\":{\"1195\":1}}],[\"链式调用\",{\"0\":{\"947\":1}}],[\"链接等\",{\"1\":{\"2088\":1}}],[\"链接元素自动设置一个表示激活的\",{\"1\":{\"2032\":1}}],[\"链接一起就构成了jwt字符串\",{\"1\":{\"364\":1}}],[\"链接\",{\"1\":{\"295\":1}}],[\"链接设置\",{\"1\":{\"271\":1}}],[\"归并方法有两个\",{\"1\":{\"946\":1}}],[\"归并方法\",{\"0\":{\"946\":1}}],[\"归并排序\",{\"0\":{\"414\":1}}],[\"箭头函数不能作为构造函数\",{\"1\":{\"996\":1}}],[\"箭头函数的\",{\"0\":{\"996\":1},\"1\":{\"996\":2}}],[\"箭头函数的优点如下\",{\"1\":{\"942\":1}}],[\"箭头函数的优点\",{\"0\":{\"942\":1}}],[\"箭头函数的基本语法如下\",{\"1\":{\"941\":1}}],[\"箭头函数具体示例\",{\"1\":{\"941\":1}}],[\"箭头函数\",{\"0\":{\"941\":1}}],[\"逆差\",{\"1\":{\"1752\":1}}],[\"逆序删除等破坏顺序操作\",{\"1\":{\"1394\":2}}],[\"逆序添加\",{\"1\":{\"1394\":1}}],[\"逆序环视\",{\"1\":{\"921\":1}}],[\"逆时针\",{\"1\":{\"716\":1}}],[\"锚点\",{\"1\":{\"1969\":2}}],[\"锚点元素\",{\"1\":{\"1968\":1}}],[\"锚点的索引\",{\"1\":{\"1968\":1}}],[\"锚点链接\",{\"1\":{\"268\":1}}],[\"锚\",{\"1\":{\"921\":1}}],[\"尽可能保证\",{\"1\":{\"1715\":1}}],[\"尽管它不是最小值\",{\"1\":{\"1658\":1}}],[\"尽管这个值也是一个\",{\"1\":{\"1290\":1}}],[\"尽管\",{\"1\":{\"921\":1}}],[\"尽量相斥\",{\"1\":{\"1751\":1}}],[\"尽量不要与\",{\"1\":{\"1486\":1}}],[\"尽量不使用\",{\"1\":{\"1286\":1}}],[\"尽量选用\",{\"1\":{\"1236\":1}}],[\"尽量在\",{\"0\":{\"1235\":1}}],[\"尽量在前面加上\",{\"1\":{\"1234\":1}}],[\"尽量减少\",{\"1\":{\"350\":1}}],[\"尽量使用事件委托机制\",{\"0\":{\"1241\":1}}],[\"尽量使用\",{\"0\":{\"1236\":1},\"1\":{\"262\":1}}],[\"局限性\",{\"0\":{\"921\":1}}],[\"局部最小值\",{\"1\":{\"1658\":1}}],[\"局部混入时在组件实例化时调用vue\",{\"1\":{\"1431\":1}}],[\"局部混入\",{\"1\":{\"1431\":1}}],[\"局部注册\",{\"1\":{\"1416\":2,\"1423\":1}}],[\"局部指令\",{\"1\":{\"1406\":1}}],[\"局部过滤器\",{\"1\":{\"1397\":1}}],[\"局部变量只在函数的执行过程中存在\",{\"1\":{\"1028\":1}}],[\"局部变量\",{\"1\":{\"1002\":1,\"1015\":2}}],[\"局部作用域里面的变量称之为局部变量\",{\"1\":{\"786\":1}}],[\"局部作用域\",{\"0\":{\"786\":1}}],[\"局部刷新\",{\"1\":{\"219\":1}}],[\"局部删除\",{\"1\":{\"76\":1}}],[\"却需要好几个步骤才能实现\",{\"1\":{\"1124\":1}}],[\"却比较特殊\",{\"1\":{\"996\":1}}],[\"却是指向全局对象\",{\"1\":{\"995\":1}}],[\"却与捕获型分组编号无关\",{\"1\":{\"918\":1}}],[\"却可以这样做\",{\"1\":{\"868\":1}}],[\"记得加上先前进位的\",{\"1\":{\"1711\":1}}],[\"记为\",{\"1\":{\"916\":1}}],[\"记录最大索引值\",{\"1\":{\"1969\":1}}],[\"记录缓存时的有效期\",{\"0\":{\"1541\":1}}],[\"记录被保存在\",{\"1\":{\"1095\":1}}],[\"记录\",{\"1\":{\"1095\":1}}],[\"记录自由变量的参数对象地址\",{\"1\":{\"402\":1}}],[\"记录的所有目录中搜索\",{\"1\":{\"379\":1}}],[\"环比是与上一个相邻统计周期相比较\",{\"1\":{\"1725\":1}}],[\"环视虽然也用到括号\",{\"1\":{\"918\":1}}],[\"环视可分为正序环视和逆序环视\",{\"1\":{\"918\":1}}],[\"环视可以认为是虚拟加入到它所在位置的附加判断条件\",{\"1\":{\"918\":1}}],[\"环视强调的是它所在的位置\",{\"1\":{\"918\":1}}],[\"环视\",{\"0\":{\"918\":1},\"1\":{\"915\":1,\"918\":1,\"920\":1}}],[\"环境的版本\",{\"1\":{\"846\":1}}],[\"环境该文件夹是一个包\",{\"1\":{\"376\":1}}],[\"环境都可以使用\",{\"1\":{\"223\":1}}],[\"环境提供的一些附加\",{\"1\":{\"216\":1}}],[\"环境中的\",{\"1\":{\"262\":1}}],[\"环境中都可以使用\",{\"1\":{\"216\":1}}],[\"环境中读取本地文件的效率\",{\"1\":{\"37\":1}}],[\"环境写\",{\"1\":{\"216\":1}}],[\"环境\",{\"0\":{\"1450\":1},\"1\":{\"87\":1}}],[\"捕获分组和非捕获分组可以在一个正则表达式中同时出现\",{\"1\":{\"913\":1}}],[\"捕获分组捕获的文本\",{\"1\":{\"911\":1}}],[\"捕获组匹配的字符串\",{\"1\":{\"911\":1}}],[\"捕获\",{\"0\":{\"911\":1},\"1\":{\"1370\":1}}],[\"贪婪模式\",{\"0\":{\"907\":1}}],[\"写在退出阶段的回调函数中\",{\"1\":{\"1977\":1}}],[\"写在具体的组件内部\",{\"1\":{\"1467\":1}}],[\"写在具体的路由配置项里\",{\"1\":{\"1467\":1}}],[\"写没写这个\",{\"1\":{\"1519\":1}}],[\"写组件标签\",{\"0\":{\"1417\":1}}],[\"写进\",{\"1\":{\"1308\":1}}],[\"写为\",{\"1\":{\"1276\":1,\"1286\":1}}],[\"写出来的所以沿用了\",{\"1\":{\"1248\":1}}],[\"写出来的正则表达式如下\",{\"1\":{\"906\":1}}],[\"写法\",{\"1\":{\"1249\":1,\"1250\":1,\"1388\":1,\"1389\":1,\"1433\":1,\"1441\":1,\"1496\":1,\"1519\":2}}],[\"写法的差异\",{\"0\":{\"1248\":1}}],[\"写法稍微有些不同\",{\"1\":{\"934\":1}}],[\"写起来也简单\",{\"1\":{\"1214\":1}}],[\"写以毫秒表示的屏幕刷新时间间隔\",{\"1\":{\"1098\":1}}],[\"写用于呈现屏外位图的位数\",{\"1\":{\"1098\":1}}],[\"写\",{\"1\":{\"1001\":1,\"1365\":1,\"1366\":2,\"1448\":1,\"1449\":1}}],[\"写入像素数据\",{\"0\":{\"738\":1}}],[\"写入\",{\"1\":{\"404\":1}}],[\"写入文件\",{\"1\":{\"263\":1,\"264\":1}}],[\"写入文件的场景\",{\"0\":{\"248\":1}}],[\"写入频率较低的场景\",{\"1\":{\"247\":1}}],[\"写入数据到流\",{\"1\":{\"247\":1}}],[\"写入到当前文件夹下的\",{\"1\":{\"244\":1}}],[\"写入回调\",{\"1\":{\"244\":1}}],[\"写入成功\",{\"1\":{\"200\":1,\"244\":1}}],[\"汉字不属于\",{\"1\":{\"904\":1}}],[\"竖线|用来分隔选择项\",{\"1\":{\"914\":1}}],[\"竖线|在正则表达式中表示或\",{\"1\":{\"914\":1}}],[\"竖线\",{\"1\":{\"902\":1}}],[\"脱字符^表示在当前位置匹配一个没有列出的字符\",{\"1\":{\"903\":1}}],[\"脱字符\",{\"1\":{\"902\":1}}],[\"脱离文档流后默认由内容撑开宽度\",{\"1\":{\"564\":1}}],[\"脱离文档流\",{\"1\":{\"561\":1}}],[\"脱离文档流以后\",{\"1\":{\"541\":2}}],[\"忽略右侧其他选择项\",{\"1\":{\"914\":1}}],[\"忽略大小写\",{\"1\":{\"901\":1}}],[\"忽略的文件\",{\"1\":{\"15\":1}}],[\"蝙蝠侠的\",{\"1\":{\"895\":1}}],[\"混入的\",{\"1\":{\"2031\":1}}],[\"混入\",{\"0\":{\"1431\":1}}],[\"混合后浓度为\",{\"1\":{\"1742\":1}}],[\"混合带参数并有默认值\",{\"1\":{\"1335\":1}}],[\"混合带参数\",{\"1\":{\"1335\":1}}],[\"混合前的\",{\"1\":{\"1334\":1}}],[\"混合\",{\"0\":{\"1333\":1},\"1\":{\"1333\":1}}],[\"混合宏的使用\",{\"1\":{\"1299\":1}}],[\"混合宏的参数\",{\"0\":{\"1294\":1,\"1295\":1,\"1296\":1}}],[\"混合宏\",{\"0\":{\"1291\":1},\"1\":{\"1299\":1}}],[\"混合使用\",{\"1\":{\"402\":1}}],[\"混淆\",{\"1\":{\"895\":1}}],[\"雅虎和谷歌就在那时开始广泛地使用该格式\",{\"1\":{\"895\":1}}],[\"英语全称\",{\"1\":{\"1084\":1}}],[\"英语全称为\",{\"1\":{\"895\":1,\"1083\":1}}],[\"英文中不少单词都有重叠出现的字母\",{\"1\":{\"912\":1}}],[\"英文全称为\",{\"1\":{\"795\":1}}],[\"英文官网\",{\"1\":{\"623\":1}}],[\"英文\",{\"1\":{\"341\":1}}],[\"英文单词是\",{\"1\":{\"57\":1}}],[\"截取出来\",{\"1\":{\"1792\":1}}],[\"截取的长度\",{\"1\":{\"891\":1}}],[\"截取开始位置的索引\",{\"1\":{\"891\":1}}],[\"随之计算出的权重越大\",{\"1\":{\"1678\":1}}],[\"随后会被\",{\"1\":{\"2070\":1}}],[\"随后服务器可以在任何时候推送新消息给客户端\",{\"1\":{\"1649\":1}}],[\"随后使用建立的\",{\"1\":{\"1649\":1}}],[\"随后对渲染树中的每个节点计算位置和大小\",{\"1\":{\"1530\":1}}],[\"随后渲染到到页面\",{\"1\":{\"1394\":1}}],[\"随后替换掉页面中之前的真实\",{\"1\":{\"1394\":1}}],[\"随后\",{\"1\":{\"1394\":1}}],[\"随后释放其他键\",{\"1\":{\"1370\":1}}],[\"随后再通过vm\",{\"1\":{\"1360\":1}}],[\"随机梯度下降\",{\"1\":{\"1659\":1}}],[\"随机切割等\",{\"1\":{\"1656\":1}}],[\"随机值\",{\"1\":{\"883\":1}}],[\"随机数方法\",{\"0\":{\"883\":1}}],[\"随着用户的交互导致最终\",{\"1\":{\"1890\":1}}],[\"随着目标函数解的梯度接近或变为零\",{\"1\":{\"1658\":1}}],[\"随着浏览器的复杂度急剧提升\",{\"1\":{\"1181\":1,\"1560\":1}}],[\"随着时间的推移\",{\"1\":{\"835\":1}}],[\"随着\",{\"1\":{\"46\":1,\"219\":1}}],[\"舍入方法\",{\"0\":{\"882\":1}}],[\"国际协调时间\",{\"1\":{\"875\":1}}],[\"世界标准时间\",{\"1\":{\"875\":1}}],[\"世界缺少一座巴别塔\",{\"1\":{\"146\":1}}],[\"星号\",{\"1\":{\"902\":1}}],[\"星号方式\",{\"1\":{\"402\":1}}],[\"星期只能获取\",{\"1\":{\"877\":1}}],[\"星期\",{\"1\":{\"875\":1}}],[\"月与第\",{\"1\":{\"1725\":1}}],[\"月与去年第\",{\"1\":{\"1725\":1}}],[\"月的比较\",{\"1\":{\"1725\":2}}],[\"月关\",{\"1\":{\"1057\":1}}],[\"月\",{\"1\":{\"874\":1,\"875\":5,\"876\":1,\"877\":2,\"911\":1,\"1475\":1}}],[\"弱映射和普通映射一样\",{\"1\":{\"872\":1}}],[\"弱映射和弱集合很类似\",{\"1\":{\"872\":1}}],[\"弱映射\",{\"0\":{\"872\":1}}],[\"弱集合是对对象的弱引用\",{\"1\":{\"865\":1}}],[\"弱集合和普通集合还有一些细微的区别\",{\"1\":{\"865\":1}}],[\"弱集合\",{\"0\":{\"865\":1}}],[\"委员会为\",{\"1\":{\"869\":1}}],[\"映射关系\",{\"1\":{\"1455\":1}}],[\"映射转为数组\",{\"0\":{\"871\":1}}],[\"映射也是可以枚举的\",{\"1\":{\"870\":1}}],[\"映射的遍历\",{\"0\":{\"870\":1}}],[\"映射的早期实现\",{\"1\":{\"859\":1}}],[\"映射同样支持size属性\",{\"1\":{\"869\":1}}],[\"映射与\",{\"1\":{\"869\":1}}],[\"映射相关属性和方法\",{\"0\":{\"869\":1}}],[\"映射里面可以使用任意数据类型来作为键\",{\"1\":{\"868\":1}}],[\"映射中包含的全是这样的两个元素的二维数组\",{\"1\":{\"868\":1}}],[\"映射中\",{\"1\":{\"868\":1}}],[\"映射中添加新的元素\",{\"1\":{\"868\":1}}],[\"映射\",{\"0\":{\"866\":1},\"1\":{\"866\":1,\"868\":2}}],[\"降序就返回\",{\"1\":{\"855\":1,\"944\":1}}],[\"降低代码的重复\",{\"1\":{\"926\":1}}],[\"降低主服务器的复杂度等\",{\"1\":{\"218\":1}}],[\"降低了页面访问效率\",{\"1\":{\"116\":1}}],[\"章我们就会学习回调函数\",{\"1\":{\"846\":1}}],[\"章节\",{\"1\":{\"694\":1}}],[\"速算技巧\",{\"0\":{\"1709\":1}}],[\"速写方法\",{\"1\":{\"836\":1}}],[\"速写属性\",{\"1\":{\"836\":1}}],[\"速写属性与速写函数\",{\"0\":{\"836\":1}}],[\"速度缓慢效率低下\",{\"1\":{\"767\":1}}],[\"速度更快\",{\"1\":{\"174\":1}}],[\"速度超快\",{\"1\":{\"85\":1}}],[\"求值\",{\"1\":{\"1779\":1}}],[\"求单个倍数\",{\"1\":{\"1746\":1}}],[\"求单个平均数\",{\"1\":{\"1745\":1}}],[\"求两份盐水之比\",{\"1\":{\"1742\":1}}],[\"求量之比\",{\"0\":{\"1742\":1}}],[\"求得两集合的占比关系\",{\"1\":{\"1733\":1}}],[\"求\",{\"1\":{\"1728\":2,\"1729\":1}}],[\"求出现期比重后根据增长率选择大于还是小于其的选项\",{\"1\":{\"1732\":1}}],[\"求出\",{\"1\":{\"1727\":1}}],[\"求出隔年增长率\",{\"1\":{\"1726\":1}}],[\"求出最大的数字\",{\"1\":{\"419\":1}}],[\"求助\",{\"1\":{\"1487\":1}}],[\"求数组的偶数和\",{\"1\":{\"947\":1}}],[\"求平方函数\",{\"1\":{\"835\":1}}],[\"岁了\",{\"1\":{\"1352\":3,\"1486\":1,\"1793\":3}}],[\"岁\",{\"1\":{\"833\":6}}],[\"岁`\",{\"1\":{\"833\":3}}],[\"次数以及方式\",{\"1\":{\"1893\":1}}],[\"次\",{\"1\":{\"902\":3,\"906\":4,\"908\":4,\"910\":1,\"913\":2,\"1239\":2,\"1261\":1,\"1556\":1,\"1961\":1}}],[\"次或多次\",{\"1\":{\"902\":1}}],[\"次或\",{\"1\":{\"902\":1}}],[\"次幂\",{\"1\":{\"884\":2}}],[\"次调用函数时的情况\",{\"1\":{\"833\":1}}],[\"次方的数为无穷小\",{\"1\":{\"794\":1}}],[\"次方的数为无穷大\",{\"1\":{\"794\":1}}],[\"次方\",{\"1\":{\"395\":1}}],[\"肯定是调用了返回的\",{\"1\":{\"2042\":1}}],[\"肯定是开发依赖\",{\"1\":{\"71\":1}}],[\"肯定正序环视的记法为\",{\"1\":{\"918\":1}}],[\"肯定就是使用解构传过来的值\",{\"1\":{\"832\":1}}],[\"嵌套问题\",{\"1\":{\"1984\":1}}],[\"嵌套路由\",{\"0\":{\"1458\":1}}],[\"嵌套的深度\",{\"1\":{\"2031\":1}}],[\"嵌套的\",{\"0\":{\"1314\":1}}],[\"嵌套\",{\"0\":{\"1256\":1,\"1331\":1},\"1\":{\"1314\":1,\"1891\":1}}],[\"嵌套对象\",{\"0\":{\"831\":1}}],[\"嵌入一个\",{\"1\":{\"672\":1}}],[\"嵌入元素\",{\"0\":{\"671\":1}}],[\"书写了\",{\"1\":{\"1112\":1}}],[\"书写求立方根的箭头函数\",{\"1\":{\"941\":1}}],[\"书写的方式拥有一些变形\",{\"1\":{\"941\":1}}],[\"书写函数的时候可以给函数的形式参数一个默认值\",{\"1\":{\"934\":1}}],[\"书写为\",{\"1\":{\"830\":1}}],[\"书写简单\",{\"1\":{\"455\":1}}],[\"证明\",{\"1\":{\"1951\":1}}],[\"证明如下\",{\"1\":{\"828\":1,\"830\":1,\"865\":1,\"1086\":1}}],[\"证书\",{\"1\":{\"343\":1}}],[\"证书功能上是相同的\",{\"1\":{\"64\":1}}],[\"证书与\",{\"1\":{\"64\":1}}],[\"点钟方向起\",{\"1\":{\"1731\":1}}],[\"点明总述\",{\"1\":{\"1689\":1}}],[\"点号\",{\"1\":{\"902\":1,\"905\":1}}],[\"点的毫秒数\",{\"1\":{\"877\":2}}],[\"点到给定日期的毫秒数\",{\"1\":{\"875\":1}}],[\"点访问法\",{\"1\":{\"828\":2,\"831\":1}}],[\"点击浏览器的前进后退\",{\"1\":{\"2034\":2}}],[\"点击<a>标签之后里面的文本内容会变为true\",{\"1\":{\"1156\":1}}],[\"点击下面的超链接时\",{\"1\":{\"1156\":1}}],[\"点击鼠标\",{\"1\":{\"1153\":1}}],[\"点击按钮时获取响应内容显示在\",{\"1\":{\"1576\":1}}],[\"点击按钮会只会弹出后面的\",{\"1\":{\"1144\":1}}],[\"点击按钮以后弹出一个对话框\",{\"1\":{\"1137\":1}}],[\"点击按钮后\",{\"1\":{\"1559\":1}}],[\"点击按钮后里面的文本变为\",{\"1\":{\"1157\":3}}],[\"点击按钮后会刷新一下页面\",{\"1\":{\"1094\":1}}],[\"点击按钮后跳转到百度\",{\"1\":{\"1093\":1}}],[\"点击按钮后过\",{\"1\":{\"1088\":1}}],[\"点击超链接以后\",{\"1\":{\"1121\":1}}],[\"点击通知以后会触发事件\",{\"1\":{\"1105\":1}}],[\"点击原博客地址查看全文\",{\"1\":{\"648\":1}}],[\"点击\",{\"1\":{\"287\":1,\"295\":1,\"1158\":1,\"2032\":1}}],[\"③语句\",{\"1\":{\"821\":1}}],[\"④更新表达式\",{\"1\":{\"821\":1}}],[\"②\",{\"1\":{\"1394\":1}}],[\"②条件表达式\",{\"1\":{\"821\":1}}],[\"②③比较\",{\"1\":{\"410\":1}}],[\"①\",{\"1\":{\"1394\":1}}],[\"①初始化表达式\",{\"1\":{\"821\":1}}],[\"①②比较\",{\"1\":{\"410\":1}}],[\"逐个执行导航守卫\",{\"1\":{\"2076\":1}}],[\"逐个挂载即可\",{\"1\":{\"1951\":1}}],[\"逐个调用\",{\"1\":{\"1937\":1}}],[\"逐级获取object的下标结果\",{\"1\":{\"1769\":1}}],[\"逐级透传\",{\"1\":{\"1508\":1}}],[\"逐步造成了\",{\"1\":{\"1569\":1}}],[\"逐条执行\",{\"1\":{\"817\":1}}],[\"逐渐缩小增量\",{\"1\":{\"413\":1}}],[\"逐渐改变了\",{\"1\":{\"23\":1}}],[\"码中对应的编码相同\",{\"1\":{\"1154\":1}}],[\"码来进行的排序\",{\"1\":{\"944\":1}}],[\"码来进行比较的\",{\"1\":{\"812\":1}}],[\"码云\",{\"1\":{\"12\":1}}],[\"遵循下面的规则\",{\"1\":{\"806\":1}}],[\"递进关系\",{\"1\":{\"1693\":1}}],[\"递增和递减\",{\"0\":{\"806\":1}}],[\"递归响应式\",{\"1\":{\"1991\":1}}],[\"递归标记子节点\",{\"1\":{\"1795\":1}}],[\"递归\",{\"0\":{\"450\":1},\"1\":{\"418\":1}}],[\"递归地读取\",{\"1\":{\"1897\":2}}],[\"递归地调用时\",{\"1\":{\"1977\":1}}],[\"递归地调用\",{\"1\":{\"1878\":1,\"1879\":1,\"1977\":1}}],[\"递归地\",{\"1\":{\"415\":1}}],[\"递归出口\",{\"1\":{\"414\":1}}],[\"递归调用\",{\"1\":{\"414\":2,\"1182\":1,\"1187\":1}}],[\"递归函数\",{\"1\":{\"402\":1}}],[\"递归删除\",{\"1\":{\"259\":1}}],[\"递归同步创建文件夹\",{\"1\":{\"257\":1}}],[\"递归创建成功\",{\"1\":{\"257\":1}}],[\"递归异步创建\",{\"1\":{\"257\":1}}],[\"递归解析所有依赖项\",{\"1\":{\"155\":1}}],[\"然而我们很容易的可以看出\",{\"1\":{\"1964\":1}}],[\"然而其并没有重新执行\",{\"1\":{\"1902\":1}}],[\"然而并没有\",{\"1\":{\"1890\":1}}],[\"然而\",{\"1\":{\"1678\":1,\"1912\":1,\"2099\":1}}],[\"然而这些数据类型都是可以相互转换的\",{\"1\":{\"801\":1}}],[\"然后对每个块进行\",{\"1\":{\"2101\":1}}],[\"然后对每个块进行哈希计算\",{\"1\":{\"2101\":1}}],[\"然后对每个块进行处理\",{\"1\":{\"2101\":2}}],[\"然后对此作出响应\",{\"1\":{\"1135\":1}}],[\"然后生成一个会话密钥\",{\"1\":{\"2091\":2}}],[\"然后生成整个页面的虚拟\",{\"1\":{\"1862\":1}}],[\"然后推入到数组里面\",{\"1\":{\"2074\":1}}],[\"然后声明了一个名为\",{\"1\":{\"2061\":1}}],[\"然后从\",{\"1\":{\"2068\":1}}],[\"然后从事件对象中获取之前传递给\",{\"1\":{\"2050\":1}}],[\"然后从训练数据集的小批量数据中随机选择新的输入单元或输出单元的权重\",{\"1\":{\"1664\":1}}],[\"然后构建一个\",{\"1\":{\"2029\":1}}],[\"然后构建一个最终的返回值\",{\"1\":{\"946\":1}}],[\"然后设置相关的事件监听器\",{\"1\":{\"2026\":1}}],[\"然后根据新的位置和\",{\"1\":{\"2028\":1}}],[\"然后根据当前的\",{\"1\":{\"2026\":1}}],[\"然后根据需求来覆盖的\",{\"1\":{\"1260\":1}}],[\"然后创建组件\",{\"1\":{\"2003\":1}}],[\"然后创建引用\",{\"1\":{\"984\":1}}],[\"然后更新完成后\",{\"1\":{\"2002\":1}}],[\"然后和之前的\",{\"1\":{\"2002\":1}}],[\"然后遍历旧子节点根据相同的\",{\"1\":{\"1969\":1}}],[\"然后又通过原始数据\",{\"1\":{\"1929\":1}}],[\"然后当数据是set并且获取\",{\"1\":{\"1927\":1}}],[\"然后这个动作就会被proxy拦截\",{\"1\":{\"1910\":1}}],[\"然后这个对象又可以调用方法\",{\"1\":{\"947\":1}}],[\"然后变不回来了\",{\"1\":{\"1896\":1}}],[\"然后副作用函数执行时又加回来\",{\"1\":{\"1890\":1}}],[\"然后越过\",{\"1\":{\"1792\":1}}],[\"然后把\",{\"1\":{\"2055\":1}}],[\"然后把这个对象作为传入到\",{\"1\":{\"2052\":1}}],[\"然后把真正的事件处理函数设置为\",{\"1\":{\"1949\":1}}],[\"然后把截取出来的text转化成textast\",{\"1\":{\"1792\":1}}],[\"然后把旧后节点移动到oldchilren中所有未处理节点之前\",{\"1\":{\"1789\":1}}],[\"然后把旧前节点移动到oldchilren中所有未处理节点之后\",{\"1\":{\"1789\":1}}],[\"然后把表单中的数据组织到请求体中\",{\"1\":{\"1569\":1}}],[\"然后插入到elm中\",{\"1\":{\"1789\":1}}],[\"然后有差异的vnode对应的真实dom节点就是需要重新渲染的节点\",{\"1\":{\"1788\":1}}],[\"然后错位相加\",{\"1\":{\"1712\":2}}],[\"然后同上步骤判断第二尾数\",{\"1\":{\"1711\":1}}],[\"然后输出的结果大小是\",{\"1\":{\"1662\":1}}],[\"然后输入npm\",{\"1\":{\"138\":1}}],[\"然后才能进入全连接层进行分类\",{\"1\":{\"1661\":1}}],[\"然后一边生成\",{\"1\":{\"1530\":1}}],[\"然后一次性打包返回给前端\",{\"1\":{\"219\":1}}],[\"然后去修改\",{\"1\":{\"1429\":1}}],[\"然后去验证客户端请求里面带着的\",{\"1\":{\"360\":1}}],[\"然后只需要在合适的时间点\",{\"1\":{\"1407\":1}}],[\"然后被缓存起来\",{\"1\":{\"1375\":1}}],[\"然后$emit将对应的事件进行发布\",{\"1\":{\"1368\":1}}],[\"然后子组件中的\",{\"1\":{\"1358\":1}}],[\"然后就可以访问\",{\"1\":{\"1309\":1}}],[\"然后就构成了jwt的第三部分\",{\"1\":{\"367\":1}}],[\"然后需要获取它的子节点怎么办呢\",{\"1\":{\"1204\":1}}],[\"然后利用钩子函数和组件间的父子关系挂载到每个组件的实例上\",{\"1\":{\"2016\":1}}],[\"然后利用\",{\"1\":{\"1198\":1}}],[\"然后利用这个工具将开发时态编写的代码转换为运行时态需要的东西\",{\"1\":{\"118\":1}}],[\"然后递归调用\",{\"1\":{\"1187\":1}}],[\"然后按顺序执行所有的延时队列\",{\"1\":{\"1181\":1}}],[\"然后按照一定的时间间隔依次执行每个小任务\",{\"1\":{\"1038\":1}}],[\"然后粘贴\",{\"1\":{\"1161\":1}}],[\"然后跳转到百度页面\",{\"1\":{\"1156\":1}}],[\"然后页面才被加载出来\",{\"1\":{\"1150\":1}}],[\"然后addeventlistener\",{\"1\":{\"1146\":1}}],[\"然后给这些节点对象的事件处理属性赋值一个函数\",{\"1\":{\"1144\":1}}],[\"然后事件沿\",{\"1\":{\"1140\":1}}],[\"然后逐级向上传播到较为不具体的节点\",{\"1\":{\"1139\":1}}],[\"然后程序就可以做出相应的响应\",{\"1\":{\"1137\":1}}],[\"然后最后再一次性添加到文档里面\",{\"1\":{\"1120\":1}}],[\"然后开始下一次触发调用\",{\"1\":{\"1037\":1}}],[\"然后重置\",{\"1\":{\"1034\":1}}],[\"然后重新生成新的\",{\"1\":{\"129\":1}}],[\"然后释放其内存\",{\"1\":{\"1028\":1}}],[\"然后确定形式参数\",{\"1\":{\"1015\":1}}],[\"然后调用confirmtransition来确认此次跳转是否应该进行\",{\"1\":{\"2029\":1}}],[\"然后调用patch将其挂载\",{\"1\":{\"2002\":1}}],[\"然后调用\",{\"1\":{\"1673\":1,\"1932\":1,\"2058\":1}}],[\"然后调用该函数\",{\"1\":{\"995\":1}}],[\"然后调用对象方法实现具体功能\",{\"1\":{\"405\":1}}],[\"然后传入方法\",{\"1\":{\"995\":1}}],[\"然后传递给服务器\",{\"1\":{\"346\":1}}],[\"然后该函数在调用的时候\",{\"1\":{\"992\":1}}],[\"然后比较\",{\"1\":{\"976\":1}}],[\"然后比较得到的字符串\",{\"1\":{\"855\":1}}],[\"然后运算\",{\"1\":{\"975\":1}}],[\"然后运行命令查看结果\",{\"1\":{\"149\":1}}],[\"然后返回\",{\"1\":{\"2065\":1}}],[\"然后返回处理值\",{\"1\":{\"2054\":1}}],[\"然后返回一个新函数\",{\"1\":{\"995\":1}}],[\"然后返回包含匹配项信息的数组\",{\"1\":{\"925\":1}}],[\"然后返给node的模板引擎\",{\"1\":{\"507\":1}}],[\"然后会根据正则表达式去检索字符串\",{\"1\":{\"894\":1}}],[\"然后四舍五入\",{\"1\":{\"874\":1}}],[\"然后我们恰好从x=4开始\",{\"1\":{\"1658\":1}}],[\"然后我们将浏览器最小化后\",{\"1\":{\"1105\":1}}],[\"然后我们通过键就可以找到相应的数组元素\",{\"1\":{\"846\":1}}],[\"然后我们想在这个对象的基础上进行一定的扩展\",{\"1\":{\"828\":1}}],[\"然后我们就可以重新绘制新的图形\",{\"1\":{\"711\":1}}],[\"然后回头再看条件表达式是否成立\",{\"1\":{\"821\":1}}],[\"然后进行前向传播和反向传播\",{\"1\":{\"1659\":1}}],[\"然后进行条件表达式的判断\",{\"1\":{\"821\":1}}],[\"然后进程可以创建线程\",{\"1\":{\"408\":1}}],[\"然后参与运算\",{\"1\":{\"806\":1}}],[\"然后你使用画图命令去画出路径\",{\"1\":{\"710\":1}}],[\"然后你就可以利用\",{\"1\":{\"138\":1}}],[\"然后其下的元素会自动上移\",{\"1\":{\"562\":1}}],[\"然后向左或者向右平移\",{\"1\":{\"561\":1}}],[\"然后放到已排序序列的末尾\",{\"1\":{\"411\":1}}],[\"然后接着向后比较\",{\"1\":{\"410\":1}}],[\"然后验证\",{\"1\":{\"369\":1}}],[\"然后将加密后的消息发送给小红\",{\"1\":{\"2100\":1}}],[\"然后将新的一组子节点逐个挂载\",{\"1\":{\"1951\":1}}],[\"然后将递归调用的任务放在\",{\"1\":{\"1187\":1}}],[\"然后将浏览器最小化之后\",{\"1\":{\"1105\":1}}],[\"然后将函数名称当作这个对象的属性\",{\"1\":{\"948\":1}}],[\"然后将返回的新对象赋值给子类原型\",{\"1\":{\"1072\":1}}],[\"然后将返回的结果组成一个新的数组返回\",{\"1\":{\"945\":1}}],[\"然后将返回为\",{\"1\":{\"945\":1}}],[\"然后将接收到的参数添加到副本的末尾\",{\"1\":{\"854\":1}}],[\"然后将all\",{\"1\":{\"623\":1}}],[\"然后将左右两个透明背景的侧边栏使用absolute覆盖在主内容区的的左右边框上\",{\"1\":{\"582\":1}}],[\"然后将侧边栏定位到指定位置上去\",{\"1\":{\"580\":1}}],[\"然后将其进行base64加密\",{\"1\":{\"366\":1}}],[\"然后将头部进行base64加密\",{\"1\":{\"365\":1}}],[\"然后将\",{\"1\":{\"354\":1,\"1127\":1}}],[\"然后使用公钥进行验证\",{\"1\":{\"2100\":1}}],[\"然后使用相同的密钥对密文数据进行解密\",{\"1\":{\"2099\":1}}],[\"然后使用会话密钥加密消息响应给客户端\",{\"1\":{\"2091\":2}}],[\"然后使用新节点替换即可\",{\"1\":{\"1977\":1}}],[\"然后使用展开运算符得到一个新的对象\",{\"1\":{\"1937\":1}}],[\"然后使用命令创建项目\",{\"1\":{\"1426\":1}}],[\"然后使用定时器取出下一个要处理的项目进行处理\",{\"1\":{\"1038\":1}}],[\"然后使用\",{\"1\":{\"275\":1,\"1314\":1,\"1655\":1,\"1659\":1}}],[\"然后再执行完\",{\"1\":{\"2031\":1}}],[\"然后再将新的事件处理函数绑定到\",{\"1\":{\"1949\":1}}],[\"然后再从该目标往下找其他元素\",{\"1\":{\"1234\":1}}],[\"然后再缩小到\",{\"1\":{\"1224\":1}}],[\"然后再进行比较\",{\"1\":{\"812\":1}}],[\"然后再自增或者自减\",{\"1\":{\"806\":1}}],[\"然后再重新调整最大堆\",{\"1\":{\"416\":1}}],[\"然后再继续执行主线程的代码\",{\"1\":{\"245\":1}}],[\"然后再修改\",{\"1\":{\"50\":1}}],[\"然后执行这些回调函数\",{\"1\":{\"2061\":1}}],[\"然后执行该函数里面的代码\",{\"1\":{\"945\":1}}],[\"然后执行回调函数里面的操作\",{\"1\":{\"846\":1,\"945\":1}}],[\"然后执行数值的比较\",{\"1\":{\"812\":1}}],[\"然后执行\",{\"1\":{\"239\":1,\"1862\":1,\"1987\":1}}],[\"然后通过组件实例的$refs访问到指定的这个\",{\"1\":{\"1499\":1}}],[\"然后通过对象传递\",{\"1\":{\"931\":1}}],[\"然后通过这个变量来对函数进行调用\",{\"1\":{\"929\":1}}],[\"然后通过getitem\",{\"1\":{\"769\":1}}],[\"然后通过font\",{\"1\":{\"622\":1}}],[\"然后通过header中声明的加密方式进行加盐secret组合加密\",{\"1\":{\"367\":1}}],[\"然后通过\",{\"1\":{\"219\":1,\"228\":1,\"1649\":1}}],[\"然后可以使用\",{\"1\":{\"177\":1}}],[\"然后解压\",{\"1\":{\"177\":1}}],[\"然后客户端会向\",{\"1\":{\"158\":1}}],[\"然后由组件内部使用虚拟dom进行数据比对\",{\"1\":{\"1804\":1}}],[\"然后由\",{\"1\":{\"150\":1}}],[\"然后\",{\"1\":{\"148\":1,\"405\":1,\"411\":1,\"995\":1,\"1029\":1,\"1649\":1,\"1655\":1,\"1656\":1,\"1925\":1,\"1993\":1,\"2047\":1,\"2099\":1}}],[\"然后在用户下一次访问这个页面的时候\",{\"1\":{\"2061\":1}}],[\"然后在控制台输入\",{\"1\":{\"2048\":1}}],[\"然后在执行\",{\"1\":{\"1802\":1}}],[\"然后在函数中使用这些变量\",{\"1\":{\"1028\":1}}],[\"然后在对象\",{\"1\":{\"995\":1}}],[\"然后在指定的作用域中\",{\"1\":{\"995\":1}}],[\"然后在另外一个函数里面执行传递过去的函数\",{\"1\":{\"943\":1}}],[\"然后在try\",{\"1\":{\"504\":1}}],[\"然后在重新调整最大堆\",{\"1\":{\"416\":1}}],[\"然后在浏览器就可以访问\",{\"1\":{\"301\":1}}],[\"然后在\",{\"1\":{\"143\":1,\"943\":1,\"1928\":1,\"2016\":1}}],[\"然后经过一系列的过程\",{\"1\":{\"122\":1}}],[\"然后以此目录作为工作目录\",{\"1\":{\"64\":1}}],[\"然后切回自己的分支合并自己的修改与最新代码\",{\"1\":{\"17\":1}}],[\"然后合并新开发功能的分支\",{\"1\":{\"10\":1}}],[\"假\",{\"0\":{\"1070\":1}}],[\"假设小明想要给小红发送一封加密的消息\",{\"1\":{\"2100\":1}}],[\"假设你正在使用一个银行网页进行转账操作\",{\"1\":{\"2087\":1}}],[\"假设是\",{\"1\":{\"2071\":1}}],[\"假设为\",{\"1\":{\"2058\":1}}],[\"假设浏览器的\",{\"1\":{\"2050\":1}}],[\"假设这是我们的\",{\"1\":{\"2045\":1}}],[\"假设被监听的属性名是a\",{\"1\":{\"1854\":1}}],[\"假设组件内容如下\",{\"1\":{\"1835\":1}}],[\"假设组件标签如下\",{\"1\":{\"1834\":1}}],[\"假设分别有浓度为\",{\"1\":{\"1742\":1}}],[\"假设分配\",{\"1\":{\"1726\":1}}],[\"假设分配的核心思想和拆分一样\",{\"1\":{\"1723\":1}}],[\"假设分配法\",{\"0\":{\"1723\":1},\"1\":{\"1721\":1}}],[\"假设某一部分情况和整体一致\",{\"1\":{\"1731\":1}}],[\"假设增速求后期\",{\"1\":{\"1727\":1}}],[\"假设增量求后期\",{\"1\":{\"1727\":1}}],[\"假设输入一个大小为\",{\"1\":{\"1662\":1}}],[\"假设我们的完整的\",{\"1\":{\"2058\":2}}],[\"假设我们想最小化函数f\",{\"1\":{\"1658\":1}}],[\"假设我们在维护一个\",{\"1\":{\"1319\":1}}],[\"假设我们有一段这样的\",{\"1\":{\"1249\":1}}],[\"假设在调用\",{\"1\":{\"2058\":1}}],[\"假设在\",{\"1\":{\"1318\":1}}],[\"假设有一个参数对象\",{\"1\":{\"2045\":1}}],[\"假设有如下的路由配置\",{\"1\":{\"2028\":1}}],[\"假设有如下路由配置\",{\"1\":{\"2028\":1}}],[\"假设有\",{\"1\":{\"1310\":1}}],[\"假设\",{\"1\":{\"828\":1,\"1897\":1,\"2047\":1,\"2058\":2,\"2073\":1,\"2099\":1}}],[\"假值\",{\"1\":{\"796\":1}}],[\"假如我要为一个标签添加\",{\"1\":{\"1232\":1}}],[\"假如多个\",{\"1\":{\"1224\":1}}],[\"假如现在我已经有一个\",{\"1\":{\"1204\":1}}],[\"假如\",{\"1\":{\"395\":1}}],[\"遗漏声明\",{\"0\":{\"783\":1},\"1\":{\"781\":1}}],[\"范围为\",{\"1\":{\"1659\":1}}],[\"范围内\",{\"1\":{\"1656\":2}}],[\"范围内的整数表示\",{\"1\":{\"773\":1}}],[\"范围在\",{\"1\":{\"737\":1}}],[\"考虑这个函数\",{\"1\":{\"1658\":1}}],[\"考虑好数据的存放位置\",{\"1\":{\"1435\":1}}],[\"考虑\",{\"0\":{\"1962\":1},\"1\":{\"771\":1,\"1751\":2}}],[\"猪猪侠\",{\"1\":{\"770\":1}}],[\"姓名为\",{\"1\":{\"769\":2}}],[\"～\",{\"1\":{\"768\":1}}],[\"仅能一方进行解密\",{\"1\":{\"2100\":1}}],[\"仅能使用\",{\"1\":{\"1614\":1}}],[\"仅读取\",{\"1\":{\"1804\":1}}],[\"仅从当前段落本身讲\",{\"1\":{\"1685\":1}}],[\"仅需把自己的结果交给下层即可\",{\"1\":{\"1621\":1}}],[\"仅会对该层进行后续处理\",{\"1\":{\"1526\":1}}],[\"仅可用于\",{\"1\":{\"1493\":1}}],[\"仅第一次执行\",{\"1\":{\"1426\":1}}],[\"仅动态渲染一次所在的节点\",{\"1\":{\"1404\":1}}],[\"仅用于渲染列表用于展示\",{\"1\":{\"1394\":1}}],[\"仅有\",{\"1\":{\"989\":1}}],[\"仅包括第一个具有默认值之前的参数个数\",{\"1\":{\"951\":1}}],[\"仅仅是使用样式\",{\"1\":{\"1389\":1}}],[\"仅仅是克隆该节点而已\",{\"1\":{\"1123\":1}}],[\"仅仅是会话级别的存储\",{\"1\":{\"768\":1}}],[\"仅仅只有字面量声明函数的方式才存在函数提升\",{\"1\":{\"940\":1}}],[\"仅解决了一些\",{\"1\":{\"23\":1}}],[\"种对象\",{\"1\":{\"1903\":1}}],[\"种对象通用方法和test\",{\"1\":{\"925\":1}}],[\"种写法\",{\"0\":{\"1360\":1,\"1361\":1}}],[\"种情况\",{\"1\":{\"1225\":2}}],[\"种用法\",{\"1\":{\"1201\":1}}],[\"种数据格式\",{\"1\":{\"1161\":1}}],[\"种数据类型都转换为字符串\",{\"1\":{\"789\":1}}],[\"种不同的事件\",{\"1\":{\"1148\":1}}],[\"种鼠标事件做具体的演示\",{\"1\":{\"1148\":1}}],[\"种方式是使用外部链接的方式来调用外部的\",{\"1\":{\"1079\":1}}],[\"种方式就是直接在\",{\"1\":{\"1078\":1}}],[\"种方式访问它们\",{\"1\":{\"924\":1}}],[\"种方法\",{\"1\":{\"948\":1}}],[\"种作用域\",{\"1\":{\"936\":1}}],[\"种正则匹配方法\",{\"1\":{\"925\":1}}],[\"种长度\",{\"1\":{\"910\":1}}],[\"种类型的操作\",{\"1\":{\"854\":1}}],[\"种复杂数据类型\",{\"1\":{\"787\":1}}],[\"种简单数据类型以及\",{\"1\":{\"787\":1}}],[\"种\",{\"1\":{\"779\":1,\"781\":1,\"828\":1,\"915\":1,\"948\":1,\"1161\":1,\"1214\":1}}],[\"种在客户端存储数据的方法\",{\"1\":{\"768\":1}}],[\"种新的模块类型\",{\"1\":{\"142\":1}}],[\"鼠标相对于文档的上边缘位置\",{\"1\":{\"1219\":1}}],[\"鼠标相对于文档的左边缘位置\",{\"1\":{\"1219\":1}}],[\"鼠标事件的事件对象\",{\"0\":{\"1153\":1}}],[\"鼠标事件是\",{\"1\":{\"1148\":1}}],[\"鼠标事件\",{\"0\":{\"1148\":1}}],[\"鼠标可能在移动也可能未移动\",{\"1\":{\"764\":1}}],[\"鼠标移入的元素等\",{\"1\":{\"520\":1}}],[\"拖动的具体示例\",{\"1\":{\"764\":1}}],[\"拖拽对应英语单词\",{\"1\":{\"762\":1}}],[\"拖放相关\",{\"0\":{\"764\":1}}],[\"拖放这个词我们可以拆开来看\",{\"1\":{\"762\":1}}],[\"拖放是标准的一部分\",{\"1\":{\"762\":1}}],[\"拖放是网页中比较常见的功能之一\",{\"1\":{\"762\":1}}],[\"拖放\",{\"0\":{\"762\":1}}],[\"及所有50\",{\"1\":{\"1718\":1}}],[\"及其后面的内容就是\",{\"1\":{\"1468\":1}}],[\"及以下的浏览器就不再受到支持\",{\"1\":{\"1196\":1}}],[\"及以下的浏览器\",{\"1\":{\"1196\":1}}],[\"及以下浏览器不支持\",{\"1\":{\"1156\":3,\"1157\":1}}],[\"及之前的版本浏览器中\",{\"1\":{\"1151\":1}}],[\"及之后版本的浏览器中\",{\"1\":{\"1151\":1}}],[\"及取消按钮的对话框\",{\"1\":{\"1088\":1}}],[\"及时释放\",{\"1\":{\"1025\":1}}],[\"及\",{\"1\":{\"760\":1,\"1138\":1}}],[\"及格式化\",{\"0\":{\"385\":1}}],[\"控件值与预期类型不匹配返回\",{\"1\":{\"760\":1}}],[\"控制滤波器元素之间距离的参数\",{\"1\":{\"1663\":1}}],[\"控制每次更新的步长大小\",{\"1\":{\"1659\":1}}],[\"控制台信息\",{\"1\":{\"1584\":1}}],[\"控制台运行命令完成打包\",{\"1\":{\"133\":1}}],[\"控制重定向\",{\"1\":{\"1572\":1}}],[\"控制\",{\"1\":{\"1572\":1}}],[\"控制路由跳转时操作浏览器历史记录的模式\",{\"1\":{\"1463\":1}}],[\"控制属性是否可以被删除\",{\"1\":{\"1364\":1}}],[\"控制属性是否可以被修改\",{\"1\":{\"1364\":1}}],[\"控制属性是否可以枚举\",{\"1\":{\"1364\":1}}],[\"控制成员可见性\",{\"0\":{\"1311\":1}}],[\"控制文本与表单的关系\",{\"1\":{\"756\":1}}],[\"控制背景平铺行为\",{\"0\":{\"629\":1}}],[\"×\",{\"1\":{\"757\":1,\"1726\":1,\"1728\":2,\"1731\":1,\"1753\":6}}],[\"确认跳转并传递值\",{\"1\":{\"2029\":1}}],[\"确认从一个路由到另一个路由的过渡是否应该进行\",{\"1\":{\"2029\":1}}],[\"确实是这样的\",{\"1\":{\"1151\":1}}],[\"确保数据符合预期的格式和内容\",{\"1\":{\"2095\":1}}],[\"确保请求来自合法的来源\",{\"1\":{\"2088\":1}}],[\"确保即将\",{\"1\":{\"1792\":1}}],[\"确保\",{\"1\":{\"1482\":1}}],[\"确保为一组\",{\"1\":{\"756\":1}}],[\"确保单选关系\",{\"1\":{\"756\":1}}],[\"确定需要更新\",{\"1\":{\"2029\":2}}],[\"确定应该进行跳转\",{\"1\":{\"2029\":1}}],[\"确定模式\",{\"1\":{\"2027\":1}}],[\"确定父子关系\",{\"1\":{\"1800\":2}}],[\"确定vm\",{\"1\":{\"1799\":1}}],[\"确定各部分所占比例\",{\"1\":{\"1731\":1}}],[\"确定分配数\",{\"1\":{\"1723\":1}}],[\"确定填空词的\",{\"1\":{\"1702\":1}}],[\"确定作者自身的\",{\"1\":{\"1691\":1}}],[\"确定作用域\",{\"1\":{\"1015\":1}}],[\"确定题型\",{\"1\":{\"1684\":1}}],[\"确定函数引用\",{\"1\":{\"1015\":1}}],[\"确定函数的形参\",{\"1\":{\"1015\":1}}],[\"确定形式参数\",{\"1\":{\"1015\":1}}],[\"确定普通字面量形式的函数声明\",{\"1\":{\"1015\":1}}],[\"确定\",{\"1\":{\"530\":1,\"1015\":2,\"1687\":1,\"2026\":1}}],[\"确定声名值\",{\"0\":{\"529\":1}}],[\"确定最大最小值\",{\"1\":{\"417\":1}}],[\"确定入口\",{\"1\":{\"154\":1}}],[\"概括\",{\"1\":{\"1685\":1}}],[\"概述\",{\"1\":{\"754\":1}}],[\"概念理解\",{\"0\":{\"1017\":1,\"1023\":1}}],[\"概念\",{\"0\":{\"266\":1,\"838\":1,\"1033\":1,\"1448\":1},\"1\":{\"176\":2,\"680\":1,\"681\":1,\"1452\":1}}],[\"概念介绍\",{\"0\":{\"56\":1}}],[\"告知的方式也非常的简单\",{\"1\":{\"1612\":1}}],[\"告知客户端\",{\"1\":{\"1539\":2}}],[\"告知媒体相关部分的下载进度时周期性地触发\",{\"1\":{\"752\":1}}],[\"告诉definereactive函数仅仅是把键值添加到当前实例上而不需要将其转换成响应式\",{\"1\":{\"1803\":1}}],[\"告诉vue去更新界面\",{\"1\":{\"1507\":1}}],[\"告诉vue这个value值是需要被\",{\"1\":{\"1507\":1}}],[\"告诉用户去附近哪家商店可以挑选到打折的鞋子\",{\"1\":{\"1100\":1}}],[\"告诉我们是本地存储还是会话存储\",{\"1\":{\"770\":1}}],[\"告诉我们修改前的值\",{\"1\":{\"770\":1}}],[\"告诉我们被修改后的新值\",{\"1\":{\"770\":1}}],[\"告诉我们被修改的条目的键\",{\"1\":{\"770\":1}}],[\"告诉浏览器怎样规范代码\",{\"1\":{\"691\":1}}],[\"告诉\",{\"1\":{\"376\":1}}],[\"故需要单独处理\",{\"1\":{\"1909\":1}}],[\"故鼎新\",{\"1\":{\"1705\":1}}],[\"故<audio>标签不支持width\",{\"1\":{\"749\":1}}],[\"故可以通过简写属性同时设置边框的所有相关样式\",{\"1\":{\"544\":1}}],[\"观察对象\",{\"1\":{\"1784\":1}}],[\"观察两位\",{\"1\":{\"1711\":1}}],[\"观察选项之间存在差异的顺序进行阅读\",{\"1\":{\"1699\":1}}],[\"观点援引\",{\"0\":{\"1691\":1}}],[\"观点句清楚明白的时候可以跳过\",{\"1\":{\"1688\":1}}],[\"观点\",{\"1\":{\"1688\":1,\"1690\":1,\"1691\":1}}],[\"观点和倾向\",{\"1\":{\"1686\":1}}],[\"观看\",{\"1\":{\"747\":1}}],[\"观书有感\",{\"1\":{\"247\":1,\"252\":1,\"254\":2}}],[\"砍掉目标溢出的部分\",{\"1\":{\"743\":1}}],[\"砍掉源溢出的部分\",{\"1\":{\"743\":1}}],[\"黑色到白色\",{\"1\":{\"737\":3}}],[\"至多有\",{\"1\":{\"1751\":1}}],[\"至多\",{\"1\":{\"1751\":2}}],[\"至于\",{\"1\":{\"2047\":1,\"2058\":1}}],[\"至于为什么不直接用\",{\"1\":{\"2002\":1}}],[\"至于另一端用不用\",{\"1\":{\"1539\":2}}],[\"至于黄色箭头所指的过程大致可分为两部分\",{\"1\":{\"1366\":1}}],[\"至此\",{\"1\":{\"992\":1,\"2054\":1,\"2058\":1}}],[\"至少\",{\"1\":{\"1751\":2}}],[\"至少不应该放到\",{\"1\":{\"1569\":1}}],[\"至少包含了下面的队列\",{\"1\":{\"1560\":1}}],[\"至少有一个\",{\"1\":{\"857\":1}}],[\"至少播放数帧\",{\"1\":{\"752\":1}}],[\"至\",{\"1\":{\"737\":1}}],[\"缺总述概括总述\",{\"1\":{\"1697\":1}}],[\"缺少某些特性\",{\"1\":{\"921\":1}}],[\"缺一不可\",{\"1\":{\"730\":1}}],[\"缺点是无法为同一个标签添加多个相同类型的事件处理方法\",{\"1\":{\"1214\":1}}],[\"缺点是不利于\",{\"1\":{\"219\":1}}],[\"缺点在于参数过多或需要分辨参数数据类型时\",{\"1\":{\"486\":1}}],[\"缺点\",{\"1\":{\"46\":2,\"1025\":1,\"1444\":1,\"1445\":1,\"1572\":1,\"2099\":1,\"2100\":1}}],[\"弧度radians=\",{\"1\":{\"716\":1}}],[\"弧形\",{\"1\":{\"711\":1}}],[\"起初只有\",{\"1\":{\"1974\":1}}],[\"起止时间\",{\"1\":{\"1752\":1}}],[\"起点和终点都是\",{\"1\":{\"1141\":1}}],[\"起到确定\",{\"1\":{\"995\":1}}],[\"起到了作用域的效果\",{\"1\":{\"713\":1}}],[\"起\",{\"1\":{\"771\":1}}],[\"起始结束位置\",{\"1\":{\"920\":1}}],[\"起始结束\",{\"0\":{\"917\":1}}],[\"起始位置\",{\"1\":{\"854\":1}}],[\"起始点为\",{\"1\":{\"718\":1,\"719\":1}}],[\"起始\",{\"1\":{\"389\":1,\"401\":1}}],[\"恢复原来的行为\",{\"1\":{\"1925\":1}}],[\"恢复到最近的保存状态的方法\",{\"1\":{\"711\":1}}],[\"恢复文件\",{\"1\":{\"8\":1}}],[\"斜角\",{\"1\":{\"708\":1}}],[\"斜体\",{\"1\":{\"621\":1}}],[\"覆盖右边对象的部分属性\",{\"1\":{\"2055\":1}}],[\"覆盖的方式只需要在默认变量之前重新声明下变量即可\",{\"1\":{\"1260\":1}}],[\"覆盖掉继承的\",{\"1\":{\"995\":1}}],[\"覆盖合成\",{\"0\":{\"743\":1}}],[\"覆盖渲染\",{\"1\":{\"708\":1}}],[\"覆盖安装即可\",{\"1\":{\"227\":1}}],[\"绘制到屏幕\",{\"1\":{\"1530\":1}}],[\"绘制\",{\"1\":{\"1526\":2}}],[\"绘制文本\",{\"0\":{\"728\":1}}],[\"绘制图片\",{\"0\":{\"721\":1}}],[\"绘制三次贝塞尔曲线\",{\"0\":{\"719\":1},\"1\":{\"719\":1}}],[\"绘制二次贝塞尔曲线\",{\"0\":{\"718\":1},\"1\":{\"718\":1}}],[\"绘制弧线\",{\"0\":{\"717\":1}}],[\"绘制圆形\",{\"0\":{\"716\":1}}],[\"绘制曲线\",{\"0\":{\"715\":1}}],[\"绘制一条从当前位置到指定\",{\"1\":{\"711\":1}}],[\"绘制一个左上角坐标为\",{\"1\":{\"714\":1}}],[\"绘制一个矩形的边框\",{\"1\":{\"706\":1}}],[\"绘制一个填充的矩形\",{\"1\":{\"706\":1}}],[\"绘制路径\",{\"0\":{\"709\":1}}],[\"绘制矩形\",{\"0\":{\"705\":1,\"706\":1,\"714\":1}}],[\"矩形\",{\"1\":{\"705\":1}}],[\"画出分配树\",{\"1\":{\"1723\":1}}],[\"画出两条切线之间的弧线路径\",{\"1\":{\"717\":1}}],[\"画\",{\"1\":{\"1526\":2}}],[\"画入时应该缩放的大小\",{\"1\":{\"722\":1}}],[\"画一个以\",{\"1\":{\"716\":1}}],[\"画笔\",{\"1\":{\"704\":1}}],[\"画布真实像素的原理\",{\"1\":{\"735\":1}}],[\"画布上所绘制的矩形的左上角\",{\"1\":{\"706\":1}}],[\"画布的高宽\",{\"1\":{\"703\":1}}],[\"画布\",{\"0\":{\"701\":1}}],[\"看一下这个方法做了什么\",{\"1\":{\"2058\":1}}],[\"看你是否是第一次进入页面\",{\"1\":{\"2057\":1}}],[\"看题顺序\",{\"0\":{\"1684\":1}}],[\"看看这个过期时间是否大于当前时间\",{\"1\":{\"1535\":1}}],[\"看看它的用法\",{\"1\":{\"1224\":1}}],[\"看这个例子\",{\"1\":{\"1224\":1}}],[\"看起来和\",{\"1\":{\"703\":1}}],[\"看到最后的\",{\"1\":{\"177\":1}}],[\"着重\",{\"1\":{\"699\":1}}],[\"认为它是静态的\",{\"1\":{\"1840\":1}}],[\"认为点可以代表任意字符\",{\"1\":{\"905\":1}}],[\"认为是同一个东西\",{\"1\":{\"895\":1}}],[\"认真办案<\",{\"1\":{\"697\":1}}],[\"认证流程\",{\"0\":{\"368\":1}}],[\"认证是针对用户\",{\"1\":{\"362\":1}}],[\"认证\",{\"1\":{\"362\":1}}],[\"认证只是简单的把\",{\"1\":{\"362\":1}}],[\"譬如\",{\"1\":{\"694\":1}}],[\"譬如文章的主标题和副标题的组合\",{\"1\":{\"694\":1}}],[\"段可以是指一篇文章里按照主题的分段\",{\"1\":{\"694\":1}}],[\"段落\",{\"1\":{\"661\":1}}],[\"界面不会自动更新\",{\"1\":{\"1490\":1}}],[\"界面不会更新\",{\"1\":{\"1490\":1}}],[\"界面有问题\",{\"1\":{\"1394\":1}}],[\"界面效果没问题\",{\"1\":{\"1394\":1}}],[\"界面的交互\",{\"1\":{\"684\":1}}],[\"界面中一个元素一个元素依次渲染\",{\"1\":{\"528\":1}}],[\"预判\",{\"1\":{\"1685\":1}}],[\"预检\",{\"1\":{\"1609\":2}}],[\"预检请求\",{\"0\":{\"1608\":1},\"1\":{\"1606\":1}}],[\"预编译器\",{\"1\":{\"1247\":1}}],[\"预处理器的范畴\",{\"1\":{\"1324\":1}}],[\"预处理器\",{\"2\":{\"1322\":1,\"1343\":1}}],[\"预处理器之一\",{\"1\":{\"1247\":1}}],[\"预处理语言\",{\"1\":{\"1247\":1}}],[\"预处理\",{\"1\":{\"1021\":1}}],[\"预期为布尔的时候\",{\"1\":{\"801\":1}}],[\"预期为字符串的时候\",{\"1\":{\"801\":1}}],[\"预期为数字的时候\",{\"1\":{\"801\":1}}],[\"预定义属性\",{\"0\":{\"683\":1}}],[\"预声明\",{\"1\":{\"46\":1}}],[\"另一个张量表示标签数据\",{\"1\":{\"1655\":1}}],[\"另一个是\",{\"1\":{\"796\":1}}],[\"另一种是组件标签上有\",{\"1\":{\"1368\":1}}],[\"另一种加载文件的方法是在本地将文件从桌面拖放到浏览器\",{\"1\":{\"772\":1}}],[\"另一次是在子类构造函数中调用\",{\"1\":{\"1071\":1}}],[\"另一方面导致页面无法及时更新\",{\"1\":{\"1558\":1}}],[\"另一方面\",{\"1\":{\"508\":1}}],[\"另外两个是布尔值\",{\"1\":{\"2065\":1}}],[\"另外需要注意\",{\"1\":{\"2044\":1}}],[\"另外还有一个重要的信息\",{\"1\":{\"2061\":1}}],[\"另外还有伪类嵌套和选择器嵌套\",{\"1\":{\"1257\":1}}],[\"另外还对浏览器环境下的\",{\"1\":{\"2054\":1}}],[\"另外还存在一个问题是按照这四个步骤遍历完之后\",{\"1\":{\"1966\":1}}],[\"另外为了方便用户的操作\",{\"1\":{\"1836\":1}}],[\"另外要特别注意的是\",{\"1\":{\"1612\":1}}],[\"另外请参考\",{\"1\":{\"1425\":1}}],[\"另外其不带有任何的分号和大括号\",{\"1\":{\"1249\":1}}],[\"另外一种是直接使用\",{\"1\":{\"1877\":1}}],[\"另外一种是形式参数\",{\"1\":{\"931\":1}}],[\"另外一次则出现在子组件初始化事件中\",{\"1\":{\"1368\":1}}],[\"另外一个是从数组最后一项开始\",{\"1\":{\"946\":1}}],[\"另外\",{\"1\":{\"771\":1,\"1155\":1,\"1721\":1,\"1803\":1,\"1979\":1,\"2032\":1,\"2100\":1}}],[\"另\",{\"1\":{\"681\":1}}],[\"泛指对象的属性\",{\"1\":{\"681\":1}}],[\"名字也确定\",{\"1\":{\"1385\":1}}],[\"名字也不确定\",{\"1\":{\"1385\":1}}],[\"名字\",{\"1\":{\"1370\":1}}],[\"名字会变成\",{\"1\":{\"680\":1}}],[\"名\",{\"1\":{\"830\":1}}],[\"名称到路由\",{\"1\":{\"2028\":1}}],[\"名称\",{\"1\":{\"902\":1}}],[\"名称大量重复\",{\"1\":{\"694\":1}}],[\"名称的通用\",{\"1\":{\"694\":1}}],[\"名和值之间以\",{\"1\":{\"514\":1}}],[\"亦或是一个插件所使用的资源\",{\"1\":{\"671\":1}}],[\"纵向合并单元格\",{\"1\":{\"669\":1}}],[\"纵向制表符\",{\"1\":{\"384\":1}}],[\"老一套\",{\"1\":{\"1705\":1}}],[\"老王\",{\"1\":{\"1429\":1}}],[\"老语法规则\",{\"1\":{\"1250\":1}}],[\"老版本\",{\"1\":{\"1249\":1}}],[\"老版本的浏览器会把它当作一行普通字符串\",{\"1\":{\"957\":1}}],[\"老版本支持的标签\",{\"1\":{\"668\":1}}],[\"老网站升级\",{\"1\":{\"269\":1}}],[\"您的浏览器不支持播放音频\",{\"1\":{\"668\":1}}],[\"音频\",{\"1\":{\"747\":2}}],[\"音频文件是否自动播放\",{\"1\":{\"668\":1}}],[\"音乐是否循环播放\",{\"1\":{\"668\":1}}],[\"音视频的\",{\"0\":{\"750\":1}}],[\"音视频\",{\"0\":{\"668\":1,\"751\":1}}],[\"松鼠\",{\"1\":{\"666\":1}}],[\"跳出函数外继续执行后面的代码\",{\"1\":{\"1186\":1}}],[\"跳转到\",{\"1\":{\"2071\":1}}],[\"跳转到指定的\",{\"1\":{\"1094\":1}}],[\"跳转到指定地方\",{\"1\":{\"664\":1}}],[\"跳转路由\",{\"1\":{\"2029\":1,\"2058\":1}}],[\"跳转并携带params参数\",{\"1\":{\"1461\":2}}],[\"跳转并携带query参数\",{\"1\":{\"1459\":2}}],[\"跳转\",{\"1\":{\"1458\":1,\"1459\":1}}],[\"跳转的方式\",{\"1\":{\"1094\":1}}],[\"跳过响应式转换可以提高性能\",{\"1\":{\"1506\":1}}],[\"跳过其所在节点的编译过程\",{\"1\":{\"1403\":1,\"1404\":1}}],[\"跳过\",{\"1\":{\"211\":1}}],[\"顶端\",{\"1\":{\"664\":1}}],[\"顶部对齐\",{\"1\":{\"625\":1}}],[\"粗体\",{\"1\":{\"662\":1}}],[\"页签图标\",{\"1\":{\"1427\":1}}],[\"页脚等\",{\"1\":{\"694\":1}}],[\"页脚等等\",{\"1\":{\"661\":1}}],[\"页面搜索栏的\",{\"1\":{\"2058\":1}}],[\"页面渲染流程\",{\"0\":{\"1881\":1}}],[\"页面中引入了一个\",{\"1\":{\"1543\":1}}],[\"页面向下滚动一段距离等\",{\"1\":{\"1156\":1}}],[\"页面滚动\",{\"1\":{\"1150\":1}}],[\"页面已经卸载\",{\"1\":{\"1150\":1}}],[\"页面卸载\",{\"1\":{\"1150\":1}}],[\"页面卸载以及页面滚动等\",{\"1\":{\"1150\":1}}],[\"页面完全加载后\",{\"1\":{\"1150\":1}}],[\"页面加载\",{\"1\":{\"1150\":1}}],[\"页面加载多个\",{\"0\":{\"31\":1}}],[\"页面做相应的操作时会触发的事件\",{\"1\":{\"1150\":1}}],[\"页面事件中最常用的一个事件就是load事件\",{\"1\":{\"1150\":1}}],[\"页面事件主要是指当我们对整个\",{\"1\":{\"1150\":1}}],[\"页面事件\",{\"0\":{\"1150\":1}}],[\"页面装载时\",{\"1\":{\"1137\":1}}],[\"页面里面的\",{\"1\":{\"770\":1}}],[\"页面实现在客户端浏览器中意键值对的形式在本地保存数据\",{\"1\":{\"766\":1}}],[\"页面的\",{\"1\":{\"2029\":1}}],[\"页面的哪一部分会拥有某个特定的事件\",{\"1\":{\"1138\":1}}],[\"页面的基本结构\",{\"0\":{\"657\":1}}],[\"页面的js逻辑\",{\"1\":{\"504\":1}}],[\"页面死循环卡死时如何上报错误\",{\"0\":{\"503\":1}}],[\"页面很简单\",{\"1\":{\"219\":1}}],[\"页面视角的数据则交给前端型全栈工程师去搞定\",{\"1\":{\"218\":1}}],[\"页面标签相关的\",{\"1\":{\"216\":1}}],[\"页面使用模块\",{\"0\":{\"43\":1}}],[\"页面\",{\"1\":{\"31\":1,\"45\":1,\"1088\":1,\"2048\":1}}],[\"旨在向某些网站\",{\"1\":{\"659\":1}}],[\"旨在帮助我们提示效率的工具\",{\"1\":{\"128\":1}}],[\"专门处理store里的state\",{\"1\":{\"2021\":1}}],[\"专门用来解决\",{\"1\":{\"1468\":1}}],[\"专门用来解决这样的问题\",{\"1\":{\"828\":1}}],[\"专门用来解决这种问题\",{\"1\":{\"666\":1}}],[\"专门用来对浏览器的样式进行重置的\",{\"1\":{\"610\":1}}],[\"专门用来写代码\",{\"1\":{\"71\":1}}],[\"专门用于打包和部署\",{\"1\":{\"25\":1}}],[\"专用文件\",{\"1\":{\"1319\":1}}],[\"专利费问题\",{\"1\":{\"747\":1}}],[\"专业的综合网上购物商城\",{\"1\":{\"659\":1}}],[\"京东jd\",{\"1\":{\"659\":1}}],[\"京东搜索列表页面等\",{\"1\":{\"288\":1}}],[\"媒体的元数据已经加载完毕\",{\"1\":{\"752\":1}}],[\"媒体的第一帧已经加载完毕\",{\"1\":{\"752\":1}}],[\"媒体被清空\",{\"1\":{\"752\":1}}],[\"媒体暂停\",{\"1\":{\"751\":1}}],[\"媒体播放\",{\"1\":{\"751\":1}}],[\"媒体发生错误的时候\",{\"1\":{\"750\":1}}],[\"媒体总时间\",{\"1\":{\"750\":1}}],[\"媒体是否播放完毕\",{\"1\":{\"750\":1}}],[\"媒体是否暂停\",{\"1\":{\"750\":1}}],[\"媒体是否循环播放\",{\"1\":{\"748\":1}}],[\"媒体是否自动播放\",{\"1\":{\"748\":1}}],[\"媒体特性\",{\"1\":{\"651\":1}}],[\"媒体类型\",{\"1\":{\"294\":1,\"651\":1}}],[\"设计上要保持简洁和稳定性\",{\"1\":{\"2002\":1}}],[\"设计与实现\",{\"1\":{\"1870\":1,\"1900\":1,\"1935\":1}}],[\"设计图像素\",{\"1\":{\"650\":1}}],[\"设计图的像素\",{\"1\":{\"650\":1}}],[\"设想这样一个场景\",{\"1\":{\"1100\":1}}],[\"设立\",{\"1\":{\"956\":1}}],[\"设定线条与线条间接合处的样式\",{\"1\":{\"708\":1}}],[\"设置副作用的时候函数会自动执行一次\",{\"1\":{\"2002\":1}}],[\"设置渲染副作用\",{\"1\":{\"2000\":1}}],[\"设置位置索引\",{\"1\":{\"1977\":1}}],[\"设置值的能力\",{\"1\":{\"1938\":1}}],[\"设置数据值\",{\"1\":{\"1929\":1}}],[\"设置数组内的值\",{\"1\":{\"1925\":1,\"1993\":1}}],[\"设置新值\",{\"1\":{\"1929\":1}}],[\"设置新的键值对\",{\"1\":{\"1926\":1}}],[\"设置于\",{\"1\":{\"1664\":1}}],[\"设置淘宝源\",{\"1\":{\"1591\":1}}],[\"设置请求头部分为了解决跨域问题\",{\"1\":{\"1577\":1}}],[\"设置请求头\",{\"1\":{\"1577\":1}}],[\"设置请求方法和\",{\"1\":{\"1576\":1}}],[\"设置允许跨域\",{\"1\":{\"1576\":1,\"1577\":1,\"1578\":1}}],[\"设置不同的有效期\",{\"1\":{\"1541\":1}}],[\"设置时报错\",{\"1\":{\"1430\":1}}],[\"设置全局变量的值\",{\"1\":{\"1261\":1}}],[\"设置样式值\",{\"1\":{\"1259\":1}}],[\"设置属性时\",{\"1\":{\"1889\":1}}],[\"设置属性值\",{\"1\":{\"1886\":1,\"1889\":2,\"1906\":1,\"1985\":1}}],[\"设置属性\",{\"1\":{\"1232\":1}}],[\"设置多个样式\",{\"1\":{\"1206\":1}}],[\"设置多个同名的响应头\",{\"1\":{\"286\":1}}],[\"设置单个样式\",{\"1\":{\"1206\":1}}],[\"设置定时器\",{\"1\":{\"1177\":1}}],[\"设置元素节点的属性\",{\"1\":{\"1125\":1}}],[\"设置元素的\",{\"1\":{\"564\":1}}],[\"设置元素的浮动\",{\"0\":{\"560\":1}}],[\"设置或返回一个节点和它的文本内容\",{\"1\":{\"1114\":1}}],[\"设置当前\",{\"1\":{\"2001\":1}}],[\"设置当前转换的节点信息\",{\"1\":{\"1977\":1}}],[\"设置当前组件实例\",{\"1\":{\"1954\":1}}],[\"设置当前页面的\",{\"1\":{\"1093\":2}}],[\"设置当前网页的视距为800px\",{\"1\":{\"616\":1}}],[\"设置该属性的值时调用\",{\"1\":{\"1059\":1}}],[\"设置g标志后\",{\"1\":{\"919\":1}}],[\"设置特定的模式\",{\"1\":{\"919\":1}}],[\"设置毫秒值\",{\"1\":{\"877\":1}}],[\"设置秒值\",{\"1\":{\"877\":1}}],[\"设置分钟值\",{\"1\":{\"877\":1}}],[\"设置小时值\",{\"1\":{\"877\":1}}],[\"设置第几天\",{\"1\":{\"877\":1}}],[\"设置月份\",{\"1\":{\"877\":1}}],[\"设置年份\",{\"1\":{\"877\":2}}],[\"设置一个键值对\",{\"1\":{\"1929\":2}}],[\"设置一个\",{\"1\":{\"877\":1}}],[\"设置的是\",{\"1\":{\"877\":1}}],[\"设置的值必须是数组中的\",{\"1\":{\"196\":1}}],[\"设置目标对象的\",{\"1\":{\"764\":1}}],[\"设置自定义验证\",{\"1\":{\"760\":1}}],[\"设置视频的尺寸\",{\"1\":{\"750\":1}}],[\"设置快进或者快退速度的数字值\",{\"1\":{\"750\":1}}],[\"设置背景\",{\"0\":{\"723\":1}}],[\"设置图形轮廓的颜色\",{\"1\":{\"708\":1}}],[\"设置图形的填充颜色\",{\"1\":{\"708\":1}}],[\"设置矩形的尺寸\",{\"1\":{\"706\":1}}],[\"设置表单项自动获取焦点\",{\"1\":{\"670\":1}}],[\"设置垂直居中的一种方式\",{\"1\":{\"669\":1}}],[\"设置边框的合并\",{\"1\":{\"669\":1}}],[\"设置动画的执行状态\",{\"1\":{\"644\":1}}],[\"设置网页如何处理空白\",{\"1\":{\"625\":1}}],[\"设置文本内容\",{\"1\":{\"1872\":1}}],[\"设置文本修饰\",{\"1\":{\"625\":1}}],[\"设置文本所在元素的行高为整个区域的高度\",{\"1\":{\"601\":1}}],[\"设置字体的样式\",{\"1\":{\"623\":1}}],[\"设置font\",{\"1\":{\"621\":1}}],[\"设置原点在盒子坐标\",{\"1\":{\"619\":1}}],[\"设置原点在盒子右下角\",{\"1\":{\"619\":1}}],[\"设置原点在盒子左上角\",{\"1\":{\"619\":1}}],[\"设置原点在盒子中心\",{\"1\":{\"619\":1}}],[\"设置给\",{\"1\":{\"616\":1}}],[\"设置阴影的水平位置\",{\"1\":{\"613\":2}}],[\"设置上下的坐标为\",{\"1\":{\"603\":1}}],[\"设置盒子上下内边距相同\",{\"1\":{\"602\":1}}],[\"设置弹性容器\",{\"1\":{\"599\":1,\"604\":1}}],[\"设置弹性元素是否在弹性容器中自动换行\",{\"1\":{\"587\":1}}],[\"设置左右坐标为\",{\"1\":{\"598\":1}}],[\"设置左右margin为\",{\"1\":{\"597\":1}}],[\"设置为抽象组件\",{\"1\":{\"1800\":1}}],[\"设置为\",{\"1\":{\"598\":1,\"603\":1,\"1836\":1,\"1896\":1,\"1897\":1,\"1954\":1,\"1987\":1,\"2053\":1,\"2075\":1,\"2088\":1}}],[\"设置为行内的弹性容器\",{\"1\":{\"585\":1}}],[\"设置为块级弹性容器\",{\"1\":{\"585\":1}}],[\"设置相同伸缩系数\",{\"1\":{\"583\":1}}],[\"设置清除浮动以后\",{\"1\":{\"565\":1}}],[\"设置浮动以后元素会向父元素的左侧或右侧移动\",{\"1\":{\"561\":1}}],[\"设置内容区的高度\",{\"1\":{\"543\":1}}],[\"设置内容区的宽度\",{\"1\":{\"543\":1}}],[\"设置内容过多会增大报文体积\",{\"1\":{\"356\":1}}],[\"设置最大执行时间为1秒\",{\"1\":{\"504\":1}}],[\"设置最大执行时间限制\",{\"0\":{\"504\":1}}],[\"设置类实例中的某个属性值\",{\"1\":{\"405\":1}}],[\"设置session\",{\"1\":{\"355\":2}}],[\"设置正确的\",{\"1\":{\"350\":1}}],[\"设置cookie的name\",{\"1\":{\"355\":1}}],[\"设置cookie\",{\"1\":{\"350\":1}}],[\"设置在请求头中\",{\"1\":{\"346\":1}}],[\"设置了不同的属性时\",{\"1\":{\"1433\":1}}],[\"设置了的值也依然存在\",{\"1\":{\"769\":1}}],[\"设置了z\",{\"1\":{\"577\":1}}],[\"设置了\",{\"1\":{\"345\":1}}],[\"设置模板文件的存放位置\",{\"1\":{\"329\":1}}],[\"设置模板引擎\",{\"1\":{\"329\":1}}],[\"设置和使用中间件\",{\"1\":{\"321\":1}}],[\"设置资源类型\",{\"0\":{\"294\":1}}],[\"设置响应\",{\"1\":{\"1573\":1}}],[\"设置响应状态代码\",{\"1\":{\"307\":1}}],[\"设置响应状态描述\",{\"1\":{\"286\":1}}],[\"设置响应状态码\",{\"1\":{\"286\":2,\"307\":1}}],[\"设置响应头信息\",{\"1\":{\"285\":1,\"286\":1}}],[\"设置响应头\",{\"1\":{\"275\":1,\"307\":1,\"1576\":1,\"1577\":1,\"1578\":1}}],[\"设置响应体数据的类型\",{\"1\":{\"1578\":1}}],[\"设置响应体\",{\"1\":{\"273\":1,\"286\":1,\"307\":1,\"1576\":1,\"1577\":1}}],[\"设置响应体的数据类型以及字符集\",{\"1\":{\"271\":1}}],[\"设置接收的语言\",{\"1\":{\"269\":1}}],[\"设置接收的压缩方式\",{\"1\":{\"269\":1}}],[\"设置浏览器接收的数据类型\",{\"1\":{\"269\":1}}],[\"设置回调\",{\"1\":{\"212\":1}}],[\"设置连接关闭的回调\",{\"1\":{\"212\":1}}],[\"设置连接错误的回调\",{\"1\":{\"212\":1}}],[\"设置连接成功的回调\",{\"1\":{\"212\":1}}],[\"设置连接的回调\",{\"1\":{\"200\":1}}],[\"设置连接回调\",{\"1\":{\"191\":1}}],[\"设置必填项\",{\"1\":{\"194\":1}}],[\"设置集合中文档的属性以及属性值的类型\",{\"1\":{\"191\":1,\"212\":1}}],[\"设置\",{\"0\":{\"286\":1},\"1\":{\"159\":1,\"212\":1,\"345\":1,\"349\":2,\"355\":1,\"547\":1,\"555\":1,\"761\":1,\"1148\":1,\"1576\":1,\"1580\":1,\"1897\":2,\"1915\":1,\"2001\":1}}],[\"设置指纹\",{\"1\":{\"159\":1}}],[\"设置标签以后\",{\"1\":{\"14\":1}}],[\"智能手机的像素点远远小于计算机的像素点\",{\"1\":{\"649\":1}}],[\"户的可见区域中\",{\"1\":{\"648\":1}}],[\"户的身份\",{\"1\":{\"354\":1}}],[\"物理像素\",{\"1\":{\"646\":1,\"649\":2}}],[\"说白了就是参数的形式和上面不一样\",{\"1\":{\"875\":1}}],[\"说的就是屏幕中小点的数量\",{\"1\":{\"646\":1}}],[\"说明所对应的组件实例已经被卸载\",{\"1\":{\"2070\":1}}],[\"说明这是一个最顶层的\",{\"1\":{\"2068\":1}}],[\"说明需要更新组件的数据\",{\"1\":{\"2002\":1}}],[\"说明需要对其进行卸载\",{\"1\":{\"1966\":1}}],[\"说明需要对其进行挂载\",{\"1\":{\"1966\":1}}],[\"说明数据没有变化\",{\"1\":{\"1986\":1}}],[\"说明该路由记录需要更新\",{\"1\":{\"2073\":1}}],[\"说明该位置的节点不需要移动\",{\"1\":{\"1969\":1}}],[\"说明该节点需要移动\",{\"1\":{\"1969\":1}}],[\"说明该节点对应的真实\",{\"1\":{\"1962\":1}}],[\"说明索引为\",{\"1\":{\"1969\":1}}],[\"说明此节点为新增节点\",{\"1\":{\"1966\":1}}],[\"说明即将挂载的新节点是第一个子节点\",{\"1\":{\"1962\":1}}],[\"说明当前找不到对应的组件\",{\"1\":{\"2068\":1}}],[\"说明当前\",{\"1\":{\"1962\":1}}],[\"说明可以复用\",{\"1\":{\"1962\":2}}],[\"说明有旧子节点需要卸载\",{\"1\":{\"1961\":1}}],[\"说明有新子节点需要挂载\",{\"1\":{\"1961\":1}}],[\"说明组件已经被挂载\",{\"1\":{\"1954\":1}}],[\"说明新子节点不存在\",{\"1\":{\"1951\":1}}],[\"说明是卸载\",{\"1\":{\"1944\":1}}],[\"说明没找到\",{\"1\":{\"1923\":1,\"1924\":1,\"1993\":1}}],[\"说明没办法访问这个值了\",{\"1\":{\"1031\":1}}],[\"说明用户传递的是\",{\"1\":{\"1897\":1}}],[\"说明用户侧不再需要它了\",{\"1\":{\"1889\":1}}],[\"说明它是元素的文本子节点\",{\"1\":{\"1878\":1}}],[\"说明它是事件\",{\"1\":{\"1878\":1}}],[\"说明栈中存在与之对应的开始标签\",{\"1\":{\"1792\":1}}],[\"说明还有未提取出的标签属性\",{\"1\":{\"1792\":1}}],[\"说明从开始到\",{\"1\":{\"1792\":1}}],[\"说明html字符串以文本开头\",{\"1\":{\"1792\":1}}],[\"说明整个模板字符串都是文本\",{\"1\":{\"1792\":2}}],[\"说明如何保存和读取模型参数\",{\"1\":{\"1673\":1}}],[\"说明在冒泡阶段处理事件\",{\"1\":{\"1157\":1}}],[\"说明在捕获阶段处理事件\",{\"1\":{\"1157\":1}}],[\"说明处于冒泡阶段\",{\"1\":{\"1157\":1}}],[\"说明处于捕获阶段\",{\"1\":{\"1157\":1}}],[\"说明处于目标阶段\",{\"1\":{\"1157\":1}}],[\"说明\",{\"1\":{\"73\":1,\"176\":1,\"243\":1,\"249\":1,\"256\":1,\"264\":1,\"345\":1,\"789\":1,\"879\":1,\"884\":1,\"924\":1,\"1094\":1,\"1098\":1,\"1444\":1,\"1445\":1,\"1792\":2,\"1794\":3,\"1879\":2,\"1910\":1,\"1990\":1,\"2031\":1,\"2061\":1}}],[\"匀速运动\",{\"1\":{\"641\":1}}],[\"慢速开始\",{\"1\":{\"641\":1}}],[\"慢慢演变成了\",{\"1\":{\"219\":1}}],[\"远角\",{\"1\":{\"636\":1}}],[\"远边\",{\"1\":{\"636\":1}}],[\"远程加载\",{\"1\":{\"37\":1}}],[\"远程分支>\",{\"1\":{\"13\":1}}],[\"远程库的操作的命令\",{\"0\":{\"13\":1}}],[\"远程的\",{\"1\":{\"12\":1}}],[\"远程仓库\",{\"0\":{\"12\":1},\"1\":{\"14\":3}}],[\"近似的看成某个分数\",{\"1\":{\"1722\":1}}],[\"近似于拼串\",{\"1\":{\"1332\":1}}],[\"近角\",{\"1\":{\"636\":1}}],[\"近边\",{\"1\":{\"636\":1}}],[\"近大远小\",{\"1\":{\"616\":1}}],[\"椭圆\",{\"1\":{\"636\":1}}],[\"椭圆形\",{\"1\":{\"636\":1}}],[\"径向渐变\",{\"0\":{\"726\":1},\"1\":{\"636\":1}}],[\"线图\",{\"1\":{\"1649\":1}}],[\"线\",{\"1\":{\"711\":1}}],[\"线段末端以圆形结束\",{\"1\":{\"708\":1}}],[\"线段末端以方形结束\",{\"1\":{\"708\":2}}],[\"线条和填充颜色都是黑色\",{\"1\":{\"708\":1}}],[\"线性渐变的开头\",{\"1\":{\"636\":1}}],[\"线性渐变\",{\"0\":{\"725\":1},\"1\":{\"636\":1}}],[\"线程的数量\",{\"1\":{\"1655\":1}}],[\"线程机制与事件机制\",{\"0\":{\"1166\":1}}],[\"线程里面\",{\"1\":{\"408\":1}}],[\"线程是依附在进程里面的\",{\"1\":{\"408\":1}}],[\"线程是\",{\"1\":{\"407\":1}}],[\"线程是进程中的执行单元\",{\"1\":{\"407\":1}}],[\"线程与进程\",{\"0\":{\"1167\":1},\"1\":{\"407\":1}}],[\"线程主抓中央处理器执行代码的过程\",{\"1\":{\"407\":1}}],[\"线程\",{\"0\":{\"408\":1,\"1169\":1,\"1174\":1},\"1\":{\"245\":1,\"1554\":1}}],[\"线程池\",{\"1\":{\"408\":1}}],[\"线程池里的任务是通过队列和事件循环的机制来执行\",{\"1\":{\"224\":1}}],[\"线程池会处理长时间运行的任务\",{\"1\":{\"224\":1}}],[\"渐变可以同时指定多个颜色\",{\"1\":{\"636\":1}}],[\"渐变是图片\",{\"1\":{\"636\":1}}],[\"渐变\",{\"0\":{\"636\":1,\"724\":1,\"725\":1,\"726\":1}}],[\"处理函数结束后会自动销毁\",{\"1\":{\"1151\":1}}],[\"处于目标阶段\",{\"1\":{\"1141\":1}}],[\"处于目标阶段和事件冒泡阶段\",{\"1\":{\"1141\":1}}],[\"处填什么可以让下面的console输出true\",{\"1\":{\"978\":1}}],[\"处开始计算\",{\"1\":{\"631\":1}}],[\"处计算\",{\"1\":{\"631\":1}}],[\"处理导航守卫\",{\"0\":{\"2043\":1}}],[\"处理路由跳转的核心逻辑\",{\"1\":{\"2029\":1}}],[\"处理state\",{\"1\":{\"2020\":1}}],[\"处理actions\",{\"1\":{\"2020\":1}}],[\"处理函数式definestore\",{\"1\":{\"2020\":1}}],[\"处理完毕\",{\"1\":{\"1974\":1}}],[\"处理完相同的前置节点或后置节点后\",{\"1\":{\"1969\":1}}],[\"处理其他类型的\",{\"1\":{\"1951\":1}}],[\"处理上述事件\",{\"1\":{\"1950\":1}}],[\"处理提取出的信息\",{\"1\":{\"1792\":1}}],[\"处理文本之间的回车符\",{\"1\":{\"1791\":1}}],[\"处理所有输入\",{\"1\":{\"1777\":1}}],[\"处理硬编码问题\",{\"1\":{\"1777\":1}}],[\"处理数据集\",{\"0\":{\"1655\":1}}],[\"处理服务端返回的结果\",{\"1\":{\"1576\":1}}],[\"处理服务端响应\",{\"1\":{\"1575\":1}}],[\"处理结果\",{\"1\":{\"1575\":1}}],[\"处理图层\",{\"1\":{\"1556\":1}}],[\"处理回调逻辑\",{\"1\":{\"1177\":1}}],[\"处理异常\",{\"1\":{\"504\":1}}],[\"处理一边\",{\"1\":{\"150\":1}}],[\"处理\",{\"0\":{\"1930\":1,\"2045\":1},\"1\":{\"149\":1,\"1105\":4,\"1878\":1,\"1951\":1,\"1978\":1,\"2001\":1,\"2058\":2}}],[\"几个注意点\",{\"0\":{\"1418\":1,\"1457\":1}}],[\"几个表示方位的词来设置背景图片的位置\",{\"1\":{\"630\":1}}],[\"几周或几年\",{\"1\":{\"768\":1}}],[\"几乎所有人都在潜意识中认同了这一点\",{\"1\":{\"1569\":1}}],[\"几乎是一样的\",{\"1\":{\"222\":1}}],[\"几乎没有不同\",{\"1\":{\"216\":1}}],[\"几乎不再更新\",{\"1\":{\"23\":1}}],[\"衬线字体\",{\"1\":{\"621\":1}}],[\"没找到\",{\"1\":{\"1969\":1}}],[\"没改进\",{\"1\":{\"1705\":1}}],[\"没\",{\"1\":{\"1645\":2}}],[\"没什么用\",{\"1\":{\"621\":1}}],[\"没有进入到上面的\",{\"1\":{\"2061\":1}}],[\"没有刷新的\",{\"1\":{\"2051\":1}}],[\"没有消费该字符\",{\"1\":{\"1974\":1}}],[\"没有消息hold\",{\"1\":{\"1646\":2}}],[\"没有子节点\",{\"1\":{\"1951\":1}}],[\"没有必要为只读数据建立响应联系\",{\"1\":{\"1914\":1}}],[\"没有编译过程\",{\"1\":{\"1874\":1}}],[\"没有\",{\"1\":{\"1645\":2,\"1889\":2,\"2050\":1}}],[\"没有任何的变化\",{\"1\":{\"1635\":1}}],[\"没有任何输出\",{\"1\":{\"995\":1}}],[\"没有浏览历史\",{\"1\":{\"1572\":1}}],[\"没有浏览器\",{\"1\":{\"216\":1}}],[\"没有在旧的一组子节点中找到可复用的节点\",{\"1\":{\"1962\":1}}],[\"没有在副作用函数与被操作的目标字段之间建立明确的联系\",{\"1\":{\"1889\":1}}],[\"没有在\",{\"1\":{\"1493\":1}}],[\"没有后置守卫\",{\"1\":{\"1467\":1}}],[\"没有模板解析器\",{\"1\":{\"1427\":2}}],[\"没有配置input的\",{\"1\":{\"1357\":1}}],[\"没有值\",{\"0\":{\"1401\":1,\"1402\":1,\"1403\":1},\"1\":{\"1353\":2}}],[\"没有办法定义不想暴露出去的私有成员和占位符选择器\",{\"1\":{\"1313\":1}}],[\"没有则进行下一步\",{\"1\":{\"1308\":3}}],[\"没有端口信息\",{\"1\":{\"1093\":1,\"2051\":1}}],[\"没有定位\",{\"1\":{\"1087\":1}}],[\"没有块作用域\",{\"1\":{\"1018\":1}}],[\"没有块级作用域的概念\",{\"1\":{\"987\":1}}],[\"没有记录类型的元数据\",{\"1\":{\"1010\":1}}],[\"没有使用\",{\"1\":{\"958\":1,\"1403\":2}}],[\"没有初始值的情况\",{\"1\":{\"946\":1}}],[\"没有的元素也不会报错\",{\"1\":{\"862\":1}}],[\"没有返回\",{\"1\":{\"830\":1}}],[\"没有被\",{\"1\":{\"745\":1}}],[\"没有优先级\",{\"1\":{\"524\":1}}],[\"没有参数\",{\"1\":{\"487\":1}}],[\"没有对应的变量时显示原始字符串\",{\"1\":{\"482\":1}}],[\"没有输出\",{\"1\":{\"405\":1}}],[\"没有缓存性\",{\"1\":{\"1858\":1}}],[\"没有缓存\",{\"1\":{\"269\":1}}],[\"没有其他包依赖\",{\"1\":{\"93\":1}}],[\"没有环境变量\",{\"1\":{\"71\":1}}],[\"没有依赖\",{\"1\":{\"41\":1}}],[\"没有改变\",{\"1\":{\"29\":1}}],[\"没有修改\",{\"1\":{\"7\":1}}],[\"过期回调存在优先执行\",{\"1\":{\"1897\":1}}],[\"过期\",{\"1\":{\"1897\":1}}],[\"过期时间\",{\"1\":{\"345\":1,\"355\":1,\"368\":1}}],[\"过拟合风险较大的神经元将会有较大的概率被丢弃\",{\"1\":{\"1664\":1}}],[\"过去我们往往使用两种方式完成\",{\"1\":{\"1649\":1}}],[\"过去把消息队列简单分为宏队列和微队列\",{\"1\":{\"1560\":1}}],[\"过早的\",{\"1\":{\"1646\":1}}],[\"过程两组子节点中\",{\"1\":{\"1968\":1}}],[\"过程创建\",{\"1\":{\"1834\":1}}],[\"过程要干的事\",{\"1\":{\"1789\":1}}],[\"过程中\",{\"1\":{\"1368\":1}}],[\"过程对象\",{\"1\":{\"764\":1}}],[\"过滤符\",{\"1\":{\"1794\":1}}],[\"过滤器和注册的组件\",{\"1\":{\"1828\":1}}],[\"过滤器解析器\",{\"0\":{\"1794\":1}}],[\"过滤器虽然这看起来很方便\",{\"1\":{\"1519\":1}}],[\"过滤器的具体原理可以查看过滤器解析器\",{\"1\":{\"1397\":1}}],[\"过滤器的功能本质上用computed或者methods都可以实现\",{\"1\":{\"1397\":1}}],[\"过滤器也可以接收额外参数\",{\"1\":{\"1397\":1}}],[\"过滤器名\",{\"1\":{\"1397\":2}}],[\"过滤器\",{\"0\":{\"1397\":1}}],[\"过滤字符\",{\"1\":{\"1162\":1}}],[\"过滤方法\",{\"0\":{\"857\":1}}],[\"过闸机时\",{\"1\":{\"1036\":1}}],[\"过渡类名的更改\",{\"1\":{\"1519\":1}}],[\"过渡效果的延迟\",{\"1\":{\"641\":1}}],[\"过渡的时序函数\",{\"1\":{\"641\":1}}],[\"过渡和动画无法对所有的\",{\"1\":{\"640\":1}}],[\"过渡\",{\"0\":{\"639\":1,\"641\":1},\"1\":{\"619\":1}}],[\"缩小打包体积\",{\"1\":{\"1875\":1}}],[\"缩进\",{\"1\":{\"1979\":1}}],[\"缩进规则\",{\"1\":{\"1250\":1}}],[\"缩进式\",{\"1\":{\"1247\":1}}],[\"缩略语\",{\"0\":{\"665\":1}}],[\"缩放等变形\",{\"1\":{\"1526\":1}}],[\"缩放一般我们用它来增减图形在\",{\"1\":{\"720\":1}}],[\"缩放参照于画布默认的尺寸\",{\"1\":{\"703\":1}}],[\"缩放\",{\"0\":{\"618\":1}}],[\"缩写\",{\"1\":{\"260\":1}}],[\"旋转的中心点始终是\",{\"1\":{\"720\":1}}],[\"旋转的角度\",{\"1\":{\"720\":1}}],[\"旋转指定的角度\",{\"1\":{\"617\":1}}],[\"旋转\",{\"0\":{\"617\":1}}],[\"经历上面的\",{\"1\":{\"2054\":1}}],[\"经纬度坐标的表示可以使用以下两种方式\",{\"1\":{\"1101\":1}}],[\"经度\",{\"1\":{\"1101\":1}}],[\"经度坐标和一些其他元数据组成\",{\"1\":{\"1099\":1}}],[\"经典真题\",{\"0\":{\"955\":1}}],[\"经常可以看到\",{\"1\":{\"1078\":1}}],[\"经常将函数作为实参传递给另一函数\",{\"1\":{\"931\":1}}],[\"经常有人存在一个误区\",{\"1\":{\"905\":1}}],[\"经常有人会把\",{\"1\":{\"895\":1}}],[\"经常被用来模拟队列和栈的行为\",{\"1\":{\"859\":1}}],[\"经常被用在函数有很多可选参数的时候\",{\"1\":{\"833\":1}}],[\"经常我们需要使用类似于\",{\"1\":{\"746\":1}}],[\"经验证现已失效\",{\"1\":{\"616\":1}}],[\"经过\",{\"1\":{\"2058\":1}}],[\"经过下面这行代码处理之后\",{\"1\":{\"2054\":1}}],[\"经过上述所有处理逻辑处理过后\",{\"1\":{\"1792\":1}}],[\"经过不断的演化\",{\"1\":{\"1622\":1}}],[\"经过社区的激烈讨论\",{\"1\":{\"24\":1}}],[\"经过分析\",{\"1\":{\"24\":1}}],[\"警告信息详细导致框架体积增大\",{\"1\":{\"1875\":1}}],[\"警告\",{\"1\":{\"616\":1,\"1461\":1}}],[\"人均消费\",{\"1\":{\"1740\":1}}],[\"人\",{\"1\":{\"1554\":1}}],[\"人们使用的办法是在资源路径后面加入版本号来获取新版本的文件\",{\"1\":{\"1543\":1}}],[\"人们认识到\",{\"1\":{\"24\":1}}],[\"人名单\",{\"1\":{\"669\":1}}],[\"人眼距离网页的距离\",{\"1\":{\"616\":1}}],[\"距离英国格林威治以东或以西的数值表示\",{\"1\":{\"1101\":1}}],[\"距离赤道以北或以南的数值表示\",{\"1\":{\"1101\":1}}],[\"距离\",{\"1\":{\"1087\":1}}],[\"距离越大\",{\"1\":{\"616\":1}}],[\"距离原始位置的变动\",{\"1\":{\"569\":1}}],[\"轴位移量\",{\"1\":{\"765\":2}}],[\"轴为基准\",{\"1\":{\"716\":1}}],[\"轴方向重复平铺\",{\"1\":{\"629\":2}}],[\"轴方向平移\",{\"1\":{\"616\":3}}],[\"轴双方向重复平铺\",{\"1\":{\"629\":1}}],[\"轴\",{\"1\":{\"629\":1}}],[\"轴的延伸距离\",{\"1\":{\"733\":1}}],[\"轴的旋转时\",{\"1\":{\"617\":1}}],[\"轴的位置\",{\"1\":{\"616\":1}}],[\"轴平移属于立体效果\",{\"1\":{\"616\":1}}],[\"轴平移指的是调整元素在\",{\"1\":{\"616\":1}}],[\"轴平移比较特殊\",{\"1\":{\"616\":1}}],[\"轴上的排列\",{\"0\":{\"578\":1}}],[\"轴上排列的先后顺序\",{\"1\":{\"576\":1}}],[\"沿着\",{\"1\":{\"616\":3,\"629\":2}}],[\"阴影\",{\"0\":{\"733\":1},\"2\":{\"638\":1}}],[\"阴影的扩散半径\",{\"1\":{\"613\":1}}],[\"阴影的模糊半径\",{\"1\":{\"613\":1}}],[\"阴影不会影响页面布局\",{\"1\":{\"613\":1}}],[\"圆\",{\"1\":{\"716\":1}}],[\"圆形\",{\"1\":{\"636\":2}}],[\"圆角设置的圆的半径大小\",{\"1\":{\"612\":1}}],[\"圆角\",{\"0\":{\"612\":1},\"1\":{\"708\":1}}],[\"圆环\",{\"1\":{\"535\":1}}],[\"轮廓和边框不同的点\",{\"1\":{\"611\":1}}],[\"轮廓\",{\"0\":{\"611\":1}}],[\"轮询判断文件的最后编辑时间是否变化\",{\"1\":{\"157\":1}}],[\"背景引入\",{\"0\":{\"1687\":1}}],[\"背景相关的简写属性\",{\"0\":{\"635\":1}}],[\"背景也随之滚动\",{\"1\":{\"634\":1}}],[\"背景只会出现在内容区\",{\"1\":{\"632\":1}}],[\"背景不会出现在边框\",{\"1\":{\"632\":1}}],[\"背景会固定在页面中\",{\"1\":{\"634\":1}}],[\"背景会出现在边框的下边\",{\"1\":{\"632\":1}}],[\"背景会沿着\",{\"1\":{\"629\":1}}],[\"背景的范围\",{\"0\":{\"632\":1}}],[\"背景色\",{\"1\":{\"628\":1}}],[\"背景图片会跟随元素移动\",{\"1\":{\"634\":1}}],[\"背景图片是否跟随元素移动\",{\"0\":{\"634\":1}}],[\"背景图片的大小\",{\"0\":{\"633\":1}}],[\"背景图片的偏移量从\",{\"1\":{\"631\":2}}],[\"背景图片的偏移量计算的原点\",{\"0\":{\"631\":1}}],[\"背景图片的位置\",{\"0\":{\"630\":1}}],[\"背景图片\",{\"0\":{\"628\":1},\"1\":{\"636\":1}}],[\"背景图片等\",{\"1\":{\"609\":1}}],[\"背景\",{\"0\":{\"626\":1},\"2\":{\"638\":1}}],[\"背景颜色可以延伸至元素的内容和内边距盒子的下面\",{\"1\":{\"627\":1}}],[\"背景颜色\",{\"0\":{\"627\":1},\"1\":{\"609\":1}}],[\"阮一峰\",{\"1\":{\"605\":1,\"958\":1}}],[\"阮一峰的网络日志\",{\"1\":{\"78\":1}}],[\"达到类似的效果\",{\"1\":{\"602\":1}}],[\"垂直偏移量\",{\"1\":{\"613\":1}}],[\"垂直居中\",{\"0\":{\"600\":1}}],[\"垂直方向变量\",{\"1\":{\"630\":1}}],[\"垂直方向缩放\",{\"1\":{\"618\":1}}],[\"垂直方向布局的等式的也必须要满足\",{\"1\":{\"574\":1}}],[\"垂直方向的布局\",{\"0\":{\"557\":1}}],[\"垂直方向的内边距\",{\"1\":{\"540\":1}}],[\"垂直方向\",{\"1\":{\"552\":1}}],[\"容斥问题\",{\"0\":{\"1751\":1}}],[\"容器里的代码被称为\",{\"1\":{\"1350\":1}}],[\"容器里的代码依然符合\",{\"1\":{\"1350\":1}}],[\"容器属性\",{\"1\":{\"590\":1}}],[\"容易被非法站点恶意调用\",{\"1\":{\"1614\":1}}],[\"容易被客户端篡改\",{\"1\":{\"350\":1}}],[\"容易产生安全隐患\",{\"1\":{\"1614\":1}}],[\"容易导致\",{\"1\":{\"1400\":1}}],[\"容易理解\",{\"1\":{\"291\":1}}],[\"容易上手\",{\"1\":{\"175\":1}}],[\"项是否存在\",{\"1\":{\"2081\":1}}],[\"项<\",{\"1\":{\"1239\":2}}],[\"项的间距\",{\"1\":{\"588\":2}}],[\"项之间的间距\",{\"1\":{\"588\":1}}],[\"项目中\",{\"1\":{\"2053\":1}}],[\"项目中可能需要删除某些不需要的包\",{\"1\":{\"76\":1}}],[\"项目中可能会遇到版本不匹配的情况\",{\"1\":{\"75\":1}}],[\"项目分包\",{\"1\":{\"2040\":1}}],[\"项目\",{\"1\":{\"2040\":1}}],[\"项目根目录按照上述方式安装\",{\"1\":{\"2009\":1}}],[\"项目公用的工具代码\",{\"1\":{\"1782\":1}}],[\"项目源代码\",{\"1\":{\"1782\":1}}],[\"项目属性\",{\"1\":{\"590\":1}}],[\"项目的配置文件\",{\"1\":{\"2040\":1}}],[\"项目的第一行文字的基线对齐\",{\"1\":{\"589\":1}}],[\"项目的包管理工具\",{\"1\":{\"89\":1}}],[\"项目描述文件\",{\"1\":{\"332\":1}}],[\"项目运行过程中\",{\"1\":{\"191\":1}}],[\"侧轴\",{\"1\":{\"586\":1}}],[\"真实\",{\"1\":{\"1874\":3}}],[\"真实开发中只有一个\",{\"1\":{\"1350\":1}}],[\"真实环境多种多样\",{\"1\":{\"990\":1}}],[\"真题解答\",{\"0\":{\"959\":1,\"1031\":1}}],[\"真等高\",{\"0\":{\"583\":1}}],[\"真正\",{\"1\":{\"2058\":1}}],[\"真正的按需编译\",{\"1\":{\"1483\":1}}],[\"真正的转换需要依托于插件完成\",{\"1\":{\"146\":1}}],[\"真正运行模块代码的辅助函数\",{\"1\":{\"37\":1}}],[\"哪台计算机\",{\"1\":{\"1626\":1}}],[\"哪些是预检请求\",{\"1\":{\"1609\":1}}],[\"哪些不需要\",{\"1\":{\"1533\":1}}],[\"哪些资源需要加入到缓存\",{\"1\":{\"1533\":1}}],[\"哪些元素应该出现在其他元素顶部\",{\"1\":{\"576\":1}}],[\"哪个服务\",{\"1\":{\"1626\":1}}],[\"哪个程序\",{\"1\":{\"1626\":1}}],[\"哪个样式会生效\",{\"1\":{\"1433\":1}}],[\"哪个工具都可以\",{\"1\":{\"89\":1}}],[\"哪怕服务器找不到\",{\"1\":{\"2050\":1}}],[\"哪怕存在默认值也得按照顺序进行传参\",{\"1\":{\"1335\":1}}],[\"哪怕有同名的变量也没问题\",{\"1\":{\"948\":1}}],[\"哪里声明定义\",{\"1\":{\"1015\":1}}],[\"唯一标识\",{\"1\":{\"1825\":1}}],[\"唯一区别是\",{\"1\":{\"995\":1}}],[\"唯一的不同就是它并没有\",{\"1\":{\"703\":1}}],[\"唯一不同的是固定定位永远参照于浏览器的视口\",{\"1\":{\"571\":1}}],[\"唯一值\",{\"0\":{\"197\":1}}],[\"触发的形式包括\",{\"1\":{\"2071\":1}}],[\"触发之后会执行\",{\"1\":{\"2061\":2}}],[\"触发了\",{\"1\":{\"2031\":1}}],[\"触发了它的\",{\"1\":{\"2031\":1}}],[\"触发守卫\",{\"1\":{\"2029\":1}}],[\"触发beforemount钩子函数\",{\"1\":{\"2002\":1}}],[\"触发beforemount生命周期钩子函数\",{\"1\":{\"1806\":1}}],[\"触发响应的情况\",{\"1\":{\"1906\":1}}],[\"触发响应式\",{\"1\":{\"1804\":1}}],[\"触发读取操作\",{\"1\":{\"1897\":1}}],[\"触发执行的副作用函数与当前正在执行的副作用函数相同\",{\"1\":{\"1892\":2}}],[\"触发副作用函数重新执行时有能力决定副作用函数执行的时机\",{\"1\":{\"1893\":1}}],[\"触发副作用函数重新执行\",{\"1\":{\"1889\":1}}],[\"触发计算属性的getter\",{\"1\":{\"1859\":1}}],[\"触发属性的setter\",{\"1\":{\"1855\":1}}],[\"触发子组件视图更新\",{\"1\":{\"1841\":1}}],[\"触发父组件的视图更新\",{\"1\":{\"1841\":1}}],[\"触发自定义事件\",{\"1\":{\"1437\":1}}],[\"触发\",{\"1\":{\"1358\":1,\"2002\":2,\"2029\":1,\"2034\":2,\"2071\":1}}],[\"触发input事件\",{\"1\":{\"1357\":1}}],[\"触发load事件\",{\"1\":{\"1150\":1}}],[\"触发事件就只能够通过点击鼠标来触发么\",{\"1\":{\"1147\":1}}],[\"触发事件回调后开始\",{\"1\":{\"1037\":1}}],[\"触发一次\",{\"1\":{\"752\":1}}],[\"触发方式可以参阅\",{\"1\":{\"564\":1}}],[\"触发定时器的时间\",{\"1\":{\"408\":1}}],[\"丢失元素宽度\",{\"1\":{\"564\":1}}],[\"隔级比重=中集合小集合​×大集合中集合​隔级比重=大集合小集合​÷大集合中集合​\",{\"1\":{\"1733\":1,\"1753\":1}}],[\"隔级比重\",{\"1\":{\"1733\":1,\"1753\":2}}],[\"隔年增长率\",{\"1\":{\"1726\":1,\"1728\":1}}],[\"隔离样式\",{\"1\":{\"1433\":1}}],[\"隔离变量\",{\"1\":{\"1019\":1}}],[\"隔开\",{\"1\":{\"621\":1,\"635\":1,\"641\":1,\"931\":1}}],[\"隔绝了它内部和外部的联系\",{\"1\":{\"564\":1}}],[\"隔行换色效果\",{\"1\":{\"287\":1}}],[\"区分\",{\"1\":{\"967\":2}}],[\"区间量词\",{\"1\":{\"902\":1}}],[\"区块格式化上下文\",{\"1\":{\"564\":1}}],[\"区域内\",{\"1\":{\"720\":1}}],[\"区域\",{\"1\":{\"564\":1}}],[\"区别不大\",{\"1\":{\"2002\":1,\"2003\":1}}],[\"区别就出来了\",{\"1\":{\"1152\":1}}],[\"区别在于\",{\"1\":{\"1087\":2}}],[\"区别在于一个是从数组开头开始找\",{\"1\":{\"856\":1}}],[\"区别作用域与执行上下文\",{\"0\":{\"1020\":1}}],[\"区别如下\",{\"1\":{\"861\":1,\"1415\":1}}],[\"区别于默认成员\",{\"1\":{\"405\":1}}],[\"区别\",{\"0\":{\"1037\":1,\"1382\":1},\"1\":{\"242\":1,\"369\":1,\"402\":1,\"989\":2,\"1020\":1}}],[\"浮动布局\",{\"1\":{\"580\":1}}],[\"浮动的影响\",{\"1\":{\"565\":1}}],[\"浮动的特点\",{\"0\":{\"561\":1}}],[\"浮动或者绝对定位\",{\"1\":{\"564\":1}}],[\"浮动带来的问题\",{\"0\":{\"562\":1}}],[\"浮动目前来讲它的主要作用就是让页面中的元素可以水平排列\",{\"1\":{\"561\":1}}],[\"浮动元素不会盖住文字\",{\"1\":{\"561\":1}}],[\"浮动元素不会超过它上边的浮动的兄弟元素\",{\"1\":{\"561\":1}}],[\"浮动元素向左或向右移动时\",{\"1\":{\"561\":1}}],[\"浮动元素会完全\",{\"1\":{\"561\":1}}],[\"浮动\",{\"0\":{\"559\":1},\"1\":{\"580\":1},\"2\":{\"607\":1}}],[\"浮点型\",{\"1\":{\"382\":1}}],[\"较完善响应式的实现\",{\"0\":{\"1887\":1}}],[\"较少项的比重\",{\"1\":{\"1751\":1}}],[\"较大值\",{\"1\":{\"558\":1}}],[\"较好\",{\"1\":{\"356\":1}}],[\"溢出内容将会被裁剪不会显示\",{\"1\":{\"557\":1}}],[\"溢出的内容将下移到新的一行\",{\"1\":{\"552\":1}}],[\"举一个具体的例子\",{\"1\":{\"1158\":1}}],[\"举一个例子\",{\"1\":{\"918\":1}}],[\"举个例子\",{\"1\":{\"906\":1,\"1156\":1,\"1200\":1,\"1309\":1,\"2045\":1,\"2047\":2,\"2099\":1,\"2100\":1}}],[\"举个例子方便大家理解\",{\"1\":{\"72\":1}}],[\"举例\",{\"0\":{\"1797\":1},\"1\":{\"821\":1,\"1353\":1}}],[\"举例说明\",{\"0\":{\"555\":1,\"1688\":1,\"1802\":1}}],[\"水平方向缩放\",{\"1\":{\"618\":1}}],[\"水平方向的偏移量\",{\"1\":{\"630\":1}}],[\"水平方向的布局等式就需要添加left\",{\"1\":{\"573\":1}}],[\"水平方向的布局\",{\"1\":{\"561\":1}}],[\"水平方向的内边距\",{\"1\":{\"540\":1}}],[\"水平偏移量\",{\"1\":{\"613\":1}}],[\"水平居中\",{\"0\":{\"595\":1,\"596\":1}}],[\"水平布局的等式便不需要强制成立\",{\"1\":{\"561\":1}}],[\"水平布局必须要满足以下的等式\",{\"1\":{\"553\":1}}],[\"共用\",{\"1\":{\"1931\":1,\"1932\":1}}],[\"共接受两个参数\",{\"1\":{\"893\":1}}],[\"共同决定\",{\"1\":{\"547\":1}}],[\"共享\",{\"1\":{\"361\":1}}],[\"顺差\",{\"1\":{\"1752\":1}}],[\"顺序地扫描整个\",{\"1\":{\"1974\":1}}],[\"顺序执行then中注册的回调\",{\"1\":{\"1777\":1}}],[\"顺序执行其它代码\",{\"1\":{\"1015\":1}}],[\"顺序按照页面文档的树形目录结构进行\",{\"1\":{\"528\":1}}],[\"顺便要说一下的是\",{\"1\":{\"863\":1}}],[\"顺便一提的是\",{\"1\":{\"832\":1}}],[\"顺带一提的是\",{\"1\":{\"786\":1}}],[\"顺时针依次排列\",{\"1\":{\"1731\":1}}],[\"顺时针\",{\"1\":{\"544\":1,\"716\":1,\"1154\":1}}],[\"宽高为\",{\"1\":{\"714\":1}}],[\"宽高\",{\"1\":{\"640\":1}}],[\"宽高默认由内容决定\",{\"1\":{\"541\":1}}],[\"宽高设置不生效\",{\"1\":{\"540\":1}}],[\"宽度等于左右侧栏宽度\",{\"1\":{\"580\":1}}],[\"宽度固定值\",{\"1\":{\"556\":1}}],[\"宽度和高度用来设置\",{\"1\":{\"547\":2}}],[\"宽度\",{\"1\":{\"388\":1,\"539\":1,\"1663\":1}}],[\"边界条件\",{\"1\":{\"1923\":1}}],[\"边界信号量\",{\"1\":{\"408\":1}}],[\"边框会渲染在\",{\"1\":{\"707\":2}}],[\"边框会在\",{\"1\":{\"706\":1}}],[\"边框宽度是平均分在偏移位置的两侧\",{\"1\":{\"707\":1}}],[\"边框像素渲染问题\",{\"0\":{\"707\":1}}],[\"边框模拟\",{\"1\":{\"582\":1}}],[\"边框的样式\",{\"1\":{\"544\":1}}],[\"边框的颜色\",{\"1\":{\"544\":1}}],[\"边框的宽度\",{\"1\":{\"544\":1}}],[\"边框的大小会影响到整个盒子的大小\",{\"1\":{\"544\":1}}],[\"边框里边属于盒子内部\",{\"1\":{\"544\":1}}],[\"边框属于盒子边缘\",{\"1\":{\"544\":1}}],[\"边框\",{\"0\":{\"544\":1},\"1\":{\"540\":2,\"542\":1,\"631\":1}}],[\"块定位到特定元素或媒体查询非常有用\",{\"1\":{\"1314\":1}}],[\"块中\",{\"1\":{\"1262\":1}}],[\"块引用\",{\"1\":{\"662\":1}}],[\"块的宽高被内容撑开\",{\"1\":{\"570\":1}}],[\"块还是块\",{\"1\":{\"569\":1}}],[\"块级作用域是指每个代码块也可以有自己的作用域\",{\"1\":{\"948\":1}}],[\"块级作用域\",{\"1\":{\"786\":1}}],[\"块级格式化上下文\",{\"0\":{\"564\":1}}],[\"块级元素通常用于展示页面上结构化的内容\",{\"1\":{\"661\":1}}],[\"块级元素在页面中以块的形式展现\",{\"1\":{\"661\":1}}],[\"块级元素\",{\"0\":{\"661\":1}}],[\"块级元素是垂直组织的\",{\"1\":{\"552\":1}}],[\"块级元素按照基于其父元素的书写模式\",{\"1\":{\"552\":1}}],[\"块和内联布局\",{\"1\":{\"548\":1}}],[\"块盒的宽度和高度默认都被内容撑开\",{\"1\":{\"541\":1}}],[\"块盒不再独占页面的一行\",{\"1\":{\"541\":1}}],[\"块盒特点\",{\"1\":{\"540\":1}}],[\"块盒会在页面中\",{\"1\":{\"540\":1}}],[\"块盒\",{\"1\":{\"540\":1,\"541\":1}}],[\"块儿\",{\"1\":{\"252\":1}}],[\"盒子阴影\",{\"0\":{\"613\":1}}],[\"盒子位置\",{\"1\":{\"609\":1}}],[\"盒子的水平布局\",{\"0\":{\"553\":1}}],[\"盒子的包含块\",{\"1\":{\"539\":1}}],[\"盒子可见框的大小由\",{\"1\":{\"547\":1}}],[\"盒子尺寸\",{\"0\":{\"547\":1}}],[\"盒模型阴影\",{\"0\":{\"733\":1}}],[\"盒模型的显示\",{\"0\":{\"548\":1}}],[\"盒模型应用于块盒\",{\"1\":{\"542\":1}}],[\"盒模型\",{\"0\":{\"538\":1,\"542\":1},\"1\":{\"542\":1},\"2\":{\"550\":1}}],[\"绝\",{\"1\":{\"1705\":1}}],[\"绝大部分的选择器和\",{\"1\":{\"1203\":1}}],[\"绝大部分情况下\",{\"1\":{\"539\":1}}],[\"绝对表述\",{\"1\":{\"1701\":1}}],[\"绝对定位布局\",{\"1\":{\"580\":1}}],[\"绝对定位元素的水平居中\",{\"0\":{\"598\":1}}],[\"绝对定位元素的布局\",{\"0\":{\"573\":1}}],[\"绝对定位元素是相对于\",{\"1\":{\"570\":1}}],[\"绝对定位会使元素提升一个层级\",{\"1\":{\"570\":1}}],[\"绝对定位会改变元素的性质\",{\"1\":{\"570\":1}}],[\"绝对定位的垂直居中\",{\"0\":{\"603\":1}}],[\"绝对定位的特点\",{\"1\":{\"570\":1}}],[\"绝对定位的包含块\",{\"1\":{\"570\":1}}],[\"绝对定位\",{\"0\":{\"570\":1},\"1\":{\"539\":1}}],[\"绝对长度单位\",{\"1\":{\"534\":1}}],[\"绝对值运算\",{\"1\":{\"395\":1}}],[\"绝对路径可靠性强\",{\"1\":{\"291\":1}}],[\"绝对路径\",{\"0\":{\"291\":1},\"1\":{\"261\":1,\"290\":1}}],[\"亮度\",{\"1\":{\"535\":1}}],[\"饱和度\",{\"1\":{\"535\":1}}],[\"半径为\",{\"1\":{\"726\":2}}],[\"半透明\",{\"1\":{\"535\":1}}],[\"半亩方塘一鉴开\",{\"1\":{\"247\":1}}],[\"蓝色\",{\"1\":{\"535\":1}}],[\"绿色\",{\"1\":{\"535\":1}}],[\"红色警戒\",{\"1\":{\"1446\":1}}],[\"红色画圈部分是我点击的位置\",{\"1\":{\"1152\":2}}],[\"红色绿色蓝色\",{\"1\":{\"535\":1}}],[\"红色\",{\"1\":{\"535\":1}}],[\"颜色可以写成\",{\"1\":{\"1266\":1}}],[\"颜色选择器\",{\"1\":{\"757\":1}}],[\"颜色值\",{\"1\":{\"708\":1,\"725\":1,\"733\":1}}],[\"颜色沿着一条直线发生变化\",{\"1\":{\"636\":1}}],[\"颜色\",{\"1\":{\"622\":1,\"636\":3,\"640\":1}}],[\"颜色的亮度\",{\"1\":{\"535\":1}}],[\"颜色的浓度\",{\"1\":{\"535\":1}}],[\"颜色浓度通过\",{\"1\":{\"535\":1}}],[\"颜色名称\",{\"1\":{\"1266\":1}}],[\"颜色名称被解析为\",{\"1\":{\"1265\":1}}],[\"颜色名\",{\"1\":{\"535\":1}}],[\"颜色单位\",{\"0\":{\"535\":1}}],[\"长\",{\"1\":{\"1705\":1}}],[\"长轮询有效的解决了\",{\"1\":{\"1646\":1}}],[\"长轮询是服务器收到请求后如果有数据\",{\"1\":{\"1646\":1}}],[\"长轮询\",{\"0\":{\"1646\":1},\"1\":{\"1649\":1}}],[\"长连接\",{\"0\":{\"1638\":1}}],[\"长时间的缓存该文件\",{\"1\":{\"1543\":1}}],[\"长得几乎是一模一样\",{\"1\":{\"1250\":1}}],[\"长属性名\",{\"1\":{\"924\":1}}],[\"长着锋利的牙齿\",{\"1\":{\"666\":1}}],[\"长方形\",{\"1\":{\"636\":1}}],[\"长度为新的一组子节点中剩余未处理节点的数量\",{\"1\":{\"1969\":1}}],[\"长度为新子节点中尚未处理的节点数\",{\"1\":{\"1969\":1}}],[\"长度\",{\"1\":{\"633\":1,\"748\":1}}],[\"长度单位\",{\"0\":{\"534\":1}}],[\"长列表无限滚动方案\",{\"0\":{\"512\":1}}],[\"布局组件\",{\"1\":{\"2068\":1}}],[\"布局阶段会依次遍历\",{\"1\":{\"1526\":1}}],[\"布局完成后会得到布局树\",{\"1\":{\"1526\":1}}],[\"布局和渲染模块\",{\"1\":{\"1172\":1}}],[\"布局视口\",{\"1\":{\"648\":1}}],[\"布局\",{\"1\":{\"580\":2,\"1526\":2,\"1556\":1},\"2\":{\"607\":1}}],[\"布局下面的元素会上移\",{\"1\":{\"564\":1}}],[\"布局模型中的一种默认布局方式\",{\"1\":{\"539\":1}}],[\"布局相关等的这些样式都不会被继承\",{\"1\":{\"527\":1}}],[\"布尔\",{\"1\":{\"826\":1}}],[\"布尔类型\",{\"1\":{\"796\":1}}],[\"布尔型\",{\"1\":{\"382\":1}}],[\"布尔值为true\",{\"1\":{\"1462\":1}}],[\"布尔值还可以由比较运算符和关系操作符以及许多内置函数\",{\"1\":{\"1274\":1}}],[\"布尔值|true\",{\"1\":{\"1227\":1}}],[\"布尔值是逻辑值\",{\"1\":{\"1274\":1}}],[\"布尔值是\",{\"1\":{\"980\":1}}],[\"布尔值里面\",{\"1\":{\"813\":1}}],[\"布尔值变量变成数值变量\",{\"1\":{\"806\":2}}],[\"布尔值属性最好使用\",{\"1\":{\"686\":1}}],[\"布尔值属性\",{\"1\":{\"683\":1}}],[\"布尔值属性与非布尔值属性\",{\"0\":{\"682\":1}}],[\"布尔值\",{\"1\":{\"192\":1,\"923\":3,\"924\":1,\"1123\":1,\"1145\":1,\"1792\":1}}],[\"甚至createapp实际调用的也是渲染器中定义的函数\",{\"1\":{\"1944\":1}}],[\"甚至都可以在被导入的那个文件中去使用\",{\"1\":{\"1313\":1}}],[\"甚至\",{\"1\":{\"1243\":1}}],[\"甚至无从下手调试\",{\"1\":{\"1155\":1}}],[\"甚至也单击了整个页面\",{\"1\":{\"1138\":1}}],[\"甚至数学领域\",{\"1\":{\"1033\":1}}],[\"甚至我们还可以使用前面小节所介绍过的箭头函数\",{\"1\":{\"944\":1}}],[\"甚至可以显示出海拔信息\",{\"1\":{\"1100\":1}}],[\"甚至可以给整个解构表达式设置一个默认值\",{\"1\":{\"833\":1}}],[\"甚至可以和后端语言媲美\",{\"1\":{\"24\":1}}],[\"甚至超过内联样式\",{\"1\":{\"524\":1}}],[\"匹配如下路由路径\",{\"1\":{\"2028\":1}}],[\"匹配所有以\",{\"1\":{\"1445\":2}}],[\"匹配所有的请求方法\",{\"1\":{\"304\":1}}],[\"匹配特定的混合\",{\"1\":{\"1337\":1}}],[\"匹配时返回\",{\"1\":{\"925\":1}}],[\"匹配字符串开始和结尾的\",{\"1\":{\"921\":1}}],[\"匹配以下的字符串\",{\"1\":{\"918\":1}}],[\"匹配成对的标签\",{\"1\":{\"912\":1}}],[\"匹配项开始的索引值以及原始的字符串等更加详细的信息\",{\"1\":{\"907\":1}}],[\"匹配任意字符\",{\"1\":{\"905\":1}}],[\"匹配之前的第一\",{\"1\":{\"902\":1}}],[\"匹配至少\",{\"1\":{\"902\":1,\"906\":2,\"908\":2}}],[\"匹配对象\",{\"1\":{\"902\":1}}],[\"匹配\",{\"1\":{\"902\":5,\"906\":1,\"908\":1,\"918\":1}}],[\"匹配模式\",{\"0\":{\"1337\":1},\"1\":{\"900\":1,\"901\":2,\"919\":1}}],[\"匹配与提供的列表中的任何选择器匹配的任何元素\",{\"1\":{\"520\":1}}],[\"此函数执行会返回对应的\",{\"1\":{\"2018\":1}}],[\"此序列表示其中节点的相对位置没有发生变化\",{\"1\":{\"1969\":1}}],[\"此节点为需要删除的节点\",{\"1\":{\"1789\":1}}],[\"此类适用\",{\"1\":{\"1721\":1}}],[\"此类除法适用\",{\"1\":{\"1721\":2}}],[\"此指令保持在节点上直到关联实例结束编译\",{\"1\":{\"1404\":1}}],[\"此处省略\",{\"1\":{\"1956\":1}}],[\"此处不做讲解\",{\"1\":{\"1576\":1}}],[\"此处由于监视的是reactive素定义的对象中的某个属性\",{\"1\":{\"1497\":1}}],[\"此处一定不要写\",{\"1\":{\"1458\":2}}],[\"此处的放行指的是进入下一次循环\",{\"1\":{\"2029\":1}}],[\"此处的deep配置不再奏效\",{\"1\":{\"1497\":1}}],[\"此处的this是vm\",{\"1\":{\"1376\":1}}],[\"此处的this是vue实例对象\",{\"1\":{\"1361\":1}}],[\"此处的居中指的是盒子在其包含块中居中\",{\"1\":{\"594\":1}}],[\"此处我们只是拿v\",{\"1\":{\"1353\":1}}],[\"此\",{\"1\":{\"1261\":1,\"1784\":1}}],[\"此代码只是作为测试\",{\"1\":{\"1124\":1}}],[\"此外\",{\"1\":{\"1102\":1}}],[\"此项必填\",{\"1\":{\"758\":1}}],[\"此方法只作用于最新画出的\",{\"1\":{\"745\":1}}],[\"此方法不做任何改变\",{\"1\":{\"711\":1}}],[\"此条指令需要加在发生重叠的两幅图像之间\",{\"1\":{\"743\":1}}],[\"此为\",{\"1\":{\"668\":1}}],[\"此属性会覆盖align\",{\"1\":{\"590\":1}}],[\"此顺序表示所有的兄弟元素第\",{\"1\":{\"520\":1}}],[\"此时也需要抛出异常并拦截\",{\"1\":{\"2075\":1}}],[\"此时应该创建文本\",{\"1\":{\"1974\":1}}],[\"此时应该额外触发与\",{\"1\":{\"1917\":1}}],[\"此时其过程如下图所示\",{\"1\":{\"1965\":1}}],[\"此时发现副作用函数重新执行了\",{\"1\":{\"1929\":1}}],[\"此时上述的代码就会出现\",{\"1\":{\"1929\":1}}],[\"此时需要我们在\",{\"1\":{\"1906\":1}}],[\"此时需要先同步远程仓库的变化\",{\"1\":{\"17\":1}}],[\"此时修改一个已存在的属性也会触发iterate\",{\"1\":{\"1906\":1}}],[\"此时访问器属性\",{\"1\":{\"1902\":1}}],[\"此时子组件对应的是占位符\",{\"1\":{\"1862\":1}}],[\"此时会检查子组件\",{\"1\":{\"1955\":1}}],[\"此时会触发\",{\"1\":{\"1892\":1}}],[\"此时会根据子组件中props的定义从组件标签的属性中匹配传入的数据\",{\"1\":{\"1838\":1}}],[\"此时会返回\",{\"1\":{\"890\":1}}],[\"此时为元素节点\",{\"1\":{\"1795\":1}}],[\"此时再\",{\"1\":{\"1743\":1}}],[\"此时外部的\",{\"1\":{\"1526\":1}}],[\"此时在父组件中设置\",{\"1\":{\"1433\":1}}],[\"此时可以代入求解\",{\"1\":{\"1748\":1}}],[\"此时可以获取到当前元素的子元素\",{\"1\":{\"1407\":1}}],[\"此时可以通过下述命令查看代码变化\",{\"1\":{\"17\":1}}],[\"此时优先计算属性\",{\"1\":{\"1382\":1}}],[\"此时混合前的代码就不存在了\",{\"1\":{\"1335\":1}}],[\"此时设置的是全局变量的值\",{\"1\":{\"1261\":1}}],[\"此时我们可以对点击的节点进行一个小小的判断\",{\"1\":{\"1158\":1}}],[\"此时我们为侧边栏开启\",{\"1\":{\"580\":1}}],[\"此时按下shift\",{\"1\":{\"1154\":2}}],[\"此时若想获取滚动的方向\",{\"1\":{\"1153\":1}}],[\"此时闭包就自动销毁\",{\"1\":{\"1023\":1}}],[\"此时执行上下文进入执行阶段\",{\"1\":{\"1014\":1}}],[\"此时进入创建阶段\",{\"1\":{\"1014\":1}}],[\"此时有一种简单的解决方案\",{\"1\":{\"993\":1}}],[\"此时该变量会成为一个全局变量\",{\"1\":{\"958\":1}}],[\"此时函数的声明会提升到当前作用域的最顶端\",{\"1\":{\"940\":1}}],[\"此时的做法应该是\",{\"1\":{\"1966\":1}}],[\"此时的this为组件实例\",{\"1\":{\"1354\":1}}],[\"此时的value是一个具体的值或者表达式\",{\"1\":{\"1353\":1}}],[\"此时的你可能会有这样的一个新问题\",{\"1\":{\"1023\":1}}],[\"此时的\",{\"1\":{\"828\":1,\"1499\":1}}],[\"此时循环是一个死循环会一直执行下去\",{\"1\":{\"821\":1}}],[\"此时浏览器页面不会同步对\",{\"1\":{\"683\":1}}],[\"此时就发生了\",{\"1\":{\"1891\":1}}],[\"此时就发生了样式冲突\",{\"1\":{\"522\":1}}],[\"此时就不能再使用浮动了\",{\"1\":{\"580\":1}}],[\"此时规则和之前一样只是多添加了两个值\",{\"1\":{\"573\":1}}],[\"此时样式属性的百分比值也是相对包含块进行设置的\",{\"1\":{\"570\":1}}],[\"此时width和\",{\"1\":{\"547\":1}}],[\"此时则优先使用靠下的样式\",{\"1\":{\"524\":1}}],[\"此时如果lastindex\",{\"1\":{\"1793\":1}}],[\"此时如果\",{\"1\":{\"520\":1}}],[\"此时请求的路径为\",{\"1\":{\"282\":1}}],[\"此时\",{\"1\":{\"24\":1,\"332\":1,\"649\":2,\"1336\":1,\"1535\":1,\"1536\":1,\"1537\":1,\"1722\":1,\"1927\":1,\"1951\":1,\"1974\":3,\"2029\":1,\"2071\":1}}],[\"附加observer实例\",{\"1\":{\"1785\":1}}],[\"附加数据都会保留下来\",{\"1\":{\"1211\":1}}],[\"附近\",{\"1\":{\"1720\":1,\"1723\":1}}],[\"附近的数字\",{\"1\":{\"1718\":1}}],[\"附件\",{\"1\":{\"1570\":1,\"1636\":1}}],[\"附上了伪类的元素被定义为锚元素\",{\"1\":{\"520\":1}}],[\"附录\",{\"0\":{\"370\":1}}],[\"伪经典继承\",{\"1\":{\"1071\":1}}],[\"伪数组对象\",{\"1\":{\"932\":1}}],[\"伪数组对象的原理就在于对象的键都是数字\",{\"1\":{\"828\":1}}],[\"伪等高\",{\"0\":{\"582\":1}}],[\"伪元素一般使用\",{\"1\":{\"521\":1}}],[\"伪元素是一个附加至选择器末的关键词\",{\"1\":{\"521\":1}}],[\"伪元素选择器\",{\"0\":{\"521\":1},\"1\":{\"524\":1}}],[\"伪类用来描述一个元素的\",{\"1\":{\"520\":1}}],[\"伪类\",{\"0\":{\"520\":1},\"1\":{\"521\":1}}],[\"伪代码\",{\"1\":{\"37\":1,\"239\":1}}],[\"弟\",{\"1\":{\"518\":1}}],[\"兄弟元素之间的外边距的重叠\",{\"1\":{\"558\":1}}],[\"兄弟元素间的相邻垂直外边距会取两者之间的\",{\"1\":{\"558\":1}}],[\"兄弟元素\",{\"1\":{\"558\":1}}],[\"兄弟元素选择器\",{\"1\":{\"518\":1}}],[\"兄\",{\"1\":{\"518\":1}}],[\"父组件环境下在编译时会将使用子组件时传入的插槽编译为一个\",{\"1\":{\"2001\":1}}],[\"父组件响应式数据变化会引起子组件的被动更新\",{\"1\":{\"1955\":1}}],[\"父组件注册的自定义事件\",{\"1\":{\"1864\":1}}],[\"父组件注册的事件\",{\"1\":{\"1802\":1}}],[\"父组件实际传递的props值\",{\"1\":{\"1864\":1}}],[\"父组件实例\",{\"1\":{\"1800\":1,\"1825\":1,\"1864\":1}}],[\"父组件创建\",{\"1\":{\"1841\":1,\"1842\":1}}],[\"父组件的渲染函数\",{\"1\":{\"1954\":1}}],[\"父组件的\",{\"1\":{\"1834\":1}}],[\"父组件传入的真实props数据\",{\"1\":{\"1804\":1}}],[\"父组件可以使用provide选项给自己的下游子孙组件内注入一些数据\",{\"1\":{\"1803\":1}}],[\"父组件在模板中使用\",{\"1\":{\"1802\":1}}],[\"父组件给子组件的注册事件中\",{\"1\":{\"1802\":1}}],[\"父组件有一个\",{\"1\":{\"1508\":1}}],[\"父组件中没找到provide\",{\"1\":{\"1803\":1}}],[\"父组件中绑定事件\",{\"1\":{\"1519\":1}}],[\"父组件中\",{\"1\":{\"1446\":3}}],[\"父组件\",{\"1\":{\"1358\":2,\"1429\":2,\"1437\":1,\"1446\":1,\"1954\":1}}],[\"父组件通过\",{\"1\":{\"1358\":1}}],[\"父选择器\",{\"0\":{\"1332\":1}}],[\"父级元素的事件也会被触发\",{\"1\":{\"1155\":1}}],[\"父节点\",{\"1\":{\"1118\":1,\"1119\":1,\"1121\":1,\"1122\":1}}],[\"父子组件\",{\"1\":{\"1429\":1}}],[\"父子间通信\",{\"0\":{\"1358\":1}}],[\"父子外边距的折叠会影响到页面的布局\",{\"1\":{\"558\":1}}],[\"父子元素间相邻外边距\",{\"1\":{\"558\":1}}],[\"父子元素\",{\"1\":{\"558\":1}}],[\"父子元素之前存在空格\",{\"1\":{\"518\":1}}],[\"父元素为script\",{\"1\":{\"1792\":2}}],[\"父元素上面绑定的事件也同时被触发\",{\"1\":{\"1155\":1}}],[\"父元素必须设置高度\",{\"1\":{\"583\":1}}],[\"父元素的剩余空间\",{\"1\":{\"591\":1}}],[\"父元素的高度默认是被子元素撑开的\",{\"1\":{\"562\":1}}],[\"父元素的内容盒\",{\"1\":{\"539\":1}}],[\"父元素\",{\"1\":{\"518\":1,\"534\":1,\"555\":1,\"596\":1}}],[\"父类vue的配置项\",{\"1\":{\"1825\":1}}],[\"父类型的属性\",{\"1\":{\"1070\":1}}],[\"父类型的方法\",{\"1\":{\"1069\":1}}],[\"父类\",{\"1\":{\"466\":1,\"1071\":1,\"1072\":1}}],[\"父类方法失效\",{\"1\":{\"405\":1}}],[\"子\",{\"1\":{\"2068\":1}}],[\"子通过传参来进行通信\",{\"1\":{\"1429\":1}}],[\"子组件获取传入的\",{\"0\":{\"1838\":1}}],[\"子组件vue实例创建完成后赋值\",{\"1\":{\"1834\":1}}],[\"子组件初始化阶段\",{\"1\":{\"1802\":1}}],[\"子组件可以接收这个函数参数并在合适的时候执行它\",{\"1\":{\"1446\":1,\"1494\":1}}],[\"子组件中声明自定义事件\",{\"1\":{\"1519\":1}}],[\"子组件中\",{\"1\":{\"1446\":3}}],[\"子组件的\",{\"1\":{\"1834\":1,\"1842\":1}}],[\"子组件的其他元素则没有此标识\",{\"1\":{\"1433\":1}}],[\"子组件的根标签\",{\"1\":{\"1433\":1}}],[\"子组件\",{\"1\":{\"1358\":2,\"1429\":2,\"1437\":1,\"1446\":1,\"1841\":1,\"1842\":1}}],[\"子组件通过\",{\"1\":{\"1358\":1}}],[\"子组件设\",{\"1\":{\"1358\":1}}],[\"子代选择器只会查找一级\",{\"1\":{\"1243\":1}}],[\"子代选择器是\",{\"1\":{\"1243\":1}}],[\"子进程管理等\",{\"1\":{\"1168\":1,\"1555\":1}}],[\"子节点不能只是只有一个文本节点\",{\"1\":{\"1795\":1}}],[\"子节点\",{\"1\":{\"1118\":1,\"1121\":1}}],[\"子数组中包含一个键值对的键名与值两个元素\",{\"1\":{\"868\":1}}],[\"子项为\",{\"1\":{\"756\":1}}],[\"子项可以通过\",{\"1\":{\"756\":1}}],[\"子元素会去找离它最近的已经定位的父元素来计算偏移\",{\"1\":{\"1207\":1}}],[\"子元素会从父元素中溢出\",{\"1\":{\"557\":1}}],[\"子元素如何伸展\",{\"1\":{\"591\":1}}],[\"子元素的会传递给父元素\",{\"1\":{\"558\":1}}],[\"子元素是在父元素的内容区中排列的\",{\"1\":{\"557\":1}}],[\"子元素\",{\"1\":{\"518\":1,\"540\":1,\"1788\":1,\"1835\":1}}],[\"子元素选择器\",{\"1\":{\"518\":1}}],[\"子类的配置项\",{\"1\":{\"1825\":1}}],[\"子类的原型指向vue的原型对象\",{\"1\":{\"1424\":1,\"1825\":1}}],[\"子类型的原型指向父类型的实例\",{\"1\":{\"1069\":1}}],[\"子类\",{\"1\":{\"466\":1,\"1071\":1,\"1072\":1,\"1825\":2}}],[\"子类方法中调用了父类方法时\",{\"1\":{\"405\":1}}],[\"子类方法与父类方法重名时\",{\"1\":{\"405\":1}}],[\"子类方法的覆写\",{\"1\":{\"405\":1}}],[\"例题\",{\"1\":{\"991\":3,\"992\":3}}],[\"例外\",{\"1\":{\"980\":1}}],[\"例\",{\"1\":{\"681\":1,\"1723\":1}}],[\"例子中执行了两次\",{\"1\":{\"1224\":1}}],[\"例子\",{\"1\":{\"516\":3,\"517\":2,\"518\":2}}],[\"例如<\",{\"1\":{\"2095\":1}}],[\"例如假设有一个带有动态参数的路径\",{\"1\":{\"2071\":1}}],[\"例如添加活动样式类\",{\"1\":{\"2065\":1}}],[\"例如你将整个应用部署到\",{\"1\":{\"2053\":1}}],[\"例如你使用的\",{\"1\":{\"2050\":1}}],[\"例如前面我们所举的例子\",{\"1\":{\"2050\":1}}],[\"例如打开浏览器\",{\"1\":{\"2048\":1}}],[\"例如使用\",{\"1\":{\"1929\":1}}],[\"例如计算属性\",{\"1\":{\"1894\":1}}],[\"例如人均收入\",{\"1\":{\"1740\":1}}],[\"例如猎物和天敌\",{\"1\":{\"1678\":1}}],[\"例如model\",{\"1\":{\"1671\":1}}],[\"例如将特殊字符转义为\",{\"1\":{\"2095\":1}}],[\"例如将一个大小为\",{\"1\":{\"1661\":1}}],[\"例如将name的值从zhangshan改为lisi\",{\"1\":{\"350\":1}}],[\"例如缩放\",{\"1\":{\"1656\":1}}],[\"例如节点的宽高\",{\"1\":{\"1526\":1}}],[\"例如复杂的第三方类库等\",{\"1\":{\"1506\":1}}],[\"例如在网上进行购物\",{\"1\":{\"2100\":1}}],[\"例如在下面的源码中\",{\"1\":{\"2069\":1}}],[\"例如在\",{\"1\":{\"1261\":1}}],[\"例如现在我的列表项有如下内容\",{\"1\":{\"1158\":1}}],[\"例如绑定事件的\",{\"1\":{\"1151\":1}}],[\"例如点击链接\",{\"1\":{\"1135\":1}}],[\"例如document\",{\"1\":{\"1112\":1}}],[\"例如笔记本电脑或者手机\",{\"1\":{\"1099\":1}}],[\"例如分辨率\",{\"1\":{\"1098\":1}}],[\"例如操作系统版本\",{\"1\":{\"1090\":1}}],[\"例如不能使用delete操作符来删除\",{\"1\":{\"1086\":1}}],[\"例如我们书写一个点击事件\",{\"1\":{\"1081\":1}}],[\"例如无法在创建弱集合时传入一个数组进行初始化\",{\"1\":{\"865\":1}}],[\"例如上例中的\",{\"1\":{\"865\":1}}],[\"例如这里我们给\",{\"1\":{\"827\":1}}],[\"例如名称\",{\"1\":{\"771\":1}}],[\"例如要么都在标准文档流\",{\"1\":{\"764\":1}}],[\"例如文本的宽度\",{\"1\":{\"731\":1}}],[\"例如文字颜色\",{\"1\":{\"609\":1}}],[\"例如可以用\",{\"1\":{\"681\":1}}],[\"例如段落\",{\"1\":{\"661\":1}}],[\"例如当指定\",{\"1\":{\"548\":2}}],[\"例如当前网页\",{\"1\":{\"292\":1}}],[\"例如create\",{\"1\":{\"339\":1}}],[\"例如百度首页\",{\"1\":{\"288\":1}}],[\"例如图片文件加载\",{\"1\":{\"1200\":1}}],[\"例如图片\",{\"1\":{\"288\":1}}],[\"例如\",{\"1\":{\"59\":1,\"128\":1,\"143\":1,\"242\":1,\"268\":1,\"270\":1,\"294\":1,\"350\":1,\"379\":2,\"384\":2,\"395\":3,\"396\":7,\"548\":2,\"640\":1,\"680\":1,\"681\":2,\"694\":1,\"701\":1,\"725\":1,\"752\":2,\"765\":4,\"794\":1,\"801\":3,\"816\":1,\"851\":1,\"865\":2,\"895\":2,\"906\":1,\"910\":1,\"912\":1,\"941\":1,\"958\":1,\"991\":1,\"992\":1,\"993\":1,\"995\":1,\"1029\":1,\"1093\":6,\"1101\":1,\"1102\":1,\"1149\":1,\"1154\":1,\"1158\":1,\"1264\":1,\"1276\":2,\"1382\":1,\"1407\":2,\"1419\":1,\"1498\":1,\"1518\":1,\"1540\":1,\"1541\":1,\"1560\":1,\"1600\":1,\"1602\":1,\"1613\":1,\"1655\":4,\"1656\":3,\"1659\":1,\"1661\":1,\"1662\":1,\"1728\":1,\"1733\":1,\"1746\":1,\"1748\":1,\"1840\":1,\"1954\":1,\"2050\":1,\"2051\":7,\"2054\":1,\"2058\":2,\"2099\":1,\"2101\":3}}],[\"谁用到数据更新谁\",{\"1\":{\"1783\":1}}],[\"谁调用它\",{\"1\":{\"990\":1}}],[\"谁\",{\"1\":{\"515\":1}}],[\"谁先匹配谁就响应\",{\"1\":{\"316\":1}}],[\"微队列的任务一定具有最高的优先级\",{\"1\":{\"1560\":1}}],[\"微队列的任务优先所有其他任务执行\",{\"1\":{\"1181\":1}}],[\"微队列中的任务优先所有其他任务执行\",{\"1\":{\"1560\":1}}],[\"微队列\",{\"1\":{\"1181\":1,\"1560\":1}}],[\"微软雅黑\",{\"1\":{\"621\":1}}],[\"微信扫码登录背后的实现原理\",{\"1\":{\"510\":1}}],[\"微博列表\",{\"1\":{\"187\":1}}],[\"扫码登录方案\",{\"0\":{\"510\":1}}],[\"负责对参数里面的一些特殊字符\",{\"1\":{\"2045\":1}}],[\"负责将参数值转为字符串\",{\"1\":{\"2045\":1}}],[\"负责事件的管理\",{\"1\":{\"1173\":1}}],[\"负责定时器的管理\",{\"1\":{\"1173\":1}}],[\"负责页面的布局和效果的绘制\",{\"1\":{\"1172\":1}}],[\"负责页面文本的解析\",{\"1\":{\"1172\":1}}],[\"负责\",{\"1\":{\"1172\":2,\"1173\":1}}],[\"负责加载网络资源\",{\"1\":{\"1168\":1,\"1555\":1}}],[\"负责把\",{\"1\":{\"138\":1}}],[\"负无穷\",{\"1\":{\"794\":1}}],[\"负数会被转换为\",{\"1\":{\"794\":1}}],[\"负数\",{\"1\":{\"708\":1}}],[\"负值向上移动\",{\"1\":{\"613\":1}}],[\"负值向左移动\",{\"1\":{\"613\":1}}],[\"负\",{\"1\":{\"582\":1}}],[\"负载均衡器\",{\"0\":{\"508\":1}}],[\"鉴权\",{\"1\":{\"507\":1}}],[\"监视的深度\",{\"1\":{\"2069\":1}}],[\"监视的回调中用到哪个属性\",{\"1\":{\"1498\":1}}],[\"监视的属性必须存在\",{\"1\":{\"1377\":1}}],[\"监视reactive定义的响应式数据中的某些属性\",{\"1\":{\"1497\":1}}],[\"监视reactive定义的响应式数据中的某个属性\",{\"1\":{\"1497\":1}}],[\"监视reactive定义的响应式数据\",{\"1\":{\"1497\":1}}],[\"监视ref定义的响应式数据\",{\"1\":{\"1497\":1}}],[\"监视多个ref定义的响应式数据\",{\"1\":{\"1497\":1}}],[\"监视多级结构中所有属性的变化\",{\"1\":{\"1379\":1}}],[\"监视多级结构中某个属性的变化\",{\"1\":{\"1379\":1}}],[\"监视数据的原理\",{\"0\":{\"1396\":1}}],[\"监视\",{\"0\":{\"1377\":1},\"1\":{\"1497\":2}}],[\"监控响应进度\",{\"1\":{\"1572\":1}}],[\"监控请求进度\",{\"1\":{\"1572\":1}}],[\"监控\",{\"1\":{\"507\":1}}],[\"监听器就会被移除\",{\"1\":{\"1817\":1}}],[\"监听器上所绑定的回调函数里面还会自动传入一个叫做\",{\"1\":{\"1151\":1}}],[\"监听一个自定义事件\",{\"1\":{\"1817\":1}}],[\"监听配置项\",{\"1\":{\"1379\":1}}],[\"监听属性的回调函数\",{\"1\":{\"1378\":1}}],[\"监听\",{\"1\":{\"1358\":1,\"2050\":1}}],[\"监听滚动事件判断是否到页面底部自动加载更多\",{\"1\":{\"1034\":1}}],[\"监听事件的时候\",{\"1\":{\"995\":1}}],[\"监听中\",{\"1\":{\"273\":1,\"355\":1}}],[\"监听端口启动服务\",{\"1\":{\"1573\":1}}],[\"监听端口\",{\"1\":{\"273\":1,\"282\":1,\"283\":1,\"284\":2,\"285\":1,\"287\":2,\"301\":1,\"304\":1,\"316\":1,\"329\":1}}],[\"监听到文件变化\",{\"1\":{\"158\":1}}],[\"监听本地源代码变化\",{\"1\":{\"122\":1}}],[\"日常积累\",{\"0\":{\"1704\":1}}],[\"日这三个数值被括号括起来了\",{\"1\":{\"911\":1}}],[\"日\",{\"1\":{\"874\":1,\"875\":5,\"876\":1,\"877\":2,\"1475\":1}}],[\"日志\",{\"1\":{\"507\":1}}],[\"日期对象的构造函数为date\",{\"1\":{\"876\":1}}],[\"日期对象构造函数\",{\"0\":{\"876\":1}}],[\"日期\",{\"1\":{\"192\":1}}],[\"北京\",{\"1\":{\"493\":1,\"1349\":1,\"1396\":1,\"1415\":1}}],[\"题目描述\",{\"0\":{\"1767\":1}}],[\"题目题型\",{\"1\":{\"1746\":1}}],[\"题目类型\",{\"1\":{\"1745\":1}}],[\"题目中的\",{\"1\":{\"948\":1}}],[\"题目二\",{\"0\":{\"494\":1}}],[\"题目一\",{\"0\":{\"493\":1}}],[\"题意\",{\"0\":{\"490\":1}}],[\"两次\",{\"1\":{\"2058\":1}}],[\"两次假设分配法求得两个基期作差\",{\"1\":{\"1726\":1}}],[\"两组子节点的公共长度\",{\"1\":{\"1961\":1}}],[\"两边除中间\",{\"1\":{\"1745\":1}}],[\"两部分的划分通常有如下方式\",{\"1\":{\"1740\":1}}],[\"两部分\",{\"1\":{\"1740\":1}}],[\"两期比重比较之比重差\",{\"0\":{\"1735\":1}}],[\"两期比重变化之比重趋势\",{\"0\":{\"1734\":1}}],[\"两期增长量倍数或比值\",{\"1\":{\"1729\":1}}],[\"两变量指向同一原型对象\",{\"1\":{\"1008\":1}}],[\"两大类\",{\"1\":{\"980\":1}}],[\"两端存在\",{\"1\":{\"976\":1}}],[\"两端存在nan\",{\"1\":{\"976\":1}}],[\"两端都是原始类型\",{\"1\":{\"976\":1}}],[\"两端类型相同\",{\"1\":{\"976\":1}}],[\"两端全是字符串\",{\"1\":{\"976\":1}}],[\"两端对齐\",{\"1\":{\"625\":1}}],[\"两种不同写法与简写形式\",{\"0\":{\"1380\":1}}],[\"两种方式编译结果完全一样\",{\"1\":{\"1319\":1}}],[\"两种方法实现的效果一样\",{\"1\":{\"1209\":1}}],[\"两种事件流都会触发\",{\"1\":{\"1141\":1}}],[\"两种\",{\"1\":{\"906\":1,\"1485\":1}}],[\"两天\",{\"1\":{\"768\":1}}],[\"两栏或者三栏布局\",{\"0\":{\"580\":1}}],[\"两者几乎是一样的\",{\"1\":{\"2091\":1}}],[\"两者的区别在于\",{\"1\":{\"1255\":1}}],[\"两者的长度之和超过了最大长度\",{\"1\":{\"893\":1}}],[\"两者之间的差别在于将数据拼接\",{\"1\":{\"1640\":1}}],[\"两者之间的区别是clip\",{\"1\":{\"557\":1}}],[\"两者之间不同之处有以下两点\",{\"1\":{\"1247\":1}}],[\"两者都是正值\",{\"1\":{\"558\":1}}],[\"两个私有的变量\",{\"1\":{\"2057\":1}}],[\"两个倍数之比\",{\"1\":{\"1746\":1}}],[\"两个平均数之比\",{\"1\":{\"1745\":1}}],[\"两个平均数之差\",{\"1\":{\"1745\":1}}],[\"两个数据集对象\",{\"1\":{\"1656\":1}}],[\"两个程序之间如何交换数据\",{\"1\":{\"1622\":1}}],[\"两个\",{\"1\":{\"1600\":1,\"1661\":1}}],[\"两个小\",{\"1\":{\"1497\":1}}],[\"两个辅助函数\",{\"1\":{\"1493\":1}}],[\"两个新的生命周期钩子\",{\"0\":{\"1466\":1}}],[\"两个重要的原则\",{\"0\":{\"1383\":1}}],[\"两个对象都已经离开环境\",{\"1\":{\"1030\":1}}],[\"两个方法都会迭代数组所有的项\",{\"1\":{\"946\":1}}],[\"两个样式\",{\"1\":{\"635\":1}}],[\"两个值\",{\"1\":{\"544\":1,\"573\":1,\"612\":1}}],[\"两个参数\",{\"1\":{\"487\":1,\"854\":2}}],[\"两参数不存在时\",{\"1\":{\"402\":1}}],[\"给出的例子比较理想化\",{\"1\":{\"1969\":1}}],[\"给出政策\",{\"1\":{\"1698\":1}}],[\"给子类新增三个独有的属性\",{\"1\":{\"1825\":1}}],[\"给实例初始化了一些属性\",{\"1\":{\"1800\":1}}],[\"给用户造成卡死现象\",{\"1\":{\"1558\":1}}],[\"给我一个正常的结果\",{\"1\":{\"1542\":1}}],[\"给我一首歌的时间\",{\"1\":{\"200\":1}}],[\"给路由命名\",{\"1\":{\"1460\":2}}],[\"给一个初始值\",{\"1\":{\"2054\":1}}],[\"给一个文件命名为\",{\"1\":{\"1319\":1}}],[\"给一个元素节点添加类\",{\"1\":{\"1125\":1}}],[\"给混合宏的参数传一个默认值\",{\"1\":{\"1295\":1}}],[\"给元素节点添加文本内容\",{\"1\":{\"1120\":1}}],[\"给对象添加属性\",{\"1\":{\"1073\":1}}],[\"给对象添加或修改多个属性\",{\"1\":{\"1060\":1}}],[\"给对象添加或修改一个属性\",{\"1\":{\"1059\":1}}],[\"给对象设置\",{\"1\":{\"1073\":1}}],[\"给集合添加值\",{\"0\":{\"861\":1}}],[\"给数组赋值的方法也非常简单\",{\"1\":{\"843\":1}}],[\"给整个解构表达式设置了一个默认值\",{\"1\":{\"833\":1}}],[\"给变量第一次赋值的过程\",{\"1\":{\"780\":1}}],[\"给定的方向\",{\"1\":{\"716\":1}}],[\"给\",{\"1\":{\"487\":3,\"515\":1,\"2000\":1,\"2001\":1}}],[\"渲染对应的视图\",{\"1\":{\"2050\":1}}],[\"渲染成其他节点\",{\"1\":{\"2032\":1}}],[\"渲染组件状态的代码位于mountcomponent中\",{\"1\":{\"1954\":1}}],[\"渲染组件\",{\"0\":{\"1952\":1}}],[\"渲染为特定平台上的真实元素\",{\"1\":{\"1944\":1}}],[\"渲染为真实的\",{\"1\":{\"2070\":1}}],[\"渲染为真实\",{\"1\":{\"1878\":1}}],[\"渲染器不仅仅包含用来渲染的\",{\"1\":{\"1944\":1}}],[\"渲染器的卸载操作\",{\"0\":{\"1950\":1}}],[\"渲染器的挂载操作\",{\"0\":{\"1947\":1}}],[\"渲染器的设计\",{\"0\":{\"1945\":1}}],[\"渲染器的基本概念\",{\"0\":{\"1942\":1}}],[\"渲染器的作用就是\",{\"1\":{\"1878\":1}}],[\"渲染器\",{\"0\":{\"1878\":1,\"1941\":1},\"1\":{\"1782\":1}}],[\"渲染页面\",{\"1\":{\"1558\":1}}],[\"渲染原理\",{\"2\":{\"1550\":1}}],[\"渲染的下一步是\",{\"1\":{\"1526\":1}}],[\"渲染的第一步是\",{\"1\":{\"1526\":1}}],[\"渲染主线程永不阻塞\",{\"1\":{\"1558\":1}}],[\"渲染主线程承担着极其重要的工作\",{\"1\":{\"1558\":1}}],[\"渲染主线程想出了一个绝妙的主意来处理这个问题\",{\"1\":{\"1556\":1}}],[\"渲染主线程是浏览器中最繁忙的线程\",{\"1\":{\"1556\":1}}],[\"渲染主线程是如何工作的\",{\"0\":{\"1556\":1}}],[\"渲染主线程无论如何忙碌\",{\"1\":{\"1529\":1}}],[\"渲染主线程取出消息队列中的渲染任务\",{\"1\":{\"1526\":1}}],[\"渲染主线程会进入一个无限循环\",{\"1\":{\"1180\":1,\"1556\":1}}],[\"渲染函数规范化以及对2\",{\"1\":{\"2001\":1}}],[\"渲染函数的函数体只有一个语句\",{\"1\":{\"1975\":1}}],[\"渲染函数\",{\"1\":{\"1486\":1,\"2050\":1}}],[\"渲染完成后执行\",{\"1\":{\"1240\":1}}],[\"渲染\",{\"0\":{\"1172\":1,\"1835\":1},\"1\":{\"1835\":1,\"1862\":1,\"1866\":1,\"1879\":1}}],[\"渲染进程启动后\",{\"1\":{\"1168\":1,\"1555\":1}}],[\"渲染进程\",{\"1\":{\"1168\":1,\"1555\":1}}],[\"渲染上下文指的是在我们在编写\",{\"1\":{\"2001\":1}}],[\"渲染上下文对象\",{\"0\":{\"1956\":1}}],[\"渲染上下文\",{\"0\":{\"704\":1},\"1\":{\"2002\":1}}],[\"渲染每个元素的前提条件\",{\"1\":{\"528\":1}}],[\"渲染大量数据不卡住页面\",{\"0\":{\"480\":1}}],[\"渲染视图模板\",{\"1\":{\"307\":1}}],[\"视为中途出错\",{\"1\":{\"1769\":1}}],[\"视图能够进行切换\",{\"1\":{\"2050\":1}}],[\"视图模型\",{\"0\":{\"1349\":1}}],[\"视图\",{\"0\":{\"1348\":1}}],[\"视觉视口\",{\"1\":{\"648\":1}}],[\"视觉类样式\",{\"0\":{\"609\":1}}],[\"视口小于指定宽度时生效\",{\"1\":{\"651\":1}}],[\"视口大于指定宽度时生效\",{\"1\":{\"651\":1}}],[\"视口的最大宽度\",{\"1\":{\"651\":1}}],[\"视口的最小宽度\",{\"1\":{\"651\":1}}],[\"视口的高度\",{\"1\":{\"651\":1}}],[\"视口的宽度\",{\"1\":{\"651\":1}}],[\"视口宽度\",{\"1\":{\"649\":2,\"650\":1}}],[\"视口宽度的\",{\"1\":{\"534\":1}}],[\"视口就是屏幕中用来显示网页的区域\",{\"1\":{\"648\":1}}],[\"视口分类\",{\"0\":{\"648\":1}}],[\"视口\",{\"0\":{\"647\":1},\"1\":{\"539\":1}}],[\"视口高度的\",{\"1\":{\"534\":1}}],[\"视口高度\",{\"1\":{\"478\":1}}],[\"视频会议和聊天\",{\"1\":{\"1644\":1}}],[\"视频等媒体资源\",{\"1\":{\"1215\":1}}],[\"视频的实际分辨率\",{\"1\":{\"750\":1}}],[\"视频播放前的预览图片\",{\"1\":{\"750\":1}}],[\"视频多的部分\",{\"1\":{\"750\":1}}],[\"视频封面\",{\"1\":{\"748\":1}}],[\"视频展示区域的高度\",{\"1\":{\"748\":1}}],[\"视频显示区域的宽度\",{\"1\":{\"748\":1}}],[\"视频和音频文件以及可以在网络上保存的任何其他内容\",{\"1\":{\"664\":1}}],[\"视频\",{\"1\":{\"288\":1,\"747\":2}}],[\"视频录制\",{\"1\":{\"248\":1}}],[\"视频列表\",{\"1\":{\"187\":1}}],[\"性\",{\"1\":{\"1902\":1}}],[\"性别\",{\"1\":{\"1357\":1}}],[\"性别等个人信息\",{\"1\":{\"343\":1}}],[\"性能更高\",{\"1\":{\"2035\":1}}],[\"性能\",{\"1\":{\"1872\":1}}],[\"性能和可维护性\",{\"1\":{\"1872\":1}}],[\"性能的提升\",{\"0\":{\"1477\":1}}],[\"性能提升是显而易见的\",{\"1\":{\"1239\":1}}],[\"性能就越差\",{\"1\":{\"1158\":1}}],[\"性能差的浏览器可能就会直接假死\",{\"1\":{\"1034\":1}}],[\"性能优化之首屏加载🚀\",{\"1\":{\"511\":1}}],[\"性能优化\",{\"0\":{\"477\":1,\"1233\":1},\"1\":{\"1193\":1}}],[\"拷贝的就是内存地址\",{\"1\":{\"469\":1}}],[\"拷贝的就是基本类型的值\",{\"1\":{\"469\":1}}],[\"深浅只读\",{\"0\":{\"1992\":1}}],[\"深浅响应\",{\"0\":{\"1991\":1}}],[\"深浅拷贝\",{\"0\":{\"468\":1}}],[\"深入对比\",{\"1\":{\"1951\":1}}],[\"深\",{\"1\":{\"1705\":1}}],[\"深度获取到\",{\"1\":{\"2068\":1}}],[\"深度值提供给下一层\",{\"1\":{\"2068\":1}}],[\"深度加一\",{\"1\":{\"2068\":1}}],[\"深度\",{\"0\":{\"2068\":1},\"1\":{\"2067\":1,\"2068\":1}}],[\"深度优先遍历\",{\"0\":{\"1976\":1}}],[\"深度学习\",{\"2\":{\"1681\":1}}],[\"深度学习模型的目标函数通常有许多局部最优解\",{\"1\":{\"1658\":1}}],[\"深度监视\",{\"0\":{\"1379\":1},\"1\":{\"1378\":1}}],[\"深只读\",{\"1\":{\"1505\":1}}],[\"深层次的\",{\"1\":{\"1488\":1}}],[\"深层次的引用类型则共享内存地址\",{\"1\":{\"469\":1}}],[\"深克隆是指当前元素及内部的子元素都会复制\",{\"1\":{\"1213\":1}}],[\"深克隆\",{\"1\":{\"1123\":1}}],[\"深拷贝\",{\"0\":{\"470\":1},\"1\":{\"1201\":1}}],[\"深比较\",{\"1\":{\"166\":1}}],[\"盗用父类的构造函数\",{\"1\":{\"466\":1,\"1071\":1,\"1072\":1}}],[\"圣杯模式的继承解决了这一问题\",{\"1\":{\"1072\":1}}],[\"圣杯模式\",{\"0\":{\"466\":1,\"1072\":1}}],[\"柯里化函数的使用\",{\"1\":{\"1039\":1}}],[\"柯里化函数\",{\"1\":{\"1039\":1}}],[\"柯里化\",{\"0\":{\"462\":1,\"463\":1,\"1039\":1},\"1\":{\"1039\":1}}],[\"防御方式\",{\"0\":{\"2095\":1}}],[\"防御手段\",{\"0\":{\"2088\":1}}],[\"防止所有的跨站点请求中的\",{\"1\":{\"2088\":1}}],[\"防止\",{\"1\":{\"2088\":1}}],[\"防止参数在更新方向改变时来回摆动\",{\"1\":{\"1659\":1}}],[\"防止样式代码冲突\",{\"1\":{\"1433\":1}}],[\"防止重复渲染\",{\"1\":{\"1035\":1}}],[\"防止命名冲突\",{\"1\":{\"234\":1}}],[\"防抖\",{\"0\":{\"460\":1},\"1\":{\"1037\":1}}],[\"防抖和节流\",{\"0\":{\"459\":1}}],[\"利用内部的\",{\"1\":{\"2042\":1}}],[\"利用调用器获取副作用函数的新值\",{\"1\":{\"1987\":1}}],[\"利用状态机在\",{\"1\":{\"1974\":1}}],[\"利用响应系统的能力\",{\"1\":{\"1943\":1}}],[\"利用其括号内传入的参数\",{\"1\":{\"1797\":1}}],[\"利用闭包记录对应的参数\",{\"1\":{\"1777\":1}}],[\"利用基期比重公式进行计算\",{\"1\":{\"1732\":1}}],[\"利用公式b＝a＋ar依次求出后一年\",{\"1\":{\"1727\":1}}],[\"利用1\",{\"1\":{\"1718\":1,\"1720\":1}}],[\"利用上述关系帮助我们理清句子之间和整个段落的行文结构\",{\"1\":{\"1693\":1}}],[\"利用的是网站对用户网页浏览器的信任\",{\"1\":{\"2087\":1}}],[\"利用的是用户对指定网站的信任\",{\"1\":{\"2087\":1}}],[\"利用的是\",{\"1\":{\"1647\":1}}],[\"利用插值语法作为属性名或属性值的一部分\",{\"1\":{\"1259\":1}}],[\"利用\",{\"1\":{\"995\":2,\"1726\":1,\"1874\":1,\"1897\":1,\"2026\":1}}],[\"利用这一特性\",{\"1\":{\"995\":1}}],[\"利用这个特性\",{\"1\":{\"864\":1}}],[\"利用object\",{\"1\":{\"967\":1}}],[\"利用函数\",{\"1\":{\"926\":1}}],[\"利用shift\",{\"1\":{\"853\":1}}],[\"利用前面所介绍的解构\",{\"1\":{\"848\":1}}],[\"利用绝对定位\",{\"1\":{\"602\":1}}],[\"利用继承我们可以将\",{\"1\":{\"527\":1}}],[\"利用一些js库做预渲染等等\",{\"1\":{\"507\":1}}],[\"利用对象和闭包\",{\"0\":{\"487\":1}}],[\"利用对象属性名的唯一性来保证不重复\",{\"1\":{\"456\":1}}],[\"利用计数排序适用于小范围数的特点\",{\"1\":{\"419\":1}}],[\"适合对大数据量进行加密\",{\"1\":{\"2099\":1}}],[\"适合用于大量数据的加密\",{\"1\":{\"2099\":1}}],[\"适合存放大量\",{\"1\":{\"2016\":1}}],[\"适合分子位数小于等于分母的除法计算\",{\"1\":{\"1720\":1}}],[\"适合传输大量数据\",{\"1\":{\"1569\":1}}],[\"适合传递少量数据\",{\"1\":{\"1569\":1}}],[\"适当关注\",{\"1\":{\"1689\":1,\"1690\":1,\"1691\":1}}],[\"适当跳过\",{\"1\":{\"1688\":1}}],[\"适当略读\",{\"1\":{\"1687\":1}}],[\"适当的时候用是推荐的\",{\"1\":{\"1237\":1}}],[\"适用盐水思维的常见类型有\",{\"1\":{\"1740\":1}}],[\"适用场景\",{\"1\":{\"1047\":1,\"1048\":1}}],[\"适用于一些简单逻辑的处理\",{\"1\":{\"1397\":1}}],[\"适用于起始创建时对象内部数据确定\",{\"1\":{\"1046\":1}}],[\"适用于起始创建时对象内部数据不确定\",{\"1\":{\"1045\":1}}],[\"适用于不同的场合\",{\"1\":{\"957\":1}}],[\"适用于\",{\"1\":{\"758\":1,\"1388\":1,\"1389\":1,\"1429\":1,\"1437\":1,\"1438\":1,\"1439\":1,\"1446\":1,\"1712\":1}}],[\"适用于类似文件操作的这种\",{\"1\":{\"404\":1}}],[\"适用于过滤性任务\",{\"1\":{\"402\":1}}],[\"适用于映射性任务\",{\"1\":{\"402\":1}}],[\"适用于归并性任务\",{\"1\":{\"402\":1}}],[\"适配范围广\",{\"1\":{\"455\":1,\"456\":1}}],[\"平年闰年\",{\"1\":{\"1752\":1}}],[\"平均倍数类\",{\"0\":{\"1744\":1}}],[\"平均数的变化情况\",{\"1\":{\"1745\":1}}],[\"平均数的增长率\",{\"1\":{\"1745\":1}}],[\"平均数\",{\"0\":{\"1745\":1},\"1\":{\"1721\":1,\"1737\":1,\"1745\":1,\"1753\":2}}],[\"平铺\",{\"1\":{\"628\":1}}],[\"平移\",{\"0\":{\"616\":1}}],[\"平时练习可以使用内部样式表<style><\",{\"1\":{\"513\":1}}],[\"平展后\",{\"1\":{\"452\":1}}],[\"平台的\",{\"1\":{\"1998\":1}}],[\"平台的极简\",{\"1\":{\"298\":1}}],[\"平台\",{\"1\":{\"215\":1}}],[\"桶\",{\"0\":{\"1889\":1},\"1\":{\"1886\":2,\"1888\":1,\"1889\":7,\"1890\":1,\"1892\":2}}],[\"桶内只有1个数字或者空桶\",{\"1\":{\"418\":1}}],[\"桶的数量\",{\"1\":{\"418\":1}}],[\"桶排序\",{\"0\":{\"418\":1}}],[\"统计promises内元素的数量\",{\"1\":{\"1778\":1}}],[\"统计具有默认值之前的参数个数\",{\"1\":{\"951\":1}}],[\"统计元素出现的次数并存入对应的位置\",{\"1\":{\"417\":1}}],[\"统计数组中每个值为i的元素出现的次数\",{\"1\":{\"417\":1}}],[\"统一不同的传参情况\",{\"1\":{\"1810\":1}}],[\"统一\",{\"1\":{\"1776\":1}}],[\"统一资源定位符\",{\"1\":{\"1626\":1}}],[\"统一资源定位器\",{\"1\":{\"268\":1}}],[\"统一的语言\",{\"1\":{\"146\":1}}],[\"固步自\",{\"1\":{\"1705\":1}}],[\"固定函数f的前两个参数\",{\"1\":{\"1039\":1}}],[\"固定函数\",{\"1\":{\"1039\":1}}],[\"固定目前的参数\",{\"1\":{\"1039\":1}}],[\"固定到适当位置\",{\"1\":{\"572\":1}}],[\"固定定位的元素不会随网页的滚动条滚动\",{\"1\":{\"571\":1}}],[\"固定定位也是一种绝对定位\",{\"1\":{\"571\":1}}],[\"固定定位\",{\"0\":{\"571\":1},\"1\":{\"539\":1}}],[\"固定条件时\",{\"1\":{\"463\":1}}],[\"固定这个最大值\",{\"1\":{\"416\":1}}],[\"固化部分参数\",{\"1\":{\"402\":1}}],[\"堆栈里面的\",{\"1\":{\"2058\":1}}],[\"堆栈会发生响应的变化\",{\"1\":{\"2050\":1}}],[\"堆空间\",{\"1\":{\"1000\":1}}],[\"堆叠级别为正值的堆叠上下文\",{\"1\":{\"578\":1}}],[\"堆叠级别\",{\"1\":{\"578\":1}}],[\"堆叠上下文\",{\"0\":{\"576\":1},\"1\":{\"576\":1,\"1526\":1}}],[\"堆叠起来\",{\"1\":{\"402\":1}}],[\"堆积是一个近似完全二叉树的结构\",{\"1\":{\"416\":1}}],[\"堆排序是指利用堆这种数据结构所设计的一种排序算法\",{\"1\":{\"416\":1}}],[\"堆排序\",{\"0\":{\"416\":1}}],[\"希尔排序\",{\"0\":{\"413\":1}}],[\"元字符\",{\"0\":{\"902\":1},\"1\":{\"902\":1}}],[\"元信息已载入或已改变\",{\"1\":{\"752\":1}}],[\"元数据\",{\"0\":{\"659\":1}}],[\"元素等\",{\"1\":{\"1998\":1}}],[\"元素需要移动\",{\"1\":{\"1962\":1}}],[\"元素之后\",{\"1\":{\"1951\":1}}],[\"元素之间建立联系\",{\"1\":{\"1948\":1}}],[\"元素之间的空白给删除掉\",{\"1\":{\"1112\":1}}],[\"元素属性的数据结构保持一致\",{\"1\":{\"1949\":1}}],[\"元素属性对象和子元素数组\",{\"1\":{\"1797\":1}}],[\"元素标签\",{\"1\":{\"1788\":1}}],[\"元素从而进行一些\",{\"1\":{\"1499\":1}}],[\"元素离开的样式\",{\"1\":{\"1441\":1}}],[\"元素离人越近\",{\"1\":{\"616\":1}}],[\"元素进入的样式\",{\"1\":{\"1441\":1}}],[\"元素时\",{\"1\":{\"1441\":1}}],[\"元素冲突\",{\"1\":{\"1435\":1}}],[\"元素且当前\",{\"1\":{\"1423\":1}}],[\"元素已创建但是还未插入到父节点中\",{\"1\":{\"1407\":1}}],[\"元素可能无法获取到\",{\"1\":{\"1390\":1}}],[\"元素未被移除\",{\"1\":{\"1389\":1}}],[\"元素直接被\",{\"1\":{\"1388\":1}}],[\"元素加入到\",{\"1\":{\"1239\":1}}],[\"元素上添加\",{\"1\":{\"1499\":1}}],[\"元素上\",{\"1\":{\"1356\":1,\"1949\":1}}],[\"元素上发生的点击事件都委托给它的父元素\",{\"1\":{\"1216\":1}}],[\"元素上面\",{\"1\":{\"1158\":1}}],[\"元素也会自动添加上相同的事件\",{\"1\":{\"1158\":1}}],[\"元素就是组件要渲染的内容\",{\"1\":{\"1879\":1}}],[\"元素就是\",{\"1\":{\"1158\":1}}],[\"元素就会处于开始位置\",{\"1\":{\"644\":1}}],[\"元素添加相同的事件\",{\"1\":{\"1158\":1}}],[\"元素添加事件\",{\"1\":{\"1158\":1}}],[\"元素添加一个自定义属性\",{\"1\":{\"1125\":1}}],[\"元素是什么\",{\"1\":{\"1151\":1}}],[\"元素是静止的没有开启定位\",{\"1\":{\"568\":1}}],[\"元素绑定了\",{\"1\":{\"1145\":1}}],[\"元素以后\",{\"1\":{\"1139\":1,\"1140\":1}}],[\"元素对象\",{\"1\":{\"1121\":1}}],[\"元素和\",{\"1\":{\"1112\":1}}],[\"元素节点属性的不同从而执行不同的代码生成函数\",{\"1\":{\"1796\":1}}],[\"元素节点绑定了一个点击事件\",{\"1\":{\"1137\":1}}],[\"元素节点作为子节点\",{\"1\":{\"1112\":1}}],[\"元素节点\",{\"0\":{\"1112\":1},\"1\":{\"1123\":2,\"1204\":1,\"1788\":1,\"1796\":1}}],[\"元素大小\",{\"1\":{\"1087\":1}}],[\"元素位置\",{\"1\":{\"1087\":1}}],[\"元素通过了由提供的函数实现的测试\",{\"1\":{\"857\":1}}],[\"元素设置\",{\"1\":{\"765\":1}}],[\"元素设置浮动以后\",{\"1\":{\"561\":1}}],[\"元素为我们的源对象\",{\"1\":{\"765\":1}}],[\"元素为什么不继承父元素的颜色\",{\"0\":{\"533\":1}}],[\"元素来设置拖放图标\",{\"1\":{\"765\":1}}],[\"元素接口上的方法\",{\"1\":{\"744\":1}}],[\"元素有一个叫做\",{\"1\":{\"704\":1}}],[\"元素只是创造了一个固定大小的画布\",{\"1\":{\"704\":1}}],[\"元素很相像\",{\"1\":{\"703\":1}}],[\"元素默认具有高宽\",{\"1\":{\"701\":1}}],[\"元素所表示的任务一共需要完成多少工作\",{\"1\":{\"696\":1}}],[\"元素代表\",{\"1\":{\"694\":1}}],[\"元素引入了语义化标签\",{\"1\":{\"694\":1}}],[\"元素垂直对齐的方式\",{\"1\":{\"625\":1}}],[\"元素居中总结\",{\"0\":{\"594\":1}}],[\"元素居中排列\",{\"1\":{\"588\":1}}],[\"元素间的关系\",{\"1\":{\"589\":1}}],[\"元素沿着主轴终边排列\",{\"1\":{\"588\":1}}],[\"元素沿着主轴起边排列\",{\"1\":{\"588\":1}}],[\"元素沿着辅轴反方向换行\",{\"1\":{\"587\":1}}],[\"元素沿着辅轴方向自动换行\",{\"1\":{\"587\":1}}],[\"元素越优先显示\",{\"1\":{\"575\":1}}],[\"元素会按照正常流的布局方式进行定位\",{\"1\":{\"574\":1}}],[\"元素会从文档流中脱离\",{\"1\":{\"570\":1}}],[\"元素开启相对定位以后\",{\"1\":{\"569\":1}}],[\"元素开启\",{\"1\":{\"564\":1}}],[\"元素下边的还在文档流中的元素会自动向上移动\",{\"1\":{\"561\":1}}],[\"元素向右浮动\",{\"1\":{\"560\":1}}],[\"元素向左浮动\",{\"1\":{\"560\":1}}],[\"元素不会自动换行\",{\"1\":{\"587\":1}}],[\"元素不浮动\",{\"1\":{\"560\":1}}],[\"元素不在页面中显示\",{\"1\":{\"548\":1}}],[\"元素在辅轴上如何排列\",{\"1\":{\"589\":1}}],[\"元素在其父元素中水平方向的位置由以下几个属性共同决定\",{\"1\":{\"553\":1}}],[\"元素在页面中隐藏不显示\",{\"1\":{\"548\":1}}],[\"元素在页面中正常显示\",{\"1\":{\"548\":1}}],[\"元素在页面中是按照自左向右的顺序排列的\",{\"1\":{\"546\":1}}],[\"元素在标准流中的特点\",{\"0\":{\"540\":1}}],[\"元素中所有的子元素和文本内容都在内容区中排列\",{\"1\":{\"543\":1}}],[\"元素脱离标准流的特点\",{\"0\":{\"541\":1}}],[\"元素按照其在\",{\"1\":{\"539\":1}}],[\"元素的复用\",{\"1\":{\"1951\":1}}],[\"元素的封装\",{\"1\":{\"1879\":1}}],[\"元素的跳转\",{\"1\":{\"1601\":1}}],[\"元素的内容发生变化时\",{\"1\":{\"1357\":1}}],[\"元素的话\",{\"1\":{\"1158\":1}}],[\"元素的宽高\",{\"1\":{\"1150\":1}}],[\"元素的scrollleft和scrolltop可以监控到这一变化\",{\"1\":{\"1150\":1}}],[\"元素的父级元素\",{\"1\":{\"1087\":1}}],[\"元素的\",{\"1\":{\"752\":2,\"761\":1,\"1087\":1,\"1569\":1}}],[\"元素的层级\",{\"0\":{\"575\":1}}],[\"元素的表现有所不同\",{\"1\":{\"552\":1}}],[\"元素的位置由其前面的元素决定\",{\"1\":{\"539\":1}}],[\"元素的用法请参考\",{\"1\":{\"521\":1}}],[\"元素的最后\",{\"1\":{\"521\":1}}],[\"元素的开始\",{\"1\":{\"521\":1}}],[\"元素的伪类\",{\"1\":{\"520\":1}}],[\"元素应当是被选为应用规则中\",{\"1\":{\"515\":1}}],[\"元素\",{\"0\":{\"659\":1,\"693\":1,\"1127\":1,\"1128\":1},\"1\":{\"411\":2,\"514\":1,\"516\":1,\"520\":1,\"524\":1,\"577\":1,\"697\":1,\"701\":1,\"702\":1,\"1112\":1,\"1139\":1,\"1140\":1,\"1160\":1,\"1208\":1,\"1219\":3,\"1232\":1,\"1428\":1,\"1569\":1,\"1797\":2,\"1800\":1,\"1835\":2,\"1874\":2,\"1878\":2,\"1951\":1}}],[\"元组类型\",{\"1\":{\"403\":1}}],[\"元组和单个参数混合时\",{\"1\":{\"402\":1}}],[\"元组对于列表\",{\"1\":{\"392\":1}}],[\"元组内部元素不能修改\",{\"1\":{\"391\":1}}],[\"元组\",{\"1\":{\"381\":2,\"389\":1,\"402\":1}}],[\"冒泡阶段\",{\"1\":{\"1141\":1}}],[\"冒泡到\",{\"1\":{\"1141\":1}}],[\"冒泡\",{\"1\":{\"1141\":1}}],[\"冒泡排序\",{\"0\":{\"410\":1}}],[\"冒号后面的格式为\",{\"1\":{\"388\":1}}],[\"协调世界时是以原子时秒长为基础\",{\"1\":{\"875\":1}}],[\"协调世界时\",{\"1\":{\"875\":1}}],[\"协程之间执行按照一定顺序交替执行\",{\"1\":{\"408\":1}}],[\"协议进行通信\",{\"1\":{\"2095\":1}}],[\"协议可以实现服务器主动推送消息\",{\"1\":{\"1649\":1}}],[\"协议完成握手之后\",{\"1\":{\"1649\":1}}],[\"协议完成握手\",{\"1\":{\"1649\":1}}],[\"协议完成一次特殊的请求\",{\"1\":{\"1648\":1}}],[\"协议升级了\",{\"1\":{\"1648\":1}}],[\"协议之上的\",{\"1\":{\"1647\":1}}],[\"协议来完成一部分握手\",{\"1\":{\"1647\":1}}],[\"协议是什么\",{\"1\":{\"1649\":1}}],[\"协议是一个高扩展性的协议\",{\"1\":{\"1648\":1}}],[\"协议是\",{\"1\":{\"1644\":1}}],[\"协议中\",{\"1\":{\"1632\":1}}],[\"协议中主要规定了两个方面的内容\",{\"1\":{\"266\":1}}],[\"协议通信\",{\"1\":{\"1626\":1}}],[\"协议版本\",{\"1\":{\"1530\":1}}],[\"协议请求的两种方式\",{\"1\":{\"296\":1}}],[\"协议的弱点\",{\"1\":{\"1649\":1}}],[\"协议的握手请求\",{\"1\":{\"1649\":1}}],[\"协议的\",{\"1\":{\"1647\":1}}],[\"协议的特点\",{\"1\":{\"1593\":1}}],[\"协议的版本号\",{\"1\":{\"282\":1}}],[\"协议的默认端口是\",{\"1\":{\"275\":1}}],[\"协议默认端口是\",{\"1\":{\"275\":1}}],[\"协议\",{\"0\":{\"2091\":1},\"1\":{\"266\":1,\"268\":1,\"1093\":1,\"1530\":1,\"1600\":1,\"1627\":1,\"1649\":1,\"2091\":1}}],[\"器的功能\",{\"1\":{\"408\":1}}],[\"某个范围内的全局变量\",{\"1\":{\"1977\":1}}],[\"某个计时器也到达了时间\",{\"1\":{\"1556\":1}}],[\"某个元素距离其父元素的距离达到sticky粘性定位的要求时\",{\"1\":{\"572\":1}}],[\"某些数据变化时会执行回调\",{\"1\":{\"1858\":1}}],[\"某些需要权限的操作就无法进行\",{\"1\":{\"1612\":1}}],[\"某些函数是用户主动调用\",{\"1\":{\"1038\":1}}],[\"某些时候效率较低\",{\"1\":{\"46\":1}}],[\"某些时候可以提高效率\",{\"1\":{\"46\":1}}],[\"某一个程序启动时\",{\"1\":{\"408\":1}}],[\"允许在所有情况下都发送\",{\"1\":{\"2088\":1}}],[\"允许跳转\",{\"1\":{\"2075\":1}}],[\"允许设置值\",{\"1\":{\"1937\":1}}],[\"允许的后缀名\",{\"1\":{\"1592\":1}}],[\"允许的值包括数字\",{\"1\":{\"895\":1}}],[\"允许你根据用户事件来更新部分页面内容\",{\"1\":{\"1572\":1}}],[\"允许你对\",{\"1\":{\"521\":1}}],[\"允许用户在\",{\"1\":{\"1099\":1}}],[\"允许为负\",{\"1\":{\"593\":1}}],[\"允许池中线程的处理函数不一\",{\"1\":{\"408\":1}}],[\"允许使用\",{\"1\":{\"314\":1}}],[\"\",{\"1\":{\"408\":1}}],[\"清空它\",{\"1\":{\"1974\":3}}],[\"清空内容即可\",{\"1\":{\"1951\":1}}],[\"清空\",{\"1\":{\"1926\":1,\"2043\":1}}],[\"清空集合\",{\"1\":{\"1926\":1}}],[\"清空回调队列\",{\"1\":{\"1822\":1}}],[\"清空oldnode文本\",{\"1\":{\"1789\":1}}],[\"清空dom中的子节点\",{\"1\":{\"1789\":1}}],[\"清空队列\",{\"1\":{\"1225\":2,\"2083\":1}}],[\"清空控制台信息\",{\"1\":{\"1150\":1}}],[\"清空文本框的内容\",{\"1\":{\"757\":1}}],[\"清空整个路径容器\",{\"1\":{\"711\":1}}],[\"清除过时的副作用函数\",{\"1\":{\"1984\":1}}],[\"清除定时器\",{\"1\":{\"1410\":1}}],[\"清除\",{\"1\":{\"765\":1}}],[\"清除指定矩形区域\",{\"1\":{\"706\":1}}],[\"清除两侧中最大影响的那侧\",{\"1\":{\"565\":1}}],[\"清除右侧浮动元素对当前元素的影响\",{\"1\":{\"565\":1}}],[\"清除左侧浮动元素对当前元素的影响\",{\"1\":{\"565\":1}}],[\"清除浮动元素对当前元素所产生的影响\",{\"1\":{\"565\":1}}],[\"清除写事件\",{\"1\":{\"408\":1}}],[\"清理\",{\"1\":{\"403\":1}}],[\"计时器的回调函数只能在主线程空闲时运行\",{\"1\":{\"1560\":1}}],[\"计时完成后需要执行的任务\",{\"1\":{\"1558\":1}}],[\"计数排序的升级版\",{\"1\":{\"418\":1}}],[\"计数排序\",{\"0\":{\"417\":1}}],[\"计数器+1\",{\"1\":{\"408\":1}}],[\"计数器\",{\"1\":{\"408\":1}}],[\"计算出来之后需要将这个\",{\"1\":{\"2068\":1}}],[\"计算computed的值\",{\"1\":{\"1859\":1}}],[\"计算得来\",{\"1\":{\"1720\":1}}],[\"计算图是否启用梯度计算\",{\"1\":{\"1677\":1}}],[\"计算每个\",{\"1\":{\"1665\":1}}],[\"计算每个节点的几何信息\",{\"1\":{\"1526\":1}}],[\"计算卷积层输出\",{\"1\":{\"1662\":1}}],[\"计算机硬件没有原子钟\",{\"1\":{\"1560\":1}}],[\"计算样式\",{\"1\":{\"1556\":1}}],[\"计算属性用于判断当前链接是否处于精确的活动状态\",{\"1\":{\"2065\":1}}],[\"计算属性内属性值的变化不会触发副作用函数的重新渲染\",{\"1\":{\"1896\":1}}],[\"计算属性与监视\",{\"0\":{\"1495\":1}}],[\"计算属性最终会出现在\",{\"1\":{\"1376\":1}}],[\"计算属性中\",{\"0\":{\"1375\":1}}],[\"计算属性\",{\"0\":{\"1371\":1,\"1896\":1,\"1986\":1},\"1\":{\"1496\":2}}],[\"计算结果以操作数最左侧的单位类型为准\",{\"1\":{\"1338\":1}}],[\"计算其他变量的值\",{\"1\":{\"1259\":1}}],[\"计算窗口大小\",{\"1\":{\"1035\":1}}],[\"计算阶乘的递归函数\",{\"1\":{\"953\":3}}],[\"计算完成以后再将时间戳转换为表示时间的字符串\",{\"1\":{\"874\":1}}],[\"计算除数与余数\",{\"1\":{\"395\":1}}],[\"计算共轭复数\",{\"1\":{\"395\":1}}],[\"计算\",{\"1\":{\"292\":1,\"1182\":1}}],[\"派生新子类\",{\"1\":{\"408\":1}}],[\"软件\",{\"1\":{\"407\":1}}],[\"软件包\",{\"1\":{\"94\":1}}],[\"十字交叉法\",{\"1\":{\"1743\":1}}],[\"十进制格式\",{\"1\":{\"1101\":1}}],[\"十进制\",{\"1\":{\"792\":1}}],[\"十进制数\",{\"1\":{\"384\":1}}],[\"十六进制代码\",{\"1\":{\"1266\":1}}],[\"十六进制\",{\"1\":{\"792\":1}}],[\"十六进制以0x开头\",{\"1\":{\"792\":1}}],[\"十六进制的\",{\"1\":{\"535\":1}}],[\"十六\",{\"0\":{\"771\":1,\"926\":1}}],[\"十五\",{\"0\":{\"766\":1,\"898\":1}}],[\"十四\",{\"0\":{\"762\":1,\"895\":1,\"954\":1}}],[\"十三\",{\"0\":{\"753\":1,\"885\":1}}],[\"十二\",{\"0\":{\"746\":1,\"878\":1,\"1233\":1}}],[\"十一\",{\"0\":{\"741\":1,\"873\":1,\"1232\":1,\"1300\":1}}],[\"十大经典排序算法\",{\"0\":{\"409\":1}}],[\"十\",{\"0\":{\"406\":1,\"734\":1,\"866\":1,\"1226\":1,\"1299\":1,\"1867\":1}}],[\"符\",{\"1\":{\"1794\":1}}],[\"符合表达式\",{\"1\":{\"1728\":2}}],[\"符号且括号闭合\",{\"1\":{\"1794\":1}}],[\"符号\",{\"1\":{\"1308\":1,\"1311\":1}}],[\"符号一行一行的\",{\"1\":{\"402\":1}}],[\"符操作时\",{\"1\":{\"405\":1}}],[\"若为条件注释\",{\"1\":{\"1792\":1}}],[\"若为注释\",{\"1\":{\"1792\":1}}],[\"若不保留注释\",{\"1\":{\"1792\":1}}],[\"若不相同\",{\"1\":{\"1789\":1}}],[\"若保留注释\",{\"1\":{\"1792\":1}}],[\"若存在\",{\"1\":{\"1792\":2}}],[\"若vnode和oldnode都没有子节点\",{\"1\":{\"1789\":1}}],[\"若只有oldnode的子节点存在\",{\"1\":{\"1789\":1}}],[\"若只有vnode的子节点存在\",{\"1\":{\"1789\":1}}],[\"若没有\",{\"1\":{\"1789\":1}}],[\"若没有网络请求或其他业务逻辑\",{\"1\":{\"1451\":1}}],[\"若都存在\",{\"1\":{\"1789\":1}}],[\"若问\",{\"1\":{\"1751\":3}}],[\"若问的是班级内的女同学在学校中的比重为为多少\",{\"1\":{\"1733\":1}}],[\"若增长率为\",{\"1\":{\"1722\":1}}],[\"若服务器没有明确告知\",{\"1\":{\"1612\":1}}],[\"若是\",{\"1\":{\"1569\":1,\"1789\":2}}],[\"若当前的页面是通过\",{\"1\":{\"1569\":1}}],[\"若干解释\",{\"0\":{\"1557\":1}}],[\"若设置了这个值\",{\"1\":{\"1539\":1}}],[\"若遇到外部资源链接\",{\"1\":{\"1530\":1}}],[\"若命中缓存则直接使用缓存\",{\"1\":{\"1530\":1}}],[\"若watch监视的是reactive定义的响应式数据\",{\"1\":{\"1497\":2}}],[\"若返回一个渲染函数\",{\"1\":{\"1486\":1}}],[\"若返回一个对象\",{\"1\":{\"1486\":1}}],[\"若以后将地址通过第三方手机\",{\"1\":{\"1468\":1}}],[\"若使用了\",{\"1\":{\"1530\":1}}],[\"若使用\",{\"1\":{\"1461\":1}}],[\"若需要传递参数需要\",{\"1\":{\"1453\":1}}],[\"若按照上述配置代理\",{\"1\":{\"1444\":1}}],[\"若有\",{\"1\":{\"1789\":1}}],[\"若有敏感数据传递\",{\"1\":{\"1569\":1}}],[\"若有多个元素需要过渡\",{\"1\":{\"1441\":1}}],[\"若有除\",{\"1\":{\"405\":1}}],[\"若想让自定义事件只能触发一次\",{\"1\":{\"1437\":1}}],[\"若想检查某个单词是否包含重叠出现的字母\",{\"1\":{\"912\":1}}],[\"若业务需求确实需要修改\",{\"1\":{\"1429\":1}}],[\"若对数据进行\",{\"1\":{\"1394\":1}}],[\"若虚拟\",{\"1\":{\"1394\":2}}],[\"若\",{\"1\":{\"1357\":3,\"1468\":1}}],[\"若最后的布尔值不填写\",{\"1\":{\"1145\":1}}],[\"若获取的样式没有设置\",{\"1\":{\"1129\":1}}],[\"若拼接后的参数集\",{\"1\":{\"1039\":1}}],[\"若固定了\",{\"1\":{\"1039\":1}}],[\"若参数为空\",{\"1\":{\"765\":1}}],[\"若网速比较慢\",{\"1\":{\"621\":1}}],[\"若其中某个值为\",{\"1\":{\"554\":1}}],[\"若可以继承\",{\"1\":{\"531\":1}}],[\"若继承关系比较复杂\",{\"1\":{\"405\":1}}],[\"继而引发浏览器的重排与重绘\",{\"1\":{\"1034\":1}}],[\"继续向后匹配\",{\"1\":{\"1792\":1}}],[\"继续向后解析\",{\"1\":{\"1792\":1}}],[\"继续判断options中是否保留注释\",{\"1\":{\"1792\":1}}],[\"继续解析后续的\",{\"1\":{\"1526\":1}}],[\"继续柯里化\",{\"1\":{\"1039\":1}}],[\"继续往后匹配\",{\"1\":{\"923\":1}}],[\"继续编写代码\",{\"1\":{\"133\":1}}],[\"继承第三方动画\",{\"1\":{\"1441\":1}}],[\"继承可让多个选择器应用同一组属性\",{\"1\":{\"1339\":1}}],[\"继承是首先有一个基类存在\",{\"1\":{\"1299\":1}}],[\"继承是发生在祖先和后代之间的\",{\"1\":{\"527\":1}}],[\"继承模式\",{\"0\":{\"1068\":1},\"2\":{\"1075\":1}}],[\"继承来的方法\",{\"1\":{\"995\":1}}],[\"继承\",{\"0\":{\"1297\":1,\"1339\":1},\"1\":{\"532\":1,\"1009\":1,\"1201\":1,\"1299\":2},\"2\":{\"537\":1}}],[\"继承的设计是为了方便我们的开发\",{\"1\":{\"527\":1}}],[\"继承的样式\",{\"1\":{\"524\":1}}],[\"继承的实现\",{\"1\":{\"405\":1}}],[\"继承exception类\",{\"1\":{\"405\":1}}],[\"继承其他模块的基类\",{\"1\":{\"405\":1}}],[\"既会读取\",{\"1\":{\"1892\":1}}],[\"既\",{\"1\":{\"1751\":1}}],[\"既不会影响布局也不会影响绘制指令\",{\"1\":{\"1529\":1}}],[\"既要指明监视的属性\",{\"1\":{\"1498\":1}}],[\"既为过程对象\",{\"1\":{\"764\":1}}],[\"既可以在\",{\"1\":{\"1324\":1}}],[\"既可以是\",{\"1\":{\"752\":1}}],[\"既可以设置宽度和高度又不会独占一行\",{\"1\":{\"548\":1}}],[\"既避免了上述错误\",{\"1\":{\"405\":1}}],[\"既然有多个\",{\"1\":{\"2047\":1}}],[\"既然原生对象能够转换为\",{\"1\":{\"1198\":1}}],[\"既然介绍到了事件对象\",{\"1\":{\"1155\":1}}],[\"既然是对象\",{\"1\":{\"1087\":1,\"2041\":1}}],[\"既然是局部变量\",{\"1\":{\"786\":1}}],[\"既然指定了后面不能是某一个字符\",{\"1\":{\"918\":1}}],[\"既然学习到了对象\",{\"1\":{\"834\":1}}],[\"既然叫做默认值\",{\"1\":{\"832\":1}}],[\"既然讲到了对象属性的中括号访问法\",{\"1\":{\"828\":1}}],[\"既然占位符是可以是\",{\"1\":{\"790\":1}}],[\"既然开发时态和运行时态面临的局面有巨大的差异\",{\"1\":{\"118\":1}}],[\"既然\",{\"1\":{\"25\":3}}],[\"既然后端可以使用模块化的\",{\"1\":{\"25\":1}}],[\"免上述错误中自动生成同名的实例变量\",{\"1\":{\"405\":1}}],[\"免费\",{\"1\":{\"213\":1}}],[\"避免内存泄漏\",{\"1\":{\"2070\":1}}],[\"避免用户意外地修改\",{\"1\":{\"1954\":1}}],[\"避免污染原始数据\",{\"0\":{\"1929\":1}}],[\"避免循环引用引起的死循环\",{\"1\":{\"1897\":1}}],[\"避免每次获取值时都要重新计算\",{\"1\":{\"1857\":1}}],[\"避免遗忘\",{\"1\":{\"1736\":1}}],[\"避免组件被复用时\",{\"1\":{\"1415\":1}}],[\"避免编译\",{\"0\":{\"1341\":1}}],[\"避免因为列表被更改而出现一些\",{\"1\":{\"1272\":1}}],[\"避免了同名的属性名发生冲突\",{\"1\":{\"828\":1}}],[\"避免不了要实用异步的处理方案\",{\"1\":{\"24\":1}}],[\"避\",{\"1\":{\"405\":1}}],[\"独享守卫\",{\"1\":{\"1467\":2}}],[\"独立文件\",{\"1\":{\"771\":1}}],[\"独立于其他堆叠上下文\",{\"1\":{\"578\":1}}],[\"独立于整个类\",{\"1\":{\"405\":1}}],[\"独立\",{\"1\":{\"564\":1}}],[\"独占一行\",{\"1\":{\"540\":1}}],[\"独有的获取报文的方式\",{\"1\":{\"305\":1}}],[\"装饰的方法不能使用实例属性\",{\"1\":{\"405\":1}}],[\"装饰器+私有变量\",{\"1\":{\"405\":1}}],[\"装饰器在装饰函数时\",{\"1\":{\"402\":1}}],[\"装饰器本质是一个闭合函数\",{\"1\":{\"402\":1}}],[\"装饰器\",{\"1\":{\"402\":1}}],[\"互斥锁的基础上加入wait\",{\"1\":{\"408\":1}}],[\"互斥锁\",{\"1\":{\"408\":1}}],[\"互的函数方法上\",{\"1\":{\"405\":1}}],[\"互转\",{\"1\":{\"404\":1}}],[\"限制必要性\",{\"1\":{\"1429\":1}}],[\"限制类型\",{\"1\":{\"1429\":2}}],[\"限制直接操作\",{\"0\":{\"1239\":1}}],[\"限制一个函数在规定时间内只能执行一次\",{\"1\":{\"1036\":1}}],[\"限制多选结构的范围\",{\"1\":{\"902\":1}}],[\"限制合法的可添加动态属性\",{\"1\":{\"405\":1}}],[\"限流\",{\"1\":{\"507\":1}}],[\"限校验\",{\"1\":{\"408\":1}}],[\"限定输入框的内容\",{\"1\":{\"758\":1}}],[\"限定\",{\"1\":{\"211\":1,\"913\":1}}],[\"九个级别\",{\"1\":{\"621\":1}}],[\"九\",{\"0\":{\"405\":1,\"605\":1,\"728\":1,\"858\":1,\"1103\":1,\"1220\":1,\"1298\":1,\"1341\":1,\"1753\":1,\"1863\":1}}],[\"事实证明\",{\"1\":{\"1658\":1}}],[\"事实上的标准\",{\"1\":{\"1112\":1}}],[\"事实上很简单\",{\"1\":{\"1084\":1}}],[\"事实上在\",{\"1\":{\"865\":1}}],[\"事实上我们的比较函数还有一种更加简单的书写方法\",{\"1\":{\"855\":1}}],[\"事实上\",{\"1\":{\"735\":1,\"1276\":1,\"1658\":1}}],[\"事后三个明显阶段\",{\"1\":{\"404\":1}}],[\"事中\",{\"1\":{\"404\":1}}],[\"事件什么时候触发\",{\"1\":{\"2061\":2}}],[\"事件触发之后\",{\"1\":{\"2061\":1}}],[\"事件触发的时候\",{\"1\":{\"2061\":1}}],[\"事件触发\",{\"1\":{\"2061\":1}}],[\"事件不存在\",{\"1\":{\"1954\":1}}],[\"事件添加到\",{\"1\":{\"1878\":1}}],[\"事件相关\",{\"0\":{\"1813\":1}}],[\"事件依然有效\",{\"1\":{\"1411\":1}}],[\"事件才被触发\",{\"1\":{\"1370\":1}}],[\"事件才会发生\",{\"1\":{\"1160\":1}}],[\"事件只触发一次\",{\"1\":{\"1369\":2}}],[\"事件修饰符\",{\"0\":{\"1369\":1}}],[\"事件值\",{\"1\":{\"1358\":1}}],[\"事件就没有\",{\"1\":{\"1218\":1}}],[\"事件就会被触发\",{\"1\":{\"770\":2}}],[\"事件管理模块\",{\"1\":{\"1179\":1}}],[\"事件监听\",{\"1\":{\"1177\":1,\"1558\":1}}],[\"事件监听器以及\",{\"1\":{\"2070\":1}}],[\"事件监听器就会执行相应的代码\",{\"1\":{\"1151\":1}}],[\"事件监听器有所改进\",{\"1\":{\"1144\":1}}],[\"事件监听器根据\",{\"1\":{\"1142\":1}}],[\"事件监听器\",{\"0\":{\"1142\":1,\"1143\":1},\"1\":{\"1142\":1,\"1143\":1}}],[\"事件监听器会让我们知道\",{\"1\":{\"1137\":1}}],[\"事件模块\",{\"1\":{\"1173\":1}}],[\"事件会在用户尝试打开上下文菜单时被触发\",{\"1\":{\"1163\":1}}],[\"事件会一直冒泡到\",{\"1\":{\"1158\":1}}],[\"事件中进行\",{\"0\":{\"1240\":1}}],[\"事件中\",{\"1\":{\"1161\":2}}],[\"事件委托能够减少在子元素进行事件绑定\",{\"1\":{\"1241\":1}}],[\"事件委托利用了事件冒泡\",{\"1\":{\"1158\":1}}],[\"事件委托\",{\"0\":{\"1158\":1},\"1\":{\"1158\":1}}],[\"事件对上述内容的行为响应做了统一\",{\"1\":{\"1153\":1}}],[\"事件对象还有shiftkey\",{\"1\":{\"1154\":1}}],[\"事件对象的eventphase属性可以返回一个整数值\",{\"1\":{\"1157\":1}}],[\"事件对象的type属性会返回当前所触发的事件类型是什么\",{\"1\":{\"1152\":1}}],[\"事件对象的兼容\",{\"1\":{\"1151\":1}}],[\"事件对象中都会拥有的属性\",{\"1\":{\"1152\":1}}],[\"事件对象是作为\",{\"1\":{\"1151\":1}}],[\"事件对象是以事件处理函数中的参数形式出现的\",{\"1\":{\"1151\":2}}],[\"事件对象说明\",{\"1\":{\"1151\":1}}],[\"事件对象\",{\"0\":{\"1151\":1}}],[\"事件坐标\",{\"1\":{\"1153\":1}}],[\"事件目标\",{\"1\":{\"1152\":1}}],[\"事件源\",{\"1\":{\"1151\":1}}],[\"事件类型\",{\"0\":{\"1147\":1},\"1\":{\"1152\":1,\"1357\":1}}],[\"事件又传播回文档\",{\"1\":{\"1141\":1}}],[\"事件在\",{\"1\":{\"1141\":1}}],[\"事件从\",{\"1\":{\"1141\":1}}],[\"事件流示意图\",{\"1\":{\"1141\":1}}],[\"事件流\",{\"0\":{\"1141\":1,\"1157\":1}}],[\"事件流介绍\",{\"0\":{\"1138\":1}}],[\"事件捕获阶段\",{\"1\":{\"1141\":2}}],[\"事件捕获的思想是在事件到达预定目标之前就捕获它\",{\"1\":{\"1140\":1}}],[\"事件捕获的思想是不太具体的节点应该更早接收到事件\",{\"1\":{\"1140\":1}}],[\"事件捕获\",{\"0\":{\"1140\":1}}],[\"事件沿\",{\"1\":{\"1139\":1}}],[\"事件冒泡一个最大的好处就是可以实现事件委托\",{\"1\":{\"1158\":1}}],[\"事件冒泡处理可能会激活我们本来不想激活的事件\",{\"1\":{\"1155\":1}}],[\"事件冒泡\",{\"0\":{\"1139\":1}}],[\"事件介绍\",{\"0\":{\"1137\":1}}],[\"事件与事件流\",{\"0\":{\"1136\":1}}],[\"事件最早是在\",{\"1\":{\"1135\":1}}],[\"事件参考\",{\"1\":{\"1131\":1}}],[\"事件里面直接书写\",{\"0\":{\"1081\":1}}],[\"事件函数里有一些跟\",{\"1\":{\"1034\":1}}],[\"事件绑定\",{\"1\":{\"995\":1,\"1576\":1}}],[\"事件来跟踪其进度\",{\"1\":{\"773\":1}}],[\"事件来规定图片拖动到\",{\"1\":{\"765\":1}}],[\"事件来规定在何处放置被拖动的数据\",{\"1\":{\"765\":1}}],[\"事件处理方法\",{\"1\":{\"2061\":1}}],[\"事件处理机制\",{\"0\":{\"1176\":1}}],[\"事件处理函数会收到一个事件对象\",{\"1\":{\"2061\":1}}],[\"事件处理函数\",{\"1\":{\"1145\":1,\"1878\":1}}],[\"事件处理函数里面的\",{\"1\":{\"993\":1}}],[\"事件处理程序中\",{\"1\":{\"1156\":1}}],[\"事件处理程序里面的\",{\"1\":{\"1152\":1}}],[\"事件处理程序\",{\"1\":{\"1143\":1,\"1148\":1,\"1158\":1}}],[\"事件处理\",{\"0\":{\"1367\":1},\"1\":{\"1105\":1,\"2069\":1}}],[\"事件处理器的代码隐藏于标记中\",{\"1\":{\"1143\":1}}],[\"事件处理器\",{\"1\":{\"772\":1}}],[\"事件处理来异步读取文件\",{\"1\":{\"771\":1}}],[\"事件的时候随着事件对象传入的\",{\"1\":{\"2061\":1}}],[\"事件的事件处理函数\",{\"1\":{\"2060\":2}}],[\"事件的\",{\"1\":{\"1438\":1}}],[\"事件的回调在\",{\"1\":{\"1437\":1}}],[\"事件的回调需要配置在methods对象中\",{\"1\":{\"1368\":1}}],[\"事件的默认行为立即执行\",{\"1\":{\"1369\":1}}],[\"事件的类型\",{\"1\":{\"1219\":1}}],[\"事件的目标一样\",{\"1\":{\"1158\":1}}],[\"事件的处理\",{\"1\":{\"1105\":4}}],[\"事件的处理函数调用的e\",{\"1\":{\"765\":1}}],[\"事件的event\",{\"1\":{\"764\":1}}],[\"事件描述\",{\"1\":{\"752\":1}}],[\"事件名称\",{\"1\":{\"773\":1,\"1878\":1,\"1954\":1}}],[\"事件名\",{\"1\":{\"752\":1,\"1145\":1,\"1358\":1}}],[\"事件操作\",{\"0\":{\"745\":1}}],[\"事件机制\",{\"1\":{\"408\":1}}],[\"事件\",{\"0\":{\"770\":1,\"1135\":1},\"1\":{\"252\":1,\"283\":2,\"752\":1,\"764\":2,\"765\":1,\"770\":2,\"773\":1,\"1034\":7,\"1132\":2,\"1140\":1,\"1149\":1,\"1153\":1,\"1155\":1,\"1160\":2,\"1219\":2,\"1358\":2,\"1437\":1,\"1438\":1,\"1530\":2,\"1949\":1,\"1950\":1,\"1953\":1,\"2034\":2,\"2050\":2,\"2061\":1},\"2\":{\"1165\":1}}],[\"事件循环又叫做消息循环\",{\"1\":{\"1560\":1}}],[\"事件循环机制\",{\"2\":{\"1184\":1}}],[\"事件循环模型\",{\"1\":{\"1180\":1}}],[\"事件循环\",{\"0\":{\"1551\":1},\"1\":{\"224\":1},\"2\":{\"1562\":1}}],[\"事件回调函数只执行一次\",{\"1\":{\"191\":1}}],[\"先看后面的\",{\"1\":{\"2061\":1}}],[\"先看代码\",{\"1\":{\"1559\":1}}],[\"先更新组件的数据\",{\"1\":{\"2002\":1}}],[\"先遍历新子节点构造出索引表\",{\"1\":{\"1969\":1}}],[\"先获取\",{\"1\":{\"1962\":1}}],[\"先获取旧值\",{\"1\":{\"1909\":1}}],[\"先尝试读取自身状态数据\",{\"1\":{\"1956\":1}}],[\"先移除之前添加的事件处理函数\",{\"1\":{\"1949\":1}}],[\"先判断值是否已经存在\",{\"1\":{\"1928\":1}}],[\"先在代理对象中查找\",{\"1\":{\"1923\":1,\"1924\":1,\"1993\":1}}],[\"先去代理对象中查找\",{\"1\":{\"1922\":1}}],[\"先去除尾数不为\",{\"1\":{\"1711\":1}}],[\"先调用过期回调\",{\"1\":{\"1897\":1}}],[\"先调用\",{\"1\":{\"1890\":1}}],[\"先用\",{\"1\":{\"1791\":1}}],[\"先把它从所有与之关联的依赖集合中删除\",{\"1\":{\"1890\":1}}],[\"先把\",{\"1\":{\"1793\":1,\"1874\":1}}],[\"先把两个节点进行patch更新\",{\"1\":{\"1789\":2}}],[\"先把原来的object\",{\"1\":{\"487\":1}}],[\"先处理下标`\",{\"1\":{\"1769\":1}}],[\"先查找比较\",{\"1\":{\"1736\":1}}],[\"先拆出\",{\"1\":{\"1720\":1}}],[\"先睡了\",{\"1\":{\"1635\":1}}],[\"先创建一个组件instance\",{\"1\":{\"2000\":1}}],[\"先创建\",{\"1\":{\"1360\":1}}],[\"先使用tagname\",{\"1\":{\"1353\":1}}],[\"先加载一个\",{\"1\":{\"1300\":1}}],[\"先加速\",{\"1\":{\"641\":2}}],[\"先单独将绑定函数写好\",{\"1\":{\"1146\":1}}],[\"先排数字\",{\"1\":{\"1054\":1}}],[\"先排序\",{\"1\":{\"458\":1}}],[\"先来看一个普通函数作为对象的一个方法被调用时\",{\"1\":{\"996\":1}}],[\"先有作用域\",{\"1\":{\"1020\":1}}],[\"先有\",{\"1\":{\"980\":1,\"1862\":1}}],[\"先有进程\",{\"1\":{\"408\":1}}],[\"先声明再赋值\",{\"1\":{\"843\":1}}],[\"先将其实例作为\",{\"1\":{\"2016\":1}}],[\"先将其转换为\",{\"1\":{\"806\":2}}],[\"先将\",{\"1\":{\"925\":1}}],[\"先将自己分支上的修改保存起来\",{\"1\":{\"11\":1}}],[\"先请求到node服务器这一层\",{\"1\":{\"507\":1}}],[\"先平展复制到stack\",{\"1\":{\"452\":1}}],[\"先取出\",{\"1\":{\"419\":1}}],[\"先存入桶中的数字\",{\"1\":{\"419\":1}}],[\"先实例化对象\",{\"1\":{\"405\":1}}],[\"先\",{\"1\":{\"404\":1}}],[\"读题分两步\",{\"1\":{\"1736\":1}}],[\"读完文段时要明确的内容\",{\"1\":{\"1685\":1}}],[\"读\",{\"1\":{\"1001\":1,\"1098\":2,\"1365\":1,\"1366\":2,\"1448\":1}}],[\"读写\",{\"1\":{\"750\":2}}],[\"读写文件\",{\"1\":{\"404\":1}}],[\"读取操作\",{\"0\":{\"1989\":1}}],[\"读取真实值\",{\"1\":{\"1938\":1}}],[\"读取其他属性的默认行为\",{\"1\":{\"1927\":1}}],[\"读取指定\",{\"1\":{\"1926\":1}}],[\"读取了\",{\"1\":{\"1902\":1}}],[\"读取对象的每一个值\",{\"1\":{\"1897\":1}}],[\"读取和设置\",{\"1\":{\"1804\":1}}],[\"读取数据时模板中直接读取\",{\"1\":{\"1492\":1}}],[\"读取划分页面文本\",{\"1\":{\"1172\":1}}],[\"读取图片文件作为数据\",{\"1\":{\"773\":1}}],[\"读取到该\",{\"1\":{\"345\":1}}],[\"读取\",{\"1\":{\"256\":1,\"263\":2,\"349\":2,\"404\":1,\"1892\":1,\"1904\":1,\"1915\":1}}],[\"读取完毕\",{\"1\":{\"252\":1}}],[\"读取完毕后\",{\"1\":{\"252\":1}}],[\"读取任务\",{\"1\":{\"242\":1}}],[\"读取目标文件代码\",{\"1\":{\"239\":1}}],[\"读取失败~~~\",{\"1\":{\"205\":1,\"206\":2,\"207\":2}}],[\"读取入口文件\",{\"1\":{\"155\":1}}],[\"读取文件内容\",{\"1\":{\"263\":1,\"287\":1,\"294\":1}}],[\"读取文件夹\",{\"0\":{\"258\":1},\"1\":{\"256\":1}}],[\"读取文件应用场景\",{\"0\":{\"253\":1}}],[\"读取文件的代码\",{\"1\":{\"239\":1}}],[\"读取文件\",{\"0\":{\"773\":1},\"1\":{\"122\":1}}],[\"报告冲突\",{\"1\":{\"1954\":1}}],[\"报案失踪\",{\"1\":{\"1621\":1}}],[\"报错是因为\",{\"1\":{\"995\":1}}],[\"报错\",{\"1\":{\"403\":1,\"789\":1,\"829\":1,\"830\":1,\"973\":1,\"1012\":1,\"1021\":1,\"1305\":1,\"1315\":1}}],[\"报文给浏览器\",{\"1\":{\"1530\":1}}],[\"报文中\",{\"0\":{\"284\":1}}],[\"报文的请求体\",{\"0\":{\"283\":1}}],[\"报文\",{\"0\":{\"276\":1},\"1\":{\"266\":1}}],[\"断词\",{\"1\":{\"1408\":1}}],[\"断开了\",{\"1\":{\"865\":1}}],[\"断开连接\",{\"1\":{\"191\":1}}],[\"断言相关元字符\",{\"0\":{\"915\":1}}],[\"断言\",{\"1\":{\"403\":1}}],[\"判别方式\",{\"1\":{\"965\":1,\"966\":1}}],[\"判定条件的正确性\",{\"1\":{\"403\":1}}],[\"判断证书的网站域名是否与证书颁发的域名一致\",{\"1\":{\"2091\":1}}],[\"判断请求的来源是否合法\",{\"1\":{\"2088\":1}}],[\"判断请求方式以及请求路径\",{\"1\":{\"294\":1}}],[\"判断新旧组件是否一致\",{\"1\":{\"2071\":1}}],[\"判断条件如下\",{\"1\":{\"2069\":1}}],[\"判断条件过于复杂\",{\"1\":{\"486\":1}}],[\"判断你是否是首次渲染\",{\"1\":{\"2058\":1}}],[\"判断其是否是第一次启动应用\",{\"1\":{\"2047\":1}}],[\"判断计算属性\",{\"1\":{\"2020\":1}}],[\"判断是否是路由级别的组件\",{\"1\":{\"2074\":1}}],[\"判断是否和\",{\"1\":{\"2073\":1}}],[\"判断是否传入了\",{\"1\":{\"2054\":1}}],[\"判断是否需要进行移动的方式与简单\",{\"1\":{\"1969\":1}}],[\"判断是否有节点需要移动\",{\"1\":{\"1959\":1}}],[\"判断是否有错误\",{\"1\":{\"191\":1,\"212\":1}}],[\"判断旧子节点是否也是一组子节点\",{\"1\":{\"1951\":1}}],[\"判断读取的\",{\"1\":{\"1929\":1}}],[\"判断集合中是否存在给定的值\",{\"1\":{\"1926\":1}}],[\"判断数组的\",{\"1\":{\"1925\":1,\"1993\":1}}],[\"判断传入的文本是否包含变量\",{\"1\":{\"1793\":1}}],[\"判断子节点是否相同\",{\"1\":{\"1789\":1}}],[\"判断子类\",{\"1\":{\"405\":1}}],[\"判断值是否为thenable对象\",{\"1\":{\"1777\":1}}],[\"判断推理笔记\",{\"0\":{\"1756\":1}}],[\"判断选项\",{\"1\":{\"1684\":1}}],[\"判断标识变量\",{\"1\":{\"1582\":1}}],[\"判断响应状态码\",{\"1\":{\"1575\":1}}],[\"判断当前路由的索引位置是否等于当前路由的匹配路由数组长度减\",{\"1\":{\"2065\":1}}],[\"判断当前路由的索引位置是否大于\",{\"1\":{\"2065\":1}}],[\"判断当前路由是否需要进行权限控制\",{\"1\":{\"1467\":2}}],[\"判断当前窗口是否处于焦点来决定还是否要闪烁\",{\"1\":{\"1104\":1}}],[\"判断一下是否需要排序\",{\"1\":{\"1395\":1}}],[\"判断一个\",{\"1\":{\"1795\":1}}],[\"判断一个属性是定义在对象本身上面的\",{\"1\":{\"1067\":1}}],[\"判断一个对象是否是一个构造函数的实例\",{\"1\":{\"1065\":1}}],[\"判断浏览器是否支持\",{\"1\":{\"1105\":1}}],[\"判断总结\",{\"0\":{\"967\":1}}],[\"判断为false\",{\"1\":{\"819\":1}}],[\"判断在当前路径\",{\"1\":{\"745\":1}}],[\"判断oldvnode是否有文本\",{\"1\":{\"1789\":1}}],[\"判断old\",{\"1\":{\"487\":1}}],[\"判断类实例中是否含有某个属性\",{\"1\":{\"405\":1}}],[\"判断类1是否是类2的子类\",{\"1\":{\"405\":1}}],[\"判断对象是否是类的实例\",{\"1\":{\"405\":1}}],[\"判断实例\",{\"1\":{\"405\":1}}],[\"判断\",{\"1\":{\"212\":1,\"263\":1,\"294\":1,\"1576\":1,\"1677\":1,\"1702\":1,\"1792\":1,\"1926\":1,\"2058\":1}}],[\"判断有依赖对象\",{\"1\":{\"155\":1}}],[\"判断缓存\",{\"1\":{\"37\":1}}],[\"误行\",{\"1\":{\"403\":1}}],[\"追踪依赖\",{\"1\":{\"1929\":1}}],[\"追踪\",{\"1\":{\"1507\":1}}],[\"追踪错\",{\"1\":{\"403\":1}}],[\"追加方括号\",{\"1\":{\"1979\":1}}],[\"追加元素\",{\"0\":{\"1270\":1}}],[\"追加内容\",{\"1\":{\"1232\":1}}],[\"追加标签中的内容\",{\"1\":{\"1232\":1}}],[\"追加一个子节点到最前\",{\"1\":{\"1209\":2}}],[\"追加一个子节点到最后\",{\"1\":{\"1209\":2}}],[\"追加成功\",{\"1\":{\"246\":1}}],[\"追加写入\",{\"0\":{\"246\":1},\"1\":{\"243\":1}}],[\"追加\",{\"1\":{\"68\":1,\"1979\":1}}],[\"称为\",{\"1\":{\"415\":1,\"1273\":1}}],[\"称\",{\"1\":{\"403\":1}}],[\"称之为resolve\",{\"1\":{\"1776\":1}}],[\"称之为跨域\",{\"1\":{\"1599\":1}}],[\"称之为订阅者\",{\"1\":{\"1368\":1}}],[\"称之为标签\",{\"1\":{\"657\":1}}],[\"称之为字面量格式化字符串\",{\"1\":{\"389\":1}}],[\"称之为\",{\"1\":{\"242\":1,\"1526\":1,\"1554\":1}}],[\"俗称\",{\"1\":{\"402\":1}}],[\"修正\",{\"1\":{\"466\":1,\"1071\":1,\"1072\":1}}],[\"修饰符的事件\",{\"1\":{\"1834\":1}}],[\"修饰符可以连续写\",{\"1\":{\"1369\":1}}],[\"修饰符加给内层事件\",{\"1\":{\"1369\":1}}],[\"修饰符\",{\"1\":{\"402\":1,\"1358\":1,\"1369\":1}}],[\"修改页面的url\",{\"1\":{\"2029\":2}}],[\"修改值可以触发响应\",{\"1\":{\"1936\":1}}],[\"修改原数组的原型方法\",{\"1\":{\"1915\":1}}],[\"修改数组长度\",{\"1\":{\"1915\":1}}],[\"修改数组中的某个元素一定要用如下方法\",{\"1\":{\"1396\":1}}],[\"修改副作用注册函数\",{\"1\":{\"1890\":2}}],[\"修改标识变量\",{\"1\":{\"1582\":1}}],[\"修改进行拦截\",{\"1\":{\"1490\":1}}],[\"修改网页的title\",{\"1\":{\"1467\":1}}],[\"修改store\",{\"1\":{\"1454\":1}}],[\"修改state中的数据\",{\"1\":{\"1450\":1}}],[\"修改对象中的属性时\",{\"1\":{\"1429\":1}}],[\"修改默认值\",{\"1\":{\"1312\":2}}],[\"修改的节点在后\",{\"1\":{\"1210\":1}}],[\"修改节点\",{\"1\":{\"1208\":1}}],[\"修改元素的样式\",{\"0\":{\"1126\":1}}],[\"修改文档内容等等\",{\"1\":{\"1109\":1}}],[\"修改文章内容\",{\"1\":{\"186\":1}}],[\"修改为\",{\"1\":{\"2030\":1,\"2047\":1}}],[\"修改为$\",{\"1\":{\"770\":1}}],[\"修改为官方的官方镜像\",{\"1\":{\"91\":1}}],[\"修改样式\",{\"1\":{\"521\":1}}],[\"修改权限\",{\"1\":{\"404\":1}}],[\"修改歌曲\",{\"1\":{\"339\":2}}],[\"修改其他端口号\",{\"1\":{\"275\":1}}],[\"修改商品价格\",{\"1\":{\"186\":1}}],[\"修改了\",{\"1\":{\"158\":1,\"2030\":1,\"2031\":1}}],[\"修改镜像源\",{\"1\":{\"228\":1}}],[\"修改镜像\",{\"1\":{\"69\":1}}],[\"修改后的数据\",{\"1\":{\"27\":1}}],[\"修改代码\",{\"1\":{\"17\":1}}],[\"修改代码后\",{\"1\":{\"7\":1}}],[\"修改分支的名字的为main\",{\"1\":{\"12\":1}}],[\"修改\",{\"0\":{\"1279\":1},\"1\":{\"7\":1,\"17\":1,\"92\":1,\"149\":1,\"199\":1,\"1582\":1,\"1632\":1,\"1910\":1,\"1911\":1,\"1916\":1}}],[\"闭合\",{\"1\":{\"1794\":3}}],[\"闭合标签或者自闭合标签\",{\"1\":{\"1353\":1}}],[\"闭合路径\",{\"1\":{\"711\":1}}],[\"闭合路径之后图形绘制命令又重新指向到上下文中\",{\"1\":{\"711\":1}}],[\"闭合函数\",{\"1\":{\"402\":1}}],[\"闭包应用\",{\"1\":{\"1025\":1}}],[\"闭包死亡\",{\"1\":{\"1025\":1}}],[\"闭包本质是内部函数中的一个对象\",{\"1\":{\"1023\":1}}],[\"闭包不是一种具体的技术\",{\"1\":{\"1023\":1}}],[\"闭包\",{\"0\":{\"1022\":1},\"1\":{\"29\":1,\"1029\":1},\"2\":{\"1042\":1}}],[\"普通对象必须具有一组被称为基本内部方法\",{\"1\":{\"1903\":1}}],[\"普通混合\",{\"0\":{\"1334\":1}}],[\"普通的纯文本\",{\"1\":{\"1570\":1,\"1636\":1}}],[\"普通的\",{\"1\":{\"1262\":1}}],[\"普通的工厂函数\",{\"1\":{\"402\":1}}],[\"普通变量定义后可以在全局范围内使用\",{\"1\":{\"1260\":1}}],[\"普通函数作为对象的一个方法被调用时\",{\"1\":{\"996\":1}}],[\"普通按钮\",{\"1\":{\"756\":2}}],[\"普通装饰器\",{\"1\":{\"402\":1}}],[\"普通\",{\"1\":{\"402\":1}}],[\"外层\",{\"1\":{\"2074\":1}}],[\"外层是一个route对象\",{\"1\":{\"2028\":1}}],[\"外层是方括号\",{\"1\":{\"402\":1}}],[\"外观上更加的简洁美观\",{\"1\":{\"2050\":1}}],[\"外面无法使用\",{\"1\":{\"948\":1}}],[\"外\",{\"1\":{\"681\":1,\"902\":1}}],[\"外边距重叠\",{\"0\":{\"558\":1}}],[\"外边距折叠仅与\",{\"1\":{\"552\":1}}],[\"外边距不会影响盒子可见框的大小\",{\"1\":{\"546\":1}}],[\"外边距以及边框会被应用且\",{\"1\":{\"540\":1}}],[\"外边距以及边框会被应用但是\",{\"1\":{\"540\":1}}],[\"外边距\",{\"0\":{\"546\":1},\"1\":{\"540\":2,\"542\":1}}],[\"外部就可以通过\",{\"1\":{\"2047\":1}}],[\"外部样式\",{\"1\":{\"1526\":1}}],[\"外部的\",{\"1\":{\"1526\":1}}],[\"外部资源\",{\"1\":{\"1150\":1}}],[\"外部\",{\"1\":{\"1079\":1}}],[\"外部函数并不能算是结束\",{\"1\":{\"1028\":1}}],[\"外部是访问不到的\",{\"1\":{\"786\":1}}],[\"外部表现\",{\"1\":{\"548\":1}}],[\"外部类型设置元素如何参与标准流布局\",{\"1\":{\"548\":1}}],[\"外部变量\",{\"1\":{\"402\":1}}],[\"外部只能通过暴露的方法操作\",{\"1\":{\"29\":1}}],[\"循环对某个\",{\"1\":{\"2074\":1}}],[\"循环是对入参\",{\"1\":{\"2074\":1}}],[\"循环就是在遍历\",{\"1\":{\"2047\":1}}],[\"循环扫描\",{\"1\":{\"1974\":1}}],[\"循环开启自动机\",{\"1\":{\"1974\":1}}],[\"循环结束后检查索引值的情况\",{\"1\":{\"1966\":1}}],[\"循环结束的条件是\",{\"1\":{\"1792\":1}}],[\"循环往复\",{\"1\":{\"1925\":1}}],[\"循环node\",{\"1\":{\"1795\":1}}],[\"循环添加组件中中定义的每个prop\",{\"1\":{\"1430\":1}}],[\"循环直到遇到\",{\"1\":{\"1283\":1}}],[\"循环一定的次数\",{\"1\":{\"1283\":1}}],[\"循环引用指的是对象\",{\"1\":{\"1030\":1}}],[\"循环引用\",{\"1\":{\"1030\":1}}],[\"循环语句\",{\"1\":{\"824\":1,\"1285\":1}}],[\"循环来遍历数组\",{\"1\":{\"846\":1}}],[\"循环来遍历数组的时候\",{\"1\":{\"822\":1}}],[\"循环来对数组进行遍历\",{\"1\":{\"822\":1}}],[\"循环的嵌套使用\",{\"1\":{\"821\":1}}],[\"循环体执行结束后\",{\"1\":{\"821\":1}}],[\"循环体至少执行一次\",{\"1\":{\"820\":1}}],[\"循环\",{\"0\":{\"820\":1,\"821\":1},\"1\":{\"1560\":1,\"1792\":1,\"1921\":1,\"1926\":1,\"1948\":1,\"1968\":1,\"2068\":1}}],[\"循环递归\",{\"0\":{\"472\":1}}],[\"循环遍历对象\",{\"1\":{\"1937\":1}}],[\"循环遍历数组\",{\"1\":{\"1920\":1}}],[\"循环遍历加监听\",{\"1\":{\"1025\":1}}],[\"循环遍历\",{\"0\":{\"456\":1},\"1\":{\"1915\":1,\"1932\":1}}],[\"循环将堆首位\",{\"1\":{\"416\":2}}],[\"循环列表推导式\",{\"1\":{\"402\":1}}],[\"循环中不写任何的表达式\",{\"1\":{\"821\":1}}],[\"循环中的三个部分都可以省略\",{\"1\":{\"821\":1}}],[\"循环中\",{\"1\":{\"401\":1}}],[\"节省创建连接的开销\",{\"1\":{\"1638\":1}}],[\"节可以是指一个页面里的分组\",{\"1\":{\"694\":1}}],[\"节流\",{\"0\":{\"461\":1},\"1\":{\"1037\":1}}],[\"节约内存\",{\"1\":{\"402\":1}}],[\"节点作为参数\",{\"1\":{\"1978\":1}}],[\"节点添加到\",{\"1\":{\"1978\":1}}],[\"节点添加子节点\",{\"1\":{\"1112\":1}}],[\"节点其实就是一个字符串字面量\",{\"1\":{\"1978\":1}}],[\"节点应有的顺序\",{\"1\":{\"1962\":1}}],[\"节点在旧\",{\"1\":{\"1962\":1,\"1969\":1}}],[\"节点属性\",{\"1\":{\"1802\":1}}],[\"节点本身必须是静态节点\",{\"1\":{\"1795\":1}}],[\"节点本身是否为静态节点\",{\"1\":{\"1795\":1}}],[\"节点或纯文本节点\",{\"1\":{\"1791\":1}}],[\"节点之间的层级关系\",{\"1\":{\"1791\":1}}],[\"节点数组\",{\"1\":{\"1446\":1,\"1494\":1,\"1865\":1}}],[\"节点时\",{\"1\":{\"1428\":1}}],[\"节点上添加如下属性\",{\"1\":{\"1388\":1,\"1392\":1,\"1407\":1}}],[\"节点上\",{\"1\":{\"1368\":1}}],[\"节点加载完成后执行\",{\"1\":{\"1215\":1}}],[\"节点中添加\",{\"1\":{\"1208\":1}}],[\"节点相关的操作往往是非常消耗性能的\",{\"1\":{\"1034\":1}}],[\"节点相关的操作\",{\"1\":{\"1034\":1}}],[\"节点的辅助函数\",{\"1\":{\"1978\":1}}],[\"节点的过程中\",{\"1\":{\"1977\":1}}],[\"节点的第二个子节点\",{\"1\":{\"1974\":1}}],[\"节点的第一个子节点\",{\"1\":{\"1974\":1}}],[\"节点的文本节点\",{\"1\":{\"1974\":2}}],[\"节点的移动操作就可以完成更新\",{\"1\":{\"1964\":1}}],[\"节点的所有属性的\",{\"1\":{\"1795\":1}}],[\"节点的key属性\",{\"1\":{\"1788\":1}}],[\"节点的同名属性上\",{\"1\":{\"1428\":1}}],[\"节点的操作往往涉及到大量的方法\",{\"1\":{\"1208\":1}}],[\"节点的引用\",{\"1\":{\"993\":1}}],[\"节点的事件函数内部\",{\"1\":{\"993\":1}}],[\"节点\",{\"0\":{\"1110\":1},\"1\":{\"155\":1,\"1112\":1,\"1123\":1,\"1353\":2,\"1428\":1,\"1788\":1,\"1791\":2,\"1802\":1,\"1806\":1,\"1962\":4,\"1964\":2,\"1965\":1,\"1966\":1,\"1974\":2,\"1976\":1,\"1978\":5}}],[\"节点会构成一个树状结构\",{\"1\":{\"10\":1}}],[\"供外部来使用\",{\"1\":{\"2061\":1}}],[\"供内部使用\",{\"1\":{\"2057\":1}}],[\"供我们来获取到这些有用的信息\",{\"1\":{\"1098\":1}}],[\"供\",{\"1\":{\"402\":1}}],[\"偏移\",{\"1\":{\"733\":1}}],[\"偏移量\",{\"1\":{\"569\":2,\"630\":1}}],[\"偏现代的解决方案\",{\"1\":{\"564\":1}}],[\"偏向\",{\"1\":{\"402\":1}}],[\"偏函数利用关键词调用partial\",{\"1\":{\"402\":1}}],[\"偏函数的作用\",{\"1\":{\"402\":1}}],[\"偏函数\",{\"1\":{\"402\":1}}],[\"素为回调函数中的返回值\",{\"1\":{\"402\":1}}],[\"否\",{\"1\":{\"1132\":1}}],[\"否定正序环视的记忆法是\",{\"1\":{\"918\":1}}],[\"否定伪类\",{\"1\":{\"520\":1}}],[\"否指定形参来决定由哪个来接收\",{\"1\":{\"402\":1}}],[\"否则绑定到外层元素本身\",{\"1\":{\"2032\":1}}],[\"否则将其作为\",{\"1\":{\"1954\":1}}],[\"否则是\",{\"1\":{\"1917\":1,\"1993\":1}}],[\"否则是设置已有属性\",{\"1\":{\"1906\":1,\"1917\":1}}],[\"否则按照原来的实现调用\",{\"1\":{\"1897\":1}}],[\"否则直接执行副作用函数\",{\"1\":{\"1893\":1,\"1985\":1}}],[\"否则会将user\",{\"1\":{\"1860\":1}}],[\"否则会报错\",{\"1\":{\"129\":1,\"405\":1,\"1361\":1}}],[\"否则的话\",{\"1\":{\"1795\":1}}],[\"否则f\",{\"1\":{\"1666\":1}}],[\"否则放到最后一个\",{\"1\":{\"1655\":1}}],[\"否则永远不应该使用\",{\"1\":{\"1614\":1}}],[\"否则为异源请求\",{\"1\":{\"1602\":1}}],[\"否则称之为异源\",{\"1\":{\"1600\":1}}],[\"否则做其他处理\",{\"1\":{\"1530\":1}}],[\"否则参数是事件对象\",{\"1\":{\"1453\":1}}],[\"否则编写带引号的字符串通常是一个好主意\",{\"1\":{\"1265\":1}}],[\"否则就使用\",{\"1\":{\"2066\":1}}],[\"否则就返回\",{\"1\":{\"1065\":1}}],[\"否则就会出现上面第\",{\"1\":{\"833\":1}}],[\"否则就会报错\",{\"1\":{\"405\":1}}],[\"否则一般不会遇到跟性能相关的问题\",{\"1\":{\"1034\":1}}],[\"否则\",{\"1\":{\"1027\":1,\"1039\":1,\"1156\":1,\"1308\":1,\"1368\":1,\"1437\":1,\"1769\":1,\"1795\":1,\"1923\":1,\"2065\":1,\"2088\":1}}],[\"否则结束循环\",{\"1\":{\"820\":1}}],[\"否则返回\",{\"1\":{\"794\":1,\"856\":1,\"857\":1,\"889\":1,\"925\":1,\"1161\":2,\"1677\":1,\"2065\":1}}],[\"否则存储进去的是\",{\"1\":{\"770\":1}}],[\"否则数据是永远不会过期的\",{\"1\":{\"768\":1}}],[\"否则无法进行转换\",{\"1\":{\"897\":1}}],[\"否则无法拖动\",{\"1\":{\"764\":1}}],[\"否则无法撑开容器高度\",{\"1\":{\"582\":1}}],[\"否则顺时针方向\",{\"1\":{\"716\":1}}],[\"否则浏览器可能会阻止自动下载操作\",{\"1\":{\"496\":1}}],[\"否则连接一般不会断开\",{\"1\":{\"191\":1}}],[\"​node\",{\"1\":{\"759\":1}}],[\"​\",{\"1\":{\"402\":1,\"560\":1,\"623\":1,\"651\":1,\"698\":2,\"744\":1,\"1372\":1,\"1373\":1,\"1374\":2,\"1390\":1,\"1417\":1,\"1422\":1,\"1436\":3,\"1449\":1,\"1573\":1,\"1885\":1}}],[\"法为该序列数据做一个副本\",{\"1\":{\"401\":1}}],[\"赋值当前组件的\",{\"1\":{\"2031\":1}}],[\"赋值给activeeffect\",{\"1\":{\"1888\":1}}],[\"赋值给子组件的vm\",{\"1\":{\"1841\":1}}],[\"赋值给组件占位符\",{\"1\":{\"1834\":1}}],[\"赋值给一个数据属性或\",{\"1\":{\"1499\":1}}],[\"赋值给原变量进行覆盖\",{\"1\":{\"1281\":1}}],[\"赋值给\",{\"1\":{\"995\":1,\"1897\":1,\"2002\":1,\"2061\":1}}],[\"赋值给了\",{\"1\":{\"992\":1,\"1802\":2}}],[\"赋值是不会提升的\",{\"1\":{\"939\":1}}],[\"赋值\",{\"1\":{\"816\":1}}],[\"赋值操作会自动声明该变量\",{\"1\":{\"783\":1}}],[\"赋值b\",{\"1\":{\"401\":1}}],[\"赋值a\",{\"1\":{\"401\":1}}],[\"赋值运算符和递增递减运算符\",{\"1\":{\"804\":1}}],[\"赋值运算符\",{\"0\":{\"396\":1,\"805\":1}}],[\"右前期\",{\"1\":{\"1750\":1}}],[\"右侧是否符合要求\",{\"1\":{\"915\":1}}],[\"右下\",{\"1\":{\"612\":3}}],[\"右上\",{\"1\":{\"612\":3}}],[\"右向左\",{\"1\":{\"586\":1}}],[\"右\",{\"1\":{\"544\":1,\"1370\":1}}],[\"右移n位可以近似看为\",{\"1\":{\"399\":1}}],[\"右对齐\",{\"1\":{\"388\":1,\"625\":1}}],[\"才需要逐个卸载\",{\"1\":{\"1951\":1}}],[\"才需要触发响应\",{\"1\":{\"1928\":2}}],[\"才触发响应\",{\"1\":{\"1928\":1}}],[\"才触发更新\",{\"1\":{\"1907\":1}}],[\"才执行\",{\"1\":{\"1894\":1}}],[\"才有\",{\"1\":{\"1835\":2}}],[\"才返回result\",{\"1\":{\"1769\":1}}],[\"才可能相等\",{\"1\":{\"1738\":1}}],[\"才轮到队里中的动画执行\",{\"1\":{\"1224\":1}}],[\"才弹出\",{\"1\":{\"1088\":1}}],[\"才会执行后续操作\",{\"1\":{\"1897\":1,\"1987\":1}}],[\"才会加载此样式\",{\"1\":{\"1385\":1}}],[\"才会使用它的全名jquery\",{\"1\":{\"1198\":1}}],[\"才会返回\",{\"1\":{\"976\":1}}],[\"才会计算第二个运算数的值\",{\"1\":{\"397\":2}}],[\"才能继续解析\",{\"1\":{\"1526\":1}}],[\"才能进行监视\",{\"1\":{\"1377\":1}}],[\"才能匹配成功\",{\"1\":{\"918\":1}}],[\"才能有效果\",{\"1\":{\"198\":1}}],[\"才为\",{\"1\":{\"808\":1}}],[\"被继承的那个实例则存在一个副作用\",{\"1\":{\"1910\":1}}],[\"被监听属性是否是对象类型\",{\"1\":{\"1860\":1}}],[\"被监听的属性名\",{\"1\":{\"1854\":1}}],[\"被收集到了这个内部属性的dep\",{\"1\":{\"1842\":1}}],[\"被\",{\"1\":{\"1792\":1}}],[\"被当作节点的标志\",{\"1\":{\"1788\":1}}],[\"被当成一个对象\",{\"1\":{\"980\":1}}],[\"被定义词\",{\"1\":{\"1757\":1}}],[\"被减数\",{\"1\":{\"1714\":2}}],[\"被引用的组件实例和该子组件的\",{\"1\":{\"1499\":1}}],[\"被改成\",{\"1\":{\"1896\":1}}],[\"被改了\",{\"1\":{\"1396\":1}}],[\"被改变键的文档地址\",{\"1\":{\"770\":1}}],[\"被创建后是不可变的\",{\"1\":{\"1281\":1}}],[\"被解析为\",{\"1\":{\"1265\":3}}],[\"被打印到控制台\",{\"1\":{\"1154\":1}}],[\"被删除了\",{\"1\":{\"1086\":1}}],[\"被删除的元素\",{\"1\":{\"853\":1}}],[\"被称之为事件循环\",{\"1\":{\"1556\":1}}],[\"被称之为\",{\"1\":{\"1084\":1}}],[\"被称为子表达式\",{\"1\":{\"910\":1}}],[\"被加上标记的会被视为准备删除的变量\",{\"1\":{\"1031\":1}}],[\"被回收\",{\"1\":{\"1029\":1}}],[\"被标记\",{\"1\":{\"1029\":2}}],[\"被重新赋值\",{\"1\":{\"1015\":1}}],[\"被处理的对象必须有\",{\"1\":{\"995\":1}}],[\"被设计成可以自动转为\",{\"1\":{\"980\":1}}],[\"被一个函数所调用\",{\"1\":{\"952\":1}}],[\"被调用的过程中\",{\"1\":{\"1028\":1}}],[\"被调用时\",{\"1\":{\"1028\":1}}],[\"被调用\",{\"1\":{\"952\":1}}],[\"被替换的内容\",{\"1\":{\"894\":1}}],[\"被转为了数字0\",{\"1\":{\"888\":1}}],[\"被延迟时触发\",{\"1\":{\"752\":1}}],[\"被视为与\",{\"1\":{\"548\":1}}],[\"被选择元素的特定部分\",{\"1\":{\"521\":1}}],[\"被点击的元素\",{\"1\":{\"520\":1}}],[\"被单独封装到一个模块中\",{\"1\":{\"408\":1}}],[\"被赋值时\",{\"1\":{\"395\":1}}],[\"被污染了\",{\"1\":{\"27\":1}}],[\"幂运算\",{\"1\":{\"395\":1}}],[\"幂\",{\"1\":{\"395\":1,\"396\":1}}],[\"余数\",{\"1\":{\"395\":1}}],[\"余华\",{\"1\":{\"206\":1}}],[\"余华的书\",{\"1\":{\"206\":1}}],[\"取决于该对象是否实现了迭代协议\",{\"1\":{\"1931\":1}}],[\"取决于它处于全局作用域\",{\"1\":{\"958\":1}}],[\"取数据时\",{\"1\":{\"1929\":1}}],[\"取得被调用函数名称和参数列表\",{\"1\":{\"1979\":1}}],[\"取得组件自身状态与\",{\"1\":{\"1956\":1}}],[\"取得原始数据对象\",{\"1\":{\"1930\":1}}],[\"取得原始\",{\"1\":{\"1925\":1}}],[\"取得与\",{\"1\":{\"1906\":2}}],[\"取得所有副作用函数\",{\"1\":{\"1889\":1}}],[\"取得数组中的最大数\",{\"1\":{\"419\":1}}],[\"取而代之的是一种更加灵活多变的处理方式\",{\"1\":{\"1560\":1}}],[\"取而代之的是使用一个=>来进行函数声明\",{\"1\":{\"941\":1}}],[\"取代从前\",{\"1\":{\"1298\":1}}],[\"取值\",{\"1\":{\"532\":1,\"965\":1}}],[\"取出来每一个值赋值给\",{\"1\":{\"2047\":1}}],[\"取出与\",{\"1\":{\"1917\":1,\"1993\":1}}],[\"取出vm\",{\"1\":{\"1815\":1}}],[\"取出\",{\"1\":{\"1793\":1}}],[\"取出等操作\",{\"1\":{\"898\":1}}],[\"取出末尾的值\",{\"1\":{\"452\":1}}],[\"取出数组的最大值\",{\"1\":{\"418\":1}}],[\"取反\",{\"1\":{\"399\":1}}],[\"取余运算\",{\"1\":{\"395\":1}}],[\"取\",{\"1\":{\"395\":1,\"397\":3}}],[\"取绝对值\",{\"1\":{\"395\":1}}],[\"取整除\",{\"1\":{\"395\":1,\"396\":1}}],[\"取模\",{\"1\":{\"395\":1,\"396\":1,\"816\":1}}],[\"取消这次路由跳转\",{\"1\":{\"2029\":1}}],[\"取消缩进\",{\"1\":{\"1979\":2}}],[\"取消当前实例上的所有依赖追踪并且移除实例上的所有事件监听器\",{\"1\":{\"1807\":1}}],[\"取消请求\",{\"0\":{\"1581\":1},\"1\":{\"1581\":1}}],[\"取消订阅\",{\"1\":{\"1439\":1}}],[\"取消订阅消息等\",{\"1\":{\"1410\":1}}],[\"取消所有选中的option\",{\"1\":{\"1205\":1}}],[\"取消默认事件还可以使用return\",{\"1\":{\"1156\":1}}],[\"取消默认行为的方式稍微差异\",{\"1\":{\"1156\":1}}],[\"取消选中\",{\"1\":{\"177\":1}}],[\"取消暂存状态\",{\"1\":{\"8\":1}}],[\"乘积\",{\"1\":{\"1753\":1}}],[\"乘积增长率共用一个公式\",{\"1\":{\"1753\":1}}],[\"乘积增长率\",{\"1\":{\"1728\":1,\"1753\":1}}],[\"乘坐地铁\",{\"1\":{\"1036\":1}}],[\"乘法中有某个乘数为百分数且能\",{\"1\":{\"1718\":1}}],[\"乘法中的某个乘数可以转为某个\",{\"1\":{\"1717\":1}}],[\"乘法拆分\",{\"0\":{\"1718\":1}}],[\"乘法技巧\",{\"0\":{\"1716\":1}}],[\"乘法\",{\"1\":{\"816\":1}}],[\"乘法的执行先于加法\",{\"1\":{\"816\":1}}],[\"乘号运算\",{\"1\":{\"395\":1}}],[\"乘\",{\"1\":{\"395\":1,\"396\":1}}],[\"交给\",{\"1\":{\"2002\":1}}],[\"交互\",{\"1\":{\"1575\":1}}],[\"交互队列执行3\",{\"1\":{\"1181\":1}}],[\"交互队列执行2\",{\"1\":{\"1181\":1}}],[\"交互队列执行1\",{\"1\":{\"1181\":1}}],[\"交互队列\",{\"1\":{\"1181\":1,\"1560\":1}}],[\"交互式创建\",{\"1\":{\"64\":1}}],[\"交或多次\",{\"1\":{\"902\":1}}],[\"交叉轴的中点对齐\",{\"1\":{\"589\":1}}],[\"交叉轴的终点对齐\",{\"1\":{\"589\":1}}],[\"交叉轴的起点对齐\",{\"1\":{\"589\":1}}],[\"交集选择器中如果有元素选择器\",{\"1\":{\"517\":1}}],[\"交集选择器\",{\"1\":{\"517\":1}}],[\"交\",{\"1\":{\"392\":1}}],[\"差\",{\"1\":{\"392\":1}}],[\"差不多\",{\"1\":{\"146\":1,\"1208\":1}}],[\"序列化\",{\"1\":{\"404\":1}}],[\"序列数据的归并处理\",{\"1\":{\"402\":1}}],[\"序列的基本操作\",{\"1\":{\"389\":1}}],[\"序列类型包括\",{\"1\":{\"389\":1}}],[\"左增量\",{\"1\":{\"1750\":1}}],[\"左侧对齐\",{\"1\":{\"625\":1}}],[\"左下\",{\"1\":{\"612\":3}}],[\"左向右\",{\"1\":{\"586\":1}}],[\"左边界和右边界会自动计算以适应可用空间\",{\"1\":{\"574\":1}}],[\"左上右下\",{\"1\":{\"1154\":1}}],[\"左上\",{\"1\":{\"569\":1,\"612\":3}}],[\"左和上外边距则会移动元素自身\",{\"1\":{\"546\":1}}],[\"左\",{\"1\":{\"544\":1,\"1370\":1}}],[\"左移n位可以近似看为\",{\"1\":{\"399\":1}}],[\"左右两侧元素的内容高度不能大于中间元素内容高度\",{\"1\":{\"582\":1}}],[\"左右\",{\"1\":{\"544\":2,\"1436\":1,\"1723\":4}}],[\"左右有一个为\",{\"1\":{\"397\":1}}],[\"左右都为\",{\"1\":{\"397\":1}}],[\"左右中\",{\"1\":{\"388\":1}}],[\"左对齐\",{\"1\":{\"388\":1}}],[\"居中对齐\",{\"1\":{\"388\":1,\"625\":2}}],[\"填充大小\",{\"1\":{\"1667\":1}}],[\"填充均为\",{\"1\":{\"1662\":1}}],[\"填充等\",{\"1\":{\"1662\":1}}],[\"填充色默认为黑色\",{\"1\":{\"706\":1}}],[\"填充\",{\"1\":{\"388\":2}}],[\"填写账号和密码校验身份\",{\"1\":{\"347\":1,\"354\":1,\"360\":1}}],[\"填写相关用户信息\",{\"1\":{\"91\":1}}],[\"填写包的信息\",{\"1\":{\"91\":1}}],[\"补全括号\",{\"1\":{\"1979\":1}}],[\"补全方括号\",{\"1\":{\"1979\":1}}],[\"补全p标签并创建ast节点\",{\"1\":{\"1792\":1}}],[\"补丁\",{\"1\":{\"1951\":1}}],[\"补齐字符\",{\"1\":{\"388\":1}}],[\"补充函数的\",{\"1\":{\"1767\":1}}],[\"补充说明\",{\"1\":{\"77\":1}}],[\"补充\",{\"1\":{\"72\":1}}],[\"位的哈希值\",{\"1\":{\"2101\":1}}],[\"位的摘要值\",{\"1\":{\"2101\":1}}],[\"位的块\",{\"1\":{\"2101\":2}}],[\"位贡献者\",{\"1\":{\"1475\":1}}],[\"位两种\",{\"1\":{\"910\":1}}],[\"位和\",{\"1\":{\"910\":1}}],[\"位数字\",{\"1\":{\"906\":1}}],[\"位数\",{\"1\":{\"877\":1}}],[\"位图进行缩小或者放大\",{\"1\":{\"720\":1}}],[\"位置信息主要由一对纬度和经度坐标组成\",{\"1\":{\"1101\":1}}],[\"位置信息的表示方式\",{\"0\":{\"1101\":1}}],[\"位置信息由纬度\",{\"1\":{\"1099\":1}}],[\"位置的信息是不带单位的\",{\"1\":{\"1087\":1}}],[\"位置的直线\",{\"1\":{\"711\":1}}],[\"位置方法\",{\"0\":{\"856\":1}}],[\"位置绘制文本边框\",{\"1\":{\"729\":1}}],[\"位置填充指定的文本\",{\"1\":{\"729\":1}}],[\"位置\",{\"1\":{\"619\":1,\"636\":5,\"916\":1,\"925\":1}}],[\"位置发生了改变\",{\"1\":{\"565\":1}}],[\"位置上移时\",{\"1\":{\"565\":1}}],[\"位运算符\",{\"0\":{\"399\":1}}],[\"位\",{\"1\":{\"386\":2}}],[\"占比之和超过\",{\"1\":{\"1751\":1}}],[\"占比\",{\"1\":{\"1728\":1,\"1751\":1}}],[\"占用内存的时间可能会过长\",{\"1\":{\"1025\":1}}],[\"占\",{\"1\":{\"386\":2}}],[\"占两位\",{\"1\":{\"386\":1}}],[\"占位符节点的配置项\",{\"1\":{\"1864\":1}}],[\"占位符组件的配置项\",{\"1\":{\"1802\":1}}],[\"占位符是独立定义\",{\"1\":{\"1299\":1}}],[\"占位符$\",{\"1\":{\"790\":1}}],[\"占位符出场的先后顺序必须与后面的具体内容相匹配\",{\"1\":{\"387\":1}}],[\"占位符格式化\",{\"0\":{\"387\":1}}],[\"占位符\",{\"0\":{\"1298\":1},\"1\":{\"385\":1,\"387\":1,\"1299\":2}}],[\"□□□5\",{\"1\":{\"388\":1}}],[\"□□□23\",{\"1\":{\"385\":1}}],[\"□125\",{\"1\":{\"386\":1,\"387\":1,\"388\":1}}],[\"□25\",{\"1\":{\"386\":1,\"387\":1,\"388\":1}}],[\"□23\",{\"1\":{\"385\":1}}],[\"□5\",{\"1\":{\"386\":1,\"387\":1,\"388\":1}}],[\"总的来说\",{\"1\":{\"2100\":1}}],[\"总之最后仍然是将对应的守卫回调转为\",{\"1\":{\"2081\":1}}],[\"总体来说整体流程与\",{\"1\":{\"2003\":1}}],[\"总览\",{\"0\":{\"1863\":1}}],[\"总览篇\",{\"0\":{\"1782\":1}}],[\"总量\",{\"1\":{\"1751\":1}}],[\"总产=单产\",{\"1\":{\"1728\":1}}],[\"总\",{\"1\":{\"1686\":1}}],[\"总分中的\",{\"1\":{\"1686\":2}}],[\"总分结构\",{\"0\":{\"1686\":1}}],[\"总分\",{\"1\":{\"1685\":1}}],[\"总述\",{\"1\":{\"1685\":1,\"1695\":1}}],[\"总是能够明确地知道当前正在操作哪一个属性\",{\"1\":{\"1906\":1}}],[\"总是从\",{\"0\":{\"1234\":1}}],[\"总是指向\",{\"1\":{\"995\":1}}],[\"总是生成两个滚动条\",{\"1\":{\"557\":1}}],[\"总长度\",{\"1\":{\"385\":1}}],[\"总长度失效\",{\"1\":{\"385\":2}}],[\"总长度比实际整数长度还小\",{\"1\":{\"385\":1}}],[\"总长为\",{\"1\":{\"385\":4}}],[\"总结一下\",{\"1\":{\"2068\":1,\"2069\":2}}],[\"总结来说\",{\"1\":{\"1779\":1}}],[\"总结了两种\",{\"1\":{\"1442\":1}}],[\"总结如下\",{\"1\":{\"1201\":1}}],[\"总结起来\",{\"1\":{\"990\":1,\"996\":1}}],[\"总结\",{\"0\":{\"686\":1,\"1189\":1,\"2003\":1,\"2033\":1},\"1\":{\"219\":1,\"224\":1,\"561\":1}}],[\"样本数\",{\"1\":{\"1680\":1}}],[\"样本抽样方式\",{\"1\":{\"1655\":1}}],[\"样式计算\",{\"1\":{\"1526\":2}}],[\"样式编码的顺序\",{\"1\":{\"1433\":1}}],[\"样式同样失效\",{\"1\":{\"1433\":1}}],[\"样式混合\",{\"1\":{\"1307\":1}}],[\"样式表\",{\"1\":{\"1300\":1}}],[\"样式表中加载\",{\"1\":{\"1300\":1}}],[\"样式表的任何地方使用\",{\"1\":{\"1262\":1}}],[\"样式代码\",{\"1\":{\"1282\":1}}],[\"样式规则中的选择器\",{\"1\":{\"1262\":1}}],[\"样式名来读取样式\",{\"1\":{\"1129\":1}}],[\"样式名\",{\"0\":{\"1127\":1,\"1128\":1}}],[\"样式栈\",{\"1\":{\"712\":1}}],[\"样式容器\",{\"1\":{\"712\":1}}],[\"样式容器和样式栈\",{\"0\":{\"712\":1}}],[\"样式\",{\"0\":{\"1385\":1,\"1386\":1,\"1433\":1},\"1\":{\"669\":2,\"711\":1,\"1232\":1,\"1949\":1}}],[\"样式切换的分界点\",{\"1\":{\"651\":1}}],[\"样式的继承\",{\"0\":{\"527\":1}}],[\"样式加入到\",{\"1\":{\"138\":1}}],[\"样\",{\"1\":{\"408\":1}}],[\"样就会把原来\",{\"1\":{\"384\":1}}],[\"含空白字符\",{\"1\":{\"970\":1}}],[\"含有转义字符的字符串\",{\"1\":{\"384\":1}}],[\"含义\",{\"1\":{\"282\":1}}],[\"由创建一个状态对象\",{\"1\":{\"2058\":1}}],[\"由浏览器自行决定取哪一个队列的任务\",{\"1\":{\"1560\":1}}],[\"由无渲染组件产生的额外组件实例会带来无法忽视的性能开销\",{\"1\":{\"1501\":1}}],[\"由以上代码可以看出\",{\"1\":{\"1298\":1}}],[\"由此可见\",{\"1\":{\"1198\":1}}],[\"由调用者确定\",{\"1\":{\"1015\":1}}],[\"由事件监听器发送给回调函数的事件对象有几个自动填充的属性如下\",{\"1\":{\"770\":1}}],[\"由内容区\",{\"1\":{\"545\":1}}],[\"由高到低排列\",{\"1\":{\"402\":1}}],[\"由自由变量与嵌套函数组成\",{\"1\":{\"402\":1}}],[\"由\",{\"1\":{\"384\":1,\"1013\":1,\"1301\":1,\"1362\":1,\"1415\":1,\"1526\":1,\"1782\":1}}],[\"由于只有小红拥有私钥\",{\"1\":{\"2100\":1}}],[\"由于只有一个\",{\"1\":{\"51\":1}}],[\"由于加密和解密使用相同的密钥\",{\"1\":{\"2099\":1}}],[\"由于任何转换函数都可能移除当前节点\",{\"1\":{\"1977\":1}}],[\"由于当前节点已经被新节点替换掉了\",{\"1\":{\"1977\":1}}],[\"由于当前处于标签名称状态\",{\"1\":{\"1974\":1}}],[\"由于新旧两组子节点的数量可能不同\",{\"1\":{\"1968\":1}}],[\"由于新的路径无法命中缓存\",{\"1\":{\"1543\":1}}],[\"由于我们要将\",{\"1\":{\"1962\":1}}],[\"由于我们还没有讲解\",{\"1\":{\"1954\":1}}],[\"由于我们的reactive是会进行递归处理的\",{\"1\":{\"1923\":1}}],[\"由于我们近似的计算\",{\"1\":{\"1723\":1}}],[\"由于在\",{\"1\":{\"1902\":1}}],[\"由于请求\",{\"1\":{\"1897\":1}}],[\"由于父组件已经对对象的属性添加了拦截\",{\"1\":{\"1840\":1}}],[\"由于客户端可能\",{\"1\":{\"1646\":1}}],[\"由于腾讯服务器不是\",{\"1\":{\"1615\":1}}],[\"由于前后端程序的默认行为\",{\"1\":{\"1569\":1}}],[\"由于前端要做的事情实在太少\",{\"1\":{\"22\":1}}],[\"由于和我们开发关系不大\",{\"1\":{\"1560\":1}}],[\"由于之前的缓存路径无法匹配到\",{\"1\":{\"1543\":1}}],[\"由于元素的布局信息也属于可见样式\",{\"1\":{\"1528\":1}}],[\"由于相同\",{\"1\":{\"1236\":1}}],[\"由于例子中我将\",{\"1\":{\"1219\":1}}],[\"由于绑定事件的元素和触发事件的元素相同\",{\"1\":{\"1152\":1}}],[\"由于刷新也算是一种页面卸载\",{\"1\":{\"1150\":1}}],[\"由于国内特殊的环境\",{\"1\":{\"1102\":1}}],[\"由于函数管道强烈依赖一个前提条件\",{\"1\":{\"1040\":1}}],[\"由于简单值的数据大小是固定的\",{\"1\":{\"980\":1}}],[\"由于括号的用途之一就是为量词限定作用范围\",{\"1\":{\"920\":1}}],[\"由于环视不消耗正则的匹配字符\",{\"1\":{\"918\":1}}],[\"由于非捕获分组不捕获文本\",{\"1\":{\"913\":1}}],[\"由于英文\",{\"1\":{\"875\":1}}],[\"由于弱集合要解决的问题是引用数据变为垃圾时无法被回收的问题\",{\"1\":{\"865\":1}}],[\"由于调用add\",{\"1\":{\"861\":1}}],[\"由于是在对象里面\",{\"1\":{\"834\":1}}],[\"由于内存限制\",{\"1\":{\"794\":1}}],[\"由于它没有视觉部件\",{\"1\":{\"749\":1}}],[\"由于某些较老的浏览器\",{\"1\":{\"702\":1}}],[\"由于不同设备视口和像素比不同\",{\"1\":{\"650\":1}}],[\"由于不是声明表达式\",{\"1\":{\"49\":1}}],[\"由于computed也是ref\",{\"1\":{\"2020\":1}}],[\"由于commonjs是同步的\",{\"1\":{\"37\":1}}],[\"由于cookie\",{\"1\":{\"353\":1}}],[\"由于语言的转换工作灵活多样\",{\"1\":{\"146\":1}}],[\"由于经过\",{\"1\":{\"124\":1}}],[\"由于\",{\"1\":{\"67\":1,\"122\":1,\"560\":1,\"843\":1,\"848\":1,\"995\":1,\"996\":1,\"1248\":1,\"1529\":1,\"1560\":1,\"1593\":1,\"1929\":1,\"2028\":1,\"2091\":1}}],[\"由于默认导入时变量名是自行定义的\",{\"1\":{\"52\":1}}],[\"由于每个模块仅允许有一个默认导出\",{\"1\":{\"51\":1}}],[\"由于使用的是\",{\"1\":{\"50\":1}}],[\"由于基本导出必须具有名称\",{\"1\":{\"49\":1}}],[\"为横向制表符\",{\"1\":{\"384\":1}}],[\"换个说法\",{\"1\":{\"2058\":1}}],[\"换\",{\"1\":{\"1648\":1}}],[\"换句话说\",{\"1\":{\"1023\":1,\"1141\":1}}],[\"换句话说就是提示\",{\"1\":{\"748\":1}}],[\"换句话说就是提示浏览器该视频不需要缓存\",{\"1\":{\"748\":1}}],[\"换页\",{\"1\":{\"384\":1}}],[\"换行时应该保留缩进\",{\"1\":{\"1979\":1}}],[\"换行\",{\"1\":{\"384\":1,\"902\":1,\"905\":1,\"1370\":1}}],[\"退出程序\",{\"1\":{\"1789\":2}}],[\"退出\",{\"1\":{\"1370\":1}}],[\"退出登录时删除保存的jwt\",{\"1\":{\"368\":1}}],[\"退格\",{\"1\":{\"384\":1,\"1370\":1}}],[\"响铃\",{\"1\":{\"384\":1}}],[\"响应丢失问题\",{\"0\":{\"1937\":1}}],[\"响应系统尝试把与\",{\"1\":{\"1925\":1}}],[\"响应系统就不依赖副作用函数的名字了\",{\"1\":{\"1888\":1}}],[\"响应使用\",{\"0\":{\"1920\":1,\"1921\":1}}],[\"响应数组下标的变化\",{\"0\":{\"1917\":1}}],[\"响应后\",{\"1\":{\"1649\":2}}],[\"响应后立在发送一个同样\",{\"1\":{\"1646\":1}}],[\"响应就是websocket\",{\"1\":{\"1648\":1}}],[\"响应必须在后\",{\"1\":{\"1644\":1}}],[\"响应格式\",{\"1\":{\"1592\":1}}],[\"响应类型\",{\"1\":{\"1589\":1}}],[\"响应码\",{\"0\":{\"1635\":1},\"1\":{\"1635\":1}}],[\"响应码为304\",{\"1\":{\"1537\":1}}],[\"响应码200\",{\"1\":{\"1537\":1}}],[\"响应组件中加的动作\",{\"1\":{\"1451\":1}}],[\"响应组件中用户的动作\",{\"1\":{\"1450\":1}}],[\"响应式状态\",{\"1\":{\"2016\":1}}],[\"响应式的路由值\",{\"1\":{\"2047\":1}}],[\"响应式的值变更后会执行此处逻辑\",{\"1\":{\"2002\":1}}],[\"响应式的值变更后会再次触发这个函数\",{\"1\":{\"2002\":1}}],[\"响应式的代理操作\",{\"0\":{\"1985\":1}}],[\"响应式数据\",{\"1\":{\"1937\":1}}],[\"响应式数据先通过\",{\"1\":{\"1929\":1}}],[\"响应式数据与副作用函数\",{\"0\":{\"1885\":1}}],[\"响应式数据的判断\",{\"0\":{\"1509\":1}}],[\"响应式对象\",{\"1\":{\"1836\":1}}],[\"响应式都必须借由改写后的方法来实现\",{\"1\":{\"1786\":1}}],[\"响应式使我们更加关注于数据的变化\",{\"1\":{\"1782\":1}}],[\"响应式依然是靠object\",{\"1\":{\"1487\":1}}],[\"响应式\",{\"0\":{\"1783\":1},\"1\":{\"1782\":1},\"2\":{\"653\":1}}],[\"响应式布局\",{\"0\":{\"651\":1}}],[\"响应布局的关键就是媒体查询\",{\"1\":{\"651\":1}}],[\"响应结果示例\",{\"1\":{\"1592\":1}}],[\"响应结果\",{\"1\":{\"338\":1,\"1589\":1}}],[\"响应设置\",{\"0\":{\"307\":1}}],[\"响应文件内容\",{\"1\":{\"294\":1,\"307\":1}}],[\"响应404状态码\",{\"1\":{\"294\":1}}],[\"响应一个数据\",{\"1\":{\"1578\":1}}],[\"响应一个\",{\"1\":{\"287\":1}}],[\"响应\",{\"0\":{\"1848\":1,\"1853\":1,\"1918\":1},\"1\":{\"283\":1,\"307\":1,\"329\":1,\"349\":2,\"1593\":1,\"1628\":2,\"1644\":1,\"1648\":1}}],[\"响应内容中文乱码的解决办法\",{\"1\":{\"275\":1}}],[\"响应体相对集中\",{\"1\":{\"286\":1}}],[\"响应体相对分散\",{\"1\":{\"286\":1}}],[\"响应体结果\",{\"1\":{\"285\":1}}],[\"响应体内容的类型是非常灵活的\",{\"1\":{\"271\":1}}],[\"响应体\",{\"1\":{\"271\":1,\"307\":1,\"349\":1,\"1575\":1,\"1586\":1}}],[\"响应体的长度\",{\"1\":{\"271\":1}}],[\"响应体为html\",{\"1\":{\"271\":1}}],[\"响应头信息\",{\"1\":{\"1586\":1}}],[\"响应头带上新的缓存指令\",{\"1\":{\"1537\":1}}],[\"响应头\",{\"0\":{\"1636\":1},\"1\":{\"271\":1,\"286\":1,\"1577\":1}}],[\"响应字符串\",{\"1\":{\"271\":1}}],[\"响应状态字符串\",{\"1\":{\"1586\":1}}],[\"响应状态的描述\",{\"1\":{\"286\":1}}],[\"响应状态描述\",{\"1\":{\"271\":1}}],[\"响应状态码\",{\"1\":{\"271\":2,\"339\":1,\"1586\":1}}],[\"响应行\",{\"1\":{\"271\":1}}],[\"响应报文的组成\",{\"0\":{\"271\":1}}],[\"响应报文\",{\"0\":{\"286\":1},\"1\":{\"266\":1}}],[\"续行符\",{\"1\":{\"384\":1}}],[\"双端diff的过程\",{\"1\":{\"1965\":1}}],[\"双端\",{\"0\":{\"1963\":1,\"1965\":1,\"1966\":1},\"1\":{\"1965\":1,\"1966\":1}}],[\"双线法\",{\"1\":{\"1737\":1}}],[\"双向数据绑定\",{\"1\":{\"1356\":1,\"1404\":1}}],[\"双向绑定一般都应用在\",{\"1\":{\"1356\":1}}],[\"双向绑定\",{\"0\":{\"1356\":1}}],[\"双方向的缩放\",{\"1\":{\"618\":1}}],[\"双或单\",{\"1\":{\"383\":1}}],[\"双引号的空字符串\",{\"1\":{\"796\":1}}],[\"双引号\",{\"1\":{\"383\":1,\"384\":1}}],[\"复用创建好的\",{\"1\":{\"1638\":1}}],[\"复用代码\",{\"1\":{\"1501\":1}}],[\"复用\",{\"0\":{\"1961\":1,\"1962\":1},\"1\":{\"1374\":1,\"1394\":1}}],[\"复杂值可以根据需求有任意多个引用\",{\"1\":{\"984\":1}}],[\"复杂值支持动态对象属性\",{\"1\":{\"984\":1}}],[\"复杂值只有在引用相同的对象\",{\"1\":{\"983\":1}}],[\"复杂值是通过引用进行存储和操作的\",{\"1\":{\"982\":1}}],[\"复杂值在内存中的大小是未知的\",{\"1\":{\"981\":1}}],[\"复杂值\",{\"0\":{\"981\":1},\"1\":{\"981\":1}}],[\"复杂数据类型\",{\"1\":{\"787\":1}}],[\"复选框\",{\"1\":{\"756\":1}}],[\"复合选择器\",{\"0\":{\"517\":1}}],[\"复数\",{\"1\":{\"382\":1}}],[\"复制到新的路由记录里面\",{\"1\":{\"2069\":2}}],[\"复制到自己提供的\",{\"1\":{\"402\":1}}],[\"复制旧的路由记录所对应的离开守卫以及更新守卫到新的路由记录里面\",{\"1\":{\"2069\":1}}],[\"复制文本框中的内容\",{\"1\":{\"1161\":1}}],[\"复制或粘贴时\",{\"1\":{\"1160\":1}}],[\"复制和粘贴这\",{\"1\":{\"1160\":1}}],[\"复制\",{\"1\":{\"263\":1,\"1676\":1}}],[\"永不要用在用户提交的内容上\",{\"1\":{\"1400\":1}}],[\"永远等于\",{\"1\":{\"1909\":1}}],[\"永远无法改变\",{\"1\":{\"1776\":1}}],[\"永远不能释放进入环境的变量所占用的内存\",{\"1\":{\"1029\":1}}],[\"永远不要相信用户的输入\",{\"1\":{\"198\":1}}],[\"永远都不会同步给\",{\"1\":{\"683\":1}}],[\"永久保存\",{\"1\":{\"379\":1}}],[\"空列表和数字0在\",{\"1\":{\"1284\":1}}],[\"空的\",{\"1\":{\"1276\":1}}],[\"空的位置使用undefined来进行填充\",{\"1\":{\"843\":1}}],[\"空对象\",{\"1\":{\"1007\":1,\"1008\":1}}],[\"空对象指针\",{\"1\":{\"980\":1}}],[\"空元素与\",{\"1\":{\"995\":1}}],[\"空字符串模板\",{\"1\":{\"796\":1}}],[\"空字符串\",{\"1\":{\"748\":1,\"970\":1,\"971\":1,\"1284\":1}}],[\"空白符和编解码\",{\"1\":{\"1791\":1}}],[\"空白输入的地方\",{\"1\":{\"1255\":1}}],[\"空白节点在内的所有节点\",{\"1\":{\"1112\":1}}],[\"空白字符\",{\"1\":{\"904\":1}}],[\"空白分布到元素的单侧\",{\"1\":{\"588\":1}}],[\"空白分布到元素两侧\",{\"1\":{\"588\":1}}],[\"空白均匀分布到元素间\",{\"1\":{\"588\":1}}],[\"空\",{\"1\":{\"384\":1}}],[\"空格\",{\"1\":{\"378\":1,\"658\":1,\"1370\":1,\"2045\":1}}],[\"空行\",{\"1\":{\"267\":1,\"271\":1}}],[\"系统修饰键\",{\"1\":{\"1370\":1}}],[\"系统通知依然可以在\",{\"1\":{\"1105\":1}}],[\"系统提示框\",{\"1\":{\"1088\":1}}],[\"系统给出了无法将\",{\"1\":{\"830\":1}}],[\"系统预设了三种情况\",{\"1\":{\"592\":1}}],[\"系统调度\",{\"0\":{\"406\":1}}],[\"系统就会调用类中的具体方法来处理\",{\"1\":{\"405\":1}}],[\"系统自动\",{\"1\":{\"404\":1}}],[\"系统级操作\",{\"1\":{\"404\":1}}],[\"系统会进行判断自动将其调用\",{\"1\":{\"1421\":1}}],[\"系统会在执行函数体代码前做一些初始化工作\",{\"1\":{\"932\":1}}],[\"系统会首先在全局表里面查找对应键名的\",{\"1\":{\"828\":1}}],[\"系统会以实例变量优先\",{\"1\":{\"405\":1}}],[\"系统会将当前环境中的\",{\"1\":{\"402\":1}}],[\"系统会使用内存回收机制\",{\"1\":{\"382\":1}}],[\"系统会找离该函数最近的代码定义来执行\",{\"1\":{\"378\":1}}],[\"系统并不会将\",{\"1\":{\"379\":1}}],[\"系统下的绝对路径\",{\"1\":{\"261\":2}}],[\"借用已重写的splice方法完成响应式\",{\"1\":{\"1786\":1}}],[\"借用构造函数\",{\"0\":{\"1070\":1},\"1\":{\"1070\":1}}],[\"借用第二种方法\",{\"1\":{\"957\":1}}],[\"借由这一点\",{\"1\":{\"377\":1}}],[\"借助上述函数完成的基本框架\",{\"1\":{\"1896\":1}}],[\"借助<router\",{\"1\":{\"1456\":1}}],[\"借助mapmutations\",{\"1\":{\"1454\":1}}],[\"借助mapactions\",{\"1\":{\"1454\":1}}],[\"借助mapgetters读取\",{\"1\":{\"1454\":1}}],[\"借助mapgetters生成计算属性\",{\"1\":{\"1453\":2}}],[\"借助mapstate读取\",{\"1\":{\"1454\":1}}],[\"借助mapstate生成计算属性\",{\"1\":{\"1453\":2}}],[\"借助\",{\"1\":{\"256\":1}}],[\"借助插件\",{\"1\":{\"159\":1}}],[\"借助包管理工具\",{\"1\":{\"58\":1}}],[\"放入到\",{\"1\":{\"2043\":1}}],[\"放入桶中\",{\"1\":{\"418\":1}}],[\"放行通过后会执行\",{\"1\":{\"2032\":1}}],[\"放行\",{\"1\":{\"1467\":2}}],[\"放大到\",{\"1\":{\"1224\":1}}],[\"放大缩小\",{\"1\":{\"1224\":1}}],[\"放大两倍的情况\",{\"1\":{\"649\":1}}],[\"放在\",{\"1\":{\"1802\":1}}],[\"放在他们共同的父组件上\",{\"1\":{\"1435\":1}}],[\"放在组件自身即可\",{\"1\":{\"1435\":1}}],[\"放在函数体的第一行\",{\"1\":{\"957\":1}}],[\"放在脚本文件的第一行\",{\"1\":{\"957\":1}}],[\"放射性的效果\",{\"1\":{\"636\":1}}],[\"放置到piniastore\",{\"1\":{\"2019\":2}}],[\"放置到对应子组件渲染\",{\"1\":{\"1446\":1,\"1494\":1}}],[\"放置\",{\"1\":{\"552\":1}}],[\"放置模块的文件夹\",{\"1\":{\"376\":1}}],[\"放到页面右下角自动弹出来\",{\"1\":{\"1104\":1}}],[\"放到计算机领域\",{\"1\":{\"1033\":1}}],[\"放到\",{\"1\":{\"360\":1}}],[\"址\",{\"1\":{\"373\":1}}],[\"校验证书是否在有效期内\",{\"1\":{\"2091\":1}}],[\"校验证书的颁发机构是否受客户端信任\",{\"1\":{\"2091\":1}}],[\"校验数据类型是否匹配\",{\"1\":{\"1804\":1}}],[\"校验严格\",{\"1\":{\"1468\":1}}],[\"校验也是\",{\"1\":{\"369\":1}}],[\"校验失败~~\",{\"1\":{\"368\":1}}],[\"校验通过后响应\",{\"1\":{\"360\":1}}],[\"校验通过后创建\",{\"1\":{\"354\":1}}],[\"校验通过后下发\",{\"1\":{\"347\":1}}],[\"验证身份也就是\",{\"1\":{\"2091\":1}}],[\"验证码\",{\"1\":{\"2088\":1}}],[\"验证来源\",{\"1\":{\"2088\":1}}],[\"验证\",{\"1\":{\"760\":1,\"2088\":1}}],[\"验证的\",{\"1\":{\"760\":2}}],[\"验证通过后\",{\"1\":{\"368\":1}}],[\"验证其有效性\",{\"1\":{\"368\":1}}],[\"验证成功后\",{\"1\":{\"360\":1}}],[\"公钥可以公开发布\",{\"1\":{\"2100\":1}}],[\"公钥和私钥\",{\"1\":{\"2100\":1}}],[\"公式如下\",{\"1\":{\"1748\":1}}],[\"公式\",{\"1\":{\"1747\":1,\"1751\":1}}],[\"公式为\",{\"1\":{\"1728\":1}}],[\"公务员考试\",{\"2\":{\"1706\":1,\"1754\":1,\"1764\":1}}],[\"公共的方法\",{\"1\":{\"1048\":1}}],[\"公共的声明可以添加任何的信息\",{\"1\":{\"366\":1}}],[\"公共的声明\",{\"1\":{\"366\":2}}],[\"公用变量\",{\"1\":{\"405\":1}}],[\"公司项目如果是公司要根据项目代码来选择\",{\"1\":{\"89\":1}}],[\"构造最长递增子序列\",{\"1\":{\"1969\":1}}],[\"构造\",{\"1\":{\"1969\":2}}],[\"构造tokens\",{\"1\":{\"1793\":1}}],[\"构造expression\",{\"1\":{\"1793\":1}}],[\"构造器\",{\"1\":{\"1777\":1,\"1825\":2}}],[\"构造器声明函数\",{\"0\":{\"928\":1}}],[\"构造出的类\",{\"1\":{\"1662\":1}}],[\"构造函数会执行\",{\"1\":{\"2030\":1}}],[\"构造函数的第\",{\"1\":{\"1105\":1}}],[\"构造函数模式\",{\"0\":{\"1045\":1}}],[\"构造函数内的\",{\"1\":{\"990\":1,\"996\":1}}],[\"构造函数属性被看成静态属性\",{\"1\":{\"924\":1}}],[\"构造函数属性\",{\"0\":{\"924\":1}}],[\"构造函数构建正则表达式\",{\"0\":{\"900\":1}}],[\"构造函数传入一个数组来初始化\",{\"1\":{\"868\":1}}],[\"构造函数\",{\"0\":{\"1049\":1},\"1\":{\"865\":1,\"868\":1,\"872\":1,\"995\":1,\"1007\":1,\"1063\":1}}],[\"构造函数创建数组\",{\"0\":{\"840\":1}}],[\"构成图形\",{\"1\":{\"711\":1}}],[\"构成了最终的jwt\",{\"1\":{\"367\":1}}],[\"构成了第一部分\",{\"1\":{\"365\":1}}],[\"构建一个\",{\"1\":{\"2029\":1}}],[\"构建索引表\",{\"1\":{\"1969\":1}}],[\"构建子组件\",{\"1\":{\"1834\":1}}],[\"构建对比图\",{\"1\":{\"1483\":1}}],[\"构建初始最大堆\",{\"1\":{\"416\":2}}],[\"构建启动\",{\"1\":{\"155\":1}}],[\"构建流程\",{\"0\":{\"154\":1}}],[\"构建过程中要用到的所有\",{\"1\":{\"123\":1}}],[\"构建可以实现如下内容\",{\"1\":{\"122\":1}}],[\"构建其实是工程化\",{\"1\":{\"122\":1}}],[\"构建\",{\"1\":{\"122\":1,\"1198\":1}}],[\"私钥仅被一方保存\",{\"1\":{\"2100\":1}}],[\"私有成员\",{\"0\":{\"1305\":1}}],[\"私有声明是提供者和消费者所共同定义的声明\",{\"1\":{\"366\":1}}],[\"私有的声明\",{\"1\":{\"366\":2}}],[\"私有的\",{\"1\":{\"271\":1}}],[\"私秘钥对\",{\"1\":{\"363\":1}}],[\"暂停处理路由事件\",{\"1\":{\"2061\":1}}],[\"暂停依赖收集\",{\"1\":{\"1804\":1}}],[\"暂不考虑与之前代码的冲突\",{\"1\":{\"1927\":1}}],[\"暂时省略\",{\"1\":{\"1944\":1}}],[\"暂时不考虑数组等其他结构\",{\"1\":{\"1897\":1}}],[\"暂时性死区\",{\"1\":{\"988\":1}}],[\"暂无权限查看\",{\"1\":{\"1467\":2}}],[\"暂且认为是安全的\",{\"1\":{\"362\":1}}],[\"暂存\",{\"1\":{\"7\":3}}],[\"仍然为\",{\"1\":{\"1962\":1}}],[\"仍然是一个数组\",{\"1\":{\"2061\":1}}],[\"仍然是可代理的数据\",{\"1\":{\"1929\":1}}],[\"仍然是有缺点的\",{\"1\":{\"1647\":1}}],[\"仍然是在\",{\"1\":{\"991\":1}}],[\"仍然有效\",{\"1\":{\"1535\":1}}],[\"仍然能够打印出\",{\"1\":{\"1023\":1}}],[\"仍然指向的是代理对象\",{\"1\":{\"1928\":1}}],[\"仍然指向\",{\"1\":{\"991\":1}}],[\"仍然可以使用脚本操作表单控件\",{\"1\":{\"754\":1}}],[\"仍然可以增加\",{\"1\":{\"362\":1}}],[\"仍然继续执行路由中的回调函数\",{\"1\":{\"313\":1}}],[\"集中管理状态数据\",{\"1\":{\"2016\":1}}],[\"集成的数据集\",{\"0\":{\"1656\":1}}],[\"集成了事件处理的所有功能\",{\"1\":{\"1216\":1}}],[\"集群中不同服务器之间的session不共享\",{\"1\":{\"361\":1}}],[\"集合中了\",{\"1\":{\"1928\":1}}],[\"集合类型来说\",{\"1\":{\"1926\":1}}],[\"集合类似于\",{\"1\":{\"176\":1}}],[\"集合到一起的方法\",{\"1\":{\"1217\":1}}],[\"集合设计了如下\",{\"1\":{\"869\":1}}],[\"集合相似\",{\"1\":{\"868\":1}}],[\"集合相关属性和方法\",{\"0\":{\"862\":1}}],[\"集合的问题就在于即使失去了引用\",{\"1\":{\"865\":1}}],[\"集合转数组\",{\"0\":{\"864\":1}}],[\"集合也是可以枚举的\",{\"1\":{\"863\":1}}],[\"集合是一种无重复元素的列表\",{\"1\":{\"859\":1}}],[\"集合与后面一节要介绍的\",{\"1\":{\"859\":1}}],[\"集合以及映射的时候\",{\"1\":{\"830\":1}}],[\"集合和字典\",{\"1\":{\"389\":1}}],[\"集合名\",{\"1\":{\"180\":2,\"181\":5}}],[\"集合名称\",{\"1\":{\"180\":1}}],[\"集合命令\",{\"0\":{\"180\":1}}],[\"集合\",{\"0\":{\"858\":1},\"1\":{\"176\":3,\"182\":1,\"381\":2,\"858\":1}}],[\"跨站脚本攻击\",{\"1\":{\"2094\":1}}],[\"跨站点\",{\"1\":{\"2088\":1}}],[\"跨站请求伪造\",{\"1\":{\"361\":1,\"2087\":1}}],[\"跨域请求\",{\"1\":{\"1602\":1}}],[\"跨域可能出现在三种场景\",{\"1\":{\"1601\":1}}],[\"跨域出现的场景\",{\"0\":{\"1601\":1}}],[\"跨域是因为浏览器的安全机制带来的问题\",{\"1\":{\"1599\":1}}],[\"跨域问题及解决方案\",{\"0\":{\"1598\":1}}],[\"跨域问题后面会详细说明\",{\"1\":{\"1576\":1}}],[\"跨域问题的解决方案\",{\"1\":{\"1442\":1}}],[\"跨域\",{\"1\":{\"1600\":1},\"2\":{\"1566\":1,\"1618\":1}}],[\"跨域代理\",{\"0\":{\"134\":1}}],[\"属于组件级别的守卫\",{\"1\":{\"2071\":1}}],[\"属于属性级别的劫持\",{\"1\":{\"1889\":1}}],[\"属于解释型语言\",{\"1\":{\"1020\":1}}],[\"属于\",{\"1\":{\"358\":1,\"1324\":1}}],[\"属性是一个用于设置\",{\"1\":{\"2088\":1}}],[\"属性中有对应的\",{\"1\":{\"2070\":1}}],[\"属性中获取到\",{\"1\":{\"752\":1}}],[\"属性解构出来\",{\"1\":{\"2068\":1}}],[\"属性表示触发事件的鼠标按钮\",{\"1\":{\"2065\":1}}],[\"属性表示的时间已经改变\",{\"1\":{\"752\":1}}],[\"属性不等于\",{\"1\":{\"2065\":1}}],[\"属性不存在时调用此函数\",{\"1\":{\"405\":1}}],[\"属性不存在\",{\"1\":{\"238\":1}}],[\"属性生成别的标签\",{\"1\":{\"2032\":1}}],[\"属性指定目标地址\",{\"1\":{\"2032\":1}}],[\"属性指向它的原型对象\",{\"1\":{\"1007\":1}}],[\"属性指向一个\",{\"1\":{\"756\":1}}],[\"属性定义成响应式的了\",{\"1\":{\"2031\":1}}],[\"属性下\",{\"1\":{\"1978\":3}}],[\"属性赋值给新节点的\",{\"1\":{\"1951\":1}}],[\"属性访问值\",{\"1\":{\"1938\":1}}],[\"属性访问原始数据\",{\"1\":{\"1910\":1,\"1990\":1}}],[\"属性冲突\",{\"1\":{\"1929\":1}}],[\"属性可以是一个字符串也可以是一个对象\",{\"1\":{\"2062\":1}}],[\"属性可能与用户自定义的\",{\"1\":{\"1929\":1}}],[\"属性可用于访问文件数据\",{\"1\":{\"773\":1}}],[\"属性获取原始数据对象\",{\"1\":{\"1928\":1}}],[\"属性建立响应联系\",{\"1\":{\"1925\":1}}],[\"属性作为\",{\"1\":{\"1920\":1,\"1993\":1}}],[\"属性相关联的副作用函数全部取出并执行\",{\"1\":{\"1925\":1}}],[\"属性相关联的副作用函数重新执行\",{\"1\":{\"1916\":1,\"1917\":1}}],[\"属性相同的语法\",{\"1\":{\"730\":1}}],[\"属性出错时提示错误\",{\"1\":{\"1799\":1}}],[\"属性之间不同的搭配\",{\"1\":{\"1788\":1}}],[\"属性通过\",{\"1\":{\"1358\":1}}],[\"属性和事件绑定\",{\"1\":{\"1358\":1}}],[\"属性和\",{\"1\":{\"1358\":2}}],[\"属性信息\",{\"1\":{\"1353\":1}}],[\"属性嵌套\",{\"0\":{\"1257\":1}}],[\"属性时调用\",{\"1\":{\"1928\":1}}],[\"属性时\",{\"1\":{\"1231\":1,\"1902\":2}}],[\"属性操作\",{\"1\":{\"1194\":1}}],[\"属性有三个可选值\",{\"1\":{\"2088\":1}}],[\"属性有\",{\"1\":{\"1153\":1}}],[\"属性节点并非是元素节点的子节点\",{\"1\":{\"1113\":1}}],[\"属性节点\",{\"0\":{\"1113\":1}}],[\"属性只返回一个节点下面的所有子元素节点\",{\"1\":{\"1112\":1}}],[\"属性会发生在keydown和keyup事件被触发时\",{\"1\":{\"1154\":1}}],[\"属性会获取包括文本节点\",{\"1\":{\"1112\":1}}],[\"属性会包含更多信息\",{\"1\":{\"752\":1}}],[\"属性就是之前在使用\",{\"1\":{\"2061\":1}}],[\"属性就是这种情况\",{\"1\":{\"1102\":1}}],[\"属性就产生了冲突\",{\"1\":{\"828\":1}}],[\"属性以米为单位返回经度和纬度的精确度\",{\"1\":{\"1102\":1}}],[\"属性等于\",{\"1\":{\"1093\":2,\"2051\":2}}],[\"属性或窗口的名称\",{\"1\":{\"1088\":3}}],[\"属性最早是火狐浏览器里面特有的属性\",{\"1\":{\"1087\":1}}],[\"属性最终会作为用户填写的值传递给服务器\",{\"1\":{\"670\":1}}],[\"属性其实是原型对象的属性\",{\"1\":{\"1064\":1}}],[\"属性一般通过构造函数定义在对象本身上\",{\"1\":{\"1009\":1}}],[\"属性呢\",{\"1\":{\"830\":1}}],[\"属性与属性之间是以逗号隔开的\",{\"1\":{\"827\":1}}],[\"属性设为数据网址来呈现缩略图\",{\"1\":{\"773\":1}}],[\"属性设置为\",{\"1\":{\"764\":1,\"765\":1,\"2088\":1}}],[\"属性设置\",{\"1\":{\"703\":2}}],[\"属性将包含\",{\"1\":{\"773\":1}}],[\"属性将包含编码为数据网址的\",{\"1\":{\"773\":1}}],[\"属性将包含文本字符串形式的\",{\"1\":{\"773\":1}}],[\"属性将包含二进制字符串形式的\",{\"1\":{\"773\":1}}],[\"属性将会设置为一个\",{\"1\":{\"284\":1}}],[\"属性实现了同时选择多个文件\",{\"1\":{\"772\":1}}],[\"属性用来定义组名\",{\"1\":{\"756\":1}}],[\"属性在模板中的结束位置\",{\"1\":{\"1353\":2}}],[\"属性在模板中的起始位置\",{\"1\":{\"1353\":2}}],[\"属性在\",{\"1\":{\"756\":1}}],[\"属性在指定时\",{\"1\":{\"730\":1}}],[\"属性改变\",{\"1\":{\"752\":2}}],[\"属性则图片不会被搜索引擎所收录\",{\"1\":{\"666\":1}}],[\"属性产生影响\",{\"1\":{\"640\":1}}],[\"属性进行了设置\",{\"1\":{\"533\":1}}],[\"属性必须有值\",{\"1\":{\"528\":1,\"754\":1}}],[\"属性来实现本地存储机制\",{\"1\":{\"1436\":1}}],[\"属性来查看该函数的形式参数个数\",{\"1\":{\"875\":1}}],[\"属性来控制附加信息的显示与隐藏\",{\"1\":{\"697\":1}}],[\"属性来设置定位\",{\"1\":{\"568\":1}}],[\"属性来设置父元素如何处理溢出的子元素\",{\"1\":{\"557\":1}}],[\"属性来使用\",{\"1\":{\"521\":1}}],[\"属性来参考项目的一些操作\",{\"1\":{\"77\":1}}],[\"属性为\",{\"1\":{\"519\":1,\"1093\":2,\"2051\":2,\"2065\":1}}],[\"属性的问题\",{\"0\":{\"1499\":1}}],[\"属性的删除等\",{\"1\":{\"1491\":1}}],[\"属性的添加\",{\"1\":{\"1491\":1}}],[\"属性的区别\",{\"1\":{\"1086\":1}}],[\"属性的值\",{\"1\":{\"529\":1,\"1949\":1}}],[\"属性的\",{\"1\":{\"519\":1,\"1205\":4}}],[\"属性名变量\",{\"0\":{\"1330\":1}}],[\"属性名必须用双引号引起来\",{\"1\":{\"895\":1}}],[\"属性名~=属性值\",{\"1\":{\"519\":1}}],[\"属性名$=属性值\",{\"1\":{\"519\":1}}],[\"属性名^=属性值\",{\"1\":{\"519\":1}}],[\"属性名=属性值\",{\"1\":{\"519\":1}}],[\"属性名\",{\"1\":{\"519\":2,\"1353\":2}}],[\"属性选择器\",{\"0\":{\"519\":1},\"1\":{\"524\":1}}],[\"属性值返回\",{\"1\":{\"1938\":1}}],[\"属性值时\",{\"1\":{\"1916\":1,\"1918\":1}}],[\"属性值就指向该函数在内存中的地址的一个引用\",{\"1\":{\"1015\":1}}],[\"属性值给覆盖掉了\",{\"1\":{\"828\":1}}],[\"属性值把上面的\",{\"1\":{\"828\":1}}],[\"属性值为\",{\"1\":{\"765\":1}}],[\"属性值必须为正数\",{\"1\":{\"708\":1}}],[\"属性值都为\",{\"1\":{\"591\":1}}],[\"属性值计算过程\",{\"1\":{\"528\":1}}],[\"属性值的元素需要触发响应\",{\"1\":{\"1916\":1}}],[\"属性值的读写\",{\"1\":{\"1491\":1}}],[\"属性值的计算过程\",{\"0\":{\"528\":1}}],[\"属性值的方式\",{\"1\":{\"515\":1}}],[\"属性值中以空格为间隔的值的标签\",{\"1\":{\"519\":1}}],[\"属性值包含\",{\"1\":{\"519\":1}}],[\"属性值以\",{\"1\":{\"519\":2}}],[\"属性值选中一组元素\",{\"1\":{\"516\":1}}],[\"属性值选中一个元素\",{\"1\":{\"516\":1}}],[\"属性值\",{\"1\":{\"516\":2,\"664\":1,\"1265\":1,\"1353\":2,\"1902\":1,\"1918\":1,\"1938\":2}}],[\"属性对应的文件\",{\"1\":{\"238\":1}}],[\"属性对应的是一个正则表达式\",{\"1\":{\"138\":1}}],[\"属性代表所要使用的\",{\"1\":{\"138\":1}}],[\"属性翻译\",{\"1\":{\"64\":1}}],[\"属性\",{\"0\":{\"568\":1,\"879\":1,\"886\":1,\"950\":1,\"951\":1,\"952\":1,\"953\":1,\"1080\":1,\"1377\":1,\"1428\":1,\"1434\":1,\"1463\":1},\"1\":{\"47\":1,\"72\":2,\"77\":1,\"138\":2,\"158\":1,\"345\":2,\"548\":1,\"657\":1,\"668\":1,\"670\":2,\"675\":1,\"696\":1,\"703\":1,\"756\":6,\"757\":1,\"761\":3,\"765\":1,\"772\":2,\"828\":1,\"830\":2,\"879\":1,\"995\":2,\"1009\":1,\"1064\":1,\"1087\":2,\"1091\":1,\"1093\":1,\"1096\":1,\"1098\":1,\"1102\":2,\"1127\":1,\"1153\":1,\"1154\":1,\"1156\":1,\"1206\":1,\"1207\":1,\"1357\":2,\"1360\":1,\"1397\":1,\"1428\":1,\"1441\":1,\"1485\":1,\"1499\":1,\"1784\":1,\"1788\":1,\"1789\":1,\"1804\":1,\"1834\":3,\"1894\":1,\"1902\":1,\"1918\":1,\"1921\":1,\"1925\":2,\"1926\":2,\"1927\":1,\"1931\":1,\"1937\":1,\"1949\":1,\"1951\":1,\"2029\":2,\"2032\":1,\"2041\":1,\"2053\":1,\"2061\":1,\"2062\":1,\"2065\":2,\"2088\":1,\"2095\":1}}],[\"完再追踪\",{\"1\":{\"1925\":1}}],[\"完善\",{\"0\":{\"1990\":1}}],[\"完善之前对iterate\",{\"1\":{\"1917\":1}}],[\"完善的文档\",{\"1\":{\"1195\":1}}],[\"完善的\",{\"1\":{\"1195\":1}}],[\"完毕\",{\"1\":{\"1792\":1}}],[\"完整版本\",{\"1\":{\"1805\":1}}],[\"完整版本和只包含运行时版本\",{\"1\":{\"1805\":1}}],[\"完整判定逻辑\",{\"1\":{\"1607\":1}}],[\"完整\",{\"1\":{\"1496\":1}}],[\"完整形式\",{\"1\":{\"1406\":1,\"1407\":1}}],[\"完整写法\",{\"1\":{\"1376\":1}}],[\"完整的解析流程如下图所示\",{\"1\":{\"2071\":1}}],[\"完整的导航解析流程如下所示\",{\"1\":{\"2029\":1}}],[\"完整的编译过程通常包含词法分析\",{\"1\":{\"1972\":1}}],[\"完整的特殊规则如下\",{\"1\":{\"812\":1}}],[\"完整的\",{\"1\":{\"542\":1,\"564\":1,\"2064\":1}}],[\"完整的头部就像下面这样的json\",{\"1\":{\"365\":1}}],[\"完全看它自己\",{\"1\":{\"1539\":2}}],[\"完全不会请求服务器\",{\"1\":{\"1536\":1}}],[\"完全不透明\",{\"1\":{\"742\":1}}],[\"完全一致\",{\"1\":{\"1499\":1}}],[\"完全透明\",{\"1\":{\"742\":1}}],[\"完全由浏览器厂商决定\",{\"1\":{\"1054\":1}}],[\"完全由应用管理\",{\"1\":{\"360\":1}}],[\"完全由前后端协商而定\",{\"1\":{\"358\":1}}],[\"完成词法分析\",{\"1\":{\"1974\":1}}],[\"完成新旧虚拟\",{\"1\":{\"1951\":1}}],[\"完成重新渲染\",{\"1\":{\"1943\":1}}],[\"完成转换\",{\"1\":{\"1937\":1,\"1977\":1}}],[\"完成深浅响应\",{\"0\":{\"1913\":1}}],[\"完成属性的删除\",{\"1\":{\"1907\":1}}],[\"完成设置\",{\"1\":{\"1902\":1}}],[\"完成读取\",{\"1\":{\"1902\":1}}],[\"完成默认行为\",{\"1\":{\"1901\":1}}],[\"完成可调度性\",{\"0\":{\"1893\":1}}],[\"完成响应式的基本思路\",{\"0\":{\"1886\":1}}],[\"完成一次渲染\",{\"1\":{\"1806\":1}}],[\"完成计算属性的缓存功能\",{\"1\":{\"1804\":2}}],[\"完成后\",{\"1\":{\"1628\":1,\"1965\":1}}],[\"完成处理后\",{\"1\":{\"1530\":1}}],[\"完成三次握手后\",{\"1\":{\"1530\":1}}],[\"完成最终的屏幕成像\",{\"1\":{\"1526\":1}}],[\"完成绘制后\",{\"1\":{\"1526\":1}}],[\"完成\",{\"0\":{\"1124\":1},\"1\":{\"1427\":1,\"1575\":1}}],[\"完成unzip\",{\"1\":{\"401\":1}}],[\"完成的\",{\"1\":{\"245\":1}}],[\"完成模块编译\",{\"1\":{\"154\":1}}],[\"完成编译\",{\"1\":{\"147\":1}}],[\"成规\",{\"1\":{\"1705\":1}}],[\"成语\",{\"1\":{\"1705\":1}}],[\"成功通行后更新内部的current和app\",{\"1\":{\"2034\":1}}],[\"成功的promise数量\",{\"1\":{\"1778\":1}}],[\"成功\",{\"1\":{\"1575\":1,\"1592\":1}}],[\"成功退出\",{\"1\":{\"355\":1}}],[\"成分组成\",{\"0\":{\"1007\":1}}],[\"成立就执行循环体\",{\"1\":{\"821\":1}}],[\"成对出现\",{\"1\":{\"713\":1}}],[\"成绩单\",{\"1\":{\"669\":1}}],[\"成为垃圾对象==>垃圾回收器回收\",{\"1\":{\"1002\":1}}],[\"成为了可以编写大型应用的正式语言\",{\"1\":{\"25\":1}}],[\"成为了第一个为\",{\"1\":{\"24\":1}}],[\"成为前端开发挥之不去的阴影和原罪\",{\"1\":{\"23\":1}}],[\"排队\",{\"1\":{\"1556\":1}}],[\"排除\",{\"1\":{\"1875\":1}}],[\"排除主体与词语冲突的选项\",{\"1\":{\"1702\":1}}],[\"排除法\",{\"1\":{\"1692\":1,\"1699\":1}}],[\"排除型字符组\",{\"1\":{\"902\":1}}],[\"排除login相关的路由和接口\",{\"1\":{\"355\":1}}],[\"排序的数字放入对应桶中\",{\"1\":{\"419\":1}}],[\"排序\",{\"1\":{\"210\":1}}],[\"又或者旧的组件实例\",{\"1\":{\"2069\":1}}],[\"又使用\",{\"1\":{\"2054\":1}}],[\"又是如何操作的\",{\"1\":{\"2047\":1}}],[\"又是通过调用\",{\"1\":{\"2043\":1}}],[\"又关心值\",{\"1\":{\"1930\":1}}],[\"又会修改数组的\",{\"1\":{\"1925\":1,\"1993\":1}}],[\"又会设置\",{\"1\":{\"1892\":1}}],[\"又\",{\"1\":{\"1751\":1}}],[\"又叫做强制缓存\",{\"1\":{\"1536\":1}}],[\"又该如何处理呢\",{\"1\":{\"1533\":1}}],[\"又比如使用了伪元素选择器\",{\"1\":{\"1526\":1}}],[\"又能提高效率\",{\"1\":{\"1923\":1}}],[\"又能使用新的\",{\"1\":{\"1319\":1}}],[\"又能为一个标签添加多个同类型的事件处理方法\",{\"1\":{\"1214\":1}}],[\"又名\",{\"1\":{\"1247\":1}}],[\"又被称之为事件代理\",{\"1\":{\"1158\":1}}],[\"又被称之为事件处理程序\",{\"1\":{\"1142\":1}}],[\"又被称之为行内事件监听器\",{\"1\":{\"1143\":1}}],[\"又被称之为分时函数\",{\"1\":{\"1038\":1}}],[\"又被称之为模式修正符\",{\"1\":{\"919\":1}}],[\"又被标离开环境\",{\"1\":{\"1029\":1}}],[\"又称之为协商缓存\",{\"1\":{\"1537\":1}}],[\"又称查询字符串\",{\"1\":{\"1093\":1,\"2051\":1}}],[\"又称部分求值\",{\"1\":{\"1039\":1}}],[\"又称世界统一时间\",{\"1\":{\"875\":1}}],[\"又称签名\",{\"1\":{\"355\":1}}],[\"又为目标对象\",{\"1\":{\"764\":1}}],[\"又可以分\",{\"1\":{\"1225\":1}}],[\"又可以设置内嵌样式\",{\"1\":{\"1206\":1}}],[\"又可以理解为对\",{\"1\":{\"407\":1}}],[\"又可以方便的全局读取信息呢\",{\"1\":{\"353\":1}}],[\"信号量基础上添加了计数器的上\",{\"1\":{\"408\":1}}],[\"信号量\",{\"1\":{\"408\":1}}],[\"信号好\",{\"1\":{\"200\":2}}],[\"信息已经设置\",{\"1\":{\"770\":1}}],[\"信息已保存\",{\"1\":{\"769\":3}}],[\"信息是以键值对的形式存储\",{\"1\":{\"769\":1}}],[\"信息存储到\",{\"1\":{\"362\":1}}],[\"信息\",{\"1\":{\"354\":1,\"767\":1,\"1526\":1}}],[\"账户余额\",{\"1\":{\"350\":1}}],[\"什么时候使用\",{\"1\":{\"1504\":1}}],[\"什么时候用\",{\"1\":{\"1440\":1}}],[\"什么时候该用占位符\",{\"1\":{\"1299\":1}}],[\"什么时候该用继承\",{\"1\":{\"1299\":1}}],[\"什么时候该用混合宏\",{\"1\":{\"1299\":1}}],[\"什么时候声明变量\",{\"1\":{\"1261\":1}}],[\"什么意思呢\",{\"1\":{\"1112\":1}}],[\"什么叫做块作用域呢\",{\"1\":{\"948\":1}}],[\"什么都没有\",{\"1\":{\"625\":1}}],[\"什么名字都行\",{\"1\":{\"350\":1}}],[\"什么是内存泄露\",{\"0\":{\"1027\":1}}],[\"什么是内存泄漏\",{\"1\":{\"865\":1}}],[\"什么是内存\",{\"0\":{\"1000\":1}}],[\"什么是变量\",{\"0\":{\"999\":1}}],[\"什么是数据\",{\"0\":{\"998\":1}}],[\"什么是严格模式\",{\"0\":{\"956\":1}}],[\"什么是映射\",{\"0\":{\"867\":1}}],[\"什么是集合\",{\"0\":{\"859\":1}}],[\"什么是凭证\",{\"1\":{\"343\":1}}],[\"什么是授权\",{\"1\":{\"343\":1}}],[\"什么是模板引擎\",{\"0\":{\"323\":1}}],[\"什么是模块化项目\",{\"0\":{\"233\":1}}],[\"什么是模块化与模块\",{\"0\":{\"232\":1}}],[\"什么是\",{\"0\":{\"319\":1,\"324\":1,\"701\":1,\"1083\":1,\"1194\":1,\"1527\":1,\"1528\":1},\"1\":{\"1468\":1,\"1483\":1,\"1501\":1,\"1515\":1,\"2091\":1}}],[\"什么是中间件\",{\"0\":{\"309\":1}}],[\"什么是路由\",{\"0\":{\"303\":1}}],[\"签名信息的目的就是为了防止cookie被篡改导致的安全问题\",{\"1\":{\"350\":1}}],[\"签名仅仅是在原始的值基础上用一个密钥计算得到的一段字符串\",{\"1\":{\"350\":1}}],[\"签名\",{\"1\":{\"350\":2}}],[\"销毁组件前\",{\"1\":{\"2071\":1}}],[\"销毁阶段\",{\"0\":{\"1807\":1},\"1\":{\"1807\":1}}],[\"销毁后自定义事件会失效\",{\"1\":{\"1411\":1}}],[\"销毁后借助\",{\"1\":{\"1411\":1}}],[\"销毁那些带标记的值并回收他们所占用的内存空间\",{\"1\":{\"1031\":1}}],[\"销毁那些带标记的值并回收它们所占用的内存空间\",{\"1\":{\"1029\":1}}],[\"销毁session\",{\"1\":{\"355\":1}}],[\"销毁\",{\"1\":{\"349\":1,\"355\":1}}],[\"理所当然会想到watcher渲染实例的update函数\",{\"1\":{\"1821\":1}}],[\"理解\",{\"0\":{\"1901\":1,\"1903\":1},\"1\":{\"1446\":1,\"1455\":1,\"1486\":1}}],[\"理解为一个\",{\"1\":{\"346\":1}}],[\"理论上性能会更好\",{\"1\":{\"1874\":1}}],[\"理论上\",{\"1\":{\"924\":1,\"925\":1}}],[\"理想情况下假设双端\",{\"1\":{\"1965\":1}}],[\"理想情况下给前端提供的是基于领域模型的\",{\"1\":{\"218\":1}}],[\"理想视口\",{\"1\":{\"648\":1}}],[\"理想状态下\",{\"1\":{\"263\":1}}],[\"攻击主要有\",{\"1\":{\"2091\":1}}],[\"攻击脚本可以利用你的身份信息来伪造合法的请求\",{\"1\":{\"2087\":1}}],[\"攻击脚本会向银行应用程序发送一个伪造的转账请求\",{\"1\":{\"2087\":1}}],[\"攻击者保持自己和服务器之间的\",{\"1\":{\"2091\":1}}],[\"攻击者就可以利用你的银行账户进行转账操作\",{\"1\":{\"2087\":1}}],[\"攻击者向你发送一封包含恶意网站链接的电子邮件\",{\"1\":{\"2087\":1}}],[\"攻击者创建一个恶意网站\",{\"1\":{\"2087\":1}}],[\"攻击者可以通过以下步骤进行\",{\"1\":{\"2087\":1}}],[\"攻击\",{\"0\":{\"2087\":1,\"2094\":1},\"1\":{\"345\":1,\"1400\":1,\"2087\":1,\"2088\":2},\"2\":{\"2090\":1,\"2097\":1}}],[\"秒以后再显示出来\",{\"1\":{\"1105\":1}}],[\"秒了\",{\"1\":{\"1088\":1}}],[\"秒钟后显示出来\",{\"1\":{\"1105\":1}}],[\"秒钟弹出提示框\",{\"1\":{\"1088\":1}}],[\"秒钟为您找到相关结果约\",{\"1\":{\"304\":1}}],[\"秒后门关闭\",{\"1\":{\"1036\":1}}],[\"秒后失效\",{\"1\":{\"345\":1}}],[\"秒值及毫秒值\",{\"1\":{\"877\":1}}],[\"秒之间的毫秒数\",{\"1\":{\"876\":1}}],[\"秒到现在为止的豪秒数\",{\"1\":{\"874\":1}}],[\"秒\",{\"1\":{\"368\":1,\"875\":2,\"1088\":1,\"1102\":1,\"1534\":2}}],[\"键或\",{\"1\":{\"2065\":1}}],[\"键入命令\",{\"1\":{\"1573\":1}}],[\"键入如下代码\",{\"1\":{\"301\":1}}],[\"键码\",{\"1\":{\"1370\":1}}],[\"键控制缩进的一种语法规则\",{\"1\":{\"1249\":1}}],[\"键=值\",{\"1\":{\"1227\":2}}],[\"键盘按下的键值码\",{\"1\":{\"1219\":1}}],[\"键盘事件也会有相关的属性被传入\",{\"1\":{\"1154\":1}}],[\"键盘事件的事件对象\",{\"0\":{\"1154\":1}}],[\"键盘事件\",{\"0\":{\"1149\":1,\"1370\":1}}],[\"键盘以及页面上所常见的事件类型\",{\"1\":{\"1147\":1}}],[\"键\",{\"1\":{\"867\":1,\"1149\":1,\"1370\":1,\"1678\":2,\"2065\":3}}],[\"键为\",{\"1\":{\"846\":5}}],[\"键输出\",{\"1\":{\"384\":1}}],[\"键值对形式出现\",{\"1\":{\"393\":1}}],[\"键值对\",{\"1\":{\"345\":1}}],[\"收集\",{\"1\":{\"1842\":1}}],[\"收集当前\",{\"1\":{\"1841\":1,\"1842\":1}}],[\"收集依赖\",{\"1\":{\"1785\":2,\"1849\":1}}],[\"收集表单数据\",{\"0\":{\"1357\":1}}],[\"收到的插槽内容\",{\"1\":{\"1493\":1}}],[\"收尾工作\",{\"1\":{\"1410\":1}}],[\"收听\",{\"1\":{\"747\":1}}],[\"收藏\",{\"1\":{\"343\":1}}],[\"收费\",{\"1\":{\"213\":1}}],[\"游客模式下\",{\"1\":{\"343\":1}}],[\"游客模式和登录模式\",{\"1\":{\"343\":1}}],[\"地理定位功能的底层设备来提供的\",{\"1\":{\"1099\":1}}],[\"地理位置等权限\",{\"1\":{\"343\":1}}],[\"地\",{\"1\":{\"373\":1}}],[\"地区\",{\"1\":{\"343\":1}}],[\"地址如下\",{\"1\":{\"2040\":1}}],[\"地址我放到了请求头的location中了\",{\"1\":{\"1635\":1}}],[\"地址我放到了响应头的location中了\",{\"1\":{\"1635\":1}}],[\"地址的源完全相同\",{\"1\":{\"1600\":1}}],[\"地址查找本地缓存\",{\"1\":{\"1530\":1}}],[\"地址之后\",{\"0\":{\"1530\":1}}],[\"地址干净\",{\"1\":{\"1468\":1}}],[\"地址中永远带着\",{\"1\":{\"1468\":1}}],[\"地址值数据\",{\"1\":{\"1000\":1}}],[\"地址类型\",{\"1\":{\"757\":1}}],[\"地址\",{\"1\":{\"373\":2,\"1313\":1,\"1475\":1,\"1530\":1,\"1569\":2,\"1583\":1,\"2030\":1}}],[\"地址或者是域名信息\",{\"1\":{\"282\":1}}],[\"地址是否为\",{\"1\":{\"69\":1}}],[\"授权是针对\",{\"1\":{\"362\":1}}],[\"授权中间件\",{\"1\":{\"355\":1}}],[\"授权\",{\"1\":{\"343\":1,\"362\":1}}],[\"动量的抑制因子\",{\"1\":{\"1659\":1}}],[\"动量\",{\"1\":{\"1659\":1}}],[\"动画完成后执行的回调\",{\"1\":{\"1224\":1}}],[\"动画持续的时长\",{\"1\":{\"1224\":1}}],[\"动画播放完毕\",{\"1\":{\"1224\":1,\"1225\":2}}],[\"动画不仅限于显示或隐藏\",{\"1\":{\"1224\":1}}],[\"动画延时等待时\",{\"1\":{\"644\":1}}],[\"动画执行完毕元素会停止在动画结束的位置\",{\"1\":{\"644\":1}}],[\"动画执行完毕元素回到原来位置\",{\"1\":{\"644\":1}}],[\"动画执行的次数\",{\"1\":{\"644\":1}}],[\"动画的执行都会放到队列中排队\",{\"1\":{\"1224\":1}}],[\"动画的执行时间\",{\"1\":{\"644\":1}}],[\"动画的填充模式\",{\"1\":{\"644\":1}}],[\"动画的延时\",{\"1\":{\"644\":1}}],[\"动画的设置\",{\"0\":{\"644\":1}}],[\"动画和过渡类似\",{\"1\":{\"642\":1}}],[\"动画\",{\"0\":{\"642\":1},\"1\":{\"1193\":1,\"1194\":1}}],[\"动画与响应式\",{\"0\":{\"639\":1}}],[\"动力火车\",{\"1\":{\"340\":1}}],[\"动词\",{\"1\":{\"339\":1}}],[\"动态控制节点是否展示\",{\"1\":{\"1404\":1}}],[\"动态控制节点是否存在\",{\"1\":{\"1404\":3}}],[\"动态的改变元素的类\",{\"1\":{\"1130\":1}}],[\"动态的\",{\"1\":{\"1020\":1}}],[\"动态属性\",{\"0\":{\"984\":1}}],[\"动态资源\",{\"1\":{\"288\":1}}],[\"动态处理和生成页面结构和展示\",{\"1\":{\"219\":1}}],[\"支付接口\",{\"1\":{\"337\":1}}],[\"支持异步\",{\"1\":{\"1858\":1}}],[\"支持作为\",{\"1\":{\"1480\":1}}],[\"支持一种文件叫做\",{\"1\":{\"1319\":1}}],[\"支持两种内部结构相同但呈现方式不同的字符串\",{\"1\":{\"1265\":1}}],[\"支持多种值类型\",{\"1\":{\"1263\":1}}],[\"支持多种模块化标准\",{\"1\":{\"117\":1}}],[\"支持严格模式的浏览器有\",{\"1\":{\"956\":1}}],[\"支持<canvas>的浏览器将会忽略在容器中包含的内容\",{\"1\":{\"702\":1}}],[\"支持导入功能的\",{\"1\":{\"376\":1}}],[\"支持零配置\",{\"1\":{\"122\":1}}],[\"支持非常良好\",{\"1\":{\"59\":1}}],[\"支持\",{\"1\":{\"24\":1,\"117\":1,\"404\":1,\"921\":1,\"1822\":1}}],[\"进来之后首先将\",{\"1\":{\"2069\":1}}],[\"进而执行\",{\"1\":{\"2031\":1}}],[\"进而找到该渲染的组件\",{\"1\":{\"2031\":1}}],[\"进而触发代理对象\",{\"1\":{\"1888\":1}}],[\"进而更新页面\",{\"1\":{\"1396\":1}}],[\"进一步判断\",{\"1\":{\"1795\":1}}],[\"进出口\",{\"1\":{\"1752\":1}}],[\"进出子元素时也会触发\",{\"1\":{\"1148\":1}}],[\"进出子元素也会触发\",{\"1\":{\"1148\":1}}],[\"进口\",{\"1\":{\"1752\":2}}],[\"进入路由时\",{\"1\":{\"2071\":1}}],[\"进入此\",{\"1\":{\"2070\":1}}],[\"进入节点\",{\"1\":{\"1977\":1}}],[\"进入后端处理流程\",{\"1\":{\"1530\":1}}],[\"进入工程目录\",{\"1\":{\"1483\":1}}],[\"进入该组件时被调用\",{\"1\":{\"1467\":1}}],[\"进入守卫\",{\"1\":{\"1467\":1}}],[\"进入的终点\",{\"1\":{\"1441\":1}}],[\"进入的起点\",{\"1\":{\"1441\":1}}],[\"进入过程中\",{\"1\":{\"1441\":1}}],[\"进入元素时触发\",{\"1\":{\"1148\":2}}],[\"进入环境\",{\"1\":{\"1029\":3,\"1031\":1}}],[\"进入函数环境\",{\"1\":{\"1014\":1}}],[\"进入执行上下文\",{\"1\":{\"1014\":1}}],[\"进入\",{\"1\":{\"819\":1,\"957\":1,\"1028\":1,\"1526\":1}}],[\"进入app\",{\"1\":{\"332\":1}}],[\"进度条不会显示任何进度\",{\"1\":{\"696\":1}}],[\"进程之间相互独立\",{\"1\":{\"1553\":1}}],[\"进程产生系统调用\",{\"1\":{\"1526\":1}}],[\"进程会开启多个线程来完成光栅化\",{\"1\":{\"1526\":1}}],[\"进程是\",{\"1\":{\"407\":1}}],[\"进程\",{\"0\":{\"1168\":1},\"1\":{\"407\":1,\"1526\":2}}],[\"进程与线程\",{\"0\":{\"407\":1},\"2\":{\"1184\":1}}],[\"进制问题\",{\"1\":{\"792\":1}}],[\"进制互转\",{\"1\":{\"404\":1}}],[\"进制转化为整数\",{\"1\":{\"395\":1}}],[\"进行路由拦截\",{\"1\":{\"2075\":2}}],[\"进行拦截\",{\"1\":{\"2071\":1}}],[\"进行访问\",{\"1\":{\"2070\":1}}],[\"进行各种判断\",{\"1\":{\"2070\":1}}],[\"进行编码操作\",{\"1\":{\"2045\":1}}],[\"进行编码\",{\"1\":{\"2045\":1}}],[\"进行一个处理\",{\"1\":{\"2058\":1}}],[\"进行一个\",{\"1\":{\"2047\":1}}],[\"进行一次路由导航\",{\"1\":{\"2026\":1}}],[\"进行一些预变换操作\",{\"1\":{\"1791\":1}}],[\"进行对比\",{\"1\":{\"2002\":1}}],[\"进行转换\",{\"1\":{\"1976\":1}}],[\"进行转换的那些文件\",{\"1\":{\"138\":1}}],[\"进行节点的移动\",{\"1\":{\"1969\":1}}],[\"进行特殊处理\",{\"1\":{\"1949\":1}}],[\"进行打补丁\",{\"1\":{\"1944\":1}}],[\"进行响应式时\",{\"1\":{\"1917\":1}}],[\"进行清除\",{\"1\":{\"1890\":1}}],[\"进行单文件组件的开发时\",{\"1\":{\"1867\":1}}],[\"进行选择\",{\"1\":{\"1692\":1}}],[\"进行标准化处理\",{\"1\":{\"1665\":1}}],[\"进行标识\",{\"1\":{\"790\":1}}],[\"进行调用\",{\"1\":{\"1662\":1}}],[\"进行随机梯度下降更新\",{\"1\":{\"1659\":1}}],[\"进行模型的训练和推理\",{\"1\":{\"1655\":1}}],[\"进行迭代\",{\"1\":{\"1655\":1}}],[\"进行训练或推理的代码\",{\"1\":{\"1655\":1}}],[\"进行数据增强\",{\"1\":{\"1655\":1}}],[\"进行通信时\",{\"1\":{\"1648\":1}}],[\"进行通信\",{\"1\":{\"1647\":1}}],[\"进行修改\",{\"1\":{\"1573\":1}}],[\"进行管理\",{\"1\":{\"1455\":1}}],[\"进行了关联\",{\"1\":{\"2047\":1}}],[\"进行了一个初始化操作\",{\"1\":{\"2044\":1}}],[\"进行了一层封装\",{\"1\":{\"1909\":1}}],[\"进行了封装\",{\"1\":{\"1501\":1}}],[\"进行了统一\",{\"1\":{\"1446\":1,\"1494\":1}}],[\"进行了克隆\",{\"1\":{\"1123\":1}}],[\"进行某些操作时\",{\"1\":{\"1440\":1}}],[\"进行相关操作\",{\"1\":{\"1377\":1}}],[\"进行使用\",{\"1\":{\"1356\":1}}],[\"进行深拷贝\",{\"1\":{\"1201\":1}}],[\"进行深克隆\",{\"1\":{\"1123\":1}}],[\"进行浅拷贝\",{\"1\":{\"1201\":1}}],[\"进行浅拷贝与深拷贝\",{\"1\":{\"1201\":1}}],[\"进行浅克隆\",{\"1\":{\"1123\":1}}],[\"进行扩展\",{\"1\":{\"1201\":1}}],[\"进行绑定时第\",{\"1\":{\"1146\":1}}],[\"进行拼串\",{\"1\":{\"975\":1}}],[\"进行匹配\",{\"1\":{\"918\":1}}],[\"进行时间的计算都是通过时间戳来进行计算的\",{\"1\":{\"874\":1}}],[\"进行遍历\",{\"1\":{\"863\":1,\"1278\":1,\"2074\":1}}],[\"进行比较\",{\"1\":{\"856\":1}}],[\"进行比较返回的都是\",{\"1\":{\"812\":1}}],[\"进行关系比较\",{\"1\":{\"812\":1}}],[\"进行覆盖\",{\"1\":{\"712\":2}}],[\"进行宽度和缩放的设置\",{\"1\":{\"648\":1}}],[\"进行布局\",{\"1\":{\"648\":1}}],[\"进行定位\",{\"1\":{\"571\":1}}],[\"进行定位的\",{\"1\":{\"570\":1}}],[\"进行设置的\",{\"1\":{\"543\":1}}],[\"进行排序\",{\"1\":{\"419\":1}}],[\"进行读写\",{\"1\":{\"379\":1}}],[\"进行其他逻辑操作\",{\"1\":{\"368\":1}}],[\"进行签名\",{\"1\":{\"363\":1}}],[\"进行操作\",{\"1\":{\"355\":1}}],[\"进行处理\",{\"1\":{\"349\":1,\"1897\":1}}],[\"进行加工\",{\"1\":{\"309\":1}}],[\"进行开发的知名应用还有\",{\"1\":{\"222\":1}}],[\"进行交互\",{\"1\":{\"213\":1}}],[\"进行全局安装\",{\"1\":{\"73\":1}}],[\"进行\",{\"1\":{\"58\":1,\"1394\":1,\"1678\":1,\"2101\":2}}],[\"八进制\",{\"1\":{\"792\":1}}],[\"八进制以0开头\",{\"1\":{\"792\":1}}],[\"八进制数\",{\"1\":{\"384\":1}}],[\"八种验证类型\",{\"0\":{\"760\":1}}],[\"八\",{\"0\":{\"330\":1,\"404\":1,\"594\":1,\"721\":1,\"850\":1,\"1099\":1,\"1214\":1,\"1297\":1,\"1339\":1,\"1679\":1,\"1752\":1,\"1862\":1,\"2071\":1}}],[\"王者荣耀英雄数据\",{\"1\":{\"1589\":1}}],[\"王二麻子\",{\"1\":{\"327\":1}}],[\"王力宏\",{\"1\":{\"202\":1,\"203\":2}}],[\"李四\",{\"1\":{\"327\":1,\"1488\":1}}],[\"七层\",{\"0\":{\"1624\":1}}],[\"七\",{\"0\":{\"322\":1,\"403\":1,\"584\":1,\"720\":1,\"837\":1,\"1002\":1,\"1098\":1,\"1163\":1,\"1208\":1,\"1291\":1,\"1338\":1,\"1469\":1,\"1678\":1,\"1749\":1,\"1861\":1,\"1926\":1,\"2067\":1}}],[\"购物车\",{\"1\":{\"321\":1}}],[\"多版本\",{\"1\":{\"1875\":1}}],[\"多步计算的月均\",{\"1\":{\"1752\":1}}],[\"多步间隔增长率\",{\"1\":{\"1748\":1}}],[\"多利用\",{\"1\":{\"1731\":1}}],[\"多以\",{\"1\":{\"1728\":1}}],[\"多以平均数增长率形式出现\",{\"1\":{\"1728\":1}}],[\"多级路由\",{\"0\":{\"1458\":1}}],[\"多层\",{\"1\":{\"1379\":1,\"1433\":1}}],[\"多次引入同一模块\",{\"1\":{\"1301\":1}}],[\"多次验证相同字符串时\",{\"1\":{\"925\":1}}],[\"多出来的变量将会得到\",{\"1\":{\"1290\":1}}],[\"多线程\",{\"1\":{\"1182\":1}}],[\"多线程开发线程之间执行是无序的\",{\"1\":{\"408\":1}}],[\"多项影响深远的\",{\"1\":{\"1084\":1}}],[\"多余实参不会被赋值\",{\"1\":{\"931\":1}}],[\"多维数组\",{\"0\":{\"848\":1}}],[\"多重赋值\",{\"1\":{\"816\":1}}],[\"多行注释会被保留\",{\"1\":{\"1325\":1}}],[\"多行注释可以写在任何允许\",{\"1\":{\"1255\":1}}],[\"多行匹配\",{\"1\":{\"901\":1}}],[\"多行的注释\",{\"1\":{\"777\":1}}],[\"多行字符块\",{\"1\":{\"383\":1}}],[\"多数浏览器的上限为\",{\"1\":{\"767\":1}}],[\"多媒体音视频\",{\"0\":{\"746\":1}}],[\"多选框\",{\"1\":{\"670\":1}}],[\"多进程与多线程运行时所占的内存分布不同\",{\"1\":{\"408\":1}}],[\"多进程管理\",{\"1\":{\"223\":1}}],[\"多继承\",{\"1\":{\"405\":1}}],[\"多装饰器的载入顺序是从下往上的\",{\"1\":{\"402\":1}}],[\"多个路由需要路由器\",{\"1\":{\"1455\":1}}],[\"多个组件需要共享数据\",{\"1\":{\"1449\":1}}],[\"多个组件共用的配置项\",{\"1\":{\"1431\":1}}],[\"多个单词组成\",{\"1\":{\"1419\":1}}],[\"多个过滤器也可以串联\",{\"1\":{\"1397\":1}}],[\"多个样式可以使用\",{\"1\":{\"1206\":1}}],[\"多个嵌套的作用域形成的由内向外的结构\",{\"1\":{\"1017\":1}}],[\"多个形参之间使用\",{\"1\":{\"931\":1}}],[\"多个连续的空格\",{\"1\":{\"658\":1}}],[\"多个属性间使用\",{\"1\":{\"641\":1}}],[\"多个颜色默认情况下平均分布\",{\"1\":{\"636\":1}}],[\"多个字体间使用\",{\"1\":{\"621\":1}}],[\"多个\",{\"0\":{\"556\":1}}],[\"多个子类来描述\",{\"1\":{\"405\":1}}],[\"多个装饰器并用\",{\"1\":{\"402\":1}}],[\"多个全局中间件\",{\"0\":{\"314\":1}}],[\"依此类推\",{\"1\":{\"2068\":1}}],[\"依据\",{\"1\":{\"1969\":1}}],[\"依据信息类型\",{\"1\":{\"1791\":1}}],[\"依然使用之前的实例\",{\"1\":{\"1979\":1}}],[\"依然存在新\",{\"1\":{\"1962\":1}}],[\"依然会触发副作用函数执行\",{\"1\":{\"1890\":1}}],[\"依然占据页面的位置\",{\"1\":{\"548\":1}}],[\"依次执行其中的守卫函数\",{\"1\":{\"2029\":1}}],[\"依次求得\",{\"1\":{\"1729\":1}}],[\"依次计算\",{\"1\":{\"1712\":1}}],[\"依次打印出\",{\"1\":{\"1088\":1}}],[\"依次寻找各个匹配结果\",{\"1\":{\"923\":1}}],[\"依次为树中的每个节点计算出它最终的样式\",{\"1\":{\"1526\":1}}],[\"依次为\",{\"1\":{\"402\":1}}],[\"依次为request对象\",{\"1\":{\"309\":1}}],[\"依赖于\",{\"1\":{\"2044\":1}}],[\"依赖版本控制\",{\"1\":{\"2040\":1}}],[\"依赖集合\",{\"1\":{\"1889\":1}}],[\"依赖收集\",{\"0\":{\"1849\":1,\"1854\":1}}],[\"依赖接收到通知后就会重新执行updatecomponent函数完成新一轮渲染\",{\"1\":{\"1806\":1}}],[\"依赖管理器\",{\"1\":{\"1784\":1}}],[\"依赖的模块包\",{\"1\":{\"332\":1}}],[\"依赖的类型\",{\"1\":{\"72\":1}}],[\"依赖模块\",{\"1\":{\"155\":1}}],[\"依赖模糊\",{\"1\":{\"31\":1}}],[\"依赖关系图\",{\"1\":{\"155\":1}}],[\"依赖关系图示例\",{\"1\":{\"155\":1}}],[\"依赖关系混乱等问题\",{\"1\":{\"23\":1}}],[\"依赖对象\",{\"1\":{\"155\":3}}],[\"依赖\",{\"1\":{\"66\":2,\"1889\":1}}],[\"依赖包\",{\"1\":{\"66\":1}}],[\"依赖预加载\",{\"1\":{\"50\":1}}],[\"依赖预声明\",{\"1\":{\"46\":1}}],[\"依赖延迟声明\",{\"1\":{\"46\":1}}],[\"连绵不\",{\"1\":{\"1705\":1}}],[\"连内嵌的样式也同样无法获取\",{\"1\":{\"1127\":1}}],[\"连续触发事件回调都会重新开始计算\",{\"1\":{\"1037\":1}}],[\"连字符\",{\"1\":{\"903\":1}}],[\"连带着父元素一起移动\",{\"1\":{\"558\":1}}],[\"连贯操作\",{\"1\":{\"307\":1}}],[\"连接是明文传输的\",{\"1\":{\"2091\":1}}],[\"连接下才会发送\",{\"1\":{\"2088\":1}}],[\"连接了多个输入通道组和多个输出通道组\",{\"1\":{\"1667\":1}}],[\"连接直接发送和接收消息\",{\"1\":{\"1649\":1}}],[\"连接通道发送消息\",{\"1\":{\"1649\":1}}],[\"连接通道建立\",{\"1\":{\"1530\":1}}],[\"连接确实会造成资源的浪费\",{\"1\":{\"1647\":1}}],[\"连接需要耗费资源\",{\"1\":{\"1647\":1}}],[\"连接上提供全双工的通讯模式\",{\"1\":{\"1647\":1}}],[\"连接函数管道\",{\"1\":{\"1040\":1}}],[\"连接的资源\",{\"1\":{\"1647\":1}}],[\"连接的申请\",{\"1\":{\"1530\":1}}],[\"连接的直线\",{\"1\":{\"717\":2}}],[\"连接的设置\",{\"1\":{\"269\":1}}],[\"连接多个媒体类型\",{\"1\":{\"651\":1}}],[\"连接成一个完整的字符串\",{\"1\":{\"367\":1}}],[\"连接成功\",{\"1\":{\"191\":2}}],[\"连接组成的字符串\",{\"1\":{\"367\":1}}],[\"连接失败\",{\"1\":{\"212\":1}}],[\"连接失败~~~\",{\"1\":{\"212\":1}}],[\"连接\",{\"1\":{\"212\":1,\"389\":1,\"514\":1,\"1530\":1,\"1638\":1,\"1649\":1,\"2091\":2}}],[\"连接mongodb数据库\",{\"1\":{\"200\":1}}],[\"连接一次后\",{\"1\":{\"191\":1}}],[\"连接关闭\",{\"1\":{\"191\":2,\"212\":1}}],[\"连接出错~~\",{\"1\":{\"191\":1}}],[\"连接出错\",{\"1\":{\"191\":1}}],[\"连接数据库\",{\"1\":{\"191\":1}}],[\"商品\",{\"1\":{\"306\":1}}],[\"商品详情\",{\"1\":{\"306\":1}}],[\"商品列表\",{\"1\":{\"187\":1}}],[\"登录和鉴权\",{\"0\":{\"1593\":1}}],[\"登录\",{\"1\":{\"355\":1,\"1594\":1}}],[\"登录成功\",{\"1\":{\"304\":1,\"355\":1}}],[\"登录页面\",{\"1\":{\"285\":2}}],[\"路程的应用程序\",{\"1\":{\"1100\":1}}],[\"路由独享守卫\",{\"1\":{\"2071\":1}}],[\"路由所对应的\",{\"1\":{\"2070\":1}}],[\"路由发生了变化\",{\"1\":{\"2069\":1}}],[\"路由名称\",{\"1\":{\"2069\":1}}],[\"路由变化触发组件重渲染\",{\"0\":{\"2034\":1}}],[\"路由切换的时候会把当前路由切换到目标路由\",{\"1\":{\"2033\":1}}],[\"路由器首次导航时会利用此函数添加listener\",{\"1\":{\"2034\":1}}],[\"路由器始终会维护当前的路由\",{\"1\":{\"2033\":1}}],[\"路由器的两种工作模式\",{\"0\":{\"1468\":1}}],[\"路由最终的渲染离不开组件\",{\"1\":{\"2031\":1}}],[\"路由配置中的beforeenter守卫\",{\"1\":{\"2029\":1}}],[\"路由注册\",{\"0\":{\"2026\":1}}],[\"路由守卫\",{\"0\":{\"1467\":1}}],[\"路由组件所独有的两个钩子\",{\"1\":{\"1466\":1}}],[\"路由组件通常存放在pages文件夹\",{\"1\":{\"1457\":1}}],[\"路由跳转时候默认为push\",{\"1\":{\"1463\":1}}],[\"路由携带params参数时\",{\"1\":{\"1461\":1}}],[\"路由的\",{\"0\":{\"1459\":1,\"1461\":1,\"1462\":1}}],[\"路由的使用\",{\"0\":{\"304\":1}}],[\"路由操作\",{\"1\":{\"332\":1}}],[\"路由响应动态资源\",{\"1\":{\"316\":1}}],[\"路由中间件\",{\"1\":{\"311\":1}}],[\"路由参数指的是\",{\"1\":{\"306\":1}}],[\"路由确定了应用程序如何响应客户端对特定端点的请求\",{\"1\":{\"303\":1}}],[\"路由\",{\"0\":{\"302\":1},\"1\":{\"304\":3,\"332\":1,\"345\":1,\"507\":1}}],[\"路径匹配\",{\"1\":{\"2029\":2}}],[\"路径包含在\",{\"1\":{\"1316\":1}}],[\"路径分隔符统一使用\",{\"1\":{\"1308\":1}}],[\"路径名\",{\"1\":{\"1093\":1}}],[\"路径是由很多子路径构成\",{\"1\":{\"711\":1}}],[\"路径是通过不同颜色和宽度的线段或曲线相连形成的不同形状的点的集合\",{\"1\":{\"709\":1}}],[\"路径流程的\",{\"0\":{\"711\":1}}],[\"路径中不能有\",{\"1\":{\"339\":1}}],[\"路径中的参数\",{\"1\":{\"306\":1}}],[\"路径的匹配可以使用正则表达式\",{\"1\":{\"304\":1}}],[\"路径的写法有两种\",{\"1\":{\"261\":1}}],[\"路径进行\",{\"1\":{\"292\":1}}],[\"路径转换为绝对路径\",{\"1\":{\"262\":1}}],[\"路径\",{\"1\":{\"44\":1,\"268\":1,\"282\":2,\"284\":1,\"304\":1,\"315\":2}}],[\"初次挂载\",{\"1\":{\"1954\":1}}],[\"初次渲染快\",{\"1\":{\"1477\":1}}],[\"初次读取时会执行一次\",{\"1\":{\"1375\":1}}],[\"初识\",{\"0\":{\"1350\":1}}],[\"初始渲染时执行的是mountcomponent\",{\"1\":{\"2000\":1}}],[\"初始状态\",{\"1\":{\"1974\":3}}],[\"初始尺寸\",{\"1\":{\"592\":1}}],[\"初始设置\",{\"1\":{\"555\":3}}],[\"初始值为\",{\"1\":{\"1015\":2,\"1954\":1,\"1962\":1,\"1979\":1}}],[\"初始值\",{\"1\":{\"532\":1}}],[\"初始化了一个新的参数对象\",{\"1\":{\"2045\":1}}],[\"初始化slots\",{\"1\":{\"2001\":1}}],[\"初始化组件的配置项\",{\"1\":{\"1864\":1}}],[\"初始化子组件的\",{\"1\":{\"1840\":1}}],[\"初始化阶段操作的主要对象是vm\",{\"1\":{\"1836\":1}}],[\"初始化部分属性\",{\"1\":{\"1800\":1}}],[\"初始化props\",{\"1\":{\"1799\":1}}],[\"初始化injections\",{\"1\":{\"1799\":1}}],[\"初始化渲染\",{\"1\":{\"1799\":2}}],[\"初始化事件函数initevents实际上初始化的是\",{\"1\":{\"1802\":1}}],[\"初始化事件\",{\"0\":{\"1801\":1},\"1\":{\"1799\":2}}],[\"初始化生命周期\",{\"0\":{\"1800\":1},\"1\":{\"1799\":2}}],[\"初始化代理\",{\"1\":{\"1799\":1}}],[\"初始化代码===>回调代码\",{\"1\":{\"1178\":1}}],[\"初始化配置项\",{\"1\":{\"1799\":1}}],[\"初始化整体流程\",{\"0\":{\"1799\":1}}],[\"初始化权重\",{\"1\":{\"1680\":1}}],[\"初始化一个state对象\",{\"1\":{\"2016\":1}}],[\"初始化一个\",{\"1\":{\"1665\":1}}],[\"初始化请求参数\",{\"1\":{\"1575\":1}}],[\"初始化时执行\",{\"1\":{\"1467\":2}}],[\"初始化时让handler自调用一下\",{\"1\":{\"1378\":1}}],[\"初始化数据\",{\"1\":{\"1451\":1}}],[\"初始化数据state\",{\"1\":{\"1451\":1}}],[\"初始化操作\",{\"1\":{\"1410\":1}}],[\"初始化执行代码\",{\"1\":{\"1177\":1}}],[\"初始化或者\",{\"1\":{\"711\":1}}],[\"初始化10个桶\",{\"1\":{\"419\":1}}],[\"初始化桶的容器\",{\"1\":{\"418\":1}}],[\"初始化桶的数量\",{\"1\":{\"418\":1}}],[\"初始化参数\",{\"1\":{\"154\":1}}],[\"初始化工具包\",{\"1\":{\"91\":1}}],[\"初始化的过程中还有一些注意事项\",{\"1\":{\"64\":1}}],[\"初始化\",{\"0\":{\"64\":1,\"1803\":1,\"1804\":1,\"1844\":1,\"1852\":1},\"1\":{\"82\":1,\"87\":1,\"752\":1,\"780\":1,\"1357\":1,\"1576\":1,\"1799\":4,\"1803\":2,\"1804\":1,\"2001\":1,\"2050\":1}}],[\"初始化仓库\",{\"0\":{\"6\":1}}],[\"初体验\",{\"0\":{\"301\":1,\"325\":1}}],[\"显得过于臃肿和耦合\",{\"1\":{\"1977\":1}}],[\"显然不是\",{\"1\":{\"1147\":1}}],[\"显然这种方式不够完美\",{\"1\":{\"294\":1}}],[\"显式原型与隐式原型的关系\",{\"0\":{\"1008\":1}}],[\"显式原型属性\",{\"1\":{\"1007\":1}}],[\"显性转换往往会使用到一些转换方法\",{\"1\":{\"801\":1}}],[\"显性转换\",{\"1\":{\"801\":1}}],[\"显示当前动画的最终状态\",{\"1\":{\"1225\":2}}],[\"显示当前数据库中的所有集合\",{\"1\":{\"180\":1}}],[\"显示用户所做的操作\",{\"1\":{\"1160\":1}}],[\"显示的是\",{\"1\":{\"939\":1}}],[\"显示的类型却是\",{\"1\":{\"798\":1}}],[\"显示出如下效果\",{\"1\":{\"770\":1}}],[\"显示月\",{\"1\":{\"757\":1}}],[\"显示周\",{\"1\":{\"757\":1}}],[\"显示日期\",{\"1\":{\"757\":1}}],[\"显示时间\",{\"1\":{\"757\":1}}],[\"显示完整日期\",{\"1\":{\"757\":2}}],[\"显示或隐藏用户控制界面\",{\"1\":{\"748\":1}}],[\"显示或隐藏元素而不更改文档的布局\",{\"1\":{\"548\":1}}],[\"显示页面与设计图的一个对应关系\",{\"1\":{\"650\":1}}],[\"显示内容\",{\"1\":{\"648\":1}}],[\"显示器\",{\"1\":{\"534\":1}}],[\"显示所有的数据库\",{\"1\":{\"179\":1}}],[\"效果演示\",{\"1\":{\"1393\":1}}],[\"效果一致\",{\"1\":{\"1368\":1}}],[\"效果一样\",{\"1\":{\"666\":1,\"1145\":1}}],[\"效果和之前一样\",{\"1\":{\"1239\":1}}],[\"效果淡入或淡出\",{\"1\":{\"1223\":1}}],[\"效果就是从上往下或从下往上\",{\"1\":{\"1222\":1}}],[\"效果就是从小到大或从大到小\",{\"1\":{\"1221\":1}}],[\"效果类似\",{\"1\":{\"1211\":1}}],[\"效果如下\",{\"1\":{\"764\":1,\"772\":1,\"1162\":1}}],[\"效果图\",{\"1\":{\"696\":1,\"697\":2,\"725\":1,\"726\":1,\"727\":1,\"740\":1}}],[\"效果不一样\",{\"1\":{\"666\":1}}],[\"效果相同\",{\"1\":{\"557\":1}}],[\"效果\",{\"1\":{\"294\":1,\"402\":1,\"619\":1,\"772\":1,\"773\":1,\"1087\":3,\"1088\":2,\"1091\":1,\"1093\":1,\"1094\":1,\"1098\":1,\"1104\":1,\"1105\":2,\"1112\":3,\"1120\":1,\"1123\":2,\"1124\":1,\"1137\":1,\"1139\":1,\"1140\":1,\"1144\":1,\"1145\":1,\"1146\":1,\"1148\":1,\"1149\":1,\"1150\":6,\"1152\":1,\"1153\":2,\"1154\":4,\"1155\":2,\"1156\":2,\"1157\":3,\"1160\":1,\"1161\":3,\"1162\":1,\"1201\":2,\"1207\":2,\"1225\":5,\"1576\":1,\"1577\":1,\"1579\":1,\"1580\":1,\"1581\":1,\"1582\":1}}],[\"效率\",{\"1\":{\"1655\":1}}],[\"效率更高\",{\"1\":{\"1374\":1}}],[\"效率是非常低的\",{\"1\":{\"1137\":1}}],[\"效率高\",{\"1\":{\"456\":1}}],[\"效率低\",{\"1\":{\"456\":1}}],[\"效率一般\",{\"1\":{\"455\":1}}],[\"效率较好\",{\"1\":{\"245\":1}}],[\"效率较低\",{\"1\":{\"245\":1,\"390\":1}}],[\"效率问题\",{\"1\":{\"116\":1,\"1071\":1}}],[\"效率协作\",{\"0\":{\"97\":1},\"2\":{\"98\":1}}],[\"形容守旧不创新\",{\"1\":{\"1705\":1}}],[\"形容中华文化\",{\"1\":{\"1705\":1}}],[\"形象\",{\"1\":{\"1702\":1}}],[\"形参\",{\"1\":{\"941\":2}}],[\"形参n\",{\"1\":{\"930\":1}}],[\"形参2\",{\"1\":{\"930\":1}}],[\"形参1\",{\"1\":{\"930\":1}}],[\"形参可以书写解构表达式\",{\"1\":{\"833\":1}}],[\"形式也放入tokens中\",{\"1\":{\"1793\":1}}],[\"形式参数的个数\",{\"1\":{\"951\":1}}],[\"形式参数\",{\"1\":{\"941\":1,\"1015\":1}}],[\"形式参数简称形参\",{\"1\":{\"931\":1}}],[\"形式为\",{\"1\":{\"912\":1}}],[\"形式还是用$num\",{\"1\":{\"911\":1}}],[\"形式的生命周期钩子\",{\"1\":{\"1500\":1}}],[\"形式的\",{\"1\":{\"494\":1}}],[\"形式\",{\"1\":{\"291\":1,\"292\":1}}],[\"形成\",{\"1\":{\"1974\":1}}],[\"形成ast\",{\"1\":{\"1790\":1}}],[\"形成的jwt\",{\"1\":{\"368\":1}}],[\"形成一个完整的调用通道\",{\"1\":{\"1040\":1}}],[\"形成一个jwt\",{\"1\":{\"368\":1}}],[\"形成一个对象\",{\"1\":{\"50\":1}}],[\"形成了一个模块化方案\",{\"1\":{\"24\":1}}],[\"列不等式即可\",{\"1\":{\"1727\":1}}],[\"列出的单个任意字符\",{\"1\":{\"902\":1}}],[\"列出当前的关联的远程库\",{\"1\":{\"13\":1}}],[\"列的宽度\",{\"1\":{\"580\":1}}],[\"列的表格\",{\"1\":{\"287\":1}}],[\"列上的效果相当\",{\"1\":{\"548\":1}}],[\"列组和行组\",{\"1\":{\"548\":1}}],[\"列\",{\"1\":{\"548\":1}}],[\"列表如下\",{\"1\":{\"2064\":1}}],[\"列表视图\",{\"1\":{\"2049\":1}}],[\"列表里面对应的守卫回调删除掉\",{\"1\":{\"2043\":1}}],[\"列表里面\",{\"1\":{\"2043\":1}}],[\"列表进行扫\",{\"1\":{\"1974\":1}}],[\"列表构建\",{\"1\":{\"1974\":1}}],[\"列表构造\",{\"1\":{\"1974\":1}}],[\"列表排序\",{\"0\":{\"1395\":1}}],[\"列表过滤\",{\"0\":{\"1393\":1}}],[\"列表渲染\",{\"0\":{\"1391\":1}}],[\"列表的不可变性\",{\"0\":{\"1272\":1}}],[\"列表的数据项不需要具有相同的类型\",{\"1\":{\"390\":1}}],[\"列表是会发生改变\",{\"1\":{\"2049\":1}}],[\"列表是不可变的\",{\"1\":{\"1270\":1}}],[\"列表是最常用的\",{\"1\":{\"390\":1}}],[\"列表包含其他值的序列\",{\"1\":{\"1267\":1}}],[\"列表中的元素可以用逗号分隔\",{\"1\":{\"1267\":1}}],[\"列表中的某个具体页面\",{\"1\":{\"1097\":1}}],[\"列表中的下一个\",{\"1\":{\"1097\":1}}],[\"列表中的前一个\",{\"1\":{\"1097\":1}}],[\"列表中\",{\"1\":{\"1095\":1}}],[\"列表清空重置\",{\"1\":{\"711\":1}}],[\"列表标签\",{\"0\":{\"697\":1}}],[\"列表方式\",{\"1\":{\"402\":1}}],[\"列表推导式\",{\"1\":{\"401\":1}}],[\"列表\",{\"0\":{\"663\":1},\"1\":{\"381\":2,\"389\":1,\"391\":1,\"661\":1,\"765\":1,\"1974\":2,\"2043\":1,\"2064\":1}}],[\"列如\",{\"1\":{\"350\":1}}],[\"行测资料分析部分的除法一般可分为三类\",{\"1\":{\"1721\":1}}],[\"行测\",{\"2\":{\"1707\":1,\"1755\":1,\"1765\":1}}],[\"行文脉络\",{\"1\":{\"1702\":1}}],[\"行和头的部分不允许出现非\",{\"1\":{\"1639\":1}}],[\"行驶方向和速度等\",{\"1\":{\"1101\":1}}],[\"行开头结尾\",{\"1\":{\"915\":1}}],[\"行的结束位置\",{\"1\":{\"902\":1}}],[\"行的起始位置\",{\"1\":{\"902\":1}}],[\"行分隔符\",{\"1\":{\"902\":1,\"905\":1}}],[\"行为\",{\"1\":{\"656\":1}}],[\"行间距\",{\"1\":{\"621\":1}}],[\"行高可以省略不写\",{\"1\":{\"621\":1}}],[\"行高可以直接指定一个大小\",{\"1\":{\"621\":1}}],[\"行高会在字体框的上下平均分配\",{\"1\":{\"621\":1}}],[\"行高经常还用来设置文字的行间距\",{\"1\":{\"621\":1}}],[\"行高将会是字体大小的指定倍数\",{\"1\":{\"621\":1}}],[\"行高指的是文字占有的实际高度\",{\"1\":{\"621\":1}}],[\"行高\",{\"1\":{\"621\":3}}],[\"行内样式均会包含在\",{\"1\":{\"1526\":1}}],[\"行内引用\",{\"1\":{\"662\":1}}],[\"行内变成块\",{\"1\":{\"570\":1}}],[\"行内还是行内\",{\"1\":{\"569\":1}}],[\"行内块不适合作为外部的容器\",{\"1\":{\"564\":1}}],[\"行内块元素\",{\"1\":{\"564\":1}}],[\"行内元素的\",{\"1\":{\"540\":1}}],[\"行内元素在页面中自左向右水平排列\",{\"1\":{\"540\":1}}],[\"行级\",{\"1\":{\"552\":1}}],[\"行块盒或块盒内多行文本的垂直居中\",{\"0\":{\"602\":1}}],[\"行块盒的默认宽度和高度都是被内容撑开\",{\"1\":{\"540\":1}}],[\"行块盒\",{\"0\":{\"596\":1},\"1\":{\"540\":2,\"596\":1}}],[\"行盒只使用盒模型中定义的部分内容\",{\"1\":{\"542\":1}}],[\"行盒脱离文档流以后会变成块盒\",{\"1\":{\"541\":1}}],[\"行盒特点\",{\"1\":{\"540\":1}}],[\"行盒\",{\"0\":{\"596\":1},\"1\":{\"540\":2,\"541\":1}}],[\"行\",{\"1\":{\"287\":1,\"548\":1,\"1892\":1}}],[\"搭建\",{\"0\":{\"1450\":1},\"1\":{\"287\":1}}],[\"搭建一个中间层\",{\"1\":{\"218\":1}}],[\"建立一个将来返回数据的响应式对象\",{\"1\":{\"2020\":1}}],[\"建立响应联系\",{\"1\":{\"1929\":1,\"1930\":2}}],[\"建立响应式\",{\"0\":{\"1928\":1}}],[\"建立加密信道\",{\"1\":{\"1530\":1}}],[\"建立阶段的变量对象\",{\"1\":{\"1015\":2}}],[\"建立尽量使用\",{\"1\":{\"948\":1}}],[\"建立\",{\"1\":{\"861\":1}}],[\"建立服务\",{\"1\":{\"285\":1}}],[\"建议用方法调用或计算属性去替换过滤器\",{\"1\":{\"1519\":1}}],[\"建议先写\",{\"1\":{\"1309\":1}}],[\"建议创建变量只适用于感觉确有必要的情况下\",{\"1\":{\"1261\":1}}],[\"建议都加上代码块\",{\"1\":{\"818\":1}}],[\"建议要成对出现\",{\"1\":{\"701\":1}}],[\"建议的方式是通过ssl加密的传输\",{\"1\":{\"368\":1}}],[\"建议但不强制使用\",{\"1\":{\"366\":1}}],[\"建议使用混合宏来创建相同的代码块\",{\"1\":{\"1299\":1}}],[\"建议使用\",{\"1\":{\"259\":1,\"1313\":1}}],[\"建议选择\",{\"1\":{\"177\":1}}],[\"按住这些键点击一个链接会有特殊的行为\",{\"1\":{\"2065\":1}}],[\"按父组件层级依次向上找到provide\",{\"1\":{\"1803\":1}}],[\"按键\",{\"1\":{\"1370\":1}}],[\"按下修饰键的同时\",{\"1\":{\"1370\":1}}],[\"按下一个键\",{\"1\":{\"1154\":1}}],[\"按下一个按键或者移动鼠标时\",{\"1\":{\"1135\":1}}],[\"按下鼠标不同的键位显示出不同的数字\",{\"1\":{\"1153\":1}}],[\"按下键盘上的shift\",{\"1\":{\"1154\":1}}],[\"按下键盘上一个字符键\",{\"1\":{\"1149\":1}}],[\"按下键盘上任意键时触发\",{\"1\":{\"1149\":1}}],[\"按理说当\",{\"1\":{\"1023\":1}}],[\"按理渲染出的边框应该是\",{\"1\":{\"707\":1}}],[\"按代码执行顺序走\",{\"1\":{\"1015\":1}}],[\"按值访问\",{\"1\":{\"982\":1}}],[\"按钮时\",{\"1\":{\"1081\":1}}],[\"按钮\",{\"1\":{\"670\":1,\"756\":1}}],[\"按位右移\",{\"1\":{\"399\":1}}],[\"按位左移\",{\"1\":{\"399\":1}}],[\"按位异或\",{\"1\":{\"399\":1,\"816\":1}}],[\"按位非\",{\"1\":{\"399\":1}}],[\"按位或\",{\"1\":{\"399\":1,\"816\":1}}],[\"按位与\",{\"1\":{\"399\":1,\"816\":1}}],[\"按照通用思路思考\",{\"1\":{\"1969\":1}}],[\"按照上述\",{\"1\":{\"1779\":1}}],[\"按照类型分段\",{\"1\":{\"1740\":1}}],[\"按照时间分段\",{\"1\":{\"1740\":1}}],[\"按照整体情况求部分\",{\"1\":{\"1731\":1}}],[\"按照实际增长率求后期\",{\"1\":{\"1727\":1}}],[\"按照下面的流程进行\",{\"1\":{\"1541\":1}}],[\"按照写的先后顺序依次触发事件\",{\"1\":{\"1369\":1}}],[\"按照native修饰符将event分为\",{\"1\":{\"1368\":1}}],[\"按照如下顺序进行传播\",{\"1\":{\"1139\":1}}],[\"按照书写顺序排序\",{\"1\":{\"1054\":1}}],[\"按照指定位置和长度切分出另一个数组\",{\"1\":{\"995\":1}}],[\"按照字面量形式而非传入构造函数中的字符串模式返回\",{\"1\":{\"923\":1}}],[\"按照\",{\"1\":{\"716\":1,\"1125\":1,\"1560\":1}}],[\"按照顺序和次数取出数组的数据放入结果数组中\",{\"1\":{\"417\":1}}],[\"按照形参顺序\",{\"1\":{\"402\":1}}],[\"按照某种规则将一些对象存在缓存中\",{\"1\":{\"382\":1}}],[\"按照以下要求搭建\",{\"1\":{\"285\":1}}],[\"按设定好的规则回收该部分内存地址\",{\"1\":{\"382\":1}}],[\"按需加工消费数据\",{\"1\":{\"218\":1}}],[\"任何人都可以获得\",{\"1\":{\"2100\":1}}],[\"任何属性变化都会触发依赖这个对象的所有地方重新渲染\",{\"1\":{\"2035\":1}}],[\"任何不属于常规对象的都叫异质对象\",{\"1\":{\"1903\":1}}],[\"任何一方都可以主动发消息给对方\",{\"1\":{\"1648\":1}}],[\"任何一个数与\",{\"1\":{\"812\":1}}],[\"任何用空格或逗号分隔的表达式都可以算作一个列表\",{\"1\":{\"1267\":1}}],[\"任何数和\",{\"1\":{\"812\":1}}],[\"任何涉及\",{\"1\":{\"795\":1}}],[\"任何元素都能够拖放\",{\"1\":{\"762\":1}}],[\"任何资源都有自己的\",{\"1\":{\"693\":1}}],[\"任何\",{\"1\":{\"578\":1}}],[\"任务缓存队列\",{\"1\":{\"1954\":1}}],[\"任务失败时\",{\"1\":{\"1776\":1}}],[\"任务完成时\",{\"1\":{\"1776\":1}}],[\"任务一旦完成或失败\",{\"1\":{\"1776\":1}}],[\"任务总是从挂起状态变到完成或失败状态\",{\"1\":{\"1776\":1}}],[\"任务总是从未决阶段变到已决阶段\",{\"1\":{\"1776\":1}}],[\"任务没有优先级\",{\"1\":{\"1560\":1}}],[\"任务有优先级吗\",{\"0\":{\"1560\":1}}],[\"任务2\",{\"1\":{\"1189\":2}}],[\"任务1\",{\"1\":{\"1189\":2}}],[\"任务本身没有优先级\",{\"1\":{\"1181\":1}}],[\"任务存在优先级么\",{\"0\":{\"1181\":1}}],[\"任务\",{\"1\":{\"404\":1}}],[\"任务管理器查看进程\",{\"1\":{\"1168\":1}}],[\"任务管理器\",{\"1\":{\"275\":1}}],[\"任意组件间通信\",{\"1\":{\"1438\":1,\"1439\":1}}],[\"任意参数这个变量将会是一个特殊的列表\",{\"1\":{\"1273\":1}}],[\"任意数值\",{\"1\":{\"965\":1}}],[\"任意数组去重\",{\"1\":{\"456\":1}}],[\"任意字符串\",{\"1\":{\"965\":1}}],[\"任意字符\",{\"0\":{\"905\":1}}],[\"任意多实参\",{\"1\":{\"402\":1}}],[\"任意\",{\"1\":{\"237\":1}}],[\"任意类型\",{\"1\":{\"192\":1}}],[\"意识的聚集和专注使灵长类动物能够在复杂的视觉环境中将注意力引向感兴趣的物体\",{\"1\":{\"1678\":1}}],[\"意思是\",{\"1\":{\"1954\":1}}],[\"意思是不会出现全局变量\",{\"1\":{\"1240\":1}}],[\"意思就是说预先设置一些常用的语法配置\",{\"1\":{\"148\":1}}],[\"意味着打补丁\",{\"1\":{\"1944\":1}}],[\"意味着修改\",{\"1\":{\"1929\":1}}],[\"意味着新增\",{\"1\":{\"1929\":1}}],[\"意味着vue在编译模板的时候\",{\"1\":{\"1792\":1}}],[\"意味着\",{\"1\":{\"1792\":1}}],[\"意味着只要触发一次该事件\",{\"1\":{\"1216\":1}}],[\"意味着使用块布局\",{\"1\":{\"560\":1}}],[\"意味着该部分信息可以归类为明文信息\",{\"1\":{\"366\":1}}],[\"意为检索字符串中是否含有空白\",{\"1\":{\"890\":1}}],[\"意为响应\",{\"1\":{\"273\":1}}],[\"意为请求\",{\"1\":{\"273\":1}}],[\"单文件组件\",{\"0\":{\"1867\":1}}],[\"单文件组件的解析代码\",{\"1\":{\"1782\":1}}],[\"单一量\",{\"1\":{\"1753\":1}}],[\"单期比重之隔级比重\",{\"0\":{\"1733\":1}}],[\"单期比重之基期比重\",{\"0\":{\"1732\":1}}],[\"单期比重之现期比重\",{\"0\":{\"1731\":1}}],[\"单层\",{\"1\":{\"1433\":1}}],[\"单向数据绑定\",{\"1\":{\"1356\":1}}],[\"单向绑定解析表达式\",{\"1\":{\"1404\":1}}],[\"单向绑定\",{\"0\":{\"1355\":1}}],[\"单词内部的\",{\"1\":{\"916\":1}}],[\"单词边界\",{\"0\":{\"916\":1},\"1\":{\"915\":1,\"916\":1}}],[\"单个\",{\"1\":{\"1794\":1}}],[\"单个任意字符\",{\"1\":{\"902\":1}}],[\"单个形参和字典混合时\",{\"1\":{\"402\":1}}],[\"单像素操作\",{\"1\":{\"740\":1}}],[\"单选按钮\",{\"1\":{\"670\":1,\"756\":1}}],[\"单行注释不被保留在编译生成的\",{\"1\":{\"1325\":1}}],[\"单行模式和注释模式\",{\"1\":{\"921\":1}}],[\"单行文本的垂直居中\",{\"0\":{\"601\":1}}],[\"单行字符串\",{\"1\":{\"383\":1}}],[\"单\",{\"1\":{\"405\":1}}],[\"单引号的空字符串\",{\"1\":{\"796\":1}}],[\"单引号\",{\"1\":{\"384\":1}}],[\"单位坑\",{\"1\":{\"1752\":1}}],[\"单位面积产量等\",{\"1\":{\"1740\":1}}],[\"单位时间只能发射一颗子弹\",{\"1\":{\"1034\":1}}],[\"单位像素的大小是不同的\",{\"1\":{\"649\":1}}],[\"单位\",{\"1\":{\"621\":1}}],[\"单位是像素\",{\"1\":{\"737\":2}}],[\"单位是\",{\"1\":{\"368\":1,\"748\":2,\"1264\":1}}],[\"单位秒\",{\"1\":{\"345\":1}}],[\"单位为字节\",{\"1\":{\"271\":1}}],[\"单独定义id和options\",{\"1\":{\"2019\":1}}],[\"单独也有index\",{\"1\":{\"316\":1}}],[\"单独使用\",{\"1\":{\"286\":1}}],[\"单元格能\",{\"1\":{\"287\":1}}],[\"单线程\",{\"1\":{\"224\":2}}],[\"qs\",{\"1\":{\"2065\":1}}],[\"qwe\",{\"1\":{\"1120\":2}}],[\"qwe2\",{\"1\":{\"917\":1}}],[\"q2\",{\"1\":{\"903\":1}}],[\"qhf\",{\"1\":{\"685\":1}}],[\"qhf=\",{\"1\":{\"685\":1}}],[\"q\",{\"1\":{\"662\":1,\"727\":1,\"1797\":1}}],[\"quod\",{\"1\":{\"2101\":1}}],[\"quote\",{\"1\":{\"1265\":2}}],[\"quisquam\",{\"1\":{\"2101\":1}}],[\"quicksort\",{\"1\":{\"415\":3}}],[\"quad\",{\"1\":{\"1526\":2}}],[\"quadraticcurveto\",{\"1\":{\"718\":1}}],[\"quantifier\",{\"1\":{\"907\":1,\"908\":1}}],[\"queuejob\",{\"1\":{\"1954\":3,\"1997\":1,\"2002\":1}}],[\"queue\",{\"1\":{\"498\":4,\"1954\":5,\"2029\":8}}],[\"query`\",{\"1\":{\"2065\":1}}],[\"query=searchterm\",{\"1\":{\"2058\":9}}],[\"queryselector\",{\"1\":{\"681\":1,\"685\":2,\"713\":1,\"1112\":3,\"1559\":2,\"1872\":1,\"2054\":1,\"2058\":1}}],[\"queryselectorall\",{\"1\":{\"287\":2,\"445\":1,\"446\":1,\"447\":1,\"841\":1,\"1112\":3,\"1581\":1,\"1582\":1}}],[\"querystring\",{\"1\":{\"317\":1}}],[\"query\",{\"0\":{\"1459\":1},\"1\":{\"142\":3,\"143\":1,\"282\":1,\"284\":2,\"305\":1,\"494\":1,\"1459\":3,\"1460\":1,\"1462\":2,\"1626\":1,\"1639\":1,\"1678\":2,\"1805\":1,\"1806\":1,\"2028\":1,\"2040\":1,\"2044\":2,\"2065\":5}}],[\"qq截图20210911092353\",{\"1\":{\"405\":1}}],[\"qq截图20210909160129\",{\"1\":{\"403\":1}}],[\"qq截图20210909102202\",{\"1\":{\"402\":1}}],[\"qq\",{\"1\":{\"349\":1,\"355\":1,\"667\":1,\"1087\":1}}],[\"q=0\",{\"1\":{\"269\":1}}],[\"保证了消息传输的安全性\",{\"1\":{\"2100\":1}}],[\"保证用户点击浏览器本身的前进后退按钮的时候\",{\"1\":{\"2050\":1}}],[\"保证用户点击页面中的\",{\"1\":{\"2050\":1}}],[\"保证能够正确运行\",{\"1\":{\"2008\":1}}],[\"保证子节点全部被处理完毕\",{\"1\":{\"1978\":1}}],[\"保证\",{\"1\":{\"1697\":1,\"1698\":1,\"2074\":1}}],[\"保证代码运行的安全\",{\"1\":{\"956\":1,\"959\":1}}],[\"保温杯\",{\"1\":{\"1621\":1}}],[\"保留较小的概率\",{\"1\":{\"1664\":1}}],[\"保留字\",{\"1\":{\"958\":1}}],[\"保留空白\",{\"1\":{\"625\":1}}],[\"保持状态不变\",{\"1\":{\"1974\":1}}],[\"保持默认状态\",{\"1\":{\"683\":1}}],[\"保持连接\",{\"1\":{\"269\":1}}],[\"保险措施\",{\"1\":{\"621\":1}}],[\"保存的是所有\",{\"1\":{\"2016\":1}}],[\"保存的数据不能超过\",{\"1\":{\"356\":1}}],[\"保存模型参数\",{\"1\":{\"1673\":1}}],[\"保存和读取\",{\"0\":{\"1673\":1}}],[\"保存和读取模型参数\",{\"0\":{\"1672\":1}}],[\"保存具体的数据\",{\"1\":{\"1450\":1}}],[\"保存当前的副作用函数\",{\"1\":{\"1891\":1}}],[\"保存当前prom的索引\",{\"1\":{\"1778\":1}}],[\"保存当前\",{\"1\":{\"993\":1}}],[\"保存在客户端浏览器\",{\"1\":{\"767\":1}}],[\"保存在old中\",{\"1\":{\"487\":1}}],[\"保存\",{\"1\":{\"711\":1}}],[\"保存着当前的副作用函数\",{\"1\":{\"1888\":1}}],[\"保存着html根标签\",{\"1\":{\"1111\":1}}],[\"保存着打开它的原始窗口对象\",{\"1\":{\"1088\":1}}],[\"保存着\",{\"1\":{\"262\":1}}],[\"保存着依赖模块路径\",{\"1\":{\"155\":3}}],[\"保存程序日志\",{\"1\":{\"248\":1}}],[\"保存到名为\",{\"1\":{\"1673\":1}}],[\"保存到栈中的绘制状态有下面部分组成\",{\"1\":{\"711\":1}}],[\"保存到\",{\"1\":{\"243\":1,\"2069\":1}}],[\"保存依赖模块路径\",{\"1\":{\"155\":1}}],[\"保存对应模块的依赖对象和文件内容\",{\"1\":{\"155\":1}}],[\"头信息\",{\"1\":{\"1584\":1,\"1586\":1}}],[\"头部可以被伪造\",{\"1\":{\"2088\":1}}],[\"头部字段满足\",{\"1\":{\"1607\":1}}],[\"头部的值\",{\"1\":{\"1091\":1}}],[\"头部\",{\"1\":{\"669\":1,\"2088\":1}}],[\"头像\",{\"1\":{\"343\":1}}],[\"头值\",{\"1\":{\"269\":1,\"286\":1}}],[\"头名\",{\"1\":{\"269\":1,\"286\":1}}],[\"哈希计算\",{\"1\":{\"2101\":1}}],[\"哈希加密\",{\"1\":{\"2101\":1}}],[\"哈希算法\",{\"1\":{\"2101\":1}}],[\"哈希和散列加密算法的具体实现方式因算法不同而异\",{\"1\":{\"2101\":1}}],[\"哈希\",{\"0\":{\"2101\":1},\"1\":{\"268\":1}}],[\"向下一层\",{\"1\":{\"2068\":1}}],[\"向下移动\",{\"1\":{\"1088\":1}}],[\"向下移动50<\",{\"1\":{\"1088\":1}}],[\"向下移动50\",{\"1\":{\"1088\":1}}],[\"向外部返回一个方法\",{\"1\":{\"2043\":1}}],[\"向外部返回一个对象\",{\"1\":{\"2042\":1,\"2043\":1}}],[\"向外部返回的对象\",{\"1\":{\"2041\":1}}],[\"向集合中添加给定的值\",{\"1\":{\"1926\":1}}],[\"向组件注入自定义的行为\",{\"1\":{\"1826\":1}}],[\"向parsehtml中传入start|end|chars|comment四个钩子函数\",{\"1\":{\"1791\":1}}],[\"向其所在的节点中渲染仅文本内容\",{\"1\":{\"1404\":1}}],[\"向其所在的节点中渲染文本内容\",{\"1\":{\"1399\":1}}],[\"向指定节点中渲染包含\",{\"1\":{\"1400\":1,\"1404\":1}}],[\"向右移动\",{\"1\":{\"1224\":1}}],[\"向另一个线程发送数据\",{\"1\":{\"1182\":1}}],[\"向li中设置文本\",{\"1\":{\"1124\":1}}],[\"向文档新添加一个段落\",{\"1\":{\"1112\":1}}],[\"向前一个页面\",{\"1\":{\"1097\":1}}],[\"向前边插入元素以后\",{\"1\":{\"853\":1}}],[\"向网页引入\",{\"1\":{\"1077\":1}}],[\"向数组开头添加一个或多个元素\",{\"1\":{\"853\":1}}],[\"向\",{\"1\":{\"644\":4,\"765\":1,\"1279\":1}}],[\"向类的函数中传入对象\",{\"1\":{\"405\":1}}],[\"向客户端返回数据\",{\"1\":{\"266\":1}}],[\"向远程库推送代码\",{\"1\":{\"13\":1}}],[\"超分辨率等任务\",{\"1\":{\"1667\":1}}],[\"超时回调\",{\"1\":{\"1580\":1}}],[\"超时设置\",{\"1\":{\"1580\":2}}],[\"超时与网络异常\",{\"0\":{\"1580\":1}}],[\"超时调用\",{\"1\":{\"1088\":1}}],[\"超时都会失效\",{\"1\":{\"356\":1}}],[\"超过\",{\"1\":{\"760\":1}}],[\"超链接会跳转页面\",{\"1\":{\"1121\":1}}],[\"超链接使我们能够将我们的文档链接到任何其他文档\",{\"1\":{\"664\":1}}],[\"超链接\",{\"0\":{\"664\":1},\"1\":{\"662\":1}}],[\"超小屏幕\",{\"1\":{\"651\":1}}],[\"超文本传输协议名有\",{\"1\":{\"906\":1}}],[\"超文本传输协议\",{\"1\":{\"266\":1,\"1627\":1}}],[\"超级玛丽\",{\"1\":{\"1446\":1}}],[\"超级可靠\",{\"1\":{\"85\":1}}],[\"超级安全\",{\"1\":{\"85\":1}}],[\"拼接\",{\"1\":{\"1576\":1,\"2058\":1}}],[\"拼接后的字符串以返回值的方式返回\",{\"1\":{\"889\":1}}],[\"拼接文件路径\",{\"1\":{\"294\":1}}],[\"拼接绝对路径\",{\"1\":{\"264\":1}}],[\"拼接规范的绝对路径\",{\"1\":{\"264\":1}}],[\"获得子树\",{\"1\":{\"1954\":1}}],[\"获得\",{\"1\":{\"1678\":1}}],[\"获得该模板引用\",{\"1\":{\"1499\":1}}],[\"获得详细信息\",{\"1\":{\"752\":1}}],[\"获得一个包含画布场景像素数据的\",{\"1\":{\"736\":1}}],[\"获得事件循环对象\",{\"1\":{\"408\":1}}],[\"获得类实例中的某个属性\",{\"1\":{\"405\":1}}],[\"获得路径的扩展名\",{\"1\":{\"264\":1}}],[\"获取要渲染的组件\",{\"1\":{\"2070\":1}}],[\"获取从父级的\",{\"1\":{\"2068\":1}}],[\"获取从父级所注入的路由对象\",{\"1\":{\"2068\":1}}],[\"获取匹配路由数组中倒数第二个元素的原始路径\",{\"1\":{\"2065\":1}}],[\"获取新的哈希值\",{\"1\":{\"2049\":1}}],[\"获取新旧指令集合\",{\"1\":{\"1407\":1}}],[\"获取目前use的这个store\",{\"1\":{\"2019\":1}}],[\"获取当前路由\",{\"1\":{\"2065\":1}}],[\"获取当前store的指向\",{\"1\":{\"2021\":1}}],[\"获取当前组件实例\",{\"1\":{\"2019\":1}}],[\"获取当前栈顶节点作为父节点\",{\"1\":{\"1974\":1}}],[\"获取当前的路由位置\",{\"1\":{\"2047\":1}}],[\"获取当前的\",{\"1\":{\"1955\":1}}],[\"获取当前进制位上的数字\",{\"1\":{\"419\":1}}],[\"获取组件实例时\",{\"1\":{\"2002\":1}}],[\"获取组件实例\",{\"1\":{\"1955\":1}}],[\"获取组件要渲染的内容\",{\"1\":{\"1879\":1}}],[\"获取原始迭代器方法\",{\"1\":{\"1931\":1,\"1932\":2}}],[\"获取原始数据对象\",{\"1\":{\"1931\":1,\"1932\":2}}],[\"获取原始数据\",{\"1\":{\"1929\":2}}],[\"获取原始对象\",{\"1\":{\"1929\":1}}],[\"获取旧值\",{\"1\":{\"1929\":1}}],[\"获取数组元素时得到的值也是代理对象\",{\"1\":{\"1922\":1}}],[\"获取数据一般使用get\",{\"1\":{\"1632\":1}}],[\"获取数据\",{\"1\":{\"507\":1}}],[\"获取计算属性的值\",{\"1\":{\"1850\":1}}],[\"获取最长递增子序列的索引数组\",{\"1\":{\"1969\":1}}],[\"获取最新的prop数据\",{\"1\":{\"1841\":1}}],[\"获取最大数字有几位\",{\"1\":{\"419\":1}}],[\"获取传入子组件的值\",{\"1\":{\"1834\":1}}],[\"获取传递的参数数组\",{\"1\":{\"428\":1}}],[\"获取到对应的组件\",{\"1\":{\"2074\":1}}],[\"获取到整个\",{\"1\":{\"2047\":1}}],[\"获取到传入的选项参数中的name字段\",{\"1\":{\"1825\":1}}],[\"获取到的请求体数据\",{\"1\":{\"317\":1}}],[\"获取父节点\",{\"1\":{\"1789\":1}}],[\"获取模型的参数\",{\"1\":{\"1659\":1}}],[\"获取每个批次的输入数据和标签数据\",{\"1\":{\"1655\":1}}],[\"获取淘宝网站保存的localstorage的值\",{\"1\":{\"1595\":1}}],[\"获取聊天记录\",{\"1\":{\"1594\":1}}],[\"获取账号信息\",{\"1\":{\"1594\":1}}],[\"获取的时间戳每时每刻都不相同\",{\"1\":{\"1579\":1}}],[\"获取的是冒泡阶段的当前元素\",{\"1\":{\"1219\":1}}],[\"获取的是我点击的当前标签\",{\"1\":{\"1219\":1}}],[\"获取的是\",{\"1\":{\"649\":1}}],[\"获取button元素\",{\"1\":{\"1576\":1}}],[\"获取body标签\",{\"1\":{\"1111\":1}}],[\"获取布局属性时\",{\"1\":{\"1527\":1}}],[\"获取不到\",{\"1\":{\"1436\":1}}],[\"获取元素对象\",{\"1\":{\"1575\":1}}],[\"获取元素的父元素\",{\"1\":{\"1407\":1}}],[\"获取元素焦点\",{\"1\":{\"1407\":1}}],[\"获取元素节点的属性值\",{\"1\":{\"1125\":1}}],[\"获取元素节点的父节点和兄弟节点\",{\"1\":{\"1112\":1}}],[\"获取元素节点的子节点\",{\"1\":{\"1112\":1}}],[\"获取元素节点的方法\",{\"1\":{\"1112\":1}}],[\"获取样式\",{\"1\":{\"1206\":1}}],[\"获取时用了getcomputedstyle\",{\"1\":{\"1206\":1}}],[\"获取时间戳\",{\"1\":{\"874\":1}}],[\"获取复选框的选中状态\",{\"1\":{\"1205\":1}}],[\"获取设置标签之间文本的\",{\"1\":{\"1205\":1}}],[\"获取和设置标签之间内容的\",{\"1\":{\"1205\":1}}],[\"获取文本节点时\",{\"1\":{\"1114\":1}}],[\"获取该属性的值时调用\",{\"1\":{\"1059\":1}}],[\"获取该域名对应的\",{\"1\":{\"373\":1}}],[\"获取部分字符串\",{\"0\":{\"891\":1}}],[\"获取指定位置字符的字符编码\",{\"1\":{\"888\":1}}],[\"获取指定的请求头\",{\"1\":{\"305\":1}}],[\"获取马赛克块中任意一点的像素信息\",{\"1\":{\"740\":1}}],[\"获取方式\",{\"1\":{\"704\":1}}],[\"获取方式是兼容的\",{\"1\":{\"305\":1}}],[\"获取并修改自定义属性的值\",{\"1\":{\"685\":1}}],[\"获取绑定对象\",{\"1\":{\"428\":1}}],[\"获取全局变量a\",{\"1\":{\"402\":1}}],[\"获取cookie时使用req\",{\"1\":{\"350\":1}}],[\"获取cookie\",{\"1\":{\"350\":1}}],[\"获取昵称\",{\"1\":{\"343\":1}}],[\"获取单个歌曲\",{\"1\":{\"339\":1}}],[\"获取所有歌曲\",{\"1\":{\"339\":1}}],[\"获取路由参数\",{\"0\":{\"306\":1}}],[\"获取路径\",{\"1\":{\"305\":1}}],[\"获取路径基础名称\",{\"1\":{\"264\":1}}],[\"获取路径分隔符\",{\"1\":{\"264\":1}}],[\"获取路径的拓展名\",{\"1\":{\"264\":1}}],[\"获取路径的目录名\",{\"1\":{\"264\":2}}],[\"获取路径的文件名\",{\"1\":{\"264\":1}}],[\"获取查询字符串\",{\"1\":{\"305\":1}}],[\"获取报文的方式与原生\",{\"1\":{\"305\":1}}],[\"获取请求体数据\",{\"0\":{\"317\":1},\"1\":{\"317\":2}}],[\"获取请求参数\",{\"0\":{\"305\":1}}],[\"获取请求的路由规则\",{\"1\":{\"305\":1,\"307\":1}}],[\"获取请求的\",{\"1\":{\"282\":1}}],[\"获取请求的方法已经路径\",{\"1\":{\"294\":2}}],[\"获取请求的方法\",{\"1\":{\"282\":1}}],[\"获取操作系统的路径分隔符\",{\"1\":{\"264\":1}}],[\"获取\",{\"0\":{\"282\":1},\"1\":{\"155\":1,\"282\":2,\"355\":1,\"772\":2,\"1112\":1,\"1123\":2,\"1202\":2,\"1428\":1,\"1632\":1,\"1872\":1,\"1927\":1,\"2065\":2}}],[\"遍历后用\",{\"1\":{\"2045\":1}}],[\"遍历完成后\",{\"1\":{\"2031\":1}}],[\"遍历完旧的\",{\"1\":{\"1962\":1}}],[\"遍历旧的一组子节点中剩余未处理的节点\",{\"1\":{\"1969\":1}}],[\"遍历旧的一组子节点\",{\"1\":{\"1962\":1}}],[\"遍历为组件传递的\",{\"1\":{\"1954\":1}}],[\"遍历操作只与键值对的数量有关\",{\"1\":{\"1930\":1}}],[\"遍历参数\",{\"1\":{\"1925\":1,\"1993\":1}}],[\"遍历ast\",{\"1\":{\"1790\":2}}],[\"遍历ch\",{\"1\":{\"1789\":1}}],[\"遍历每个参数并返回对应的参数张量及名称\",{\"1\":{\"1669\":1}}],[\"遍历每个桶内存储的数字\",{\"1\":{\"418\":1}}],[\"遍历一个store里所有的属性\",{\"1\":{\"2020\":1}}],[\"遍历一个\",{\"1\":{\"1283\":1,\"1287\":1}}],[\"遍历列表\",{\"0\":{\"1269\":1}}],[\"遍历内部元素的时候\",{\"1\":{\"995\":1}}],[\"遍历集合\",{\"0\":{\"863\":1}}],[\"遍历\",{\"0\":{\"1278\":1,\"1288\":1,\"1289\":1},\"1\":{\"772\":2,\"1290\":3,\"1878\":1,\"1890\":1,\"1930\":1,\"1954\":1,\"1961\":1,\"1984\":1,\"2042\":1,\"2061\":1,\"2081\":1}}],[\"遍历数组的方式非常的多\",{\"1\":{\"846\":1}}],[\"遍历数组\",{\"0\":{\"822\":1,\"1919\":1,\"1920\":1,\"1921\":1},\"1\":{\"263\":1,\"1404\":1,\"1993\":1}}],[\"遍历所有的\",{\"1\":{\"155\":1}}],[\"绑定了两个事件\",{\"1\":{\"2060\":1}}],[\"绑定整个对象\",{\"1\":{\"2035\":1}}],[\"绑定新的事件处理函数\",{\"1\":{\"1949\":1}}],[\"绑定后返回\",{\"1\":{\"1927\":1}}],[\"绑定点击事件\",{\"1\":{\"1872\":1}}],[\"绑定才能够传入一个函数\",{\"1\":{\"1499\":1}}],[\"绑定自定义事件时\",{\"1\":{\"1437\":1}}],[\"绑定自定义事件\",{\"1\":{\"1410\":1,\"1437\":2}}],[\"绑定样式\",{\"0\":{\"1384\":1}}],[\"绑定成\",{\"1\":{\"995\":1}}],[\"绑定到全局对象\",{\"1\":{\"995\":1}}],[\"绑定到其他对象\",{\"1\":{\"995\":1}}],[\"绑定到某个对象\",{\"1\":{\"995\":1}}],[\"绑定事件监听\",{\"1\":{\"1404\":1}}],[\"绑定事件的时候\",{\"1\":{\"1368\":1}}],[\"绑定事件\",{\"0\":{\"1368\":1},\"1\":{\"772\":1,\"1353\":1,\"1368\":1,\"1576\":1,\"2029\":1}}],[\"绑定回调函数\",{\"1\":{\"408\":1}}],[\"绑定\",{\"1\":{\"283\":2,\"995\":3,\"1407\":1,\"2061\":1}}],[\"绑定data事件\",{\"1\":{\"263\":2}}],[\"绑定一个本地变量\",{\"1\":{\"1358\":1}}],[\"绑定一个\",{\"1\":{\"252\":1}}],[\"笑看风云3\",{\"1\":{\"263\":1}}],[\"笑看风云2\",{\"1\":{\"263\":1}}],[\"笑看风云\",{\"1\":{\"263\":3}}],[\"资源不存在\",{\"1\":{\"1635\":1}}],[\"资源已被临时重定向\",{\"1\":{\"1635\":1}}],[\"资源已被永久重定向\",{\"1\":{\"1635\":1}}],[\"资源app\",{\"1\":{\"1543\":1}}],[\"资源到底变了没有\",{\"1\":{\"1537\":1}}],[\"资源地址\",{\"1\":{\"747\":2}}],[\"资源分配的最小单位\",{\"1\":{\"407\":1}}],[\"资源\",{\"1\":{\"339\":1}}],[\"资源监视器\",{\"1\":{\"275\":1}}],[\"资源模块类型\",{\"1\":{\"142\":1}}],[\"资源模块\",{\"1\":{\"142\":2}}],[\"资料分析中\",{\"1\":{\"1740\":1}}],[\"资料分析笔记\",{\"0\":{\"1708\":1}}],[\"资料\",{\"1\":{\"263\":4}}],[\"资料文件夹下的\",{\"1\":{\"263\":1}}],[\"需被卸载的节点\",{\"1\":{\"1968\":1}}],[\"需被挂载的节点\",{\"1\":{\"1968\":1}}],[\"需记忆的常见小数\",{\"1\":{\"1717\":1}}],[\"需注意的是\",{\"1\":{\"1335\":1}}],[\"需重载两个方法\",{\"1\":{\"405\":1}}],[\"需求总结\",{\"0\":{\"2015\":1}}],[\"需求\",{\"1\":{\"263\":1}}],[\"需要完全匹配\",{\"1\":{\"2064\":1}}],[\"需要开发者自己来处理这个滚动恢复\",{\"1\":{\"2048\":1}}],[\"需要有这么一个\",{\"1\":{\"2047\":1}}],[\"需要依次执行的各种守卫函数\",{\"1\":{\"2029\":2}}],[\"需要根据一些条件动态添加路由\",{\"1\":{\"2028\":1}}],[\"需要修改\",{\"1\":{\"1977\":1}}],[\"需要进行的操作\",{\"1\":{\"1976\":1}}],[\"需要进行移动\",{\"1\":{\"1969\":1}}],[\"需要挂载它们\",{\"1\":{\"1966\":1}}],[\"需要挂载\",{\"1\":{\"1962\":1}}],[\"需要移动\",{\"1\":{\"1962\":1,\"1965\":2}}],[\"需要我们手动构造一个实例对象\",{\"1\":{\"1954\":1}}],[\"需要我们手写render函数\",{\"1\":{\"1874\":1}}],[\"需要封装normalizeclass和normalizestyle\",{\"1\":{\"1949\":1}}],[\"需要指出的是\",{\"1\":{\"1921\":1}}],[\"需要触发与\",{\"1\":{\"1906\":1,\"1990\":1}}],[\"需要知道哪些组件需要更新\",{\"1\":{\"1864\":1}}],[\"需要提取出这段文本\",{\"1\":{\"1792\":2}}],[\"需要越过合法但无效的信息\",{\"1\":{\"1791\":1}}],[\"需要计算\",{\"1\":{\"1737\":1,\"1896\":1}}],[\"需要特别注意的是\",{\"1\":{\"1722\":1}}],[\"需要调用\",{\"1\":{\"1662\":1,\"1929\":2}}],[\"需要继承它并实现其中的两个方法\",{\"1\":{\"1655\":1}}],[\"需要权衡\",{\"1\":{\"1647\":1}}],[\"需要明确告知客户端\",{\"1\":{\"1612\":1}}],[\"需要它处理的任务包括但不限于\",{\"1\":{\"1556\":1}}],[\"需要重写数组的查找方法\",{\"1\":{\"1922\":1}}],[\"需要重新计算布局树\",{\"1\":{\"1527\":1}}],[\"需要重复使用大段样式时混合宏就会变得很有意义\",{\"1\":{\"1291\":1}}],[\"需要写完整的路径\",{\"1\":{\"1460\":1}}],[\"需要的时候再去挂载\",{\"1\":{\"1457\":1}}],[\"需要手动挂载\",{\"1\":{\"2063\":1}}],[\"需要手动清除才会消失\",{\"1\":{\"1436\":1}}],[\"需要手动将\",{\"1\":{\"360\":1}}],[\"需要添加\",{\"1\":{\"1328\":1}}],[\"需要这样写\",{\"1\":{\"1208\":1}}],[\"需要设置子元素\",{\"1\":{\"1148\":1}}],[\"需要设置perspective\",{\"1\":{\"617\":1}}],[\"需要两个参数\",{\"1\":{\"1129\":1}}],[\"需要传入的布尔值为\",{\"1\":{\"1123\":1}}],[\"需要浏览器来作为宿主\",{\"1\":{\"1109\":1}}],[\"需要浏览器厂商的支持\",{\"1\":{\"37\":1}}],[\"需要创建多个类型确定的对象\",{\"1\":{\"1048\":1}}],[\"需要创建多个对象\",{\"1\":{\"1047\":1}}],[\"需要连续调用多个函数才能得到结果\",{\"1\":{\"1040\":1}}],[\"需要一种使副作用过期的手段\",{\"1\":{\"1897\":1}}],[\"需要一一去匹配尝试\",{\"1\":{\"1792\":1}}],[\"需要一个文本内容作为参数\",{\"1\":{\"1117\":1}}],[\"需要一个选择器的字符串作为参数\",{\"1\":{\"1112\":1}}],[\"需要一个字符串作为参数\",{\"1\":{\"894\":1}}],[\"需要一路监听\",{\"1\":{\"1034\":1}}],[\"需要说明一下的是\",{\"1\":{\"1084\":1}}],[\"需要说明一下的就是虽然\",{\"1\":{\"770\":1}}],[\"需要说明的是\",{\"1\":{\"929\":1}}],[\"需要注意一下这三个变量的类型\",{\"1\":{\"2061\":1}}],[\"需要注意一下的是\",{\"1\":{\"945\":1}}],[\"需要注意的一点是\",{\"1\":{\"1922\":1}}],[\"需要注意的是我们可以在数组的任意位置进行赋值\",{\"1\":{\"843\":1}}],[\"需要注意的是\",{\"1\":{\"770\":1,\"782\":1,\"792\":1,\"796\":1,\"806\":1,\"830\":2,\"842\":1,\"940\":1,\"1087\":1,\"1146\":1,\"1665\":1,\"1666\":1}}],[\"需要注意现在的浏览器一般都是会阻止弹窗的\",{\"1\":{\"1088\":1}}],[\"需要注意\",{\"1\":{\"1087\":1,\"1825\":1,\"2047\":1,\"2048\":1}}],[\"需要注意无论是字面量方式\",{\"1\":{\"901\":1}}],[\"需要注意数组里面的第一个元素是从下标\",{\"1\":{\"844\":1}}],[\"需要和字符串界限符区分开\",{\"1\":{\"789\":1}}],[\"需要选择合适的本地应用来打开或处理文件\",{\"1\":{\"664\":1}}],[\"需要通过background\",{\"1\":{\"636\":1}}],[\"需要通过构建功能将模块分类合并成一个文件\",{\"1\":{\"122\":1}}],[\"需要至少设置三个样式\",{\"1\":{\"544\":1}}],[\"需要将对应的组件实例从路由记录中删除掉\",{\"1\":{\"2070\":1}}],[\"需要将这种样式名修改为驼峰命名法\",{\"1\":{\"1127\":1}}],[\"需要将这三个区域加到一起计算\",{\"1\":{\"545\":1}}],[\"需要将\",{\"1\":{\"646\":1}}],[\"需要将所有选择器的优先级进行相加计算\",{\"1\":{\"524\":1}}],[\"需要将其转成列\",{\"1\":{\"402\":1}}],[\"需要反复把已排序元素逐步向后挪位\",{\"1\":{\"412\":1}}],[\"需要在回调前执行的函数\",{\"1\":{\"1784\":1}}],[\"需要在它外面包裹一个$\",{\"1\":{\"1199\":1}}],[\"需要在方法前加上self\",{\"1\":{\"405\":1}}],[\"需要在元素后面加一个逗号tup\",{\"1\":{\"391\":1}}],[\"需要前补空格\",{\"1\":{\"385\":1}}],[\"需要用\",{\"1\":{\"383\":1}}],[\"需要单独下载\",{\"1\":{\"377\":1}}],[\"需要把所有相关联的副作用函数取出并添加到\",{\"1\":{\"1918\":1,\"1993\":1}}],[\"需要把\",{\"1\":{\"360\":1,\"765\":1}}],[\"需要基于\",{\"1\":{\"350\":1}}],[\"需要为字符编码\",{\"1\":{\"345\":1}}],[\"需要响应文件中的内容\",{\"1\":{\"294\":3}}],[\"需要与当前页面\",{\"1\":{\"292\":1}}],[\"需要持久化保存数据\",{\"1\":{\"248\":1}}],[\"需要\",{\"1\":{\"198\":1,\"1419\":1,\"1492\":1}}],[\"需要使用ws\",{\"1\":{\"1649\":1}}],[\"需要使用驼峰命名法\",{\"1\":{\"1206\":1}}],[\"需要使用symbol\",{\"1\":{\"828\":1}}],[\"需要使用替代符号\",{\"1\":{\"205\":1}}],[\"需要使用\",{\"1\":{\"192\":3,\"378\":1,\"405\":1,\"1427\":1,\"1437\":1}}],[\"需要使用下面的语法\",{\"1\":{\"52\":1}}],[\"需要更新的部分\",{\"1\":{\"158\":1}}],[\"需要安装对应的插件\",{\"1\":{\"148\":1,\"1434\":1}}],[\"需要安装下面两个库\",{\"1\":{\"147\":1}}],[\"需要先把之前打好的包给删除掉\",{\"1\":{\"129\":1}}],[\"需要想要导入一个模块的默认导出\",{\"1\":{\"52\":1}}],[\"需要远程从服务器读取\",{\"1\":{\"37\":1}}],[\"练习\",{\"0\":{\"263\":1,\"285\":1,\"287\":1,\"1188\":1,\"1609\":1},\"1\":{\"883\":1}}],[\"状态值\",{\"1\":{\"2058\":1}}],[\"状态对象是存在\",{\"1\":{\"2061\":1}}],[\"状态对象的值赋值给\",{\"1\":{\"2058\":1}}],[\"状态对象的\",{\"1\":{\"2058\":1}}],[\"状态对象\",{\"1\":{\"2048\":1,\"2050\":1,\"2058\":1}}],[\"状态机当前处于结束标签名称状态\",{\"1\":{\"1974\":1}}],[\"状态机当前处于文本状态\",{\"1\":{\"1974\":1}}],[\"状态机当前处于标签结束状态\",{\"1\":{\"1974\":1}}],[\"状态机当前处于标签名称状态\",{\"1\":{\"1974\":1}}],[\"状态机当前处于标签开始状态\",{\"1\":{\"1974\":1}}],[\"状态机当前处于初始状态\",{\"1\":{\"1974\":1}}],[\"状态机切换到标签开始状态\",{\"1\":{\"1974\":1}}],[\"状态机的当前状态\",{\"1\":{\"1974\":1}}],[\"状态迁移过程\",{\"1\":{\"1974\":1}}],[\"状态穿透\",{\"1\":{\"1777\":2}}],[\"状态变更时执行对应的回调函数\",{\"1\":{\"1777\":1}}],[\"状态一经更改就不会再改变了\",{\"1\":{\"1777\":1}}],[\"状态就固定下来\",{\"1\":{\"1776\":1}}],[\"状态字符串\",{\"1\":{\"1575\":1}}],[\"状态码\",{\"1\":{\"1575\":1,\"1635\":1}}],[\"状态提升\",{\"1\":{\"1435\":1}}],[\"状态标签\",{\"0\":{\"696\":1}}],[\"状态的盒子推开\",{\"1\":{\"540\":2}}],[\"状态\",{\"1\":{\"260\":1,\"1806\":2}}],[\"移位\",{\"1\":{\"816\":1}}],[\"移除副作用函数\",{\"1\":{\"1984\":1}}],[\"移除操作\",{\"1\":{\"1966\":1}}],[\"移除上一次绑定的事件处理函数\",{\"1\":{\"1949\":1}}],[\"移除所有事件\",{\"1\":{\"1816\":1}}],[\"移除实例上的所有事件监听器\",{\"1\":{\"1807\":1}}],[\"移除实例内数据对其他数据的依赖\",{\"1\":{\"1807\":1}}],[\"移除过滤器\",{\"1\":{\"1519\":1}}],[\"移除v\",{\"1\":{\"1519\":1}}],[\"移除keycode\",{\"1\":{\"1519\":1}}],[\"移除一个元素节点的类\",{\"1\":{\"1125\":1}}],[\"移除map映射中的所有键值对\",{\"1\":{\"869\":1}}],[\"移除\",{\"1\":{\"259\":1,\"1388\":1,\"1428\":1,\"1480\":1,\"1518\":1}}],[\"移动剩下的节点从而完成最小的移动次数\",{\"1\":{\"1969\":1}}],[\"移动\",{\"1\":{\"1965\":1,\"1969\":1}}],[\"移动操作\",{\"1\":{\"1964\":1}}],[\"移动一个虚拟节点所对应的真实\",{\"1\":{\"1962\":1}}],[\"移动节点指的是\",{\"1\":{\"1962\":1}}],[\"移动解析游标\",{\"1\":{\"1792\":1}}],[\"移动位置处可以使用\",{\"1\":{\"1515\":1}}],[\"移动位置\",{\"1\":{\"1515\":1}}],[\"移动到什么位置以及需要进行挂载和删除的其他节点\",{\"1\":{\"1969\":1}}],[\"移动到真实\",{\"1\":{\"1964\":1}}],[\"移动到prevvnode\",{\"1\":{\"1962\":1}}],[\"移动到指定位置的技术\",{\"1\":{\"1515\":1}}],[\"移动到\",{\"1\":{\"1088\":1,\"1965\":1}}],[\"移动到100x100的位置\",{\"1\":{\"1088\":1}}],[\"移动端常用\",{\"0\":{\"1470\":1}}],[\"移动端浏览器支持\",{\"1\":{\"757\":1}}],[\"移动端适配\",{\"2\":{\"653\":1}}],[\"移动端单位\",{\"0\":{\"650\":1}}],[\"移动端的浏览器会自动对网页缩放以完整显示网页\",{\"1\":{\"649\":1}}],[\"移动端的网页都会将视口设置为\",{\"1\":{\"649\":1}}],[\"移动端开发\",{\"0\":{\"645\":1}}],[\"移动端对\",{\"1\":{\"350\":1}}],[\"移动完成\",{\"1\":{\"254\":1}}],[\"移动文件\",{\"1\":{\"8\":2}}],[\"制表符\",{\"1\":{\"2045\":1}}],[\"制定了非常繁杂的规则来限制各种跨域请求\",{\"1\":{\"1603\":1}}],[\"制作一个时钟\",{\"1\":{\"1088\":1}}],[\"制作\",{\"1\":{\"257\":1}}],[\"制约前端发展的两大问题得以解决\",{\"1\":{\"24\":1}}],[\"论证中的\",{\"1\":{\"1690\":1}}],[\"论语\",{\"1\":{\"254\":2,\"255\":1,\"258\":2}}],[\"论文公考\",{\"2\":{\"110\":1}}],[\"论文\",{\"0\":{\"109\":1}}],[\"播放暂停时触发\",{\"1\":{\"752\":1}}],[\"播放结束时触发\",{\"1\":{\"752\":1}}],[\"播放音乐\",{\"1\":{\"253\":1}}],[\"播放视频\",{\"1\":{\"253\":1}}],[\"返\",{\"1\":{\"250\":1,\"251\":1}}],[\"返回计算后的深度\",{\"1\":{\"2068\":1}}],[\"返回之前计算的\",{\"1\":{\"2065\":1}}],[\"返回匹配路由数组中倒数第二个元素\",{\"1\":{\"2065\":1}}],[\"返回一些操作数据的方法\",{\"1\":{\"2028\":1}}],[\"返回一个标准的\",{\"1\":{\"2058\":1}}],[\"返回一个字符串\",{\"1\":{\"2058\":1}}],[\"返回一个包含state\",{\"1\":{\"2020\":1}}],[\"返回一个会在退出节点时执行的回调函数\",{\"1\":{\"1977\":1}}],[\"返回一个迭代器对象\",{\"1\":{\"1926\":5}}],[\"返回一个promise\",{\"1\":{\"1822\":1}}],[\"返回一个新的promise\",{\"1\":{\"1777\":1}}],[\"返回一个新函数\",{\"1\":{\"995\":1}}],[\"返回一个生成器\",{\"1\":{\"1669\":1}}],[\"返回一个代理对象\",{\"1\":{\"1488\":1}}],[\"返回一个对象\",{\"1\":{\"1129\":1,\"1486\":1,\"1488\":1,\"1953\":2}}],[\"返回一个对象的函数===>工厂函数\",{\"1\":{\"1047\":1}}],[\"返回一个二维数组\",{\"1\":{\"1061\":1}}],[\"返回一个数组\",{\"1\":{\"1061\":2}}],[\"返回一个给定对象自身可枚举属性的键值对数组\",{\"1\":{\"1058\":1}}],[\"返回一个接收剩余参数的函数\",{\"1\":{\"1039\":1}}],[\"返回一个函数\",{\"1\":{\"1033\":1,\"1486\":1,\"1953\":1}}],[\"返回一个符合\",{\"1\":{\"877\":1}}],[\"返回一个正数\",{\"1\":{\"855\":1}}],[\"返回一个正运行线程的\",{\"1\":{\"408\":1}}],[\"返回一个负数\",{\"1\":{\"855\":1}}],[\"返回一个\",{\"1\":{\"494\":1,\"1093\":5,\"1105\":1,\"1392\":1,\"2015\":2}}],[\"返回一个空文档\",{\"1\":{\"339\":1}}],[\"返回函数\",{\"1\":{\"2018\":1}}],[\"返回app\",{\"1\":{\"1998\":1}}],[\"返回副作用函数effectfn\",{\"1\":{\"1986\":1}}],[\"返回自定义的迭代器\",{\"1\":{\"1931\":1}}],[\"返回操作结果\",{\"1\":{\"1928\":1}}],[\"返回定义在\",{\"1\":{\"1928\":1}}],[\"返回集合中元素的数量\",{\"1\":{\"1926\":1}}],[\"返回最终结果\",{\"1\":{\"1923\":1,\"1924\":1,\"1993\":1}}],[\"返回属性值\",{\"1\":{\"1886\":1,\"1889\":2}}],[\"返回watcher的卸载函数\",{\"1\":{\"1810\":1}}],[\"返回处理结果\",{\"1\":{\"1769\":1}}],[\"返回标准化后的\",{\"1\":{\"1665\":1}}],[\"返回由最大值组成的张量的位置的指标\",{\"1\":{\"1663\":1}}],[\"返回由客户机发送服务器的\",{\"1\":{\"1091\":1}}],[\"返回键名对应的值\",{\"1\":{\"1436\":1}}],[\"返回事件发生时鼠标指针相对于事件源的垂直坐标\",{\"1\":{\"1153\":2}}],[\"返回事件发生时鼠标指针相对于事件源的水平坐标\",{\"1\":{\"1153\":2}}],[\"返回事件发生时鼠标指针相对于电脑屏幕左上角的垂直坐标\",{\"1\":{\"1153\":1}}],[\"返回事件发生时鼠标指针相对于电脑屏幕左上角的水平坐标\",{\"1\":{\"1153\":1}}],[\"返回当事件被触发时⿏标指针相对于浏览器页面\",{\"1\":{\"1153\":1}}],[\"返回当事件被触发时鼠标指针相对于浏览器页面\",{\"1\":{\"1153\":1}}],[\"返回当前节点的后一个兄弟节点\",{\"1\":{\"1112\":1}}],[\"返回当前节点的前一个兄弟节点\",{\"1\":{\"1112\":1}}],[\"返回当前节点的父节点\",{\"1\":{\"1112\":1}}],[\"返回当前浏览器的语言\",{\"1\":{\"1091\":1}}],[\"返回布尔值\",{\"1\":{\"1132\":1}}],[\"返回指定属性节点\",{\"1\":{\"1113\":1}}],[\"返回指定标签名的所有子元素集合\",{\"1\":{\"1112\":1}}],[\"返回指明系统是否处于脱机模式的布尔值\",{\"1\":{\"1091\":1}}],[\"返回指明浏览器中是否启动\",{\"1\":{\"1091\":1}}],[\"返回元素的最后一个子节点\",{\"1\":{\"1112\":1}}],[\"返回元素的第一个子节点\",{\"1\":{\"1112\":1}}],[\"返回元素的子元素的集合\",{\"1\":{\"1112\":1}}],[\"返回元素的一个子节点的数组\",{\"1\":{\"1112\":1}}],[\"返回带有指定标签名的对象集合\",{\"1\":{\"1112\":1}}],[\"返回带有指定名称的对象集合\",{\"1\":{\"1112\":1}}],[\"返回对拥有指定\",{\"1\":{\"1112\":1}}],[\"返回对应位置的成员\",{\"1\":{\"856\":1}}],[\"返回文档中所有指定类名的元素集合\",{\"1\":{\"1112\":2}}],[\"返回位置信息被记录的时间\",{\"1\":{\"1102\":1}}],[\"返回设备正在移动的方向\",{\"1\":{\"1102\":1}}],[\"返回设备的海拔估算值\",{\"1\":{\"1102\":1}}],[\"返回设备的地面速度\",{\"1\":{\"1102\":1}}],[\"返回坐标的格式为十进制格式\",{\"1\":{\"1101\":1}}],[\"返回完整的\",{\"1\":{\"1093\":1}}],[\"返回运行浏览器的操作系统平台\",{\"1\":{\"1091\":1}}],[\"返回浏览器历史列表中\",{\"1\":{\"1096\":1}}],[\"返回浏览器系统的\",{\"1\":{\"1091\":1}}],[\"返回浏览器名称\",{\"1\":{\"1091\":1}}],[\"返回浏览器的平台和版本信息\",{\"1\":{\"1091\":1}}],[\"返回浏览器的次级版本\",{\"1\":{\"1091\":1}}],[\"返回浏览器的代码名\",{\"1\":{\"1091\":1}}],[\"返回浏览器相对于屏幕窗口的\",{\"1\":{\"1087\":4}}],[\"返回窗口的文档显示区的高度\",{\"1\":{\"1087\":1}}],[\"返回窗口的文档显示区的宽度\",{\"1\":{\"1087\":3}}],[\"返回调整后的日期的内部毫秒数\",{\"1\":{\"877\":1}}],[\"返回毫秒值\",{\"1\":{\"877\":1}}],[\"返回秒值\",{\"1\":{\"877\":1}}],[\"返回分钟值\",{\"1\":{\"877\":1}}],[\"返回小时值\",{\"1\":{\"877\":1}}],[\"返回星期几\",{\"1\":{\"877\":1}}],[\"返回第几天\",{\"1\":{\"877\":1}}],[\"返回月份\",{\"1\":{\"877\":1}}],[\"返回年份\",{\"1\":{\"877\":1}}],[\"返回格林威治时间和本地时间之间的时差\",{\"1\":{\"877\":1}}],[\"返回距离\",{\"1\":{\"877\":2}}],[\"返回从\",{\"1\":{\"875\":1}}],[\"返回从指定的起始位置到数组末尾的所有项目\",{\"1\":{\"854\":1}}],[\"返回undefined\",{\"1\":{\"856\":1,\"1009\":1,\"1769\":1}}],[\"返回类型\",{\"1\":{\"816\":1}}],[\"返回的值是一个字符串类型\",{\"1\":{\"2058\":1}}],[\"返回的值\",{\"1\":{\"2047\":1}}],[\"返回的函数创建的\",{\"1\":{\"2016\":1}}],[\"返回的数据以及定义的方法计算属性\",{\"1\":{\"1956\":1}}],[\"返回的数据\",{\"1\":{\"1954\":1}}],[\"返回的数组包含两个额外的属性\",{\"1\":{\"925\":1}}],[\"返回的数组中\",{\"1\":{\"911\":1}}],[\"返回的这个对象会传递给\",{\"1\":{\"1938\":1}}],[\"返回的对象会包含\",{\"1\":{\"2057\":1}}],[\"返回的对象可以直接用于渲染函数和计算属性内\",{\"1\":{\"1827\":1}}],[\"返回的对象被全局变量\",{\"1\":{\"1028\":1}}],[\"返回的结果样例\",{\"1\":{\"1671\":1}}],[\"返回的输出张量output具有相同的形状\",{\"1\":{\"1665\":1}}],[\"返回的为\",{\"1\":{\"1112\":2}}],[\"返回的\",{\"1\":{\"1093\":1,\"2016\":1}}],[\"返回的是字符串形式的参数\",{\"1\":{\"1231\":1}}],[\"返回的是一个对象\",{\"1\":{\"2052\":1}}],[\"返回的是一个\",{\"1\":{\"1207\":1}}],[\"返回的是一个数组\",{\"1\":{\"947\":1}}],[\"返回的是\",{\"1\":{\"980\":1,\"1231\":1}}],[\"返回的是类型的字符串表达\",{\"1\":{\"967\":1}}],[\"返回的是object\",{\"1\":{\"922\":1}}],[\"返回的是目标模块中\",{\"1\":{\"237\":1}}],[\"返回的类型都为\",{\"1\":{\"901\":1}}],[\"返回的都是一个全新的vuecomponent\",{\"1\":{\"1423\":1}}],[\"返回的都是\",{\"1\":{\"812\":1}}],[\"返回错误代码\",{\"1\":{\"750\":1}}],[\"返回正在运行的线程数量\",{\"1\":{\"408\":1}}],[\"返回商和余数\",{\"1\":{\"395\":1}}],[\"返回结果是promise\",{\"1\":{\"1777\":1}}],[\"返回结果为\",{\"1\":{\"995\":2}}],[\"返回结果\",{\"1\":{\"368\":1}}],[\"返回单个歌曲信息\",{\"1\":{\"339\":1}}],[\"返回歌曲列表数组\",{\"1\":{\"339\":1}}],[\"返回更新后的歌曲信息\",{\"1\":{\"339\":2}}],[\"返回新生成的歌曲信息\",{\"1\":{\"339\":1}}],[\"返回值是一个对象\",{\"1\":{\"2041\":1}}],[\"返回值是经过排序之后的数组\",{\"1\":{\"855\":1}}],[\"返回值除了值外\",{\"1\":{\"1670\":1}}],[\"返回值越低\",{\"1\":{\"1102\":1}}],[\"返回值可以是任意的数据类型\",{\"1\":{\"935\":1}}],[\"返回值为字符串重复指定次数后的新字符串\",{\"1\":{\"889\":1}}],[\"返回值\",{\"1\":{\"244\":1,\"245\":1,\"246\":1,\"247\":1,\"252\":1,\"1486\":1}}],[\"返回\",{\"1\":{\"239\":2,\"339\":1,\"761\":1,\"810\":8,\"855\":1,\"877\":3,\"884\":12,\"1091\":2,\"1093\":1,\"1098\":12,\"1156\":3,\"1161\":2,\"1264\":1,\"1274\":1,\"1886\":1,\"1912\":1,\"1926\":1,\"1974\":2,\"2015\":1,\"2047\":1,\"2053\":1,\"2058\":1}}],[\"返回false表示未通过验证\",{\"1\":{\"198\":1}}],[\"返回true表示通过验证\",{\"1\":{\"198\":1}}],[\"返回转换后的结果\",{\"1\":{\"156\":1}}],[\"返回module\",{\"1\":{\"37\":1}}],[\"应放到content\",{\"1\":{\"1570\":1}}],[\"应该如下所示\",{\"1\":{\"1975\":1}}],[\"应该保存结束标签名称token\",{\"1\":{\"1974\":1}}],[\"应该保存整个表达式匹配文本的regexp\",{\"1\":{\"925\":1}}],[\"应该保存整个表达式匹配文本的\",{\"1\":{\"924\":1}}],[\"应该将其挂载\",{\"1\":{\"1969\":1}}],[\"应该将新的列表赋值给这个变量\",{\"1\":{\"1272\":1}}],[\"应该不会出什么问题\",{\"1\":{\"1925\":1,\"1993\":1}}],[\"应该取出并执行那些与\",{\"1\":{\"1917\":1,\"1993\":1}}],[\"应该在\",{\"1\":{\"1914\":1,\"2069\":1}}],[\"应该使用computed\",{\"1\":{\"1857\":1}}],[\"应该怎么处理\",{\"1\":{\"1644\":1}}],[\"应该只在绝对需要时才使用组件引用\",{\"1\":{\"1499\":1}}],[\"应该都可以算作子组件的相关属性和函数\",{\"1\":{\"1493\":1}}],[\"应该通知用户并且停止运行\",{\"1\":{\"1252\":1}}],[\"应该有一个弹出框<\",{\"1\":{\"1150\":2}}],[\"应该设置为data\",{\"1\":{\"1125\":1}}],[\"应该是我们自己在编程的时候\",{\"1\":{\"1485\":1}}],[\"应该是对象\",{\"1\":{\"995\":1}}],[\"应该是直接书写\",{\"1\":{\"830\":1}}],[\"应该提供的参数没有提供\",{\"1\":{\"980\":1}}],[\"应该尽量避免选择分支中存在重复匹配\",{\"1\":{\"914\":1}}],[\"应该写为\",{\"1\":{\"910\":1}}],[\"应该想到\",{\"1\":{\"248\":1}}],[\"应\",{\"1\":{\"681\":1}}],[\"应对新的需求对功能进行拓展\",{\"1\":{\"405\":1}}],[\"应用的卸载方法\",{\"1\":{\"2047\":1}}],[\"应用进行卸载的时候\",{\"1\":{\"2047\":1}}],[\"应用可以都挂载\",{\"1\":{\"2047\":1}}],[\"应用对应一个\",{\"1\":{\"2047\":1}}],[\"应用里面\",{\"1\":{\"2047\":1}}],[\"应用层协议\",{\"0\":{\"1625\":1}}],[\"应用部署上线时需要后端人员支持\",{\"1\":{\"1468\":1}}],[\"应用插件\",{\"1\":{\"1456\":1}}],[\"应用vuex插件\",{\"1\":{\"1450\":1}}],[\"应用中如何扩展插件\",{\"1\":{\"2047\":1}}],[\"应用中多个组件的共享状态进行集中式的管理\",{\"1\":{\"1448\":1}}],[\"应用中间件\",{\"1\":{\"313\":1}}],[\"应用混合的组件内\",{\"1\":{\"1431\":1}}],[\"应用在组件标签上是组件实例对象\",{\"1\":{\"1428\":1}}],[\"应用描述文件\",{\"1\":{\"1427\":1}}],[\"应用包配置文件\",{\"1\":{\"1427\":1}}],[\"应用级操作\",{\"1\":{\"404\":1}}],[\"应用\",{\"0\":{\"1246\":1},\"1\":{\"298\":1,\"1502\":1,\"2047\":2}}],[\"应用开发框架\",{\"1\":{\"298\":1}}],[\"应用由模块组成\",{\"1\":{\"241\":1}}],[\"应用流行之后\",{\"1\":{\"219\":1}}],[\"应用场景\",{\"0\":{\"183\":1},\"1\":{\"1035\":1,\"1036\":1,\"1505\":1,\"1506\":1}}],[\"应用程序上执行非本意的操作的攻击方法\",{\"1\":{\"2087\":1}}],[\"应用程序中异步向服务器发送请求\",{\"1\":{\"1572\":1}}],[\"应用程序中共享位置信息\",{\"1\":{\"1099\":1}}],[\"应用程序会记录已跑过的距离\",{\"1\":{\"1100\":1}}],[\"应用程序就可以提供相关信息\",{\"1\":{\"1100\":1}}],[\"应用程序的模块打包器\",{\"1\":{\"122\":1}}],[\"应用程序\",{\"1\":{\"73\":1,\"172\":1,\"1100\":1}}],[\"应用主入口\",{\"0\":{\"42\":1}}],[\"应用到各种其他的终端设备\",{\"1\":{\"25\":1}}],[\"问号\",{\"1\":{\"902\":1}}],[\"问渠那得清如许\",{\"1\":{\"247\":1}}],[\"问题就出在这里\",{\"1\":{\"1925\":1}}],[\"问题是这两个代理对象是不同的\",{\"1\":{\"1923\":1}}],[\"问题演示\",{\"1\":{\"1910\":1}}],[\"问题出现在\",{\"1\":{\"1890\":1}}],[\"问题又抛给了服务器\",{\"1\":{\"1537\":1}}],[\"问题很大\",{\"1\":{\"219\":1}}],[\"问题\",{\"1\":{\"24\":1,\"27\":1,\"28\":1,\"29\":1,\"31\":1,\"116\":1,\"580\":1,\"1047\":1,\"1048\":1,\"1182\":1,\"1313\":1,\"1599\":1,\"1723\":1,\"1888\":1,\"1889\":1,\"1890\":1,\"1891\":1,\"1892\":1,\"1893\":1,\"1894\":1,\"1895\":1,\"1896\":1,\"1962\":1}}],[\"座右铭\",{\"1\":{\"244\":2,\"245\":1,\"246\":2,\"250\":2,\"251\":2,\"254\":1,\"261\":5}}],[\"异源\",{\"1\":{\"1599\":1}}],[\"异源资源限制\",{\"1\":{\"1599\":1}}],[\"异常的处理\",{\"1\":{\"403\":1}}],[\"异常类型\",{\"1\":{\"403\":1}}],[\"异常定义\",{\"1\":{\"403\":1}}],[\"异常处理\",{\"1\":{\"403\":1,\"1575\":1}}],[\"异常处理方面\",{\"1\":{\"242\":1}}],[\"异常\",{\"1\":{\"403\":1}}],[\"异步组件的解析\",{\"1\":{\"2029\":1}}],[\"异步锁是为了每次事件循环中只执行一次flushcallbacks来清空回调队列\",{\"1\":{\"1822\":1}}],[\"异步占位节点\",{\"1\":{\"1789\":1}}],[\"异步引入组件\",{\"1\":{\"1516\":1}}],[\"异步执行\",{\"1\":{\"1178\":1}}],[\"异步获取状态\",{\"1\":{\"260\":1}}],[\"异步递归删除文件夹\",{\"1\":{\"259\":1}}],[\"异步删除文件夹\",{\"1\":{\"259\":1}}],[\"异步创建文件夹\",{\"1\":{\"257\":1}}],[\"异步读取\",{\"0\":{\"250\":1},\"1\":{\"249\":1,\"258\":1}}],[\"异步处理\",{\"1\":{\"245\":1}}],[\"异步写入\",{\"0\":{\"244\":1},\"1\":{\"243\":1}}],[\"异步可以通过回调函数的第一个参数\",{\"1\":{\"242\":1}}],[\"异步调用会将\",{\"1\":{\"242\":1}}],[\"异步则不会\",{\"1\":{\"242\":1}}],[\"异步进行内容的获取\",{\"1\":{\"219\":1}}],[\"异步\",{\"1\":{\"37\":1,\"224\":1}}],[\"同基期比重\",{\"1\":{\"1746\":1}}],[\"同比还是环比\",{\"1\":{\"1752\":1}}],[\"同比是以上年同期为基期相比较\",{\"1\":{\"1725\":1}}],[\"同比增长\",{\"1\":{\"1723\":2}}],[\"同中心理解\",{\"1\":{\"1696\":1,\"1701\":1}}],[\"同源和异源\",{\"0\":{\"1600\":1}}],[\"同源资源放行\",{\"1\":{\"1599\":1}}],[\"同源策略\",{\"2\":{\"1618\":1}}],[\"同源策略都有不同的限制\",{\"1\":{\"1601\":1}}],[\"同源策略对\",{\"1\":{\"1599\":1}}],[\"同源策略就会对这个通信做出不同程度的限制\",{\"1\":{\"1599\":1}}],[\"同源策略是一套浏览器安全机制\",{\"1\":{\"1599\":1}}],[\"同源策略及跨域问题\",{\"0\":{\"1599\":1}}],[\"同类型的任务必须在同一个队列\",{\"1\":{\"1560\":1}}],[\"同名\",{\"1\":{\"1499\":1}}],[\"同\",{\"1\":{\"877\":1}}],[\"同理\",{\"1\":{\"706\":1}}],[\"同上面\",{\"1\":{\"623\":2}}],[\"同一文件多次被\",{\"1\":{\"1313\":1}}],[\"同一个构造函数不同的组件实例之间computed属性是不会变的\",{\"1\":{\"1845\":1}}],[\"同一个类型的任务必须在一个队列\",{\"1\":{\"1560\":1}}],[\"同一个类型的任务必须在同一队列\",{\"1\":{\"1181\":1}}],[\"同一个值又被赋值给另一个变量\",{\"1\":{\"1031\":1}}],[\"同一个堆叠上下文中元素在\",{\"0\":{\"578\":1}}],[\"同一块作用域中不允许重复声明\",{\"1\":{\"988\":1}}],[\"同一作用域中允许重复声明\",{\"1\":{\"987\":1}}],[\"同一字典\",{\"1\":{\"393\":1}}],[\"同样会再建立与\",{\"1\":{\"1925\":1}}],[\"同样新建一个\",{\"1\":{\"1889\":1}}],[\"同样依赖于常用小数的记忆\",{\"1\":{\"1722\":1}}],[\"同样要写\",{\"1\":{\"1353\":1}}],[\"同样也会渲染对应的组件\",{\"1\":{\"2033\":1}}],[\"同样也会触发事件\",{\"1\":{\"1158\":1}}],[\"同样也是处理\",{\"1\":{\"1358\":1}}],[\"同样也具有has\",{\"1\":{\"872\":1}}],[\"同样的\",{\"1\":{\"1154\":1,\"1914\":1}}],[\"同样的代码\",{\"1\":{\"956\":1}}],[\"同样的处理函数\",{\"1\":{\"408\":1}}],[\"同样需要注意的是\",{\"1\":{\"918\":1}}],[\"同样是限定\",{\"1\":{\"913\":1}}],[\"同样是作用于两到多个值\",{\"1\":{\"809\":1}}],[\"同样返回给定日期的毫秒数\",{\"1\":{\"875\":1}}],[\"同样可以指定开始查找的位置\",{\"1\":{\"890\":1}}],[\"同样可以解构嵌套的对象\",{\"1\":{\"832\":1}}],[\"同样可以使用这种方式解决\",{\"1\":{\"566\":1}}],[\"同样\",{\"1\":{\"825\":1}}],[\"同样在网页中也可以使用表单\",{\"1\":{\"670\":1}}],[\"同样在网页中我们也需要使用表格\",{\"1\":{\"669\":1}}],[\"同样当项目由多条轴线时\",{\"1\":{\"590\":1}}],[\"同于访问被包装类的属性\",{\"1\":{\"405\":1}}],[\"同作用域下默认参数被覆盖问题\",{\"1\":{\"402\":1}}],[\"同步思想\",{\"1\":{\"708\":1}}],[\"同步获取状态\",{\"1\":{\"260\":1}}],[\"同步递归删除文件夹\",{\"1\":{\"259\":1}}],[\"同步\",{\"1\":{\"255\":1}}],[\"同步读取\",{\"0\":{\"251\":1},\"1\":{\"249\":1,\"258\":1}}],[\"同步处理\",{\"1\":{\"245\":1}}],[\"同步写入\",{\"0\":{\"245\":1},\"1\":{\"243\":1}}],[\"同步必须使用\",{\"1\":{\"242\":1}}],[\"同步调用会阻塞代码的执行\",{\"1\":{\"242\":1}}],[\"同时需要配合\",{\"1\":{\"2088\":1}}],[\"同时支持\",{\"1\":{\"2063\":1}}],[\"同时消费当前字符\",{\"1\":{\"1974\":1}}],[\"同时创建一个标签\",{\"1\":{\"1974\":1}}],[\"同时让新的组件虚拟节点\",{\"1\":{\"1955\":1}}],[\"同时只能存在一个\",{\"1\":{\"1891\":1}}],[\"同时还要开启对模板中数据\",{\"1\":{\"1806\":1}}],[\"同时还可以定义一些额外的参数\",{\"1\":{\"1655\":1}}],[\"同时还会添加一个额外的事件\",{\"1\":{\"1357\":1}}],[\"同时实时性也最高\",{\"1\":{\"1649\":1}}],[\"同时响应头中包含upgrade\",{\"1\":{\"1649\":1}}],[\"同时拿到它method属性值\",{\"1\":{\"1569\":1}}],[\"同时抛弃当前页面\",{\"1\":{\"1569\":4}}],[\"同时可以附带上新的缓存指令\",{\"1\":{\"1537\":1}}],[\"同时可以选择将mongodb添加到系统服务中实现开机自动启动\",{\"1\":{\"177\":1}}],[\"同时模板也会重新解析\",{\"1\":{\"1350\":1}}],[\"同时\",{\"1\":{\"1298\":1,\"1377\":1,\"1485\":1,\"1666\":1}}],[\"同时执行\",{\"1\":{\"1224\":1}}],[\"同时其作为\",{\"1\":{\"1007\":1}}],[\"同时也应该有自动为\",{\"1\":{\"1938\":1}}],[\"同时也会拦截object\",{\"1\":{\"1906\":1}}],[\"同时也可以用于训练模型\",{\"1\":{\"1656\":1}}],[\"同时也是一个effect\",{\"1\":{\"2020\":1}}],[\"同时也是一个难点\",{\"1\":{\"926\":1}}],[\"同时也是浏览器推荐的解决方案\",{\"1\":{\"1605\":1}}],[\"同时也不再支持config\",{\"1\":{\"1519\":1}}],[\"同时也不用每次都获取\",{\"1\":{\"1232\":1}}],[\"同时也让开发者陷入技术的泥潭\",{\"1\":{\"116\":1}}],[\"同时匹配美国英语和英国英语单词\",{\"1\":{\"906\":1}}],[\"同时会自动调整参数的位置\",{\"1\":{\"891\":1}}],[\"同时我们还可以使用\",{\"1\":{\"746\":1}}],[\"同时必须大于\",{\"1\":{\"696\":1}}],[\"同时选择多个选择器对应的元素\",{\"1\":{\"517\":1}}],[\"同时在该进程中还会默认启动一个线程\",{\"1\":{\"408\":1}}],[\"同时使得类\",{\"1\":{\"405\":1}}],[\"同时传入时\",{\"1\":{\"402\":1}}],[\"同时作为形参来接收实参\",{\"1\":{\"402\":1}}],[\"同时前面加一个\",{\"1\":{\"384\":1}}],[\"同时利用并行下载以最大化资源利用率\",{\"1\":{\"85\":1}}],[\"定长的短字符串\",{\"1\":{\"2101\":1}}],[\"定量分析\",{\"1\":{\"1743\":1}}],[\"定性分析\",{\"1\":{\"1743\":1}}],[\"定性\",{\"1\":{\"1685\":1,\"1699\":1}}],[\"定宽\",{\"1\":{\"580\":1,\"597\":1,\"598\":1,\"603\":1}}],[\"定位元素水平方向的位置由left和right两个属性控制\",{\"1\":{\"569\":1}}],[\"定位元素越向上移动\",{\"1\":{\"569\":1}}],[\"定位元素越向下移动\",{\"1\":{\"569\":1}}],[\"定位元素垂直方向的位置由top和bottom两个属性控制\",{\"1\":{\"569\":1}}],[\"定位元素和定位位置的右侧距离\",{\"1\":{\"569\":1}}],[\"定位元素和定位位置的左侧距离\",{\"1\":{\"569\":1}}],[\"定位元素和定位位置下边的距离\",{\"1\":{\"569\":1}}],[\"定位元素和定位位置上边的距离\",{\"1\":{\"569\":1}}],[\"定位\",{\"0\":{\"567\":1},\"1\":{\"572\":1},\"2\":{\"607\":1}}],[\"定位目标文件\",{\"1\":{\"239\":2}}],[\"定时函数\",{\"1\":{\"1088\":1}}],[\"定时发送请求作为心跳检测\",{\"1\":{\"505\":2}}],[\"定时器的回调函数\",{\"1\":{\"1383\":1}}],[\"定时器并不能真正完全定时执行\",{\"1\":{\"1175\":1}}],[\"定时器问题\",{\"0\":{\"1175\":1}}],[\"定时器模块\",{\"1\":{\"1173\":1}}],[\"定时器不断修改\",{\"1\":{\"1104\":1}}],[\"定时器到时间后的处理函数\",{\"1\":{\"408\":1}}],[\"定时器\",{\"1\":{\"408\":1}}],[\"定义各种方法\",{\"0\":{\"2046\":1}}],[\"定义路由表\",{\"1\":{\"2025\":1}}],[\"定义路由中间件\",{\"0\":{\"315\":1}}],[\"定义状态机的状态\",{\"1\":{\"1974\":1}}],[\"定义旧值与新值\",{\"1\":{\"1897\":1}}],[\"定义判断\",{\"0\":{\"1757\":1}}],[\"定义模型\",{\"1\":{\"1673\":1}}],[\"定义模块代码\",{\"0\":{\"41\":1}}],[\"定义卷积层\",{\"1\":{\"1662\":1}}],[\"定义卷积层的简单示例\",{\"1\":{\"1662\":1}}],[\"定义的响应式数据中某个属性时\",{\"1\":{\"1497\":1}}],[\"定义的响应式数据时\",{\"1\":{\"1497\":1}}],[\"定义的响应式数据是\",{\"1\":{\"1488\":1}}],[\"定义的数据\",{\"1\":{\"1492\":2}}],[\"定义插槽\",{\"1\":{\"1446\":2}}],[\"定义插件\",{\"1\":{\"1432\":1}}],[\"定义混合\",{\"1\":{\"1431\":1}}],[\"定义app组件\",{\"1\":{\"1422\":1}}],[\"定义hello组件\",{\"1\":{\"1422\":1}}],[\"定义组件实例\",{\"1\":{\"1954\":1}}],[\"定义组件\",{\"0\":{\"1415\":1,\"1953\":1}}],[\"定义语法\",{\"0\":{\"1406\":1}}],[\"定义局部变量\",{\"1\":{\"1261\":1}}],[\"定义全局变量\",{\"1\":{\"1261\":1}}],[\"定义全局中间件\",{\"0\":{\"312\":1}}],[\"定义类型\",{\"1\":{\"1048\":1}}],[\"定义类方法需要有默认形参self\",{\"1\":{\"405\":1}}],[\"定义函数时被自动赋值\",{\"1\":{\"1008\":1}}],[\"定义列表\",{\"1\":{\"663\":1}}],[\"定义内容\",{\"1\":{\"623\":2}}],[\"定义项目排列顺序\",{\"1\":{\"593\":1}}],[\"定义了一些属性和方法\",{\"1\":{\"2027\":1}}],[\"定义了一个输入通道数为\",{\"1\":{\"1662\":1}}],[\"定义了四个钩子函数\",{\"1\":{\"1791\":1}}],[\"定义了高值区间的下限值\",{\"1\":{\"696\":1}}],[\"定义了低值区间的上限值\",{\"1\":{\"696\":1}}],[\"定义了多根轴线的对齐方式\",{\"1\":{\"590\":1}}],[\"定义了元素的逻辑行首和行末外边距\",{\"1\":{\"546\":1}}],[\"定义了元素的逻辑块首和块末外边距\",{\"1\":{\"546\":1}}],[\"定义格式化上下文的根元素\",{\"1\":{\"548\":1}}],[\"定义回调函数\",{\"1\":{\"408\":1}}],[\"定义协程处理函数\",{\"1\":{\"408\":1}}],[\"定义异常的基类\",{\"1\":{\"405\":1}}],[\"定义在组件上面的\",{\"1\":{\"2071\":1}}],[\"定义在方法中\",{\"1\":{\"405\":1}}],[\"定义在什么时间之前\",{\"1\":{\"366\":1}}],[\"定义一个对象\",{\"1\":{\"1928\":1}}],[\"定义一个对象类型的响应式数据\",{\"1\":{\"1488\":1}}],[\"定义一个\",{\"1\":{\"1923\":1}}],[\"定义一个标志\",{\"1\":{\"1897\":1,\"1987\":1}}],[\"定义一个响应式的数据\",{\"1\":{\"1487\":1}}],[\"定义一个全局变量即可配置变量值而不使用默认值\",{\"1\":{\"1320\":1}}],[\"定义一个字典\",{\"1\":{\"388\":1}}],[\"定义一个列表变量\",{\"1\":{\"388\":1}}],[\"定义一个整型数\",{\"1\":{\"387\":1,\"388\":1}}],[\"定义一个payload\",{\"1\":{\"366\":1}}],[\"定义个整型数\",{\"1\":{\"386\":1}}],[\"定义四个变量\",{\"1\":{\"382\":1}}],[\"定义数据\",{\"1\":{\"327\":1}}],[\"定义第二个中间件\",{\"1\":{\"314\":1}}],[\"定义第一个中间件\",{\"1\":{\"313\":1,\"314\":1}}],[\"定义多个全局中间件\",{\"1\":{\"314\":1}}],[\"定义\",{\"0\":{\"215\":1,\"485\":1,\"679\":1,\"1372\":1},\"1\":{\"402\":1,\"1397\":1,\"1785\":1,\"1897\":2,\"1937\":1,\"1954\":1}}],[\"定义暴露模块\",{\"1\":{\"35\":1}}],[\"检验自己的判断是对还是错\",{\"1\":{\"403\":1}}],[\"检索\",{\"1\":{\"389\":1}}],[\"检测为子组件传递的\",{\"1\":{\"1955\":1}}],[\"检测是否支持原生\",{\"1\":{\"1822\":1}}],[\"检测是否为文件夹\",{\"1\":{\"260\":1}}],[\"检测是否为文件\",{\"1\":{\"260\":1}}],[\"检测浏览器是否原生支持mutationobserver\",{\"1\":{\"1822\":1}}],[\"检测浏览器是否原生支持\",{\"1\":{\"1822\":1}}],[\"检测一个元素节点是否含有指定的某一个类\",{\"1\":{\"1125\":1}}],[\"检测指定的键名在map映射中是否已经存在\",{\"1\":{\"869\":1}}],[\"检测点的\",{\"1\":{\"745\":2}}],[\"检测\",{\"1\":{\"355\":1}}],[\"检测该文件夹下\",{\"1\":{\"238\":1}}],[\"检查新的路由记录\",{\"1\":{\"2069\":2}}],[\"检查组件是否已经被挂载\",{\"1\":{\"1954\":1}}],[\"检查被操作的属性是否是对象自己的属性\",{\"1\":{\"1907\":1}}],[\"检查当前\",{\"1\":{\"1677\":1}}],[\"检查当前上下文中的函数声明\",{\"1\":{\"1015\":1}}],[\"检查一个对象是否是由\",{\"1\":{\"1509\":3}}],[\"检查一个值是否为一个\",{\"1\":{\"1509\":1}}],[\"检查支持性\",{\"1\":{\"704\":1}}],[\"检查给定的ip是否在cidr范围内\",{\"1\":{\"501\":1}}],[\"检查参数\",{\"1\":{\"402\":1}}],[\"检查\",{\"1\":{\"69\":1,\"1927\":1}}],[\"检查是否配置成功\",{\"1\":{\"69\":1}}],[\"贴膜\",{\"1\":{\"236\":2}}],[\"高版本\",{\"1\":{\"1822\":1}}],[\"高位叠加\",{\"0\":{\"1712\":1}}],[\"高铁\",{\"1\":{\"1621\":1}}],[\"高\",{\"1\":{\"1560\":1}}],[\"高优先级\",{\"1\":{\"1181\":1}}],[\"高频点击提交\",{\"1\":{\"1036\":1}}],[\"高阶函数\",{\"0\":{\"1032\":1},\"1\":{\"1033\":1}}],[\"高度\",{\"1\":{\"1663\":1}}],[\"高度会根据当前的页面高度而固定\",{\"1\":{\"1150\":1}}],[\"高度是线段厚度一半的矩形区域\",{\"1\":{\"708\":1}}],[\"高度塌陷是浮动布局中比较常见的一个问题\",{\"1\":{\"562\":1}}],[\"高度塌陷\",{\"1\":{\"562\":1,\"580\":1}}],[\"高度等属性来影响其布局位置\",{\"1\":{\"539\":1}}],[\"高级修饰器\",{\"1\":{\"402\":1}}],[\"高亮显示\",{\"1\":{\"287\":1}}],[\"高维护性\",{\"1\":{\"234\":1}}],[\"高复用性\",{\"1\":{\"234\":1}}],[\"高精度数字\",{\"1\":{\"192\":1}}],[\"指示组件是否处于激活状态\",{\"1\":{\"1800\":1}}],[\"指示服务器资源是私有的\",{\"1\":{\"1539\":1}}],[\"指示服务器资源是公开的\",{\"1\":{\"1539\":1}}],[\"指引会标识出每个位图应该画到屏幕的哪个位置\",{\"1\":{\"1526\":1}}],[\"指引\",{\"1\":{\"1526\":1}}],[\"指令的节点\",{\"1\":{\"1795\":1}}],[\"指令的定义如下\",{\"1\":{\"1428\":1}}],[\"指令定义时不加v\",{\"1\":{\"1408\":1}}],[\"指令所在的模板被重新解析时\",{\"1\":{\"1407\":1}}],[\"指令所在元素被插入页面时\",{\"1\":{\"1407\":1}}],[\"指令所在元素被插入页面时调用\",{\"1\":{\"1407\":1}}],[\"指令所在模板结构被重新解析时调用\",{\"1\":{\"1407\":1}}],[\"指令与元素成功绑定时\",{\"1\":{\"1407\":1}}],[\"指令与元素成功\",{\"1\":{\"1407\":1}}],[\"指令名如果是多个单词\",{\"1\":{\"1408\":1}}],[\"指令名\",{\"1\":{\"1406\":4}}],[\"指令\",{\"1\":{\"1404\":1,\"1950\":1}}],[\"指令语法\",{\"0\":{\"1353\":1},\"1\":{\"1403\":1}}],[\"指代的是绑定事件的元素\",{\"1\":{\"1152\":1}}],[\"指明严格模式的情况下指向\",{\"1\":{\"991\":1}}],[\"指向包含\",{\"1\":{\"2047\":1}}],[\"指向新的一组子节点的最后一个元素\",{\"1\":{\"1969\":1}}],[\"指向最长递增子序列的最后一个元素\",{\"1\":{\"1969\":1}}],[\"指向下一个位置\",{\"1\":{\"1965\":1,\"1969\":1}}],[\"指向下一次请求的url对应的下标\",{\"1\":{\"499\":1}}],[\"指向本身\",{\"1\":{\"1927\":1}}],[\"指向代理对象\",{\"1\":{\"1902\":1,\"1993\":1}}],[\"指向栈顶的副作用函数\",{\"1\":{\"1891\":1}}],[\"指向vm\",{\"1\":{\"1804\":2}}],[\"指向创建的observer实例\",{\"1\":{\"1784\":1}}],[\"指向会出问题\",{\"1\":{\"1437\":1}}],[\"指向一个对象\",{\"1\":{\"1063\":1}}],[\"指向一个服务器地址\",{\"1\":{\"754\":1}}],[\"指向自己的原型\",{\"1\":{\"1009\":1}}],[\"指向构造函数本身\",{\"1\":{\"1007\":1}}],[\"指向始终是指向的外层作用域\",{\"1\":{\"996\":2}}],[\"指向始终为外层的作用域\",{\"1\":{\"996\":1}}],[\"指向与普通函数不一样\",{\"1\":{\"996\":1}}],[\"指向顶层对象\",{\"1\":{\"995\":1}}],[\"指向方式变化\",{\"1\":{\"995\":1}}],[\"指向对象的引用次数减\",{\"1\":{\"1030\":1}}],[\"指向对象的引用次数再加\",{\"1\":{\"1030\":1}}],[\"指向对象的引用次数加\",{\"1\":{\"1030\":1}}],[\"指向对象的引用次数为\",{\"1\":{\"1030\":1}}],[\"指向对象\",{\"1\":{\"995\":1}}],[\"指向全局\",{\"1\":{\"996\":1}}],[\"指向全局环境\",{\"1\":{\"995\":1}}],[\"指向全局对象\",{\"1\":{\"958\":1}}],[\"指向的其实是原始对象\",{\"1\":{\"1902\":1}}],[\"指向的对象\",{\"1\":{\"995\":1,\"1219\":1,\"2026\":1}}],[\"指向的作用\",{\"1\":{\"995\":1}}],[\"指向的是全局对象\",{\"1\":{\"996\":1}}],[\"指向的是\",{\"1\":{\"991\":1}}],[\"指向的是最后调用它的对象\",{\"1\":{\"991\":1}}],[\"指向经常改变\",{\"1\":{\"995\":1}}],[\"指向绑定\",{\"1\":{\"995\":1}}],[\"指向绑定了事件的元素\",{\"1\":{\"993\":1}}],[\"指向绑定事件的元素\",{\"0\":{\"993\":1}}],[\"指向当前的对象\",{\"1\":{\"992\":1}}],[\"指向当前对象\",{\"1\":{\"834\":1,\"996\":1}}],[\"指向\",{\"0\":{\"994\":1,\"995\":1,\"996\":1},\"1\":{\"991\":1,\"992\":1,\"993\":1,\"995\":4,\"996\":1,\"1015\":1,\"1423\":1,\"1923\":1}}],[\"指向拥有\",{\"1\":{\"953\":1}}],[\"指向拥有这个arguments对象的函数\",{\"1\":{\"953\":1}}],[\"指针不等于比较\",{\"1\":{\"398\":1}}],[\"指针不等于\",{\"1\":{\"398\":1}}],[\"指针等于比较\",{\"1\":{\"398\":1}}],[\"指针等于\",{\"1\":{\"398\":1}}],[\"指的是一个路由视图内部又可以包含另一个路由视图\",{\"1\":{\"2068\":1}}],[\"指的是对一个对象\",{\"1\":{\"1901\":1}}],[\"指的是题目中存在大集合\",{\"1\":{\"1733\":1}}],[\"指的是中间的分割符\",{\"1\":{\"1634\":1}}],[\"指的是匹配时使用的规则\",{\"1\":{\"919\":1}}],[\"指的是用户在浏览某个网站时\",{\"1\":{\"768\":1}}],[\"指的是针对一个\",{\"1\":{\"768\":1}}],[\"指的是我们拖动源对象后移动到一块区域\",{\"1\":{\"763\":1}}],[\"指的是我们鼠标点击的一个事物\",{\"1\":{\"763\":1}}],[\"指的是创建新的数据\",{\"1\":{\"469\":1}}],[\"指的是\",{\"1\":{\"224\":1,\"261\":1}}],[\"指定何时执行\",{\"1\":{\"2069\":1}}],[\"指定保留属性大小写的值\",{\"1\":{\"2063\":1}}],[\"指定兼容性工具的值\",{\"1\":{\"2063\":1}}],[\"指定全局挂载的值\",{\"1\":{\"2063\":1}}],[\"指定副作用函数的调度器为queuejob\",{\"1\":{\"1954\":1}}],[\"指定回调函数的执行时机\",{\"1\":{\"1897\":1}}],[\"指定了操作类型为\",{\"1\":{\"1928\":1}}],[\"指定了\",{\"1\":{\"1894\":1}}],[\"指定了在\",{\"1\":{\"706\":1}}],[\"指定响应的返回类型\",{\"1\":{\"1587\":1}}],[\"指定目标容器\",{\"1\":{\"1515\":1}}],[\"指定组件的呈现位置\",{\"1\":{\"1456\":1}}],[\"指定默认值\",{\"1\":{\"1429\":1}}],[\"指定次数\",{\"1\":{\"1392\":1}}],[\"指定动画完成后的最终值\",{\"1\":{\"1224\":1}}],[\"指定动画运行的方向\",{\"1\":{\"644\":1}}],[\"指定深克隆或浅克隆\",{\"1\":{\"1213\":1}}],[\"指定的\",{\"1\":{\"1277\":1}}],[\"指定的文档来替换当前文档\",{\"1\":{\"1094\":1}}],[\"指定的新的\",{\"1\":{\"1094\":1}}],[\"指定的是元素在主轴上的基础长度\",{\"1\":{\"591\":1}}],[\"指定开始查找的位置\",{\"1\":{\"890\":1}}],[\"指定函数的测试\",{\"1\":{\"857\":1}}],[\"指定表单获取输入焦点\",{\"1\":{\"758\":1}}],[\"指定如何绘制每一条线段末端的属性\",{\"1\":{\"708\":1}}],[\"指定边框之间的距离\",{\"1\":{\"669\":1}}],[\"指定内联框架的边框\",{\"1\":{\"667\":1}}],[\"指定要跳转的路由\",{\"1\":{\"1456\":1}}],[\"指定要引入的网页的路径\",{\"1\":{\"667\":1}}],[\"指定要执行过渡的属性\",{\"1\":{\"641\":1}}],[\"指定数据的内容\",{\"1\":{\"659\":1}}],[\"指定数据的类型\",{\"1\":{\"659\":1}}],[\"指定网页的字符集<meta\",{\"1\":{\"659\":1}}],[\"指定过渡执行的方式\",{\"1\":{\"641\":1}}],[\"指定过渡效果的持续时间\",{\"1\":{\"641\":1}}],[\"指定颜色分布的起始位置\",{\"1\":{\"636\":1}}],[\"指定字体的名字\",{\"1\":{\"621\":1}}],[\"指定字体的类别\",{\"1\":{\"621\":1}}],[\"指定弹性元素的收缩系数\",{\"1\":{\"591\":1}}],[\"指定弹性元素的伸展的系数\",{\"1\":{\"591\":1}}],[\"指定形参的实参在后\",{\"1\":{\"402\":1}}],[\"指定\",{\"1\":{\"192\":3,\"345\":2,\"557\":1,\"995\":1,\"1088\":3,\"1360\":1,\"1676\":1}}],[\"指定端口号\",{\"1\":{\"133\":1,\"134\":1}}],[\"指定所有依赖的模块的数组\",{\"1\":{\"45\":1}}],[\"指定导出的模块名\",{\"1\":{\"45\":1}}],[\"传输层安全性协议\",{\"1\":{\"2091\":1}}],[\"传进去\",{\"1\":{\"2055\":1}}],[\"传给子组件的是对象\",{\"0\":{\"1842\":1},\"1\":{\"1840\":1}}],[\"传给子组件的是基本数据类型\",{\"0\":{\"1841\":1},\"1\":{\"1840\":1}}],[\"传给youarehere\",{\"1\":{\"1102\":1}}],[\"传承不间断\",{\"1\":{\"1705\":1}}],[\"传统构建\",{\"1\":{\"1483\":1}}],[\"传统的编程方式\",{\"1\":{\"1413\":1}}],[\"传统的桌面通知可以通过创建一个\",{\"1\":{\"1104\":1}}],[\"传统的\",{\"1\":{\"224\":1}}],[\"传数据\",{\"1\":{\"1437\":1}}],[\"传过来的数据\",{\"1\":{\"1429\":1}}],[\"传参\",{\"1\":{\"1368\":1,\"1577\":1}}],[\"传参数\",{\"1\":{\"1299\":1}}],[\"传参不是以上类型\",{\"1\":{\"995\":1}}],[\"传多个参数\",{\"0\":{\"1296\":1}}],[\"传一个带值的参数\",{\"0\":{\"1295\":1}}],[\"传一个不带值的参数\",{\"0\":{\"1294\":1}}],[\"传入了合适的参数\",{\"1\":{\"2075\":1}}],[\"传入了\",{\"1\":{\"2059\":1}}],[\"传入一个配置对象\",{\"1\":{\"2041\":1}}],[\"传入新的\",{\"1\":{\"2028\":1}}],[\"传入进来的是一个函数\",{\"1\":{\"2019\":1}}],[\"传入的事件类型\",{\"1\":{\"2032\":1}}],[\"传入的\",{\"1\":{\"1998\":1,\"2054\":1}}],[\"传入的文本\",{\"1\":{\"1793\":1}}],[\"传入immediate配置\",{\"1\":{\"1810\":1}}],[\"传入子组件\",{\"1\":{\"1446\":1,\"1494\":1}}],[\"传入\",{\"1\":{\"995\":1,\"1659\":1,\"1802\":1,\"2058\":1,\"2061\":1}}],[\"传入原函数\",{\"1\":{\"995\":1}}],[\"传入类似于date\",{\"1\":{\"877\":1}}],[\"传入数组来初始化\",{\"1\":{\"868\":1}}],[\"传入数组求平均值函数\",{\"1\":{\"835\":1}}],[\"传入参数指明以什么作为分隔符\",{\"1\":{\"854\":1}}],[\"传入字典\",{\"1\":{\"402\":1}}],[\"传入列表或元组\",{\"1\":{\"402\":1}}],[\"传入顺序与内部顺序一一对应\",{\"1\":{\"402\":1}}],[\"传入指定形参\",{\"1\":{\"402\":2}}],[\"传入zip的参数采取相应位置一一对应的方式组合成元组\",{\"1\":{\"401\":1}}],[\"传入文件路径即可引入文件\",{\"1\":{\"238\":1}}],[\"传递过去\",{\"1\":{\"1930\":2}}],[\"传递消息的格式\",{\"0\":{\"1629\":1},\"1\":{\"1627\":1}}],[\"传递消息的模式\",{\"0\":{\"1628\":1},\"1\":{\"1627\":1}}],[\"传递参数\",{\"1\":{\"1459\":1,\"1461\":1}}],[\"传递数据\",{\"1\":{\"1429\":1}}],[\"传递的\",{\"1\":{\"1840\":1}}],[\"传递的属性添加到组件实例中\",{\"1\":{\"1804\":1}}],[\"传递的属性为value\",{\"1\":{\"1358\":1}}],[\"传递的回调不是函数\",{\"1\":{\"1777\":1}}],[\"传递的参数\",{\"1\":{\"1189\":1}}],[\"传递一个\",{\"1\":{\"1307\":1}}],[\"传递一个不被允许的参数\",{\"1\":{\"1252\":1}}],[\"传递给事件处理函数的参数\",{\"1\":{\"1954\":1}}],[\"传递给\",{\"1\":{\"1930\":1}}],[\"传递给模型\",{\"1\":{\"1673\":1}}],[\"传递给服务器的参数\",{\"1\":{\"1227\":1,\"1228\":1,\"1229\":1,\"1230\":1}}],[\"传递给代码执行器\",{\"1\":{\"155\":1}}],[\"传递\",{\"1\":{\"356\":1}}],[\"知道了服务器已经准备就绪\",{\"1\":{\"2091\":2}}],[\"知道处于什么环境\",{\"1\":{\"71\":1}}],[\"知识拓展\",{\"1\":{\"384\":1}}],[\"知名度较高的\",{\"0\":{\"223\":1}}],[\"电话类型\",{\"1\":{\"757\":1}}],[\"电脑开机\",{\"1\":{\"253\":1}}],[\"电子游戏直播网站\",{\"1\":{\"222\":1}}],[\"电量大\",{\"1\":{\"200\":2}}],[\"转折关系\",{\"1\":{\"1693\":1}}],[\"转折\",{\"1\":{\"1691\":2}}],[\"转发成员时进行配置\",{\"1\":{\"1312\":1}}],[\"转发时配置模块的成员\",{\"0\":{\"1312\":1}}],[\"转发时添加前缀\",{\"0\":{\"1310\":1}}],[\"转发\",{\"1\":{\"1309\":1}}],[\"转发请求到多个服务端\",{\"1\":{\"507\":1}}],[\"转而等待\",{\"1\":{\"1526\":1}}],[\"转而执行后续代码\",{\"1\":{\"1180\":1,\"1558\":1}}],[\"转而在服务器端建立映射表\",{\"1\":{\"353\":1}}],[\"转化成\",{\"1\":{\"995\":1}}],[\"转化为\",{\"1\":{\"1874\":4}}],[\"转化为字符串\",{\"1\":{\"975\":1}}],[\"转化为指定结果\",{\"1\":{\"493\":1}}],[\"转化为另一个\",{\"1\":{\"402\":1}}],[\"转为\",{\"1\":{\"2079\":1}}],[\"转为字符串的对象\",{\"1\":{\"2050\":1}}],[\"转为真正的数组\",{\"1\":{\"995\":1}}],[\"转为数值时为\",{\"1\":{\"980\":2}}],[\"转为数字进行比较\",{\"1\":{\"976\":1}}],[\"转为了nan\",{\"1\":{\"812\":1}}],[\"转为了5\",{\"1\":{\"812\":1}}],[\"转型方法\",{\"1\":{\"855\":1}}],[\"转字符\",{\"1\":{\"402\":1}}],[\"转成的整数会将小数点后面全部舍掉\",{\"1\":{\"395\":1}}],[\"转成\",{\"1\":{\"393\":1,\"995\":1}}],[\"转义即可\",{\"1\":{\"790\":1}}],[\"转义\",{\"1\":{\"384\":1}}],[\"转义字符\",{\"1\":{\"384\":1,\"658\":1}}],[\"转义符\",{\"0\":{\"384\":1},\"1\":{\"920\":1}}],[\"转移给前端同学\",{\"1\":{\"220\":1}}],[\"转换一样\",{\"1\":{\"1979\":1}}],[\"转换\",{\"1\":{\"1978\":1}}],[\"转换标签节点\",{\"1\":{\"1978\":1}}],[\"转换文本节点\",{\"1\":{\"1978\":1}}],[\"转换操作\",{\"1\":{\"1978\":1}}],[\"转换函数可以返回另外一个函数\",{\"1\":{\"1977\":1}}],[\"转换子节点之前\",{\"1\":{\"1977\":1}}],[\"转换器\",{\"0\":{\"1975\":1},\"1\":{\"1972\":1}}],[\"转换数值\",{\"1\":{\"801\":1}}],[\"转换布尔\",{\"1\":{\"801\":1}}],[\"转换字符串\",{\"1\":{\"801\":1}}],[\"转换字符串事实上我们也有相应的函数来转换\",{\"1\":{\"789\":1}}],[\"转换后\",{\"1\":{\"801\":1}}],[\"转换前\",{\"1\":{\"801\":1}}],[\"转换为用于描述渲染函数的\",{\"1\":{\"1975\":1}}],[\"转换为原始类型\",{\"1\":{\"976\":1}}],[\"转换为数字\",{\"1\":{\"975\":1,\"976\":1}}],[\"转换为数组\",{\"1\":{\"841\":1}}],[\"转换为数值类型\",{\"1\":{\"801\":1}}],[\"转换为\",{\"1\":{\"813\":2,\"977\":1}}],[\"转换为布尔类型\",{\"1\":{\"801\":1}}],[\"转换为字符串类型\",{\"1\":{\"801\":1}}],[\"转换为字符串\",{\"1\":{\"789\":1}}],[\"转换为浮点型\",{\"1\":{\"395\":1}}],[\"转换为整型\",{\"1\":{\"395\":1}}],[\"转换为应用程序的依赖图可以直接引用的模块\",{\"1\":{\"138\":1}}],[\"转换成字符串时\",{\"1\":{\"789\":1}}],[\"转换成原字符串\",{\"1\":{\"384\":1}}],[\"转换成一个单独的文件加入到输出列表\",{\"1\":{\"154\":1}}],[\"转换过的代码\",{\"1\":{\"155\":1}}],[\"转换这些文件\",{\"1\":{\"138\":1}}],[\"极小可直接\",{\"1\":{\"1729\":1}}],[\"极大的降低了服务器的处理压力\",{\"1\":{\"1533\":1}}],[\"极大降低了前端同学的学习门槛\",{\"1\":{\"220\":1}}],[\"极速创建\",{\"1\":{\"64\":1}}],[\"毕竟\",{\"1\":{\"220\":1}}],[\"备注\",{\"0\":{\"1408\":1},\"1\":{\"219\":1,\"1397\":1,\"1415\":1,\"1419\":1,\"1420\":1,\"1436\":1,\"1441\":1,\"1451\":1,\"1487\":1,\"1492\":1}}],[\"首次渲染时\",{\"1\":{\"1862\":1}}],[\"首年\",{\"1\":{\"1752\":1}}],[\"首位的段落\",{\"1\":{\"1699\":1}}],[\"首字母大写\",{\"1\":{\"1419\":1}}],[\"首字母小写\",{\"1\":{\"1419\":1}}],[\"首页视图\",{\"1\":{\"2049\":1}}],[\"首页\",{\"1\":{\"316\":1,\"321\":1}}],[\"首页路由\",{\"1\":{\"304\":1}}],[\"首屏性能提升方案\",{\"0\":{\"511\":1}}],[\"首屏速度优化\",{\"1\":{\"219\":1}}],[\"首屏渲染很快\",{\"1\":{\"219\":1}}],[\"首屏渲染慢\",{\"1\":{\"219\":1}}],[\"首先清空队列\",{\"1\":{\"2081\":1}}],[\"首先从组件中提取\",{\"1\":{\"2078\":1}}],[\"首先或者\",{\"1\":{\"2073\":1}}],[\"首先判断\",{\"1\":{\"2070\":1}}],[\"首先获取检查\",{\"1\":{\"2069\":1}}],[\"首先获取到从父级注入的深度值\",{\"1\":{\"2068\":1}}],[\"首先获取当前浏览器地址栏中的\",{\"1\":{\"2026\":1}}],[\"首先获取当前\",{\"1\":{\"1962\":1}}],[\"首先检查\",{\"1\":{\"2066\":1}}],[\"首先看\",{\"1\":{\"2065\":1,\"2070\":1}}],[\"首先做的第一件事情就是更新当前的\",{\"1\":{\"2061\":1}}],[\"首先该方法接收一个可选的\",{\"1\":{\"2053\":1}}],[\"首先将队列清空\",{\"1\":{\"2079\":1}}],[\"首先将这个\",{\"1\":{\"2061\":1}}],[\"首先将\",{\"1\":{\"2047\":1}}],[\"首先将查询向量与键向量计算余弦相似度或欧式距离\",{\"1\":{\"1678\":1}}],[\"首先关于\",{\"1\":{\"2044\":1}}],[\"首先根据当前路由和目标路由进行路由解析得到location\",{\"1\":{\"2032\":1}}],[\"首先对模板进行标记化\",{\"1\":{\"1974\":1}}],[\"首先对条件表达式进行求值\",{\"1\":{\"400\":1,\"815\":1}}],[\"首先必须向服务器发送\",{\"1\":{\"1649\":1}}],[\"首先由客户端向服务器发送一个请求\",{\"1\":{\"1648\":1}}],[\"首先会做一个\",{\"1\":{\"2061\":1}}],[\"首先会检查\",{\"1\":{\"2061\":1}}],[\"首先会构建第一个状态对象\",{\"1\":{\"2058\":1}}],[\"首先会根据跳转的path匹配到对应的路由对象\",{\"1\":{\"2029\":1}}],[\"首先会实例化应用\",{\"1\":{\"2003\":1}}],[\"首先会调用this\",{\"1\":{\"1855\":1}}],[\"首先会判断文本是不是一个带变量的动态文本\",{\"1\":{\"1791\":1}}],[\"首先会使用http\",{\"1\":{\"1648\":1}}],[\"首先会建立\",{\"1\":{\"1015\":1}}],[\"首先要协商一个密钥\",{\"1\":{\"2099\":1}}],[\"首先要伪造一个证书\",{\"1\":{\"2091\":1}}],[\"首先要知道数组属于异质对象\",{\"1\":{\"1916\":1}}],[\"首先要理解它是如何划分请求的\",{\"1\":{\"1606\":1}}],[\"首先要在官网\",{\"1\":{\"623\":1}}],[\"首先我们对导航守卫进行一个回顾\",{\"1\":{\"2071\":1}}],[\"首先我们还是回顾一下\",{\"1\":{\"2075\":1}}],[\"首先我们还是回忆一下\",{\"1\":{\"2062\":1}}],[\"首先我们还是来看一下该方法的一个调用\",{\"1\":{\"2059\":1}}],[\"首先我们还是来回忆一下\",{\"1\":{\"2052\":1}}],[\"首先我们来看\",{\"1\":{\"2058\":1}}],[\"首先我们来看看什么是链式操作\",{\"1\":{\"1232\":1}}],[\"首先我们来看看\",{\"1\":{\"1198\":1}}],[\"首先我们需要构造一个这样的对象并返回\",{\"1\":{\"2016\":1}}],[\"首先我们需要了解什么是解构\",{\"1\":{\"847\":1}}],[\"首先我们封装一个获取变量类型的函数\",{\"1\":{\"1927\":1}}],[\"首先我们要搞清楚什么是\",{\"1\":{\"1232\":1}}],[\"首先页面完全加载后\",{\"1\":{\"1150\":1}}],[\"首先第\",{\"1\":{\"1078\":1}}],[\"首先执行初始化表达式\",{\"1\":{\"821\":1}}],[\"首先需要根据传入参数的情况进行参数归一化\",{\"1\":{\"2019\":1}}],[\"首先需要得到一个\",{\"1\":{\"1198\":1}}],[\"首先需要写一个不是\",{\"1\":{\"918\":1}}],[\"首先需要说明的是\",{\"1\":{\"848\":1}}],[\"首先需要检查浏览器是否完全支持\",{\"1\":{\"772\":1}}],[\"首先需要将源对象的\",{\"1\":{\"764\":1}}],[\"首先需要在项目中安装\",{\"1\":{\"133\":1}}],[\"首先在组件实例化时将定义的\",{\"1\":{\"1354\":1}}],[\"首先在\",{\"1\":{\"143\":1}}],[\"首先\",{\"1\":{\"128\":1,\"129\":1,\"143\":1,\"238\":1,\"368\":1,\"710\":1,\"765\":1,\"1151\":1,\"1155\":1,\"1156\":1,\"1158\":1,\"1240\":1,\"1583\":1,\"1649\":1,\"1743\":1,\"2068\":1}}],[\"减数\",{\"1\":{\"1714\":2}}],[\"减小内存占用\",{\"1\":{\"1514\":1}}],[\"减小服务器压力\",{\"1\":{\"219\":1}}],[\"减法技巧\",{\"0\":{\"1713\":1}}],[\"减法\",{\"1\":{\"816\":1}}],[\"减速运动\",{\"1\":{\"641\":1}}],[\"减轻服务器的压力\",{\"1\":{\"508\":1,\"1543\":1}}],[\"减号运算\",{\"1\":{\"395\":1}}],[\"减\",{\"1\":{\"395\":1,\"396\":1}}],[\"减少相互影响\",{\"1\":{\"2016\":1}}],[\"减少不必要的响应\",{\"0\":{\"1909\":1}}],[\"减少标签层级\",{\"1\":{\"1514\":1}}],[\"减少\",{\"1\":{\"1239\":1,\"1242\":1}}],[\"减少一些怪异行为\",{\"1\":{\"956\":1,\"959\":1}}],[\"减少桶内的数字区间\",{\"1\":{\"418\":1}}],[\"减少排序的数量\",{\"1\":{\"418\":1}}],[\"减少频繁的查询数据库\",{\"1\":{\"360\":1}}],[\"减少数据传输\",{\"1\":{\"350\":1}}],[\"减少了全局变量\",{\"1\":{\"28\":1}}],[\"好处\",{\"1\":{\"1514\":1}}],[\"好处是\",{\"1\":{\"218\":1}}],[\"好在两家公司的浏览器开发团队在看待浏览器事件方面还是一致的\",{\"1\":{\"1138\":1}}],[\"好\",{\"1\":{\"362\":1}}],[\"好用\",{\"1\":{\"345\":1}}],[\"好麻烦\",{\"1\":{\"219\":1}}],[\"好比是\",{\"1\":{\"176\":1}}],[\"好比是一个\",{\"1\":{\"176\":1}}],[\"领域模型与页面数据是两种思维模式\",{\"1\":{\"218\":1}}],[\"层name\",{\"1\":{\"1669\":1}}],[\"层将输出张量展平成二维张量\",{\"1\":{\"1661\":1}}],[\"层之后使用\",{\"1\":{\"1661\":1}}],[\"层次\",{\"1\":{\"1158\":1}}],[\"层叠冲突\",{\"0\":{\"530\":1}}],[\"层叠\",{\"1\":{\"522\":1},\"2\":{\"537\":1}}],[\"层叠规则\",{\"0\":{\"522\":1}}],[\"层\",{\"1\":{\"218\":1,\"1560\":1,\"1661\":1}}],[\"层直接调用服务端\",{\"1\":{\"218\":1}}],[\"层的概念\",{\"1\":{\"218\":1}}],[\"整除\",{\"1\":{\"1655\":1}}],[\"整除运算\",{\"1\":{\"395\":1}}],[\"整数基准值\",{\"0\":{\"1714\":1}}],[\"整数第一位为\",{\"1\":{\"958\":1}}],[\"整数的第一位如果是\",{\"1\":{\"958\":1}}],[\"整数可以分为正整数和负整数\",{\"1\":{\"792\":1}}],[\"整数\",{\"0\":{\"792\":1},\"1\":{\"923\":1}}],[\"整体结构如下\",{\"1\":{\"2072\":1}}],[\"整体结构\",{\"0\":{\"2057\":1,\"2060\":1}}],[\"整体结构分析\",{\"0\":{\"2041\":1,\"2053\":1}}],[\"整体方法的结构如下\",{\"1\":{\"2053\":1}}],[\"整体方向的选择\",{\"0\":{\"1871\":1}}],[\"整体工作流程如下图所示\",{\"1\":{\"2041\":1}}],[\"整体项目采用的是\",{\"1\":{\"2040\":1}}],[\"整体流程\",{\"1\":{\"2032\":1}}],[\"整体的结构如下\",{\"1\":{\"2065\":1,\"2067\":1}}],[\"整体的结构也是比较清晰的\",{\"1\":{\"2060\":1}}],[\"整体的方法比较多\",{\"1\":{\"2046\":1}}],[\"整体的大概流程如下所示\",{\"1\":{\"1997\":1}}],[\"整体的比值在中间\",{\"1\":{\"1743\":1}}],[\"整体渲染流程\",{\"0\":{\"1997\":1}}],[\"整体大纲\",{\"0\":{\"1870\":1}}],[\"整体总结\",{\"0\":{\"1753\":1}}],[\"整体前期\",{\"1\":{\"1750\":1}}],[\"整体浓度＞部分\",{\"1\":{\"1741\":1}}],[\"整体平均数\",{\"1\":{\"1740\":1}}],[\"整体比重和两部分比重\",{\"1\":{\"1740\":1}}],[\"整体比较简单\",{\"1\":{\"2040\":1}}],[\"整体比较\",{\"1\":{\"1737\":1}}],[\"整体增长率和两部分增长率\",{\"1\":{\"1740\":1}}],[\"整体增量\",{\"1\":{\"1729\":1,\"1750\":1}}],[\"整体由\",{\"1\":{\"1740\":1}}],[\"整体＝部分\",{\"1\":{\"1731\":1}}],[\"整体\",{\"1\":{\"578\":1,\"1731\":2}}],[\"整体分工很清晰\",{\"1\":{\"218\":1}}],[\"整个这一段是在查看\",{\"1\":{\"2058\":1}}],[\"整个路由的初始化添加工作是在\",{\"1\":{\"2042\":1}}],[\"整个初始化阶段就是在给\",{\"1\":{\"1799\":1}}],[\"整个模板字符串里没有找到`<`\",{\"1\":{\"1792\":1}}],[\"整个模板字符串里没有找到<\",{\"1\":{\"1792\":1}}],[\"整个过程\",{\"1\":{\"1556\":1}}],[\"整个渲染流程就形成了一套组织严密的生产流水线\",{\"1\":{\"1526\":1}}],[\"整个渲染流程分为多个阶段\",{\"1\":{\"1526\":1}}],[\"整个应用只有一个\",{\"1\":{\"1457\":1}}],[\"整个脚本以\",{\"1\":{\"957\":1}}],[\"整个\",{\"1\":{\"693\":1,\"868\":1,\"1083\":1,\"2041\":1,\"2052\":1,\"2058\":1}}],[\"整个盒子可见框\",{\"1\":{\"547\":1}}],[\"整个项目就是一个模块化的项目\",{\"1\":{\"233\":1}}],[\"整个项目构建的\",{\"1\":{\"159\":1}}],[\"整型\",{\"1\":{\"382\":1}}],[\"玉伯在\",{\"1\":{\"218\":1}}],[\"业界对\",{\"1\":{\"217\":1}}],[\"里取出执行\",{\"1\":{\"1886\":1}}],[\"里去\",{\"1\":{\"1655\":1}}],[\"里一样\",{\"1\":{\"980\":1}}],[\"里定义提交地址\",{\"1\":{\"758\":1}}],[\"里所有图形的透明度\",{\"1\":{\"742\":1}}],[\"里的\",{\"1\":{\"1993\":1}}],[\"里的副作用函数取出并执行\",{\"1\":{\"1889\":1}}],[\"里的起始坐标\",{\"1\":{\"722\":1}}],[\"里的回调函数的执行时机\",{\"1\":{\"273\":1}}],[\"里只标明索引\",{\"1\":{\"388\":1}}],[\"里面所有的\",{\"1\":{\"2074\":1}}],[\"里面所有的节点一次性添加到文档上面\",{\"1\":{\"1120\":1}}],[\"里面对应的\",{\"1\":{\"2073\":1}}],[\"里面获取对应深度的路由记录\",{\"1\":{\"2068\":1}}],[\"里面里面的语法\",{\"1\":{\"2068\":1}}],[\"里面具体的逻辑我们先放一放\",{\"1\":{\"2061\":1}}],[\"里面有值\",{\"1\":{\"2058\":1}}],[\"里面有一堆方法\",{\"1\":{\"2047\":1}}],[\"里面解构出来的\",{\"1\":{\"2058\":1}}],[\"里面还有\",{\"1\":{\"2058\":1}}],[\"里面还提供了symbol\",{\"1\":{\"828\":1}}],[\"里面是否包含\",{\"1\":{\"2058\":1}}],[\"里面是否有\",{\"1\":{\"2058\":2}}],[\"里面是键值对形式\",{\"1\":{\"393\":1}}],[\"里面进行各种判断\",{\"1\":{\"2065\":1}}],[\"里面进行单独的处理\",{\"1\":{\"2058\":1}}],[\"里面进行配置的\",{\"1\":{\"2053\":1}}],[\"里面进行的\",{\"1\":{\"943\":1}}],[\"里面提供了一个名为\",{\"1\":{\"2047\":1}}],[\"里面提供的createelementfragment\",{\"1\":{\"1120\":1}}],[\"里面去查看\",{\"1\":{\"2040\":1}}],[\"里面存放的就是开发者所写的一条一条的路由记录\",{\"1\":{\"2042\":1}}],[\"里面存储着所有与当前\",{\"1\":{\"1889\":1}}],[\"里面存储着自己的路由信息\",{\"1\":{\"1457\":1}}],[\"里面存储子组件\",{\"1\":{\"1834\":1}}],[\"里面存在一个叫做\",{\"1\":{\"1084\":1}}],[\"里面会将空格和换行也视为是一个节点\",{\"1\":{\"1112\":1}}],[\"里面包含\",{\"1\":{\"1015\":1}}],[\"里面包含了一个启动文件www\",{\"1\":{\"332\":1}}],[\"里面为\",{\"1\":{\"996\":1}}],[\"里面又可以接收\",{\"1\":{\"946\":1}}],[\"里面关于函数的形参\",{\"1\":{\"931\":1}}],[\"里面不支持传统编程语言中的多维数组\",{\"1\":{\"848\":1}}],[\"里面数组的数据类型可以是任意类型\",{\"1\":{\"843\":1}}],[\"里面涉及到了\",{\"1\":{\"834\":1}}],[\"里面就经常使用\",{\"1\":{\"822\":1}}],[\"里面的回调也推入到\",{\"1\":{\"2080\":1}}],[\"里面的守卫回调也放入到\",{\"1\":{\"2078\":1}}],[\"里面的所有组件进行遍历\",{\"1\":{\"2074\":1}}],[\"里面的代码\",{\"1\":{\"2067\":2}}],[\"里面的处理\",{\"1\":{\"2058\":1}}],[\"里面的逻辑\",{\"1\":{\"2058\":1}}],[\"里面的配置对象的\",{\"1\":{\"2052\":1}}],[\"里面的语法\",{\"1\":{\"2047\":1}}],[\"里面的依赖注入功能\",{\"1\":{\"2047\":1}}],[\"里面的一个常量\",{\"1\":{\"2044\":1}}],[\"里面的事件来实现\",{\"1\":{\"1135\":1}}],[\"里面的对象属于宿主对象\",{\"1\":{\"1109\":1}}],[\"里面的对象就是一组键值对的集合\",{\"1\":{\"826\":1}}],[\"里面的||同样存在短路现象\",{\"1\":{\"809\":1}}],[\"里面的\",{\"1\":{\"808\":1,\"2061\":1}}],[\"里面\",{\"1\":{\"770\":1,\"789\":1,\"793\":1,\"944\":1,\"995\":1,\"1200\":1,\"2045\":1,\"2047\":2,\"2069\":3,\"2075\":1}}],[\"里面来获取已经设置了的值\",{\"1\":{\"769\":2}}],[\"里面设置\",{\"1\":{\"769\":2}}],[\"里面含有转义字符\",{\"1\":{\"384\":3}}],[\"里添加一条路径\",{\"1\":{\"379\":1}}],[\"里\",{\"1\":{\"360\":2,\"362\":1,\"404\":1,\"1368\":1,\"1886\":1,\"1889\":3}}],[\"里或者\",{\"1\":{\"360\":1}}],[\"里下载历史版本\",{\"1\":{\"227\":1}}],[\"里写\",{\"1\":{\"216\":1}}],[\"里运行\",{\"1\":{\"216\":2}}],[\"│──\",{\"1\":{\"1427\":3}}],[\"│\",{\"1\":{\"212\":4,\"332\":11,\"1427\":10,\"1782\":16,\"2040\":3}}],[\"倒序\",{\"1\":{\"210\":1}}],[\"条件注释\",{\"1\":{\"1791\":1,\"1792\":2}}],[\"条件渲染\",{\"0\":{\"1387\":1},\"1\":{\"1404\":4}}],[\"条件处理\",{\"1\":{\"1370\":1}}],[\"条件和循环语句中的使用\",{\"1\":{\"1259\":1}}],[\"条件分支语句\",{\"0\":{\"819\":1}}],[\"条件判断语句\",{\"0\":{\"818\":1},\"1\":{\"1283\":1}}],[\"条件锁\",{\"1\":{\"408\":1}}],[\"条件运算符在执行时\",{\"1\":{\"400\":1,\"815\":1}}],[\"条件表达式\",{\"1\":{\"400\":1,\"815\":1,\"818\":3,\"819\":1,\"820\":2}}],[\"条件中可以直接使用\",{\"1\":{\"207\":1}}],[\"条件控制\",{\"0\":{\"204\":1}}],[\"正反论证\",{\"0\":{\"1690\":1}}],[\"正如我们所看到的那样\",{\"1\":{\"1658\":1}}],[\"正如开头我们所介绍的那样\",{\"1\":{\"827\":1}}],[\"正在处理请求\",{\"1\":{\"1575\":1}}],[\"正在处理的元素在数组中的索引\",{\"1\":{\"1393\":1}}],[\"正在加载\",{\"1\":{\"1575\":1}}],[\"正因为如此\",{\"1\":{\"1265\":1}}],[\"正是实现闭包的手段\",{\"1\":{\"1023\":1}}],[\"正是这两个步骤\",{\"1\":{\"37\":1}}],[\"正无穷\",{\"1\":{\"794\":1}}],[\"正确执行\",{\"1\":{\"1927\":1}}],[\"正确地推导出组件选项内的类型\",{\"1\":{\"1519\":1}}],[\"正确的方法是写成下面这样\",{\"1\":{\"995\":1}}],[\"正确的做法应该是在验证不同字符串前\",{\"1\":{\"925\":1}}],[\"正确的写法如下\",{\"1\":{\"910\":1}}],[\"正确的写法\",{\"1\":{\"830\":1}}],[\"正确\",{\"1\":{\"789\":5}}],[\"正方形\",{\"1\":{\"636\":1}}],[\"正值向下移动\",{\"1\":{\"613\":1}}],[\"正值向右移动\",{\"1\":{\"613\":1}}],[\"正常写法\",{\"1\":{\"1380\":2}}],[\"正常触发事件\",{\"1\":{\"1370\":1}}],[\"正常模式下\",{\"1\":{\"958\":4}}],[\"正常模式\",{\"1\":{\"956\":1,\"957\":1}}],[\"正常\",{\"1\":{\"625\":1}}],[\"正常的推入新的状态对象即可\",{\"1\":{\"2058\":1}}],[\"正常的pos应该是栈顶位置\",{\"1\":{\"1792\":1}}],[\"正常的\",{\"1\":{\"621\":1}}],[\"正常的链接\",{\"1\":{\"520\":1}}],[\"正常情况下\",{\"1\":{\"570\":1,\"616\":1}}],[\"正常情况下cookie不加密\",{\"1\":{\"346\":1}}],[\"正好和\",{\"1\":{\"218\":1}}],[\"正则对象将匹配全部符合条件的结果\",{\"1\":{\"919\":1}}],[\"正则对象就停止向下匹配了\",{\"1\":{\"919\":1}}],[\"正则\",{\"1\":{\"918\":1}}],[\"正则分别匹配了环视\",{\"1\":{\"918\":1}}],[\"正则返回\",{\"1\":{\"760\":1}}],[\"正则验证\",{\"1\":{\"758\":1}}],[\"正则表达式的匹配就会从lastindex的位置开始\",{\"1\":{\"923\":1}}],[\"正则表达式的字符串表示\",{\"1\":{\"923\":1}}],[\"正则表达式属性和方法\",{\"0\":{\"922\":1}}],[\"正则表达式千变万化\",{\"1\":{\"920\":1}}],[\"正则表达式中的^和$匹配的是整个字符串的起始位置和结束位置\",{\"1\":{\"919\":1}}],[\"正则表达式是区分大小写的\",{\"1\":{\"919\":1}}],[\"正则表达式提供了专用的单词边界\",{\"1\":{\"916\":1}}],[\"正则表达式提供了量词\",{\"1\":{\"906\":1}}],[\"正则表达式还提供了非捕获分组\",{\"1\":{\"913\":1}}],[\"正则表达式也提供了对应的排除型字符组的简记法\",{\"1\":{\"904\":1}}],[\"正则表达式\",{\"0\":{\"898\":1},\"1\":{\"207\":1,\"898\":1,\"900\":1,\"901\":1,\"918\":1,\"925\":1}}],[\"正则匹配方法\",{\"1\":{\"925\":1}}],[\"正则匹配\",{\"0\":{\"207\":1}}],[\"且新\",{\"1\":{\"1944\":1}}],[\"且整体部分均可表示为\",{\"1\":{\"1740\":1}}],[\"且现在的语法与vue2不兼容\",{\"1\":{\"1484\":1}}],[\"且适用于任意组件间通信\",{\"1\":{\"1448\":1}}],[\"且可以灵活的控制请求是否走代理\",{\"1\":{\"1445\":1}}],[\"且可以直接读取到\",{\"1\":{\"1352\":1,\"1353\":1}}],[\"且每个元素都要指定key值\",{\"1\":{\"1441\":1}}],[\"且set中要引起计算时依赖的数据发生改变\",{\"1\":{\"1376\":1}}],[\"且值是\",{\"1\":{\"1364\":1}}],[\"且会收到修改的具体值\",{\"1\":{\"1364\":1}}],[\"且返回值就是age的值\",{\"1\":{\"1364\":1}}],[\"且要在new\",{\"1\":{\"1396\":1}}],[\"且要给标签配置\",{\"1\":{\"1357\":1}}],[\"且要传入一个配置对象\",{\"1\":{\"1350\":1}}],[\"且形式都是\",{\"1\":{\"1353\":1}}],[\"且不是程序员定义的\",{\"1\":{\"1423\":1}}],[\"且不破坏原有的选择器\",{\"1\":{\"1340\":1}}],[\"且不能存在\",{\"1\":{\"402\":1}}],[\"且不能省略\",{\"1\":{\"238\":1}}],[\"且在非文本框中\",{\"1\":{\"1160\":1}}],[\"且设备具有定位功能\",{\"1\":{\"1099\":1}}],[\"且顺序无所谓\",{\"1\":{\"894\":1}}],[\"且有前置\",{\"1\":{\"877\":1}}],[\"且无论第二个操作数真假\",{\"1\":{\"808\":1}}],[\"且无法修\",{\"1\":{\"402\":1}}],[\"且其元素宽度也会丢失\",{\"1\":{\"564\":1}}],[\"且没有顺序要求\",{\"1\":{\"544\":1}}],[\"且没有返回值\",{\"1\":{\"390\":1}}],[\"且单个域名下的存储数量也有限制\",{\"1\":{\"356\":1}}],[\"且\",{\"1\":{\"206\":1,\"287\":1,\"750\":1,\"1350\":1,\"1493\":1,\"1791\":1}}],[\"价格大于\",{\"1\":{\"206\":1}}],[\"价格小于\",{\"1\":{\"205\":1}}],[\"曹雪芹\",{\"1\":{\"206\":2}}],[\"逻辑论证\",{\"0\":{\"1761\":1},\"1\":{\"1761\":1}}],[\"逻辑判断\",{\"0\":{\"1760\":1}}],[\"逻辑填空\",{\"0\":{\"1702\":1},\"1\":{\"1684\":1}}],[\"逻辑或\",{\"1\":{\"816\":1}}],[\"逻辑或的情况\",{\"1\":{\"206\":1}}],[\"逻辑与\",{\"1\":{\"816\":1}}],[\"逻辑与的情况\",{\"1\":{\"206\":1}}],[\"逻辑运算符\",{\"0\":{\"397\":1,\"807\":1,\"977\":1}}],[\"逻辑运算\",{\"0\":{\"206\":1}}],[\"林俊杰\",{\"1\":{\"202\":2}}],[\"白色\",{\"1\":{\"200\":1}}],[\"灰色\",{\"1\":{\"200\":1}}],[\"华为\",{\"1\":{\"200\":1}}],[\"错误信息\",{\"1\":{\"403\":1}}],[\"错误与异常\",{\"0\":{\"403\":1}}],[\"错误\",{\"1\":{\"200\":1,\"403\":1,\"789\":1}}],[\"女\",{\"1\":{\"196\":1,\"1059\":1,\"1357\":1,\"1393\":2}}],[\"男\",{\"1\":{\"196\":1,\"836\":1,\"1055\":1,\"1056\":1,\"1059\":1,\"1060\":1,\"1067\":1,\"1357\":1,\"1364\":1,\"1393\":2}}],[\"枚举值\",{\"0\":{\"196\":1}}],[\"必要条件关系\",{\"1\":{\"1693\":1}}],[\"必要性\",{\"1\":{\"1429\":1}}],[\"必需项\",{\"1\":{\"733\":1}}],[\"必有我师焉\",{\"1\":{\"244\":2,\"245\":1}}],[\"必填项\",{\"0\":{\"194\":1},\"1\":{\"1515\":1}}],[\"必须提供\",{\"1\":{\"1824\":1}}],[\"必须拥有子节点\",{\"1\":{\"1795\":1}}],[\"必须优先调度执行\",{\"1\":{\"1560\":1}}],[\"必须和模板里的\",{\"1\":{\"1499\":1}}],[\"必须配合\",{\"1\":{\"1370\":1}}],[\"必须使用name配置\",{\"1\":{\"1461\":1}}],[\"必须使用函数式\",{\"1\":{\"1361\":1}}],[\"必须使用元素选择器开头\",{\"1\":{\"517\":1}}],[\"必须用圆括号\",{\"1\":{\"1276\":1}}],[\"必须唯一\",{\"1\":{\"1276\":1}}],[\"必须事先指定所有事件处理程序而导致的\",{\"1\":{\"1158\":1}}],[\"必须及时释放不再用到的内存\",{\"1\":{\"1027\":1}}],[\"必须以数组形式添加\",{\"1\":{\"995\":1}}],[\"必须立即初始化\",{\"1\":{\"989\":1}}],[\"必须在每次调用之后\",{\"1\":{\"925\":1}}],[\"必须满足环视表达式中的匹配情况\",{\"1\":{\"918\":1}}],[\"必须有办法确定单词\",{\"1\":{\"916\":1}}],[\"必须有\",{\"1\":{\"756\":3}}],[\"必须进行\",{\"1\":{\"751\":1}}],[\"必须先要设置一个关键帧\",{\"1\":{\"642\":1}}],[\"必须先将一个元素设置为弹性容器\",{\"1\":{\"585\":1}}],[\"必须先确保本地库和远程库的版本一致\",{\"1\":{\"13\":1}}],[\"必须结合\",{\"1\":{\"521\":1}}],[\"必须为形参指定名称\",{\"1\":{\"402\":1}}],[\"必须调用next\",{\"1\":{\"313\":1}}],[\"必须重启服务才能生效\",{\"1\":{\"275\":1}}],[\"必须首字母大写\",{\"1\":{\"129\":1}}],[\"必须是下列值中的一个\",{\"1\":{\"1607\":1}}],[\"必须是字符串\",{\"1\":{\"395\":1}}],[\"必须是一个类\",{\"1\":{\"156\":1}}],[\"必须是绝对路径\",{\"1\":{\"124\":1}}],[\"必须是数字\",{\"1\":{\"64\":1}}],[\"必须要保证服务器是\",{\"1\":{\"1605\":1}}],[\"必须要保证字符串的格式要和\",{\"1\":{\"897\":1}}],[\"必须要知道浏览器拥有的两大核心能力\",{\"1\":{\"1568\":1}}],[\"必须要有大小和字体\",{\"1\":{\"730\":1}}],[\"必须要有一个\",{\"1\":{\"156\":1,\"2041\":1}}],[\"必须要等图片加载完才能操作\",{\"1\":{\"722\":1}}],[\"必须要等到加载完文件并执行完代码后才能继续向后执行\",{\"1\":{\"37\":1}}],[\"必须要和\",{\"1\":{\"697\":1}}],[\"必须要进行处理\",{\"1\":{\"558\":1}}],[\"必须要掌握住的工具\",{\"1\":{\"61\":1}}],[\"必须要手动对代码进行合并\",{\"1\":{\"13\":1}}],[\"除此以外\",{\"1\":{\"2068\":1}}],[\"除此之外还有this\",{\"1\":{\"1804\":1}}],[\"除此之外\",{\"1\":{\"546\":1,\"749\":1,\"795\":1,\"805\":1,\"863\":1,\"864\":1,\"990\":1,\"1332\":1}}],[\"除旧布新\",{\"1\":{\"1705\":1}}],[\"除回车\",{\"1\":{\"902\":1}}],[\"除法技巧\",{\"0\":{\"1719\":1}}],[\"除法\",{\"1\":{\"816\":1}}],[\"除非选项中存在两数相差很小\",{\"1\":{\"1723\":1}}],[\"除非是某些特殊的原因\",{\"1\":{\"1614\":1}}],[\"除非是函数本身的实现不合理\",{\"1\":{\"1034\":1}}],[\"除非子组件在其中通过\",{\"1\":{\"1499\":1}}],[\"除非\",{\"1\":{\"1318\":1}}],[\"除非您专门编写使用不带引号的字符串的\",{\"1\":{\"1265\":1}}],[\"除非主动删除数据\",{\"1\":{\"768\":1}}],[\"除非项目停止服务器关闭\",{\"1\":{\"191\":1}}],[\"除号运算\",{\"1\":{\"395\":1}}],[\"除\",{\"1\":{\"395\":1,\"396\":1}}],[\"除了提供深度以外\",{\"1\":{\"2068\":1}}],[\"除了有常规的html标签外\",{\"1\":{\"1791\":1}}],[\"除了局部最小值之外\",{\"1\":{\"1658\":1}}],[\"除了它们的字面量形式\",{\"1\":{\"1274\":1}}],[\"除了以上方法外\",{\"1\":{\"1156\":1}}],[\"除了以下两点\",{\"1\":{\"1052\":1}}],[\"除了获取用户按下的是哪一个鼠标键以外\",{\"1\":{\"1153\":1}}],[\"除了获取到一个元素在页面中的位置\",{\"1\":{\"1087\":1}}],[\"除了使用\",{\"1\":{\"2065\":1}}],[\"除了使用字符串值作名字\",{\"1\":{\"1499\":1}}],[\"除了使用父元素节点删除子节点的方式之外\",{\"1\":{\"1121\":1}}],[\"除了使用上面的转换方法\",{\"1\":{\"801\":1}}],[\"除了queryselectorall\",{\"1\":{\"1112\":1}}],[\"除了经纬度的坐标\",{\"1\":{\"1101\":1}}],[\"除了innerwidth和innerheight以外\",{\"1\":{\"1087\":1}}],[\"除了sort\",{\"1\":{\"944\":1}}],[\"除了捕获分组\",{\"1\":{\"913\":1}}],[\"除了标准格式外\",{\"1\":{\"875\":1}}],[\"除了这些属性以外\",{\"1\":{\"1105\":1}}],[\"除了这个方法以外\",{\"1\":{\"875\":1}}],[\"除了这个限制以外\",{\"1\":{\"865\":1}}],[\"除了这种常规的访问方式\",{\"1\":{\"844\":1}}],[\"除了上面的属性以外\",{\"1\":{\"2051\":1}}],[\"除了上面的方法以外\",{\"1\":{\"830\":1}}],[\"除了上面\",{\"1\":{\"1358\":1}}],[\"除了上面所介绍的那\",{\"1\":{\"1160\":1}}],[\"除了上面所介绍的阻止冒泡\",{\"1\":{\"1156\":1}}],[\"除了上面所介绍的赋值运算符以外\",{\"1\":{\"806\":1}}],[\"除了上面使用getitem\",{\"1\":{\"769\":1}}],[\"除了\",{\"1\":{\"789\":1,\"1924\":1,\"1925\":1}}],[\"除了被拖放的元素称为源对象\",{\"1\":{\"764\":1}}],[\"除了源对象和目标对象以外\",{\"1\":{\"764\":1}}],[\"除了可以使用url\",{\"1\":{\"636\":1}}],[\"除了错误处理\",{\"1\":{\"355\":1}}],[\"除了安装插件以外\",{\"1\":{\"148\":1}}],[\"除了编程语言领域有包管理工具之外\",{\"1\":{\"94\":1}}],[\"除了允许有多个基本导出之外\",{\"1\":{\"51\":1}}],[\"吴承恩\",{\"1\":{\"191\":1,\"212\":1}}],[\"西游记\",{\"1\":{\"191\":1,\"212\":1}}],[\"库中的\",{\"1\":{\"2095\":1}}],[\"库等来读取\",{\"1\":{\"1655\":1}}],[\"库必须在所有成员前加上前缀\",{\"1\":{\"1313\":1}}],[\"库的优点\",{\"1\":{\"1195\":1}}],[\"库里面的\",{\"1\":{\"395\":1}}],[\"库\",{\"1\":{\"189\":1,\"379\":1,\"1309\":1,\"1319\":1}}],[\"库名\",{\"1\":{\"179\":1}}],[\"搜索指定元素在\",{\"1\":{\"1202\":1}}],[\"搜索框搜索输入\",{\"1\":{\"1035\":1}}],[\"搜索联想功能\",{\"1\":{\"1036\":1}}],[\"搜索联想\",{\"1\":{\"1034\":1}}],[\"搜索类型\",{\"1\":{\"757\":1}}],[\"搜索引擎会根据\",{\"1\":{\"666\":1}}],[\"搜索引擎优化\",{\"1\":{\"219\":1}}],[\"搜索书籍名称中带有\",{\"1\":{\"207\":1}}],[\"搜索功能\",{\"1\":{\"187\":1}}],[\"搜索包的方式有两种\",{\"1\":{\"65\":1}}],[\"搜索包\",{\"0\":{\"65\":1}}],[\"朋友圈列表\",{\"1\":{\"187\":1}}],[\"张三\",{\"1\":{\"181\":1,\"327\":1,\"368\":1,\"836\":1,\"995\":4,\"1047\":1,\"1055\":1,\"1056\":1,\"1058\":1,\"1059\":1,\"1060\":1,\"1066\":1,\"1067\":1,\"1364\":1,\"1486\":1,\"1488\":1}}],[\"插槽内容\",{\"1\":{\"1834\":1}}],[\"插槽\",{\"0\":{\"1446\":1,\"1494\":1},\"1\":{\"2070\":1}}],[\"插值来计算\",{\"1\":{\"2061\":1}}],[\"插值语法\",{\"0\":{\"1352\":1},\"1\":{\"1403\":1}}],[\"插值返回不带引号的字符串\",{\"1\":{\"1262\":1}}],[\"插值几乎可以在\",{\"1\":{\"1262\":1}}],[\"插值\",{\"0\":{\"1262\":1}}],[\"插入到锚点元素前面\",{\"1\":{\"1962\":1}}],[\"插入到dom中\",{\"1\":{\"1789\":3}}],[\"插入完成后执行\",{\"1\":{\"1230\":1}}],[\"插入多少\",{\"1\":{\"854\":1}}],[\"插入\",{\"1\":{\"854\":1}}],[\"插入和替换\",{\"1\":{\"854\":1}}],[\"插入图片\",{\"0\":{\"722\":1}}],[\"插入排序的优化\",{\"1\":{\"413\":1}}],[\"插入排序\",{\"0\":{\"412\":1}}],[\"插入后的数据对象\",{\"1\":{\"200\":1}}],[\"插入一条\",{\"1\":{\"200\":1}}],[\"插入文档时会自动创建此数据库\",{\"1\":{\"191\":1}}],[\"插入文档\",{\"1\":{\"181\":1,\"191\":1}}],[\"插件化架构\",{\"0\":{\"1977\":1}}],[\"插件作者可以使用混入\",{\"1\":{\"1826\":1}}],[\"插件将只会被安装一次\",{\"1\":{\"1824\":1}}],[\"插件可以扩展\",{\"1\":{\"156\":1}}],[\"插件在监听到感兴趣的事件后会执行特定的逻辑\",{\"1\":{\"154\":1}}],[\"插件\",{\"0\":{\"1432\":1},\"1\":{\"128\":2,\"1201\":1,\"1324\":1,\"1448\":1,\"1824\":1}}],[\"插件其实就是\",{\"1\":{\"128\":1}}],[\"敲回车\",{\"1\":{\"177\":1}}],[\"千万不要选中服务端窗口的内容\",{\"1\":{\"177\":1}}],[\"主客体颠倒\",{\"1\":{\"1752\":1}}],[\"主动推送消息给客户端\",{\"1\":{\"1649\":1}}],[\"主动\",{\"1\":{\"1644\":1}}],[\"主\",{\"1\":{\"1170\":1}}],[\"主体\",{\"1\":{\"669\":1,\"1702\":1,\"1757\":1}}],[\"主轴结束位置到最后一个\",{\"1\":{\"588\":1}}],[\"主轴起始位置到第一个\",{\"1\":{\"588\":1}}],[\"主轴上的元素如何排列\",{\"1\":{\"588\":1}}],[\"主轴排列\",{\"0\":{\"588\":1}}],[\"主轴换行\",{\"0\":{\"587\":1}}],[\"主轴\",{\"1\":{\"586\":3}}],[\"主内容区需要\",{\"1\":{\"580\":1}}],[\"主内容区同样\",{\"1\":{\"580\":1}}],[\"主页面\",{\"1\":{\"1427\":1}}],[\"主页\",{\"1\":{\"350\":1}}],[\"主文件\",{\"1\":{\"321\":1,\"332\":1}}],[\"主机名\",{\"1\":{\"269\":1,\"291\":1}}],[\"主线程将任务交给其他线程去处理\",{\"1\":{\"1558\":1}}],[\"主线程将每个图层的绘制信息提交给合成线程\",{\"1\":{\"1526\":1}}],[\"主线程遇到了一个前所未有的难题\",{\"1\":{\"1556\":1}}],[\"主线程就会启动更多的线程来执行代码\",{\"1\":{\"1554\":1}}],[\"主线程会为每个层单独产生绘制指令集\",{\"1\":{\"1526\":1}}],[\"主线程会使用一套复杂的策略对整个布局树中进行分层\",{\"1\":{\"1526\":1}}],[\"主线程会遍历得到的\",{\"1\":{\"1526\":1}}],[\"主线程不会等待\",{\"1\":{\"1526\":1}}],[\"主线程自身立即结束任务的执行\",{\"1\":{\"1180\":1}}],[\"主线程负责执行\",{\"1\":{\"1168\":1,\"1555\":1}}],[\"主线程\",{\"0\":{\"1172\":1},\"1\":{\"245\":2,\"1182\":1}}],[\"主线程是用于接收客户端请求\",{\"1\":{\"224\":1}}],[\"主要实现的功能为\",{\"1\":{\"2026\":1}}],[\"主要实现的功能如下\",{\"1\":{\"2000\":1,\"2028\":1}}],[\"主要实现就两部分\",{\"1\":{\"2002\":1}}],[\"主要就是针对深度\",{\"1\":{\"2068\":1}}],[\"主要就是拿到新的\",{\"1\":{\"2002\":1}}],[\"主要就是用于控制整个程序的走向的\",{\"1\":{\"817\":1}}],[\"主要完成的功能如下\",{\"1\":{\"1998\":1}}],[\"主要定义的有两部分\",{\"1\":{\"1953\":1}}],[\"主要采用\",{\"1\":{\"1692\":1,\"1699\":1}}],[\"主要的初始化如下\",{\"1\":{\"2027\":1}}],[\"主要的区别在于反卷积操作是将卷积核中的值进行上采样之后进行卷积\",{\"1\":{\"1667\":1}}],[\"主要的队列优先级由高到低\",{\"1\":{\"1181\":1}}],[\"主要负责界面显示\",{\"1\":{\"1168\":1,\"1555\":1}}],[\"主要有以下两个原因\",{\"1\":{\"980\":1}}],[\"主要有以下几个\",{\"1\":{\"956\":1}}],[\"主要有以下几点\",{\"1\":{\"767\":1}}],[\"主要是为了解决证书的可信问题\",{\"1\":{\"2091\":1}}],[\"主要是设置\",{\"1\":{\"2064\":1}}],[\"主要是用来计算要前进还是后退\",{\"1\":{\"2061\":1}}],[\"主要是用来暂停或者停止处理路由事件的变量\",{\"1\":{\"2061\":1}}],[\"主要是判断是否是首次刷新\",{\"1\":{\"2058\":1}}],[\"主要是检查\",{\"1\":{\"2058\":1}}],[\"主要是解决存在映射里面的垃圾数据问题\",{\"1\":{\"872\":1}}],[\"主要是执行效率问题\",{\"1\":{\"117\":1}}],[\"主要说一下字符串的比较\",{\"1\":{\"812\":1}}],[\"主要需要注意前置和后置的区别\",{\"1\":{\"806\":1}}],[\"主要需要注意的就是\",{\"1\":{\"803\":1,\"1148\":1}}],[\"主要在以下几个方面做了加强\",{\"1\":{\"768\":1}}],[\"主要解决高度塌陷问题\",{\"1\":{\"564\":1}}],[\"主要用于计算当前\",{\"1\":{\"2068\":1}}],[\"主要用于检测一个对象是否是一个实例对象的原型对象\",{\"1\":{\"1066\":1}}],[\"主要用于搜索和替换\",{\"1\":{\"919\":1}}],[\"主要用于移动端\",{\"1\":{\"359\":1}}],[\"主要用来做事件委托\",{\"1\":{\"1216\":1}}],[\"主要用来作为一次性token\",{\"1\":{\"366\":1}}],[\"主要用来提交数据\",{\"1\":{\"296\":1}}],[\"主要用来获取数据\",{\"1\":{\"296\":1}}],[\"主要特点有如下几个\",{\"1\":{\"339\":1}}],[\"主要分为两大类\",{\"1\":{\"290\":1}}],[\"主要书写\",{\"1\":{\"212\":1}}],[\"主键\",{\"1\":{\"176\":1}}],[\"表演的舞台\",{\"1\":{\"1486\":1}}],[\"表明统计指标逐期的发展变化\",{\"1\":{\"1725\":1}}],[\"表明媒体的长度发生了改变\",{\"1\":{\"752\":1}}],[\"表明媒体可以在保持当前的下载速度的情况下不被中断地播放完毕\",{\"1\":{\"752\":1}}],[\"表明的是这个页面的\",{\"1\":{\"693\":1}}],[\"表明已没有数据要被写入可写流\",{\"1\":{\"247\":1}}],[\"表单类\",{\"1\":{\"1356\":1}}],[\"表单重复提交\",{\"1\":{\"1036\":1}}],[\"表单验证反馈\",{\"0\":{\"759\":1}}],[\"表单的变动\",{\"0\":{\"755\":1}}],[\"表单的不变\",{\"0\":{\"754\":1}}],[\"表单仍然用于向服务端发送表单中控件的值\",{\"1\":{\"754\":1}}],[\"表单仍然使用<form>元素作为容器\",{\"1\":{\"754\":1}}],[\"表单要提交的服务器的地址\",{\"1\":{\"670\":1}}],[\"表单\",{\"0\":{\"670\":1,\"753\":1}}],[\"表格\",{\"0\":{\"669\":1}}],[\"表现\",{\"1\":{\"656\":1}}],[\"表或元组等序列才可以使用\",{\"1\":{\"402\":1}}],[\"表达式转换为字符串\",{\"1\":{\"1797\":1}}],[\"表达式的结果嵌入到\",{\"1\":{\"1262\":1}}],[\"表达式的内容只能是一句话的函数\",{\"1\":{\"402\":1}}],[\"表达式嵌入到模板字面量中\",{\"1\":{\"790\":1}}],[\"表达式为假时报异常\",{\"1\":{\"403\":1}}],[\"表达式外层是圆括号\",{\"1\":{\"402\":1}}],[\"表达式\",{\"1\":{\"402\":1,\"790\":2,\"813\":1,\"819\":2,\"918\":1,\"1350\":1,\"1352\":1,\"1353\":1,\"1388\":3,\"1389\":1}}],[\"表连接\",{\"1\":{\"176\":1}}],[\"表示自己已经准备就绪\",{\"1\":{\"2091\":2}}],[\"表示自动检测并根据需要引入适当的兼容性工具\",{\"1\":{\"2063\":1}}],[\"表示初始值是一个已决的\",{\"1\":{\"2076\":1}}],[\"表示终止跳转\",{\"1\":{\"2075\":1}}],[\"表示拦截成功\",{\"1\":{\"2075\":1}}],[\"表示无任何拦截\",{\"1\":{\"2075\":1}}],[\"表示链接应该在新的标签页中打开\",{\"1\":{\"2065\":1}}],[\"表示存在嵌套路由\",{\"1\":{\"2065\":1}}],[\"表示禁用兼容性工具\",{\"1\":{\"2063\":1}}],[\"表示禁用全局挂载\",{\"1\":{\"2063\":1}}],[\"表示强制引入兼容性工具\",{\"1\":{\"2063\":1}}],[\"表示启用完全的\",{\"1\":{\"2063\":1}}],[\"表示一个空函数\",{\"1\":{\"2061\":1}}],[\"表示一个东西一定存在\",{\"1\":{\"2047\":1}}],[\"表示使用替换模式\",{\"1\":{\"2058\":1}}],[\"表示历史记录堆栈中\",{\"1\":{\"2048\":1}}],[\"表示执行原本\",{\"1\":{\"2047\":1}}],[\"表示新子节点在旧子节点中的位置索引\",{\"1\":{\"1969\":1}}],[\"表示为注册操作\",{\"1\":{\"1828\":1}}],[\"表示为获取操作\",{\"1\":{\"1828\":1}}],[\"表示在\",{\"1\":{\"2063\":3}}],[\"表示在最后一个变量后面还有文本\",{\"1\":{\"1793\":1}}],[\"表示在表单提交时不对其进行验证\",{\"1\":{\"761\":1}}],[\"表示html字符串没有匹配上任何一条规则\",{\"1\":{\"1792\":1}}],[\"表示比53\",{\"1\":{\"1720\":1}}],[\"表示特征图高和宽\",{\"1\":{\"1667\":1}}],[\"表示输入通道数\",{\"1\":{\"1667\":1}}],[\"表示输入特征的通道数为\",{\"1\":{\"1665\":1}}],[\"表示输入图像的宽度和高度\",{\"1\":{\"1663\":2}}],[\"表示通道数\",{\"1\":{\"1663\":2}}],[\"表示批次大小\",{\"1\":{\"1663\":2}}],[\"表示加载训练数据集\",{\"1\":{\"1656\":1}}],[\"表示数据存放的根目录\",{\"1\":{\"1656\":1}}],[\"表示每个\",{\"1\":{\"1655\":1}}],[\"表示每次遍历出来的对象\",{\"1\":{\"1199\":1}}],[\"表示匹配所有\",{\"1\":{\"1337\":1}}],[\"表示父选择器\",{\"1\":{\"1332\":1}}],[\"表示包含结束的数字\",{\"1\":{\"1285\":1}}],[\"表示包括节点本身也会被删除\",{\"1\":{\"1211\":1}}],[\"表示没有结果\",{\"1\":{\"1275\":1}}],[\"表示要遍历的列表\",{\"1\":{\"1269\":1}}],[\"表示列表中的最后一个元素\",{\"1\":{\"1267\":1}}],[\"表示倒数第二个字符\",{\"1\":{\"1265\":1}}],[\"表示字符串中的最后一个字符\",{\"1\":{\"1265\":1}}],[\"表示同步提交\",{\"1\":{\"1227\":1}}],[\"表示异步提交\",{\"1\":{\"1227\":1}}],[\"表示清空指定节点中的所有内容\",{\"1\":{\"1211\":1}}],[\"表示被修改的节点在前\",{\"1\":{\"1210\":1}}],[\"表示获取指定节点相对于视口的位置\",{\"1\":{\"1207\":1}}],[\"表示下标\",{\"1\":{\"1198\":1}}],[\"表示当前的\",{\"1\":{\"2068\":1}}],[\"表示当前路由是匹配路由数组中的最后一个路由记录\",{\"1\":{\"2065\":1}}],[\"表示当前路由匹配到了路由记录\",{\"1\":{\"2065\":1}}],[\"表示当前路由没有匹配到任何路由记录\",{\"1\":{\"2065\":1}}],[\"表示当前链接不处于活动状态\",{\"1\":{\"2065\":1}}],[\"表示当前链接处于活动状态\",{\"1\":{\"2065\":1}}],[\"表示当前循环的列表元素\",{\"1\":{\"1269\":1}}],[\"表示当前事件流处于捕获阶段\",{\"1\":{\"1157\":1}}],[\"表示当\",{\"1\":{\"1198\":1}}],[\"表示冒泡阶段\",{\"1\":{\"1157\":1}}],[\"表示处于目标阶段\",{\"1\":{\"1157\":1}}],[\"表示事件没有发生\",{\"1\":{\"1157\":1}}],[\"表示事件目前所处的事件流阶段\",{\"1\":{\"1157\":1}}],[\"表示事件是否可以取消\",{\"1\":{\"1156\":1}}],[\"表示未被阻止\",{\"1\":{\"1156\":1}}],[\"表示该\",{\"1\":{\"1784\":2}}],[\"表示该跳转的默认行为是能够取消的\",{\"1\":{\"1156\":1}}],[\"表示该函数的参数不是对象\",{\"1\":{\"980\":1}}],[\"表示不使用权重衰减\",{\"1\":{\"1659\":1}}],[\"表示不使用多线程\",{\"1\":{\"1655\":1}}],[\"表示不包含结束的数字\",{\"1\":{\"1285\":1}}],[\"表示不可取消\",{\"1\":{\"1156\":1}}],[\"表示不透明度\",{\"1\":{\"535\":1}}],[\"表示可以取消\",{\"1\":{\"1156\":1}}],[\"表示按下的是鼠标右键\",{\"1\":{\"1153\":1}}],[\"表示按下的是鼠标中键\",{\"1\":{\"1153\":1}}],[\"表示按下的是鼠标左键\",{\"1\":{\"1153\":1}}],[\"表示页面是\",{\"1\":{\"1132\":1}}],[\"表示整个文档\",{\"1\":{\"1111\":1}}],[\"表示整个页面\",{\"1\":{\"1083\":1}}],[\"表示窗口对象\",{\"1\":{\"1083\":1}}],[\"表示实例对象\",{\"1\":{\"990\":1}}],[\"表示这是八进制数\",{\"1\":{\"958\":1}}],[\"表示形式参数的个数\",{\"1\":{\"951\":1}}],[\"表示函数的函数名\",{\"1\":{\"950\":1}}],[\"表示第二个实参\",{\"1\":{\"932\":1}}],[\"表示第一个实参\",{\"1\":{\"932\":1}}],[\"表示第一个字母\",{\"1\":{\"521\":1}}],[\"表示第一行\",{\"1\":{\"521\":1}}],[\"表示是否是替换模式\",{\"1\":{\"2058\":1}}],[\"表示是否使用运行统计信息\",{\"1\":{\"1665\":1}}],[\"表示是否启用可学习的缩放和平移参数\",{\"1\":{\"1665\":1}}],[\"表示是否复制绑定在元素上的事件处理函数\",{\"1\":{\"1213\":1}}],[\"表示是否所有表达式都使用多行模式\",{\"1\":{\"924\":1}}],[\"表示是否设置了标志\",{\"1\":{\"923\":1}}],[\"表示是否设置了\",{\"1\":{\"923\":2}}],[\"表示开始搜索下一个匹配项的字符位置\",{\"1\":{\"923\":1}}],[\"表示非单词边界\",{\"1\":{\"916\":1}}],[\"表示所在的位置右侧位置不能匹配到该正则\",{\"1\":{\"918\":1}}],[\"表示所在的位置右侧能够匹配到该正则\",{\"1\":{\"918\":1}}],[\"表示所引用分组的编号\",{\"1\":{\"912\":1}}],[\"表示所有变量已经处理完毕\",{\"1\":{\"1793\":1}}],[\"表示所有\",{\"1\":{\"150\":1}}],[\"表示尽可能少的匹配\",{\"1\":{\"908\":1}}],[\"表示邮政编码\",{\"1\":{\"906\":1}}],[\"表示指定的时间\",{\"1\":{\"877\":1}}],[\"表示浮点数的方式有两种\",{\"1\":{\"793\":1}}],[\"表示颜色会出现在正中间\",{\"1\":{\"725\":1}}],[\"表示渐变中颜色所在的相对位置\",{\"1\":{\"725\":1}}],[\"表示渐变的起点\",{\"1\":{\"725\":1}}],[\"表示的是\",{\"1\":{\"806\":2}}],[\"表示的是视口的宽度\",{\"1\":{\"650\":1}}],[\"表示的单个字体的大小\",{\"1\":{\"650\":1}}],[\"表示参考元素自身的高度或宽度\",{\"1\":{\"591\":1}}],[\"表示\",{\"1\":{\"535\":1,\"1161\":1,\"1201\":1,\"1665\":1,\"1667\":1,\"1792\":3,\"2053\":1}}],[\"表示完全透明\",{\"1\":{\"535\":1}}],[\"表示完全不透明\",{\"1\":{\"535\":1}}],[\"表示选中的内容\",{\"1\":{\"521\":1}}],[\"表示文档的根元素\",{\"1\":{\"520\":1}}],[\"表示将字符串\",{\"1\":{\"395\":1}}],[\"表示删除该\",{\"1\":{\"345\":1}}],[\"表示磁盘中的文件已被修改\",{\"1\":{\"7\":1}}],[\"表示磁盘中的文件和\",{\"1\":{\"7\":1}}],[\"索引表\",{\"1\":{\"1969\":1}}],[\"索引值大于或等于新的\",{\"1\":{\"1916\":1,\"1918\":1}}],[\"索引\",{\"1\":{\"176\":1,\"838\":1}}],[\"域名\",{\"1\":{\"268\":1,\"345\":1,\"373\":1,\"1600\":1}}],[\"域\",{\"1\":{\"176\":1}}],[\"字母\",{\"1\":{\"904\":1}}],[\"字母完全相同\",{\"1\":{\"904\":1}}],[\"字面量声明函数\",{\"0\":{\"930\":1}}],[\"字面量构建正则表达式\",{\"0\":{\"901\":1}}],[\"字面量创建数组\",{\"0\":{\"842\":1}}],[\"字重\",{\"1\":{\"621\":1}}],[\"字典对象\",{\"1\":{\"1673\":1}}],[\"字典和元组的解包参数\",{\"1\":{\"402\":1}}],[\"字典\",{\"1\":{\"381\":2}}],[\"字符时\",{\"1\":{\"1639\":1}}],[\"字符组元字符\",{\"0\":{\"903\":1}}],[\"字符组\",{\"1\":{\"902\":1,\"903\":1,\"920\":1,\"921\":1}}],[\"字符\",{\"1\":{\"345\":1,\"384\":1,\"921\":1,\"1639\":1,\"1979\":1}}],[\"字符集utf\",{\"1\":{\"271\":1}}],[\"字符串写法\",{\"1\":{\"1804\":1}}],[\"字符串写法适用于\",{\"1\":{\"1385\":1}}],[\"字符串向右移动的索引数\",{\"1\":{\"1792\":1}}],[\"字符串以文本开头\",{\"1\":{\"1792\":1}}],[\"字符串是去除了\",{\"1\":{\"2058\":1}}],[\"字符串是以<开头\",{\"1\":{\"1792\":1}}],[\"字符串是字符串\",{\"1\":{\"980\":1}}],[\"字符串没有父节点或者父节点不是纯文本标签\",{\"1\":{\"1792\":1}}],[\"字符串这件事放在服务端还是客户端\",{\"1\":{\"1640\":1}}],[\"字符串这种数据类型非常的霸道\",{\"1\":{\"789\":1}}],[\"字符串值\",{\"1\":{\"1499\":1}}],[\"字符串转为\",{\"0\":{\"897\":1}}],[\"字符串可以表示为如下\",{\"1\":{\"895\":1}}],[\"字符串补全\",{\"0\":{\"893\":1}}],[\"字符串大小写转换方法\",{\"0\":{\"892\":1}}],[\"字符串大体可以分为两类\",{\"1\":{\"383\":1}}],[\"字符串位置方法\",{\"0\":{\"890\":1}}],[\"字符串操作方法\",{\"0\":{\"889\":1}}],[\"字符串拼接\",{\"1\":{\"816\":1}}],[\"字符串变量变成数值变量\",{\"1\":{\"806\":1}}],[\"字符串变量变为了数值变量\",{\"1\":{\"806\":1}}],[\"字符串的replace\",{\"1\":{\"911\":1}}],[\"字符串的升级版\",{\"1\":{\"790\":1}}],[\"字符串的转义是默认发生的\",{\"1\":{\"384\":1}}],[\"字符串模板\",{\"0\":{\"790\":1}}],[\"字符串介绍\",{\"0\":{\"789\":1}}],[\"字符串与二进制的相互转化\",{\"1\":{\"404\":1}}],[\"字符串不能被改变\",{\"1\":{\"389\":1}}],[\"字符串中的表达式用大括号\",{\"1\":{\"389\":1}}],[\"字符串格式化\",{\"1\":{\"385\":1}}],[\"字符串\",{\"1\":{\"192\":1,\"219\":1,\"270\":1,\"381\":2,\"389\":1,\"403\":1,\"770\":1,\"867\":1,\"1125\":1,\"1385\":1,\"1392\":1,\"1404\":1,\"2058\":1}}],[\"字段名称\",{\"1\":{\"1592\":1}}],[\"字段识别响应类型\",{\"1\":{\"1530\":1}}],[\"字段的约定\",{\"1\":{\"1530\":1}}],[\"字段将\",{\"1\":{\"1358\":1}}],[\"字段访问\",{\"1\":{\"816\":1}}],[\"字段筛选\",{\"0\":{\"209\":1}}],[\"字段值验证\",{\"0\":{\"193\":1}}],[\"字段类型\",{\"0\":{\"192\":1}}],[\"字段\",{\"1\":{\"176\":1}}],[\"字体框就是字体存在的格子\",{\"1\":{\"621\":1}}],[\"字体框\",{\"1\":{\"621\":1}}],[\"字体大小等等\",{\"1\":{\"640\":1}}],[\"字体大小\",{\"1\":{\"621\":2}}],[\"字体生效时优先使用第一个\",{\"1\":{\"621\":1}}],[\"字体族\",{\"1\":{\"621\":2}}],[\"字体的简写属性\",{\"1\":{\"621\":1}}],[\"字体的格式\",{\"1\":{\"621\":1}}],[\"字体的风格\",{\"1\":{\"621\":1}}],[\"字体的加粗\",{\"1\":{\"621\":1}}],[\"字体的大小\",{\"1\":{\"621\":1}}],[\"字体相关的样式\",{\"0\":{\"621\":1}}],[\"字体文件等\",{\"1\":{\"288\":1}}],[\"字体图标库\",{\"1\":{\"143\":1}}],[\"字体\",{\"0\":{\"143\":1,\"620\":1},\"1\":{\"142\":1},\"2\":{\"638\":1}}],[\"数\",{\"1\":{\"1926\":1}}],[\"数学里面\",{\"1\":{\"879\":1}}],[\"数学前有前置\",{\"1\":{\"875\":1}}],[\"数值\",{\"1\":{\"810\":1}}],[\"数值范围\",{\"0\":{\"794\":1}}],[\"数值越小越靠前\",{\"1\":{\"593\":1}}],[\"数值的定位元素\",{\"1\":{\"577\":1}}],[\"数被自动执行多次\",{\"1\":{\"405\":1}}],[\"数组进行一个迭代\",{\"1\":{\"2076\":1}}],[\"数组进行递归调用\",{\"1\":{\"1948\":1}}],[\"数组为空\",{\"1\":{\"2065\":1}}],[\"数组也清空\",{\"1\":{\"2061\":1}}],[\"数组也是一个对象\",{\"1\":{\"838\":1}}],[\"数组时\",{\"1\":{\"1969\":1}}],[\"数组构造最长递增子序列\",{\"1\":{\"1969\":1}}],[\"数组并逐个执行即可\",{\"1\":{\"1954\":1}}],[\"数组就可以很好地帮助我们找到哪些组件是依赖于这个\",{\"1\":{\"1864\":1}}],[\"数组类型\",{\"1\":{\"1490\":1}}],[\"数组形式\",{\"1\":{\"1453\":1}}],[\"数组写法\",{\"1\":{\"1453\":2}}],[\"数组写法适用于\",{\"1\":{\"1385\":1}}],[\"数组中查找与\",{\"1\":{\"2065\":1}}],[\"数组中最后一个元素\",{\"1\":{\"2065\":1}}],[\"数组中缓存的内容就是标签名称\",{\"1\":{\"1974\":1}}],[\"数组中缓存的字符就是标签名称\",{\"1\":{\"1974\":1}}],[\"数组中\",{\"1\":{\"1890\":1,\"1954\":1,\"1974\":2,\"1977\":1,\"1985\":1}}],[\"数组中当前正在处理的元素\",{\"1\":{\"1393\":1}}],[\"数组中的索引位置\",{\"1\":{\"2065\":1}}],[\"数组中的字符就是文本内容\",{\"1\":{\"1974\":1}}],[\"数组中的每个元素都是一个子数组\",{\"1\":{\"868\":1}}],[\"数组中的元素可以是任意的数据类型\",{\"1\":{\"838\":1}}],[\"数组中的对象好比是\",{\"1\":{\"176\":1}}],[\"数组分块是一种使用定时器分割循环的技术\",{\"1\":{\"1038\":1}}],[\"数组索引和数组对象\",{\"1\":{\"946\":1}}],[\"数组里面对应深度的匹配路由\",{\"1\":{\"2068\":1}}],[\"数组里面包含了所有匹配的路由记录\",{\"1\":{\"2068\":1}}],[\"数组里面准确的删除刚才所推入的\",{\"1\":{\"2061\":1}}],[\"数组里面\",{\"1\":{\"2061\":1,\"2078\":1,\"2079\":1,\"2080\":1}}],[\"数组里面的每一项的元素类型为\",{\"1\":{\"2061\":1}}],[\"数组里面返回过滤过的元素\",{\"1\":{\"945\":1}}],[\"数组里面有匹配上的字符\",{\"1\":{\"907\":1}}],[\"数组依然存在于集合中\",{\"1\":{\"865\":1}}],[\"数组每一项成为\",{\"1\":{\"861\":1}}],[\"数组使用的是数值型索引\",{\"1\":{\"859\":1}}],[\"数组重排序方法\",{\"0\":{\"855\":1}}],[\"数组和字符串相互转换\",{\"1\":{\"854\":1}}],[\"数组相关方法\",{\"0\":{\"852\":1}}],[\"数组相关属性\",{\"0\":{\"851\":1}}],[\"数组属性和方法\",{\"0\":{\"850\":1}}],[\"数组的最大值\",{\"1\":{\"2073\":1}}],[\"数组的每个元素都是子节点的\",{\"1\":{\"1978\":1}}],[\"数组的第二个元素也是\",{\"1\":{\"1975\":1}}],[\"数组的第一个元素是\",{\"1\":{\"1975\":1}}],[\"数组的内容已经被消费\",{\"1\":{\"1974\":3}}],[\"数组的索引与\",{\"0\":{\"1916\":1}}],[\"数组的栈方法\",{\"1\":{\"1915\":1}}],[\"数组的原型方法\",{\"1\":{\"1915\":1}}],[\"数组的长度\",{\"1\":{\"1792\":1,\"2065\":1}}],[\"数组的长度会自动改变\",{\"1\":{\"843\":1}}],[\"数组的响应式\",{\"0\":{\"1785\":1}}],[\"数组的\",{\"1\":{\"995\":2}}],[\"数组的新的长度\",{\"1\":{\"853\":1}}],[\"数组的遍历\",{\"0\":{\"846\":1}}],[\"数组的存储性能比普通对象要好\",{\"1\":{\"838\":1}}],[\"数组赋值\",{\"0\":{\"843\":1}}],[\"数组或者函数\",{\"1\":{\"826\":1}}],[\"数组下标\",{\"1\":{\"816\":1}}],[\"数组去重\",{\"0\":{\"454\":1}}],[\"数组扁平化\",{\"0\":{\"448\":1}}],[\"数组\",{\"0\":{\"837\":1},\"1\":{\"192\":1,\"895\":1,\"1385\":1,\"1392\":2,\"1786\":3,\"1789\":1,\"1890\":3,\"1954\":1,\"1969\":2,\"1974\":6,\"1977\":1,\"1984\":2,\"2029\":1,\"2042\":1,\"2061\":2,\"2081\":1,\"2083\":1}}],[\"数字签名使用私钥对数据进行签名\",{\"1\":{\"2100\":1}}],[\"数字签名是一种验证数据完整性和真实性的方法\",{\"1\":{\"2100\":1}}],[\"数字可以没有单位\",{\"1\":{\"1264\":1}}],[\"数字是\",{\"1\":{\"1264\":1}}],[\"数字是数字\",{\"1\":{\"980\":1}}],[\"数字本身和它的单位\",{\"1\":{\"1264\":1}}],[\"数字类型又被称之为number类型\",{\"1\":{\"791\":1}}],[\"数字或字符串数组去重\",{\"1\":{\"456\":1}}],[\"数字索引替代为字典具体标号索引\",{\"1\":{\"388\":1}}],[\"数字开头\",{\"1\":{\"378\":1}}],[\"数字\",{\"1\":{\"192\":1,\"381\":2,\"777\":1,\"796\":1,\"826\":1,\"904\":4,\"972\":1}}],[\"数据由类本身维护\",{\"1\":{\"2028\":1}}],[\"数据包装为\",{\"1\":{\"1954\":1}}],[\"数据与组件自身的状态数据\",{\"1\":{\"1956\":1}}],[\"数据与\",{\"1\":{\"1954\":1}}],[\"数据中\",{\"1\":{\"1932\":1}}],[\"数据中的键值对数量\",{\"1\":{\"1926\":1}}],[\"数据变化了\",{\"1\":{\"1897\":1}}],[\"数据的话\",{\"1\":{\"1938\":1}}],[\"数据的值\",{\"1\":{\"1932\":1}}],[\"数据的所有键值对\",{\"1\":{\"1926\":1}}],[\"数据的变化\",{\"1\":{\"1840\":2}}],[\"数据的传输\",{\"0\":{\"1623\":1}}],[\"数据相关\",{\"0\":{\"1809\":1}}],[\"数据预处理\",{\"1\":{\"1656\":1}}],[\"数据预处理函数\",{\"1\":{\"1656\":1}}],[\"数据集并进行数据预处理\",{\"1\":{\"1656\":1}}],[\"数据集类似\",{\"1\":{\"1656\":1}}],[\"数据集的根目录\",{\"1\":{\"1656\":1}}],[\"数据集\",{\"1\":{\"1656\":4}}],[\"数据划分和多线程等操作\",{\"1\":{\"1655\":1}}],[\"数据需要进行编码\",{\"1\":{\"1569\":1}}],[\"数据和业务逻辑不分离\",{\"1\":{\"1485\":1}}],[\"数据在组件自身的\",{\"1\":{\"1954\":1}}],[\"数据在组件的自身\",{\"1\":{\"1446\":1}}],[\"数据在子组件自身\",{\"1\":{\"1446\":1}}],[\"数据在\",{\"1\":{\"1446\":1}}],[\"数据是一个组件在用\",{\"1\":{\"1435\":1}}],[\"数据是私有的\",{\"1\":{\"29\":1}}],[\"数据存在引用关系\",{\"1\":{\"1415\":1}}],[\"数据存储在客户端\",{\"1\":{\"361\":1}}],[\"数据存储在服务器中\",{\"1\":{\"356\":1}}],[\"数据存储在服务器\",{\"1\":{\"356\":1}}],[\"数据劫持\",{\"1\":{\"1366\":1,\"1490\":1,\"1492\":2}}],[\"数据代理\",{\"0\":{\"1363\":1,\"1365\":1}}],[\"数据不仅能从\",{\"1\":{\"1356\":1}}],[\"数据不会提交\",{\"1\":{\"670\":1}}],[\"数据只能从data流向页面\",{\"1\":{\"1355\":1}}],[\"数据绑定\",{\"0\":{\"1354\":1},\"1\":{\"1840\":1}}],[\"数据供el所指定的容器去使用\",{\"1\":{\"1349\":1}}],[\"数据运算符\",{\"0\":{\"974\":1}}],[\"数据要轻松容易很多\",{\"1\":{\"895\":1}}],[\"数据格式\",{\"1\":{\"895\":1}}],[\"数据会转换为数字来进行计算\",{\"1\":{\"801\":1}}],[\"数据会提交\",{\"1\":{\"670\":1}}],[\"数据加密\",{\"1\":{\"361\":1}}],[\"数据接口\",{\"1\":{\"335\":1}}],[\"数据后执行一次\",{\"1\":{\"252\":1}}],[\"数据截取\",{\"0\":{\"211\":1}}],[\"数据排序\",{\"0\":{\"210\":1}}],[\"数据字段\",{\"1\":{\"176\":1}}],[\"数据记录行\",{\"1\":{\"176\":1}}],[\"数据库连接失败的回调\",{\"1\":{\"212\":1}}],[\"数据库连接成功的回调\",{\"1\":{\"212\":1}}],[\"数据库名称\",{\"1\":{\"191\":1}}],[\"数据库名\",{\"1\":{\"179\":1}}],[\"数据库命令\",{\"0\":{\"179\":1}}],[\"数据库表\",{\"1\":{\"176\":1}}],[\"数据库中可以存放很多集合\",{\"1\":{\"176\":1}}],[\"数据库服务下可以创建很多数据库\",{\"1\":{\"176\":1}}],[\"数据库是一个数据仓库\",{\"1\":{\"176\":1}}],[\"数据库是什么\",{\"0\":{\"172\":1}}],[\"数据库管理数据有如下特点\",{\"1\":{\"174\":1}}],[\"数据库管理数据的特点\",{\"0\":{\"174\":1}}],[\"数据库的连接配置\",{\"1\":{\"355\":1}}],[\"数据库的名称\",{\"1\":{\"212\":1}}],[\"数据库的基本操作包括四个\",{\"1\":{\"199\":1}}],[\"数据库的主要作用就是\",{\"1\":{\"173\":1}}],[\"数据库的作用\",{\"0\":{\"173\":1}}],[\"数据库\",{\"1\":{\"172\":1,\"176\":3,\"182\":1}}],[\"数据类型的相互转换\",{\"0\":{\"968\":1}}],[\"数据类型的分类和判断\",{\"0\":{\"963\":1}}],[\"数据类型不同的数据进行相等比较的话会自动转换数据类型\",{\"1\":{\"813\":1}}],[\"数据类型\",{\"0\":{\"163\":1,\"381\":1,\"787\":1,\"1263\":1},\"1\":{\"390\":1,\"801\":1,\"1753\":1}}],[\"数据结构来表示\",{\"1\":{\"1954\":1}}],[\"数据结构\",{\"0\":{\"1834\":1,\"1835\":1},\"1\":{\"867\":1,\"2016\":1},\"2\":{\"103\":1}}],[\"数据\",{\"0\":{\"997\":1,\"1001\":1,\"1838\":1},\"1\":{\"27\":1,\"29\":1,\"30\":1,\"237\":1,\"243\":1,\"306\":1,\"329\":1,\"360\":1,\"368\":1,\"404\":1,\"773\":4,\"801\":2,\"998\":1,\"1038\":1,\"1437\":1,\"1438\":1,\"1439\":1,\"1448\":1,\"1451\":2,\"1486\":2,\"1488\":1,\"1569\":1,\"1953\":1,\"1954\":4,\"1955\":2,\"1956\":1}}],[\"个变量\",{\"1\":{\"2061\":1}}],[\"个组件\",{\"1\":{\"2026\":1}}],[\"个空格字符\",{\"1\":{\"1979\":1}}],[\"个节点的索引值小于最大索引\",{\"1\":{\"1962\":1}}],[\"个选项中的所有属性最终都会被绑定到实例上\",{\"1\":{\"1804\":1}}],[\"个任务\",{\"1\":{\"1779\":1}}],[\"个包子\",{\"1\":{\"1718\":1}}],[\"个池化区域中的每个都有一个输出值\",{\"1\":{\"1663\":1}}],[\"个小时\",{\"1\":{\"1539\":1}}],[\"个回调\",{\"0\":{\"1407\":1}}],[\"个数组\",{\"1\":{\"2073\":1}}],[\"个数\",{\"1\":{\"1745\":1}}],[\"个数中每一位的和\",{\"1\":{\"1712\":1}}],[\"个数确定\",{\"1\":{\"1385\":1}}],[\"个数不确定\",{\"1\":{\"1385\":1}}],[\"个数据库\",{\"1\":{\"176\":1}}],[\"个和它们对应\",{\"1\":{\"1205\":1}}],[\"个重要的特点\",{\"1\":{\"1195\":1}}],[\"个重要组成部分\",{\"0\":{\"1179\":1}}],[\"个操作对应下列剪贴板事件\",{\"1\":{\"1160\":1}}],[\"个操作\",{\"1\":{\"1160\":1}}],[\"个操作方法\",{\"1\":{\"854\":1}}],[\"个div\",{\"1\":{\"1148\":1}}],[\"个鼠标事件的一个简单介绍\",{\"1\":{\"1148\":1}}],[\"个鼠标事件\",{\"1\":{\"1148\":1}}],[\"个事件以外\",{\"1\":{\"1160\":1}}],[\"个事件监听器\",{\"1\":{\"1158\":1}}],[\"个事件处理程序都工作正常\",{\"1\":{\"1145\":1}}],[\"个事件处理程序都是通过点击来触发\",{\"1\":{\"1145\":1}}],[\"个事件处理程序\",{\"1\":{\"1145\":1}}],[\"个事件\",{\"1\":{\"1144\":1,\"1160\":1}}],[\"个别属性示例\",{\"1\":{\"1098\":1}}],[\"个别方法演示\",{\"1\":{\"877\":3}}],[\"个方向按键\",{\"1\":{\"1154\":1}}],[\"个方面的数据\",{\"1\":{\"1000\":1}}],[\"个方法实现停止动画\",{\"1\":{\"1225\":1}}],[\"个方法都是获取节点的位置\",{\"1\":{\"1207\":1}}],[\"个方法进行介绍\",{\"1\":{\"1161\":1}}],[\"个方法的对象或函数\",{\"1\":{\"1025\":1}}],[\"个方法来找出非可迭代对象的键和值\",{\"1\":{\"830\":1}}],[\"个方法\",{\"1\":{\"830\":1,\"1161\":1,\"1205\":1,\"1209\":1}}],[\"个差别\",{\"1\":{\"989\":1}}],[\"个点\",{\"1\":{\"933\":1}}],[\"个通用方法\",{\"1\":{\"925\":1}}],[\"个通用的方法\",{\"1\":{\"869\":1}}],[\"个属性\",{\"1\":{\"923\":1,\"1015\":1}}],[\"个属性结合起来设置拖放的视觉效果\",{\"1\":{\"765\":1}}],[\"个用于存储捕获组的构造函数属性\",{\"1\":{\"911\":1,\"924\":1,\"925\":1}}],[\"个用于迭代可迭代元素的方法\",{\"1\":{\"846\":1}}],[\"个捕获组\",{\"1\":{\"911\":1}}],[\"个括号\",{\"1\":{\"911\":1}}],[\"个字符可能被当做元字符\",{\"1\":{\"903\":1}}],[\"个函数\",{\"1\":{\"883\":1}}],[\"个或者\",{\"1\":{\"883\":2}}],[\"个实例方法\",{\"1\":{\"877\":1}}],[\"个值可以在后面用于根据用户的选择来判断是否要显示桌面通知\",{\"1\":{\"1105\":1}}],[\"个值会转为\",{\"1\":{\"801\":1}}],[\"个值是对应着布尔类型里面的\",{\"1\":{\"796\":1}}],[\"个值\",{\"1\":{\"770\":1,\"1153\":1}}],[\"个值中没有\",{\"1\":{\"574\":1}}],[\"个容器都设置了\",{\"1\":{\"765\":1}}],[\"个为图标元素离鼠标指针的\",{\"1\":{\"765\":2}}],[\"个为图标元素\",{\"1\":{\"765\":1}}],[\"个表示要存入数据种类的字符串\",{\"1\":{\"765\":1}}],[\"个标签可以实现在网页中快速插入音频和视频\",{\"1\":{\"746\":1}}],[\"个参数表示动画播放完成后执行的回调函数\",{\"1\":{\"1221\":1}}],[\"个参数表示动画播放的事件\",{\"1\":{\"1221\":1}}],[\"个参数的规则与getdata\",{\"1\":{\"1161\":1}}],[\"个参数也是数据类型\",{\"1\":{\"1161\":1}}],[\"个参数传入要绑定的函数名即可\",{\"1\":{\"1146\":1}}],[\"个参数是要放在剪贴板中的文本\",{\"1\":{\"1161\":1}}],[\"个参数是一个\",{\"1\":{\"1105\":1}}],[\"个参数是\",{\"1\":{\"1105\":1}}],[\"个参数之间的随机数\",{\"1\":{\"883\":2}}],[\"个参数为要存入的数据\",{\"1\":{\"765\":1}}],[\"个参数\",{\"1\":{\"722\":1,\"725\":1,\"765\":2,\"854\":4,\"883\":3,\"946\":1,\"1038\":1,\"1088\":1,\"1145\":1,\"1224\":1,\"1225\":1,\"2050\":1,\"2059\":1}}],[\"个可能的值\",{\"1\":{\"708\":1}}],[\"个像素在不同的设备下意义是不一样的\",{\"1\":{\"650\":1}}],[\"个元素产生一个数组值\",{\"1\":{\"1926\":1}}],[\"个元素\",{\"1\":{\"520\":1,\"1158\":1}}],[\"个元素的\",{\"1\":{\"391\":1}}],[\"个占位符\",{\"1\":{\"387\":1}}],[\"个cookie\",{\"1\":{\"350\":2}}],[\"个\",{\"1\":{\"304\":1,\"381\":2,\"520\":1,\"767\":1,\"796\":1,\"883\":2,\"911\":2,\"925\":1,\"1149\":1,\"1205\":1,\"1208\":1,\"1239\":1,\"1809\":1,\"1813\":1,\"1818\":1}}],[\"个性化读取\",{\"0\":{\"208\":1}}],[\"个人项目\",{\"1\":{\"89\":1}}],[\"个人电脑的配置开始飞跃\",{\"1\":{\"24\":1}}],[\"zero\",{\"1\":{\"1659\":2,\"1680\":1}}],[\"zzizmzq1z2v3nduymzizngvy\",{\"1\":{\"1648\":1}}],[\"zzz\",{\"1\":{\"368\":1}}],[\"za\",{\"1\":{\"904\":3}}],[\"zone\",{\"1\":{\"772\":2}}],[\"zcoolkuaile\",{\"1\":{\"621\":1}}],[\"zhangxiaosan\",{\"1\":{\"992\":3}}],[\"zhangsan\",{\"1\":{\"176\":1,\"350\":1,\"355\":2,\"368\":1,\"429\":2,\"433\":3,\"982\":3,\"983\":3,\"984\":1,\"992\":2,\"1028\":3}}],[\"zhihu\",{\"1\":{\"624\":1}}],[\"zhuanlan\",{\"1\":{\"624\":1}}],[\"zh\",{\"1\":{\"271\":1,\"773\":1,\"958\":1,\"1105\":1,\"1482\":1,\"1491\":2,\"1587\":1,\"1591\":1,\"2041\":1}}],[\"z\",{\"0\":{\"578\":1},\"1\":{\"257\":1,\"472\":3,\"575\":1,\"576\":1,\"578\":3,\"616\":5,\"617\":1,\"780\":1,\"856\":1,\"889\":1,\"894\":2,\"904\":3,\"912\":1,\"918\":5,\"921\":1,\"1039\":8,\"1058\":1,\"1676\":2,\"1974\":2}}],[\"zip后类型位zip类型\",{\"1\":{\"401\":1}}],[\"zip\",{\"1\":{\"15\":1,\"177\":1,\"401\":2}}],[\"请稍后重试\",{\"1\":{\"1580\":1}}],[\"请缓存\",{\"1\":{\"1539\":1}}],[\"请问这个资源的编号发生变动了吗\",{\"1\":{\"1537\":1}}],[\"请问这个资源在这个时间之后有发生变动吗\",{\"1\":{\"1537\":1}}],[\"请使用如下\",{\"1\":{\"1396\":1}}],[\"请输入名字\",{\"1\":{\"1393\":1}}],[\"请介绍一下\",{\"1\":{\"1031\":1}}],[\"请相应地修改此代码段\",{\"1\":{\"772\":1}}],[\"请升级浏览器\",{\"1\":{\"668\":1}}],[\"请女朋友吃饭\",{\"1\":{\"176\":1}}],[\"请求还是第三方请求\",{\"1\":{\"2088\":1}}],[\"请求还未初始化\",{\"1\":{\"1575\":1}}],[\"请求和跨站点\",{\"1\":{\"2088\":1}}],[\"请求以完成握手\",{\"1\":{\"1649\":1}}],[\"请求了服务器\",{\"1\":{\"1646\":1}}],[\"请求因为超时而结束时\",{\"1\":{\"1646\":1}}],[\"请求查询是否有数据\",{\"1\":{\"1646\":1}}],[\"请求必须在前\",{\"1\":{\"1644\":1}}],[\"请求就是一个附带身份凭证的请求\",{\"1\":{\"1612\":1}}],[\"请求分类\",{\"0\":{\"1606\":1}}],[\"请求页面的源称之为页面源\",{\"1\":{\"1602\":1}}],[\"请求并获取响应数据\",{\"0\":{\"1589\":1}}],[\"请求已完成并且响应已准备好\",{\"1\":{\"1575\":1}}],[\"请求已接受\",{\"1\":{\"1575\":1}}],[\"请求使用\",{\"1\":{\"1575\":1}}],[\"请求不传\",{\"1\":{\"1575\":1}}],[\"请求取消\",{\"1\":{\"1572\":1}}],[\"请求得到的页面则没有提示\",{\"1\":{\"1569\":1}}],[\"请求得到的\",{\"1\":{\"1569\":1}}],[\"请求传递的数据都附带在\",{\"1\":{\"1569\":1}}],[\"请求没有限制\",{\"1\":{\"1569\":1}}],[\"请求只能传递\",{\"1\":{\"1569\":1}}],[\"请求时发送\",{\"1\":{\"2088\":1}}],[\"请求时\",{\"1\":{\"1569\":2}}],[\"请求中发送\",{\"1\":{\"2088\":1}}],[\"请求中包含转账金额和接收方账户信息\",{\"1\":{\"2087\":1}}],[\"请求中\",{\"1\":{\"1468\":1}}],[\"请求中的\",{\"1\":{\"293\":1}}],[\"请求资源时必须加前缀\",{\"1\":{\"1445\":1}}],[\"请求资源时直接发给前端\",{\"1\":{\"1444\":1}}],[\"请求失败了\",{\"1\":{\"1445\":1}}],[\"请求成功了\",{\"1\":{\"1445\":1}}],[\"请求都可以用它来实现\",{\"1\":{\"1227\":1}}],[\"请求服务器\",{\"1\":{\"1226\":1}}],[\"请求一个位置信息\",{\"1\":{\"1099\":1}}],[\"请求会发送到\",{\"1\":{\"373\":1}}],[\"请求参数时给\",{\"1\":{\"1579\":1}}],[\"请求参数\",{\"1\":{\"338\":1,\"1584\":2,\"1585\":1}}],[\"请求则没有\",{\"1\":{\"296\":1}}],[\"请求大小有限制\",{\"1\":{\"296\":1}}],[\"请求相对\",{\"1\":{\"296\":1}}],[\"请求的传递信息量是没有限制的\",{\"1\":{\"1569\":1}}],[\"请求的传递信息量有限\",{\"1\":{\"1569\":1}}],[\"请求的代码\",{\"1\":{\"1177\":1}}],[\"请求的\",{\"1\":{\"1093\":1,\"1228\":1,\"1229\":1,\"2051\":1}}],[\"请求的并发控制\",{\"0\":{\"499\":1}}],[\"请求的区别\",{\"0\":{\"296\":1}}],[\"请求的情况\",{\"1\":{\"295\":2}}],[\"请求的时候\",{\"1\":{\"273\":1}}],[\"请求地址格式如下\",{\"1\":{\"1648\":1}}],[\"请求地址\",{\"1\":{\"285\":1,\"1227\":1,\"1589\":1,\"1592\":1}}],[\"请求类型\",{\"1\":{\"285\":1,\"339\":1,\"1227\":1}}],[\"请求路径\",{\"1\":{\"282\":1}}],[\"请求版本\",{\"1\":{\"282\":1}}],[\"请求方法仅有语义的区别\",{\"1\":{\"1632\":1}}],[\"请求方法是get\",{\"1\":{\"1607\":1}}],[\"请求方法\",{\"0\":{\"1632\":1},\"1\":{\"268\":1,\"282\":1,\"304\":1,\"338\":1,\"339\":1,\"1586\":1,\"1587\":1,\"1589\":1,\"1592\":1}}],[\"请求体可以用不同的格式发出\",{\"1\":{\"1634\":1}}],[\"请求体的数据为loginid\",{\"1\":{\"1634\":1}}],[\"请求体参数\",{\"1\":{\"1586\":1}}],[\"请求体内容的格式是非常灵活的\",{\"1\":{\"270\":1}}],[\"请求体\",{\"1\":{\"267\":1,\"282\":1,\"1585\":1,\"1587\":1,\"1629\":1}}],[\"请求头中要分别加入upgrade\",{\"1\":{\"1649\":1}}],[\"请求头如下\",{\"1\":{\"1648\":1}}],[\"请求头参数\",{\"1\":{\"1585\":1}}],[\"请求头\",{\"0\":{\"269\":1,\"1633\":1,\"1634\":1},\"1\":{\"267\":1,\"269\":1,\"282\":1,\"1584\":1,\"1587\":1,\"1629\":1}}],[\"请求行中的\",{\"1\":{\"1649\":1}}],[\"请求行中的第一个单词是请求方法\",{\"1\":{\"1632\":1}}],[\"请求行\",{\"1\":{\"267\":1,\"1629\":1}}],[\"请求报文的获取\",{\"1\":{\"305\":1}}],[\"请求报文的组成\",{\"0\":{\"267\":1}}],[\"请求报文\",{\"0\":{\"282\":1},\"1\":{\"266\":1}}],[\"请求获取该\",{\"1\":{\"158\":1}}],[\"请求来获取更改内容\",{\"1\":{\"158\":1}}],[\"请求过多\",{\"1\":{\"31\":1}}],[\"请求\",{\"0\":{\"1576\":1,\"1577\":1,\"1584\":1,\"1585\":1},\"1\":{\"17\":1,\"134\":1,\"268\":1,\"269\":1,\"295\":2,\"296\":1,\"1173\":1,\"1410\":1,\"1530\":1,\"1568\":1,\"1569\":2,\"1575\":1,\"1593\":1,\"1614\":1,\"1628\":2,\"1630\":1,\"1644\":1,\"1646\":1,\"1897\":2}}],[\"买电脑\",{\"1\":{\"176\":1}}],[\"安全\",{\"1\":{\"2100\":1}}],[\"安全套接字协议\",{\"1\":{\"2091\":1}}],[\"安全规范\",{\"1\":{\"1607\":1}}],[\"安全协议有\",{\"1\":{\"345\":1}}],[\"安全一些\",{\"1\":{\"296\":1}}],[\"安全性比\",{\"1\":{\"362\":1}}],[\"安全性相对较低\",{\"1\":{\"356\":1}}],[\"安全性\",{\"1\":{\"218\":1,\"356\":1}}],[\"安全性更强\",{\"1\":{\"174\":1}}],[\"安装与使用\",{\"0\":{\"2009\":1}}],[\"安装vscode插件rest\",{\"1\":{\"1630\":1}}],[\"安装vue\",{\"1\":{\"1456\":1}}],[\"安装依赖\",{\"1\":{\"1483\":1,\"1591\":1}}],[\"安装或者升级你的\",{\"1\":{\"1482\":1}}],[\"安装全局事件总线\",{\"1\":{\"1438\":2}}],[\"安装之后只要是同一域下面的其他\",{\"1\":{\"770\":1}}],[\"安装并导入的模块\",{\"1\":{\"377\":1}}],[\"安装express\",{\"0\":{\"331\":1},\"1\":{\"355\":1}}],[\"安装软件\",{\"1\":{\"248\":1}}],[\"安装及使用\",{\"1\":{\"228\":1}}],[\"安装的\",{\"1\":{\"228\":1}}],[\"安装预设\",{\"1\":{\"148\":1}}],[\"安装完字体文件库之后\",{\"1\":{\"143\":1}}],[\"安装命令为\",{\"1\":{\"133\":1}}],[\"安装方式\",{\"1\":{\"123\":1}}],[\"安装项目依赖\",{\"1\":{\"82\":1,\"87\":1}}],[\"安装包安装\",{\"0\":{\"227\":1}}],[\"安装包\",{\"1\":{\"82\":1,\"87\":1}}],[\"安装包依赖\",{\"0\":{\"74\":1}}],[\"安装指定版本的\",{\"1\":{\"229\":1}}],[\"安装指定版本的包\",{\"0\":{\"75\":1}}],[\"安装指定包的时候\",{\"1\":{\"68\":1}}],[\"安装\",{\"0\":{\"2\":1,\"81\":1,\"86\":1,\"190\":1,\"1426\":1,\"2008\":1},\"1\":{\"66\":1,\"69\":1,\"86\":1,\"123\":1,\"138\":1,\"143\":1,\"149\":1,\"212\":1,\"228\":1,\"300\":1,\"349\":1,\"1439\":1,\"1583\":1,\"1824\":1}}],[\"扩展自\",{\"1\":{\"1300\":1}}],[\"扩展多个方法\",{\"1\":{\"1201\":1}}],[\"扩展一个方法\",{\"1\":{\"1201\":1}}],[\"扩展运算符是\",{\"1\":{\"849\":1}}],[\"扩展运算符\",{\"0\":{\"849\":1}}],[\"扩展\",{\"0\":{\"794\":1,\"833\":1,\"835\":1,\"865\":1,\"872\":1,\"875\":1,\"907\":1,\"908\":1,\"912\":1,\"913\":1,\"915\":1,\"924\":1,\"946\":1,\"952\":1,\"953\":1,\"1157\":1},\"1\":{\"846\":1,\"925\":1,\"1154\":1,\"1156\":1,\"1502\":1}}],[\"扩展阅读\",{\"1\":{\"339\":1,\"368\":1}}],[\"扩展文件也可以不写后缀\",{\"1\":{\"238\":1}}],[\"扩展性更强\",{\"1\":{\"174\":1,\"361\":1}}],[\"扩展内容\",{\"0\":{\"94\":1}}],[\"相应地对代理操作进行改进\",{\"1\":{\"1888\":1}}],[\"相应的\",{\"1\":{\"1485\":1}}],[\"相应的处理方法执行后就自动被删除\",{\"1\":{\"1216\":1}}],[\"相差较大\",{\"1\":{\"1748\":1}}],[\"相近成语\",{\"0\":{\"1705\":1}}],[\"相较于其他的一些小的改动\",{\"1\":{\"1485\":1}}],[\"相等\",{\"1\":{\"1052\":1}}],[\"相等和不相等\",{\"0\":{\"813\":1}}],[\"相反\",{\"1\":{\"1030\":1}}],[\"相关处理\",{\"1\":{\"2041\":1}}],[\"相关代码位于patchcomponent中\",{\"1\":{\"1955\":1}}],[\"相关联的副作用函数并执行\",{\"1\":{\"1932\":1}}],[\"相关联的副作用函数重新执行\",{\"1\":{\"1906\":1,\"1930\":1,\"1932\":1,\"1990\":1}}],[\"相关联的副作用函数也添加到\",{\"1\":{\"1906\":1}}],[\"相关联的副作用函数添加到\",{\"1\":{\"1906\":1}}],[\"相关联的副作用函数\",{\"1\":{\"1889\":1,\"1906\":2,\"1917\":1,\"1993\":1}}],[\"相关\",{\"0\":{\"1675\":1,\"1786\":1},\"1\":{\"1436\":1,\"1721\":1}}],[\"相关事件\",{\"0\":{\"752\":1}}],[\"相关函数\",{\"0\":{\"751\":1}}],[\"相关属性\",{\"0\":{\"750\":1}}],[\"相关文档链接\",{\"1\":{\"694\":1}}],[\"相关的兼容性选项\",{\"1\":{\"2063\":1}}],[\"相关的众多信息\",{\"1\":{\"2051\":1}}],[\"相关的\",{\"0\":{\"1430\":1},\"1\":{\"216\":1,\"2050\":1,\"2061\":1}}],[\"相邻元素间距离相同\",{\"1\":{\"588\":2}}],[\"相邻的垂直方向外边距会发生\",{\"1\":{\"558\":1}}],[\"相邻\",{\"1\":{\"552\":1,\"588\":1}}],[\"相比\",{\"1\":{\"2087\":1}}],[\"相比于旧的\",{\"1\":{\"1485\":1}}],[\"相比于\",{\"1\":{\"750\":1}}],[\"相比于纯文件管理数据\",{\"1\":{\"174\":1}}],[\"相比其他服务端语言\",{\"1\":{\"507\":1}}],[\"相同代码块不需要传递不同的值\",{\"1\":{\"1299\":1}}],[\"相同代码块需要在不同环境传递不同值时\",{\"1\":{\"1299\":1}}],[\"相同的路由记录\",{\"1\":{\"2065\":1}}],[\"相同的前置节点和后置节点\",{\"1\":{\"1968\":1}}],[\"相同的前置和后置节点\",{\"1\":{\"1968\":1}}],[\"相同的话则进行两节点间的patch操作\",{\"1\":{\"1394\":1}}],[\"相同的\",{\"1\":{\"1394\":1}}],[\"相同的样式代码\",{\"1\":{\"1299\":1}}],[\"相同的形参名会报错\",{\"1\":{\"958\":1}}],[\"相同的数可以到任一边\",{\"1\":{\"415\":1}}],[\"相同\",{\"1\":{\"369\":1,\"548\":1,\"1161\":1,\"1253\":1,\"1394\":1,\"1445\":1,\"1969\":1,\"2065\":1}}],[\"相对包含块的位置\",{\"1\":{\"1526\":1}}],[\"相对单位会变成绝对单位\",{\"1\":{\"1526\":1}}],[\"相对于\",{\"1\":{\"1649\":1}}],[\"相对于事件源位置\",{\"1\":{\"1153\":1}}],[\"相对于屏幕位置\",{\"1\":{\"1153\":1}}],[\"相对于浏览器器位置\",{\"1\":{\"1153\":1}}],[\"相对于原点\",{\"1\":{\"706\":1}}],[\"相对于其前面的内容它会出现在新的一行\",{\"1\":{\"661\":1}}],[\"相对于根元素的一个\",{\"1\":{\"621\":1}}],[\"相对定位不会改变元素的性质\",{\"1\":{\"569\":1}}],[\"相对定位不会使元素脱离文档流\",{\"1\":{\"569\":1}}],[\"相对定位会提升元素的层级\",{\"1\":{\"569\":1}}],[\"相对定位是参照于元素在文档流中的位置进行定位的\",{\"1\":{\"569\":1}}],[\"相对定位的特点\",{\"1\":{\"569\":1}}],[\"相对定位\",{\"0\":{\"569\":1}}],[\"相对长度单位\",{\"1\":{\"534\":1}}],[\"相对更安全\",{\"1\":{\"361\":1}}],[\"相对\",{\"1\":{\"356\":1}}],[\"相对重要\",{\"1\":{\"305\":1}}],[\"相对路径在发送请求时\",{\"1\":{\"292\":1}}],[\"相对路径中所谓的\",{\"1\":{\"261\":1}}],[\"相对路径问题\",{\"0\":{\"261\":1}}],[\"相对路径\",{\"0\":{\"292\":1},\"1\":{\"238\":1,\"261\":1,\"290\":1}}],[\"相当于告诉\",{\"1\":{\"2068\":1}}],[\"相当于是一个开关\",{\"1\":{\"2061\":1}}],[\"相当于是增删改操作都可以用这个方法来实现\",{\"1\":{\"854\":1}}],[\"相当于vue2中watcher实例的deps数组\",{\"1\":{\"1890\":1}}],[\"相当于就是\",{\"1\":{\"1320\":1}}],[\"相当于还是全局调用\",{\"1\":{\"992\":1}}],[\"相当于只支持向前看\",{\"1\":{\"918\":1}}],[\"相当于边框会渲染在\",{\"1\":{\"707\":1}}],[\"相当于当前元素的一个\",{\"1\":{\"621\":1}}],[\"相当于一个\",{\"1\":{\"402\":1}}],[\"相当于\",{\"1\":{\"397\":1,\"906\":3,\"908\":3,\"1055\":1,\"1493\":3,\"1902\":1,\"2031\":1}}],[\"相当于集合中的一个具体的文档\",{\"1\":{\"189\":1}}],[\"相当于mongodb数据库中的集合collection\",{\"1\":{\"189\":1}}],[\"相继的\",{\"1\":{\"25\":1}}],[\"查找速度快\",{\"1\":{\"2016\":1}}],[\"查找\",{\"1\":{\"1308\":4}}],[\"查找模块\",{\"0\":{\"1308\":1}}],[\"查找元素的索引\",{\"0\":{\"1271\":1}}],[\"查找一个对象的原型对象\",{\"1\":{\"1056\":1}}],[\"查找对象的属性\",{\"1\":{\"1009\":1}}],[\"查阅文档之后\",{\"1\":{\"616\":1}}],[\"查询规则\",{\"1\":{\"651\":1}}],[\"查询字符串\",{\"0\":{\"279\":1,\"284\":1},\"1\":{\"268\":1,\"282\":1,\"284\":2}}],[\"查询数据\",{\"1\":{\"203\":1}}],[\"查询一条数据\",{\"1\":{\"203\":1}}],[\"查询\",{\"0\":{\"187\":1,\"203\":1},\"1\":{\"373\":1,\"1678\":2}}],[\"查询条件\",{\"1\":{\"181\":3}}],[\"查询文档\",{\"1\":{\"181\":1}}],[\"查\",{\"1\":{\"173\":1,\"199\":1}}],[\"查看第一个字符\",{\"1\":{\"1974\":1}}],[\"查看问题\",{\"1\":{\"1684\":1}}],[\"查看数据结构\",{\"0\":{\"1674\":1}}],[\"查看这个通知是否能够弹出来\",{\"1\":{\"1105\":1}}],[\"查看实际效果\",{\"1\":{\"634\":1}}],[\"查看字体库下载过程和使用方式\",{\"1\":{\"624\":1}}],[\"查看该变量的数据类型\",{\"1\":{\"380\":1}}],[\"查看a变量的标识\",{\"1\":{\"380\":1}}],[\"查看本机的\",{\"1\":{\"373\":1}}],[\"查看本地安装的所有的\",{\"1\":{\"229\":1}}],[\"查看响应体\",{\"0\":{\"281\":1}}],[\"查看响应行与响应头\",{\"0\":{\"280\":1}}],[\"查看请求体\",{\"0\":{\"278\":1}}],[\"查看请求行与请求头\",{\"0\":{\"277\":1}}],[\"查看资源状态\",{\"0\":{\"260\":1}}],[\"查看聊天记录\",{\"1\":{\"253\":1}}],[\"查看日志\",{\"1\":{\"253\":1}}],[\"查看图片\",{\"1\":{\"253\":1}}],[\"查看自执行函数\",{\"1\":{\"239\":1}}],[\"查看\",{\"0\":{\"279\":1},\"1\":{\"88\":1,\"348\":1,\"1482\":1}}],[\"查看可选的源\",{\"1\":{\"69\":1}}],[\"查看版本时可能与上图版本号不一样\",{\"1\":{\"62\":1}}],[\"查看版本号测试\",{\"1\":{\"62\":1}}],[\"查看当前遍历到的\",{\"1\":{\"2081\":1}}],[\"查看当前页面的\",{\"1\":{\"1093\":1}}],[\"查看当前进程\",{\"1\":{\"408\":1}}],[\"查看当前使用的nvm版本\",{\"1\":{\"229\":1}}],[\"查看当前操作的数据库\",{\"1\":{\"179\":1}}],[\"查看当前分支\",{\"1\":{\"10\":1}}],[\"查看当前仓库的状态\",{\"0\":{\"5\":1}}],[\"查看当前的\",{\"1\":{\"3\":1}}],[\"改写\",{\"1\":{\"1889\":1}}],[\"改写后的方法对象\",{\"1\":{\"1785\":1}}],[\"改进\",{\"1\":{\"1888\":1}}],[\"改造旧的\",{\"1\":{\"1789\":1}}],[\"改良旧的换新的\",{\"1\":{\"1705\":1}}],[\"改动属性造成的\",{\"1\":{\"1527\":1}}],[\"改成reflect\",{\"1\":{\"1902\":1}}],[\"改成\",{\"1\":{\"1290\":1}}],[\"改为\",{\"1\":{\"1123\":1,\"1315\":1}}],[\"改\",{\"1\":{\"173\":1,\"402\":1}}],[\"改变之后\",{\"1\":{\"2049\":1}}],[\"改变函数的指向问题\",{\"1\":{\"2020\":1}}],[\"改变promise的状态\",{\"1\":{\"1777\":1}}],[\"改变this\",{\"1\":{\"995\":1}}],[\"改变源对象的\",{\"1\":{\"764\":1}}],[\"改变变形原点\",{\"0\":{\"619\":1}}],[\"改变子类构造函数的原型对象\",{\"1\":{\"466\":1,\"1071\":1,\"1072\":1}}],[\"改变了函数本身的名称\",{\"1\":{\"402\":1}}],[\"改变输出结果\",{\"1\":{\"156\":1}}],[\"改变\",{\"0\":{\"994\":1},\"1\":{\"154\":1,\"953\":2}}],[\"删\",{\"1\":{\"173\":1}}],[\"删除掉了\",{\"1\":{\"2061\":1}}],[\"删除方法意味着将之前推入到\",{\"1\":{\"2061\":1}}],[\"删除方法还被推入到了\",{\"1\":{\"2061\":1}}],[\"删除函数\",{\"1\":{\"2061\":1}}],[\"删除等操作\",{\"1\":{\"1976\":1}}],[\"删除不存在的\",{\"1\":{\"1955\":1}}],[\"删除指定\",{\"1\":{\"1926\":1}}],[\"删除对象已有的属性值\",{\"1\":{\"1906\":1}}],[\"删除对象属性\",{\"0\":{\"829\":1}}],[\"删除属性\",{\"1\":{\"1490\":1}}],[\"删除节点\",{\"0\":{\"1211\":1},\"1\":{\"1789\":2}}],[\"删除节点等等\",{\"1\":{\"1208\":1}}],[\"删除事件绑定\",{\"1\":{\"1146\":1}}],[\"删除事件监听器\",{\"0\":{\"1146\":1}}],[\"删除的方法很简单\",{\"1\":{\"1146\":1}}],[\"删除最后一个会报错\",{\"1\":{\"1121\":1}}],[\"删除变量或者不允许删除的属性虽然也会失败\",{\"1\":{\"958\":1}}],[\"删除变量和不存在的属性会报错\",{\"1\":{\"958\":1}}],[\"删除arr数组的指向\",{\"1\":{\"865\":1}}],[\"删除集合值\",{\"1\":{\"862\":1}}],[\"删除5个元素\",{\"1\":{\"854\":1}}],[\"删除数组中的第3个元素\",{\"1\":{\"845\":1}}],[\"删除元素节点的属性\",{\"1\":{\"1125\":1}}],[\"删除元素\",{\"0\":{\"845\":1}}],[\"删除与切换\",{\"1\":{\"685\":1}}],[\"删除线\",{\"1\":{\"625\":1}}],[\"删除实例化对象\",{\"1\":{\"405\":1}}],[\"删除动态属性\",{\"1\":{\"405\":1}}],[\"删除cookie\",{\"1\":{\"349\":1}}],[\"删除歌曲\",{\"1\":{\"339\":1}}],[\"删除紧随其后的换行符\",{\"1\":{\"328\":1}}],[\"删除其前面的空格符\",{\"1\":{\"328\":1}}],[\"删除失败\",{\"1\":{\"255\":1}}],[\"删除成功\",{\"1\":{\"201\":2,\"255\":2,\"259\":2}}],[\"删除一条数据\",{\"1\":{\"201\":1}}],[\"删除微博\",{\"1\":{\"185\":1}}],[\"删除视频\",{\"1\":{\"185\":1}}],[\"删除商品\",{\"1\":{\"185\":1}}],[\"删除评论\",{\"1\":{\"185\":1}}],[\"删除文章\",{\"1\":{\"185\":1}}],[\"删除文档内容\",{\"1\":{\"1109\":1}}],[\"删除文档\",{\"1\":{\"181\":1}}],[\"删除文件夹\",{\"0\":{\"259\":1},\"1\":{\"256\":1}}],[\"删除文件\",{\"1\":{\"8\":2,\"404\":1}}],[\"删除某个集合\",{\"1\":{\"180\":1}}],[\"删除当前数据库\",{\"1\":{\"179\":1}}],[\"删除项目依赖包yarn\",{\"1\":{\"87\":1}}],[\"删除包需要满足一定的条件\",{\"1\":{\"93\":1}}],[\"删除包\",{\"0\":{\"93\":1},\"1\":{\"87\":1}}],[\"删除依赖\",{\"0\":{\"76\":1}}],[\"删除\",{\"0\":{\"185\":1,\"201\":1},\"1\":{\"58\":1,\"82\":1,\"199\":1,\"256\":1,\"348\":1,\"349\":1,\"404\":1,\"829\":2,\"854\":2,\"1205\":1,\"1370\":2,\"1632\":1,\"1890\":1}}],[\"删除远程分支\",{\"1\":{\"17\":1}}],[\"删除远程标签\",{\"1\":{\"14\":1}}],[\"删除标签\",{\"1\":{\"14\":1}}],[\"删除关联的远程库\",{\"1\":{\"13\":1}}],[\"删除分支\",{\"1\":{\"10\":1,\"11\":1}}],[\"增量贡献率＝\",{\"1\":{\"1750\":1}}],[\"增量大小比较\",{\"0\":{\"1738\":1}}],[\"增速和贸易顺差进口额增速\",{\"1\":{\"1740\":1}}],[\"增速和两部分\",{\"1\":{\"1740\":1}}],[\"增速\",{\"1\":{\"1737\":3,\"1740\":1}}],[\"增长了\",{\"1\":{\"1746\":2}}],[\"增长量\",{\"0\":{\"1729\":1},\"1\":{\"1721\":1,\"1722\":1,\"1753\":1}}],[\"增长率和增长量\",{\"1\":{\"1725\":1}}],[\"增长率为负数时变化量\",{\"1\":{\"1722\":1}}],[\"增长率\",{\"0\":{\"1728\":1},\"1\":{\"1721\":1,\"1722\":1,\"1728\":2,\"1753\":1}}],[\"增\",{\"1\":{\"173\":1}}],[\"增加退出阶段的回调函数数组\",{\"1\":{\"1977\":1}}],[\"增加两个判断分支\",{\"1\":{\"1966\":1}}],[\"增加第四个参数\",{\"1\":{\"1918\":1,\"1993\":1}}],[\"增加第三个参数\",{\"1\":{\"1914\":1,\"1992\":1}}],[\"增加一个节点到指定节点之前\",{\"1\":{\"1209\":2}}],[\"增加一个节点到指定节点之后\",{\"1\":{\"1209\":2}}],[\"增加节点\",{\"0\":{\"1209\":1},\"1\":{\"1208\":1}}],[\"增加运行速度\",{\"1\":{\"956\":1,\"959\":1}}],[\"增加服务节点更简单\",{\"1\":{\"361\":1}}],[\"增加\",{\"0\":{\"200\":1},\"1\":{\"149\":1,\"199\":1,\"1205\":1,\"1977\":3}}],[\"增加其他的\",{\"1\":{\"148\":1}}],[\"增加了密钥被窃取的风险\",{\"1\":{\"2099\":1}}],[\"增加了变量\",{\"1\":{\"1324\":1}}],[\"增加了\",{\"1\":{\"78\":1}}],[\"流\",{\"1\":{\"1572\":1}}],[\"流向页面\",{\"1\":{\"1356\":1}}],[\"流行的时代\",{\"1\":{\"948\":1}}],[\"流程如下所示\",{\"1\":{\"2034\":2}}],[\"流程简化\",{\"1\":{\"404\":1}}],[\"流程控制\",{\"0\":{\"167\":1,\"401\":1,\"817\":1,\"1283\":1},\"1\":{\"401\":1}}],[\"流式操作\",{\"1\":{\"263\":1}}],[\"流式读取\",{\"0\":{\"252\":1},\"1\":{\"249\":1}}],[\"流式写入方式适用于\",{\"1\":{\"247\":1}}],[\"流式写入可以减少打开关闭文件的次数\",{\"1\":{\"247\":1}}],[\"流式写入\",{\"0\":{\"247\":1},\"1\":{\"243\":1}}],[\"流产\",{\"1\":{\"23\":1}}],[\"带着原因更加全面\",{\"1\":{\"1689\":1}}],[\"带来不必要的性能开销\",{\"1\":{\"1906\":1}}],[\"带来的新协议\",{\"1\":{\"1649\":1}}],[\"带来了什么\",{\"0\":{\"1476\":1}}],[\"带响应体\",{\"1\":{\"1537\":1}}],[\"带给我们唯一的好处就是\",{\"1\":{\"1519\":1}}],[\"带参数的混合\",{\"0\":{\"1335\":1}}],[\"带参数请求是将参数放到请求体中\",{\"1\":{\"296\":1}}],[\"带参数请求是将参数缀到\",{\"1\":{\"296\":1}}],[\"带引号的字符串\",{\"1\":{\"1265\":1}}],[\"带引号或不带引号的字符串\",{\"1\":{\"1262\":1}}],[\"带屏幕的设备\",{\"1\":{\"651\":1}}],[\"带计数的线程同步机制\",{\"1\":{\"408\":1}}],[\"带有责任\",{\"1\":{\"1705\":1}}],[\"带有很多用于存储数据的属性和方法\",{\"1\":{\"769\":1}}],[\"带有剩余参数的函数对象\",{\"1\":{\"402\":1}}],[\"带有关系或相等运算符的二元表达式返回bool类型的值\",{\"1\":{\"166\":1}}],[\"带默认实参方式\",{\"1\":{\"402\":1}}],[\"带时效性\",{\"1\":{\"349\":1}}],[\"带后缀\",{\"1\":{\"264\":1}}],[\"带上\",{\"1\":{\"157\":1}}],[\"算是解决跨域问题的真正解决方式\",{\"1\":{\"1442\":1}}],[\"算作\",{\"1\":{\"1276\":1}}],[\"算术运算符\",{\"0\":{\"975\":1}}],[\"算术运算的时候\",{\"1\":{\"801\":1}}],[\"算起\",{\"1\":{\"923\":1}}],[\"算数和比较运算符的优先级大于逻辑运算符\",{\"1\":{\"816\":1}}],[\"算数运算符\",{\"0\":{\"165\":1,\"395\":1,\"803\":1}}],[\"算法可以使用散列算法来提高加密的强度和安全性\",{\"1\":{\"2101\":1}}],[\"算法将输入数据分成\",{\"1\":{\"2101\":2}}],[\"算法中预处理的步骤\",{\"1\":{\"1968\":1}}],[\"算法借鉴了纯文本\",{\"1\":{\"1968\":1}}],[\"算法是一种同时对新旧两组子节点的两个端点进行比较的算法\",{\"1\":{\"1965\":1}}],[\"算法的每一轮比较不一定都会命中四个步骤中的一种\",{\"1\":{\"1966\":1}}],[\"算法的每一轮比较都会命中四个步骤中的一种\",{\"1\":{\"1965\":1}}],[\"算法的问题在于\",{\"1\":{\"1964\":1}}],[\"算法的核心逻辑是\",{\"1\":{\"1962\":1}}],[\"算法\",{\"0\":{\"1787\":1,\"1789\":1,\"1959\":1},\"1\":{\"1659\":1,\"1782\":1,\"1951\":1,\"1959\":1}}],[\"算法或者是\",{\"1\":{\"363\":1}}],[\"算法与手写\",{\"0\":{\"101\":1},\"2\":{\"102\":1}}],[\"入\",{\"1\":{\"405\":1}}],[\"入与\",{\"1\":{\"405\":1}}],[\"入门教程\",{\"0\":{\"162\":1}}],[\"入口\",{\"1\":{\"155\":1}}],[\"入口模块\",{\"1\":{\"122\":1}}],[\"入口文件\",{\"1\":{\"47\":1,\"124\":1,\"1427\":1}}],[\"值可以是\",{\"1\":{\"2074\":1}}],[\"值可以从索引表中取出对应的节点的索引\",{\"1\":{\"1969\":1}}],[\"值会作为第三个参数的值的一部分传入\",{\"1\":{\"2061\":1}}],[\"值会返回\",{\"1\":{\"980\":1}}],[\"值相同\",{\"1\":{\"1962\":1}}],[\"值去设置\",{\"1\":{\"1949\":1}}],[\"值之间建立响应联系\",{\"1\":{\"1921\":1}}],[\"值指向另一个对象中的某个属性\",{\"1\":{\"1502\":1}}],[\"值不会带给服务器\",{\"1\":{\"1468\":1}}],[\"值不会包含在\",{\"1\":{\"1468\":1}}],[\"值或者绑定事件\",{\"1\":{\"1407\":1}}],[\"值同步更新\",{\"1\":{\"1358\":1}}],[\"值传给父组件\",{\"1\":{\"1358\":1}}],[\"值我们暂时先写成一个对象\",{\"1\":{\"1349\":1}}],[\"值通常为css选择器字符串\",{\"1\":{\"1349\":1}}],[\"值对的两元素列表\",{\"1\":{\"1276\":1}}],[\"值也是该类型的唯一值\",{\"1\":{\"1275\":1}}],[\"值得一提的是\",{\"1\":{\"1201\":1}}],[\"值默认为\",{\"1\":{\"1008\":1}}],[\"值表示空\",{\"1\":{\"980\":1}}],[\"值表示一个空对象指针\",{\"1\":{\"797\":1}}],[\"值绑定到函数上\",{\"1\":{\"942\":1}}],[\"值转换为字符串的错误\",{\"1\":{\"830\":1}}],[\"值派生而来的\",{\"1\":{\"797\":1}}],[\"值是代理对象\",{\"1\":{\"1929\":1}}],[\"值是从\",{\"1\":{\"797\":1}}],[\"值是可拖动元素的\",{\"1\":{\"765\":1}}],[\"值时会返回\",{\"1\":{\"797\":1}}],[\"值发生改变\",{\"1\":{\"770\":1}}],[\"值只能是字符串\",{\"1\":{\"769\":1}}],[\"值即可\",{\"1\":{\"764\":1}}],[\"值比\",{\"1\":{\"720\":1}}],[\"值和最小值\",{\"1\":{\"696\":1}}],[\"值和最大值\",{\"1\":{\"696\":1}}],[\"值域的上限边界值\",{\"1\":{\"696\":1}}],[\"值域的最小边界值\",{\"1\":{\"696\":1}}],[\"值才能向服务器传入数据\",{\"1\":{\"670\":1}}],[\"值越大元素的层级越高\",{\"1\":{\"575\":1}}],[\"值越大\",{\"1\":{\"569\":1}}],[\"值等于比较\",{\"1\":{\"398\":1}}],[\"值的计算\",{\"1\":{\"2061\":1}}],[\"值的计算值\",{\"1\":{\"560\":1}}],[\"值的变化来进行视图的切换\",{\"1\":{\"2049\":1}}],[\"值的改变不会导致向服务器发送请求\",{\"1\":{\"2049\":1}}],[\"值的节点\",{\"1\":{\"1962\":2}}],[\"值的两个节点\",{\"1\":{\"1962\":2}}],[\"值的元素\",{\"1\":{\"1918\":1,\"1993\":1}}],[\"值的类型是可以被任意修改的\",{\"1\":{\"393\":1}}],[\"值的字符串\",{\"1\":{\"388\":1}}],[\"值为以下三者之一\",{\"1\":{\"2074\":1}}],[\"值为对象\",{\"1\":{\"1493\":2}}],[\"值为一个函数\",{\"1\":{\"1486\":1}}],[\"值为字符串格式\",{\"1\":{\"1356\":1}}],[\"值为构造函数对象的prototype属性值\",{\"1\":{\"1073\":1}}],[\"值为undefined\",{\"1\":{\"925\":1}}],[\"值为\",{\"1\":{\"345\":1,\"720\":1,\"750\":1,\"758\":1,\"924\":1,\"958\":1,\"2058\":1}}],[\"值就会更改\",{\"1\":{\"159\":1}}],[\"值\",{\"0\":{\"965\":1},\"1\":{\"158\":1,\"250\":1,\"251\":1,\"535\":4,\"748\":1,\"794\":1,\"813\":1,\"830\":1,\"867\":3,\"925\":1,\"980\":1,\"1008\":1,\"1059\":1,\"1087\":1,\"1088\":1,\"1152\":1,\"1252\":1,\"1265\":1,\"1283\":1,\"1290\":3,\"1356\":1,\"1357\":4,\"1358\":1,\"1370\":1,\"1468\":2,\"1678\":1,\"1864\":1,\"1923\":1,\"1924\":1,\"1926\":4,\"1993\":1}}],[\"刷新的时候会将整个这个\",{\"1\":{\"2050\":1}}],[\"刷新页面时\",{\"1\":{\"1569\":1}}],[\"刷新\",{\"1\":{\"158\":1}}],[\"刷新浏览器\",{\"1\":{\"122\":1}}],[\"准备一个副作用函数栈\",{\"1\":{\"1891\":1}}],[\"准备一个vm实例对象\",{\"1\":{\"1396\":1}}],[\"准备等同步函数执行完后\",{\"1\":{\"1822\":1}}],[\"准备工作\",{\"0\":{\"1591\":1,\"2040\":1}}],[\"准备再次请求get\",{\"1\":{\"1535\":1}}],[\"准备state对象\",{\"1\":{\"1450\":1}}],[\"准备mutations对象\",{\"1\":{\"1450\":1}}],[\"准备actions对象\",{\"1\":{\"1450\":1}}],[\"准备好样式\",{\"1\":{\"1441\":1}}],[\"准备并运行铺助函数\",{\"1\":{\"37\":1}}],[\"准确的说是\",{\"1\":{\"158\":1}}],[\"参观前辈们经历的痛苦还是有益的\",{\"1\":{\"1644\":1}}],[\"参照点始终为当前视口的左上角\",{\"1\":{\"1153\":1}}],[\"参阅\",{\"1\":{\"752\":1}}],[\"参在前\",{\"1\":{\"402\":1}}],[\"参与加密的字符串\",{\"1\":{\"355\":1}}],[\"参数情况\",{\"0\":{\"2019\":1}}],[\"参数来收集所有的\",{\"1\":{\"2002\":1}}],[\"参数访问\",{\"0\":{\"1668\":1}}],[\"参数和\",{\"1\":{\"1656\":1}}],[\"参数和之前一样\",{\"1\":{\"1222\":1,\"1223\":1}}],[\"参数中\",{\"1\":{\"1569\":1}}],[\"参数会是\",{\"1\":{\"1499\":1}}],[\"参数个数必须相同\",{\"1\":{\"1337\":1}}],[\"参数需要按顺序传递\",{\"1\":{\"1335\":1}}],[\"参数列表\",{\"0\":{\"1273\":1},\"1\":{\"1273\":1}}],[\"参数二\",{\"1\":{\"1213\":1}}],[\"参数一\",{\"1\":{\"1213\":1}}],[\"参数可以传递正则表达式的方法\",{\"0\":{\"894\":1}}],[\"参数可选\",{\"1\":{\"765\":1}}],[\"参数之间的随机数\",{\"1\":{\"883\":2}}],[\"参数是一个包含组件选项的对象\",{\"1\":{\"1825\":1}}],[\"参数是一个包含待解析的日期和时间的字符串\",{\"1\":{\"875\":1}}],[\"参数是固定的\",{\"1\":{\"875\":1}}],[\"参数表示你希望在场景内左上角绘制的像素数据所得到的设备坐标\",{\"1\":{\"738\":1}}],[\"参数必须是一个有效的\",{\"1\":{\"725\":1}}],[\"参数必须是一个\",{\"1\":{\"725\":1}}],[\"参数用弧度定义了开始以及结束的弧度\",{\"1\":{\"716\":1}}],[\"参数为cuda的编号\",{\"1\":{\"1676\":1}}],[\"参数为在setdata\",{\"1\":{\"765\":1}}],[\"参数为\",{\"1\":{\"520\":2}}],[\"参数的个数\",{\"1\":{\"487\":1}}],[\"参数`\",{\"1\":{\"486\":3}}],[\"参数类型\",{\"1\":{\"485\":1}}],[\"参数=\",{\"1\":{\"402\":1}}],[\"参数与\",{\"1\":{\"245\":1}}],[\"参数说明\",{\"1\":{\"244\":1,\"247\":1,\"250\":1,\"251\":1,\"252\":1,\"254\":1,\"255\":1,\"257\":1,\"258\":1,\"259\":1,\"260\":1}}],[\"参数都通过构造函数传入\",{\"1\":{\"156\":1}}],[\"参数\",{\"0\":{\"932\":1,\"1459\":1,\"1461\":1},\"1\":{\"156\":1,\"157\":1,\"245\":1,\"402\":5,\"716\":1,\"894\":1,\"1088\":12,\"1224\":4,\"1493\":1,\"1575\":1,\"1824\":1,\"1825\":1,\"1826\":1,\"1827\":1,\"1953\":1,\"1975\":1,\"2053\":1}}],[\"参考点为文档左上角\",{\"1\":{\"1153\":1}}],[\"参考点为电脑屏幕左上角\",{\"1\":{\"1153\":1}}],[\"参考答案\",{\"1\":{\"959\":1,\"1031\":1,\"1558\":1,\"1560\":2,\"1649\":3,\"2091\":4}}],[\"参考样式表中没有冲突的声名\",{\"1\":{\"529\":1}}],[\"参考链接\",{\"1\":{\"219\":1}}],[\"参考\",{\"1\":{\"133\":1,\"271\":1,\"624\":1,\"675\":1}}],[\"kb\",{\"1\":{\"767\":1}}],[\"kvalue\",{\"1\":{\"443\":2}}],[\"k++\",{\"1\":{\"416\":1,\"419\":1,\"436\":1,\"438\":3,\"441\":1,\"443\":1,\"482\":2}}],[\"kwargs=\",{\"1\":{\"408\":2}}],[\"kernel\",{\"1\":{\"1661\":4,\"1662\":1,\"1663\":3,\"1667\":3}}],[\"kebab\",{\"1\":{\"1370\":1,\"1408\":1,\"1419\":1}}],[\"keep\",{\"1\":{\"269\":1,\"1465\":2,\"2058\":1,\"2065\":2}}],[\"keyof\",{\"1\":{\"2047\":3}}],[\"key相关的副作用函数\",{\"1\":{\"1990\":1}}],[\"keyindex\",{\"1\":{\"1969\":3}}],[\"key为新子节点的key\",{\"1\":{\"1969\":1}}],[\"key的处理\",{\"1\":{\"1917\":1}}],[\"key对应的副作用函数重新执行\",{\"1\":{\"1906\":1}}],[\"key对应的副作用函数\",{\"1\":{\"1906\":1}}],[\"key=\",{\"1\":{\"1392\":3,\"1393\":1,\"1441\":2,\"1446\":2}}],[\"key2\",{\"1\":{\"1276\":1,\"1932\":1}}],[\"key1\",{\"1\":{\"1276\":1}}],[\"key属性是为了取代\",{\"1\":{\"1154\":1}}],[\"keycodes\",{\"1\":{\"1370\":1,\"1519\":1}}],[\"keycode\",{\"1\":{\"1154\":5,\"1370\":4,\"1480\":1}}],[\"keypress\",{\"1\":{\"1149\":1,\"1154\":1,\"1219\":1}}],[\"keypress和keyup\",{\"1\":{\"1149\":1}}],[\"keyup\",{\"1\":{\"1034\":1,\"1149\":1,\"1214\":1,\"1219\":1}}],[\"keydown\",{\"1\":{\"1034\":2,\"1149\":2,\"1154\":1,\"1214\":1,\"1219\":1,\"1370\":1}}],[\"keyfor\",{\"1\":{\"828\":3}}],[\"keyframes\",{\"1\":{\"643\":1}}],[\"keysiterationmethod\",{\"1\":{\"1932\":1}}],[\"keys\",{\"0\":{\"1061\":1,\"1932\":1},\"1\":{\"393\":1,\"482\":4,\"483\":1,\"830\":2,\"846\":1,\"863\":2,\"870\":2,\"871\":1,\"1061\":1,\"1396\":3,\"1678\":2,\"1769\":3,\"1785\":4,\"1795\":1,\"1803\":5,\"1804\":6,\"1906\":1,\"1926\":3,\"1932\":5,\"1955\":2,\"2021\":1}}],[\"keyword\",{\"1\":{\"284\":4,\"1393\":3,\"1395\":1,\"1507\":5,\"1799\":1}}],[\"keyword=h5\",{\"1\":{\"284\":1}}],[\"keywords\",{\"1\":{\"270\":1,\"402\":1,\"659\":1,\"1273\":3}}],[\"keywords=手机\",{\"1\":{\"270\":1}}],[\"key\",{\"0\":{\"1394\":1,\"1902\":1},\"1\":{\"176\":2,\"393\":1,\"472\":3,\"474\":4,\"483\":2,\"493\":10,\"494\":4,\"770\":2,\"830\":1,\"869\":2,\"1154\":5,\"1276\":1,\"1277\":2,\"1290\":1,\"1354\":1,\"1370\":1,\"1392\":1,\"1394\":10,\"1428\":11,\"1430\":1,\"1436\":2,\"1455\":3,\"1648\":1,\"1649\":1,\"1786\":14,\"1788\":2,\"1789\":5,\"1795\":2,\"1803\":14,\"1804\":54,\"1836\":3,\"1838\":3,\"1849\":2,\"1861\":3,\"1864\":1,\"1878\":5,\"1886\":4,\"1888\":4,\"1889\":26,\"1890\":5,\"1892\":2,\"1893\":2,\"1902\":9,\"1904\":2,\"1905\":3,\"1906\":20,\"1907\":4,\"1909\":5,\"1910\":9,\"1912\":4,\"1913\":4,\"1914\":19,\"1917\":8,\"1918\":11,\"1920\":2,\"1921\":6,\"1923\":8,\"1925\":1,\"1926\":9,\"1927\":12,\"1928\":17,\"1929\":18,\"1930\":9,\"1931\":2,\"1932\":13,\"1937\":8,\"1938\":7,\"1948\":6,\"1949\":13,\"1951\":10,\"1954\":7,\"1955\":3,\"1962\":9,\"1965\":8,\"1966\":10,\"1968\":4,\"1969\":7,\"1985\":11,\"1989\":1,\"1990\":15,\"1991\":4,\"1992\":6,\"1993\":22,\"2016\":1,\"2020\":4,\"2045\":3,\"2047\":9}}],[\"k\",{\"1\":{\"263\":1,\"416\":10,\"419\":4,\"436\":5,\"438\":7,\"441\":6,\"443\":4,\"482\":11,\"854\":2,\"1039\":4,\"1055\":2,\"1058\":2,\"1060\":3,\"1086\":2,\"1396\":5,\"1649\":1,\"1797\":1,\"1897\":2,\"1930\":4,\"1955\":6,\"1956\":18,\"1969\":7}}],[\"kind\",{\"1\":{\"156\":1}}],[\"koala\",{\"1\":{\"1324\":1}}],[\"koa\",{\"0\":{\"220\":1},\"1\":{\"25\":1,\"223\":2}}],[\"解密速度快\",{\"1\":{\"2099\":1}}],[\"解码参数\",{\"1\":{\"2045\":2}}],[\"解耦合\",{\"1\":{\"2016\":1}}],[\"解题思路\",{\"1\":{\"1748\":1}}],[\"解不出来\",{\"1\":{\"1635\":1}}],[\"解绑自定义事件this\",{\"1\":{\"1437\":1}}],[\"解绑自定义事件\",{\"1\":{\"1410\":1}}],[\"解构当前的对象数据\",{\"1\":{\"2021\":1}}],[\"解构\",{\"0\":{\"1290\":1}}],[\"解构是从\",{\"1\":{\"847\":1}}],[\"解构数组\",{\"0\":{\"847\":1}}],[\"解构我们也是可以像函数一样设置一个默认值的\",{\"1\":{\"832\":1}}],[\"解压到本地之后\",{\"1\":{\"623\":1}}],[\"解答此题的关键\",{\"1\":{\"491\":1}}],[\"解法\",{\"0\":{\"491\":1}}],[\"解锁\",{\"1\":{\"408\":1}}],[\"解析守卫\",{\"1\":{\"2071\":1}}],[\"解析异步路由组件\",{\"1\":{\"2029\":1}}],[\"解析props和attrs\",{\"1\":{\"2001\":1}}],[\"解析出回调和配置\",{\"1\":{\"1810\":1}}],[\"解析结束标签\",{\"1\":{\"1792\":1}}],[\"解析标签属性\",{\"1\":{\"1792\":1}}],[\"解析开始标签\",{\"1\":{\"1792\":2}}],[\"解析是否是开始标签\",{\"1\":{\"1792\":1}}],[\"解析是否是结束标签\",{\"1\":{\"1792\":1}}],[\"解析是否是doctype\",{\"1\":{\"1792\":1}}],[\"解析是否是条件注释\",{\"1\":{\"1792\":1}}],[\"解析游标\",{\"1\":{\"1792\":1}}],[\"解析文本\",{\"1\":{\"1791\":1}}],[\"解析器进行解析整个模板\",{\"1\":{\"1791\":1}}],[\"解析器是主线\",{\"1\":{\"1791\":1}}],[\"解析器\",{\"0\":{\"1792\":1,\"1973\":1},\"1\":{\"1790\":1,\"1791\":1,\"1972\":1}}],[\"解析器也不会检查实参的数量\",{\"1\":{\"931\":1}}],[\"解析过程中生成\",{\"1\":{\"1530\":1}}],[\"解析过程中遇到\",{\"1\":{\"1526\":1}}],[\"解析找到服务器的\",{\"1\":{\"1530\":1}}],[\"解析的根本原因\",{\"1\":{\"1526\":2}}],[\"解析其中\",{\"1\":{\"1428\":1}}],[\"解析时会帮我们创建\",{\"1\":{\"1423\":1}}],[\"解析模板属性时会解析出v\",{\"1\":{\"1388\":1,\"1392\":1}}],[\"解析一个\",{\"1\":{\"895\":1}}],[\"解析\",{\"1\":{\"284\":2,\"317\":3,\"368\":1,\"1526\":3,\"1530\":1,\"1556\":2}}],[\"解析路径\",{\"1\":{\"264\":1}}],[\"解析路径并返回对象\",{\"1\":{\"264\":1}}],[\"解析入口文件\",{\"1\":{\"155\":1}}],[\"解释阶段\",{\"1\":{\"1020\":1}}],[\"解释和执行两个阶段\",{\"1\":{\"1020\":1}}],[\"解释器遇到非匿名立即执行函数\",{\"1\":{\"948\":1}}],[\"解释器会先尝试从内置模块匹配\",{\"1\":{\"379\":1}}],[\"解释\",{\"1\":{\"176\":1,\"269\":1,\"757\":1}}],[\"解决死循环问题\",{\"1\":{\"1985\":1}}],[\"解决死循环的问题\",{\"1\":{\"1890\":1}}],[\"解决竞态问题\",{\"1\":{\"1897\":1}}],[\"解决读写操作一起时的无限递归\",{\"0\":{\"1892\":1}}],[\"解决跨域\",{\"1\":{\"1605\":1}}],[\"解决刷新页面服务端\",{\"1\":{\"1468\":1}}],[\"解决绝大部分兼容性问题\",{\"1\":{\"1195\":1}}],[\"解决性能问题的处理办法就有函数防抖和函数节流\",{\"1\":{\"1034\":1}}],[\"解决\",{\"1\":{\"1025\":1,\"1897\":1,\"1984\":1}}],[\"解决这个问题\",{\"1\":{\"995\":1}}],[\"解决这个问题有\",{\"1\":{\"948\":1}}],[\"解决命名冲突的方式\",{\"1\":{\"835\":1}}],[\"解决高度塌陷问题\",{\"1\":{\"564\":1}}],[\"解决外边距重叠问题\",{\"1\":{\"564\":1}}],[\"解决方法就是使用\",{\"1\":{\"995\":1}}],[\"解决方法\",{\"1\":{\"855\":1,\"995\":1}}],[\"解决方式\",{\"1\":{\"558\":1,\"1910\":1}}],[\"解决方案\",{\"0\":{\"502\":1,\"563\":1,\"1604\":1},\"1\":{\"402\":1,\"1433\":1,\"1579\":1},\"2\":{\"103\":1}}],[\"解决声名冲突的过程\",{\"1\":{\"522\":1}}],[\"解决最常见的跨域问题\",{\"1\":{\"507\":1}}],[\"解决数据不同步问题\",{\"1\":{\"408\":1}}],[\"解决封装函数过多的问题\",{\"1\":{\"402\":1}}],[\"解决xss和xsrf问题\",{\"1\":{\"368\":1}}],[\"解决中文乱码\",{\"1\":{\"285\":1}}],[\"解决问题\",{\"1\":{\"264\":1}}],[\"解决办法\",{\"0\":{\"118\":1}}],[\"解决办法其实很简单\",{\"1\":{\"37\":1}}],[\"解决了它\",{\"1\":{\"24\":1}}],[\"树后将其挂载到vnode\",{\"1\":{\"1862\":1}}],[\"树就关联起来了\",{\"1\":{\"1862\":1}}],[\"树挂载到组件占位符\",{\"1\":{\"1862\":1}}],[\"树完成后会触发\",{\"1\":{\"1530\":1}}],[\"树和布局树无法一一对应\",{\"1\":{\"1526\":1}}],[\"树和布局树并非一一对应\",{\"1\":{\"1526\":1}}],[\"树和\",{\"1\":{\"1526\":1}}],[\"树的过程中\",{\"1\":{\"1841\":1}}],[\"树的每一个节点\",{\"1\":{\"1526\":1}}],[\"树的生成必须暂停\",{\"1\":{\"1526\":1}}],[\"树的话\",{\"1\":{\"1163\":1}}],[\"树中不存在这些伪元素节点\",{\"1\":{\"1526\":1}}],[\"树中\",{\"1\":{\"1446\":1,\"1494\":1,\"1526\":1}}],[\"树依次向下\",{\"1\":{\"1140\":1}}],[\"树向上传播\",{\"1\":{\"1139\":1}}],[\"树\",{\"1\":{\"155\":1,\"1526\":4,\"1527\":1,\"1530\":2,\"1862\":1}}],[\"树状结构就意味着这个树会存在分支\",{\"1\":{\"10\":1}}],[\"困难\",{\"1\":{\"155\":1}}],[\"匿名块盒等等都会导致\",{\"1\":{\"1526\":1}}],[\"匿名函数自定义\",{\"1\":{\"1025\":1}}],[\"匿名函数自调用\",{\"1\":{\"29\":1}}],[\"匿名函数与\",{\"1\":{\"402\":2}}],[\"匿名函数与reduce函数组合\",{\"1\":{\"402\":1}}],[\"匿名\",{\"1\":{\"195\":1}}],[\"匿名闭包\",{\"1\":{\"155\":1}}],[\"前加\",{\"1\":{\"2053\":1}}],[\"前两种传参方式都用这个来解构store\",{\"1\":{\"2019\":1}}],[\"前文讲到\",{\"1\":{\"1923\":1}}],[\"前期比重=本期比重×部分增长率+1整体增长率+1​\",{\"1\":{\"1732\":1}}],[\"前进\",{\"1\":{\"1464\":1}}],[\"前的选择器\",{\"1\":{\"1340\":1}}],[\"前的选择器出现的地方全都替换为\",{\"1\":{\"1340\":1}}],[\"前的数值\",{\"1\":{\"806\":1}}],[\"前定义全局变量\",{\"1\":{\"1320\":1}}],[\"前半句将next\",{\"1\":{\"1187\":1}}],[\"前后两个页面共用一个窗口\",{\"1\":{\"1094\":1}}],[\"前后端通信\",{\"1\":{\"336\":1}}],[\"前后端通信的桥梁\",{\"1\":{\"335\":1}}],[\"前后端分离\",{\"1\":{\"219\":1}}],[\"前置守卫\",{\"1\":{\"2071\":1}}],[\"前置示例\",{\"1\":{\"806\":1}}],[\"前置知识\",{\"0\":{\"655\":1,\"1251\":1}}],[\"前面\",{\"1\":{\"1964\":1,\"1965\":1}}],[\"前面设置了\",{\"1\":{\"1932\":1}}],[\"前面的文本放入tokens中\",{\"1\":{\"1793\":1}}],[\"前面的都是纯文本\",{\"1\":{\"1792\":1}}],[\"前面加上元素名\",{\"0\":{\"1235\":1}}],[\"前面介绍\",{\"1\":{\"1105\":1}}],[\"前面是设定指定的时间周期后调用某个函数\",{\"1\":{\"1088\":1}}],[\"前面是设定指定的时间周期调用某个函数\",{\"1\":{\"1088\":1}}],[\"前面是fas或者fab\",{\"1\":{\"623\":1}}],[\"前面有介绍过\",{\"1\":{\"925\":1}}],[\"前面有提到\",{\"1\":{\"828\":1,\"922\":1}}],[\"前面有提到过\",{\"1\":{\"781\":1}}],[\"前面已经介绍过创建正则表达式对象时\",{\"1\":{\"919\":1}}],[\"前面或者后面\",{\"1\":{\"918\":1}}],[\"前面我们有提到过\",{\"1\":{\"864\":1}}],[\"前面我们已经见到过了\",{\"1\":{\"805\":1}}],[\"前面在介绍事件冒泡的时候\",{\"1\":{\"1158\":1}}],[\"前面在介绍遍历数组\",{\"1\":{\"830\":1}}],[\"前面在介绍布尔类型时所提到的\",{\"1\":{\"801\":1}}],[\"前面给大家介绍过的arguments就是一个伪数组对象\",{\"1\":{\"828\":1}}],[\"前三个参数则定义另一个以\",{\"1\":{\"726\":1}}],[\"前一个函数的返回结果\",{\"1\":{\"1040\":1}}],[\"前一个\",{\"1\":{\"518\":1,\"717\":1,\"957\":1}}],[\"前提\",{\"1\":{\"155\":1}}],[\"前端如何实现即时通讯\",{\"1\":{\"1649\":1}}],[\"前端进行\",{\"1\":{\"1640\":1}}],[\"前端小王想要请求获取王者荣耀英雄数据\",{\"1\":{\"1615\":1}}],[\"前端路由\",{\"1\":{\"1455\":1}}],[\"前端学习\",{\"1\":{\"1155\":1}}],[\"前端鉴权方案\",{\"0\":{\"509\":1}}],[\"前端更需要掌握页面路由的权限和逻辑\",{\"1\":{\"507\":1}}],[\"前端在每次请求时将jwt\",{\"1\":{\"368\":1}}],[\"前端可以将返回的结果保存在浏览器中\",{\"1\":{\"368\":1}}],[\"前端通过web表单将自己的用户名和密码发送到后端的接口\",{\"1\":{\"368\":1}}],[\"前端通过一大堆接口请求数据\",{\"1\":{\"219\":1}}],[\"前端工程师\",{\"1\":{\"337\":1,\"1488\":1}}],[\"前端同学对服务器端的技术不太熟悉\",{\"1\":{\"225\":1}}],[\"前端同学能够自主决定与后台的通讯方式\",{\"1\":{\"218\":1}}],[\"前端正在广泛使用的构建工具\",{\"1\":{\"221\":1}}],[\"前端的\",{\"1\":{\"219\":1}}],[\"前端切图仔\",{\"1\":{\"219\":1}}],[\"前端访问中间层的接口\",{\"1\":{\"218\":1}}],[\"前端访问代码\",{\"1\":{\"134\":1}}],[\"前端则在\",{\"1\":{\"218\":1}}],[\"前端项目形成规模只能是空谈\",{\"1\":{\"117\":1}}],[\"前端便可以突破一切障碍\",{\"1\":{\"24\":1}}],[\"前端开发者接触的都是\",{\"1\":{\"1627\":1}}],[\"前端开发者的待遇远不及后端开发者\",{\"1\":{\"23\":1}}],[\"前端开发也面临着这样的困境\",{\"1\":{\"146\":1}}],[\"前端开发处在一个非常尴尬的境地\",{\"1\":{\"23\":1}}],[\"前端程序逐渐变得复杂\",{\"1\":{\"23\":1}}],[\"前端\",{\"2\":{\"18\":1,\"53\":1,\"95\":1,\"105\":1,\"120\":1,\"125\":1,\"130\":1,\"135\":1,\"139\":1,\"144\":1,\"151\":1,\"160\":1,\"536\":1,\"549\":1,\"606\":1,\"637\":1,\"652\":1,\"676\":1,\"687\":1,\"774\":1,\"960\":1,\"1003\":1,\"1041\":1,\"1074\":1,\"1106\":1,\"1133\":1,\"1164\":1,\"1183\":1,\"1190\":1,\"1244\":1,\"1321\":1,\"1342\":1,\"1472\":1,\"1520\":1,\"1523\":1,\"1531\":1,\"1546\":1,\"1561\":1,\"1596\":1,\"1617\":1,\"1641\":1,\"1651\":1,\"2089\":1,\"2092\":1,\"2096\":1,\"2102\":1}}],[\"把加密的结果通过请求发送给服务器\",{\"1\":{\"2091\":2}}],[\"把响应式数据设置到原始数据上的行为称为数据污染\",{\"1\":{\"1929\":1}}],[\"把数组作为对象\",{\"1\":{\"1915\":1}}],[\"把副作用函数从桶里取出并执行\",{\"1\":{\"1886\":1,\"1889\":1}}],[\"把虚拟\",{\"1\":{\"1878\":1,\"1944\":1}}],[\"把自定义事件传给子组件\",{\"1\":{\"1802\":1}}],[\"把浏览器原生事件\",{\"1\":{\"1802\":1}}],[\"把变量exp改成\",{\"1\":{\"1793\":1}}],[\"把pos位置以后的元素都从stack栈中弹出\",{\"1\":{\"1792\":1}}],[\"把截取出来的text转化成textast\",{\"1\":{\"1792\":1}}],[\"把剩下的内容重新赋给html\",{\"1\":{\"1792\":1}}],[\"把写好的template模板先编译成vnode并缓存下来\",{\"1\":{\"1788\":1}}],[\"把它挂载到数组实例与array\",{\"1\":{\"1785\":1}}],[\"把\",{\"1\":{\"1366\":1,\"1501\":1,\"1722\":2,\"1789\":2,\"1874\":1,\"1896\":1,\"1944\":1,\"2002\":1,\"2047\":1}}],[\"把一个列表中所有文本的字体颜色都设置为红色\",{\"1\":{\"1194\":1}}],[\"把一批常用的相关的插件打包来满足我们的开发\",{\"1\":{\"148\":1}}],[\"把前后的换行也算作是一个空白节点\",{\"1\":{\"1112\":1}}],[\"把2017\",{\"1\":{\"911\":1}}],[\"把其他元素从盒子旁边推开\",{\"1\":{\"546\":1}}],[\"把其他处于\",{\"1\":{\"540\":2}}],[\"把小于基准值元素的子数列和大于基准值元素的子数列排序\",{\"1\":{\"415\":1}}],[\"把长度为n的输入序列分成两个长度为n\",{\"1\":{\"414\":1}}],[\"把文件对象当作迭代器来读取\",{\"1\":{\"404\":1}}],[\"把文件内容写入到文件系统\",{\"1\":{\"154\":1,\"155\":1}}],[\"组装好数据之后创建ast节点\",{\"1\":{\"1792\":1}}],[\"组装成一个个包含多个模块的\",{\"1\":{\"154\":1}}],[\"组数\",{\"1\":{\"1667\":1}}],[\"组件路由更新\",{\"1\":{\"2071\":1}}],[\"组件渲染\",{\"1\":{\"2071\":1}}],[\"组件提供一个计算属性\",{\"1\":{\"2065\":1}}],[\"组件解析\",{\"0\":{\"2062\":1}}],[\"组件依赖于当前路由对象\",{\"1\":{\"2034\":1}}],[\"组件依赖与响应式数据app\",{\"1\":{\"2034\":1}}],[\"组件是如何重新渲染\",{\"1\":{\"2031\":1}}],[\"组件是可以嵌套的\",{\"1\":{\"1891\":1}}],[\"组件初始化的时候会执行这里\",{\"1\":{\"2002\":1}}],[\"组件运行过程中的状态保存在组件实例中\",{\"1\":{\"1954\":1}}],[\"组件所渲染的内容\",{\"1\":{\"1954\":1}}],[\"组件应该包含以下内容\",{\"1\":{\"1953\":1}}],[\"组件接收名为\",{\"1\":{\"1953\":1}}],[\"组件对象\",{\"1\":{\"1951\":1}}],[\"组件时\",{\"1\":{\"1938\":1}}],[\"组件就是一组\",{\"1\":{\"1879\":1}}],[\"组件构造函数的原型对象上\",{\"1\":{\"1859\":1}}],[\"组件构造函数的原型对象\",{\"1\":{\"1845\":1}}],[\"组件根元素\",{\"1\":{\"1834\":1}}],[\"组件标签\",{\"1\":{\"1835\":1}}],[\"组件标签上的属性\",{\"1\":{\"1834\":1}}],[\"组件标签上的属性或者\",{\"1\":{\"1834\":1,\"1835\":2}}],[\"组件标签使用时\",{\"1\":{\"1429\":1}}],[\"组件挂载\",{\"0\":{\"1832\":1}}],[\"组件占位符节点data\",{\"1\":{\"1865\":1}}],[\"组件占位符vnode\",{\"1\":{\"1864\":1}}],[\"组件占位符\",{\"0\":{\"1834\":1},\"1\":{\"1825\":1,\"1834\":3,\"1835\":2}}],[\"组件节点\",{\"1\":{\"1788\":1}}],[\"组件化中包含了\",{\"1\":{\"1782\":1}}],[\"组件化\",{\"1\":{\"1782\":1}}],[\"组件化编码流程\",{\"0\":{\"1435\":1}}],[\"组件化编程方式\",{\"1\":{\"1413\":1}}],[\"组件化编程\",{\"0\":{\"1412\":1}}],[\"组件可以没有根标签\",{\"1\":{\"1514\":1}}],[\"组件必须有一个根标签\",{\"1\":{\"1514\":1}}],[\"组件更新和侦听器回调\",{\"1\":{\"1498\":1}}],[\"组件内\",{\"1\":{\"2029\":2}}],[\"组件内部声明接收了\",{\"1\":{\"1493\":1}}],[\"组件内守卫\",{\"1\":{\"1467\":2,\"2071\":1}}],[\"组件外部传递过来\",{\"1\":{\"1493\":2}}],[\"组件库\",{\"0\":{\"1469\":1,\"1470\":1,\"1471\":1}}],[\"组件配置项\",{\"1\":{\"1864\":1}}],[\"组件配置\",{\"1\":{\"1462\":1}}],[\"组件配置中\",{\"1\":{\"1423\":1}}],[\"组件决定\",{\"1\":{\"1446\":1}}],[\"组件自身的状态数据\",{\"1\":{\"1954\":1}}],[\"组件自身\",{\"1\":{\"1438\":1,\"1439\":1}}],[\"组件中的\",{\"1\":{\"1938\":1}}],[\"组件中要暴露出去的属性\",{\"1\":{\"1493\":1}}],[\"组件中所用到的\",{\"1\":{\"1486\":1}}],[\"组件中调用commit\",{\"1\":{\"1454\":1}}],[\"组件中调用dispatch\",{\"1\":{\"1454\":1}}],[\"组件中也可以越过\",{\"1\":{\"1451\":1}}],[\"组件中修改\",{\"1\":{\"1451\":1}}],[\"组件中读取getters数据\",{\"1\":{\"1454\":1}}],[\"组件中读取state数据\",{\"1\":{\"1454\":1}}],[\"组件中读取数据\",{\"1\":{\"1452\":1}}],[\"组件中读取\",{\"1\":{\"1451\":1}}],[\"组件中\",{\"1\":{\"1446\":1}}],[\"组件中订阅消息\",{\"1\":{\"1439\":1}}],[\"组件中给$bus绑定自定义事件\",{\"1\":{\"1438\":1}}],[\"组件中不使用\",{\"1\":{\"1433\":1}}],[\"组件想接收数据\",{\"1\":{\"1438\":1,\"1439\":1}}],[\"组件要按照功能点拆分\",{\"1\":{\"1435\":1}}],[\"组件的渲染都有非常重要的指导意义\",{\"1\":{\"2028\":1}}],[\"组件的vnode\",{\"1\":{\"2002\":1}}],[\"组件的生命周期\",{\"1\":{\"1953\":1}}],[\"组件的组件占位符vnode\",{\"1\":{\"1835\":2}}],[\"组件的option选项\",{\"1\":{\"1788\":1}}],[\"组件的实例\",{\"1\":{\"1499\":1}}],[\"组件的自定义事件\",{\"0\":{\"1437\":1}}],[\"组件的\",{\"1\":{\"1423\":1,\"1950\":1,\"1954\":1,\"2031\":1}}],[\"组件的嵌套\",{\"0\":{\"1422\":1}}],[\"组件本质是一个名为vuecomponent的构造函数\",{\"1\":{\"1423\":1}}],[\"组件\",{\"0\":{\"1845\":1,\"1879\":1},\"1\":{\"1416\":1,\"1456\":1,\"1499\":1,\"1515\":1,\"2031\":2,\"2062\":1,\"2071\":1}}],[\"组件名尽可能回避\",{\"1\":{\"1419\":1}}],[\"组件名\",{\"0\":{\"1419\":1},\"1\":{\"1416\":1,\"1834\":1}}],[\"组件与\",{\"1\":{\"1413\":1}}],[\"组件上也可以绑定原生\",{\"1\":{\"1437\":1}}],[\"组件上没有添加directives数组\",{\"1\":{\"1358\":1}}],[\"组件上的v\",{\"1\":{\"1358\":1}}],[\"组件实例存在\",{\"1\":{\"2069\":1}}],[\"组件实例的数量\",{\"1\":{\"1807\":1}}],[\"组件实例化时\",{\"1\":{\"1446\":1}}],[\"组件实例对象\",{\"1\":{\"1368\":1,\"1383\":1,\"1423\":1}}],[\"组件实例\",{\"1\":{\"1354\":1,\"1485\":1,\"1854\":1,\"2069\":2}}],[\"组合式函数不会产生额外的组件实例开销\",{\"1\":{\"1501\":1}}],[\"组合式函数相对于无渲染组件的主要优势是\",{\"1\":{\"1501\":1}}],[\"组合式\",{\"1\":{\"1485\":2,\"2035\":1}}],[\"组合\",{\"1\":{\"1480\":1,\"1486\":1}}],[\"组合在一起\",{\"1\":{\"1300\":1}}],[\"组合继承最大的问题就是\",{\"1\":{\"1071\":1}}],[\"组合继承\",{\"0\":{\"1071\":1}}],[\"组合装饰\",{\"1\":{\"402\":1}}],[\"组括号内的表达式匹配的文本\",{\"1\":{\"902\":1}}],[\"组成的数组值\",{\"1\":{\"1926\":1}}],[\"组成的数组\",{\"1\":{\"1357\":1}}],[\"组成两个反斜杠字符\",{\"1\":{\"384\":1}}],[\"组成\",{\"1\":{\"304\":1,\"1740\":1}}],[\"组织参考了众多社区模块化标准\",{\"1\":{\"46\":1}}],[\"输入过滤\",{\"1\":{\"2095\":1}}],[\"输入特征图的通道数\",{\"1\":{\"1667\":1}}],[\"输入特征的通道数\",{\"1\":{\"1665\":1}}],[\"输入的张量input的形状为\",{\"1\":{\"1665\":1}}],[\"输入单元或输出单元的权重\",{\"1\":{\"1664\":1}}],[\"输入张量的形状为\",{\"1\":{\"1663\":2}}],[\"输入通道数\",{\"1\":{\"1662\":1}}],[\"输入首尾空格过滤\",{\"1\":{\"1356\":1}}],[\"输入字符串转为有效的数字\",{\"1\":{\"1356\":1}}],[\"输入值不满足\",{\"1\":{\"760\":1}}],[\"输入值为空时返回\",{\"1\":{\"760\":1}}],[\"输入框提示信息\",{\"1\":{\"758\":1}}],[\"输入\",{\"1\":{\"493\":1,\"494\":1,\"1768\":1}}],[\"输入如下简单代码\",{\"1\":{\"148\":1}}],[\"输出编码\",{\"1\":{\"2095\":1}}],[\"输出的特征图大小为\",{\"1\":{\"1667\":1}}],[\"输出形状为\",{\"1\":{\"1667\":1}}],[\"输出特征图填充大小\",{\"1\":{\"1667\":1}}],[\"输出特征图的通道数\",{\"1\":{\"1667\":1}}],[\"输出大小为\",{\"1\":{\"1663\":1}}],[\"输出通道数设为\",{\"1\":{\"1667\":1}}],[\"输出通道数为\",{\"1\":{\"1662\":1}}],[\"输出通道数\",{\"1\":{\"1662\":1}}],[\"输出数组的最大值\",{\"1\":{\"995\":1}}],[\"输出数据到模板\",{\"1\":{\"328\":1}}],[\"输出不符合预期的结果\",{\"1\":{\"833\":1}}],[\"输出一个函数\",{\"1\":{\"1033\":1}}],[\"输出一个\",{\"1\":{\"744\":1}}],[\"输出异常\",{\"1\":{\"403\":1}}],[\"输出异常的详细信息\",{\"1\":{\"403\":1}}],[\"输出未知异常\",{\"1\":{\"403\":1}}],[\"输出长度为10\",{\"1\":{\"388\":1}}],[\"输出长度为\",{\"1\":{\"388\":2}}],[\"输出来了\",{\"1\":{\"384\":1}}],[\"输出使用方法\",{\"1\":{\"331\":1}}],[\"输出版本号\",{\"1\":{\"331\":1}}],[\"输出字符串\",{\"1\":{\"328\":1}}],[\"输出非转义的数据到模板\",{\"1\":{\"328\":1}}],[\"输出非转义的数据到模板上\",{\"1\":{\"328\":1}}],[\"输出是转义\",{\"1\":{\"328\":1}}],[\"输出转义的数据到模板上\",{\"1\":{\"328\":1}}],[\"输出结果应该为0\",{\"1\":{\"1779\":1}}],[\"输出结果的大小\",{\"1\":{\"1662\":1}}],[\"输出结果\",{\"1\":{\"327\":1,\"2028\":1}}],[\"输出路径\",{\"1\":{\"284\":1}}],[\"输出\",{\"1\":{\"191\":1,\"239\":1,\"284\":1,\"377\":4,\"384\":2,\"385\":5,\"395\":13,\"396\":7,\"398\":9,\"493\":1,\"494\":1,\"1039\":4,\"1040\":2,\"1666\":1,\"1768\":1}}],[\"输出文件路径\",{\"1\":{\"155\":1}}],[\"输出bundle\",{\"1\":{\"155\":1}}],[\"输出完成\",{\"1\":{\"154\":1}}],[\"输出资源\",{\"1\":{\"154\":1}}],[\"翻译为\",{\"1\":{\"1972\":1}}],[\"翻译为中文意思是\",{\"1\":{\"61\":1}}],[\"翻译推理\",{\"0\":{\"1762\":1},\"1\":{\"1762\":1}}],[\"翻译成中文就是文档对象模型\",{\"1\":{\"1084\":1}}],[\"翻译成中文为浏览器对象模型\",{\"1\":{\"1083\":1}}],[\"翻译成中文为\",{\"1\":{\"895\":1}}],[\"翻译成中文是这个的意思\",{\"1\":{\"834\":1}}],[\"翻译完所有模块后\",{\"1\":{\"154\":1}}],[\"步幅为\",{\"1\":{\"1663\":1}}],[\"步\",{\"1\":{\"764\":2}}],[\"步骤\",{\"0\":{\"710\":1}}],[\"步长\",{\"1\":{\"389\":1,\"401\":1,\"1662\":2,\"1667\":1}}],[\"步使用\",{\"1\":{\"154\":1}}],[\"步继续查找\",{\"1\":{\"59\":1}}],[\"找不到\",{\"1\":{\"1993\":1}}],[\"找不到返回\",{\"1\":{\"1271\":1}}],[\"找出那些需要被添加或移除的节点\",{\"1\":{\"1959\":1}}],[\"找出那些不在继续使用的变量\",{\"1\":{\"1028\":1}}],[\"找出其中的静态节点\",{\"1\":{\"1790\":2}}],[\"找出差异\",{\"1\":{\"1788\":1}}],[\"找出错误并确定加载何时完成\",{\"1\":{\"771\":1}}],[\"找出待排序的数组中最大和最小的元素\",{\"1\":{\"417\":1}}],[\"找出所有依赖模块\",{\"1\":{\"155\":1}}],[\"找出所有的入口文件\",{\"1\":{\"154\":1}}],[\"找到\",{\"1\":{\"2041\":1}}],[\"找到对应的\",{\"1\":{\"2031\":1}}],[\"找到当前节点在父节点的\",{\"1\":{\"1977\":1}}],[\"找到元素返回索引值\",{\"1\":{\"1271\":1}}],[\"找到返回\",{\"1\":{\"1009\":2}}],[\"找到以后就停止检索\",{\"1\":{\"894\":1}}],[\"找到要设置图标的元素通过\",{\"1\":{\"623\":1}}],[\"找到相应位置并插入\",{\"1\":{\"412\":1}}],[\"找到占用端口的程序\",{\"1\":{\"275\":1}}],[\"找到该第三方包中的package\",{\"1\":{\"59\":1}}],[\"得出\",{\"1\":{\"1695\":1}}],[\"得出最终的参数\",{\"1\":{\"154\":1}}],[\"得以更新\",{\"1\":{\"1358\":1}}],[\"得用\",{\"1\":{\"402\":1}}],[\"得到密文数据\",{\"1\":{\"2099\":1}}],[\"得到操作\",{\"1\":{\"1948\":1}}],[\"得到原始值结果\",{\"1\":{\"1912\":1}}],[\"得到\",{\"1\":{\"1911\":1,\"1974\":1}}],[\"得到一个对象\",{\"1\":{\"2066\":1}}],[\"得到一个过期时间\",{\"1\":{\"1535\":1}}],[\"得到一个新函数\",{\"1\":{\"1039\":2}}],[\"得到它的使用权\",{\"1\":{\"1002\":1}}],[\"得到同样的结果\",{\"1\":{\"995\":1}}],[\"得到jwt的第二部分\",{\"1\":{\"366\":1}}],[\"得到的哈希值为\",{\"1\":{\"2101\":1}}],[\"得到的摘要值为\",{\"1\":{\"2101\":1}}],[\"得到的结果如下\",{\"1\":{\"2058\":2}}],[\"得到的实例类型为\",{\"1\":{\"1499\":1}}],[\"得到的是一个代理对象\",{\"1\":{\"1923\":1}}],[\"得到的是一个字符串\",{\"1\":{\"1088\":1}}],[\"得到的是新值\",{\"1\":{\"1897\":1}}],[\"得到的是\",{\"1\":{\"1204\":2}}],[\"得到的是对象\",{\"1\":{\"973\":1}}],[\"得到的还是对象\",{\"1\":{\"973\":1}}],[\"得到的值为\",{\"1\":{\"958\":1}}],[\"得到的\",{\"1\":{\"350\":1,\"1905\":1}}],[\"得到完整\",{\"1\":{\"292\":1}}],[\"得到了每个模块被翻译后的最终内容以及它们之间的依赖关系\",{\"1\":{\"154\":1}}],[\"得到模块所在目录的绝对路径\",{\"1\":{\"37\":1}}],[\"得到模块文件的绝对路径\",{\"1\":{\"37\":1}}],[\"得到模块完整的绝对路径\",{\"1\":{\"37\":1}}],[\"掘金\",{\"1\":{\"153\":1,\"509\":1,\"510\":1,\"511\":1,\"1015\":1}}],[\"去除了\",{\"1\":{\"2061\":1}}],[\"去除命名空间\",{\"0\":{\"1304\":1}}],[\"去改变\",{\"1\":{\"2058\":1}}],[\"去遍历传递过来的参数\",{\"1\":{\"2045\":1}}],[\"去把\",{\"1\":{\"2026\":1}}],[\"去新的一组子节点中寻找具有相同\",{\"1\":{\"1962\":1}}],[\"去查找肯定找不到\",{\"1\":{\"1923\":1}}],[\"去获取这个属性\",{\"1\":{\"1910\":1}}],[\"去年\",{\"1\":{\"1753\":1}}],[\"去年较前年增长\",{\"1\":{\"1728\":1}}],[\"去选项中的最相似值\",{\"1\":{\"1723\":1}}],[\"去芜存菁\",{\"1\":{\"1705\":1}}],[\"去管理一组一组的路由规则\",{\"1\":{\"1456\":1}}],[\"去\",{\"1\":{\"1439\":1,\"1936\":1}}],[\"去指定具体的按键\",{\"1\":{\"1370\":1}}],[\"去绑定\",{\"1\":{\"1370\":1}}],[\"去使用\",{\"1\":{\"1370\":1}}],[\"去执行事件中心里的对应的回调\",{\"1\":{\"1368\":1}}],[\"去加载一个使用了\",{\"1\":{\"1320\":1}}],[\"去掉v\",{\"1\":{\"1368\":1,\"1407\":1}}],[\"去掉\",{\"1\":{\"1127\":1,\"1368\":1}}],[\"去掉环境中的变量以及被环境中的变量引用的变量的标记\",{\"1\":{\"1031\":1}}],[\"去掉引号\",{\"1\":{\"970\":1}}],[\"去验证用户名与密码\",{\"1\":{\"360\":1}}],[\"去编译了\",{\"1\":{\"150\":1}}],[\"去单独下载\",{\"1\":{\"142\":1}}],[\"规定\",{\"1\":{\"1776\":1,\"1910\":1}}],[\"规定了该方法返回的数组的排序方式如下\",{\"1\":{\"1054\":1}}],[\"规则为\",{\"1\":{\"1722\":1}}],[\"规则而编写的库时\",{\"1\":{\"1307\":1}}],[\"规则鼓励用户编写像\",{\"1\":{\"1302\":1}}],[\"规则不同\",{\"1\":{\"1302\":1}}],[\"规则通过一个共享文件转发所有成员\",{\"1\":{\"1302\":1}}],[\"规则主要有以下三种\",{\"1\":{\"1300\":1}}],[\"规则\",{\"1\":{\"1262\":1}}],[\"规则和border\",{\"1\":{\"545\":1}}],[\"规则的第一部分\",{\"1\":{\"515\":1}}],[\"规则示例\",{\"1\":{\"339\":1}}],[\"规则数字中增加下面代码\",{\"1\":{\"149\":1}}],[\"规范其中使用了\",{\"1\":{\"1906\":1}}],[\"规范了解到\",{\"1\":{\"1905\":1}}],[\"规范名称为promise\",{\"1\":{\"1776\":1}}],[\"规范中\",{\"1\":{\"1208\":1}}],[\"规范中引入的一种数据结构\",{\"1\":{\"866\":1}}],[\"规范与本地文件交互的标准方式\",{\"1\":{\"771\":1}}],[\"规范的路径表示法\",{\"1\":{\"46\":1}}],[\"规范\",{\"0\":{\"240\":1,\"1776\":1},\"1\":{\"37\":1,\"232\":1,\"1350\":1,\"1632\":1,\"1779\":1}}],[\"规范进行了改进\",{\"1\":{\"25\":1}}],[\"规范出炉\",{\"1\":{\"25\":2}}],[\"加工加工\",{\"1\":{\"2000\":1}}],[\"加工data\",{\"1\":{\"1396\":1}}],[\"加上参数的\",{\"1\":{\"1925\":1,\"1993\":1}}],[\"加上为标准模式\",{\"1\":{\"691\":1}}],[\"加快速度\",{\"1\":{\"1711\":1}}],[\"加快业务的迭代速度\",{\"1\":{\"218\":1}}],[\"加速梯度\",{\"1\":{\"1659\":1}}],[\"加速优化过程\",{\"1\":{\"1659\":1}}],[\"加速运动\",{\"1\":{\"641\":1}}],[\"加在url后面\",{\"1\":{\"1584\":1}}],[\"加以忽略\",{\"1\":{\"957\":1}}],[\"加法技巧\",{\"0\":{\"1710\":1}}],[\"加法\",{\"1\":{\"816\":1}}],[\"加入到消息队列的末尾排队\",{\"1\":{\"1180\":1,\"1558\":1}}],[\"加入拖放支持\",{\"1\":{\"772\":1}}],[\"加入下面一段\",{\"1\":{\"149\":1}}],[\"加粗\",{\"1\":{\"621\":1}}],[\"加锁\",{\"1\":{\"408\":1}}],[\"加\",{\"1\":{\"395\":1,\"396\":8}}],[\"加号运算\",{\"1\":{\"395\":1}}],[\"加号\",{\"1\":{\"385\":1,\"902\":1}}],[\"加这个设置才能访问刷新过期时间\",{\"1\":{\"355\":1}}],[\"加盐\",{\"1\":{\"355\":1}}],[\"加密使用\",{\"1\":{\"2101\":1}}],[\"加密后存储于客户端\",{\"1\":{\"369\":1}}],[\"加密字符串\",{\"1\":{\"368\":2}}],[\"加密\",{\"0\":{\"2098\":1},\"1\":{\"350\":1,\"2099\":1},\"2\":{\"2103\":1}}],[\"加密算法\",{\"1\":{\"350\":1}}],[\"加条件查询\",{\"1\":{\"203\":1}}],[\"加载模型参数\",{\"1\":{\"1673\":1}}],[\"加载和预处理这些常用数据集\",{\"1\":{\"1656\":1}}],[\"加载数据\",{\"1\":{\"1655\":1}}],[\"加载数据集\",{\"1\":{\"1655\":1}}],[\"加载数据所在的数据集\",{\"1\":{\"1655\":1}}],[\"加载成功\",{\"1\":{\"1575\":1}}],[\"加载一个\",{\"1\":{\"1655\":2}}],[\"加载一个模块的成员\",{\"1\":{\"1309\":1}}],[\"加载一个文件时\",{\"1\":{\"1309\":1}}],[\"加载一个纯\",{\"1\":{\"1308\":1}}],[\"加载一张背景图\",{\"1\":{\"636\":1}}],[\"加载的模块成员只能在当前文件中访问\",{\"1\":{\"1302\":1}}],[\"加载的模块不管被引用了多少次\",{\"1\":{\"1301\":1}}],[\"加载的样式表被称为模块\",{\"1\":{\"1301\":1}}],[\"加载的类名\",{\"1\":{\"377\":1}}],[\"加载之前\",{\"1\":{\"1300\":1}}],[\"加载完成\",{\"1\":{\"1215\":1}}],[\"加载完成后调用一个回调就行了\",{\"1\":{\"37\":1}}],[\"加载完之后执行一个函数\",{\"1\":{\"1200\":1}}],[\"加载更多或滚到底部监听\",{\"1\":{\"1036\":1}}],[\"加载结束后\",{\"1\":{\"773\":1}}],[\"加载所有配置的插件\",{\"1\":{\"154\":1}}],[\"加载\",{\"1\":{\"150\":1,\"1097\":3,\"1601\":1,\"1656\":3,\"2049\":2}}],[\"叫做非空断言操作符\",{\"1\":{\"2068\":1}}],[\"叫做变量的\",{\"1\":{\"780\":1}}],[\"叫做\",{\"1\":{\"528\":1}}],[\"叫做预设\",{\"1\":{\"148\":1}}],[\"叫做构建工具\",{\"1\":{\"118\":1}}],[\"结构拆解\",{\"0\":{\"2052\":1}}],[\"结构如下\",{\"1\":{\"2040\":1}}],[\"结构解析\",{\"0\":{\"2039\":1,\"2056\":1,\"2059\":1}}],[\"结构name\",{\"1\":{\"2013\":1}}],[\"结构理应变成\",{\"1\":{\"1890\":1}}],[\"结构管理\",{\"1\":{\"1801\":1}}],[\"结构比较深\",{\"1\":{\"1504\":1}}],[\"结构时\",{\"1\":{\"1299\":1}}],[\"结构为例来说明事件捕获\",{\"1\":{\"1140\":1}}],[\"结构为例\",{\"1\":{\"1139\":1}}],[\"结构的重新设计\",{\"0\":{\"1889\":1}}],[\"结构的内容\",{\"1\":{\"1400\":1,\"1404\":1}}],[\"结构的基础上获取第一个<li>元素的内容的话\",{\"1\":{\"1112\":1}}],[\"结构的实现\",{\"1\":{\"867\":1}}],[\"结构转为数组结构\",{\"1\":{\"871\":1}}],[\"结构提供了\",{\"1\":{\"867\":1}}],[\"结构\",{\"1\":{\"656\":1,\"867\":2,\"1400\":1,\"1404\":1,\"1446\":1,\"1515\":1,\"1685\":1}}],[\"结构中\",{\"1\":{\"138\":1}}],[\"结论\",{\"1\":{\"649\":1,\"1686\":1}}],[\"结束标签节点\",{\"1\":{\"1974\":3}}],[\"结束标签名称状态\",{\"1\":{\"1974\":2}}],[\"结束标签状态\",{\"1\":{\"1974\":1}}],[\"结束标签\",{\"1\":{\"1792\":2}}],[\"结束位置的索引\",{\"1\":{\"891\":1}}],[\"结束位置为\",{\"1\":{\"891\":3}}],[\"结束定时器\",{\"1\":{\"408\":1}}],[\"结束\",{\"1\":{\"389\":1,\"401\":1,\"716\":1}}],[\"结束响应过程\",{\"1\":{\"307\":1}}],[\"结合使用\",{\"1\":{\"1102\":1}}],[\"结合\",{\"1\":{\"995\":1,\"1274\":1}}],[\"结合回调函数使用\",{\"1\":{\"995\":1}}],[\"结合了\",{\"1\":{\"644\":1}}],[\"结合event\",{\"1\":{\"491\":1}}],[\"结合字典\",{\"1\":{\"388\":1}}],[\"结合list或tuple\",{\"1\":{\"388\":1}}],[\"结尾的\",{\"1\":{\"519\":1}}],[\"结尾的代码文件\",{\"1\":{\"376\":1}}],[\"结尾\",{\"1\":{\"514\":1,\"777\":1,\"1316\":1}}],[\"结尾用默认的回车\",{\"1\":{\"386\":1}}],[\"结尾用逗号\",{\"1\":{\"386\":1}}],[\"结果肯定是存在误差的\",{\"1\":{\"1723\":1}}],[\"结果必不可少\",{\"1\":{\"1689\":1}}],[\"结果\",{\"1\":{\"1219\":1}}],[\"结果就为\",{\"1\":{\"397\":2}}],[\"结果才为\",{\"1\":{\"397\":1}}],[\"结果值对象结构\",{\"1\":{\"260\":1}}],[\"结果的处理有两种模式\",{\"1\":{\"245\":1}}],[\"结果如下\",{\"1\":{\"148\":1}}],[\"非对称加密使用公钥和私钥进行加密和解密\",{\"1\":{\"2100\":1}}],[\"非对称加密还可以用于数字签名\",{\"1\":{\"2100\":1}}],[\"非对称加密通常用于保护通信的安全性\",{\"1\":{\"2100\":1}}],[\"非对称加密与对称加密不同\",{\"1\":{\"2100\":1}}],[\"非对称加密\",{\"0\":{\"2100\":1}}],[\"非原始值响应式\",{\"0\":{\"1988\":1}}],[\"非原始值的响应式方案\",{\"0\":{\"1900\":1}}],[\"非只读的时候才需要建立响应联系\",{\"1\":{\"1914\":1,\"1992\":1}}],[\"非服务端渲染时应缓存\",{\"1\":{\"1804\":1}}],[\"非自闭合为\",{\"1\":{\"1792\":1}}],[\"非自闭合标签如\",{\"1\":{\"1792\":1}}],[\"非自闭合标签剩下\",{\"1\":{\"1792\":1}}],[\"非响应式\",{\"1\":{\"1786\":1}}],[\"非响应式对象\",{\"1\":{\"1786\":1}}],[\"非新增\",{\"1\":{\"1786\":2}}],[\"非精确求和或没有选项作为参考\",{\"1\":{\"1712\":1}}],[\"非继承\",{\"1\":{\"995\":1}}],[\"非显式或隐式地简单调用函数时\",{\"1\":{\"990\":1,\"996\":1}}],[\"非捕获分组也不会被用于反向引用\",{\"1\":{\"913\":1}}],[\"非捕获\",{\"0\":{\"913\":1}}],[\"非字母\",{\"1\":{\"904\":1}}],[\"非字符串类型的值会被转换为字符串类型\",{\"1\":{\"769\":1}}],[\"非空白字符\",{\"1\":{\"904\":1}}],[\"非数字\",{\"1\":{\"904\":1}}],[\"非运算符不仅仅只能用于布尔值\",{\"1\":{\"810\":1}}],[\"非假即真\",{\"1\":{\"810\":1}}],[\"非真即假\",{\"1\":{\"810\":1}}],[\"非布尔值属性\",{\"1\":{\"683\":1}}],[\"非衬线字体\",{\"1\":{\"621\":1}}],[\"非定位的浮动盒子\",{\"1\":{\"578\":1}}],[\"非\",{\"0\":{\"810\":1},\"1\":{\"577\":1}}],[\"非叶子节点i的左叶子节点\",{\"1\":{\"416\":1}}],[\"非抢占式更严格\",{\"1\":{\"408\":1}}],[\"非阻塞的模型\",{\"1\":{\"224\":1}}],[\"非阻塞\",{\"1\":{\"224\":1}}],[\"非阻塞式\",{\"1\":{\"215\":1}}],[\"非常简单\",{\"1\":{\"1535\":1}}],[\"非常类似\",{\"1\":{\"1282\":1}}],[\"非常优秀的模板引擎\",{\"1\":{\"223\":1}}],[\"非常适合用来做\",{\"1\":{\"218\":1}}],[\"非常灵活并且强大\",{\"1\":{\"148\":1}}],[\"非必须\",{\"1\":{\"17\":1,\"777\":1}}],[\"做了一个计算\",{\"1\":{\"2068\":1}}],[\"做了一些\",{\"1\":{\"665\":1}}],[\"做了某种处理\",{\"1\":{\"2054\":1}}],[\"做一个标准化的初始操作\",{\"1\":{\"2054\":1}}],[\"做一个标准化操作\",{\"1\":{\"2053\":1}}],[\"做一些初始化工作\",{\"1\":{\"2042\":1}}],[\"做一些兼容性处理\",{\"1\":{\"1792\":1}}],[\"做处理\",{\"1\":{\"2032\":1}}],[\"做路径切换\",{\"1\":{\"2030\":1}}],[\"做进一步处理\",{\"1\":{\"2020\":1}}],[\"做题\",{\"1\":{\"1699\":1}}],[\"做出了调整\",{\"1\":{\"1518\":1}}],[\"做好铺垫\",{\"1\":{\"956\":1,\"959\":1}}],[\"做监控也是合适的选项\",{\"1\":{\"507\":1}}],[\"做\",{\"0\":{\"222\":1}}],[\"做项目构建工具\",{\"0\":{\"221\":1}}],[\"做增删改查\",{\"1\":{\"220\":1}}],[\"做小型服务\",{\"0\":{\"220\":1}}],[\"做中间层\",{\"1\":{\"219\":1}}],[\"做法\",{\"1\":{\"155\":1}}],[\"做不同的事情需要不同的插件\",{\"1\":{\"148\":1}}],[\"做成了一套规范\",{\"1\":{\"1084\":1}}],[\"做成\",{\"1\":{\"37\":1}}],[\"原本是\",{\"1\":{\"2050\":1}}],[\"原本的\",{\"1\":{\"2047\":1}}],[\"原本函数的参数数量\",{\"1\":{\"1039\":1}}],[\"原封不动地设置到了原始数据上target\",{\"1\":{\"1929\":1}}],[\"原有的\",{\"1\":{\"1904\":1}}],[\"原$mount的备份\",{\"1\":{\"1805\":1}}],[\"原代码\",{\"1\":{\"1015\":2}}],[\"原型上的属性\",{\"1\":{\"1424\":1}}],[\"原型相关属性和方法\",{\"0\":{\"1062\":1}}],[\"原型的组合模式\",{\"0\":{\"1049\":1}}],[\"原型的隐式原型为\",{\"1\":{\"1009\":1}}],[\"原型链继承问题\",{\"0\":{\"1910\":1}}],[\"原型链继承\",{\"0\":{\"1069\":1}}],[\"原型链实现对象继承\",{\"1\":{\"1021\":1}}],[\"原型链\",{\"0\":{\"1009\":1},\"2\":{\"1042\":1}}],[\"原型对象中有一个属性\",{\"1\":{\"1007\":1}}],[\"原型对象\",{\"1\":{\"1007\":2,\"1825\":1}}],[\"原型与原型链\",{\"0\":{\"1006\":1}}],[\"原生事件原理\",{\"1\":{\"1368\":1}}],[\"原生对象都能转换为\",{\"1\":{\"1198\":1}}],[\"原生对象的直接属性\",{\"1\":{\"681\":1}}],[\"原生\",{\"0\":{\"1574\":1},\"1\":{\"1194\":1,\"1205\":1}}],[\"原生方法的使用形式\",{\"1\":{\"995\":1}}],[\"原函数的参数\",{\"1\":{\"995\":1}}],[\"原字符串不会产生改变\",{\"1\":{\"889\":1}}],[\"原因\",{\"1\":{\"1929\":1,\"1932\":1}}],[\"原因解释\",{\"0\":{\"1689\":1}}],[\"原因如下\",{\"1\":{\"1143\":1}}],[\"原因是环境中的变量已经无法访问到这些变量了\",{\"1\":{\"1029\":1}}],[\"原因在于sort\",{\"1\":{\"855\":1}}],[\"原因很简单\",{\"1\":{\"148\":1,\"2050\":1}}],[\"原目标和目标对象必须在同一个文档流\",{\"1\":{\"764\":1}}],[\"原义字符\",{\"1\":{\"658\":1}}],[\"原版视频中是在\",{\"1\":{\"616\":1}}],[\"原始数据\",{\"1\":{\"1886\":1}}],[\"原始方法\",{\"1\":{\"1453\":2}}],[\"原始值是按值传递的\",{\"1\":{\"1935\":1}}],[\"原始值指的是\",{\"1\":{\"1935\":1}}],[\"原始值的响应式方案\",{\"0\":{\"1935\":1}}],[\"原始值\",{\"0\":{\"980\":1},\"1\":{\"1786\":2,\"1936\":1}}],[\"原始值和引用值的区别\",{\"0\":{\"979\":1}}],[\"原始\",{\"0\":{\"970\":1,\"972\":1},\"1\":{\"1929\":1}}],[\"原始bind\",{\"1\":{\"433\":1}}],[\"原始函数作为嵌套函数\",{\"1\":{\"402\":1}}],[\"原则\",{\"1\":{\"402\":1}}],[\"原名为\",{\"1\":{\"222\":1}}],[\"原链接\",{\"1\":{\"153\":1}}],[\"原来的\",{\"1\":{\"149\":1}}],[\"原理解析\",{\"0\":{\"2024\":1,\"2038\":1},\"1\":{\"2038\":1}}],[\"原理很简单\",{\"1\":{\"1922\":1}}],[\"原理拓展\",{\"1\":{\"1352\":1,\"1353\":1,\"1354\":1,\"1357\":1,\"1358\":2,\"1368\":2,\"1370\":1,\"1388\":1,\"1392\":1,\"1394\":1,\"1407\":1,\"1411\":1,\"1423\":1,\"1424\":1,\"1428\":1,\"1431\":1,\"1433\":1}}],[\"原理上存在的线\",{\"1\":{\"711\":1}}],[\"原理\",{\"0\":{\"373\":1,\"1373\":1},\"1\":{\"11\":1,\"157\":1,\"405\":1,\"565\":1,\"1867\":1,\"2006\":1,\"2024\":1}}],[\"语义分析\",{\"1\":{\"1972\":1}}],[\"语义分割\",{\"1\":{\"1667\":1}}],[\"语义有误\",{\"1\":{\"1635\":1}}],[\"语义化标签\",{\"0\":{\"660\":1,\"694\":1}}],[\"语句匹配当前状态\",{\"1\":{\"1974\":1}}],[\"语句填空\",{\"0\":{\"1697\":1}}],[\"语句排序\",{\"0\":{\"1699\":1},\"1\":{\"1684\":1}}],[\"语句的位置一样\",{\"1\":{\"1320\":1}}],[\"语句的作用域\",{\"1\":{\"958\":1}}],[\"语句却是可以的\",{\"1\":{\"1317\":1}}],[\"语句是不支持使用插值的\",{\"1\":{\"1317\":1}}],[\"语句是函数体内唯一的语句\",{\"1\":{\"942\":1}}],[\"语句实现的话\",{\"1\":{\"1286\":1}}],[\"语句对一个\",{\"1\":{\"1278\":1}}],[\"语句来遍历一个列表\",{\"1\":{\"1269\":1}}],[\"语句较多\",{\"1\":{\"1045\":1}}],[\"语句本身就是一个作用域\",{\"1\":{\"958\":1}}],[\"语句后不跟任何值就相当于返回一个\",{\"1\":{\"935\":1}}],[\"语句时\",{\"1\":{\"824\":1}}],[\"语句中有媒体查询\",{\"1\":{\"1316\":1}}],[\"语句中\",{\"1\":{\"991\":1,\"1316\":1}}],[\"语句中使用\",{\"1\":{\"824\":1}}],[\"语句中读取与合并参数\",{\"1\":{\"154\":1}}],[\"语句里面\",{\"1\":{\"819\":1}}],[\"语句可以控制多条语句\",{\"1\":{\"818\":1}}],[\"语句只能控制紧随其后的那个语句\",{\"1\":{\"818\":1}}],[\"语句4\",{\"1\":{\"818\":1}}],[\"语句3\",{\"1\":{\"818\":1}}],[\"语句2\",{\"1\":{\"400\":1,\"818\":1}}],[\"语句1\",{\"1\":{\"400\":1,\"818\":1}}],[\"语句\",{\"1\":{\"155\":1,\"402\":3,\"815\":2,\"819\":4,\"820\":2,\"1286\":2,\"1315\":2,\"1316\":1,\"1317\":1,\"1328\":1,\"1975\":1}}],[\"语法来去除命名空间\",{\"1\":{\"1304\":1}}],[\"语法来自定义命名空间名称\",{\"1\":{\"1303\":1}}],[\"语法规则\",{\"1\":{\"1250\":1}}],[\"语法规则来书写\",{\"1\":{\"1247\":1}}],[\"语法是\",{\"1\":{\"1249\":1}}],[\"语法格式\",{\"0\":{\"1249\":1,\"1250\":1},\"1\":{\"1250\":1}}],[\"语法书写方式类似\",{\"1\":{\"1247\":1}}],[\"语法书写方式不同\",{\"1\":{\"1247\":1}}],[\"语法结构如下\",{\"1\":{\"1151\":1}}],[\"语法分析\",{\"1\":{\"1020\":1,\"1972\":1}}],[\"语法如下\",{\"1\":{\"995\":1,\"1088\":3}}],[\"语法错误\",{\"1\":{\"958\":1}}],[\"语法错误与运行时错误\",{\"1\":{\"403\":1}}],[\"语法为\",{\"1\":{\"636\":1,\"1287\":1,\"1289\":1}}],[\"语法完全相同\",{\"1\":{\"246\":1}}],[\"语法与\",{\"1\":{\"246\":1}}],[\"语法树转换为浏览器可执行代码\",{\"1\":{\"155\":1}}],[\"语法的一些不合理\",{\"1\":{\"956\":1,\"959\":1}}],[\"语法的自定义类\",{\"1\":{\"405\":1}}],[\"语法的对象必须有一个\",{\"1\":{\"404\":1}}],[\"语法的预设\",{\"1\":{\"149\":1}}],[\"语法的时候\",{\"1\":{\"148\":1}}],[\"语法\",{\"1\":{\"148\":4,\"244\":1,\"245\":1,\"246\":1,\"247\":1,\"250\":1,\"251\":1,\"252\":1,\"254\":1,\"255\":1,\"257\":1,\"258\":1,\"259\":1,\"260\":1,\"282\":1,\"286\":1,\"516\":4,\"517\":2,\"518\":2,\"519\":1,\"535\":2,\"651\":1,\"1121\":1,\"1122\":1,\"1341\":1,\"1350\":1,\"1392\":1,\"1397\":1,\"1440\":1,\"1487\":1,\"1488\":1,\"1502\":2}}],[\"语法编译成\",{\"1\":{\"148\":1}}],[\"语言编写的一款\",{\"1\":{\"1247\":1}}],[\"语言编写移动端应用程序\",{\"1\":{\"25\":1}}],[\"语言所特有的东西\",{\"1\":{\"1033\":1}}],[\"语言有两种变量作用域\",{\"1\":{\"958\":1}}],[\"语言的传统\",{\"1\":{\"980\":1}}],[\"语言的风格用一对大括号将多条语句组合到一个代码块里面\",{\"1\":{\"777\":1}}],[\"语言的老东家浏览器为什么不行呢\",{\"1\":{\"25\":1}}],[\"语言是一个请求开启一个线程\",{\"1\":{\"224\":1}}],[\"语言基础\",{\"0\":{\"104\":1,\"375\":1,\"777\":1}}],[\"语言开发桌面应用程序\",{\"1\":{\"25\":1}}],[\"语言实现模块化的平台\",{\"1\":{\"24\":1}}],[\"语言了\",{\"1\":{\"24\":1}}],[\"语言\",{\"1\":{\"23\":1,\"94\":1,\"222\":1,\"223\":1,\"1324\":1}}],[\"语言提交给欧洲的一个标准制定阻止\",{\"1\":{\"22\":1}}],[\"语言本身所存在的一些缺陷往往被大家有意的忽略\",{\"1\":{\"22\":1}}],[\"语言刚刚诞生的时候\",{\"1\":{\"22\":1}}],[\"调度函数为一个独立的\",{\"1\":{\"1897\":1}}],[\"调度器中设置\",{\"1\":{\"1986\":1}}],[\"调度器的主要函数\",{\"1\":{\"1954\":1}}],[\"调度器\",{\"1\":{\"1893\":1,\"1985\":1}}],[\"调度的最小单位\",{\"1\":{\"407\":1}}],[\"调试方便\",{\"1\":{\"1374\":1}}],[\"调试过程过于繁琐\",{\"1\":{\"133\":1}}],[\"调色板比特深度\",{\"1\":{\"1098\":1}}],[\"调整到\",{\"1\":{\"1088\":2}}],[\"调整的情况\",{\"0\":{\"554\":1}}],[\"调用路由配置表中的\",{\"1\":{\"2071\":1}}],[\"调用方法后\",{\"1\":{\"2060\":1}}],[\"调用方式\",{\"1\":{\"1299\":1}}],[\"调用方式两种皆可\",{\"1\":{\"405\":1}}],[\"调用上面写好的\",{\"1\":{\"2058\":1}}],[\"调用全局的\",{\"1\":{\"2029\":3,\"2071\":1}}],[\"调用全局变量\",{\"1\":{\"1261\":1}}],[\"调用成功回调\",{\"1\":{\"2029\":1}}],[\"调用所创建\",{\"1\":{\"2020\":1}}],[\"调用所有配置的\",{\"1\":{\"154\":1}}],[\"调用actions\",{\"1\":{\"2013\":1}}],[\"调用add\",{\"1\":{\"861\":1}}],[\"调用换行函数\",{\"1\":{\"1979\":2}}],[\"调用数组的\",{\"1\":{\"1977\":1}}],[\"调用事件处理函数并传递参数\",{\"1\":{\"1954\":1}}],[\"调用并执行的\",{\"1\":{\"1928\":1}}],[\"调用组件函数\",{\"1\":{\"1879\":1}}],[\"调用组件占位符\",{\"1\":{\"1862\":1}}],[\"调用组件的渲染函数\",{\"1\":{\"1954\":1}}],[\"调用组件的\",{\"1\":{\"1423\":1}}],[\"调用回调函数\",{\"1\":{\"1855\":1,\"1897\":2}}],[\"调用异步函数\",{\"1\":{\"1822\":1}}],[\"调用destroyed的钩子函数\",{\"1\":{\"1807\":1}}],[\"调用definereactive函数添加响应式\",{\"1\":{\"1786\":1}}],[\"调用beforedestroy的钩子函数\",{\"1\":{\"1807\":1}}],[\"调用beforecreate生命周期钩子函数\",{\"1\":{\"1799\":1}}],[\"调用挂载完成的生命周期钩子函数mounted\",{\"1\":{\"1806\":1}}],[\"调用原始迭代器的\",{\"1\":{\"1931\":1}}],[\"调用原mount\",{\"1\":{\"1805\":2}}],[\"调用原生\",{\"1\":{\"2058\":1}}],[\"调用原生方法\",{\"1\":{\"1785\":1}}],[\"调用原生对应的方法对数组进行更新\",{\"1\":{\"1396\":1}}],[\"调用生命周期钩子函数\",{\"1\":{\"1799\":2}}],[\"调用$mount\",{\"1\":{\"1799\":1}}],[\"调用computed\",{\"1\":{\"1850\":1}}],[\"调用compiletofunctions将配置项中的template编译成render函数\",{\"1\":{\"1805\":1}}],[\"调用comment\",{\"1\":{\"1792\":1}}],[\"调用created生命周期钩子函数\",{\"1\":{\"1799\":1}}],[\"调用parseendtag函数并不传递任何参数\",{\"1\":{\"1792\":1}}],[\"调用patchvnode更新节点\",{\"1\":{\"1789\":1}}],[\"调用end\",{\"1\":{\"1792\":1}}],[\"调用相应的钩子函数生成\",{\"1\":{\"1791\":1}}],[\"调用该函数可以取消监听\",{\"1\":{\"1858\":1}}],[\"调用该函数\",{\"1\":{\"1791\":4}}],[\"调用父节点的removechild方法\",{\"1\":{\"1789\":1}}],[\"调用父类型构造函数\",{\"1\":{\"1070\":1}}],[\"调用observe函数将新增的元素转化成响应式\",{\"1\":{\"1785\":1}}],[\"调用了filter的数组本身\",{\"1\":{\"1393\":1}}],[\"调用才会产生代码\",{\"1\":{\"1298\":1}}],[\"调用混合宏\",{\"0\":{\"1293\":1},\"1\":{\"1293\":1}}],[\"调用局部变量\",{\"1\":{\"1261\":1}}],[\"调用外部\",{\"0\":{\"1079\":1}}],[\"调用完毕\",{\"1\":{\"1023\":1}}],[\"调用内部函数\",{\"1\":{\"1015\":1}}],[\"调用valueof\",{\"1\":{\"973\":1}}],[\"调用对象方法的方式和前面介绍的访问对象属性的方式是一样的\",{\"1\":{\"828\":1}}],[\"调用后\",{\"1\":{\"711\":1,\"1232\":1}}],[\"调用这个\",{\"1\":{\"490\":1}}],[\"调用不同的函数\",{\"1\":{\"486\":1}}],[\"调用mynew\",{\"1\":{\"422\":1}}],[\"调用start钩子函数并传入处理好的参数来创建ast节点\",{\"1\":{\"1792\":1}}],[\"调用start\",{\"1\":{\"408\":1,\"1792\":1}}],[\"调用start方法\",{\"1\":{\"408\":1}}],[\"调用类方法时\",{\"1\":{\"405\":1}}],[\"调用同上\",{\"1\":{\"405\":1}}],[\"调用时就变成了\",{\"1\":{\"995\":1}}],[\"调用时\",{\"1\":{\"995\":1}}],[\"调用时直接对myc\",{\"1\":{\"405\":1}}],[\"调用时直接访问缓存\",{\"1\":{\"382\":1}}],[\"调用时则不需要传入\",{\"1\":{\"405\":1}}],[\"调用的目录是不一样的\",{\"1\":{\"2058\":1}}],[\"调用的时候\",{\"1\":{\"2058\":1}}],[\"调用的地方\",{\"1\":{\"2042\":1}}],[\"调用的占位符编译出来的代码会将代码合并在一起\",{\"1\":{\"1298\":1}}],[\"调用的话\",{\"1\":{\"1298\":1}}],[\"调用的\",{\"1\":{\"337\":1}}],[\"调用格式如下\",{\"1\":{\"315\":1}}],[\"调用\",{\"1\":{\"255\":1,\"711\":1,\"712\":4,\"1105\":1,\"1252\":1,\"1298\":1,\"1791\":1,\"1802\":1,\"1862\":1,\"1890\":1,\"1897\":2,\"1912\":1,\"1927\":2,\"1928\":2,\"1929\":1,\"1930\":1,\"1931\":1,\"1932\":1,\"1938\":1,\"1948\":1,\"1951\":2,\"1954\":4,\"1955\":2,\"1962\":2,\"1968\":1,\"1977\":1,\"1979\":4,\"1987\":1,\"2001\":1,\"2002\":1,\"2041\":1,\"2065\":2,\"2066\":1}}],[\"调用函数时\",{\"1\":{\"931\":1,\"980\":1}}],[\"调用函数时解析器不会检查实参的类型\",{\"1\":{\"931\":1}}],[\"调用函数\",{\"1\":{\"212\":1,\"236\":1}}],[\"调用核心库的\",{\"1\":{\"147\":1}}],[\"核心又可以分为三个部分\",{\"1\":{\"2067\":1}}],[\"核心的实现位于\",{\"1\":{\"2062\":1}}],[\"核心公式\",{\"1\":{\"1723\":1}}],[\"核心功能\",{\"1\":{\"1427\":1}}],[\"核心\",{\"0\":{\"1345\":1}}],[\"核心方法\",{\"0\":{\"1197\":1}}],[\"核心概念\",{\"0\":{\"176\":1}}],[\"核心库\",{\"1\":{\"147\":1}}],[\"核心包的\",{\"1\":{\"123\":1}}],[\"核心包\",{\"1\":{\"123\":1}}],[\"巴别塔象征的统一的国度\",{\"1\":{\"146\":1}}],[\"实战\",{\"0\":{\"1588\":1}}],[\"实质上是将指定的内容替换原来的内容\",{\"1\":{\"1208\":1}}],[\"实行更严格解析和错误处理\",{\"1\":{\"959\":1}}],[\"实参可以是一个对象\",{\"1\":{\"931\":1}}],[\"实参可以是任意的数据类型\",{\"1\":{\"931\":1}}],[\"实参的顺序必须要和形参的顺序一致\",{\"1\":{\"833\":1}}],[\"实数\",{\"0\":{\"793\":1}}],[\"实时性并不高\",{\"1\":{\"1645\":1}}],[\"实时性\",{\"1\":{\"1644\":1}}],[\"实时同步\",{\"1\":{\"683\":1}}],[\"实时通信框架\",{\"1\":{\"223\":1}}],[\"实体的名字\",{\"1\":{\"658\":1}}],[\"实体的语法\",{\"1\":{\"658\":1}}],[\"实体\",{\"0\":{\"658\":1},\"1\":{\"2095\":1}}],[\"实际获取的是exposeproxy\",{\"1\":{\"2002\":1}}],[\"实际访问的是实例中的相应属性\",{\"1\":{\"1956\":1}}],[\"实际访问的是obj\",{\"1\":{\"1937\":1}}],[\"实际含义关系式和部分增长率形式\",{\"1\":{\"1728\":1}}],[\"实际应用\",{\"0\":{\"1162\":1}}],[\"实际目标\",{\"1\":{\"1141\":1}}],[\"实际传入的参数\",{\"1\":{\"487\":1}}],[\"实际长度不足\",{\"1\":{\"385\":1}}],[\"实际上在源码的\",{\"1\":{\"2047\":1}}],[\"实际上在调用\",{\"1\":{\"2043\":1}}],[\"实际上这个是我们\",{\"1\":{\"2043\":1}}],[\"实际上这是错误的\",{\"1\":{\"910\":1}}],[\"实际上就是执行了\",{\"1\":{\"2032\":1}}],[\"实际上就是在执行\",{\"1\":{\"2026\":1}}],[\"实际上最终会执行\",{\"1\":{\"2030\":1}}],[\"实际上读取包括\",{\"1\":{\"1904\":1}}],[\"实际上读取的速度大于写入的速度\",{\"1\":{\"263\":1}}],[\"实际上完成了两件事\",{\"1\":{\"1782\":1}}],[\"实际上并没有把匹配的元素从\",{\"1\":{\"1211\":1}}],[\"实际上是对instance\",{\"1\":{\"2001\":1}}],[\"实际上是用来\",{\"1\":{\"1903\":1}}],[\"实际上是事件处理的快捷方式\",{\"1\":{\"1218\":1}}],[\"实际上是指向的全局对象\",{\"1\":{\"996\":1}}],[\"实际上是由一个一个的小方块构成的\",{\"1\":{\"534\":1}}],[\"实际上刚才我们有讲过\",{\"1\":{\"996\":1}}],[\"实际上箭头函数根据形式参数和函数体的不同\",{\"1\":{\"941\":1}}],[\"实际上我们不用关心设备的物理像素为多少\",{\"1\":{\"649\":1}}],[\"实际上不同的浏览器默认值可能不同\",{\"1\":{\"648\":1}}],[\"实际上\",{\"1\":{\"158\":1,\"703\":1,\"762\":1,\"797\":1,\"1077\":1,\"1147\":1,\"1149\":1,\"1358\":1,\"1485\":1,\"1539\":1}}],[\"实例和状态数据的逻辑彼此独立\",{\"1\":{\"2016\":1}}],[\"实例和容器是一一对应的\",{\"1\":{\"1350\":1}}],[\"实例并返回\",{\"1\":{\"1998\":1}}],[\"实例测试\",{\"1\":{\"1974\":1}}],[\"实例时\",{\"1\":{\"1840\":1}}],[\"实例重新渲染\",{\"1\":{\"1821\":1}}],[\"实例从其父级实例中删除\",{\"1\":{\"1807\":1}}],[\"实例的\",{\"1\":{\"2029\":1,\"2031\":1}}],[\"实例的构造函数\",{\"1\":{\"1834\":1}}],[\"实例的根数据对象\",{\"1\":{\"1786\":2}}],[\"实例的关系\",{\"1\":{\"1413\":1}}],[\"实例是否为用户手动创建\",{\"1\":{\"1784\":1}}],[\"实例创建完毕并接管容器后\",{\"1\":{\"1401\":1}}],[\"实例上有一个\",{\"1\":{\"1368\":1}}],[\"实例了\",{\"1\":{\"1362\":1}}],[\"实例对象上面使用\",{\"1\":{\"1201\":2}}],[\"实例对象的\",{\"1\":{\"1008\":1}}],[\"实例对象\",{\"1\":{\"1007\":1,\"1349\":1,\"1423\":3}}],[\"实例对象都包含如下\",{\"1\":{\"923\":1}}],[\"实例属性\",{\"0\":{\"923\":1,\"1865\":1},\"1\":{\"1784\":3}}],[\"实例方法是将各种自定义方法挂载到vue的原型对象上\",{\"1\":{\"1808\":1}}],[\"实例方法\",{\"0\":{\"877\":1,\"925\":1,\"1808\":1}}],[\"实例变量\",{\"1\":{\"405\":2}}],[\"实例化的\",{\"1\":{\"2025\":1}}],[\"实例化时作为参数传入\",{\"1\":{\"2016\":1}}],[\"实例化时递归地为\",{\"1\":{\"1784\":1}}],[\"实例化渲染器并执行其中的函数\",{\"1\":{\"1944\":1}}],[\"实例化一个watcher时会判断exporfn参数的数据类型\",{\"1\":{\"1854\":1}}],[\"实例化一个依赖管理器\",{\"1\":{\"1785\":1}}],[\"实例化watcher\",{\"1\":{\"1810\":1}}],[\"实例化出来的对象可以通过\",{\"1\":{\"1063\":1}}],[\"实例化新类\",{\"1\":{\"408\":1}}],[\"实例化原始类\",{\"1\":{\"408\":1}}],[\"实例化对象\",{\"1\":{\"405\":3}}],[\"实例化类时\",{\"1\":{\"405\":1}}],[\"实例化\",{\"0\":{\"2027\":1},\"1\":{\"284\":1,\"408\":1,\"773\":1,\"2025\":1}}],[\"实例代码\",{\"1\":{\"246\":1,\"727\":1}}],[\"实例\",{\"0\":{\"1411\":1},\"1\":{\"156\":1,\"494\":1,\"995\":1,\"1015\":2,\"1186\":1,\"1350\":2,\"1360\":1,\"1486\":1,\"1518\":1,\"1784\":2,\"1785\":1,\"1786\":2,\"1825\":1,\"1826\":1,\"1834\":1,\"1923\":1,\"1954\":1,\"2016\":3,\"2031\":2,\"2047\":2}}],[\"实现的结果是\",{\"1\":{\"2035\":1}}],[\"实现细粒度的响应式\",{\"1\":{\"2035\":1}}],[\"实现了\",{\"1\":{\"2026\":1}}],[\"实现了随机梯度下降\",{\"1\":{\"1659\":1}}],[\"实现可迭代协议\",{\"1\":{\"1931\":1}}],[\"实现可监测\",{\"1\":{\"1897\":1}}],[\"实现深响应\",{\"0\":{\"1912\":1}}],[\"实现对\",{\"1\":{\"1905\":1,\"1976\":1}}],[\"实现在\",{\"1\":{\"1897\":1}}],[\"实现面向用户的声明式\",{\"1\":{\"1872\":1}}],[\"实现新旧\",{\"1\":{\"1806\":1}}],[\"实现功能\",{\"1\":{\"1791\":1}}],[\"实现功能代码\",{\"1\":{\"313\":1}}],[\"实现virtual\",{\"1\":{\"1782\":1}}],[\"实现变化侦测的代码\",{\"1\":{\"1782\":1}}],[\"实现短轮询是非常简单的\",{\"1\":{\"1645\":1}}],[\"实现祖与后代组件间通信\",{\"1\":{\"1508\":1}}],[\"实现防抖效果\",{\"1\":{\"1507\":1}}],[\"实现原理\",{\"1\":{\"1490\":1,\"1491\":1}}],[\"实现原理其实很简单\",{\"1\":{\"1104\":1}}],[\"实现响应式\",{\"1\":{\"1478\":1}}],[\"实现路由跳转\",{\"1\":{\"1464\":1}}],[\"实现交互\",{\"1\":{\"1435\":1}}],[\"实现动态组件\",{\"1\":{\"1435\":1}}],[\"实现动画的方法\",{\"0\":{\"1220\":1}}],[\"实现使用的都是标记清除的垃圾回收策略或类似的策略\",{\"1\":{\"1029\":1}}],[\"实现视觉上的等高效果\",{\"1\":{\"582\":2}}],[\"实现下载图片功能\",{\"0\":{\"495\":1}}],[\"实现一个函数\",{\"1\":{\"494\":1}}],[\"实现一个\",{\"1\":{\"493\":1}}],[\"实现一个repeat方法\",{\"0\":{\"489\":1}}],[\"实现add\",{\"0\":{\"464\":1}}],[\"实现继承\",{\"0\":{\"465\":1},\"1\":{\"422\":1}}],[\"实现协程的基本流程\",{\"1\":{\"408\":1}}],[\"实现基于文件的\",{\"1\":{\"404\":1}}],[\"实现基于内存的\",{\"1\":{\"404\":1}}],[\"实现栈\",{\"1\":{\"390\":1}}],[\"实现队列\",{\"1\":{\"390\":1}}],[\"实现空列表\",{\"1\":{\"390\":1}}],[\"实现会话控制\",{\"1\":{\"359\":1}}],[\"实现认证和授权的前提是需要一种媒介\",{\"1\":{\"343\":1}}],[\"实现层面\",{\"0\":{\"296\":1}}],[\"实现复制文件的功能\",{\"1\":{\"263\":1}}],[\"实现\",{\"0\":{\"2006\":1,\"2016\":1,\"2017\":1},\"1\":{\"142\":3,\"336\":1,\"350\":1,\"405\":1,\"1488\":1,\"1938\":1}}],[\"实用第三方库变得极其方便\",{\"1\":{\"25\":1}}],[\"发射\",{\"1\":{\"1953\":1}}],[\"发出的跨域请求严厉限制\",{\"1\":{\"1603\":1}}],[\"发出get请求\",{\"1\":{\"1569\":1}}],[\"发出指定方法的请求\",{\"1\":{\"1569\":1}}],[\"发出\",{\"1\":{\"1530\":1}}],[\"发生变化\",{\"1\":{\"2035\":1}}],[\"发生变化导致的被动更新时\",{\"1\":{\"2002\":1}}],[\"发生变化时\",{\"1\":{\"1864\":1}}],[\"发生变化时通知其依赖进行视图更新\",{\"1\":{\"1806\":1}}],[\"发生了什么\",{\"1\":{\"1779\":1}}],[\"发生了哪些事情\",{\"1\":{\"1530\":1}}],[\"发生数据类型不匹配时\",{\"1\":{\"980\":1}}],[\"发送一条加密消息\",{\"1\":{\"2099\":1}}],[\"发送一个请求\",{\"1\":{\"505\":1}}],[\"发送一个单独的文件并导出\",{\"1\":{\"142\":1}}],[\"发送第二个网络请求\",{\"1\":{\"1987\":1}}],[\"发送第一次网络请求\",{\"1\":{\"1987\":1}}],[\"发送网络请求\",{\"1\":{\"1897\":1,\"1987\":1}}],[\"发送真实请求\",{\"1\":{\"1611\":1}}],[\"发送预检请求\",{\"1\":{\"1611\":1}}],[\"发送聊天消息\",{\"1\":{\"1594\":1}}],[\"发送请求\",{\"1\":{\"1575\":1,\"1630\":1}}],[\"发送\",{\"1\":{\"1177\":1,\"1410\":1,\"1575\":1,\"1576\":1}}],[\"发送到服务器\",{\"1\":{\"767\":1}}],[\"发送给客户端\",{\"1\":{\"360\":1}}],[\"发送各种类型的响应\",{\"1\":{\"307\":1}}],[\"发送带有jsonp支持的json响应\",{\"1\":{\"307\":1}}],[\"发送json响应\",{\"1\":{\"307\":1}}],[\"发现一个\",{\"1\":{\"1794\":3}}],[\"发现这是一个\",{\"1\":{\"1649\":1}}],[\"发现\",{\"1\":{\"219\":1}}],[\"发弹幕\",{\"1\":{\"184\":1}}],[\"发微博\",{\"1\":{\"184\":1}}],[\"发评论\",{\"1\":{\"184\":1}}],[\"发朋友圈\",{\"1\":{\"184\":1}}],[\"发工资\",{\"1\":{\"176\":1}}],[\"发起一次请求询问服务器\",{\"1\":{\"1649\":2}}],[\"发起请求的称之为客户端\",{\"1\":{\"1628\":1}}],[\"发起\",{\"1\":{\"158\":2}}],[\"发布商品\",{\"1\":{\"184\":1}}],[\"发布视频\",{\"1\":{\"184\":1}}],[\"发布小于\",{\"1\":{\"93\":1}}],[\"发布更新\",{\"1\":{\"92\":1}}],[\"发布了官方的模块化标准\",{\"1\":{\"46\":1}}],[\"发布\",{\"1\":{\"23\":1,\"24\":2,\"25\":2,\"1475\":1}}],[\"图\",{\"1\":{\"1705\":1}}],[\"图示\",{\"1\":{\"1441\":1}}],[\"图中未画\",{\"1\":{\"1009\":1}}],[\"图形推理\",{\"0\":{\"1759\":1}}],[\"图形绘制命令被指向到路径上准备生成路径\",{\"1\":{\"711\":1}}],[\"图形的基本元素是路径\",{\"1\":{\"709\":1}}],[\"图形化管理工具\",{\"0\":{\"213\":1}}],[\"图解\",{\"1\":{\"675\":1}}],[\"图像所在的目录\",{\"1\":{\"1655\":1}}],[\"图像源\",{\"1\":{\"723\":1}}],[\"图像\",{\"1\":{\"664\":1,\"745\":1}}],[\"图像的部分区域可能会跳出盒子外\",{\"1\":{\"633\":1}}],[\"图标列举不全\",{\"1\":{\"1752\":1}}],[\"图标给出前一年\",{\"1\":{\"1747\":1}}],[\"图标字体\",{\"0\":{\"622\":1}}],[\"图标等\",{\"1\":{\"142\":1}}],[\"图1\",{\"1\":{\"487\":1}}],[\"图片或者社交媒体消息\",{\"1\":{\"2087\":1}}],[\"图片变换等一系列图像处理操作\",{\"1\":{\"1656\":1}}],[\"图片等\",{\"1\":{\"1601\":1}}],[\"图片高度\",{\"1\":{\"737\":1}}],[\"图片宽度\",{\"1\":{\"737\":1}}],[\"图片的格式\",{\"1\":{\"666\":1}}],[\"图片的描述\",{\"1\":{\"666\":1}}],[\"图片的比例不变\",{\"1\":{\"633\":1}}],[\"图片路径\",{\"1\":{\"666\":1}}],[\"图片标签\",{\"0\":{\"666\":1}}],[\"图片比例不变\",{\"1\":{\"633\":1}}],[\"图片懒加载\",{\"0\":{\"478\":1}}],[\"图片\",{\"0\":{\"142\":1},\"1\":{\"159\":1,\"271\":1,\"1570\":1,\"1602\":1,\"1636\":1}}],[\"与旧子节点具有相同key的新子节点的索引\",{\"1\":{\"1969\":1}}],[\"与真实\",{\"1\":{\"1948\":1}}],[\"与响应式的关系\",{\"0\":{\"1943\":1}}],[\"与访问\",{\"1\":{\"1927\":1}}],[\"与data和\",{\"1\":{\"1845\":1}}],[\"与生命周期相关的实例方法有\",{\"1\":{\"1818\":1}}],[\"与事件相关的实例方法有\",{\"1\":{\"1813\":1}}],[\"与数据相关的实例方法有\",{\"1\":{\"1809\":1}}],[\"与服务端渲染相关的代码\",{\"1\":{\"1782\":1}}],[\"与运行平台无关的运行时代码\",{\"1\":{\"1782\":1}}],[\"与模板编译相关的代码\",{\"1\":{\"1782\":1}}],[\"与模块\",{\"0\":{\"1318\":1}}],[\"与模块化相关的\",{\"1\":{\"1300\":1}}],[\"与基准值法结合使用\",{\"1\":{\"1715\":1}}],[\"与众不同\",{\"1\":{\"1705\":1}}],[\"与nn\",{\"1\":{\"1666\":1}}],[\"与标签\",{\"1\":{\"1655\":1}}],[\"与传统的加法顺序相反\",{\"1\":{\"1712\":1}}],[\"与传统的\",{\"1\":{\"1649\":1}}],[\"与另一个源的资源进行通信时\",{\"1\":{\"1599\":1}}],[\"与另一个模块中的函数冲突了\",{\"1\":{\"27\":1}}],[\"与渲染主线程无关\",{\"1\":{\"1526\":1}}],[\"与toref功能一致\",{\"1\":{\"1502\":1}}],[\"与插值语法的区别\",{\"1\":{\"1399\":1,\"1400\":1}}],[\"与插值直接实现相比\",{\"1\":{\"1374\":1}}],[\"与新虚拟\",{\"1\":{\"1394\":1}}],[\"与methods实现相比\",{\"1\":{\"1374\":1}}],[\"与继承基本类似\",{\"1\":{\"1299\":1}}],[\"与列表不同\",{\"1\":{\"1276\":1}}],[\"与或非\",{\"1\":{\"1274\":1}}],[\"与大多数其他语言不同\",{\"1\":{\"1267\":1}}],[\"与节点操作的方法本质上是不一样的\",{\"1\":{\"1208\":1}}],[\"与preventdefault\",{\"1\":{\"1156\":1}}],[\"与此同时\",{\"1\":{\"1151\":1,\"1556\":1}}],[\"与load事件对应的是unload事件\",{\"1\":{\"1150\":1}}],[\"与clearinterval\",{\"1\":{\"1088\":1}}],[\"与every\",{\"1\":{\"945\":1}}],[\"与以往不同的是\",{\"1\":{\"911\":1}}],[\"与以上数据结构结合使用时\",{\"1\":{\"771\":1}}],[\"与集合一样\",{\"1\":{\"870\":1}}],[\"与结束的\",{\"1\":{\"790\":1}}],[\"与其文件扩展名是否匹配\",{\"1\":{\"771\":1}}],[\"与终点\",{\"1\":{\"725\":1}}],[\"与控制点\",{\"1\":{\"717\":1}}],[\"与上同理\",{\"1\":{\"617\":1}}],[\"与主轴垂直的方向称为\",{\"1\":{\"586\":1}}],[\"与之前盒模型不同\",{\"1\":{\"574\":1}}],[\"与父元素的相对位置\",{\"1\":{\"572\":1}}],[\"与书写习惯一致\",{\"1\":{\"540\":1}}],[\"与约定为\",{\"1\":{\"493\":1}}],[\"与末位交换\",{\"1\":{\"416\":2}}],[\"与编程语言\",{\"1\":{\"335\":1}}],[\"与页面\",{\"1\":{\"291\":2}}],[\"与查询字符串\",{\"1\":{\"282\":1}}],[\"与文件名拼接成绝对路径\",{\"1\":{\"262\":1}}],[\"与浏览器之间维护了一个\",{\"1\":{\"158\":2}}],[\"与\",{\"0\":{\"284\":1,\"808\":1,\"1084\":1,\"1248\":1,\"1359\":1,\"1504\":1,\"1505\":1,\"1506\":1,\"1508\":1,\"1932\":1,\"2035\":1},\"1\":{\"142\":1,\"237\":1,\"240\":1,\"262\":1,\"290\":1,\"382\":2,\"397\":1,\"402\":1,\"404\":2,\"548\":1,\"557\":1,\"681\":1,\"706\":1,\"725\":1,\"771\":1,\"877\":1,\"916\":1,\"967\":4,\"989\":1,\"1030\":1,\"1112\":1,\"1148\":1,\"1282\":1,\"1341\":1,\"1394\":1,\"1427\":1,\"1453\":1,\"1480\":3,\"1483\":1,\"1485\":1,\"1491\":1,\"1496\":1,\"1497\":1,\"1500\":1,\"1516\":1,\"1647\":1,\"1667\":1,\"1784\":1,\"1926\":1,\"1930\":1,\"1931\":1,\"1954\":1,\"1979\":1}}],[\"^on\",{\"1\":{\"1878\":1,\"1949\":2}}],[\"^ab|cd$\",{\"1\":{\"920\":1}}],[\"^b\",{\"1\":{\"919\":2}}],[\"^和$的常用功能是删除字符串首尾多余的空白\",{\"1\":{\"917\":1}}],[\"^>\",{\"1\":{\"912\":4,\"1792\":1}}],[\"^0\",{\"1\":{\"903\":2,\"904\":2}}],[\"^10\",{\"1\":{\"388\":1}}],[\"^\",{\"1\":{\"134\":1,\"388\":1,\"399\":1,\"816\":1,\"889\":1,\"902\":2,\"903\":1,\"904\":1,\"917\":2,\"920\":4,\"925\":3,\"967\":1,\"1162\":1,\"1445\":2,\"1792\":1,\"2028\":1,\"2054\":2}}],[\"回退到当前路由\",{\"1\":{\"2058\":1}}],[\"回退一个页面\",{\"1\":{\"1097\":1}}],[\"回头会作为\",{\"1\":{\"2058\":1}}],[\"回头就可以通过\",{\"1\":{\"2048\":1}}],[\"回头在子组件中就可以通过\",{\"1\":{\"2047\":1}}],[\"回头在外部就可以通过\",{\"1\":{\"2047\":1}}],[\"回答\",{\"1\":{\"1962\":1}}],[\"回答一些具体的严格模式下和普通模式之间的区别\",{\"1\":{\"959\":1}}],[\"回收内存地址\",{\"1\":{\"390\":1}}],[\"回车\",{\"1\":{\"384\":1,\"1370\":1}}],[\"回\",{\"1\":{\"250\":1,\"251\":1}}],[\"回调通常接收两个参数\",{\"1\":{\"2069\":1}}],[\"回调的触发时机\",{\"1\":{\"1498\":1}}],[\"回调留在\",{\"1\":{\"1438\":1,\"1439\":1}}],[\"回调地狱\",{\"1\":{\"1232\":1}}],[\"回调执行代码\",{\"1\":{\"1177\":1}}],[\"回调代码要在所有初始化代码执行完之后才会执行\",{\"1\":{\"1175\":1}}],[\"回调中又伴随着\",{\"1\":{\"1034\":1}}],[\"回调\",{\"1\":{\"252\":2,\"1437\":2,\"1987\":1,\"2075\":1}}],[\"回调函数中拿到新旧值\",{\"1\":{\"1897\":1}}],[\"回调函数中还有个参数\",{\"1\":{\"1199\":1}}],[\"回调函数会在每次匹配到闭合标签时被调用\",{\"1\":{\"1792\":1}}],[\"回调函数返回了一个promise\",{\"1\":{\"1777\":1}}],[\"回调函数的参数将是非响应式数据\",{\"1\":{\"1930\":1}}],[\"回调函数的函数体\",{\"1\":{\"1498\":1}}],[\"回调函数的返回值\",{\"1\":{\"1498\":1}}],[\"回调函数自动调用\",{\"1\":{\"1377\":1}}],[\"回调函数也是在主线程\",{\"1\":{\"1174\":1}}],[\"回调函数是\",{\"1\":{\"995\":1}}],[\"回调函数可以和其他参数一起传入到一个参数里面\",{\"1\":{\"943\":1}}],[\"回调函数\",{\"0\":{\"943\":1},\"1\":{\"250\":1,\"304\":1,\"368\":1,\"1406\":1,\"1440\":1,\"1854\":1,\"2061\":2,\"2069\":2}}],[\"回调不可省略\",{\"1\":{\"209\":1}}],[\"回到上一个历史记录的时候\",{\"1\":{\"2048\":1}}],[\"回到最近的一个\",{\"1\":{\"1232\":1}}],[\"回到\",{\"1\":{\"149\":1,\"2058\":2}}],[\"回到项目根目录\",{\"1\":{\"138\":1}}],[\"回到步骤\",{\"1\":{\"133\":1}}],[\"回顾一下我们的操作流程\",{\"1\":{\"133\":1}}],[\"打破大括号内表达式是\",{\"1\":{\"1519\":1}}],[\"打标识\",{\"1\":{\"1428\":1}}],[\"打断\",{\"1\":{\"1388\":1}}],[\"打游戏\",{\"1\":{\"1357\":1}}],[\"打印设备\",{\"1\":{\"651\":1}}],[\"打印出来为\",{\"1\":{\"996\":1}}],[\"打印出来是\",{\"1\":{\"980\":1}}],[\"打印出来\",{\"1\":{\"379\":1}}],[\"打开调试页面\",{\"1\":{\"2030\":1}}],[\"打开命令行工具\",{\"1\":{\"1591\":1}}],[\"打开终端\",{\"1\":{\"1573\":1}}],[\"打开开发者工具以后我们看到确实对\",{\"1\":{\"1123\":1}}],[\"打开和关闭窗口\",{\"1\":{\"1088\":1}}],[\"打开控制台工具\",{\"1\":{\"769\":1}}],[\"打开文件\",{\"1\":{\"404\":1}}],[\"打开页面查看效果\",{\"1\":{\"133\":1}}],[\"打包大小减少\",{\"1\":{\"1477\":1}}],[\"打包的\",{\"1\":{\"159\":1}}],[\"打包编译很慢\",{\"1\":{\"150\":1}}],[\"打包存放路径和名字\",{\"1\":{\"142\":1}}],[\"打包图片与字体\",{\"0\":{\"141\":1}}],[\"打包后是否自动打开\",{\"1\":{\"133\":1,\"134\":1}}],[\"打包之后\",{\"1\":{\"124\":1}}],[\"打包之后生成文件的路径\",{\"1\":{\"124\":1}}],[\"打包模式\",{\"1\":{\"124\":1}}],[\"打包生成文件的绝对路径\",{\"1\":{\"124\":1}}],[\"打包到\",{\"1\":{\"124\":1}}],[\"无关对比\",{\"1\":{\"1701\":1}}],[\"无中生有\",{\"1\":{\"1701\":1}}],[\"无转折\",{\"1\":{\"1691\":1}}],[\"无响应体\",{\"1\":{\"1537\":1}}],[\"无非就是加入了以下的请求头\",{\"1\":{\"1537\":1}}],[\"无非就是对节点进行增删改查\",{\"1\":{\"1115\":1}}],[\"无返回值\",{\"1\":{\"1156\":1}}],[\"无效\",{\"1\":{\"1156\":1}}],[\"无任何实际含义\",{\"1\":{\"1124\":1}}],[\"无论设置的是哪一个属性\",{\"1\":{\"1889\":1}}],[\"无论读取的是哪一个属性\",{\"1\":{\"1889\":1}}],[\"无论输入张量的尺寸如何\",{\"1\":{\"1663\":1}}],[\"无论它是简单请求\",{\"1\":{\"1612\":1}}],[\"无论如何都不能阻塞\",{\"1\":{\"1558\":1}}],[\"无论后面有多少个对象\",{\"1\":{\"1201\":1}}],[\"无论用户当前在看哪一个页面\",{\"1\":{\"1104\":1}}],[\"无论是跨站点的导航\",{\"1\":{\"2088\":1}}],[\"无论是文本节点还是标签节点\",{\"1\":{\"1978\":1}}],[\"无论是哪种\",{\"1\":{\"1959\":1}}],[\"无论是哪一种方式\",{\"1\":{\"1649\":1}}],[\"无论是否需要\",{\"1\":{\"2063\":1}}],[\"无论是否显式地声明\",{\"1\":{\"1954\":1}}],[\"无论是否滚动了页面\",{\"1\":{\"1153\":1}}],[\"无论是使用\",{\"1\":{\"1921\":1}}],[\"无论是定义判断还是类比推理\",{\"1\":{\"1757\":1}}],[\"无论是前端开发人员还是后端开发人员\",{\"1\":{\"1569\":1}}],[\"无论是在数学领域\",{\"1\":{\"1033\":1}}],[\"无论是字面量形式创建的数组\",{\"1\":{\"842\":1}}],[\"无\",{\"1\":{\"980\":6,\"1189\":1}}],[\"无限执行\",{\"1\":{\"644\":1}}],[\"无需处理\",{\"1\":{\"1792\":1}}],[\"无需计算\",{\"1\":{\"1737\":1}}],[\"无需打包操作\",{\"1\":{\"1483\":1}}],[\"无需等待事件回调执行完毕\",{\"1\":{\"1369\":1}}],[\"无需再传\",{\"1\":{\"405\":1}}],[\"无需加\",{\"1\":{\"238\":1}}],[\"无序集合\",{\"1\":{\"393\":1}}],[\"无序\",{\"1\":{\"392\":1,\"663\":1}}],[\"无输出\",{\"1\":{\"328\":1}}],[\"无法解密\",{\"1\":{\"2101\":1}}],[\"无法分析用户提供的内容\",{\"1\":{\"1874\":1}}],[\"无法监听数据的变化\",{\"1\":{\"1857\":1}}],[\"无法像属性getter那样拦截\",{\"1\":{\"1785\":1}}],[\"无法逆行\",{\"1\":{\"1776\":2}}],[\"无法主动推送消息\",{\"1\":{\"1649\":1}}],[\"无法做到精确计时\",{\"1\":{\"1560\":1}}],[\"无法正确获取\",{\"1\":{\"1497\":1}}],[\"无法访问到\",{\"1\":{\"1318\":1}}],[\"无法直接访问没有被转发的成员\",{\"1\":{\"1318\":1}}],[\"无法读取样式表中的样式\",{\"1\":{\"1127\":1}}],[\"无法看出\",{\"1\":{\"1105\":1}}],[\"无法被修复\",{\"1\":{\"980\":1}}],[\"无法区分的情况\",{\"1\":{\"967\":1}}],[\"无法区分用户\",{\"1\":{\"343\":1}}],[\"无法用对象作为对象属性的键名\",{\"1\":{\"868\":1}}],[\"无法将数据或者元素放置到其他元素中\",{\"1\":{\"764\":1}}],[\"无法跨域\",{\"1\":{\"350\":1}}],[\"无法在创建弱集合时传入一个数组进行初始化\",{\"1\":{\"865\":1}}],[\"无法在别的域名下获取使用\",{\"1\":{\"345\":1}}],[\"无法在一开始确定模块依赖关系\",{\"1\":{\"46\":1}}],[\"无法获取\",{\"1\":{\"282\":1}}],[\"无须安装\",{\"1\":{\"129\":1}}],[\"接下里会判断是否是数组\",{\"1\":{\"2081\":1}}],[\"接下来将调用结果包装为一个\",{\"1\":{\"2075\":1}}],[\"接下来将从以下几个方面来学习它们\",{\"1\":{\"1193\":1}}],[\"接下来向外部返回了一个\",{\"1\":{\"2075\":1}}],[\"接下来声明了\",{\"1\":{\"2073\":1}}],[\"接下来看\",{\"1\":{\"2070\":1}}],[\"接下来看一下\",{\"1\":{\"2062\":1}}],[\"接下来判断是否为布尔值\",{\"1\":{\"2070\":1}}],[\"接下来判断暂停状态是否存在并且是否等于\",{\"1\":{\"2061\":1}}],[\"接下来对\",{\"1\":{\"2070\":1}}],[\"接下来紧接着就去看有没有找到要渲染的组件\",{\"1\":{\"2070\":1}}],[\"接下来下面这段代码主要目的是为了在特定条件下触发\",{\"1\":{\"2069\":1}}],[\"接下来下面这段代码主要目的是在组件实例被复用\",{\"1\":{\"2069\":1}}],[\"接下来就让我们来看一下\",{\"1\":{\"2061\":1}}],[\"接下来就进入了挂载阶段\",{\"1\":{\"1806\":1}}],[\"接下来调用了\",{\"1\":{\"2058\":1}}],[\"接下来执行了源码中对应部分的代码\",{\"1\":{\"2047\":1}}],[\"接下来执行npm\",{\"1\":{\"148\":1}}],[\"接下来有一段代码是处理导航守卫\",{\"1\":{\"2043\":1}}],[\"接下来需要处理\",{\"1\":{\"2070\":1}}],[\"接下来需要找出可复用的节点\",{\"1\":{\"1969\":1}}],[\"接下来需要在\",{\"1\":{\"133\":1,\"149\":1}}],[\"接下来从两个方面分别说一下依赖收集和派发更新\",{\"1\":{\"1840\":1}}],[\"接下来到了生命周期流程的最后一个阶段\",{\"1\":{\"1807\":1}}],[\"接下来是一个\",{\"1\":{\"2065\":1}}],[\"接下来是关于\",{\"1\":{\"2045\":1}}],[\"接下来是\",{\"1\":{\"1526\":1,\"2080\":1}}],[\"接下来是箭头函数以对象的方式被调用的时候的\",{\"1\":{\"996\":1}}],[\"接下来的assign\",{\"1\":{\"1094\":1}}],[\"接下来这一小节\",{\"1\":{\"858\":1}}],[\"接下来我用\",{\"1\":{\"1204\":1}}],[\"接下来我将上面两组属性的区别总结成下面的表格\",{\"1\":{\"1087\":1}}],[\"接下来我手动为\",{\"1\":{\"828\":1}}],[\"接下来我们一个部分一个部分来进行解析\",{\"1\":{\"2065\":1}}],[\"接下来我们还是来逐行进行拆解\",{\"1\":{\"2061\":1}}],[\"接下来我们进入到代码拆解环节\",{\"1\":{\"2058\":1}}],[\"接下来我们就需要看一下\",{\"1\":{\"2058\":1}}],[\"接下来我们就会去看这个方法的源码\",{\"1\":{\"2058\":1}}],[\"接下来我们就来看一下\",{\"1\":{\"2047\":1}}],[\"接下来我们就可以顺藤摸瓜\",{\"1\":{\"2040\":1}}],[\"接下来我们重点来关心一下\",{\"1\":{\"2043\":1}}],[\"接下来我们到\",{\"1\":{\"2041\":1}}],[\"接下来我们会在项目中的\",{\"1\":{\"2041\":1}}],[\"接下来我们将\",{\"1\":{\"996\":1}}],[\"接下来我们再来看一个例子\",{\"1\":{\"996\":1}}],[\"接下来我们再来看一个反向引用的例子\",{\"1\":{\"912\":1}}],[\"接下来我们需要看一下函数名\",{\"1\":{\"951\":1}}],[\"接下来我们在\",{\"1\":{\"769\":1}}],[\"接下来我们来逐步解析方法的各个部分\",{\"1\":{\"2072\":1}}],[\"接下来我们来对\",{\"1\":{\"2069\":1}}],[\"接下来我们来一句一句进行解析\",{\"1\":{\"2047\":1}}],[\"接下来我们来一起看一下\",{\"1\":{\"1088\":1}}],[\"接下来我们来提前打印输出这个i变量\",{\"1\":{\"939\":1}}],[\"接下来我们来详细看一下形式参数\",{\"1\":{\"931\":1}}],[\"接下来我们来看下面的示例\",{\"1\":{\"1145\":1}}],[\"接下来我们来看一个事件的快速入门案例\",{\"1\":{\"1137\":1}}],[\"接下来我们来看一下有关深度的核心代码\",{\"1\":{\"2068\":1}}],[\"接下来我们来看一下\",{\"1\":{\"2060\":1}}],[\"接下来我们来看一下上面的三个方法\",{\"1\":{\"2045\":1}}],[\"接下来我们来看一下整个\",{\"1\":{\"2042\":1}}],[\"接下来我们来看一下对节点的增删改的操作\",{\"1\":{\"1115\":1}}],[\"接下来我们来看一下其他的属性\",{\"1\":{\"1093\":1}}],[\"接下来我们来看一下数组的遍历\",{\"1\":{\"846\":1}}],[\"接下来我们来看一下这个对象所包含的一些属性和方法\",{\"1\":{\"765\":1}}],[\"接下来我们来看\",{\"1\":{\"918\":1}}],[\"接下来我们来用\",{\"1\":{\"828\":1}}],[\"接下来我们来改变\",{\"1\":{\"770\":1}}],[\"接下来我们来具体看一下这段代码\",{\"1\":{\"765\":1}}],[\"接下来我们删除之前打包好的\",{\"1\":{\"128\":1}}],[\"接下来\",{\"1\":{\"148\":1,\"765\":2,\"958\":1,\"1084\":1,\"1537\":1,\"1673\":1,\"2061\":1}}],[\"接下来在组件的\",{\"1\":{\"2071\":1}}],[\"接下来在\",{\"1\":{\"128\":1,\"129\":1,\"138\":2,\"769\":2}}],[\"接语\",{\"1\":{\"1698\":1}}],[\"接语选择\",{\"0\":{\"1698\":1},\"1\":{\"1684\":1}}],[\"接着将其加\",{\"1\":{\"1892\":1}}],[\"接着\",{\"1\":{\"1655\":1,\"1667\":1}}],[\"接着再执行剩余的网络任务\",{\"1\":{\"1181\":1}}],[\"接着再设置另一个定时器\",{\"1\":{\"1038\":1}}],[\"接受和处理第一个参数\",{\"1\":{\"2019\":1}}],[\"接受三种传参方式\",{\"1\":{\"2019\":1}}],[\"接受传入的数据\",{\"1\":{\"1953\":1}}],[\"接受并使用从服务器发来的数据\",{\"1\":{\"1572\":1}}],[\"接受了这些参数之后\",{\"1\":{\"1039\":1}}],[\"接受一个或多个函数作为参数\",{\"1\":{\"1033\":1}}],[\"接受一个或多个函数作为输入\",{\"1\":{\"1033\":1}}],[\"接受一个参数\",{\"1\":{\"925\":1}}],[\"接受一个整数作为参数\",{\"1\":{\"856\":1}}],[\"接受一个函数作为第二个参数\",{\"1\":{\"841\":1}}],[\"接口或者\",{\"1\":{\"2030\":1}}],[\"接口参考\",{\"0\":{\"1594\":1}}],[\"接口来实现父子组件交互\",{\"1\":{\"1499\":1}}],[\"接口可用于通过熟悉的\",{\"1\":{\"771\":1}}],[\"接口测试工具\",{\"0\":{\"341\":1}}],[\"接口地址\",{\"1\":{\"338\":1}}],[\"接口的组成\",{\"0\":{\"338\":1}}],[\"接口的开发与调用\",{\"0\":{\"337\":1}}],[\"接口的作用\",{\"0\":{\"336\":1}}],[\"接口的英文单词是\",{\"1\":{\"335\":1}}],[\"接口是\",{\"1\":{\"335\":1}}],[\"接口是什么\",{\"0\":{\"335\":1}}],[\"接口拿到数据\",{\"1\":{\"218\":1}}],[\"接口\",{\"0\":{\"333\":1},\"1\":{\"218\":1,\"335\":1,\"362\":1,\"754\":1,\"768\":1,\"2030\":1}}],[\"接收两个参数\",{\"1\":{\"2058\":2}}],[\"接收守卫回调函数\",{\"1\":{\"2043\":1}}],[\"接收新节点作为参数\",{\"1\":{\"1977\":1}}],[\"接收模板字符串作为参数\",{\"1\":{\"1974\":1}}],[\"接收第二个参数\",{\"1\":{\"1930\":1,\"1977\":1}}],[\"接收请求并完成响应的称之为服务器\",{\"1\":{\"1628\":1}}],[\"接收一个参数\",{\"1\":{\"1913\":1,\"1991\":1}}],[\"接收一个对象\",{\"1\":{\"1488\":1}}],[\"接收一个字符串参数\",{\"1\":{\"925\":1}}],[\"接收的数据可以是\",{\"1\":{\"1487\":1}}],[\"接收的参数就是所要绑定的对象\",{\"1\":{\"995\":1}}],[\"接收参数\",{\"1\":{\"1459\":1,\"1461\":1,\"1462\":1}}],[\"接收数据\",{\"1\":{\"1429\":1,\"1438\":1,\"1439\":1}}],[\"接收数组作为函数执行时的参数\",{\"1\":{\"995\":1}}],[\"接收\",{\"1\":{\"765\":2,\"883\":1,\"1139\":1}}],[\"接收jwt的一方\",{\"1\":{\"366\":1}}],[\"接收三个参数\",{\"1\":{\"309\":1,\"2069\":1}}],[\"接收基本导出的变量\",{\"1\":{\"52\":1}}],[\"接收默认导出的变量\",{\"1\":{\"52\":1}}],[\"接收变量名\",{\"1\":{\"52\":2}}],[\"手册内容\",{\"1\":{\"527\":1}}],[\"手动调用副作用函数\",{\"1\":{\"1897\":1}}],[\"手动调用\",{\"1\":{\"1896\":4,\"1930\":1,\"1986\":2}}],[\"手动调用dep\",{\"1\":{\"1785\":1}}],[\"手动对数据进行转化\",{\"1\":{\"1578\":1}}],[\"手动设置\",{\"1\":{\"752\":1}}],[\"手动\",{\"1\":{\"532\":1}}],[\"手动拼接格式化\",{\"0\":{\"386\":1}}],[\"手动引入打包好的\",{\"1\":{\"128\":1}}],[\"手机号\",{\"1\":{\"1035\":1,\"1394\":1}}],[\"手机\",{\"1\":{\"270\":1}}],[\"手写promise\",{\"0\":{\"1775\":1}}],[\"手写\",{\"0\":{\"1777\":1},\"1\":{\"2006\":1,\"2024\":1},\"2\":{\"103\":1}}],[\"许多没有太多技术含量并且感觉是在浪费时间的事情\",{\"1\":{\"128\":1}}],[\"生的副作用\",{\"1\":{\"1897\":1}}],[\"生命周期会调用组件级守卫\",{\"1\":{\"2071\":1}}],[\"生命周期函数调用时要绑定渲染上下文对象\",{\"1\":{\"1956\":1}}],[\"生命周期和指令\",{\"1\":{\"1950\":1}}],[\"生命周期钩子函数\",{\"1\":{\"1950\":1}}],[\"生命周期相关\",{\"0\":{\"1818\":1}}],[\"生命周期\",{\"0\":{\"1014\":1,\"1500\":1,\"1798\":1},\"1\":{\"1500\":2}}],[\"生成参数代码\",{\"1\":{\"1979\":1}}],[\"生成函数调用代码\",{\"1\":{\"1979\":1}}],[\"生成渲染函数代码\",{\"1\":{\"1979\":1}}],[\"生成子组件实例赋值给vnode\",{\"1\":{\"1862\":1}}],[\"生成子类阶段\",{\"1\":{\"1825\":1}}],[\"生成虚拟\",{\"1\":{\"1802\":1}}],[\"生成虚拟dom\",{\"1\":{\"1396\":1}}],[\"生成不同的vnode节点\",{\"1\":{\"1797\":1}}],[\"生成文本类型的ast节点\",{\"1\":{\"1791\":1}}],[\"生成文件的名字\",{\"1\":{\"124\":1}}],[\"生成相应的\",{\"1\":{\"1446\":1,\"1494\":1}}],[\"生成对应的vnode\",{\"1\":{\"1446\":1,\"1494\":1}}],[\"生成如下的\",{\"1\":{\"1802\":1}}],[\"生成如下代码\",{\"1\":{\"1428\":1}}],[\"生成如下render中的数据\",{\"1\":{\"1357\":1}}],[\"生成render函数阶段\",{\"1\":{\"1428\":1}}],[\"生成代码时生成如下的字符串\",{\"1\":{\"1358\":1}}],[\"生成代码\",{\"1\":{\"1352\":1}}],[\"生成所有可能的选择器排列\",{\"1\":{\"1332\":2}}],[\"生成指针对象\",{\"1\":{\"1187\":1}}],[\"生成\",{\"0\":{\"1833\":1},\"1\":{\"883\":2,\"1394\":1,\"1862\":1}}],[\"生成路径的第一步叫做\",{\"1\":{\"711\":1}}],[\"生成之后\",{\"1\":{\"711\":1}}],[\"生成协程对象\",{\"1\":{\"408\":1}}],[\"生成器\",{\"0\":{\"1979\":1},\"1\":{\"402\":1,\"1972\":1}}],[\"生成器表达式\",{\"1\":{\"402\":1}}],[\"生成器函数使用yield语句返回\",{\"1\":{\"402\":1}}],[\"生成器函数返回本次计算结果\",{\"1\":{\"402\":1}}],[\"生成器函数\",{\"1\":{\"402\":1}}],[\"生成新序列的每个元素都是一个元组\",{\"1\":{\"401\":1}}],[\"生成复数\",{\"1\":{\"395\":2}}],[\"生成接口\",{\"1\":{\"220\":1}}],[\"生成一个个\",{\"1\":{\"1526\":1}}],[\"生成一个新的选择器应用样式\",{\"1\":{\"1340\":1}}],[\"生成一个\",{\"1\":{\"155\":1}}],[\"生成依赖关系图\",{\"1\":{\"155\":1}}],[\"生成的是h4标题\",{\"1\":{\"1446\":1}}],[\"生成的是ul列表\",{\"1\":{\"1446\":1}}],[\"生成的字符串会转义成一个反斜杠字符\",{\"1\":{\"384\":1}}],[\"生成的\",{\"1\":{\"128\":1,\"1275\":1,\"1797\":1,\"1974\":1}}],[\"生成模式\",{\"1\":{\"124\":1}}],[\"生产依赖yarn\",{\"1\":{\"87\":1}}],[\"生产依赖\",{\"1\":{\"72\":2}}],[\"生产依赖与开发依赖\",{\"0\":{\"72\":1}}],[\"生产环境的项目一般\",{\"1\":{\"71\":1}}],[\"生产环境\",{\"1\":{\"71\":2}}],[\"生产环境与开发环境\",{\"0\":{\"71\":1}}],[\"源代码\",{\"1\":{\"1972\":1}}],[\"源远流\",{\"1\":{\"1705\":1}}],[\"源码如下\",{\"1\":{\"2060\":1}}],[\"源码\",{\"1\":{\"2045\":1}}],[\"源码目录如下\",{\"1\":{\"2040\":1}}],[\"源码可以在\",{\"1\":{\"2040\":1}}],[\"源码位置\",{\"1\":{\"1790\":1}}],[\"源码的升级\",{\"0\":{\"1478\":1}}],[\"源码解析\",{\"0\":{\"113\":1,\"2067\":1},\"2\":{\"114\":1,\"1770\":1,\"1773\":1,\"1780\":1,\"1829\":1,\"1868\":1,\"1882\":1,\"1898\":1,\"1933\":1,\"1939\":1,\"1957\":1,\"1970\":1,\"1980\":1,\"1994\":1,\"2004\":1,\"2022\":1,\"2036\":1,\"2085\":1}}],[\"源对象被拖放到目标对象内\",{\"1\":{\"764\":1}}],[\"源对象离开过程对象的范围\",{\"1\":{\"764\":1}}],[\"源对象在过程对象范围内移动\",{\"1\":{\"764\":1}}],[\"源对象开始进入过程对象范围内\",{\"1\":{\"764\":1}}],[\"源对象开始拖放\",{\"1\":{\"764\":1}}],[\"源对象拖放结束\",{\"1\":{\"764\":1}}],[\"源对象拖放过程中\",{\"1\":{\"764\":1}}],[\"源对象与目标对象示意图\",{\"1\":{\"763\":1}}],[\"源对象可以进入这个区域\",{\"1\":{\"763\":1}}],[\"源对象\",{\"1\":{\"763\":1,\"764\":1,\"1488\":1,\"1492\":1}}],[\"源对象和目标对象\",{\"0\":{\"763\":1}}],[\"源在上面\",{\"1\":{\"743\":1}}],[\"源\",{\"1\":{\"743\":2,\"1600\":1,\"2069\":1}}],[\"源文件并不易读\",{\"1\":{\"124\":1}}],[\"源文件的入口文件\",{\"1\":{\"124\":1}}],[\"出于这个原因\",{\"1\":{\"1914\":1}}],[\"出错时将promise的状态变为rejected\",{\"1\":{\"1777\":1}}],[\"出题特意延后一年\",{\"1\":{\"1747\":1}}],[\"出题的选项中\",{\"1\":{\"1689\":1}}],[\"出\",{\"1\":{\"1705\":1}}],[\"出色的\",{\"1\":{\"1195\":1}}],[\"出了\",{\"1\":{\"1028\":1}}],[\"出了边框则属于盒子的外部\",{\"1\":{\"544\":1}}],[\"出来\",{\"1\":{\"980\":1,\"1281\":1}}],[\"出来之前\",{\"1\":{\"694\":1}}],[\"出口＝\",{\"1\":{\"1752\":1}}],[\"出口额=贸易顺差+进口额\",{\"1\":{\"1740\":1}}],[\"出口额\",{\"1\":{\"1740\":1}}],[\"出口\",{\"1\":{\"155\":1,\"1752\":1}}],[\"出口文件\",{\"1\":{\"124\":1}}],[\"出现\",{\"1\":{\"1728\":1}}],[\"出现过两次\",{\"1\":{\"1368\":1}}],[\"出现的几率\",{\"1\":{\"1242\":1}}],[\"出现的文字顺序如下\",{\"1\":{\"1139\":1,\"1140\":1}}],[\"出现弹出框\",{\"1\":{\"1150\":1}}],[\"出现原因\",{\"0\":{\"1010\":1}}],[\"出现下面的提示\",{\"1\":{\"124\":1}}],[\"出现了以下数值\",{\"1\":{\"1153\":1}}],[\"出现了\",{\"1\":{\"37\":1}}],[\"各自处理不同的职责\",{\"1\":{\"2016\":1}}],[\"各自的生成函数代码\",{\"1\":{\"1979\":1}}],[\"各部分增量相加等于总增量\",{\"1\":{\"1729\":1}}],[\"各大浏览器厂商分析了上百万的页面\",{\"1\":{\"694\":1}}],[\"各选择器之间没有空格\",{\"1\":{\"517\":1}}],[\"各个成员通过逗号\",{\"1\":{\"1311\":1}}],[\"各个\",{\"1\":{\"124\":1}}],[\"各种方法的定义\",{\"1\":{\"2041\":1}}],[\"各种变量的定义\",{\"1\":{\"2041\":1}}],[\"各种静态资源的获取\",{\"1\":{\"1632\":1}}],[\"各种节点的动画效果\",{\"1\":{\"1224\":1}}],[\"各种小程序出现\",{\"1\":{\"25\":1}}],[\"各种后端数据库驱动出现\",{\"1\":{\"25\":1}}],[\"本节课重点讲解的进程\",{\"1\":{\"1555\":1}}],[\"本节的最后介绍一下链式调用\",{\"1\":{\"947\":1}}],[\"本着\",{\"1\":{\"1539\":2}}],[\"本文章内容\",{\"1\":{\"2038\":1}}],[\"本文重点讨论网络通信中ajax的跨域问题\",{\"1\":{\"1601\":1}}],[\"本文仅讨论客户端缓存\",{\"1\":{\"1533\":1}}],[\"本文参考自\",{\"1\":{\"773\":1}}],[\"本来要返回数值的操作数未返回数值\",{\"1\":{\"795\":1}}],[\"本示例中\",{\"1\":{\"765\":1}}],[\"本地项目效果预览\",{\"1\":{\"2040\":1}}],[\"本地\",{\"1\":{\"771\":1}}],[\"本地文件读取\",{\"0\":{\"771\":1}}],[\"本地文件无法触发\",{\"1\":{\"770\":1}}],[\"本地存储的值的类型只能是字符串\",{\"1\":{\"769\":1}}],[\"本地化的数据和离线数据等\",{\"1\":{\"768\":1}}],[\"本地域名\",{\"0\":{\"371\":1}}],[\"本地安装\",{\"1\":{\"123\":1}}],[\"本质\",{\"1\":{\"1432\":1}}],[\"本质是一个具备缓存的\",{\"1\":{\"1857\":1}}],[\"本质是一个函数\",{\"1\":{\"1501\":1}}],[\"本质是一个特殊属性\",{\"1\":{\"1401\":1}}],[\"本质是一个回调函数\",{\"1\":{\"309\":1}}],[\"本质就是做了两件事\",{\"1\":{\"1396\":1}}],[\"本质就是一个函数\",{\"1\":{\"156\":1}}],[\"本质上只有一张\",{\"1\":{\"2048\":1}}],[\"本质上和\",{\"1\":{\"2002\":1}}],[\"本质上都是一个循环遍历\",{\"1\":{\"1923\":1}}],[\"本质上是一个类\",{\"1\":{\"2026\":1}}],[\"本质上是组件实例的代理\",{\"1\":{\"1956\":1}}],[\"本质上是\",{\"1\":{\"1951\":1}}],[\"本质上是以新的\",{\"1\":{\"1789\":1}}],[\"本质上是键值对的集合\",{\"1\":{\"867\":1}}],[\"本质上还是先声明\",{\"1\":{\"1012\":1}}],[\"本质上分为两个阶段\",{\"1\":{\"463\":1}}],[\"本质上\",{\"1\":{\"138\":1,\"711\":1}}],[\"本身的卸载方法也是需要执行的\",{\"1\":{\"2047\":1}}],[\"本身的功能并不多\",{\"1\":{\"122\":1}}],[\"本身就是\",{\"1\":{\"1976\":1}}],[\"本身可能已经是原始数据\",{\"1\":{\"1929\":1}}],[\"本身已经有很多内置的函数可供使用\",{\"1\":{\"1282\":1}}],[\"本身并未浮动\",{\"1\":{\"566\":1}}],[\"本身\",{\"1\":{\"386\":1}}],[\"本身是一个异步方法\",{\"1\":{\"1224\":1}}],[\"本身是一个\",{\"1\":{\"300\":1,\"340\":1}}],[\"本身特有的性质\",{\"1\":{\"25\":1}}],[\"编程式路由导航\",{\"0\":{\"1464\":1}}],[\"编程的接口\",{\"1\":{\"768\":1}}],[\"编号的捕获组\",{\"1\":{\"921\":1}}],[\"编辑文件\",{\"1\":{\"372\":1}}],[\"编辑器打开文件\",{\"1\":{\"253\":1}}],[\"编辑器保存文件\",{\"1\":{\"248\":1}}],[\"编辑器\",{\"1\":{\"223\":1}}],[\"编码参数\",{\"1\":{\"2045\":2}}],[\"编码时就确定了\",{\"1\":{\"1020\":1}}],[\"编码时是按照模块一个一个编码的\",{\"1\":{\"233\":1}}],[\"编码的字符串\",{\"1\":{\"384\":1}}],[\"编码\",{\"0\":{\"1639\":1},\"1\":{\"345\":1,\"773\":1,\"888\":1,\"1530\":1,\"1639\":1}}],[\"编译的目标是将模板编译为渲染函数\",{\"1\":{\"1975\":1}}],[\"编译时\",{\"0\":{\"1874\":1},\"1\":{\"1874\":1}}],[\"编译时会根据正则从不同的捕获分组中获得\",{\"1\":{\"1353\":1}}],[\"编译时会根据正则分割出括号中的内容作为表达式\",{\"1\":{\"1352\":1}}],[\"编译\",{\"1\":{\"1341\":1}}],[\"编译工具\",{\"1\":{\"1324\":1}}],[\"编译器将\",{\"1\":{\"1972\":1}}],[\"编译器会将使用组件时传入的插槽编译为返回\",{\"1\":{\"1954\":1}}],[\"编译器会把模板内容\",{\"1\":{\"1880\":1}}],[\"编译器会尝试自动查找\",{\"1\":{\"1308\":1}}],[\"编译器的作用是\",{\"1\":{\"1880\":1}}],[\"编译器\",{\"0\":{\"1880\":1,\"1972\":1}}],[\"编译器宏来显式指定在\",{\"1\":{\"1493\":1}}],[\"编译器则不会去编译\",{\"1\":{\"1315\":1}}],[\"编译出来的\",{\"1\":{\"1298\":1,\"1299\":1}}],[\"编译以后\",{\"1\":{\"1297\":1}}],[\"编译后的\",{\"1\":{\"1267\":1,\"1269\":1,\"1273\":1,\"1275\":1,\"1278\":1,\"1288\":1,\"1289\":1,\"1290\":1,\"1301\":1,\"1302\":1,\"1306\":1,\"1309\":1,\"1312\":1,\"1313\":1,\"1314\":1,\"1315\":1,\"1317\":1,\"1318\":1,\"1319\":1,\"1320\":1}}],[\"编译结果\",{\"1\":{\"1261\":1,\"1262\":1,\"1284\":1,\"1954\":1}}],[\"编译阶段通过函数参数个数\",{\"1\":{\"485\":1}}],[\"编译打包的各个阶段的状态信息告知浏览器端\",{\"1\":{\"158\":1}}],[\"编译模块\",{\"1\":{\"154\":1}}],[\"编译为统一的\",{\"1\":{\"146\":1}}],[\"编译成渲染函数并添加到\",{\"1\":{\"1880\":1}}],[\"编译成\",{\"1\":{\"122\":2}}],[\"编写插件\",{\"1\":{\"2047\":1}}],[\"编写请求文本\",{\"1\":{\"1630\":1}}],[\"编写\",{\"1\":{\"1445\":1,\"1456\":1}}],[\"编写的基本模板\",{\"0\":{\"713\":1}}],[\"编写的工具包\",{\"1\":{\"340\":1}}],[\"编写基本结构\",{\"1\":{\"340\":1}}],[\"编写一个\",{\"1\":{\"263\":1}}],[\"编写代码\",{\"1\":{\"133\":1}}],[\"编写模块时\",{\"1\":{\"37\":1}}],[\"编写依附于其他应用的小程序\",{\"1\":{\"25\":1}}],[\"让用户停留在当前页面\",{\"1\":{\"2029\":1}}],[\"让用户自由选择是否使用\",{\"1\":{\"1875\":1}}],[\"让副作用函数与\",{\"1\":{\"1930\":1}}],[\"让一个对象可响应\",{\"1\":{\"1827\":1}}],[\"让一个响应式数据变为只读的\",{\"1\":{\"1505\":2}}],[\"让自定义的数组方法替代原生方法执行\",{\"1\":{\"1785\":1}}],[\"让前一层的输出其均值为\",{\"1\":{\"1665\":1}}],[\"让前端有能力自由组装后台数据\",{\"1\":{\"218\":1}}],[\"让每一次请求和响应都是有意义的\",{\"1\":{\"1646\":1}}],[\"让服务器告诉你这个资源有没有过期\",{\"1\":{\"1539\":1}}],[\"让应用有更好的用户体验\",{\"1\":{\"1516\":1}}],[\"让相关功能的代码更加有序的组织在一起\",{\"1\":{\"1512\":1}}],[\"让不展示的路由组件保持挂载\",{\"1\":{\"1465\":1}}],[\"让路由跳转更加灵活\",{\"1\":{\"1464\":1}}],[\"让路由组件更方便的收到参数\",{\"1\":{\"1462\":1}}],[\"让多种数据分类更加明确\",{\"1\":{\"1454\":1}}],[\"让父组件可以向子组件指定位置插入\",{\"1\":{\"1446\":1}}],[\"让组件接收外部\",{\"1\":{\"1429\":1}}],[\"让代码更好维护\",{\"1\":{\"1454\":1}}],[\"让代码变的更为干净易读\",{\"1\":{\"1298\":1}}],[\"让代码自动化地执行这一系列复杂的流程\",{\"1\":{\"122\":1}}],[\"让程序在等待事件发生的同时\",{\"1\":{\"1137\":1}}],[\"让系统通知\",{\"1\":{\"1105\":1}}],[\"让子类型的原型的construcor指向子类型\",{\"1\":{\"1069\":1}}],[\"让子类型的原型指向父类型的实例\",{\"1\":{\"1069\":1}}],[\"让内部函数对象成为垃圾对象\",{\"1\":{\"1025\":1}}],[\"让变量不会外泄\",{\"1\":{\"1016\":1}}],[\"让你变成一个更好的程序员\",{\"1\":{\"956\":1}}],[\"让我们一起来看一下映射这种数据结构\",{\"1\":{\"866\":1}}],[\"让清除部分完全透明\",{\"1\":{\"706\":1}}],[\"让元素可以跟随页面大小的改变而改变\",{\"1\":{\"584\":1}}],[\"让彼此更专业高效\",{\"1\":{\"218\":1}}],[\"让\",{\"1\":{\"138\":2,\"150\":1,\"1501\":1,\"1543\":1,\"1572\":1,\"1927\":1}}],[\"让开发者集中注意力编写业务代码\",{\"1\":{\"122\":1}}],[\"强大的选择器\",{\"1\":{\"1195\":1}}],[\"强大的生态\",{\"1\":{\"122\":1}}],[\"强调\",{\"1\":{\"662\":1}}],[\"强制vuerouter内部path与当前url同步\",{\"1\":{\"2029\":1}}],[\"强制开启了深度监视\",{\"1\":{\"1497\":1}}],[\"强制\",{\"1\":{\"532\":1}}],[\"强制在非空目录下创建\",{\"1\":{\"331\":1}}],[\"强制删除\",{\"1\":{\"8\":1}}],[\"特定运行平台的代码\",{\"1\":{\"1782\":1}}],[\"特定范围内的数值选择器\",{\"1\":{\"757\":1}}],[\"特别注意\",{\"1\":{\"1423\":1}}],[\"特别是在\",{\"1\":{\"2043\":1}}],[\"特别是在使用最初为使用\",{\"1\":{\"1307\":1}}],[\"特别是像列表类的应用\",{\"1\":{\"1241\":1}}],[\"特别是浏览器端工程化中遇到的问题\",{\"1\":{\"122\":1}}],[\"特有的属性\",{\"1\":{\"1834\":2}}],[\"特有的文档处理方法\",{\"1\":{\"1212\":1}}],[\"特有的选择器\",{\"1\":{\"1203\":1}}],[\"特性\",{\"1\":{\"1308\":1}}],[\"特性的方法有\",{\"1\":{\"1232\":1}}],[\"特性一样\",{\"1\":{\"989\":1}}],[\"特性在变成属性时\",{\"1\":{\"680\":1}}],[\"特殊处理\",{\"1\":{\"1948\":1}}],[\"特殊要求\",{\"1\":{\"1757\":1}}],[\"特殊题型\",{\"0\":{\"1749\":1}}],[\"特殊\",{\"1\":{\"1370\":1}}],[\"特殊情况\",{\"0\":{\"1968\":1},\"1\":{\"558\":1,\"1497\":1}}],[\"特殊的两个\",{\"1\":{\"532\":1}}],[\"特殊状态\",{\"1\":{\"520\":1}}],[\"特点和块盒一样\",{\"1\":{\"541\":1}}],[\"特点\",{\"0\":{\"85\":1},\"1\":{\"291\":1,\"1388\":1,\"1389\":1}}],[\"致力于解决前端工程化\",{\"1\":{\"122\":1}}],[\"致使一些公司开始招募专业的前端开发者\",{\"1\":{\"23\":1}}],[\"答疑环节\",{\"0\":{\"1637\":1}}],[\"答案是有的\",{\"1\":{\"1124\":1}}],[\"答案是\",{\"1\":{\"992\":1}}],[\"答案就是\",{\"1\":{\"939\":1}}],[\"答\",{\"1\":{\"117\":1}}],[\"反复读题\",{\"1\":{\"1736\":1}}],[\"反卷积层\",{\"0\":{\"1667\":1}}],[\"反射\",{\"1\":{\"1491\":1}}],[\"反向引用可以用于建立前后联系\",{\"1\":{\"912\":1}}],[\"反向引用允许在正则表达式内部引用之前捕获分组匹配到的文本\",{\"1\":{\"912\":1}}],[\"反向引用\",{\"0\":{\"912\":1},\"1\":{\"902\":1}}],[\"反\",{\"1\":{\"397\":1}}],[\"反检索\",{\"1\":{\"389\":1}}],[\"反斜杠符号\",{\"1\":{\"384\":1}}],[\"反之就只是更新\",{\"1\":{\"1917\":1}}],[\"反之就舍去\",{\"1\":{\"402\":1}}],[\"反之亦然\",{\"1\":{\"1737\":1,\"1741\":1}}],[\"反之\",{\"1\":{\"1529\":1}}],[\"反之则不行\",{\"1\":{\"1018\":1}}],[\"反之如果文件不存在会报错\",{\"1\":{\"238\":1}}],[\"反之安装失败\",{\"1\":{\"62\":1}}],[\"反而到了浏览器端变得如此严重呢\",{\"1\":{\"117\":1}}],[\"端常用\",{\"0\":{\"1471\":1}}],[\"端网站都可以在移动端中正常浏览\",{\"1\":{\"649\":1}}],[\"端网页可以在移动端正常访问\",{\"1\":{\"649\":1}}],[\"端进行布局时会相对于默认的\",{\"1\":{\"648\":1}}],[\"端口可以省略\",{\"1\":{\"1626\":2}}],[\"端口监听中\",{\"1\":{\"1573\":1}}],[\"端口监听为\",{\"1\":{\"301\":1,\"304\":1}}],[\"端口启动\",{\"1\":{\"316\":1,\"321\":1}}],[\"端口拼接形成完整\",{\"1\":{\"291\":1}}],[\"端口\",{\"1\":{\"273\":1,\"355\":1,\"1093\":1,\"1530\":1,\"1600\":1,\"2051\":1}}],[\"端口号被占用\",{\"1\":{\"275\":1}}],[\"端口号\",{\"1\":{\"268\":1}}],[\"端的页面\",{\"1\":{\"610\":1}}],[\"端的视觉\",{\"1\":{\"222\":1}}],[\"端的客户端软件\",{\"1\":{\"222\":1}}],[\"端\",{\"1\":{\"117\":1,\"646\":1}}],[\"端没有那么明显\",{\"1\":{\"117\":1}}],[\"端可以良好的被支持\",{\"1\":{\"37\":1}}],[\"思考一个问题\",{\"1\":{\"1595\":1}}],[\"思考\",{\"0\":{\"1595\":1},\"1\":{\"117\":1,\"289\":1}}],[\"思考题\",{\"1\":{\"87\":1,\"1556\":1}}],[\"你从新路由\",{\"1\":{\"2058\":1}}],[\"你给我发的是个啥啊\",{\"1\":{\"1635\":1}}],[\"你没有缓存以前的内容\",{\"1\":{\"1635\":1}}],[\"你自己就用以前的吧\",{\"1\":{\"1635\":1}}],[\"你要的东西跟之前是一样的\",{\"1\":{\"1635\":1}}],[\"你要的东西不在这个地址了\",{\"1\":{\"1635\":2}}],[\"你有半杯\",{\"1\":{\"1621\":1}}],[\"你有新消息\",{\"1\":{\"1104\":1}}],[\"你能否在你的网站中写入一段\",{\"1\":{\"1595\":1}}],[\"你开发了一个网站\",{\"1\":{\"1595\":1}}],[\"你随意\",{\"1\":{\"1539\":2}}],[\"你那边更新一下就可以了\",{\"1\":{\"1537\":1}}],[\"你曾经告诉我\",{\"1\":{\"1537\":2}}],[\"你请求的这个资源\",{\"1\":{\"1534\":1}}],[\"你应该首先使用标准的\",{\"1\":{\"1499\":1}}],[\"你当然也可以绑定一个组件方法而不是内联函数\",{\"1\":{\"1499\":1}}],[\"你需要指明\",{\"1\":{\"1498\":1}}],[\"你需要创建路径起始点\",{\"1\":{\"710\":1}}],[\"你不用担心\",{\"1\":{\"1224\":1}}],[\"你记住\",{\"1\":{\"1198\":1}}],[\"你点击了子元素\",{\"1\":{\"1155\":2}}],[\"你点击了父元素\",{\"1\":{\"1155\":2}}],[\"你正在加载一个页面\",{\"1\":{\"1150\":1}}],[\"你按下了键盘上的某一个键\",{\"1\":{\"1149\":1}}],[\"你已经触发了事件\",{\"1\":{\"1148\":1,\"1154\":2}}],[\"你像这样做的话\",{\"1\":{\"1053\":1}}],[\"你将通过柯里化函数得到一个新的函数\",{\"1\":{\"1039\":1}}],[\"你将遇到非常多的非业务问题\",{\"1\":{\"116\":1}}],[\"你只需要显示出能控制音频播放的控件\",{\"1\":{\"749\":1}}],[\"你只需要理解\",{\"1\":{\"128\":1}}],[\"你的\",{\"1\":{\"1738\":1}}],[\"你的请求我已收到\",{\"1\":{\"1635\":2}}],[\"你的请求我收到了\",{\"1\":{\"1635\":4}}],[\"你的网络似乎出了一些问题\",{\"1\":{\"1580\":1}}],[\"你的缓存资源仍然可用\",{\"1\":{\"1537\":1}}],[\"你的浏览器不支持\",{\"1\":{\"747\":2}}],[\"你的页面是通过\",{\"1\":{\"219\":1}}],[\"你通常会使用\",{\"1\":{\"711\":1}}],[\"你就能通过描边或填充路径区域来渲染图形\",{\"1\":{\"710\":1}}],[\"你最喜欢的数字是\",{\"1\":{\"697\":1}}],[\"你无法估计当前的工作会在何时完成\",{\"1\":{\"696\":1}}],[\"你好\",{\"1\":{\"1460\":1,\"1461\":2,\"1645\":1,\"1646\":1}}],[\"你好啊\",{\"1\":{\"429\":2,\"1486\":1}}],[\"你好朋友\",{\"1\":{\"307\":1}}],[\"你在网站上看到的很多功能都是专有创作\",{\"1\":{\"659\":1}}],[\"你在访问微信小程序时\",{\"1\":{\"343\":1}}],[\"你在安装手机应用的时候\",{\"1\":{\"343\":1}}],[\"你会发现一个事情\",{\"1\":{\"2058\":1}}],[\"你会发现打包的结果中很多文件名类似于这样\",{\"1\":{\"1543\":1}}],[\"你会发现许多其他类型的元数据\",{\"1\":{\"659\":1}}],[\"你会发现\",{\"1\":{\"150\":1,\"222\":1}}],[\"你可以把这个数组看作是一个队列\",{\"1\":{\"2072\":1}}],[\"你可以把它简单地理解为函数调用中的\",{\"1\":{\"1902\":1}}],[\"你可以把它理解为函数调用过程中的\",{\"1\":{\"1901\":1}}],[\"你可以监听这个事件\",{\"1\":{\"2050\":1}}],[\"你可以一次性的提供添加和取消操作\",{\"1\":{\"2043\":1}}],[\"你可以缓存这个资源\",{\"1\":{\"1539\":1}}],[\"你可以理解为模板中的表达式和\",{\"1\":{\"1486\":1}}],[\"你可以在每次\",{\"1\":{\"1232\":1}}],[\"你可以根据自己的习惯进行选择\",{\"1\":{\"1209\":1}}],[\"你可以直接通过\",{\"1\":{\"735\":1}}],[\"你可以通过transform\",{\"1\":{\"619\":1}}],[\"你可以通过将\",{\"1\":{\"142\":1}}],[\"你可能要考虑\",{\"1\":{\"1621\":1}}],[\"你可能会在图像的两边或顶部和底部出现空隙\",{\"1\":{\"633\":1}}],[\"你可能会疑问\",{\"1\":{\"224\":1}}],[\"你可能想停止当前\",{\"1\":{\"142\":1}}],[\"你都需要\",{\"1\":{\"142\":1}}],[\"你是包的作者\",{\"1\":{\"93\":1}}],[\"文本状态\",{\"1\":{\"1974\":2}}],[\"文本子节点以及一组子节点\",{\"1\":{\"1951\":1}}],[\"文本解析器\",{\"0\":{\"1793\":1}}],[\"文本内容\",{\"1\":{\"1788\":1}}],[\"文本分为三个部分\",{\"1\":{\"1629\":1}}],[\"文本中的多个空格会被合并为一个单空格\",{\"1\":{\"1352\":1}}],[\"文本段落\",{\"1\":{\"1208\":1}}],[\"文本节点对应的\",{\"1\":{\"1978\":1}}],[\"文本节点\",{\"0\":{\"1114\":1},\"1\":{\"1788\":1,\"1796\":1,\"1948\":1,\"1951\":1,\"1974\":2}}],[\"文本域\",{\"1\":{\"756\":1}}],[\"文本阴影\",{\"0\":{\"733\":1}}],[\"文本基线在文本块的底部\",{\"1\":{\"730\":1}}],[\"文本基线在文本块的中间\",{\"1\":{\"730\":1}}],[\"文本基线在文本块的顶部\",{\"1\":{\"730\":1}}],[\"文本的居中是基于你在filltext的时候所给的\",{\"1\":{\"730\":1}}],[\"文本的水平对齐\",{\"1\":{\"625\":1}}],[\"文本居中对齐\",{\"1\":{\"730\":1}}],[\"文本右对齐\",{\"1\":{\"730\":1}}],[\"文本左对齐\",{\"1\":{\"730\":1}}],[\"文本对齐选项\",{\"1\":{\"730\":1}}],[\"文本框中的内容会变为\",{\"1\":{\"1161\":2}}],[\"文本框里的内容会产生变化\",{\"1\":{\"1160\":1}}],[\"文本框和密码框必须指定\",{\"1\":{\"670\":1}}],[\"文本框\",{\"1\":{\"670\":1,\"756\":1}}],[\"文本文字\",{\"1\":{\"765\":1}}],[\"文本文档\",{\"1\":{\"664\":1}}],[\"文本文件\",{\"1\":{\"664\":1}}],[\"文本样式\",{\"0\":{\"625\":1,\"730\":1}}],[\"文字\",{\"1\":{\"765\":2}}],[\"文字阴影\",{\"0\":{\"614\":1}}],[\"文字会自动环绕在浮动元素的周围\",{\"1\":{\"561\":1}}],[\"文档内容未被修改\",{\"1\":{\"1635\":1}}],[\"文档内容的应用程序接口\",{\"1\":{\"1109\":1}}],[\"文档地址\",{\"1\":{\"1587\":1}}],[\"文档后\",{\"1\":{\"1526\":1}}],[\"文档来了解这些选择器的用法\",{\"1\":{\"1203\":1}}],[\"文档树加载完和\",{\"1\":{\"1200\":1}}],[\"文档树加载完之后执行一个函数\",{\"1\":{\"1200\":1}}],[\"文档加载完毕时执行回调\",{\"1\":{\"1198\":1}}],[\"文档处理\",{\"1\":{\"1194\":1}}],[\"文档可以看到\",{\"1\":{\"1194\":1}}],[\"文档解析模块\",{\"1\":{\"1172\":1}}],[\"文档碎片\",{\"0\":{\"1120\":1}}],[\"文档节点\",{\"0\":{\"1111\":1}}],[\"文档表示的就是整个的\",{\"1\":{\"1109\":1}}],[\"文档里面引入\",{\"1\":{\"1078\":1}}],[\"文档声明如下\",{\"1\":{\"691\":2}}],[\"文档类型说明\",{\"0\":{\"691\":1}}],[\"文档中描述的\",{\"1\":{\"1491\":1}}],[\"文档中嵌套层次最深的那个节点\",{\"1\":{\"1139\":1}}],[\"文档中存在很多文件\",{\"1\":{\"623\":1}}],[\"文档中给出了另一种设置方式\",{\"1\":{\"616\":1}}],[\"文档中的出现顺序从上到下排列\",{\"1\":{\"539\":1}}],[\"文档流\",{\"2\":{\"550\":1}}],[\"文档结构可选的常用字段类型列表\",{\"1\":{\"192\":1}}],[\"文档对象模型\",{\"0\":{\"1109\":1}}],[\"文档对象\",{\"1\":{\"181\":1,\"189\":1}}],[\"文档命令\",{\"0\":{\"181\":1}}],[\"文档是数据库中的最小单位\",{\"1\":{\"176\":1}}],[\"文档\",{\"1\":{\"176\":3,\"182\":1,\"1094\":1,\"1109\":1,\"1139\":1,\"1197\":1,\"1202\":1,\"1203\":1,\"1204\":1,\"1205\":1,\"1207\":1,\"1213\":1,\"1219\":1,\"1225\":1,\"1231\":1,\"1570\":1,\"1636\":1}}],[\"文档教程\",{\"0\":{\"111\":1},\"2\":{\"112\":1}}],[\"文件下面\",{\"1\":{\"2072\":1}}],[\"文件下载好\",{\"1\":{\"1526\":1}}],[\"文件里面\",{\"1\":{\"2052\":1}}],[\"文件里面书写如下的配置信息\",{\"1\":{\"148\":1}}],[\"文件所对应\",{\"1\":{\"2047\":1}}],[\"文件所在文件夹作为工作目录\",{\"1\":{\"340\":1}}],[\"文件过大\",{\"1\":{\"1592\":2}}],[\"文件还没有下载解析好\",{\"1\":{\"1526\":1}}],[\"文件和\",{\"1\":{\"1526\":1}}],[\"文件再将其引入index\",{\"1\":{\"1454\":1}}],[\"文件的访问地址\",{\"1\":{\"1592\":1}}],[\"文件的中间部分使用了hash值\",{\"1\":{\"1543\":1}}],[\"文件的语句\",{\"1\":{\"1315\":1}}],[\"文件的名称\",{\"1\":{\"128\":1}}],[\"文件以逗号\",{\"1\":{\"1313\":1}}],[\"文件作为模块时\",{\"1\":{\"1308\":1}}],[\"文件只打算作为模块加载\",{\"1\":{\"1308\":1}}],[\"文件扩展名不同\",{\"1\":{\"1247\":1}}],[\"文件是提前准备好了的\",{\"1\":{\"1088\":1}}],[\"文件时\",{\"1\":{\"1079\":1,\"1315\":1}}],[\"文件大小\",{\"1\":{\"771\":1}}],[\"文件必须有\",{\"1\":{\"404\":1}}],[\"文件对象的\",{\"1\":{\"404\":1}}],[\"文件操作\",{\"0\":{\"404\":1}}],[\"文件结构\",{\"0\":{\"376\":1}}],[\"文件也可以设置域名与\",{\"1\":{\"373\":1}}],[\"文件也看成是模块\",{\"1\":{\"138\":1}}],[\"文件为默认打开的资源\",{\"1\":{\"316\":1}}],[\"文件或\",{\"1\":{\"675\":1}}],[\"文件或字节流的性质和格式\",{\"1\":{\"294\":1}}],[\"文件或文件夹\",{\"1\":{\"254\":1}}],[\"文件重命名\",{\"1\":{\"263\":1}}],[\"文件体积\",{\"1\":{\"260\":1}}],[\"文件体积越小越好\",{\"1\":{\"117\":1}}],[\"文件删除\",{\"0\":{\"255\":1}}],[\"文件新的路径\",{\"1\":{\"254\":1}}],[\"文件当前的路径\",{\"1\":{\"254\":1}}],[\"文件移动与重命名\",{\"0\":{\"254\":1}}],[\"文件读取顾名思义\",{\"1\":{\"249\":1}}],[\"文件读取\",{\"0\":{\"249\":1}}],[\"文件名以\",{\"1\":{\"1308\":1}}],[\"文件名\",{\"1\":{\"244\":1,\"404\":1}}],[\"文件名发送到输出目录\",{\"1\":{\"142\":1}}],[\"文件写入成功\",{\"1\":{\"245\":1}}],[\"文件写入就是将\",{\"1\":{\"243\":1}}],[\"文件写入\",{\"0\":{\"243\":1},\"1\":{\"248\":2}}],[\"文件系统提供了多种文件访问接口\",{\"1\":{\"771\":1}}],[\"文件系统\",{\"1\":{\"242\":1}}],[\"文件系统中某一个文件发生修改\",{\"1\":{\"158\":1}}],[\"文件进行处理\",{\"1\":{\"238\":1}}],[\"文件转换成\",{\"1\":{\"238\":1}}],[\"文件导入时可以不用写后缀\",{\"1\":{\"238\":1}}],[\"文件来理解\",{\"1\":{\"176\":1}}],[\"文件示例\",{\"1\":{\"176\":1}}],[\"文件指纹是打包后输出的文件名的后缀\",{\"1\":{\"159\":1}}],[\"文件指纹是什么\",{\"0\":{\"159\":1}}],[\"文件列表\",{\"1\":{\"158\":1}}],[\"文件监听原理\",{\"0\":{\"157\":1}}],[\"文件路径\",{\"1\":{\"155\":3,\"247\":1,\"250\":1,\"251\":1,\"252\":1,\"255\":1,\"1655\":1}}],[\"文件已经由开发者打包好了我们可以直接使用的\",{\"1\":{\"150\":1}}],[\"文件已经被\",{\"1\":{\"7\":1}}],[\"文件都会被送\",{\"1\":{\"150\":1}}],[\"文件中同时使用\",{\"1\":{\"1309\":1}}],[\"文件中定义\",{\"1\":{\"1299\":1}}],[\"文件中引入\",{\"0\":{\"1078\":1},\"1\":{\"1078\":1}}],[\"文件中引入此插件\",{\"1\":{\"129\":1}}],[\"文件中\",{\"1\":{\"238\":1,\"244\":1,\"1298\":1}}],[\"文件中的\",{\"1\":{\"176\":1}}],[\"文件中就会有接收\",{\"1\":{\"158\":1}}],[\"文件中增加配置项\",{\"1\":{\"149\":1}}],[\"文件中进行查看\",{\"1\":{\"149\":1}}],[\"文件打包到\",{\"1\":{\"138\":1}}],[\"文件引入打包好的\",{\"1\":{\"128\":1}}],[\"文件等操作\",{\"1\":{\"128\":1}}],[\"文件内容不变\",{\"1\":{\"159\":1}}],[\"文件内容\",{\"1\":{\"124\":5,\"155\":3}}],[\"文件内容并把它放入到一个环境中执行\",{\"1\":{\"37\":1}}],[\"文件优化\",{\"1\":{\"122\":1}}],[\"文件越少越好\",{\"1\":{\"117\":1}}],[\"文件在本地\",{\"1\":{\"117\":1}}],[\"文件带来了更多的请求\",{\"1\":{\"116\":1}}],[\"文件夹专门用来管理\",{\"1\":{\"2011\":1}}],[\"文件夹下创建一个\",{\"1\":{\"2011\":1}}],[\"文件夹下会有很多的\",{\"1\":{\"150\":1}}],[\"文件夹路径\",{\"1\":{\"257\":1,\"258\":1,\"259\":1,\"260\":1,\"294\":1}}],[\"文件夹操作\",{\"0\":{\"256\":1}}],[\"文件夹大多数情况都不会存入版本库\",{\"1\":{\"74\":1}}],[\"文件夹\",{\"1\":{\"66\":1,\"257\":1,\"263\":1}}],[\"文件\",{\"0\":{\"1079\":1},\"1\":{\"31\":1,\"37\":1,\"64\":1,\"116\":1,\"128\":1,\"138\":3,\"148\":1,\"149\":1,\"150\":1,\"176\":1,\"212\":1,\"243\":1,\"263\":1,\"288\":1,\"301\":1,\"321\":1,\"331\":1,\"340\":1,\"376\":1,\"379\":1,\"659\":1,\"664\":1,\"675\":2,\"1079\":2,\"1150\":1,\"1308\":1,\"1313\":1,\"1315\":1,\"1319\":2,\"1441\":1,\"1526\":1,\"2050\":1,\"2067\":1}}],[\"文件会变为修改状态\",{\"1\":{\"7\":1}}],[\"文件修改已经保存\",{\"1\":{\"7\":1}}],[\"文件没有被\",{\"1\":{\"7\":1}}],[\"文件状态\",{\"0\":{\"7\":1}}],[\"根节点的第一个子节点就是模板的根节点\",{\"1\":{\"1978\":1}}],[\"根节点\",{\"1\":{\"1974\":3,\"1978\":1}}],[\"根实例\",{\"0\":{\"1846\":1}}],[\"根vnode\",{\"1\":{\"1835\":2}}],[\"根的\",{\"1\":{\"1835\":2}}],[\"根组件实例\",{\"1\":{\"1800\":1}}],[\"根元素\",{\"0\":{\"692\":1},\"1\":{\"577\":1}}],[\"根路径\",{\"1\":{\"294\":1}}],[\"根据一定的优先级顺序来获取类名\",{\"1\":{\"2066\":1}}],[\"根据新的哈希值来更新页面内容\",{\"1\":{\"2049\":1}}],[\"根据路由的配置描述建立映射表\",{\"1\":{\"2028\":1}}],[\"根据模式实例化对应的history对象\",{\"1\":{\"2027\":1}}],[\"根据提示输入项目名称创建脚手架\",{\"1\":{\"2008\":1}}],[\"根据vnode\",{\"1\":{\"2000\":1}}],[\"根据给定的值返回查找结果\",{\"1\":{\"1993\":1}}],[\"根据处理后的事件名称去\",{\"1\":{\"1954\":1}}],[\"根据约定对事件名称进行处理\",{\"1\":{\"1954\":1}}],[\"根据应用环境的不同输出不同的构建产物\",{\"1\":{\"1875\":1}}],[\"根据占位符\",{\"1\":{\"1862\":1}}],[\"根据子组件定义的\",{\"1\":{\"1834\":1}}],[\"根据id来读取相应的对象\",{\"1\":{\"1828\":1}}],[\"根据传入的\",{\"1\":{\"2027\":1}}],[\"根据传入的路由表创建matcher对象\",{\"1\":{\"2027\":1}}],[\"根据传入的el参数获取dom元素\",{\"1\":{\"1805\":1}}],[\"根据传参的不同作不同的处理\",{\"1\":{\"1816\":1}}],[\"根据传递的模块路径\",{\"1\":{\"37\":1}}],[\"根据当前线路匹配的路径和\",{\"1\":{\"2031\":1}}],[\"根据当前节点的索引删除当前节点\",{\"1\":{\"1977\":1}}],[\"根据当前\",{\"1\":{\"1796\":1}}],[\"根据当前描点与给定的控制点\",{\"1\":{\"717\":1}}],[\"根据返回的结果创建带变量\",{\"1\":{\"1791\":1}}],[\"根据常理\",{\"1\":{\"1776\":1}}],[\"根据整体求部分\",{\"1\":{\"1731\":1}}],[\"根据名义增长率求得基期后\",{\"1\":{\"1727\":1}}],[\"根据问题分清题型\",{\"1\":{\"1703\":1}}],[\"根据填空词\",{\"1\":{\"1702\":1}}],[\"根据句子之间的\",{\"1\":{\"1702\":1}}],[\"根据句子定性适当略读\",{\"1\":{\"1695\":1}}],[\"根据是否\",{\"1\":{\"1691\":1}}],[\"根据上述的均值和方差\",{\"1\":{\"1665\":1}}],[\"根据上述信息生成代码\",{\"1\":{\"1353\":1}}],[\"根据不同的配置对\",{\"1\":{\"2032\":1}}],[\"根据不同的环境以不同的方式执行回调\",{\"1\":{\"1822\":1}}],[\"根据不同的值进行不同处理\",{\"1\":{\"1570\":1}}],[\"根据不同的个数\",{\"1\":{\"487\":1}}],[\"根据响应结果做不同的处理\",{\"1\":{\"1570\":1}}],[\"根据缓存规则看是否命中缓存\",{\"1\":{\"1530\":1}}],[\"根据参数确定变量值\",{\"1\":{\"1307\":1}}],[\"根据参数的不同去执行不同的操作\",{\"1\":{\"485\":1}}],[\"根据声明变量的位置\",{\"1\":{\"1261\":1}}],[\"根据数据是否已经创建完节点来决定是否停止\",{\"1\":{\"1038\":1}}],[\"根据维基百科的定义\",{\"1\":{\"1033\":1}}],[\"根据字符组的介绍\",{\"1\":{\"906\":1}}],[\"根据控制点和半径绘制圆弧路径\",{\"1\":{\"717\":1}}],[\"根据需要生成滚动条\",{\"1\":{\"557\":1}}],[\"根据元素的\",{\"1\":{\"516\":2}}],[\"根据标签名来选中指定的元素\",{\"1\":{\"516\":1}}],[\"根据视图模板渲染好模板字符串页面\",{\"1\":{\"507\":1}}],[\"根据实参是\",{\"1\":{\"402\":1}}],[\"根据域名返回\",{\"1\":{\"373\":1}}],[\"根据请求响应结果\",{\"1\":{\"335\":1}}],[\"根据\",{\"1\":{\"203\":1,\"794\":1,\"846\":1,\"980\":1,\"1560\":2,\"1702\":1,\"1711\":1,\"1854\":1,\"1889\":3,\"1903\":1,\"1906\":1,\"1974\":2,\"1979\":1,\"2047\":1,\"2058\":1,\"2074\":1}}],[\"根据文件内容来定义\",{\"1\":{\"159\":1}}],[\"根据生成的关系依赖图输出bundle\",{\"1\":{\"155\":1}}],[\"根据配置文件对模块\",{\"1\":{\"158\":1}}],[\"根据配置确定输出的路径和文件名\",{\"1\":{\"154\":1}}],[\"根据配置中的\",{\"1\":{\"154\":1}}],[\"根据入口和模块之间的依赖关系\",{\"1\":{\"154\":1}}],[\"根本原因\",{\"0\":{\"117\":1},\"1\":{\"117\":1}}],[\"根本懒得写\",{\"1\":{\"108\":1}}],[\"小红可以使用自己的私钥进行解密\",{\"1\":{\"2100\":1}}],[\"小明可以使用小红的公钥进行加密\",{\"1\":{\"2100\":1}}],[\"小集合的关系\",{\"1\":{\"1733\":1}}],[\"小一点\",{\"1\":{\"1720\":1}}],[\"小冰箱\",{\"1\":{\"1621\":1}}],[\"小王决定用代理解决\",{\"1\":{\"1615\":1}}],[\"小驼峰形式\",{\"1\":{\"1358\":1}}],[\"小数\",{\"1\":{\"1723\":1}}],[\"小数型和科学记数法型\",{\"1\":{\"793\":1}}],[\"小数点后位数不足\",{\"1\":{\"385\":1}}],[\"小数点后为\",{\"1\":{\"385\":4}}],[\"小表示缩小\",{\"1\":{\"720\":1}}],[\"小部件\",{\"1\":{\"697\":1}}],[\"小屏幕\",{\"1\":{\"651\":1}}],[\"小的则会消失\",{\"1\":{\"552\":1}}],[\"小括号括起来\",{\"1\":{\"391\":1}}],[\"小程序会询问是否允许授予权限\",{\"1\":{\"343\":1}}],[\"小写\",{\"1\":{\"282\":1}}],[\"小型网站的后端\",{\"0\":{\"220\":1}}],[\"小于号\",{\"1\":{\"658\":1}}],[\"小于比较\",{\"1\":{\"398\":1}}],[\"小于实际长度\",{\"1\":{\"385\":1}}],[\"小于\",{\"1\":{\"206\":1,\"398\":1,\"651\":1,\"816\":1}}],[\"小于等于比较\",{\"1\":{\"398\":1}}],[\"小于等于\",{\"1\":{\"166\":1,\"398\":1,\"794\":1,\"812\":1,\"816\":1}}],[\"小米\",{\"1\":{\"200\":1}}],[\"小记\",{\"0\":{\"108\":1}}],[\"小时后\",{\"1\":{\"93\":1}}],[\"小时\",{\"1\":{\"93\":1,\"1534\":1}}],[\"小伙子正在为一件事焦头烂额\",{\"1\":{\"24\":1}}],[\"暴露给外部的方法\",{\"1\":{\"2057\":2}}],[\"暴露到渲染环境的数据包括\",{\"1\":{\"1956\":1}}],[\"暴露出来的方法和公共方法\",{\"1\":{\"2002\":1}}],[\"暴露出来的响应式数据\",{\"1\":{\"1953\":1}}],[\"暴露出去\",{\"1\":{\"1016\":1,\"2055\":1}}],[\"暴露router\",{\"1\":{\"1456\":1}}],[\"暴露数据\",{\"0\":{\"237\":1},\"1\":{\"236\":1}}],[\"暴露模型对象\",{\"1\":{\"212\":1}}],[\"暴露\",{\"1\":{\"91\":1,\"321\":1}}],[\"暴露行为\",{\"1\":{\"29\":1,\"30\":1}}],[\"切出函数外\",{\"1\":{\"1187\":1}}],[\"切片\",{\"1\":{\"389\":1}}],[\"切记\",{\"1\":{\"89\":3}}],[\"切换完毕后会把目标路由更新替换当前路由\",{\"1\":{\"2033\":1}}],[\"切换过程中会执行一系列的导航守卫钩子函数\",{\"1\":{\"2033\":1}}],[\"切换模型模式\",{\"0\":{\"1677\":1}}],[\"切换到结束标签名称状态\",{\"1\":{\"1974\":1}}],[\"切换到结束标签状态\",{\"1\":{\"1974\":1}}],[\"切换到标签开始状态\",{\"1\":{\"1974\":1}}],[\"切换到标签名称状态\",{\"1\":{\"1974\":1}}],[\"切换到初始状态\",{\"1\":{\"1974\":2}}],[\"切换到文本状态\",{\"1\":{\"1974\":1}}],[\"切换到你要创建项目的目录\",{\"1\":{\"1426\":1}}],[\"切换到指定的数据库\",{\"1\":{\"179\":1}}],[\"切换频率较高的场景\",{\"1\":{\"1389\":1}}],[\"切换频率较低的场景\",{\"1\":{\"1388\":1}}],[\"切换\",{\"1\":{\"1205\":1,\"1677\":1}}],[\"切换使用指定版本的\",{\"1\":{\"229\":1}}],[\"切换镜像源\",{\"1\":{\"67\":3}}],[\"切换分支\",{\"1\":{\"10\":1}}],[\"选用\",{\"1\":{\"1874\":1}}],[\"选中控制\",{\"1\":{\"756\":2}}],[\"选中相同的元素\",{\"1\":{\"522\":1}}],[\"选中\",{\"1\":{\"519\":5,\"623\":1}}],[\"选中所有包含\",{\"1\":{\"519\":1}}],[\"选中指定元素内的指定后代元素\",{\"1\":{\"518\":1}}],[\"选中指定父元素的指定子元素\",{\"1\":{\"518\":1}}],[\"选中同时符合多个条件的元素\",{\"1\":{\"517\":1}}],[\"选中页面中的所有元素\",{\"1\":{\"516\":1}}],[\"选中会停止服务\",{\"1\":{\"177\":1}}],[\"选出左右节点中较大值的索引\",{\"1\":{\"416\":1}}],[\"选项值可以是一个布尔值\",{\"1\":{\"2070\":1}}],[\"选项将当前路由的参数传递给路由组件\",{\"1\":{\"2070\":1}}],[\"选项将传入组件的属性挂载到instance\",{\"1\":{\"2001\":1}}],[\"选项将被忽略\",{\"1\":{\"1954\":1}}],[\"选项中有定义\",{\"1\":{\"1954\":1}}],[\"选项是特例\",{\"1\":{\"1825\":1}}],[\"选项绑定的数据不是响应式的\",{\"1\":{\"1803\":1}}],[\"选项又小又近\",{\"1\":{\"1748\":1}}],[\"选项比较近\",{\"1\":{\"1748\":1}}],[\"选项正常\",{\"1\":{\"1748\":1}}],[\"选项为百分数\",{\"1\":{\"1735\":1}}],[\"选项距离极近的所有除法题目\",{\"1\":{\"1721\":1}}],[\"选项之间的差异\",{\"1\":{\"1711\":1}}],[\"选项来确定组件的\",{\"1\":{\"2070\":1}}],[\"选项来开始使用这些数据\",{\"1\":{\"1508\":1}}],[\"选项来提供数据\",{\"1\":{\"1508\":1}}],[\"选项式\",{\"1\":{\"1485\":3,\"1953\":1}}],[\"选项应始终被声明为一个函数\",{\"1\":{\"1480\":1,\"1519\":1}}],[\"选项\",{\"1\":{\"743\":1,\"1498\":1,\"1894\":1,\"1897\":3,\"2069\":1,\"2070\":1}}],[\"选项配置\",{\"1\":{\"247\":1,\"250\":1,\"251\":1,\"252\":1,\"257\":1,\"258\":1,\"259\":1,\"260\":1}}],[\"选项设置\",{\"1\":{\"244\":1}}],[\"选择选项中尾数为\",{\"1\":{\"1711\":1}}],[\"选择更\",{\"1\":{\"1696\":1}}],[\"选择是否加载训练集\",{\"1\":{\"1656\":1}}],[\"选择不同的方案不会对上下层造成影响\",{\"1\":{\"1621\":1}}],[\"选择符|的优先级最低\",{\"1\":{\"920\":1}}],[\"选择项的尝试匹配次序是从左到右\",{\"1\":{\"914\":1}}],[\"选择分支的数目没有限制\",{\"1\":{\"914\":1}}],[\"选择相关元字符\",{\"0\":{\"914\":1}}],[\"选择文件\",{\"0\":{\"772\":1}}],[\"选择框必须指定\",{\"1\":{\"670\":1}}],[\"选择框必须要指定一个\",{\"1\":{\"670\":1}}],[\"选择属性值中含有某值的元素\",{\"1\":{\"519\":1}}],[\"选择属性值中含有某值的元素的元素\",{\"1\":{\"519\":1}}],[\"选择属性值以指定值结尾的元素\",{\"1\":{\"519\":1}}],[\"选择属性值以指定值开头的元素\",{\"1\":{\"519\":1}}],[\"选择含有指定属性和属性值的元素\",{\"1\":{\"519\":1}}],[\"选择含有指定属性的元素\",{\"1\":{\"519\":1}}],[\"选择后边所有的兄弟元素\",{\"1\":{\"518\":1}}],[\"选择后一个兄弟元素\",{\"1\":{\"518\":1}}],[\"选择器失效\",{\"1\":{\"1433\":1}}],[\"选择器来获取\",{\"1\":{\"1236\":1}}],[\"选择器来查询元素节点对象\",{\"1\":{\"1112\":1}}],[\"选择器时会搜素整个文档\",{\"1\":{\"1236\":1}}],[\"选择器替代\",{\"0\":{\"1236\":1}}],[\"选择器可以更快速的定位到目标\",{\"1\":{\"1234\":1}}],[\"选择器开始继承\",{\"0\":{\"1234\":1}}],[\"选择器获取的\",{\"1\":{\"1198\":1}}],[\"选择器的累加不会超过其最大的数量级\",{\"1\":{\"524\":1}}],[\"选择器的权重\",{\"1\":{\"524\":1}}],[\"选择器优先级\",{\"0\":{\"522\":1}}],[\"选择器分组\",{\"1\":{\"517\":1}}],[\"选择器是\",{\"1\":{\"515\":1}}],[\"选择器\",{\"0\":{\"515\":1,\"1203\":1,\"1236\":1},\"1\":{\"514\":2,\"516\":2,\"517\":8,\"524\":3,\"1193\":1,\"1194\":1,\"1234\":1,\"1433\":1,\"1515\":1}}],[\"选择排序的优化\",{\"1\":{\"414\":1}}],[\"选择排序\",{\"0\":{\"411\":1}}],[\"选择\",{\"0\":{\"89\":1},\"1\":{\"920\":1,\"2008\":1}}],[\"选做\",{\"1\":{\"69\":1}}],[\"能简述一下吗\",{\"1\":{\"1649\":1}}],[\"能让我们用方法\",{\"1\":{\"1485\":1}}],[\"能使用子代选择器就不要使用后代选择器\",{\"0\":{\"1243\":1}}],[\"能保证页面的所有加载已经完成\",{\"1\":{\"1240\":1}}],[\"能见度更改\",{\"1\":{\"1132\":1}}],[\"能更方便快捷的定位问题\",{\"1\":{\"507\":1}}],[\"能被转成数字的就转成数字类型\",{\"1\":{\"493\":1}}],[\"能被各种浏览器识别的语言\",{\"1\":{\"146\":1}}],[\"能存储的数据量不能超过\",{\"1\":{\"350\":1}}],[\"能够再次点击前进按钮回到\",{\"1\":{\"2058\":1}}],[\"能够进行正常跳转\",{\"1\":{\"2050\":1}}],[\"能够被\",{\"1\":{\"2050\":1}}],[\"能够手动执行副作用函数\",{\"1\":{\"1895\":1}}],[\"能够通过分享地址完整的重现页面\",{\"1\":{\"1569\":1}}],[\"能够解决绝大部分浏览器的兼容性问题\",{\"1\":{\"1195\":1}}],[\"能够解决其他运行时的问题\",{\"1\":{\"117\":1}}],[\"能够解决其他工程化的问题\",{\"1\":{\"117\":1}}],[\"能够得到小数\",{\"1\":{\"803\":1}}],[\"能够在每个用户域存储\",{\"1\":{\"768\":1}}],[\"能够产生影响的只有数值类属性\",{\"1\":{\"640\":1}}],[\"能够处理的有效模块\",{\"1\":{\"138\":1}}],[\"能够去处理那些非\",{\"1\":{\"138\":1}}],[\"能够保证在不同系统上无差异的工作\",{\"1\":{\"85\":1}}],[\"能直接修改模块内部的数据\",{\"1\":{\"28\":1}}],[\"简而言之就是是否为原生html或只是普通文本\",{\"1\":{\"1788\":1}}],[\"简化写法配合传递参数\",{\"1\":{\"1460\":1}}],[\"简化后\",{\"1\":{\"1460\":1}}],[\"简化前\",{\"1\":{\"1460\":1}}],[\"简化跳转\",{\"1\":{\"1460\":1}}],[\"简化一切\",{\"1\":{\"1194\":1}}],[\"简化代码\",{\"1\":{\"310\":1}}],[\"简记\",{\"0\":{\"904\":1}}],[\"简洁\",{\"1\":{\"1776\":1}}],[\"简洁写法\",{\"1\":{\"388\":1,\"401\":1}}],[\"简洁的锁文件格式和明确的安装算法\",{\"1\":{\"85\":1}}],[\"简称xhr和fetch\",{\"1\":{\"1572\":1}}],[\"简称断言\",{\"1\":{\"918\":1}}],[\"简称\",{\"1\":{\"219\":1,\"875\":1,\"1015\":1,\"1487\":1,\"1488\":1}}],[\"简写形式实际上是默认将定义的回调函数在bind和update阶段执行\",{\"1\":{\"1408\":1}}],[\"简写形式\",{\"1\":{\"1406\":1,\"1407\":1}}],[\"简写形式如下\",{\"1\":{\"1380\":1}}],[\"简写写法\",{\"1\":{\"1376\":1}}],[\"简写属性\",{\"0\":{\"592\":1},\"1\":{\"641\":1}}],[\"简写\",{\"1\":{\"209\":1,\"1376\":1,\"1380\":2,\"1496\":1}}],[\"简易复现\",{\"0\":{\"155\":1}}],[\"简介\",{\"0\":{\"122\":1,\"170\":1,\"334\":1,\"1193\":1,\"1247\":1,\"1324\":1,\"1475\":1},\"1\":{\"377\":1}}],[\"简单来讲\",{\"1\":{\"2047\":1}}],[\"简单来说\",{\"1\":{\"298\":1,\"572\":1,\"810\":1,\"1142\":1,\"1599\":1,\"1607\":1,\"2099\":1}}],[\"简单来说浏览器\",{\"1\":{\"50\":1}}],[\"简单实现\",{\"1\":{\"1897\":1}}],[\"简单除法\",{\"1\":{\"1717\":1}}],[\"简单\",{\"0\":{\"1960\":1,\"1964\":1},\"1\":{\"1609\":2,\"1962\":1,\"1964\":1}}],[\"简单请求\",{\"0\":{\"1607\":1},\"1\":{\"1606\":1}}],[\"简单一句话总结\",{\"1\":{\"1485\":1}}],[\"简单的说\",{\"1\":{\"1035\":1,\"1036\":1}}],[\"简单类型的值被称为简单值\",{\"1\":{\"980\":1}}],[\"简单值采用值比较\",{\"1\":{\"983\":1}}],[\"简单值是作为不可细化的值进行存储和使用的\",{\"1\":{\"982\":1}}],[\"简单值是表示\",{\"1\":{\"980\":1}}],[\"简单值的数据是存储于内存中的栈区里面的\",{\"1\":{\"980\":1}}],[\"简单值\",{\"0\":{\"980\":1},\"1\":{\"981\":1}}],[\"简单而言\",{\"1\":{\"903\":1}}],[\"简单字符在正则表达式中\",{\"1\":{\"902\":1}}],[\"简单数据类型\",{\"1\":{\"787\":2}}],[\"简单方便\",{\"1\":{\"768\":1}}],[\"简单写法\",{\"0\":{\"453\":1}}],[\"简单理解\",{\"1\":{\"335\":1}}],[\"简单易用\",{\"1\":{\"122\":1,\"767\":1}}],[\"简单对象封装\",{\"1\":{\"28\":1}}],[\"缓存构造器\",{\"1\":{\"1825\":1}}],[\"缓存池\",{\"1\":{\"1825\":1}}],[\"缓存props对象中的key\",{\"1\":{\"1804\":1}}],[\"缓存原生方法\",{\"1\":{\"1785\":1}}],[\"缓存问题\",{\"0\":{\"1579\":1}}],[\"缓存的路径是\",{\"1\":{\"1543\":1}}],[\"缓存的时间是多久呢\",{\"1\":{\"1533\":1}}],[\"缓存立即过期\",{\"1\":{\"1541\":1}}],[\"缓存仍然有效\",{\"1\":{\"1537\":1}}],[\"缓存已经失效\",{\"1\":{\"1537\":2}}],[\"缓存无效\",{\"0\":{\"1537\":1},\"1\":{\"1539\":1}}],[\"缓存有效\",{\"0\":{\"1536\":1}}],[\"缓存中是否有匹配的请求方法和路径\",{\"1\":{\"1535\":1}}],[\"缓存时间是\",{\"1\":{\"1534\":1}}],[\"缓存多个路由组件\",{\"1\":{\"1465\":1}}],[\"缓存单个路由组件\",{\"1\":{\"1465\":1}}],[\"缓存路由组件\",{\"0\":{\"1465\":1}}],[\"缓存机制\",{\"1\":{\"1374\":1}}],[\"缓存其实是更靠近前端的需求\",{\"1\":{\"507\":1}}],[\"缓存\",{\"1\":{\"507\":1,\"1986\":1}}],[\"缓存重用机制\",{\"1\":{\"382\":1}}],[\"缓存控制\",{\"1\":{\"269\":1,\"271\":1}}],[\"缓存结果\",{\"1\":{\"239\":1}}],[\"缓存模块的值\",{\"1\":{\"239\":1}}],[\"缓存检测\",{\"1\":{\"239\":2}}],[\"缓存了每个下载过的包\",{\"1\":{\"85\":1}}],[\"缓存module\",{\"1\":{\"37\":1}}],[\"虽然挂载\",{\"1\":{\"2047\":1}}],[\"虽然页面只需要更新对应的\",{\"1\":{\"2035\":1}}],[\"虽然优于轮询方案\",{\"1\":{\"1647\":1}}],[\"虽然这种做法会让之前的请求变得无意义\",{\"1\":{\"1646\":1}}],[\"虽然首屏加载较慢\",{\"1\":{\"1640\":1}}],[\"虽然可以解决问题\",{\"1\":{\"1614\":1}}],[\"虽然立即过期\",{\"1\":{\"1541\":1}}],[\"虽然没有使用\",{\"1\":{\"1309\":1}}],[\"虽然对变量\",{\"1\":{\"1309\":1}}],[\"虽然时间很短\",{\"1\":{\"1238\":1}}],[\"虽然我们使用事件代理避免了为每一个\",{\"1\":{\"1158\":1}}],[\"虽然我们可以通过\",{\"1\":{\"1130\":1}}],[\"虽然上面的例子中好像问题也不大\",{\"1\":{\"1158\":1}}],[\"虽然上面的题目比较基础\",{\"1\":{\"991\":1}}],[\"虽然作为标准方法\",{\"1\":{\"1124\":1}}],[\"虽然布尔类型的字面值只有\",{\"1\":{\"796\":1}}],[\"虽然简单\",{\"1\":{\"219\":1}}],[\"虽然\",{\"1\":{\"82\":1,\"991\":1,\"1087\":1,\"1318\":1,\"1526\":1}}],[\"功能篇\",{\"0\":{\"1831\":1}}],[\"功能点\",{\"1\":{\"1572\":1}}],[\"功能上也是逐渐的在完善\",{\"1\":{\"1142\":1}}],[\"功能\",{\"1\":{\"82\":1,\"87\":1,\"1404\":1,\"1429\":1,\"1431\":1,\"1432\":1,\"1784\":3}}],[\"操作集合对象\",{\"1\":{\"1998\":1}}],[\"操作2\",{\"1\":{\"1976\":1}}],[\"操作1\",{\"1\":{\"1976\":1}}],[\"操作等一起卸载\",{\"1\":{\"1950\":1}}],[\"操作拦截太过简单\",{\"1\":{\"1904\":1}}],[\"操作时\",{\"1\":{\"1862\":1}}],[\"操作真实\",{\"1\":{\"1789\":1}}],[\"操作类型为\",{\"1\":{\"1932\":1}}],[\"操作类\",{\"1\":{\"1665\":1}}],[\"操作类名的添加\",{\"1\":{\"685\":1}}],[\"操作来增强数据\",{\"1\":{\"1655\":1}}],[\"操作数据与读取数据\",{\"1\":{\"1492\":1}}],[\"操作数据\",{\"1\":{\"1492\":1}}],[\"操作数据的函数\",{\"1\":{\"27\":1,\"29\":1,\"30\":1}}],[\"操作浏览器的前进与后退\",{\"1\":{\"1464\":1}}],[\"操作文件store\",{\"1\":{\"1451\":1}}],[\"操作进行了\",{\"1\":{\"1239\":1}}],[\"操作对性能是极大的损耗\",{\"1\":{\"1239\":1}}],[\"操作对象又回到了\",{\"1\":{\"1232\":1}}],[\"操作对象\",{\"0\":{\"684\":1}}],[\"操作的类\",{\"1\":{\"1666\":1}}],[\"操作的次数是编写\",{\"1\":{\"1239\":1}}],[\"操作的\",{\"1\":{\"1232\":1}}],[\"操作的封装\",{\"1\":{\"1195\":1}}],[\"操作之前\",{\"1\":{\"1232\":2}}],[\"操作属性和类\",{\"0\":{\"1125\":1}}],[\"操作节点其实就有点像操作数据库数据一样\",{\"1\":{\"1115\":1}}],[\"操作方法里面介绍\",{\"1\":{\"854\":1}}],[\"操作方法\",{\"0\":{\"854\":1}}],[\"操作符的代理\",{\"1\":{\"1905\":1}}],[\"操作符的运算结果是通过调用一个叫作\",{\"1\":{\"1905\":1}}],[\"操作符的拦截\",{\"0\":{\"1905\":1,\"1906\":1}}],[\"操作符都做了哪些事\",{\"0\":{\"1073\":1}}],[\"操作符\",{\"0\":{\"1065\":1,\"1907\":1},\"1\":{\"830\":1,\"1265\":1,\"1274\":1}}],[\"操作图片时\",{\"1\":{\"722\":1}}],[\"操作流程\",{\"0\":{\"372\":1}}],[\"操作结果要与\",{\"1\":{\"339\":1}}],[\"操作资源要与\",{\"1\":{\"339\":1}}],[\"操作步骤\",{\"0\":{\"273\":1},\"1\":{\"340\":1}}],[\"操作步骤如下\",{\"1\":{\"91\":1,\"92\":1}}],[\"操作路径\",{\"1\":{\"264\":1}}],[\"操作后的回调\",{\"1\":{\"254\":1,\"255\":1,\"257\":1,\"258\":1,\"259\":1,\"260\":1}}],[\"操作\",{\"1\":{\"224\":1,\"339\":1,\"355\":1,\"415\":1,\"751\":1,\"806\":4,\"1034\":1,\"1232\":2,\"1239\":2,\"1407\":1,\"1423\":1,\"1492\":1,\"1499\":1,\"1655\":1,\"1667\":1,\"1892\":2,\"1906\":2,\"1915\":2,\"1917\":2,\"1944\":1,\"1951\":1,\"1989\":1,\"1993\":2,\"2047\":1}}],[\"操作语法与\",{\"1\":{\"175\":1}}],[\"操作系统的计时函数本身就有少量偏差\",{\"1\":{\"1560\":1}}],[\"操作系统自带的\",{\"1\":{\"1088\":1}}],[\"操作系统或者运行时\",{\"1\":{\"1027\":1}}],[\"操作系统环境变量\",{\"1\":{\"379\":1}}],[\"操作系统\",{\"1\":{\"94\":1}}],[\"操作系统层面也存在包管理工具\",{\"1\":{\"94\":1}}],[\"操作命令\",{\"0\":{\"82\":1}}],[\"操作命令与\",{\"1\":{\"80\":1}}],[\"阿里巴巴研发了知名的\",{\"1\":{\"223\":1}}],[\"阿里云服务器上\",{\"1\":{\"80\":1}}],[\"阿里的字体库\",{\"0\":{\"624\":1}}],[\"阿里的\",{\"1\":{\"2\":1}}],[\"淘宝镜像\",{\"1\":{\"80\":1,\"1426\":1}}],[\"介绍下\",{\"1\":{\"2091\":1}}],[\"介绍如下\",{\"1\":{\"1149\":1}}],[\"介绍一下valueof\",{\"1\":{\"877\":1}}],[\"介绍几个接口测试工具\",{\"1\":{\"341\":1}}],[\"介绍\",{\"0\":{\"80\":1,\"84\":1,\"189\":1,\"231\":1,\"298\":1,\"343\":1},\"1\":{\"2091\":1}}],[\"介绍页\",{\"0\":{\"0\":1}}],[\"版权资料\",{\"1\":{\"694\":1}}],[\"版权符号\",{\"1\":{\"658\":1}}],[\"版开始\",{\"1\":{\"78\":1}}],[\"版本使用面向对象的方式\",{\"1\":{\"2035\":1}}],[\"版本里面设置副作用函数使用的是\",{\"1\":{\"2002\":1}}],[\"版本管制忽略的配置\",{\"1\":{\"1427\":1}}],[\"版本的区别\",{\"0\":{\"2035\":1}}],[\"版本的\",{\"1\":{\"1196\":2}}],[\"版本的仍然还有在使用\",{\"1\":{\"1196\":1}}],[\"版本后\",{\"1\":{\"1196\":1}}],[\"版本仍然还能兼容\",{\"1\":{\"1196\":1}}],[\"版本控制\",{\"1\":{\"1182\":1}}],[\"版本开始\",{\"1\":{\"317\":1}}],[\"版本进行构建\",{\"1\":{\"123\":1}}],[\"版本号>\",{\"1\":{\"75\":1}}],[\"版本号\",{\"1\":{\"64\":1,\"229\":3}}],[\"版本\",{\"1\":{\"14\":2,\"123\":1,\"229\":2,\"1475\":1}}],[\"跟跨站脚本\",{\"1\":{\"2087\":1}}],[\"跟踪记录每个值被引用的次数\",{\"1\":{\"1031\":1}}],[\"跟在\",{\"1\":{\"216\":1}}],[\"跟\",{\"1\":{\"77\":1}}],[\"96\",{\"1\":{\"1098\":4,\"1658\":1,\"1723\":2}}],[\"960px\",{\"1\":{\"649\":1}}],[\"90\",{\"1\":{\"1058\":1,\"1059\":1,\"1060\":1,\"1718\":1}}],[\"900\",{\"1\":{\"621\":1,\"623\":2,\"1462\":1}}],[\"9000\",{\"1\":{\"273\":2,\"274\":1,\"275\":2,\"282\":1,\"283\":1,\"284\":3,\"287\":2}}],[\"9a\",{\"1\":{\"903\":2,\"904\":3}}],[\"912\",{\"1\":{\"793\":1}}],[\"9198e5\",{\"1\":{\"636\":1}}],[\"99\",{\"1\":{\"1475\":1,\"1627\":1,\"1723\":1}}],[\"999\",{\"1\":{\"877\":2,\"1328\":1,\"1488\":1}}],[\"9990px\",{\"1\":{\"582\":1}}],[\"992\",{\"1\":{\"651\":1}}],[\"980\",{\"1\":{\"649\":2}}],[\"980px\",{\"1\":{\"648\":3}}],[\"9527\",{\"1\":{\"1592\":1}}],[\"95\",{\"1\":{\"641\":1,\"1718\":1}}],[\"97354167cm\",{\"1\":{\"1338\":1}}],[\"97\",{\"1\":{\"493\":1}}],[\"9的顺序将桶中的数字取出\",{\"1\":{\"419\":1}}],[\"9包装与代理\",{\"1\":{\"405\":1}}],[\"9days\",{\"1\":{\"378\":1}}],[\"9\",{\"0\":{\"76\":1,\"212\":1,\"263\":1,\"289\":1,\"593\":1,\"635\":1,\"669\":1,\"835\":1,\"849\":1,\"920\":1,\"948\":1,\"1242\":1,\"1381\":1,\"1435\":1,\"1464\":1,\"1500\":1,\"1703\":1},\"1\":{\"191\":1,\"212\":1,\"378\":1,\"402\":1,\"405\":11,\"419\":1,\"487\":1,\"488\":1,\"574\":1,\"707\":2,\"727\":1,\"793\":1,\"796\":1,\"801\":1,\"846\":1,\"854\":12,\"890\":1,\"903\":4,\"904\":2,\"906\":7,\"911\":1,\"914\":1,\"921\":1,\"924\":1,\"925\":2,\"945\":5,\"946\":1,\"947\":1,\"1139\":1,\"1140\":1,\"1148\":5,\"1151\":1,\"1156\":1,\"1286\":1,\"1475\":1,\"1585\":1,\"1659\":1}}],[\"8334\",{\"1\":{\"1711\":1}}],[\"85\",{\"1\":{\"1266\":1}}],[\"86\",{\"1\":{\"1266\":1}}],[\"8px\",{\"1\":{\"1259\":1}}],[\"8+\",{\"1\":{\"1124\":1}}],[\"8+7j\",{\"1\":{\"382\":1,\"395\":1}}],[\"888\",{\"1\":{\"1337\":1}}],[\"88833200\",{\"1\":{\"219\":1}}],[\"88\",{\"1\":{\"641\":1,\"1093\":2,\"2051\":2}}],[\"82\",{\"1\":{\"641\":1,\"1621\":1}}],[\"8c\",{\"1\":{\"493\":1}}],[\"8重载运算符\",{\"1\":{\"405\":1}}],[\"8081\",{\"1\":{\"1445\":1}}],[\"8080\",{\"1\":{\"275\":1,\"1093\":2,\"1444\":1,\"1445\":1,\"2030\":2,\"2051\":2}}],[\"80px\",{\"1\":{\"1087\":1,\"1269\":5,\"1288\":5}}],[\"800\",{\"1\":{\"555\":7,\"667\":1,\"1273\":3}}],[\"800px\",{\"1\":{\"555\":1,\"616\":1}}],[\"8000\",{\"1\":{\"285\":1,\"1573\":2,\"1576\":1,\"1577\":1,\"1579\":1,\"1581\":1,\"1582\":1,\"1584\":1,\"1586\":1,\"1587\":1}}],[\"80端口正在启动中\",{\"1\":{\"294\":2}}],[\"80\",{\"1\":{\"268\":1,\"275\":1,\"294\":2,\"696\":2,\"777\":1,\"836\":1,\"1093\":1,\"1723\":1,\"2051\":1}}],[\"8090\",{\"1\":{\"133\":1,\"134\":1,\"275\":1}}],[\"8\",{\"0\":{\"75\":1,\"208\":1,\"262\":1,\"288\":1,\"592\":1,\"634\":1,\"668\":1,\"801\":1,\"834\":1,\"848\":1,\"919\":1,\"943\":1,\"1241\":1,\"1377\":1,\"1434\":1,\"1463\":1,\"1495\":1,\"1582\":1,\"1702\":1,\"1807\":1,\"1895\":1,\"2015\":1,\"2047\":1},\"1\":{\"155\":2,\"250\":1,\"251\":1,\"271\":2,\"275\":1,\"278\":1,\"279\":1,\"280\":1,\"281\":1,\"285\":1,\"286\":1,\"287\":4,\"329\":1,\"385\":2,\"395\":2,\"402\":1,\"405\":1,\"449\":2,\"476\":1,\"501\":1,\"580\":1,\"657\":1,\"659\":1,\"693\":2,\"764\":1,\"765\":1,\"770\":2,\"773\":2,\"789\":1,\"803\":2,\"841\":2,\"846\":6,\"854\":15,\"856\":2,\"857\":1,\"877\":1,\"881\":3,\"925\":1,\"945\":6,\"946\":1,\"947\":1,\"958\":2,\"1078\":1,\"1087\":4,\"1088\":1,\"1139\":2,\"1140\":2,\"1148\":3,\"1151\":1,\"1153\":1,\"1154\":1,\"1155\":2,\"1156\":3,\"1157\":1,\"1196\":2,\"1209\":1,\"1264\":2,\"1266\":2,\"1286\":1,\"1661\":2,\"1669\":4,\"1711\":1,\"1712\":3,\"1715\":1,\"1731\":1}}],[\"铲子属于开发依赖\",{\"1\":{\"72\":1}}],[\"铲子等\",{\"1\":{\"72\":1}}],[\"其大致逻辑如下\",{\"1\":{\"2032\":1}}],[\"其主要的步骤如下\",{\"1\":{\"2029\":1}}],[\"其主要参数包括\",{\"1\":{\"1662\":1}}],[\"其子节点一定全部处理完毕\",{\"1\":{\"1977\":1}}],[\"其对应的渲染函数为\",{\"1\":{\"1975\":1}}],[\"其产生的结果应被视为无效\",{\"1\":{\"1897\":1}}],[\"其本质就是观测一个响应式数据\",{\"1\":{\"1897\":1}}],[\"其属性值为一个空对象\",{\"1\":{\"1828\":1}}],[\"其调用时会重新渲染组件\",{\"1\":{\"1821\":1}}],[\"其内部调用了closeelement函数处理元素的关闭操作\",{\"1\":{\"1801\":1}}],[\"其内部的内容全部当做纯文本处理\",{\"1\":{\"1792\":1}}],[\"其具体流程可大致分为三个阶段\",{\"1\":{\"1790\":1}}],[\"其表明比重和增速的关系\",{\"1\":{\"1734\":1}}],[\"其代数式为f\",{\"1\":{\"1666\":1}}],[\"其代表当前集合中包含的键值对数量\",{\"1\":{\"869\":1}}],[\"其前向传播不会使用\",{\"1\":{\"1665\":1}}],[\"其它\",{\"0\":{\"1503\":1}}],[\"其\",{\"1\":{\"1502\":1}}],[\"其性能比混合高\",{\"1\":{\"1339\":1}}],[\"其文件名格式常常以\",{\"1\":{\"1250\":1}}],[\"其文件名以\",{\"1\":{\"1249\":1}}],[\"其次要知道数据变化时通知哪部分的视图进行更新\",{\"1\":{\"1783\":1}}],[\"其次\",{\"1\":{\"1155\":1,\"1158\":1}}],[\"其最大的区别就在于\",{\"1\":{\"1112\":1}}],[\"其最大的特点在于不需要function关键字\",{\"1\":{\"941\":1}}],[\"其基本思路就是不通过调用父类构造函数来给子类原型赋值\",{\"1\":{\"1072\":1}}],[\"其核心就是限制某一个方法的频繁触发\",{\"1\":{\"1034\":1}}],[\"其原理是\",{\"1\":{\"1028\":1}}],[\"其值的改变会触发\",{\"1\":{\"2034\":1}}],[\"其值的变化会触发子组件重新渲染\",{\"1\":{\"1955\":1}}],[\"其值也是空对象\",{\"1\":{\"1828\":1}}],[\"其值是内存中的一个引用地址\",{\"1\":{\"982\":1}}],[\"其值即为最大值\",{\"1\":{\"696\":1}}],[\"其值即为最小值\",{\"1\":{\"696\":1}}],[\"其写法和上面为数组设置默认值类似\",{\"1\":{\"934\":1}}],[\"其正则表达式可写作\",{\"1\":{\"906\":1}}],[\"其包含的变量也会一并释放\",{\"1\":{\"1023\":1}}],[\"其包含通过所提供函数实现的测试的所有元素\",{\"1\":{\"857\":1}}],[\"其包含块\",{\"1\":{\"570\":1}}],[\"其语法如下\",{\"1\":{\"828\":1}}],[\"其余均与\",{\"1\":{\"1445\":1}}],[\"其余的方法大抵如此\",{\"1\":{\"1209\":1}}],[\"其余的资源的保护和管理由进程去完成\",{\"1\":{\"407\":1}}],[\"其余参数都是可选的\",{\"1\":{\"875\":1}}],[\"其余转为\",{\"1\":{\"801\":1}}],[\"其上限为\",{\"1\":{\"767\":1}}],[\"其优点主要表现在以下几个方面\",{\"1\":{\"767\":1}}],[\"其数值并不跟像素数量挂钩\",{\"1\":{\"733\":1}}],[\"其数值与\",{\"1\":{\"388\":1}}],[\"其后的内容也会被挤到下一行展现\",{\"1\":{\"661\":1}}],[\"其不会生效\",{\"1\":{\"621\":1}}],[\"其不善者而改之\",{\"1\":{\"246\":1}}],[\"其百分比相对于自身进行计算\",{\"1\":{\"616\":1}}],[\"其父元素内容区的宽度\",{\"1\":{\"553\":1}}],[\"其将会无法撑起父元素的高度\",{\"1\":{\"562\":1}}],[\"其将外部值设置为\",{\"1\":{\"548\":1}}],[\"其将内部值设置为\",{\"1\":{\"548\":1}}],[\"其会建立一个新的\",{\"1\":{\"548\":1}}],[\"其目的是让某\",{\"1\":{\"362\":1}}],[\"其线程的执行结果\",{\"1\":{\"245\":2}}],[\"其实只需要一步\",{\"1\":{\"1964\":1}}],[\"其实访问的是vm\",{\"1\":{\"1804\":2}}],[\"其实还可以通过\",{\"1\":{\"1358\":1}}],[\"其实都一样\",{\"1\":{\"1889\":1}}],[\"其实都算是一个包含键值对的列表\",{\"1\":{\"1290\":1}}],[\"其实都是高阶函数\",{\"1\":{\"1033\":1}}],[\"其实是同一种东西\",{\"1\":{\"1247\":1}}],[\"其实是可以分为直接赋值和引用赋值的\",{\"1\":{\"985\":1}}],[\"其实也是尽量缩小查找的范围\",{\"1\":{\"1243\":1}}],[\"其实也很好理解\",{\"1\":{\"828\":1}}],[\"其实两者之间还是有一些略微不同的地方\",{\"1\":{\"1086\":1}}],[\"其实就是\",{\"1\":{\"2058\":1}}],[\"其实就是在判断应用是否是第一次启动\",{\"1\":{\"2047\":1}}],[\"其实就是对\",{\"1\":{\"1974\":1}}],[\"其实就是因为typescript而存在的\",{\"1\":{\"1519\":1}}],[\"其实就是清除前面的设定\",{\"1\":{\"1088\":1}}],[\"其实就是某个对象饿隐式原型是否指向某个对象\",{\"1\":{\"1066\":1}}],[\"其实就和\",{\"1\":{\"918\":1}}],[\"其实使用我们自己的构造函数是一样的道理\",{\"1\":{\"1063\":1}}],[\"其实在\",{\"1\":{\"1053\":1}}],[\"其实在此处并没有渲染出来\",{\"1\":{\"711\":1}}],[\"其实链式调用的原理也非常简单\",{\"1\":{\"947\":1}}],[\"其实并不是\",{\"1\":{\"905\":1}}],[\"其实我们使用length属性就是可以随意的对数组的长度进行操控\",{\"1\":{\"851\":1}}],[\"其实方法也可以看作是对象的一个属性\",{\"1\":{\"828\":1}}],[\"其实这个函数就是用于判断一个变量是否为数值的\",{\"1\":{\"794\":1}}],[\"其实\",{\"1\":{\"691\":1,\"946\":1,\"1023\":1,\"1442\":1,\"1537\":1}}],[\"其实类似于就是我们之前使用的nodemon的功能\",{\"1\":{\"133\":1}}],[\"其实具名导出\",{\"1\":{\"49\":1}}],[\"其中就包含了非常重要的一个方法\",{\"1\":{\"2040\":1}}],[\"其中就包括第一个副作用函数\",{\"1\":{\"1925\":1}}],[\"其中就包括computed\",{\"1\":{\"1850\":1}}],[\"其中关于\",{\"1\":{\"2040\":1}}],[\"其中关键函数包含已下三种\",{\"1\":{\"1972\":1}}],[\"其中都使用了同一个函数history\",{\"1\":{\"2029\":1}}],[\"其中先render再patch\",{\"1\":{\"2002\":1}}],[\"其中每一个元素都是一个函数\",{\"1\":{\"1977\":1}}],[\"其中每个张量表示数据集中的一个特征\",{\"1\":{\"1655\":1}}],[\"其中高亮部分为包裹对象定义了一个不可枚举且不可写的属性\",{\"1\":{\"1936\":1}}],[\"其中调用了数组内部的迭代器\",{\"1\":{\"1921\":1}}],[\"其中拦截存取的操作\",{\"1\":{\"1886\":1}}],[\"其中虚拟\",{\"1\":{\"1873\":1}}],[\"其中把自定义事件data\",{\"1\":{\"1802\":1}}],[\"其中规范化了props\",{\"1\":{\"1799\":1}}],[\"其中ast的结构如下\",{\"1\":{\"1791\":1}}],[\"其中存储的为\",{\"1\":{\"1784\":1}}],[\"其中结果经常为总述的另一种表达\",{\"1\":{\"1689\":1}}],[\"其中并不一定会存在直接进行总述的句子\",{\"1\":{\"1686\":1}}],[\"其中特征图高和宽分别为\",{\"1\":{\"1667\":1}}],[\"其中input是输入张量\",{\"1\":{\"1666\":1}}],[\"其中传入了一些参数\",{\"1\":{\"1656\":1}}],[\"其中rendereroptions是一些\",{\"1\":{\"1998\":1}}],[\"其中render函数使用了如下方式进行包裹以便在模板中可以直接访问组件实例的属性和方法\",{\"1\":{\"1835\":1}}],[\"其中render函数使用了如下方式进行包裹\",{\"1\":{\"1354\":1}}],[\"其中registerref用来登记\",{\"1\":{\"1428\":1}}],[\"其中进行了如下操作\",{\"1\":{\"1423\":1}}],[\"其中options和new\",{\"1\":{\"1415\":1}}],[\"其中会使用同一个函数进行合并配置项\",{\"1\":{\"1431\":1}}],[\"其中会将vnode\",{\"1\":{\"1407\":1}}],[\"其中会执行如下函数\",{\"1\":{\"1407\":1}}],[\"其中syncgen为事件回调\",{\"1\":{\"1358\":1}}],[\"其中按照prop修饰符将attrs分为\",{\"1\":{\"1353\":1}}],[\"其中有很多实用的函数\",{\"1\":{\"1301\":1}}],[\"其中有两个参数\",{\"1\":{\"1217\":1}}],[\"其中包含返回\",{\"1\":{\"2001\":1}}],[\"其中包含了两个卷积层\",{\"1\":{\"1661\":1}}],[\"其中包含了可以传递给组件的所有\",{\"1\":{\"1493\":1}}],[\"其中包含每个键\",{\"1\":{\"1276\":1}}],[\"其中包含的签名信息是\",{\"1\":{\"350\":1}}],[\"其中大多数直接来自\",{\"1\":{\"1263\":1}}],[\"其中所有的绑定事件\",{\"1\":{\"1211\":1}}],[\"其中最常用的是\",{\"1\":{\"1206\":1}}],[\"其中最主要的进程有\",{\"1\":{\"1168\":1}}],[\"其中可能包含多个\",{\"1\":{\"1204\":1}}],[\"其中的spawn函数就是自动执行器\",{\"1\":{\"1772\":1}}],[\"其中的属性只能是以数字为值的样式\",{\"1\":{\"1224\":1}}],[\"其中的\",{\"1\":{\"1198\":1,\"1199\":1}}],[\"其中的参数\",{\"1\":{\"386\":1}}],[\"其中间隔时间也是指代的毫秒数\",{\"1\":{\"1088\":1}}],[\"其中之一就是为函数创建一个\",{\"1\":{\"932\":1}}],[\"其中之一是下载的源文件必须与当前页面的域名相同\",{\"1\":{\"496\":1}}],[\"其中keys\",{\"1\":{\"846\":1}}],[\"其中var现在已经不推荐使用了\",{\"1\":{\"779\":1,\"781\":1}}],[\"其中引用传入的重写函数fn\",{\"1\":{\"487\":1}}],[\"其中拆分出的\",{\"1\":{\"232\":1}}],[\"其中config保存数据库连接时的相关配置\",{\"1\":{\"212\":1}}],[\"其中\",{\"1\":{\"124\":2,\"138\":2,\"150\":1,\"217\":1,\"388\":1,\"616\":1,\"623\":1,\"722\":1,\"754\":1,\"875\":1,\"877\":1,\"911\":1,\"912\":1,\"948\":1,\"1148\":1,\"1204\":2,\"1207\":1,\"1209\":1,\"1212\":1,\"1216\":1,\"1225\":1,\"1276\":1,\"1352\":1,\"1368\":1,\"1386\":2,\"1392\":1,\"1442\":1,\"1555\":1,\"1662\":1,\"1663\":2,\"1667\":1,\"1735\":1,\"1747\":1,\"1818\":1,\"1877\":1,\"1879\":1,\"2000\":1,\"2064\":1}}],[\"其中锅\",{\"1\":{\"72\":1}}],[\"其他情况下什么都不需要做\",{\"1\":{\"1951\":1}}],[\"其他情况一般都会解析为本地时间\",{\"1\":{\"875\":1}}],[\"其他对象\",{\"1\":{\"1901\":1}}],[\"其他组件选项\",{\"1\":{\"1800\":1}}],[\"其他组件也可使用\",{\"1\":{\"1397\":1}}],[\"其他辅助函数\",{\"1\":{\"1797\":1}}],[\"其他比值\",{\"1\":{\"1753\":1}}],[\"其他可假设分配\",{\"1\":{\"1729\":1}}],[\"其他关注\",{\"0\":{\"1693\":1}}],[\"其他mime类型\",{\"1\":{\"1636\":1}}],[\"其他改变\",{\"0\":{\"1519\":1},\"1\":{\"1480\":1}}],[\"其他动画都会排队等待\",{\"1\":{\"1224\":1}}],[\"其他常用属性和方法\",{\"0\":{\"1202\":1}}],[\"其他所有线程\",{\"1\":{\"1180\":1,\"1556\":1}}],[\"其他浏览器返回\",{\"1\":{\"1098\":2,\"1139\":1,\"1140\":1}}],[\"其他浏览器\",{\"1\":{\"1091\":1}}],[\"其他浏览器或许不会如此\",{\"1\":{\"752\":1}}],[\"其他项是与模式中的捕获组匹配的字符串\",{\"1\":{\"925\":1}}],[\"其他项是与模式中的\",{\"1\":{\"911\":1}}],[\"其他有元字符功能的字符都只表示其本身\",{\"1\":{\"903\":1}}],[\"其他方法没有进行包裹实现\",{\"1\":{\"1396\":1}}],[\"其他方法\",{\"0\":{\"884\":1,\"1924\":1}}],[\"其他的都是可选属性\",{\"1\":{\"2064\":1}}],[\"其他的节点\",{\"1\":{\"1959\":1}}],[\"其他的根据具体的要求填写\",{\"1\":{\"1626\":1}}],[\"其他的所有代码只能出现在\",{\"1\":{\"1301\":1}}],[\"其他的事件处理方法\",{\"0\":{\"1218\":1}}],[\"其他的浏览器都不支持\",{\"1\":{\"1128\":1}}],[\"其他的方法都是实时更新的\",{\"1\":{\"1112\":1}}],[\"其他的元素索引会依次调整\",{\"1\":{\"853\":1}}],[\"其他的字符以普通格式输出\",{\"1\":{\"384\":1}}],[\"其他数据类型也是可以的\",{\"1\":{\"810\":1}}],[\"其他类型也可以\",{\"1\":{\"806\":1}}],[\"其他控件\",{\"1\":{\"757\":1}}],[\"其他新增标签\",{\"0\":{\"695\":1}}],[\"其他属性\",{\"1\":{\"2058\":3}}],[\"其他属性设置时则参照字体大小进行设置\",{\"1\":{\"650\":1}}],[\"其他属性置为\",{\"1\":{\"556\":1}}],[\"其他响应\",{\"1\":{\"307\":1}}],[\"其他使用\",{\"1\":{\"222\":1}}],[\"其他配置\",{\"1\":{\"133\":1,\"143\":1}}],[\"其他插件\",{\"1\":{\"129\":1}}],[\"其他\",{\"0\":{\"741\":1,\"1517\":1},\"1\":{\"119\":1,\"971\":1}}],[\"煤气罐\",{\"1\":{\"1621\":1}}],[\"煤气\",{\"1\":{\"72\":2}}],[\"锅\",{\"1\":{\"72\":1}}],[\"葱\",{\"1\":{\"72\":2}}],[\"油\",{\"1\":{\"72\":2}}],[\"类比推理\",{\"0\":{\"1758\":1}}],[\"类比重\",{\"1\":{\"1750\":1}}],[\"类增长率\",{\"1\":{\"1750\":1}}],[\"类来使用\",{\"1\":{\"1655\":1}}],[\"类本身没有添加自定义属性标识\",{\"1\":{\"1433\":1}}],[\"类添加方法\",{\"1\":{\"1201\":1}}],[\"类数组\",{\"1\":{\"1125\":1}}],[\"类数组对象\",{\"1\":{\"1112\":1}}],[\"类数组转数组\",{\"0\":{\"444\":1}}],[\"类和伪类\",{\"1\":{\"524\":1}}],[\"类和类的实例都可以访问类变量\",{\"1\":{\"405\":1}}],[\"类选择器再高也不会超过\",{\"1\":{\"524\":1}}],[\"类选择器\",{\"1\":{\"516\":1}}],[\"类名不确定\",{\"1\":{\"1385\":1}}],[\"类名为异常类型\",{\"1\":{\"405\":1}}],[\"类名\",{\"1\":{\"405\":1,\"1949\":1,\"2032\":1}}],[\"类方法之前\",{\"1\":{\"877\":1}}],[\"类方法如下\",{\"1\":{\"877\":2}}],[\"类方法从\",{\"1\":{\"877\":1}}],[\"类方法名\",{\"1\":{\"405\":2}}],[\"类方法的第一个参数必须是\",{\"1\":{\"405\":1}}],[\"类方法\",{\"1\":{\"405\":1,\"877\":2}}],[\"类内的成员互访\",{\"1\":{\"405\":1}}],[\"类带有初始值的实例化\",{\"1\":{\"405\":1}}],[\"类的静态方法from\",{\"1\":{\"864\":1,\"871\":1}}],[\"类的\",{\"1\":{\"681\":1}}],[\"类的实现\",{\"0\":{\"498\":1}}],[\"类的被覆写的方法\",{\"1\":{\"405\":1}}],[\"类的文档字符串\",{\"1\":{\"405\":1}}],[\"类的两个内置属性\",{\"1\":{\"405\":1}}],[\"类使用时先实例化对象\",{\"1\":{\"405\":1}}],[\"类变量属于静态数据\",{\"1\":{\"405\":1}}],[\"类变量\",{\"1\":{\"405\":1}}],[\"类似中心理解\",{\"1\":{\"1698\":1,\"1700\":1}}],[\"类似的事件是\",{\"1\":{\"1215\":1}}],[\"类似的写法还可以用于其他数组方法\",{\"1\":{\"995\":1}}],[\"类似这样的特殊有\",{\"1\":{\"1205\":1}}],[\"类似数组的对象和可遍历\",{\"1\":{\"841\":1}}],[\"类似地\",{\"1\":{\"681\":1}}],[\"类似\",{\"1\":{\"175\":1,\"262\":1,\"1199\":1,\"1250\":1,\"1493\":1,\"1892\":1}}],[\"类似于断言\",{\"1\":{\"2047\":1}}],[\"类似于事件监听器\",{\"1\":{\"1897\":1}}],[\"类似于watcher\",{\"1\":{\"1890\":1}}],[\"类似于副作用函数的注册函数\",{\"1\":{\"1784\":1}}],[\"类似于组件更新\",{\"1\":{\"1498\":1}}],[\"类似于之前vue2中的vm\",{\"1\":{\"1484\":1}}],[\"类似于三元运算符\",{\"1\":{\"1274\":1}}],[\"类似于字符串对象的trim\",{\"1\":{\"917\":1}}],[\"类似于其他编程语言中的词典或者哈希表\",{\"1\":{\"866\":1}}],[\"类似于相对定位relative和固定定位fixed的结合\",{\"1\":{\"572\":1}}],[\"类似于函数的装饰类\",{\"1\":{\"405\":1}}],[\"类似于面向对象中的父类与子类的关系\",{\"1\":{\"402\":1}}],[\"类似于飞机上承载的物品\",{\"1\":{\"364\":1}}],[\"类似于\",{\"1\":{\"49\":1,\"52\":1,\"176\":1,\"1501\":1}}],[\"类\",{\"0\":{\"168\":1,\"405\":1},\"1\":{\"405\":1,\"408\":4,\"877\":7,\"1025\":1}}],[\"类型信息如下\",{\"1\":{\"2061\":1}}],[\"类型来代替\",{\"1\":{\"1929\":1}}],[\"类型来运作\",{\"1\":{\"693\":1}}],[\"类型支持\",{\"1\":{\"1875\":1}}],[\"类型检查\",{\"1\":{\"1804\":2}}],[\"类型验证\",{\"1\":{\"1804\":1}}],[\"类型数据的键的变\",{\"1\":{\"1932\":1}}],[\"类型数据\",{\"1\":{\"1492\":2}}],[\"类型和值必须都相同\",{\"1\":{\"976\":1}}],[\"类型转换\",{\"2\":{\"1004\":1}}],[\"类型转换规则\",{\"0\":{\"969\":1}}],[\"类型转换可以分为两种\",{\"1\":{\"801\":1}}],[\"类型的守卫回调转为\",{\"1\":{\"2083\":1}}],[\"类型的守卫回调\",{\"1\":{\"2079\":1,\"2080\":1,\"2082\":1}}],[\"类型的导航守卫\",{\"1\":{\"2078\":1}}],[\"类型的数组\",{\"1\":{\"2061\":1}}],[\"类型的数据\",{\"1\":{\"1930\":1,\"1932\":1}}],[\"类型的数据时\",{\"1\":{\"1930\":1}}],[\"类型的响应式数据在模板中可以直接使用而不用xx\",{\"1\":{\"2001\":1}}],[\"类型的节点即可\",{\"1\":{\"1978\":1}}],[\"类型的操作\",{\"1\":{\"1929\":2}}],[\"类型的原型属性和方法\",{\"1\":{\"1926\":2}}],[\"类型的值\",{\"1\":{\"1273\":2,\"2065\":1}}],[\"类型的对象\",{\"1\":{\"1231\":1}}],[\"类型的检查\",{\"1\":{\"931\":1}}],[\"类型的键名\",{\"1\":{\"830\":1}}],[\"类型的转换\",{\"0\":{\"801\":1}}],[\"类型的\",{\"1\":{\"758\":1,\"795\":1,\"1951\":1,\"1974\":2,\"2061\":1}}],[\"类型的一维数组\",{\"1\":{\"737\":1}}],[\"类型是一个数值类型的合集\",{\"1\":{\"382\":1}}],[\"类型结构\",{\"1\":{\"294\":1}}],[\"类型文件\",{\"1\":{\"156\":1}}],[\"类型为数组\",{\"1\":{\"156\":2}}],[\"类型为\",{\"1\":{\"155\":1}}],[\"类型\",{\"0\":{\"294\":1,\"965\":1,\"966\":1},\"1\":{\"72\":1,\"177\":1,\"192\":1,\"294\":4,\"402\":1,\"672\":1,\"693\":2,\"757\":2,\"801\":1,\"810\":1,\"965\":1,\"966\":1,\"980\":1,\"1047\":1,\"1161\":2,\"1265\":2,\"1290\":1,\"1429\":1,\"1665\":2,\"1889\":2}}],[\"工程脚本\",{\"1\":{\"2040\":1}}],[\"工程\",{\"0\":{\"1481\":1}}],[\"工程问题与业务无关\",{\"1\":{\"116\":1}}],[\"工厂函数模式\",{\"0\":{\"1047\":1}}],[\"工厂函数则另外构建函数在函数体内指定参数\",{\"1\":{\"402\":1}}],[\"工作空间根目录\",{\"1\":{\"2040\":1}}],[\"工作方式\",{\"1\":{\"1444\":1}}],[\"工作内容\",{\"1\":{\"1411\":1}}],[\"工作\",{\"1\":{\"1350\":1}}],[\"工作流程\",{\"1\":{\"1031\":2}}],[\"工作的核心\",{\"1\":{\"149\":1}}],[\"工作起来\",{\"1\":{\"148\":1}}],[\"工作原理\",{\"0\":{\"37\":1,\"1903\":1},\"1\":{\"1031\":2}}],[\"工具链指南\",{\"1\":{\"1425\":1}}],[\"工具不要尝试自己编译这些文件\",{\"1\":{\"1308\":1}}],[\"工具得知\",{\"1\":{\"1023\":1}}],[\"工具问题\",{\"1\":{\"116\":1}}],[\"工具\",{\"1\":{\"81\":1,\"122\":1}}],[\"工具配置\",{\"0\":{\"69\":1}}],[\"方差为\",{\"1\":{\"1665\":1}}],[\"方案\",{\"1\":{\"1614\":1}}],[\"方法主要是确定是否应该处理一个点击事件\",{\"1\":{\"2065\":1}}],[\"方法在\",{\"1\":{\"2065\":1}}],[\"方法在前面介绍数组遍历的时候\",{\"1\":{\"945\":1}}],[\"方法本身也会做一定的信息解析工作\",{\"1\":{\"2065\":1}}],[\"方法重新前进到新路由\",{\"1\":{\"2058\":1}}],[\"方法要调用两次\",{\"1\":{\"2058\":1}}],[\"方法搞清楚后\",{\"1\":{\"2058\":1}}],[\"方法搞清楚了\",{\"1\":{\"2054\":1}}],[\"方法具体做了什么\",{\"1\":{\"2055\":1}}],[\"方法对数据进行编码\",{\"1\":{\"2095\":1}}],[\"方法对应的就是用户点击\",{\"1\":{\"2065\":1}}],[\"方法对应的源码如下\",{\"1\":{\"2054\":1}}],[\"方法对应如下\",{\"1\":{\"2043\":1}}],[\"方法对\",{\"1\":{\"2054\":1,\"2076\":1}}],[\"方法究竟在做什么\",{\"1\":{\"2054\":1}}],[\"方法究竟在干什么\",{\"1\":{\"2042\":1}}],[\"方法处理之后就会变为\",{\"1\":{\"2045\":1}}],[\"方法所做的事情\",{\"1\":{\"2058\":1}}],[\"方法所对应的源码位于\",{\"1\":{\"2052\":1}}],[\"方法所得到的\",{\"1\":{\"2043\":1}}],[\"方法所在的对象\",{\"1\":{\"995\":1}}],[\"方法位于\",{\"1\":{\"2042\":1,\"2043\":1,\"2072\":1}}],[\"方法之前\",{\"1\":{\"2041\":1}}],[\"方法之外\",{\"1\":{\"1924\":1,\"1925\":1}}],[\"方法做路由跳转\",{\"1\":{\"2032\":1}}],[\"方法定义了全局的\",{\"1\":{\"2026\":1}}],[\"方法定义到该对象下\",{\"1\":{\"1928\":1}}],[\"方法类似\",{\"1\":{\"1932\":1}}],[\"方法触发响应\",{\"1\":{\"1929\":1}}],[\"方法设置数据时\",{\"1\":{\"1929\":1}}],[\"方法读\",{\"1\":{\"1929\":1}}],[\"方法相关的源码\",{\"1\":{\"2058\":1}}],[\"方法相反\",{\"1\":{\"1928\":1}}],[\"方法相似\",{\"1\":{\"877\":1}}],[\"方法只关心\",{\"1\":{\"1932\":1}}],[\"方法只有在要删除的元素确实在集合中存在时\",{\"1\":{\"1928\":1}}],[\"方法只是把当前的内容缓存到了内存\",{\"1\":{\"404\":1}}],[\"方法添加的元素已经存在于\",{\"1\":{\"1928\":1}}],[\"方法添加具体的值\",{\"1\":{\"1928\":1}}],[\"方法添加到页面上\",{\"1\":{\"1239\":1}}],[\"方法并没有执行\",{\"1\":{\"1927\":1}}],[\"方法并分别传入键名和对应值作为两个参数\",{\"1\":{\"868\":1}}],[\"方法内部也会通过\",{\"1\":{\"1923\":1}}],[\"方法内部的第一句代码就是创建\",{\"1\":{\"2042\":1}}],[\"方法内部的\",{\"1\":{\"1922\":1}}],[\"方法被同一个插件多次调用\",{\"1\":{\"1824\":1}}],[\"方法传递样本索引并返回样本及其标签\",{\"1\":{\"1655\":1}}],[\"方法传入一个布尔值即可实现浅克隆和深克隆\",{\"1\":{\"1123\":1}}],[\"方法等等\",{\"1\":{\"1486\":1}}],[\"方法都不是直接修改原\",{\"1\":{\"1281\":1}}],[\"方法调用完毕后\",{\"1\":{\"2084\":1}}],[\"方法调用之后\",{\"1\":{\"2052\":1}}],[\"方法调用时\",{\"1\":{\"1824\":1}}],[\"方法调用\",{\"1\":{\"1238\":1}}],[\"方法调用构造函数时\",{\"1\":{\"990\":1,\"996\":1}}],[\"方法后继续调用\",{\"1\":{\"1232\":1}}],[\"方法集合了事件处理的所有功能\",{\"1\":{\"1216\":1}}],[\"方法有\",{\"1\":{\"1209\":1}}],[\"方法有一些\",{\"1\":{\"995\":1}}],[\"方法涉及到链式操作的相关知识\",{\"1\":{\"1204\":1}}],[\"方法和\",{\"1\":{\"1204\":1,\"2058\":1}}],[\"方法和getutcday\",{\"1\":{\"877\":1}}],[\"方法大致有\",{\"1\":{\"1201\":1}}],[\"方法先执行\",{\"1\":{\"1200\":1}}],[\"方法不能循环\",{\"1\":{\"1199\":1}}],[\"方法不会影响原始数组\",{\"1\":{\"854\":1}}],[\"方法供我们使用\",{\"1\":{\"1194\":1}}],[\"方法直到结束\",{\"1\":{\"1187\":1}}],[\"方法进行路由导航\",{\"1\":{\"2065\":1}}],[\"方法进行对象拷贝时\",{\"1\":{\"1201\":1}}],[\"方法进行值的添加\",{\"1\":{\"861\":1}}],[\"方法进入函数内\",{\"1\":{\"1187\":1}}],[\"方法配合\",{\"1\":{\"1161\":1}}],[\"方法始终返回\",{\"1\":{\"1161\":1}}],[\"方法参数传入\",{\"1\":{\"1123\":1}}],[\"方法获取\",{\"1\":{\"1931\":1}}],[\"方法获取网络层的参数字典\",{\"1\":{\"1671\":1}}],[\"方法获取网络层参数及名称\",{\"1\":{\"1669\":1}}],[\"方法获取到的节点集合\",{\"1\":{\"1112\":1}}],[\"方法获得被拖的数据\",{\"1\":{\"765\":1}}],[\"方法通过加载\",{\"1\":{\"1094\":1}}],[\"方法加载\",{\"1\":{\"1094\":1}}],[\"方法可用一个新文档取代当前文档\",{\"1\":{\"1094\":1}}],[\"方法可以回到最近一次性\",{\"1\":{\"1232\":1}}],[\"方法可以获取其中的某一个节点对象\",{\"1\":{\"1204\":1}}],[\"方法可以用于阻止调用回调\",{\"1\":{\"1102\":1}}],[\"方法可以用来导航到指定的页面\",{\"1\":{\"1097\":1}}],[\"方法可以分别用来向前或者回退一个页面\",{\"1\":{\"1097\":1}}],[\"方法可以加载新的文档\",{\"1\":{\"1094\":1}}],[\"方法可以解决这个问题\",{\"1\":{\"995\":1}}],[\"方法可以改变\",{\"1\":{\"995\":1}}],[\"方法可以指定\",{\"1\":{\"995\":1}}],[\"方法可以给一个集合添加值\",{\"1\":{\"861\":1}}],[\"方法可以接收一个比较函数作为参数\",{\"1\":{\"855\":1}}],[\"方法可以接收一个或者两个参数\",{\"1\":{\"854\":1}}],[\"方法则是相对于原来的浏览器窗口来进行调节\",{\"1\":{\"1088\":1}}],[\"方法实现的版本\",{\"1\":{\"1040\":1}}],[\"方法实质上是调用\",{\"1\":{\"995\":1}}],[\"方法改写\",{\"1\":{\"995\":1}}],[\"方法表达这个过程\",{\"1\":{\"995\":1}}],[\"方法从\",{\"1\":{\"995\":1}}],[\"方法为例\",{\"1\":{\"995\":1}}],[\"方法使用\",{\"1\":{\"995\":1}}],[\"方法绑定在\",{\"1\":{\"995\":1}}],[\"方法绑定到\",{\"1\":{\"995\":1}}],[\"方法绑定\",{\"1\":{\"995\":1}}],[\"方法生成的一个匿名函数\",{\"1\":{\"995\":1}}],[\"方法每运行一次\",{\"1\":{\"995\":1}}],[\"方法除了绑定\",{\"1\":{\"995\":1}}],[\"方法会返回的一个方法\",{\"1\":{\"2043\":1}}],[\"方法会等待所有图片加载完成以后才执行\",{\"1\":{\"1200\":1}}],[\"方法会终止\",{\"1\":{\"1088\":1}}],[\"方法会调用回调函数\",{\"1\":{\"995\":1}}],[\"方法会跳过空元素\",{\"1\":{\"995\":1}}],[\"方法会将中的空项进行移除\",{\"1\":{\"449\":1}}],[\"方法没有参数\",{\"1\":{\"995\":1}}],[\"方法将所有的参数转为大写\",{\"1\":{\"2045\":1}}],[\"方法将一个\",{\"1\":{\"1198\":1}}],[\"方法将\",{\"1\":{\"995\":2,\"1962\":1}}],[\"方法将其转为字符串时\",{\"1\":{\"896\":1}}],[\"方法将其转换回\",{\"1\":{\"770\":1}}],[\"方法将其转换为字符串\",{\"1\":{\"770\":1}}],[\"方法修改\",{\"0\":{\"995\":1}}],[\"方法显式调用函数时\",{\"1\":{\"990\":1,\"996\":1}}],[\"方法找出匹配的所有位置和所有值\",{\"1\":{\"925\":1}}],[\"方法而言\",{\"1\":{\"925\":1}}],[\"方法专门为捕获组而设计\",{\"1\":{\"925\":1}}],[\"方法用来测试在字符串中是否能够找到符合正则要求的字符\",{\"1\":{\"925\":1}}],[\"方法用于从剪贴板中删除数据\",{\"1\":{\"1161\":1}}],[\"方法用于从剪贴板中取得数据\",{\"1\":{\"1161\":1}}],[\"方法用于重新加载当前文档\",{\"1\":{\"1094\":1}}],[\"方法用于将浏览器窗口调整到指定的值\",{\"1\":{\"1088\":1}}],[\"方法用于将一组值\",{\"1\":{\"841\":1}}],[\"方法用于查看是否包含某个字符\",{\"1\":{\"889\":1}}],[\"方法或test\",{\"1\":{\"924\":1}}],[\"方法或者直接使用delete运算符\",{\"1\":{\"769\":1}}],[\"方法以数组形式返回匹配项\",{\"1\":{\"923\":1}}],[\"方法以后\",{\"1\":{\"1088\":1}}],[\"方法以后返回的又是一个\",{\"1\":{\"861\":1}}],[\"方法以后排序并没有正确的按照升序来进行排序\",{\"1\":{\"855\":1}}],[\"方法就处理了导航守卫的相关逻辑\",{\"1\":{\"2072\":1}}],[\"方法就是开发者在使用导航守卫时\",{\"1\":{\"2075\":1}}],[\"方法就是根据传入的参数\",{\"1\":{\"2058\":1}}],[\"方法就是将\",{\"1\":{\"1198\":1}}],[\"方法就是用于进行数据替换的\",{\"1\":{\"911\":1}}],[\"方法就可以直接使用\",{\"1\":{\"995\":1}}],[\"方法就可以实现从右往左的队列\",{\"1\":{\"853\":1}}],[\"方法就和前面的foreach\",{\"1\":{\"946\":1}}],[\"方法是如何使用的\",{\"1\":{\"2052\":1}}],[\"方法是类似的\",{\"1\":{\"2050\":1}}],[\"方法是早前版本的事件委托方法\",{\"1\":{\"1242\":1}}],[\"方法是到达指定透明度的效果\",{\"1\":{\"1223\":1}}],[\"方法是在显示和隐藏之间进行切换\",{\"1\":{\"1221\":1,\"1222\":1,\"1223\":1}}],[\"方法是在原来的位置上进行相对的偏移\",{\"1\":{\"1088\":1}}],[\"方法是将一个显示出来的元素\",{\"1\":{\"1221\":1,\"1222\":1,\"1223\":1}}],[\"方法是将一个隐藏的元素\",{\"1\":{\"1221\":1,\"1222\":1,\"1223\":1}}],[\"方法是\",{\"1\":{\"1156\":1}}],[\"方法是指定移动到哪个位置\",{\"1\":{\"1088\":1}}],[\"方法是对数组的每一项运行回调函数\",{\"1\":{\"945\":1}}],[\"方法是专门为捕获组而设计的\",{\"1\":{\"911\":1}}],[\"方法是先创建当前数组的一个副本\",{\"1\":{\"854\":1}}],[\"方法时所推入的状态\",{\"1\":{\"2061\":1}}],[\"方法时传入的一整个配置对象\",{\"1\":{\"2042\":1}}],[\"方法时传入数组\",{\"1\":{\"861\":1}}],[\"方法时传入数组是效果是不一样\",{\"1\":{\"861\":1}}],[\"方法时\",{\"1\":{\"911\":1,\"924\":1,\"925\":3}}],[\"方法接收三个参数\",{\"1\":{\"2058\":1}}],[\"方法接收一个参数\",{\"1\":{\"889\":1,\"2058\":1}}],[\"方法接受\",{\"1\":{\"725\":1}}],[\"方法接受两个参数\",{\"1\":{\"720\":2}}],[\"方法分别用于检测开始字符和结束字符\",{\"1\":{\"889\":1}}],[\"方法执行时调用trigger\",{\"1\":{\"1928\":1}}],[\"方法执行后返回的就不是\",{\"1\":{\"1232\":1}}],[\"方法执行的操作中提取出更具体的信息\",{\"1\":{\"924\":1}}],[\"方法执行四舍五入\",{\"1\":{\"882\":1}}],[\"方法执行向下舍入\",{\"1\":{\"882\":1}}],[\"方法执行向上舍入\",{\"1\":{\"882\":1}}],[\"方法基本与\",{\"1\":{\"877\":1}}],[\"方法返回数据集中的样本数量\",{\"1\":{\"1655\":1}}],[\"方法返回返回正则表达式对象本身\",{\"1\":{\"925\":1}}],[\"方法返回正则表达式的字面量\",{\"1\":{\"925\":2}}],[\"方法返回\",{\"1\":{\"877\":1,\"883\":1}}],[\"方法返回本地时区的日期字符串\",{\"1\":{\"877\":1}}],[\"方法返回一个\",{\"1\":{\"731\":1}}],[\"方法同时代表getday\",{\"1\":{\"877\":1}}],[\"方法同时遍历映射的键与值\",{\"1\":{\"870\":1}}],[\"方法同时遍历集合的键与值\",{\"1\":{\"863\":1}}],[\"方法遍历映射的值\",{\"1\":{\"870\":1}}],[\"方法遍历映射的键\",{\"1\":{\"870\":1}}],[\"方法遍历集合的值\",{\"1\":{\"863\":1}}],[\"方法遍历集合的键\",{\"1\":{\"863\":1}}],[\"方法遍历出数组的值\",{\"1\":{\"846\":1}}],[\"方法遍历出数组的键和值\",{\"1\":{\"846\":1}}],[\"方法遍历出数组的键\",{\"1\":{\"846\":1}}],[\"方法删除值为\",{\"1\":{\"1927\":1}}],[\"方法删除数据的时候会报错\",{\"1\":{\"1927\":1}}],[\"方法删除\",{\"1\":{\"862\":1}}],[\"方法里面完成的\",{\"1\":{\"2042\":1}}],[\"方法里面会返回一个对象\",{\"1\":{\"947\":1}}],[\"方法里面\",{\"1\":{\"861\":1,\"2084\":1}}],[\"方法很简单\",{\"1\":{\"860\":1,\"996\":1}}],[\"方法测试数组中是否\",{\"1\":{\"857\":1}}],[\"方法测试一个数组内的所有元素是否\",{\"1\":{\"857\":1}}],[\"方法比较的也是字符串\",{\"1\":{\"855\":1}}],[\"方法排序时首先会调用每个元素的tostring\",{\"1\":{\"855\":1}}],[\"方法情况\",{\"1\":{\"846\":1}}],[\"方法创建给定数组一部分的浅拷贝\",{\"1\":{\"857\":1}}],[\"方法创建的代理\",{\"1\":{\"1509\":1}}],[\"方法创建的\",{\"1\":{\"828\":2}}],[\"方法创建\",{\"1\":{\"828\":1}}],[\"方法注册一个\",{\"1\":{\"828\":1}}],[\"方法了\",{\"1\":{\"771\":1,\"2047\":1}}],[\"方法中的\",{\"1\":{\"2042\":1}}],[\"方法中的数字代表着下标值\",{\"1\":{\"1204\":1}}],[\"方法中返回元素本身\",{\"1\":{\"1921\":1}}],[\"方法中可以选择器来指定删除某个元素\",{\"1\":{\"1211\":1}}],[\"方法中\",{\"1\":{\"995\":1,\"1655\":1}}],[\"方法中必须一个个添加\",{\"1\":{\"995\":1}}],[\"方法中也可以引用分组\",{\"1\":{\"911\":1}}],[\"方法中设置为相同类型的任何数据\",{\"1\":{\"765\":1}}],[\"方法中指定的数据种类\",{\"1\":{\"765\":1}}],[\"方法来修改\",{\"1\":{\"2058\":2}}],[\"方法来注册组件在整个应用里面\",{\"1\":{\"2047\":1}}],[\"方法来添加路由\",{\"1\":{\"2042\":1}}],[\"方法来说则没有必要\",{\"1\":{\"1932\":1}}],[\"方法来阻止冒泡\",{\"1\":{\"1155\":1}}],[\"方法来阻止元素默认的处理行为\",{\"1\":{\"765\":1}}],[\"方法来询问用户是否允许通知\",{\"1\":{\"1105\":1}}],[\"方法来关闭打开的页面\",{\"1\":{\"1088\":1}}],[\"方法来实现获取用户的授权\",{\"1\":{\"1105\":1}}],[\"方法来实现数值的累加\",{\"1\":{\"946\":1}}],[\"方法来实现\",{\"1\":{\"877\":1}}],[\"方法来实现类似栈的行为\",{\"1\":{\"853\":1}}],[\"方法来对集合进行遍历\",{\"1\":{\"863\":1}}],[\"方法来查看一个集合中是否包含某一个值\",{\"1\":{\"862\":1}}],[\"方法来查找一个\",{\"1\":{\"828\":1}}],[\"方法来创建一个共享的\",{\"1\":{\"828\":1}}],[\"方法来存取数据以外\",{\"1\":{\"769\":1}}],[\"方法来存储一个值\",{\"1\":{\"769\":1}}],[\"方法来获取值\",{\"1\":{\"769\":1}}],[\"方法来设置被拖数据的数据类型和值\",{\"1\":{\"765\":1}}],[\"方法去对场景进行像素数据的写入\",{\"1\":{\"738\":1}}],[\"方法自动设置坐标参数\",{\"1\":{\"714\":1}}],[\"方法非布尔值属性则使用\",{\"1\":{\"686\":1}}],[\"方法二\",{\"0\":{\"1445\":1},\"1\":{\"287\":1}}],[\"方法一般定义在原型中\",{\"1\":{\"1009\":1}}],[\"方法一\",{\"0\":{\"1444\":1},\"1\":{\"287\":1}}],[\"方法的初始化值\",{\"1\":{\"2076\":1}}],[\"方法的用法\",{\"1\":{\"2075\":1}}],[\"方法的回调函数\",{\"1\":{\"2075\":1}}],[\"方法的回调函数内部的\",{\"1\":{\"995\":1}}],[\"方法的最后\",{\"1\":{\"2074\":1}}],[\"方法的源码如下\",{\"1\":{\"2073\":1}}],[\"方法的核心\",{\"1\":{\"2055\":1}}],[\"方法的对象\",{\"1\":{\"2047\":1}}],[\"方法的具体实现\",{\"1\":{\"2047\":1}}],[\"方法的具体语法如下\",{\"1\":{\"875\":1}}],[\"方法的整体结构如下\",{\"1\":{\"2047\":1}}],[\"方法的整体结构\",{\"1\":{\"2042\":1}}],[\"方法的配置对象所支持的配置项可以参阅\",{\"1\":{\"2041\":1}}],[\"方法的时候\",{\"1\":{\"2041\":1}}],[\"方法的作用是动态添加路由配置\",{\"1\":{\"2028\":1}}],[\"方法的作用相同\",{\"1\":{\"1156\":1}}],[\"方法的实现\",{\"1\":{\"2075\":1}}],[\"方法的实现与\",{\"1\":{\"1932\":1}}],[\"方法的实现同上\",{\"1\":{\"1928\":1}}],[\"方法的默认行为\",{\"1\":{\"1925\":1}}],[\"方法的使用\",{\"0\":{\"1453\":1}}],[\"方法的更多具体细节请参看\",{\"1\":{\"1205\":1,\"1207\":1,\"1213\":1,\"1219\":1,\"1225\":1,\"1231\":1}}],[\"方法的区别\",{\"1\":{\"1204\":1}}],[\"方法的第三个参数传入\",{\"1\":{\"2058\":1}}],[\"方法的第\",{\"1\":{\"1161\":1}}],[\"方法的第一个参数是\",{\"1\":{\"995\":1}}],[\"方法的第一个参数也是\",{\"1\":{\"995\":1}}],[\"方法的语法如下\",{\"1\":{\"1088\":1}}],[\"方法的主要目的是绑定参数\",{\"1\":{\"995\":1}}],[\"方法的原始定义放到\",{\"1\":{\"995\":1}}],[\"方法的一个应用是调用对象的原生方法\",{\"1\":{\"995\":1}}],[\"方法的参数\",{\"1\":{\"995\":1}}],[\"方法的参数可以是字符串也可以是buffer\",{\"1\":{\"287\":1}}],[\"方法的本地化转换\",{\"1\":{\"877\":3}}],[\"方法的返回结果完全相同\",{\"1\":{\"877\":1}}],[\"方法的\",{\"1\":{\"286\":1,\"1493\":1}}],[\"方法\",{\"0\":{\"880\":1,\"887\":1,\"1198\":1,\"1199\":1,\"1200\":1,\"1201\":1,\"1215\":1,\"1226\":1,\"1227\":1,\"1228\":1,\"1229\":1,\"1230\":1,\"1231\":1,\"1364\":1,\"1932\":1},\"1\":{\"243\":1,\"249\":1,\"255\":1,\"256\":1,\"260\":1,\"264\":1,\"285\":1,\"286\":1,\"307\":1,\"404\":3,\"405\":4,\"408\":2,\"487\":3,\"686\":1,\"720\":2,\"764\":1,\"765\":4,\"769\":1,\"789\":1,\"803\":1,\"812\":3,\"829\":1,\"830\":1,\"834\":1,\"841\":1,\"846\":1,\"855\":1,\"856\":1,\"862\":1,\"868\":1,\"875\":2,\"877\":3,\"884\":1,\"897\":1,\"911\":1,\"917\":1,\"923\":1,\"947\":1,\"993\":1,\"995\":7,\"1009\":1,\"1073\":1,\"1088\":3,\"1094\":1,\"1097\":1,\"1102\":1,\"1112\":1,\"1120\":1,\"1121\":1,\"1155\":1,\"1156\":2,\"1161\":5,\"1193\":1,\"1198\":1,\"1200\":1,\"1209\":1,\"1228\":1,\"1229\":1,\"1239\":1,\"1240\":1,\"1424\":1,\"1453\":4,\"1486\":3,\"1488\":1,\"1669\":1,\"1723\":1,\"1745\":1,\"1824\":2,\"1847\":1,\"1910\":1,\"1923\":1,\"1925\":4,\"1926\":2,\"1928\":1,\"1930\":3,\"1931\":3,\"1932\":1,\"1977\":1,\"1993\":1,\"1998\":1,\"2016\":1,\"2028\":1,\"2029\":1,\"2030\":1,\"2031\":2,\"2041\":3,\"2042\":1,\"2043\":1,\"2047\":2,\"2051\":3,\"2055\":4,\"2058\":4,\"2065\":2,\"2066\":1,\"2075\":1}}],[\"方法即可将\",{\"1\":{\"238\":1}}],[\"方法开始执行编译\",{\"1\":{\"154\":1}}],[\"方应杭\",{\"1\":{\"219\":1}}],[\"方便统一管理和调试\",{\"1\":{\"2016\":1}}],[\"方便观察\",{\"1\":{\"2016\":1}}],[\"方便我们使用\",{\"1\":{\"1226\":1}}],[\"方便我们协同开发\",{\"1\":{\"12\":1}}],[\"方便用户操作\",{\"1\":{\"1160\":1}}],[\"方便调试\",{\"1\":{\"124\":1}}],[\"方便自己和其他开发者使用\",{\"1\":{\"91\":1}}],[\"方式的导入无效\",{\"1\":{\"1319\":1}}],[\"方式的导入有效\",{\"1\":{\"1319\":1}}],[\"方式四\",{\"0\":{\"1130\":1}}],[\"方式三\",{\"0\":{\"1129\":1}}],[\"方式导入模块时\",{\"1\":{\"378\":1}}],[\"方式二\",{\"0\":{\"1128\":1},\"1\":{\"263\":1,\"1454\":4}}],[\"方式一\",{\"0\":{\"1127\":1},\"1\":{\"263\":1,\"1454\":4}}],[\"方式是通过模块化导入语句进行分析的\",{\"1\":{\"122\":1}}],[\"方式\",{\"1\":{\"67\":4,\"242\":1,\"405\":1}}],[\"之类的方法的时候\",{\"1\":{\"2061\":1}}],[\"之所以第一次调用\",{\"1\":{\"2058\":1}}],[\"之所以有这么一次修改\",{\"1\":{\"2058\":1}}],[\"之所以要计算深度\",{\"1\":{\"2068\":1}}],[\"之所以要复习这个\",{\"1\":{\"2048\":1}}],[\"之所以要发两个信息\",{\"1\":{\"1537\":1}}],[\"之所以返回对象中\",{\"1\":{\"2001\":1}}],[\"之所以他们独占一行是因为浏览器的默认样式中将其设置为display\",{\"1\":{\"661\":1}}],[\"之中\",{\"1\":{\"1316\":1,\"1429\":1,\"1493\":1}}],[\"之间建立响应联系\",{\"1\":{\"1932\":1}}],[\"之间也会建\",{\"1\":{\"1902\":1}}],[\"之间的节点应该被卸载\",{\"1\":{\"1968\":1}}],[\"之间的所有节点都删除\",{\"1\":{\"1789\":1}}],[\"之间的所有节点都插入到dom中\",{\"1\":{\"1789\":1}}],[\"之间的\",{\"1\":{\"1789\":1}}],[\"之间的值\",{\"1\":{\"1664\":1}}],[\"之间的简单关系\",{\"1\":{\"1647\":1}}],[\"之间的区别\",{\"0\":{\"1381\":1}}],[\"之间的交互是通过当用户或者浏览器操作网页时发生的事件来处理的\",{\"1\":{\"1137\":1}}],[\"之间的关系\",{\"1\":{\"1084\":2}}],[\"之间的随机数\",{\"1\":{\"883\":2}}],[\"之间的数值\",{\"1\":{\"725\":1}}],[\"之间允许放入任意的\",{\"1\":{\"790\":1}}],[\"之间不会同步\",{\"1\":{\"750\":1}}],[\"之间\",{\"1\":{\"535\":1,\"707\":3,\"737\":1,\"1751\":1,\"1789\":1}}],[\"之间互相通信的规则\",{\"1\":{\"266\":1}}],[\"之前要先\",{\"1\":{\"2058\":1}}],[\"之前将值归一化为统一的字符串形式\",{\"1\":{\"1949\":1}}],[\"之前存进去的就一直呆在里面了\",{\"1\":{\"1890\":1}}],[\"之前获取的计算属性的值保存在watcher\",{\"1\":{\"1849\":1}}],[\"之前被调用\",{\"1\":{\"1824\":1}}],[\"之前定义的\",{\"1\":{\"1313\":1}}],[\"之前我们可以这样做\",{\"1\":{\"1232\":1}}],[\"之前我们说到解决外边距重叠时\",{\"1\":{\"566\":1}}],[\"之前传入的所有参数都会被一次性用于求值\",{\"1\":{\"1039\":1}}],[\"之前的默认行为\",{\"1\":{\"1893\":1,\"1985\":1}}],[\"之前的使用将保持不变\",{\"1\":{\"1259\":1}}],[\"之前的删掉\",{\"1\":{\"1124\":1}}],[\"之前的部分\",{\"1\":{\"1093\":1,\"2051\":1}}],[\"之前的表单\",{\"0\":{\"756\":1}}],[\"之前的\",{\"1\":{\"702\":1}}],[\"之前的解决方案\",{\"0\":{\"26\":1}}],[\"之前是margin\",{\"1\":{\"574\":1}}],[\"之前通过使用\",{\"1\":{\"142\":4}}],[\"之前\",{\"1\":{\"142\":1,\"384\":1,\"746\":1,\"828\":1,\"877\":1,\"1018\":1,\"1644\":1,\"1792\":1,\"1803\":2,\"1897\":1}}],[\"之后将\",{\"1\":{\"2061\":1}}],[\"之后第二次构建状态对象\",{\"1\":{\"2058\":1}}],[\"之后会随着返回的对象暴露给外部\",{\"1\":{\"2057\":1}}],[\"之后当你创建一个\",{\"1\":{\"2053\":1}}],[\"之后再使用前端路由来接管渲染相应的内容\",{\"1\":{\"2050\":1}}],[\"之后修改\",{\"1\":{\"2047\":1}}],[\"之后就是各种方法的定义了\",{\"1\":{\"2046\":1}}],[\"之后查找是否还有\",{\"1\":{\"1792\":1}}],[\"之后只有两个变量可以拿到值\",{\"1\":{\"1290\":1}}],[\"之后的每一次请求都按照正常的普通请求进行\",{\"1\":{\"1539\":1}}],[\"之后的每个变量依次表示内层\",{\"1\":{\"1290\":1}}],[\"之后的变量都是\",{\"1\":{\"1290\":1}}],[\"之后的是函数回调所需的参数\",{\"1\":{\"995\":1}}],[\"之后一对大括号可以形成一个块作用域\",{\"1\":{\"1018\":1}}],[\"之后很多社交网站\",{\"1\":{\"895\":1}}],[\"之后我们就会看到安装在\",{\"1\":{\"770\":1}}],[\"之后你把路径封闭\",{\"1\":{\"710\":1}}],[\"之后直接使用图标字体即可\",{\"1\":{\"623\":1}}],[\"之后版本添加的\",{\"1\":{\"389\":1}}],[\"之后生成依赖关系图需要用到\",{\"1\":{\"155\":1}}],[\"之后要运行\",{\"1\":{\"124\":1}}],[\"之后\",{\"1\":{\"66\":1,\"220\":1,\"296\":1,\"347\":1,\"373\":1,\"991\":1,\"1029\":1,\"1301\":1,\"1498\":1,\"1792\":1,\"2058\":1}}],[\"示例如下\",{\"1\":{\"770\":1,\"779\":1,\"789\":3,\"790\":2,\"792\":1,\"793\":1,\"795\":1,\"806\":1,\"822\":1,\"828\":2,\"829\":1,\"830\":1,\"831\":1,\"833\":2,\"835\":1,\"845\":1,\"846\":4,\"848\":1,\"863\":1,\"896\":1,\"897\":1,\"908\":1,\"923\":1,\"933\":1,\"948\":2,\"993\":1,\"1078\":1,\"1079\":1,\"1080\":1,\"1081\":1,\"1087\":2,\"1088\":4,\"1094\":3,\"1102\":1,\"1105\":1,\"1124\":1,\"1139\":1,\"1150\":2,\"1161\":3,\"1201\":3,\"1205\":1}}],[\"示例代码如下\",{\"1\":{\"1105\":2,\"1160\":1,\"1162\":1,\"1670\":1,\"1671\":1}}],[\"示例代码\",{\"1\":{\"257\":1,\"258\":1,\"259\":1,\"260\":1,\"696\":1,\"697\":2,\"725\":1,\"726\":1,\"740\":1}}],[\"示例\",{\"1\":{\"66\":1,\"75\":1,\"124\":1,\"621\":1,\"789\":1,\"794\":1,\"797\":1,\"806\":1,\"828\":1,\"846\":3,\"931\":1,\"947\":1,\"983\":2,\"1088\":2,\"1091\":1,\"1096\":1,\"1633\":1,\"1794\":1}}],[\"格式进行序列化的\",{\"1\":{\"1674\":1}}],[\"格式为\",{\"1\":{\"1276\":1}}],[\"格式时\",{\"1\":{\"757\":2}}],[\"格式的数据\",{\"0\":{\"1578\":1},\"1\":{\"1655\":1}}],[\"格式的日期字符串\",{\"1\":{\"877\":1}}],[\"格式的整型数据\",{\"1\":{\"737\":1}}],[\"格式的请求体的中间件\",{\"1\":{\"317\":1}}],[\"格式化字符串以\",{\"1\":{\"389\":1}}],[\"格式请求体的中间件\",{\"1\":{\"317\":1}}],[\"格式\",{\"1\":{\"66\":1,\"75\":1,\"269\":1}}],[\"网上商城\",{\"1\":{\"659\":1}}],[\"网上购物\",{\"1\":{\"659\":1}}],[\"网页端\",{\"1\":{\"1576\":1,\"1577\":1,\"1578\":1,\"1581\":1,\"1582\":1,\"1585\":1,\"1586\":1,\"1587\":1}}],[\"网页文档\",{\"1\":{\"1109\":1}}],[\"网页\",{\"1\":{\"694\":2}}],[\"网页关键字\",{\"1\":{\"659\":1}}],[\"网页结构\",{\"0\":{\"656\":1}}],[\"网页可以根据不通的设备或窗口大小呈现出不同的效果\",{\"1\":{\"651\":1}}],[\"网页中使用\",{\"0\":{\"293\":1}}],[\"网页中的表单用于将本地的数据提交给远程的服务器\",{\"1\":{\"670\":1}}],[\"网页中的\",{\"0\":{\"290\":1},\"1\":{\"290\":1}}],[\"网格布局\",{\"1\":{\"605\":1}}],[\"网格是一组相交的水平线和垂直线\",{\"1\":{\"605\":1}}],[\"网格\",{\"0\":{\"605\":1}}],[\"网站被搜索引擎检索时的标题\",{\"1\":{\"659\":1}}],[\"网站的描述\",{\"1\":{\"659\":1}}],[\"网站的外链会用到此形式\",{\"1\":{\"291\":1}}],[\"网站部署在多台服务器\",{\"1\":{\"508\":1}}],[\"网站首页\",{\"1\":{\"304\":1}}],[\"网站根目录\",{\"1\":{\"289\":1}}],[\"网站根目录或静态资源目录\",{\"0\":{\"289\":1}}],[\"网站搜索\",{\"1\":{\"65\":1}}],[\"网易首页\",{\"1\":{\"288\":1}}],[\"网络层结构\",{\"0\":{\"1660\":1}}],[\"网络最终形成了五层模型\",{\"1\":{\"1622\":1}}],[\"网络要解决的问题是\",{\"1\":{\"1622\":1}}],[\"网络分层模型和应用协议\",{\"0\":{\"1619\":1}}],[\"网络中的跨域\",{\"0\":{\"1602\":1}}],[\"网络异常回调\",{\"1\":{\"1580\":1}}],[\"网络异常设置\",{\"1\":{\"1580\":1}}],[\"网络异常\",{\"1\":{\"1580\":1}}],[\"网络安全\",{\"2\":{\"1566\":1,\"2090\":1,\"2093\":1,\"2097\":1,\"2103\":1}}],[\"网络模型\",{\"2\":{\"1566\":1}}],[\"网络通信\",{\"0\":{\"1564\":1},\"1\":{\"1601\":1}}],[\"网络通信完成后需要执行的任务\",{\"1\":{\"1558\":1}}],[\"网络\",{\"1\":{\"1558\":1}}],[\"网络队列执行\",{\"1\":{\"1181\":1}}],[\"网络队列与延时队列的执行顺序上\",{\"1\":{\"1181\":1}}],[\"网络队列\",{\"1\":{\"1181\":1}}],[\"网络请求模块\",{\"1\":{\"1173\":1}}],[\"网络进程内部会启动多个线程来处理不同的网络任务\",{\"1\":{\"1168\":1,\"1555\":1}}],[\"网络进程\",{\"1\":{\"1168\":1,\"1555\":1}}],[\"网络传输量\",{\"1\":{\"356\":1}}],[\"网络操作\",{\"1\":{\"224\":1}}],[\"网络等相关的\",{\"1\":{\"216\":1}}],[\"网址\",{\"1\":{\"94\":1}}],[\"网址https\",{\"1\":{\"80\":1}}],[\"网址是\",{\"1\":{\"65\":1}}],[\"关联\",{\"1\":{\"1889\":2,\"1906\":1}}],[\"关联远程仓库\",{\"1\":{\"13\":1}}],[\"关注结果\",{\"1\":{\"1872\":1}}],[\"关注过程\",{\"1\":{\"1872\":1}}],[\"关注其服务的\",{\"1\":{\"1688\":1}}],[\"关我啥事\",{\"1\":{\"1635\":1}}],[\"关键点就来到\",{\"1\":{\"2058\":1}}],[\"关键在于验证缓存是否有效\",{\"1\":{\"1535\":1}}],[\"关键\",{\"1\":{\"1069\":1,\"1070\":1}}],[\"关键帧的设置\",{\"0\":{\"643\":1}}],[\"关键帧设置了动画执行的每一个步骤\",{\"1\":{\"642\":1}}],[\"关键字和空格\",{\"1\":{\"1979\":1}}],[\"关键字指向\",{\"1\":{\"995\":1}}],[\"关键字是一个非常重要的语法点\",{\"1\":{\"990\":1}}],[\"关键字声明变量\",{\"1\":{\"948\":1}}],[\"关键字时\",{\"1\":{\"834\":1}}],[\"关键字可以用来跳过当次循环\",{\"1\":{\"825\":1}}],[\"关键字可以用来退出\",{\"1\":{\"824\":1}}],[\"关键字禁止所有滚动\",{\"1\":{\"557\":1}}],[\"关键字来捕获该异常\",{\"1\":{\"403\":1}}],[\"关键字不可变且唯一\",{\"1\":{\"393\":1}}],[\"关键字\",{\"0\":{\"834\":1,\"987\":1,\"988\":1,\"989\":1},\"1\":{\"65\":1,\"393\":1,\"402\":1,\"641\":1,\"824\":1,\"834\":1,\"876\":2,\"942\":1,\"995\":1}}],[\"关系\",{\"0\":{\"1170\":1},\"1\":{\"1702\":1}}],[\"关系的选择\",{\"1\":{\"914\":1}}],[\"关系运算符\",{\"0\":{\"812\":1}}],[\"关系运算符并不能用于字符串之间的比较\",{\"1\":{\"166\":1}}],[\"关系选择器\",{\"0\":{\"518\":1}}],[\"关系是\",{\"1\":{\"271\":1}}],[\"关闭vue的生产提示\",{\"1\":{\"1427\":1}}],[\"关闭验证\",{\"0\":{\"761\":1}}],[\"关闭自动补全\",{\"1\":{\"670\":1}}],[\"关闭文件\",{\"1\":{\"404\":1}}],[\"关闭转义功能\",{\"1\":{\"384\":1}}],[\"关闭浏览器即失效\",{\"1\":{\"345\":1}}],[\"关闭对应的程序\",{\"1\":{\"275\":1}}],[\"关闭当前正在运行监听端口的服务\",{\"1\":{\"275\":1}}],[\"关闭连接\",{\"1\":{\"269\":1}}],[\"关闭写入流\",{\"1\":{\"247\":1}}],[\"关闭数据链接\",{\"1\":{\"191\":1}}],[\"关于传入\",{\"1\":{\"2041\":1}}],[\"关于请求方法的协议原文见\",{\"1\":{\"1632\":1}}],[\"关于跨域获取响应头\",{\"0\":{\"1613\":1}}],[\"关于definecomponent\",{\"1\":{\"1519\":1}}],[\"关于组件标签\",{\"0\":{\"1420\":1}}],[\"关于销毁\",{\"0\":{\"1411\":1}}],[\"关于源码层面的区别参考computed\",{\"1\":{\"1381\":1}}],[\"关于这种兼容性的配置\",{\"1\":{\"2063\":1}}],[\"关于这种使用new关键字创建对象的方式\",{\"1\":{\"876\":1}}],[\"关于这个值的计算又需要判断是否存在之前的状态对象\",{\"1\":{\"2061\":1}}],[\"关于这个\",{\"1\":{\"2053\":1}}],[\"关于这个问题\",{\"1\":{\"1224\":1}}],[\"关于这部分内容在后面的章节中会详解\",{\"1\":{\"1204\":1}}],[\"关于这\",{\"1\":{\"1160\":1}}],[\"关于取消默认行为的方式有cancelable\",{\"1\":{\"1156\":1}}],[\"关于窗口位置\",{\"1\":{\"1088\":1}}],[\"关于窗口大小\",{\"1\":{\"1088\":1}}],[\"关于窗口大小的属性有两组\",{\"1\":{\"1087\":1}}],[\"关于作为回调被传入的函数\",{\"1\":{\"946\":1}}],[\"关于环视更多的介绍\",{\"1\":{\"918\":1}}],[\"关于对象的解构\",{\"1\":{\"847\":1}}],[\"关于继承后面会介绍\",{\"1\":{\"830\":1}}],[\"关于数的比较就不用说了\",{\"1\":{\"812\":1}}],[\"关于赋值运算符\",{\"1\":{\"805\":1}}],[\"关于样式的设置\",{\"1\":{\"713\":2}}],[\"关于路径的设置\",{\"1\":{\"713\":1}}],[\"关于路径\",{\"1\":{\"282\":1,\"713\":1}}],[\"关于\",{\"0\":{\"1423\":1,\"1612\":1},\"1\":{\"241\":1,\"282\":1,\"990\":1,\"1197\":1,\"1201\":1,\"1203\":1,\"1423\":1,\"1485\":1,\"2055\":1,\"2069\":1}}],[\"关于开源证书扩展阅读\",{\"1\":{\"64\":1}}],[\"xsrf\",{\"1\":{\"2087\":1}}],[\"xss\",{\"0\":{\"2094\":1},\"1\":{\"345\":1,\"1400\":1,\"2087\":2,\"2088\":1,\"2094\":1}}],[\"x选项式的兼容\",{\"1\":{\"2001\":1}}],[\"x3\",{\"1\":{\"1729\":1}}],[\"x3=3\",{\"1\":{\"165\":1}}],[\"xlim=\",{\"1\":{\"1680\":1}}],[\"xlabel=\",{\"1\":{\"1680\":1}}],[\"xavier\",{\"1\":{\"1680\":1}}],[\"xaba\",{\"1\":{\"893\":1}}],[\"xabab\",{\"1\":{\"893\":1}}],[\"xj\",{\"1\":{\"911\":1}}],[\"x2\",{\"1\":{\"717\":1,\"725\":2,\"726\":2,\"1498\":1,\"1729\":3}}],[\"x2=12\",{\"1\":{\"165\":1}}],[\"x1\",{\"1\":{\"717\":1,\"725\":2,\"726\":2,\"1498\":1,\"1729\":3}}],[\"x1=5+6\",{\"1\":{\"165\":1}}],[\"xhtml这个命名空间内\",{\"1\":{\"692\":1}}],[\"xhtml1\",{\"1\":{\"692\":1}}],[\"xhtml\",{\"1\":{\"692\":1}}],[\"xhr\",{\"0\":{\"475\":1},\"1\":{\"476\":12,\"1558\":1,\"1572\":1,\"1575\":8,\"1576\":8,\"1577\":10,\"1578\":3,\"1579\":1,\"1580\":3,\"1581\":5,\"1612\":3}}],[\"xml\",{\"1\":{\"765\":2,\"895\":1,\"1572\":1}}],[\"xmlns\",{\"1\":{\"692\":1}}],[\"xmlns=\",{\"1\":{\"692\":1}}],[\"xmlhttprequest\",{\"1\":{\"476\":1,\"771\":1,\"1572\":1,\"1575\":2,\"1576\":1,\"1577\":1,\"1581\":1,\"1582\":1,\"1612\":1}}],[\"xf0f3\",{\"1\":{\"623\":1}}],[\"x+y\",{\"1\":{\"402\":1,\"975\":1}}],[\"x三个数值按照字符串模板的格式输出\",{\"1\":{\"388\":1}}],[\"x0a\",{\"1\":{\"384\":1}}],[\"xyy\",{\"1\":{\"384\":1}}],[\"xyz\",{\"1\":{\"307\":1}}],[\"x=b\",{\"1\":{\"1753\":1}}],[\"x=0\",{\"1\":{\"1658\":1}}],[\"x=2\",{\"1\":{\"1039\":2}}],[\"x=23\",{\"1\":{\"382\":1}}],[\"x=5\",{\"1\":{\"386\":1,\"387\":1,\"388\":1}}],[\"x=y\",{\"1\":{\"382\":1}}],[\"x=100\",{\"1\":{\"345\":1}}],[\"xiangqing\",{\"1\":{\"1461\":2,\"1462\":1,\"1464\":2}}],[\"xiaoxuesheng\",{\"1\":{\"350\":1}}],[\"xizhi\",{\"1\":{\"833\":2}}],[\"xiejie\",{\"1\":{\"770\":5,\"790\":2,\"827\":9,\"828\":27,\"829\":1,\"830\":11,\"831\":3,\"832\":12,\"833\":8,\"834\":3,\"868\":7,\"869\":3,\"870\":7,\"871\":6,\"896\":4,\"897\":3,\"934\":4,\"941\":2,\"943\":2,\"948\":2,\"996\":1,\"1201\":6}}],[\"xid=1020abce121\",{\"1\":{\"345\":1}}],[\"xx\",{\"1\":{\"286\":4,\"388\":3,\"494\":1,\"1399\":1,\"1400\":1}}],[\"xxx使用子组件的属性或者方法时\",{\"1\":{\"2002\":1}}],[\"xxx实际访问的是this\",{\"1\":{\"1804\":1}}],[\"xxx来访问任意属性\",{\"1\":{\"1804\":1}}],[\"xxx来访问data选项中的xxx数据\",{\"1\":{\"1804\":1}}],[\"xxx来访问我们定义的数据\",{\"1\":{\"1354\":1}}],[\"xxx调整到应用实例\",{\"1\":{\"1518\":1}}],[\"xxx会得到一个数组\",{\"1\":{\"1428\":1}}],[\"xxx只会指向最后一次声明的元素\",{\"1\":{\"1428\":1}}],[\"xxx=\",{\"1\":{\"1368\":1}}],[\"xxxpx\",{\"1\":{\"556\":1,\"602\":1}}],[\"xxx的字符串\",{\"1\":{\"368\":1}}],[\"xxx\",{\"1\":{\"3\":3,\"16\":2,\"17\":1,\"35\":1,\"49\":1,\"59\":1,\"286\":2,\"307\":4,\"383\":1,\"388\":3,\"597\":1,\"675\":2,\"681\":1,\"1061\":3,\"1070\":1,\"1310\":1,\"1316\":3,\"1317\":2,\"1350\":3,\"1352\":2,\"1353\":3,\"1368\":3,\"1385\":2,\"1386\":2,\"1392\":2,\"1397\":2,\"1401\":1,\"1404\":1,\"1427\":3,\"1428\":3,\"1429\":1,\"1433\":7,\"1434\":1,\"1436\":2,\"1437\":2,\"1439\":2,\"1453\":3,\"1464\":4,\"1487\":3,\"1804\":1,\"1808\":1,\"1854\":2,\"1951\":1,\"2058\":2}}],[\"xxxxxstorage\",{\"1\":{\"1436\":5}}],[\"xxxx\",{\"1\":{\"3\":1,\"7\":2,\"29\":1,\"49\":1,\"1426\":1,\"1432\":1,\"1438\":2,\"1518\":2}}],[\"x4=10\",{\"1\":{\"165\":1}}],[\"x\",{\"0\":{\"1490\":1,\"2035\":2},\"1\":{\"64\":4,\"142\":1,\"257\":1,\"259\":1,\"287\":2,\"329\":1,\"382\":10,\"386\":12,\"387\":6,\"388\":14,\"390\":1,\"395\":11,\"402\":12,\"408\":1,\"472\":1,\"616\":1,\"617\":2,\"629\":3,\"646\":1,\"650\":1,\"672\":1,\"673\":1,\"674\":2,\"706\":4,\"711\":4,\"714\":2,\"716\":4,\"718\":2,\"719\":2,\"720\":4,\"722\":2,\"723\":1,\"729\":4,\"730\":3,\"733\":1,\"736\":1,\"740\":10,\"745\":3,\"764\":1,\"765\":1,\"773\":1,\"780\":1,\"835\":3,\"884\":14,\"893\":4,\"903\":1,\"932\":1,\"941\":4,\"958\":4,\"975\":1,\"995\":8,\"996\":8,\"1021\":3,\"1039\":5,\"1053\":1,\"1058\":1,\"1087\":2,\"1088\":2,\"1196\":6,\"1365\":4,\"1445\":1,\"1454\":1,\"1486\":3,\"1496\":1,\"1497\":1,\"1500\":4,\"1501\":1,\"1518\":3,\"1519\":2,\"1577\":1,\"1582\":8,\"1607\":1,\"1634\":1,\"1655\":9,\"1658\":5,\"1662\":3,\"1666\":5,\"1667\":2,\"1669\":10,\"1670\":4,\"1671\":4,\"1673\":5,\"1676\":3,\"1680\":6,\"1722\":2,\"1723\":1,\"1725\":1,\"1726\":1,\"1727\":1,\"1729\":2,\"1737\":2,\"1738\":2,\"2034\":2,\"2035\":2,\"2038\":2,\"2058\":2}}],[\"大多会将额外需要的数据和方法挂载到组件实例中\",{\"1\":{\"2016\":1}}],[\"大多数情况下\",{\"1\":{\"1499\":1}}],[\"大多数属性都是普通属性\",{\"1\":{\"1205\":1}}],[\"大多数\",{\"1\":{\"1093\":1,\"2051\":1}}],[\"大多数接口都是由\",{\"1\":{\"337\":1}}],[\"大大则大\",{\"1\":{\"1738\":1}}],[\"大大加强代码的重用性与扩展性\",{\"1\":{\"402\":1}}],[\"大豆的亩产比去年同期高了百分之多少\",{\"1\":{\"1735\":1}}],[\"大豆的亩产比去年同期高了多少公斤\",{\"1\":{\"1735\":1}}],[\"大豆的占比比去年同期高了\",{\"1\":{\"1735\":1}}],[\"大豆的占比比去年同期高了多少个百分点\",{\"1\":{\"1735\":1}}],[\"大数\",{\"1\":{\"1723\":1}}],[\"大同小异\",{\"1\":{\"1341\":1}}],[\"大致流程为\",{\"1\":{\"1879\":1}}],[\"大致原理如下\",{\"1\":{\"1187\":1}}],[\"大致如下\",{\"1\":{\"1153\":1}}],[\"大致可以认为\",{\"1\":{\"681\":1}}],[\"大量使用了闭包\",{\"1\":{\"1025\":1}}],[\"大则表示放大\",{\"1\":{\"720\":1}}],[\"大屏幕\",{\"1\":{\"651\":1}}],[\"大图不会缩小以适应盒子\",{\"1\":{\"628\":1}}],[\"大小为\",{\"1\":{\"1663\":1}}],[\"大小的元素\",{\"1\":{\"650\":1}}],[\"大小\",{\"1\":{\"622\":1,\"636\":2}}],[\"大小一般是4k\",{\"1\":{\"346\":1}}],[\"大部分用来代理常规对象的代码对于数组也是生效的\",{\"1\":{\"1916\":1}}],[\"大部分\",{\"1\":{\"1569\":1}}],[\"大部分时候\",{\"1\":{\"1526\":1}}],[\"大部分开发任务都无法完成\",{\"1\":{\"990\":1}}],[\"大部分网站都会专门为移动端设计网页\",{\"1\":{\"649\":1}}],[\"大部分属性都支持过渡效果\",{\"1\":{\"641\":1}}],[\"大部分元素在脱标后都会转换成block类型\",{\"1\":{\"541\":1}}],[\"大部分情况下合并和变基是可以互换的\",{\"1\":{\"11\":1}}],[\"大\",{\"1\":{\"411\":2,\"1743\":1}}],[\"大括号括起来\",{\"1\":{\"393\":1}}],[\"大家首先考虑一下网页中如果出现以下的场景\",{\"1\":{\"1644\":1}}],[\"大家了解即可\",{\"1\":{\"348\":1}}],[\"大家可以按照这个步骤进行操作\",{\"1\":{\"301\":1}}],[\"大家可以通过查阅\",{\"1\":{\"1203\":1}}],[\"大家可以通过\",{\"1\":{\"176\":1}}],[\"大家可以根据不同的场景进行选择\",{\"1\":{\"89\":1}}],[\"大型网站用的比较多\",{\"1\":{\"291\":1}}],[\"大块儿\",{\"1\":{\"252\":1}}],[\"大文件写入或者频繁写入的场景\",{\"1\":{\"247\":1}}],[\"大体一致\",{\"1\":{\"245\":1}}],[\"大体相同\",{\"1\":{\"80\":1}}],[\"大于小于这些\",{\"1\":{\"976\":1}}],[\"大于号\",{\"1\":{\"658\":1}}],[\"大于比较\",{\"1\":{\"398\":1}}],[\"大于等于比较\",{\"1\":{\"398\":1}}],[\"大于等于\",{\"1\":{\"166\":1,\"398\":1,\"794\":1,\"812\":1,\"816\":1,\"1039\":1}}],[\"大于\",{\"1\":{\"93\":1,\"166\":1,\"398\":1,\"651\":3,\"812\":1,\"816\":1,\"1666\":1,\"2065\":1}}],[\"大米\",{\"1\":{\"72\":1}}],[\"大写\",{\"1\":{\"64\":1,\"1575\":1,\"1576\":1}}],[\"内层\",{\"1\":{\"2074\":1}}],[\"内层作用域可以访问外层作用域的变量\",{\"1\":{\"1018\":1}}],[\"内代码不能操作\",{\"1\":{\"1182\":1}}],[\"内存减少\",{\"1\":{\"1477\":1}}],[\"内存中的对象\",{\"1\":{\"1172\":1}}],[\"内存中的对象越多\",{\"1\":{\"1158\":1}}],[\"内存中的数据\",{\"1\":{\"1001\":1}}],[\"内存直线上升\",{\"1\":{\"1030\":1}}],[\"内存占用越来越高\",{\"1\":{\"1027\":1}}],[\"内存溢出与内存泄露\",{\"0\":{\"1026\":1}}],[\"内存生命周期\",{\"1\":{\"1002\":1}}],[\"内存是容器\",{\"1\":{\"1001\":1}}],[\"内存\",{\"0\":{\"1001\":1}}],[\"内存空间的分类\",{\"1\":{\"1000\":1}}],[\"内存条通电后产生的存储空间\",{\"1\":{\"1000\":1}}],[\"内存的理解\",{\"0\":{\"997\":1}}],[\"内存泄露会逐渐减少全部可用内存\",{\"1\":{\"865\":1}}],[\"内边距和边框的总大小\",{\"1\":{\"547\":1}}],[\"内边距和边框\",{\"1\":{\"547\":1}}],[\"内边距和边框共同决定\",{\"1\":{\"545\":1}}],[\"内边距的设置会影响到盒子的大小\",{\"1\":{\"545\":1}}],[\"内边距的简写属性\",{\"1\":{\"545\":1}}],[\"内边距\",{\"0\":{\"545\":1},\"1\":{\"539\":1,\"540\":2,\"542\":1}}],[\"内联框架\",{\"0\":{\"667\":1}}],[\"内联元素不会导致文本换行\",{\"1\":{\"662\":1}}],[\"内联元素通常出现在块级元素中并环绕文档内容的一小部分\",{\"1\":{\"662\":1}}],[\"内联元素\",{\"0\":{\"662\":1}}],[\"内联样式\",{\"1\":{\"524\":1}}],[\"内联到\",{\"1\":{\"142\":1}}],[\"内置组件的代码\",{\"1\":{\"1782\":1}}],[\"内置回调函数介绍\",{\"0\":{\"944\":1}}],[\"内置函数\",{\"1\":{\"401\":1}}],[\"内置函数zip\",{\"1\":{\"401\":1}}],[\"内置了\",{\"1\":{\"317\":1,\"2031\":1}}],[\"内置处理静态资源的中间件\",{\"1\":{\"316\":1}}],[\"内置模块\",{\"1\":{\"241\":1,\"242\":1,\"377\":1}}],[\"内置模块时\",{\"1\":{\"238\":1}}],[\"内容安全策略\",{\"1\":{\"2095\":1}}],[\"内容将保留在其原始位置\",{\"1\":{\"1515\":1}}],[\"内容类型\",{\"1\":{\"693\":1}}],[\"内容区的背景颜色会延伸到内边距上\",{\"1\":{\"545\":1}}],[\"内容区的大小由width\",{\"1\":{\"543\":1}}],[\"内容区和边框之间的距离是内边距\",{\"1\":{\"545\":1}}],[\"内容区\",{\"0\":{\"543\":1},\"1\":{\"542\":1,\"547\":2,\"631\":1}}],[\"内容也是可以修改的\",{\"1\":{\"391\":1}}],[\"内容\",{\"1\":{\"388\":1}}],[\"内容必须在同一行\",{\"1\":{\"383\":1}}],[\"内容经常更新的资源\",{\"1\":{\"288\":1}}],[\"内容长时间不发生改变的资源\",{\"1\":{\"288\":1}}],[\"内容示例\",{\"1\":{\"64\":1}}],[\"内部在做什么\",{\"1\":{\"2058\":1}}],[\"内部方法\",{\"1\":{\"2057\":1,\"2058\":1}}],[\"内部方法与常规对象不同\",{\"1\":{\"1916\":1}}],[\"内部所定义的\",{\"1\":{\"2047\":1}}],[\"内部同样定义了诸如\",{\"1\":{\"2042\":1}}],[\"内部定义的方法\",{\"1\":{\"2042\":1}}],[\"内部声明了一些变量以及方法\",{\"1\":{\"2041\":1}}],[\"内部会触发一个\",{\"1\":{\"2047\":1}}],[\"内部会存在一些深层次的嵌套\",{\"1\":{\"2044\":1}}],[\"内部会试图从代理对象\",{\"1\":{\"1931\":1}}],[\"内部会用它来处理\",{\"1\":{\"1827\":1}}],[\"内部会将多个标签包含在一个fragment虚拟元素中\",{\"1\":{\"1514\":1}}],[\"内部样式\",{\"1\":{\"1526\":1}}],[\"内部基于\",{\"1\":{\"1488\":1}}],[\"内部有\",{\"1\":{\"1374\":1}}],[\"内部存储的数据\",{\"1\":{\"1000\":1}}],[\"内部没有\",{\"1\":{\"995\":1}}],[\"内部并没有\",{\"1\":{\"995\":1}}],[\"内部的路由已经更新\",{\"1\":{\"2029\":1}}],[\"内部的元素经过reactive处理后\",{\"1\":{\"1923\":1}}],[\"内部的数据\",{\"1\":{\"1492\":1}}],[\"内部的匿名函数\",{\"1\":{\"1023\":1}}],[\"内部的\",{\"1\":{\"993\":1,\"995\":2,\"1923\":1,\"2047\":1,\"2058\":1}}],[\"内部的渲染不会影响到外部\",{\"1\":{\"564\":1}}],[\"内部\",{\"1\":{\"958\":1,\"995\":2,\"1487\":1,\"2019\":1}}],[\"内部表现\",{\"1\":{\"548\":1}}],[\"内部类型设置子元素的布局\",{\"1\":{\"548\":1}}],[\"内部包含了\",{\"1\":{\"156\":1}}],[\"内部私有的函数\",{\"1\":{\"29\":1,\"30\":1}}],[\"内部调用\",{\"1\":{\"29\":1,\"30\":1}}],[\"命名路由\",{\"0\":{\"1460\":1}}],[\"命名不要与\",{\"1\":{\"1435\":1}}],[\"命名\",{\"1\":{\"1408\":1,\"1419\":2}}],[\"命名方式\",{\"1\":{\"1408\":1}}],[\"命名参数\",{\"0\":{\"1336\":1}}],[\"命名分组\",{\"1\":{\"921\":1}}],[\"命名空间\",{\"0\":{\"835\":1}}],[\"命名规则\",{\"1\":{\"777\":1}}],[\"命名行的工作目录\",{\"1\":{\"261\":1}}],[\"命名为\",{\"1\":{\"10\":1,\"24\":1}}],[\"命令式\",{\"0\":{\"1872\":1},\"1\":{\"1872\":3}}],[\"命令汇总\",{\"0\":{\"182\":1}}],[\"命令连接本机的\",{\"1\":{\"177\":1}}],[\"命令时\",{\"1\":{\"157\":1}}],[\"命令如下\",{\"1\":{\"128\":1}}],[\"命令\",{\"1\":{\"72\":1,\"73\":1,\"78\":1,\"82\":1,\"87\":1,\"123\":2,\"124\":1,\"148\":1,\"177\":1,\"1456\":1}}],[\"命令名即可调用\",{\"1\":{\"66\":1}}],[\"命令安装包\",{\"1\":{\"66\":1}}],[\"命令行中需要加$set\",{\"1\":{\"202\":1}}],[\"命令行中运行\",{\"1\":{\"91\":1}}],[\"命令行交互一般是学习数据库的第一步\",{\"1\":{\"178\":1}}],[\"命令行交互\",{\"0\":{\"178\":1}}],[\"命令行下执行该脚本\",{\"1\":{\"301\":1}}],[\"命令行下\",{\"1\":{\"91\":2}}],[\"命令行\",{\"1\":{\"65\":1,\"275\":1}}],[\"命令的作用是将文件夹初始化为一个\",{\"1\":{\"64\":1}}],[\"执行回调函数\",{\"1\":{\"2075\":1}}],[\"执行回调函数队列\",{\"1\":{\"1822\":1}}],[\"执行解析守卫\",{\"1\":{\"2071\":1}}],[\"执行解析模板中的结构化指令\",{\"1\":{\"1791\":1}}],[\"执行一些特定的操作\",{\"1\":{\"2069\":1}}],[\"执行每一个\",{\"1\":{\"2061\":1}}],[\"执行该行代码后\",{\"1\":{\"2058\":1}}],[\"执行路由守卫方式的区别\",{\"1\":{\"2035\":1}}],[\"执行定义的回调函数\",{\"1\":{\"2034\":2}}],[\"执行定义的get函数\",{\"1\":{\"1849\":1}}],[\"执行导航守卫\",{\"1\":{\"2029\":1}}],[\"执行setup函数\",{\"1\":{\"2020\":1}}],[\"执行instance\",{\"1\":{\"2002\":1}}],[\"执行原始mount\",{\"1\":{\"1998\":1}}],[\"执行app的挂载\",{\"1\":{\"1997\":1}}],[\"执行任务队列中的任务\",{\"1\":{\"1954\":1}}],[\"执行时\",{\"1\":{\"1890\":1}}],[\"执行时机\",{\"1\":{\"1407\":1}}],[\"执行副作用函数收集依赖\",{\"1\":{\"1984\":1}}],[\"执行副作用函数\",{\"1\":{\"1888\":1,\"1889\":1,\"1890\":1,\"1891\":1,\"1893\":1,\"1894\":1}}],[\"执行子组件的$mount方法创建render\",{\"1\":{\"1862\":1}}],[\"执行render函数获取组件的\",{\"1\":{\"1862\":1}}],[\"执行render函数时\",{\"1\":{\"1358\":1}}],[\"执行watcher\",{\"1\":{\"1855\":1}}],[\"执行webpack\",{\"1\":{\"124\":1}}],[\"执行then中定义的回调\",{\"1\":{\"1777\":1}}],[\"执行promise内部函数\",{\"1\":{\"1777\":1}}],[\"执行bn\",{\"1\":{\"1665\":1}}],[\"执行引擎将它解析执行\",{\"1\":{\"1570\":1}}],[\"执行到一半的时候某个计时器到达了时间\",{\"1\":{\"1556\":1}}],[\"执行到一半的时候用户点击了按钮\",{\"1\":{\"1556\":1}}],[\"执行计时器的回调函数\",{\"1\":{\"1556\":1}}],[\"执行事件处理函数\",{\"1\":{\"1556\":1}}],[\"执行全局的后置守卫\",{\"1\":{\"2029\":1}}],[\"执行全局后置守卫\",{\"1\":{\"2029\":1}}],[\"执行全局\",{\"1\":{\"1556\":1}}],[\"执行加\",{\"1\":{\"1451\":1}}],[\"执行加减\",{\"1\":{\"806\":1}}],[\"执行指令定义中的钩子函数\",{\"1\":{\"1407\":1}}],[\"执行updatedomlisteners函数\",{\"1\":{\"1368\":1}}],[\"执行后\",{\"1\":{\"1224\":1}}],[\"执行顺序类似于promise的嵌套\",{\"1\":{\"1189\":1}}],[\"执行顺序自后往前\",{\"1\":{\"138\":1}}],[\"执行初始化代码\",{\"1\":{\"1180\":1}}],[\"执行构造函数体\",{\"1\":{\"1073\":1}}],[\"执行环境会负责管理代码执行过程中使用的内存\",{\"1\":{\"1028\":1}}],[\"执行代码时动态创建\",{\"1\":{\"1020\":1}}],[\"执行阶段\",{\"1\":{\"1014\":1,\"1015\":3,\"1020\":1}}],[\"执行前进行的准备工作\",{\"1\":{\"1013\":1}}],[\"执行上述函数收集依赖\",{\"1\":{\"1849\":1}}],[\"执行上述命令后\",{\"1\":{\"68\":1}}],[\"执行上下文对象保存运行环境的信息\",{\"1\":{\"1021\":1}}],[\"执行上下文环境从属于所在的作用域\",{\"1\":{\"1020\":1}}],[\"执行上下文详解\",{\"1\":{\"1015\":1}}],[\"执行上下文创建和执行的过程\",{\"0\":{\"1015\":1}}],[\"执行上下文栈\",{\"1\":{\"1013\":1}}],[\"执行上下文\",{\"1\":{\"1013\":1,\"1020\":1},\"2\":{\"1042\":1}}],[\"执行上下文的理解\",{\"0\":{\"1013\":1}}],[\"执行上下文与执行上下文栈\",{\"0\":{\"1011\":1}}],[\"执行函数时\",{\"1\":{\"1023\":1}}],[\"执行函数代码\",{\"1\":{\"1020\":1}}],[\"执行函数中代码时\",{\"1\":{\"1014\":1}}],[\"执行函数\",{\"1\":{\"995\":1}}],[\"执行更新表达式\",{\"1\":{\"821\":1}}],[\"执行循环体\",{\"1\":{\"820\":1}}],[\"执行不同的操作\",{\"1\":{\"487\":1}}],[\"执行传入的函数\",{\"1\":{\"463\":1}}],[\"执行协程任务\",{\"1\":{\"408\":1}}],[\"执行自己的覆写方法的同时\",{\"1\":{\"405\":1}}],[\"执行的一系列钩子函数\",{\"1\":{\"2029\":1}}],[\"执行的时机\",{\"1\":{\"1493\":1}}],[\"执行的\",{\"1\":{\"402\":1}}],[\"执行语句需要是字符串格式\",{\"1\":{\"402\":1}}],[\"执行语句对\",{\"1\":{\"401\":1}}],[\"执行完一个后进入下一次循环\",{\"1\":{\"1556\":1}}],[\"执行完后进入下一次循环\",{\"1\":{\"1180\":1}}],[\"执行完毕后\",{\"1\":{\"1030\":1}}],[\"执行完毕\",{\"1\":{\"1029\":1}}],[\"执行完不返回结果\",{\"1\":{\"402\":1}}],[\"执行完要返回结果\",{\"1\":{\"402\":1}}],[\"执行单元测试代码\",{\"1\":{\"377\":1}}],[\"执行如下命令\",{\"1\":{\"340\":1}}],[\"执行如下命令删除包\",{\"1\":{\"93\":1}}],[\"执行js代码\",{\"1\":{\"328\":1}}],[\"执行next函数\",{\"1\":{\"313\":1}}],[\"执行npm\",{\"1\":{\"148\":2}}],[\"执行对象的\",{\"1\":{\"154\":1}}],[\"执行命令npm\",{\"1\":{\"138\":1}}],[\"执行效率\",{\"1\":{\"116\":1}}],[\"执行\",{\"1\":{\"64\":1,\"252\":1,\"463\":1,\"1093\":1,\"1526\":1,\"1558\":1,\"1897\":3,\"2026\":1,\"2028\":1,\"2030\":1,\"2051\":1,\"2071\":1,\"2078\":1,\"2079\":1,\"2080\":1,\"2081\":1,\"2082\":1,\"2083\":1}}],[\"ywjzzmfkzmfzzmrhyw==\",{\"1\":{\"1648\":1}}],[\"yingside\",{\"1\":{\"1648\":2}}],[\"yield表达式本身的值为\",{\"1\":{\"1186\":1}}],[\"yield\",{\"1\":{\"958\":1,\"1186\":3,\"1187\":2}}],[\"y=3\",{\"1\":{\"1039\":1}}],[\"y=45\",{\"1\":{\"382\":1}}],[\"yaml\",{\"1\":{\"2040\":2}}],[\"yapi\",{\"1\":{\"1594\":4}}],[\"ya\",{\"1\":{\"1201\":3}}],[\"yajing\",{\"1\":{\"828\":4,\"833\":2,\"1201\":5}}],[\"yarnpkg\",{\"1\":{\"84\":1}}],[\"yarn\",{\"0\":{\"83\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1},\"1\":{\"60\":1,\"84\":1,\"85\":4,\"86\":2,\"87\":9,\"88\":3,\"89\":2,\"94\":1}}],[\"y2\",{\"1\":{\"717\":1,\"725\":2,\"726\":2}}],[\"year\",{\"1\":{\"875\":2}}],[\"years\",{\"1\":{\"834\":2}}],[\"yellow\",{\"1\":{\"535\":1,\"636\":1,\"725\":1,\"726\":1,\"1127\":2,\"1257\":2,\"1261\":1,\"1280\":2}}],[\"yes\",{\"1\":{\"64\":1,\"390\":1,\"797\":2,\"1154\":2}}],[\"y1\",{\"1\":{\"472\":1,\"717\":1,\"725\":2,\"726\":2}}],[\"yy\",{\"1\":{\"384\":2}}],[\"yyyy年mm月dd日\",{\"1\":{\"1397\":1}}],[\"yyyy\",{\"1\":{\"893\":2}}],[\"yyy\",{\"1\":{\"307\":2,\"1368\":2,\"1392\":1,\"1854\":1}}],[\"ylju5f4\",{\"1\":{\"176\":1}}],[\"ylju5f3\",{\"1\":{\"176\":1}}],[\"your\",{\"1\":{\"1834\":2,\"1835\":1}}],[\"youarehere\",{\"1\":{\"1102\":3}}],[\"you\",{\"1\":{\"156\":1,\"286\":1,\"1088\":1,\"1105\":8,\"1154\":2,\"1804\":1}}],[\"yuan\",{\"1\":{\"1559\":1}}],[\"yuyinutils\",{\"1\":{\"378\":2}}],[\"yuxi\",{\"1\":{\"156\":1}}],[\"yum\",{\"1\":{\"94\":1}}],[\"y\",{\"1\":{\"64\":1,\"87\":1,\"257\":1,\"382\":10,\"395\":2,\"401\":1,\"402\":5,\"472\":3,\"616\":1,\"617\":2,\"629\":3,\"706\":4,\"711\":4,\"714\":2,\"716\":3,\"718\":2,\"719\":2,\"720\":4,\"722\":2,\"723\":1,\"729\":4,\"733\":1,\"736\":1,\"740\":10,\"745\":3,\"765\":1,\"780\":1,\"884\":1,\"975\":1,\"995\":8,\"1023\":1,\"1039\":7,\"1053\":1,\"1058\":1,\"1087\":2,\"1365\":1,\"1655\":9,\"1673\":3,\"1678\":1,\"1680\":8}}],[\"ymhold\",{\"1\":{\"12\":1}}],[\"直除\",{\"1\":{\"1726\":1}}],[\"直除法\",{\"0\":{\"1721\":1},\"1\":{\"1721\":1}}],[\"直至函数结束\",{\"1\":{\"1028\":1}}],[\"直至找到磁盘根目录\",{\"1\":{\"59\":1}}],[\"直角\",{\"1\":{\"708\":1}}],[\"直到队列为空\",{\"1\":{\"2029\":1}}],[\"直到所有\",{\"1\":{\"1974\":1}}],[\"直到所有元素均排序完毕\",{\"1\":{\"411\":1}}],[\"直到列表中的所有\",{\"1\":{\"1974\":1}}],[\"直到culy为0\",{\"1\":{\"1794\":3}}],[\"直到找到所有匹配的元素\",{\"1\":{\"1236\":1}}],[\"直到找到全局作用域还是没找到\",{\"1\":{\"1019\":1}}],[\"直到找到全局作用域\",{\"1\":{\"938\":1}}],[\"直到遇见yield关键字会交出执行权\",{\"1\":{\"1186\":1}}],[\"直到发现了匹配项\",{\"1\":{\"914\":1}}],[\"直到任务执行完成才会回调\",{\"1\":{\"242\":1}}],[\"直译为巴别塔\",{\"1\":{\"146\":1}}],[\"直接跳转到新的\",{\"1\":{\"2061\":1}}],[\"直接跳到下一个位置\",{\"1\":{\"1966\":1}}],[\"直接修改window\",{\"1\":{\"2029\":1}}],[\"直接修改对应属性的值\",{\"1\":{\"1786\":1}}],[\"直接把\",{\"1\":{\"1874\":2}}],[\"直接把内容输出到\",{\"1\":{\"1341\":1}}],[\"直接越过\",{\"1\":{\"1792\":2}}],[\"直接套用公式r＝x\",{\"1\":{\"1728\":1}}],[\"直接师徒平分再修正\",{\"1\":{\"1723\":1}}],[\"直接访问module的成员变量获取网络层参数\",{\"1\":{\"1670\":1}}],[\"直接实现\",{\"1\":{\"1664\":1}}],[\"直接通过原始数据对象调用\",{\"1\":{\"1930\":1}}],[\"直接通过下标修改数组\",{\"1\":{\"1490\":1}}],[\"直接通过名字跳转\",{\"1\":{\"1460\":1}}],[\"直接通过类名使用图标字体\",{\"1\":{\"623\":1}}],[\"直接编写commit\",{\"1\":{\"1451\":1}}],[\"直接编写在\",{\"1\":{\"937\":1}}],[\"直接读取使用即可\",{\"1\":{\"1376\":1}}],[\"直接读取或将数据数组写入该对象中\",{\"1\":{\"735\":1}}],[\"直接显示动画的最终状态\",{\"1\":{\"1225\":1}}],[\"直接从页面上就能直观的感受到区别\",{\"1\":{\"1123\":1}}],[\"直接从类上面调用的方法\",{\"1\":{\"875\":1}}],[\"直接用于查询某一个节点的上一个或者下一个元素节点\",{\"1\":{\"1112\":1}}],[\"直接在已有的属性名前加$可将其作为变量进行复用\",{\"1\":{\"1330\":1}}],[\"直接在\",{\"0\":{\"1078\":1},\"1\":{\"2020\":1}}],[\"直接赋值\",{\"1\":{\"985\":2}}],[\"直接拿来用即可\",{\"1\":{\"879\":1}}],[\"直接返回一个已经解析的空的\",{\"1\":{\"2065\":1}}],[\"直接返回缓存的数据\",{\"1\":{\"1986\":1}}],[\"直接返回即可\",{\"1\":{\"1977\":1}}],[\"直接返回组件实例上的\",{\"1\":{\"1956\":2}}],[\"直接返回\",{\"1\":{\"1925\":1,\"1993\":1,\"2061\":1}}],[\"直接返回已有的代理对象\",{\"1\":{\"1923\":1}}],[\"直接返回已经有的\",{\"1\":{\"828\":1}}],[\"直接返回对应的值\",{\"1\":{\"1368\":1}}],[\"直接返回第一个操作数\",{\"1\":{\"808\":1}}],[\"直接和一个空字符串拼接\",{\"1\":{\"801\":1}}],[\"直接作用是使得布局视口和视觉视口的大小相同\",{\"1\":{\"649\":1}}],[\"直接去除了浏览器的默认样式\",{\"1\":{\"610\":1}}],[\"直接将内层\",{\"1\":{\"1290\":1}}],[\"直接将\",{\"1\":{\"524\":1,\"2075\":1}}],[\"直接展示页面\",{\"1\":{\"507\":1}}],[\"直接可以从\",{\"1\":{\"401\":1}}],[\"直接node\",{\"1\":{\"332\":1}}],[\"直接向目标资源发送请求\",{\"1\":{\"291\":1}}],[\"直接执行后续的主线程代码\",{\"1\":{\"245\":1}}],[\"直接\",{\"1\":{\"238\":1,\"991\":1,\"1487\":1,\"1889\":2}}],[\"直接使用编译好的\",{\"1\":{\"1954\":1}}],[\"直接使用存在的问题\",{\"1\":{\"1902\":1}}],[\"直接使用model\",{\"1\":{\"1670\":1}}],[\"直接使用缓存即可得到结果\",{\"1\":{\"1536\":1}}],[\"直接使用import\",{\"1\":{\"1484\":1}}],[\"直接使用xxx\",{\"1\":{\"1453\":1}}],[\"直接使用之前的真实\",{\"1\":{\"1394\":1}}],[\"直接使用即可\",{\"1\":{\"1151\":1}}],[\"直接使用clearfix这个类即可\",{\"1\":{\"566\":1}}],[\"直接使用\",{\"1\":{\"238\":1,\"860\":1}}],[\"直接使用一些开放的公共\",{\"1\":{\"12\":1}}],[\"直接下载最新的安装包\",{\"1\":{\"227\":1}}],[\"直接操作\",{\"1\":{\"220\":1}}],[\"直接设置行盒\",{\"1\":{\"596\":1}}],[\"直接设置\",{\"1\":{\"159\":1}}],[\"直接打包图片\",{\"1\":{\"142\":1}}],[\"直接配置\",{\"0\":{\"68\":1}}],[\"直接导出b会错误\",{\"1\":{\"49\":1}}],[\"直接放函数中就行了\",{\"1\":{\"37\":1}}],[\"优势\",{\"0\":{\"1374\":1}}],[\"优势如下\",{\"1\":{\"218\":1,\"1483\":1}}],[\"优先进行处理\",{\"1\":{\"1968\":1}}],[\"优先设置元素的\",{\"1\":{\"1949\":1}}],[\"优先设置dom的props\",{\"1\":{\"1949\":1}}],[\"优先通过原始对象\",{\"1\":{\"1923\":1}}],[\"优先做存在\",{\"1\":{\"1703\":1}}],[\"优先阅读选项中处于\",{\"1\":{\"1699\":1}}],[\"优先\",{\"1\":{\"1486\":1}}],[\"优先匹配前端资源\",{\"1\":{\"1444\":1}}],[\"优先使用局部作用域里面的变量\",{\"1\":{\"786\":1}}],[\"优先级逐渐降低\",{\"1\":{\"920\":1}}],[\"优先级要高\",{\"1\":{\"750\":1}}],[\"优先级\",{\"0\":{\"920\":1},\"1\":{\"524\":1,\"1560\":3}}],[\"优先执行谁\",{\"1\":{\"316\":1}}],[\"优先在当前文件夹下\",{\"1\":{\"59\":1}}],[\"优秀的部分\",{\"1\":{\"223\":1}}],[\"优化思路\",{\"1\":{\"1949\":1}}],[\"优化的成本将超过收益\",{\"1\":{\"1795\":1}}],[\"优化节点的目标就是\",{\"1\":{\"1795\":1}}],[\"优化阶段\",{\"0\":{\"1795\":1},\"1\":{\"1790\":2}}],[\"优化器\",{\"1\":{\"1680\":1,\"1790\":1}}],[\"优化器对象\",{\"1\":{\"1659\":1}}],[\"优化将会停滞很长一段时间\",{\"1\":{\"1658\":1}}],[\"优化算法\",{\"0\":{\"1657\":1,\"1659\":1}}],[\"优化\",{\"0\":{\"150\":1},\"1\":{\"1972\":1}}],[\"优点是有利于\",{\"1\":{\"219\":1}}],[\"优点是前后端分离\",{\"1\":{\"219\":1}}],[\"优点\",{\"1\":{\"46\":2,\"1444\":1,\"1445\":1,\"2099\":1,\"2100\":1,\"2101\":1}}],[\"上添加额外的属性\",{\"1\":{\"2000\":1}}],[\"上读取\",{\"1\":{\"1931\":1}}],[\"上期累计\",{\"1\":{\"1752\":1}}],[\"上月累计量\",{\"1\":{\"1740\":1}}],[\"上山打老虎\",{\"1\":{\"1648\":1}}],[\"上的值\",{\"1\":{\"1923\":1,\"1993\":1}}],[\"上的\",{\"1\":{\"1475\":1}}],[\"上的属性\",{\"1\":{\"1366\":1}}],[\"上的command\",{\"1\":{\"1154\":3}}],[\"上运行\",{\"1\":{\"1324\":1}}],[\"上例编译结果可以看到\",{\"1\":{\"1313\":1}}],[\"上发生并处理\",{\"1\":{\"1141\":1}}],[\"上图中为\",{\"1\":{\"1141\":1}}],[\"上有没有同名方法\",{\"1\":{\"995\":1}}],[\"上方并且释放后要做的事儿\",{\"1\":{\"765\":1}}],[\"上当\",{\"1\":{\"711\":1}}],[\"上占据一个边框的宽度\",{\"1\":{\"706\":1}}],[\"上划线\",{\"1\":{\"625\":1}}],[\"上外边距\",{\"1\":{\"558\":1}}],[\"上下修正\",{\"1\":{\"1723\":1}}],[\"上下文对象\",{\"1\":{\"1493\":1}}],[\"上下文对象调用中的\",{\"0\":{\"992\":1}}],[\"上下文菜单便会展示在当前这一行的左下角\",{\"1\":{\"1163\":1}}],[\"上下文中\",{\"1\":{\"1015\":1}}],[\"上下文的格式\",{\"1\":{\"704\":1}}],[\"上下左右\",{\"1\":{\"544\":1}}],[\"上下\",{\"1\":{\"544\":1}}],[\"上\",{\"1\":{\"544\":2,\"990\":2,\"996\":2,\"1030\":1,\"1158\":1,\"1219\":1,\"1366\":1,\"1368\":1,\"1370\":1,\"1376\":1,\"1518\":1,\"1804\":1,\"1825\":1,\"1845\":1,\"1893\":1,\"1923\":1,\"1954\":1,\"1993\":1}}],[\"上样式\",{\"1\":{\"515\":1}}],[\"上述操作的同时会更改length或受到length的影响\",{\"1\":{\"1993\":1}}],[\"上述\",{\"1\":{\"1865\":1}}],[\"上述需要记忆的百分比\",{\"1\":{\"1718\":1}}],[\"上述场景有一个共同特点\",{\"1\":{\"1644\":1}}],[\"上述图片中的内容\",{\"1\":{\"1446\":1}}],[\"上述指的是第二个白色箭头\",{\"1\":{\"1366\":1}}],[\"上述内容为事件循环的处理机制\",{\"1\":{\"1180\":1}}],[\"上述内容为\",{\"1\":{\"1180\":1}}],[\"上述所说的小点就属于物理像素\",{\"1\":{\"646\":1}}],[\"上述表达式为错误信息\",{\"1\":{\"403\":1}}],[\"上述均需提前引入相信模块\",{\"1\":{\"403\":1}}],[\"上述两个都有\",{\"1\":{\"403\":1}}],[\"上述两种方式的原理都是相同的\",{\"1\":{\"384\":1}}],[\"上一个阶段的输出会成为下一个阶段的输入\",{\"1\":{\"1526\":1}}],[\"上一元\",{\"1\":{\"402\":1}}],[\"上一级目录\",{\"1\":{\"378\":1}}],[\"上传接口\",{\"0\":{\"1592\":1}}],[\"上传文件并监控进度\",{\"0\":{\"1590\":1}}],[\"上传文件\",{\"1\":{\"253\":1}}],[\"上传等操作\",{\"1\":{\"58\":1}}],[\"上面这段代码主要目的是为了处理组件实例被复用的情况下\",{\"1\":{\"2069\":1}}],[\"上面有关\",{\"1\":{\"2068\":1}}],[\"上面有提到\",{\"1\":{\"769\":1,\"1151\":1}}],[\"上面罗列出了完整的\",{\"1\":{\"2064\":1}}],[\"上面随着\",{\"1\":{\"2055\":1}}],[\"上面找到\",{\"1\":{\"2040\":1}}],[\"上面我们学习了如何处理数组中的一些遍历方法\",{\"1\":{\"1925\":1}}],[\"上面实现的只读属于浅只读\",{\"1\":{\"1914\":1}}],[\"上面提到声明式带来的额外性能消耗\",{\"1\":{\"1873\":1}}],[\"上面提到的问题\",{\"1\":{\"117\":1}}],[\"上面描述了客户端缓存的基本概念和过程\",{\"1\":{\"1538\":1}}],[\"上面例子可以看到\",{\"1\":{\"1318\":1}}],[\"上面那段代码用\",{\"1\":{\"1250\":1}}],[\"上面是对这\",{\"1\":{\"1148\":1}}],[\"上面作为高阶函数条件的两个点\",{\"1\":{\"1033\":1}}],[\"上面\",{\"1\":{\"995\":1}}],[\"上面调用\",{\"1\":{\"995\":1}}],[\"上面代码编译时会报错\",{\"1\":{\"1315\":1}}],[\"上面代码的含义就是\",{\"1\":{\"995\":2}}],[\"上面代码的\",{\"1\":{\"995\":1}}],[\"上面代码中\",{\"1\":{\"995\":8}}],[\"上面所介绍的\",{\"1\":{\"941\":1}}],[\"上面的这段代码主要就是根据路由配置中的\",{\"1\":{\"2070\":1}}],[\"上面的源码\",{\"1\":{\"2055\":1}}],[\"上面的方法一般不会用到\",{\"1\":{\"2051\":1}}],[\"上面的过程可以描述为\",{\"1\":{\"1937\":1}}],[\"上面的\",{\"1\":{\"1158\":1,\"2058\":1}}],[\"上面的load事件\",{\"1\":{\"1150\":1}}],[\"上面的例子里面\",{\"1\":{\"1105\":1}}],[\"上面的例子中我们都只接收了一个参数\",{\"1\":{\"945\":1}}],[\"上面的代码的意思搞定之后\",{\"1\":{\"2061\":1}}],[\"上面的代码分别调用了\",{\"1\":{\"2055\":1}}],[\"上面的代码在\",{\"1\":{\"1088\":1}}],[\"上面的代码中\",{\"1\":{\"995\":1}}],[\"上面的代码表示\",{\"1\":{\"957\":1,\"1150\":1}}],[\"上面的date\",{\"1\":{\"875\":1}}],[\"上面的导入方式不奏效\",{\"1\":{\"378\":1}}],[\"上面介绍的for\",{\"1\":{\"846\":1}}],[\"上面两种方式都是通过判断\",{\"1\":{\"487\":1}}],[\"上面三个问题\",{\"1\":{\"23\":1}}],[\"更\",{\"1\":{\"1702\":1}}],[\"更适用于保存和加载模型参数\",{\"1\":{\"1673\":1}}],[\"更具体地说\",{\"1\":{\"1658\":1}}],[\"更注重的是过程\",{\"1\":{\"1498\":1}}],[\"更改forward\",{\"1\":{\"2058\":1}}],[\"更改\",{\"1\":{\"2029\":1,\"2034\":1}}],[\"更改数据时不会重新解析模板\",{\"1\":{\"1396\":1}}],[\"更改主轴方向\",{\"0\":{\"586\":1}}],[\"更易维护和扩展\",{\"1\":{\"1324\":1}}],[\"更严谨的发展方向\",{\"1\":{\"956\":1}}],[\"更安全\",{\"1\":{\"956\":1}}],[\"更合理\",{\"1\":{\"956\":1}}],[\"更加重要\",{\"1\":{\"1690\":1}}],[\"更加直观且易于响应式管理\",{\"1\":{\"2016\":1}}],[\"更加直观\",{\"1\":{\"1374\":1}}],[\"更加优化的一种方式是将<script>标签写在<body>标签的最下面\",{\"1\":{\"1078\":1}}],[\"更加强大\",{\"1\":{\"768\":1}}],[\"更加兼容的做法\",{\"0\":{\"674\":1}}],[\"更换音视频时\",{\"1\":{\"751\":1}}],[\"更好的管理路由\",{\"1\":{\"320\":1}}],[\"更多关于严格模式的内容\",{\"1\":{\"958\":1}}],[\"更多伪类\",{\"1\":{\"521\":1}}],[\"更多从领域模型的视角去思考问题\",{\"1\":{\"218\":1}}],[\"更多的情况\",{\"1\":{\"2049\":1}}],[\"更多的是观察的作用\",{\"1\":{\"1858\":1}}],[\"更多的方法请参看\",{\"1\":{\"1202\":1}}],[\"更多的\",{\"1\":{\"116\":1}}],[\"更多的代码带来了全局变量污染\",{\"1\":{\"23\":1}}],[\"更新以及新进入的路由记录\",{\"1\":{\"2073\":1}}],[\"更新的路由记录\",{\"1\":{\"2073\":1}}],[\"更新新的\",{\"1\":{\"2058\":2}}],[\"更新浏览器的\",{\"1\":{\"2030\":1}}],[\"更新路由updateroute\",{\"1\":{\"2031\":1}}],[\"更新路由\",{\"1\":{\"2029\":1}}],[\"更新路由指的是\",{\"1\":{\"2029\":1}}],[\"更新当前路由\",{\"1\":{\"2029\":1}}],[\"更新计算属性相关的依赖\",{\"1\":{\"1986\":1}}],[\"更新为新节点\",{\"1\":{\"1977\":1}}],[\"更新相同的后置节点\",{\"1\":{\"1968\":1}}],[\"更新相同的前置节点\",{\"1\":{\"1968\":1}}],[\"更新相关索引\",{\"1\":{\"1965\":1}}],[\"更新索引值\",{\"1\":{\"1965\":1}}],[\"更新子节点时共有以下九种可能\",{\"1\":{\"1951\":1}}],[\"更新组件实例的子树\",{\"1\":{\"1954\":1}}],[\"更新组件\",{\"1\":{\"1951\":1}}],[\"更新事件要如何处理\",{\"1\":{\"1949\":1}}],[\"更新旧值\",{\"1\":{\"1897\":1}}],[\"更新旧的oldvnode\",{\"1\":{\"1789\":1}}],[\"更新页面时\",{\"1\":{\"1862\":1}}],[\"更新循环之后执行\",{\"1\":{\"1822\":1}}],[\"更新lastindex\",{\"1\":{\"1793\":1}}],[\"更新节点\",{\"1\":{\"1789\":2}}],[\"更新依赖\",{\"1\":{\"1786\":1}}],[\"更新之后执行\",{\"1\":{\"2069\":1}}],[\"更新之后的所属组件的\",{\"1\":{\"1498\":1}}],[\"更新之前被调用\",{\"1\":{\"1498\":1}}],[\"更新渲染快\",{\"1\":{\"1477\":1}}],[\"更新或移除\",{\"1\":{\"1441\":1}}],[\"更新结束后执行其指定的回调\",{\"1\":{\"1440\":1}}],[\"更新父组件的本地变量\",{\"1\":{\"1358\":1}}],[\"更新代码\",{\"1\":{\"275\":1}}],[\"更新代码后\",{\"1\":{\"122\":1}}],[\"更新一条数据\",{\"1\":{\"202\":1}}],[\"更新个人信息\",{\"1\":{\"186\":1}}],[\"更新文档\",{\"1\":{\"181\":1}}],[\"更新包中的代码\",{\"1\":{\"92\":1}}],[\"更新包\",{\"0\":{\"92\":1}}],[\"更新\",{\"0\":{\"186\":1,\"202\":1,\"1840\":1},\"1\":{\"58\":1,\"1182\":1,\"1394\":2,\"1855\":1,\"1944\":1,\"1951\":2,\"1955\":1,\"2029\":2,\"2031\":1,\"2034\":1,\"2071\":1}}],[\"管理依赖的数组\",{\"1\":{\"1784\":1}}],[\"管理的一个\",{\"1\":{\"1448\":1}}],[\"管理的函数\",{\"1\":{\"1362\":1,\"1383\":1}}],[\"管理模块会将先前传递的回调函数及其数据包装成任务\",{\"1\":{\"1180\":1}}],[\"管理数据\",{\"1\":{\"173\":1}}],[\"管理发布包\",{\"0\":{\"90\":1}}],[\"管理\",{\"1\":{\"58\":1}}],[\"提出宏观内容\",{\"1\":{\"1698\":1}}],[\"提出政策\",{\"1\":{\"1698\":1}}],[\"提出问题\",{\"1\":{\"1698\":1}}],[\"提出了实现多线程的方案\",{\"1\":{\"1174\":1}}],[\"提醒\",{\"1\":{\"1445\":1}}],[\"提到插件那么就得说一下另一种方法$\",{\"1\":{\"1201\":1}}],[\"提高性能\",{\"1\":{\"1804\":1,\"2016\":1}}],[\"提高性能和效率\",{\"1\":{\"1784\":1}}],[\"提高\",{\"1\":{\"1655\":1}}],[\"提高效率\",{\"1\":{\"1232\":1}}],[\"提高编码效率\",{\"1\":{\"1195\":1}}],[\"提高编译器效率\",{\"1\":{\"956\":1,\"959\":1}}],[\"提高开发效率\",{\"1\":{\"1194\":1}}],[\"提升用户的开发体验\",{\"1\":{\"1875\":1}}],[\"提升用户的体验\",{\"1\":{\"641\":1}}],[\"提升开发效率\",{\"1\":{\"58\":1}}],[\"提示用户方法名命名不规范\",{\"1\":{\"1804\":1}}],[\"提示尽管作者认为用户不需要查看该视频\",{\"1\":{\"748\":1}}],[\"提示作者认为用户不需要查看该视频\",{\"1\":{\"748\":1}}],[\"提示实践中优先外部样式表\",{\"1\":{\"513\":1}}],[\"提示\",{\"1\":{\"513\":1,\"521\":1,\"545\":1,\"546\":1,\"556\":1,\"569\":2,\"573\":1,\"574\":1,\"587\":1,\"619\":1,\"649\":1,\"1172\":1,\"1180\":2,\"1327\":1,\"1328\":2,\"1334\":1,\"1335\":1,\"1426\":1,\"1439\":1,\"1451\":1,\"1453\":1,\"1468\":1}}],[\"提示要下载的文件\",{\"1\":{\"307\":1}}],[\"提供思路\",{\"1\":{\"2091\":1}}],[\"提供良好的\",{\"1\":{\"1875\":1}}],[\"提供统一的错误处理接口\",{\"1\":{\"1875\":1}}],[\"提供功能的特性开关\",{\"1\":{\"1875\":1}}],[\"提供数据\",{\"1\":{\"1438\":1,\"1439\":1}}],[\"提供很多\",{\"1\":{\"1226\":1}}],[\"提供只读信息\",{\"1\":{\"771\":1}}],[\"提供可使用的特定信息\",{\"1\":{\"659\":1}}],[\"提供了基本的防御措施\",{\"1\":{\"2088\":1}}],[\"提供了不同的\",{\"1\":{\"2029\":1}}],[\"提供了可供用户访问的公共属性vm\",{\"1\":{\"1864\":2}}],[\"提供了数据集\",{\"1\":{\"1656\":1}}],[\"提供了很多实现动画效果的方法\",{\"1\":{\"1220\":1}}],[\"提供了大量处理事件的方法\",{\"1\":{\"1214\":1}}],[\"提供了大量这种方法来实现文档操作\",{\"1\":{\"1208\":1}}],[\"提供了专门操作\",{\"1\":{\"1206\":1}}],[\"提供了范围表示法\",{\"1\":{\"903\":1}}],[\"提供了易于使用的\",{\"1\":{\"768\":1}}],[\"提供了\",{\"1\":{\"768\":1,\"867\":2,\"1225\":1,\"2026\":1,\"2047\":1}}],[\"提供了一些调试语句\",{\"1\":{\"1251\":1}}],[\"提供了一个可以随时访问的全局\",{\"1\":{\"828\":1}}],[\"提供了一个数据传递对象\",{\"1\":{\"765\":1}}],[\"提供了一种方式\",{\"1\":{\"766\":1}}],[\"提供了两种方法来渲染文本\",{\"1\":{\"729\":1}}],[\"提供了三种方法绘制矩形\",{\"1\":{\"706\":1}}],[\"提供了<figure>和<figcaption>\",{\"1\":{\"666\":1}}],[\"提供了签名功能\",{\"1\":{\"350\":1}}],[\"提供了编译所需的所有\",{\"1\":{\"147\":1}}],[\"提供的相关方法\",{\"1\":{\"2049\":1}}],[\"提供的属性方法\",{\"1\":{\"1205\":1}}],[\"提供的接口轻松的改变元素节点的样式\",{\"1\":{\"1130\":1}}],[\"提供的播放音频的标签\",{\"1\":{\"747\":1}}],[\"提供的播放视频的标签\",{\"1\":{\"747\":1}}],[\"提供的是\",{\"1\":{\"362\":1}}],[\"提供的\",{\"1\":{\"154\":1,\"156\":1,\"216\":1,\"1433\":1,\"1662\":1}}],[\"提供一个命令行工具\",{\"1\":{\"147\":1}}],[\"提供一个简单的\",{\"1\":{\"123\":1}}],[\"提供给开发者使用\",{\"1\":{\"57\":1}}],[\"提取出来的路由记录\",{\"1\":{\"2074\":1}}],[\"提取出合法且有效的信息\",{\"1\":{\"1791\":1}}],[\"提取组件上面的守卫函数\",{\"1\":{\"2074\":1}}],[\"提取组织数据格式\",{\"1\":{\"1792\":1}}],[\"提取要离开\",{\"1\":{\"2073\":1}}],[\"提取成一个混入对象\",{\"1\":{\"1431\":1}}],[\"提取标签中的属性\",{\"1\":{\"1353\":1}}],[\"提取信息\",{\"1\":{\"1353\":1}}],[\"提取\",{\"0\":{\"283\":1,\"284\":1},\"1\":{\"1897\":1,\"2073\":1}}],[\"提取首屏不需要执行部分代码让其异步加载\",{\"1\":{\"122\":1}}],[\"提取多个页面的公共代码\",{\"1\":{\"122\":1}}],[\"提交数据一般使用post\",{\"1\":{\"1632\":1}}],[\"提交\",{\"1\":{\"1632\":1}}],[\"提交给服务器\",{\"1\":{\"2050\":1}}],[\"提交给\",{\"1\":{\"1526\":2}}],[\"提交才会通过\",{\"1\":{\"757\":2}}],[\"提交是不会成功的\",{\"1\":{\"757\":2}}],[\"提交按钮\",{\"1\":{\"670\":1,\"756\":2}}],[\"提交包\",{\"1\":{\"91\":1}}],[\"提交id\",{\"1\":{\"14\":1}}],[\"提交所有已修改的文件\",{\"1\":{\"7\":1}}],[\"代入\",{\"1\":{\"1726\":1}}],[\"代替部分\",{\"1\":{\"1737\":1}}],[\"代替增速\",{\"1\":{\"1737\":1}}],[\"代替用户解析响应结果\",{\"1\":{\"1568\":1}}],[\"代替\",{\"1\":{\"1478\":1,\"1737\":1}}],[\"代号\",{\"1\":{\"1475\":1}}],[\"代时\",{\"1\":{\"1138\":1}}],[\"代理数组\",{\"0\":{\"1915\":1,\"1993\":1}}],[\"代理函数\",{\"1\":{\"1906\":1,\"1907\":1,\"1909\":1}}],[\"代理函数的完善\",{\"0\":{\"1904\":1}}],[\"代理透明\",{\"1\":{\"1903\":1}}],[\"代理到组件属性\",{\"1\":{\"1836\":1}}],[\"代理对象不存在\",{\"1\":{\"1927\":1}}],[\"代理对象可以通过\",{\"1\":{\"1910\":1,\"1990\":1}}],[\"代理对象\",{\"1\":{\"1492\":1,\"1917\":1}}],[\"代理对象=\",{\"1\":{\"1488\":1}}],[\"代理目标的基础路径\",{\"1\":{\"1445\":2}}],[\"代理服务器\",{\"1\":{\"1442\":1}}],[\"代理\",{\"0\":{\"1615\":1,\"1907\":1,\"1926\":1},\"1\":{\"405\":2,\"507\":1,\"1491\":1,\"1615\":1,\"1804\":1,\"1917\":1,\"1936\":1}}],[\"代表右键\",{\"1\":{\"2065\":1}}],[\"代表中键\",{\"1\":{\"2065\":1}}],[\"代表左键\",{\"1\":{\"2065\":1}}],[\"代表该节点是函数声明\",{\"1\":{\"1975\":1}}],[\"代表更新过的节点数量\",{\"1\":{\"1969\":1}}],[\"代表没找到\",{\"1\":{\"1962\":1}}],[\"代表没有过期\",{\"1\":{\"1897\":1,\"1987\":1}}],[\"代表是否在旧的一组子节点中找到可复用的节点\",{\"1\":{\"1962\":1}}],[\"代表是否正在刷新任务队列\",{\"1\":{\"1954\":1}}],[\"代表是否进行追踪\",{\"1\":{\"1925\":1}}],[\"代表是否只读\",{\"1\":{\"1914\":1,\"1992\":1}}],[\"代表是否为浅响应\",{\"1\":{\"1913\":1,\"1991\":1}}],[\"代表是当前页面\",{\"1\":{\"1097\":1}}],[\"代表当前副作用函数是否过期\",{\"1\":{\"1897\":1,\"1987\":1}}],[\"代表遍历地读取过了\",{\"1\":{\"1897\":1}}],[\"代表设置操作成功\",{\"1\":{\"1886\":1}}],[\"代表设定的小数点后的位数\",{\"1\":{\"385\":1}}],[\"代表设定的总位数\",{\"1\":{\"385\":1}}],[\"代表了不同的辅助函数\",{\"1\":{\"1797\":1}}],[\"代表了一组特定功能的源码集合\",{\"1\":{\"57\":1}}],[\"代表我们要对输入中的哪一部分进行关注和处理\",{\"1\":{\"1678\":1}}],[\"代表\",{\"1\":{\"1161\":1}}],[\"代表页面中的所有元素\",{\"1\":{\"1111\":1}}],[\"代表开启严格模式\",{\"1\":{\"959\":1}}],[\"代表要从函数体内部返回给外部的值\",{\"1\":{\"935\":1}}],[\"代表要处理的文件类型\",{\"1\":{\"138\":1}}],[\"代表除回车\",{\"1\":{\"905\":1}}],[\"代表返回项的起始和结束位置\",{\"1\":{\"854\":1}}],[\"代表的是数组的长度\",{\"1\":{\"840\":1}}],[\"代表的就是当前对象\",{\"1\":{\"834\":1}}],[\"代表的字符\",{\"1\":{\"384\":2}}],[\"代表将右边的内容赋值给左边\",{\"1\":{\"805\":1}}],[\"代表输出的长度\",{\"1\":{\"386\":1}}],[\"代表换行\",{\"1\":{\"384\":2}}],[\"代表下一个中间件\",{\"1\":{\"309\":1}}],[\"代表http回应\",{\"1\":{\"309\":1}}],[\"代表http请求\",{\"1\":{\"309\":1}}],[\"代码访问\",{\"1\":{\"2095\":1}}],[\"代码拆解\",{\"0\":{\"2058\":1,\"2061\":1}}],[\"代码描述的\",{\"1\":{\"1975\":1}}],[\"代码运行到这里\",{\"1\":{\"1951\":3}}],[\"代码在执行过程中\",{\"1\":{\"1558\":1}}],[\"代码全部完成后再进行统一计算\",{\"1\":{\"1527\":1}}],[\"代码生成也需要上下文对象\",{\"1\":{\"1979\":1}}],[\"代码生成本质上是字符串拼接的艺术\",{\"1\":{\"1979\":1}}],[\"代码生成器\",{\"1\":{\"1790\":1}}],[\"代码生成阶段\",{\"1\":{\"1368\":1,\"1388\":1,\"1392\":1,\"1407\":1,\"1790\":2}}],[\"代码生成\",{\"0\":{\"1796\":1},\"1\":{\"1353\":1,\"1802\":1}}],[\"代码同样存在\",{\"1\":{\"1334\":1}}],[\"代码块将嵌套在该上下文中\",{\"1\":{\"1314\":1}}],[\"代码将会报错\",{\"1\":{\"1308\":1}}],[\"代码将会把相同的代码合并在一起\",{\"1\":{\"1299\":1}}],[\"代码冗余\",{\"1\":{\"1299\":1}}],[\"代码文件臃肿\",{\"1\":{\"1299\":1}}],[\"代码应该尽可能的放在最后\",{\"1\":{\"1240\":1}}],[\"代码应该尽可能考虑的\",{\"1\":{\"1239\":1}}],[\"代码尽量推迟到\",{\"0\":{\"1240\":1}}],[\"代码写起来比较繁琐\",{\"1\":{\"1208\":1}}],[\"代码写在事件里面\",{\"1\":{\"1081\":1}}],[\"代码分支可能会产生遗留的副作用函数\",{\"1\":{\"1890\":1}}],[\"代码分类\",{\"0\":{\"1177\":1}}],[\"代码分割\",{\"1\":{\"122\":1}}],[\"代码相分离的目的\",{\"1\":{\"1144\":1}}],[\"代码和使用继承基本上是相同的\",{\"1\":{\"1299\":1}}],[\"代码和\",{\"1\":{\"1144\":1}}],[\"代码与\",{\"1\":{\"1143\":1}}],[\"代码来实现页面的跳转大致有下面几种方式\",{\"1\":{\"1094\":1}}],[\"代码是单独的一个\",{\"1\":{\"1079\":1}}],[\"代码是写在<title>标签下面的\",{\"1\":{\"1078\":1}}],[\"代码片段二\",{\"1\":{\"1025\":1}}],[\"代码片段一\",{\"1\":{\"1025\":1}}],[\"代码执行\",{\"1\":{\"1014\":1}}],[\"代码书写靠后的胜出\",{\"1\":{\"525\":1}}],[\"代码放在标签内\",{\"1\":{\"524\":1}}],[\"代码实现\",{\"0\":{\"501\":1}}],[\"代码以字符串的形式提\",{\"1\":{\"402\":1}}],[\"代码示例如下\",{\"1\":{\"1669\":1}}],[\"代码示例\",{\"0\":{\"327\":1},\"1\":{\"244\":1,\"245\":1,\"247\":1,\"250\":1,\"251\":1,\"252\":1,\"254\":1,\"255\":1,\"262\":1,\"264\":1,\"304\":1}}],[\"代码了\",{\"1\":{\"149\":1}}],[\"代码已经成功转换成\",{\"1\":{\"149\":1}}],[\"代码已经成功被编译为了\",{\"1\":{\"148\":1}}],[\"代码中\",{\"1\":{\"1299\":1}}],[\"代码中含有require\",{\"1\":{\"155\":1}}],[\"代码中我们查看到\",{\"1\":{\"149\":1}}],[\"代码中的\",{\"1\":{\"148\":1}}],[\"代码送给\",{\"1\":{\"149\":1}}],[\"代码被编译\",{\"1\":{\"149\":1}}],[\"代码编译成\",{\"1\":{\"149\":1}}],[\"代码编写完成后\",{\"1\":{\"10\":1}}],[\"代码原样输出\",{\"1\":{\"149\":1}}],[\"代码如下\",{\"1\":{\"138\":1,\"765\":1,\"770\":2,\"2047\":1}}],[\"代码校验\",{\"1\":{\"122\":1}}],[\"代码转换\",{\"1\":{\"122\":1}}],[\"代码内容越乱越好\",{\"1\":{\"117\":1}}],[\"代码的执行过程可能会修改当前的\",{\"1\":{\"1526\":1}}],[\"代码的执行效率\",{\"1\":{\"1233\":1}}],[\"代码的执行\",{\"1\":{\"1088\":1}}],[\"代码的方式也是多种多样\",{\"1\":{\"1077\":1}}],[\"代码的可维护性可扩展性\",{\"1\":{\"116\":1}}],[\"代码的数量开始逐渐增长\",{\"1\":{\"23\":1}}],[\"代码\",{\"0\":{\"421\":1,\"424\":1,\"428\":1,\"432\":1,\"436\":1,\"438\":1,\"441\":1,\"443\":1,\"474\":1,\"476\":1,\"496\":1,\"1081\":1,\"1769\":1},\"1\":{\"71\":1,\"122\":1,\"149\":1,\"376\":2,\"402\":1,\"675\":1,\"680\":1,\"937\":1,\"957\":1,\"1013\":1,\"1077\":1,\"1078\":4,\"1079\":1,\"1080\":2,\"1081\":1,\"1168\":1,\"1249\":1,\"1555\":1,\"1556\":1,\"1570\":2,\"1636\":2,\"1797\":1}}],[\"代码正式运行\",{\"1\":{\"71\":1}}],[\"包版本控制文件\",{\"1\":{\"1427\":1}}],[\"包裹\",{\"0\":{\"1212\":1},\"1\":{\"1936\":1}}],[\"包裹为一个函数\",{\"1\":{\"239\":1}}],[\"包裹为一个函数并执行\",{\"1\":{\"239\":1}}],[\"包装后的响应式数据\",{\"1\":{\"1929\":1}}],[\"包装在一个函数里\",{\"1\":{\"1772\":1}}],[\"包装类包含被包装类的实例\",{\"1\":{\"405\":1}}],[\"包装\",{\"1\":{\"405\":1}}],[\"包起来\",{\"1\":{\"389\":1}}],[\"包括协议和端口\",{\"1\":{\"2088\":1}}],[\"包括当前路由器\",{\"1\":{\"2029\":1}}],[\"包括路径\",{\"1\":{\"2028\":1}}],[\"包括接受额外的参数\",{\"1\":{\"2002\":1}}],[\"包括此watcher实例\",{\"1\":{\"1806\":1}}],[\"包括以$开头的供用户使用的外部属性\",{\"1\":{\"1800\":1}}],[\"包括以编程方式的滚动\",{\"1\":{\"557\":1}}],[\"包括初始化组件的配置项和合并配置项\",{\"1\":{\"1799\":1}}],[\"包括常见的政策类考题\",{\"1\":{\"1685\":1}}],[\"包括总分总\",{\"1\":{\"1685\":1}}],[\"包括标签和图像信息\",{\"1\":{\"1655\":1}}],[\"包括一些共享的业务逻辑可以编写在actions中\",{\"1\":{\"1449\":1}}],[\"包括后面提到的v\",{\"1\":{\"1353\":1}}],[\"包括后面我们要介绍的对象\",{\"1\":{\"934\":1}}],[\"包括私有成员\",{\"1\":{\"1318\":1}}],[\"包括来自其他\",{\"1\":{\"1313\":1}}],[\"包括显示或隐藏\",{\"1\":{\"1224\":1}}],[\"包括其他进程的线程\",{\"1\":{\"1180\":1,\"1556\":1}}],[\"包括所有图像\",{\"1\":{\"1150\":1}}],[\"包括空白文本节点\",{\"1\":{\"1112\":4}}],[\"包括内部函数中的变量\",{\"1\":{\"1018\":1}}],[\"包括tostring\",{\"1\":{\"925\":1}}],[\"包括开始位置\",{\"1\":{\"891\":1}}],[\"包括对象\",{\"1\":{\"867\":1,\"931\":1}}],[\"包括对象和函数\",{\"1\":{\"838\":1}}],[\"包括字符串的键名以及\",{\"1\":{\"830\":1}}],[\"包括继承的\",{\"1\":{\"830\":1}}],[\"包括它自己本身\",{\"1\":{\"795\":1}}],[\"包括四个异步读取文件的选项\",{\"1\":{\"773\":1}}],[\"包括设置padding\",{\"1\":{\"543\":1}}],[\"包括下面的padding和margin的属性值可以设置为百分比形式\",{\"1\":{\"543\":1}}],[\"包括参数个数和参数类型\",{\"1\":{\"485\":1}}],[\"包括\",{\"1\":{\"379\":1,\"737\":1,\"749\":1,\"810\":1,\"1124\":1,\"1207\":1,\"1353\":1,\"1491\":1,\"1674\":1,\"1788\":1}}],[\"包括文件\",{\"1\":{\"216\":1}}],[\"包括但不限于如下场景\",{\"1\":{\"293\":1}}],[\"包括但不限于\",{\"1\":{\"122\":1}}],[\"包含的对象一起放入map中\",{\"1\":{\"2019\":1}}],[\"包含模板\",{\"1\":{\"2001\":1}}],[\"包含变量的动态文本节点\",{\"1\":{\"1795\":1}}],[\"包含数据\",{\"1\":{\"1655\":1}}],[\"包含$store\",{\"1\":{\"1453\":2}}],[\"包含一个返回相应\",{\"1\":{\"1446\":1,\"1494\":1,\"1865\":1}}],[\"包含对应插槽名称的\",{\"1\":{\"1446\":1,\"1494\":1,\"1865\":1}}],[\"包含子组件\",{\"1\":{\"1433\":1}}],[\"包含install方法的一个对象\",{\"1\":{\"1432\":1}}],[\"包含以下两种\",{\"1\":{\"1358\":1}}],[\"包含圆括号\",{\"1\":{\"1335\":1}}],[\"包含在这个\",{\"1\":{\"2019\":1}}],[\"包含在嵌套的上下文中\",{\"1\":{\"1314\":1}}],[\"包含在title属性中\",{\"1\":{\"665\":1}}],[\"包含传递给\",{\"1\":{\"1273\":1}}],[\"包含遇到的yield后面表达式的值value和是否执行完毕的标志done\",{\"1\":{\"1186\":1}}],[\"包含绑定\",{\"1\":{\"1177\":1}}],[\"包含窗口自身的控件和滚动条\",{\"1\":{\"1153\":2}}],[\"包含客户端显示能力信息\",{\"1\":{\"1083\":1}}],[\"包含用户访问页面的历史信息\",{\"1\":{\"1083\":1}}],[\"包含当前页面的位置信息\",{\"1\":{\"1083\":1}}],[\"包含浏览器相关信息\",{\"1\":{\"1083\":1}}],[\"包含闭包的函数对象成为垃圾对象\",{\"1\":{\"1025\":1}}],[\"包含内部上下文所有变量对象的列表\",{\"1\":{\"1015\":1}}],[\"包含\",{\"1\":{\"1009\":1,\"1427\":1,\"1493\":2,\"1751\":1}}],[\"包含返回\",{\"1\":{\"856\":1}}],[\"包含着\",{\"1\":{\"737\":1}}],[\"包含关于文本尺寸的信息\",{\"1\":{\"731\":1}}],[\"包含块就是离它\",{\"1\":{\"570\":1}}],[\"包含块就是离当前元素最近的祖先块元素\",{\"1\":{\"570\":1}}],[\"包含块\",{\"1\":{\"570\":1}}],[\"包含块的高度\",{\"1\":{\"574\":1}}],[\"包含块的内容区的宽度\",{\"1\":{\"573\":1}}],[\"包含块的宽度\",{\"1\":{\"540\":1,\"543\":1}}],[\"包含块的概念\",{\"1\":{\"539\":1}}],[\"包含块决定了盒子的排列区域\",{\"1\":{\"539\":1}}],[\"包含依赖的路径\",{\"1\":{\"155\":1}}],[\"包含了当前路由匹配的所有路由记录\",{\"1\":{\"2065\":1}}],[\"包含了具体的一些数据信息\",{\"1\":{\"1788\":1}}],[\"包含了\",{\"1\":{\"123\":1}}],[\"包名为空\",{\"1\":{\"377\":1}}],[\"包名\",{\"1\":{\"64\":1,\"377\":1,\"378\":1}}],[\"包的时候\",{\"1\":{\"68\":1}}],[\"包的锁文件\",{\"1\":{\"66\":1}}],[\"包的入口文件\",{\"1\":{\"64\":1}}],[\"包的描述\",{\"1\":{\"64\":1}}],[\"包的版本\",{\"1\":{\"64\":1}}],[\"包的名字是唯一的\",{\"1\":{\"91\":1}}],[\"包的名字\",{\"1\":{\"64\":1}}],[\"包加载的基本流程\",{\"0\":{\"59\":1}}],[\"包\",{\"1\":{\"57\":1,\"58\":2,\"64\":1,\"67\":1,\"134\":1,\"300\":1,\"349\":1,\"368\":1,\"376\":2}}],[\"包是什么\",{\"0\":{\"57\":1}}],[\"包管理工具是一个通用的概念\",{\"1\":{\"58\":1}}],[\"包管理工具\",{\"0\":{\"55\":1,\"58\":1},\"1\":{\"55\":1,\"62\":1,\"64\":1,\"83\":1,\"84\":1,\"89\":1,\"94\":2},\"2\":{\"96\":1}}],[\"包管理器出现\",{\"1\":{\"25\":1}}],[\"存入\",{\"1\":{\"419\":1}}],[\"存入数组c的第i\",{\"1\":{\"417\":1}}],[\"存入dependecies\",{\"1\":{\"155\":1}}],[\"存储在\",{\"1\":{\"2088\":1}}],[\"存储在客户端\",{\"1\":{\"345\":1}}],[\"存储最终生成的渲染函数代码\",{\"1\":{\"1979\":1}}],[\"存储当前正在被初始化的组件实例\",{\"1\":{\"1954\":1}}],[\"存储事件处理函数被绑定的时间\",{\"1\":{\"1949\":1}}],[\"存储到\",{\"1\":{\"1923\":1,\"1944\":1}}],[\"存储原始对象到代理对象的映射\",{\"1\":{\"1923\":1}}],[\"存储副作用函数的桶\",{\"1\":{\"1886\":1,\"1889\":1}}],[\"存储标签信息\",{\"1\":{\"1835\":1}}],[\"存储传递给子组件的信息componentoptions\",{\"1\":{\"1835\":1}}],[\"存储待处理的表达式\",{\"1\":{\"1794\":1}}],[\"存储着位于\",{\"1\":{\"1792\":1}}],[\"存储剩余还未解析的模板字符串\",{\"1\":{\"1792\":1}}],[\"存储的依赖本身\",{\"1\":{\"1784\":1}}],[\"存储的内容\",{\"1\":{\"1436\":1}}],[\"存储的内容会随着浏览器窗口关闭而消失\",{\"1\":{\"1436\":1}}],[\"存储为文件以备以后使用\",{\"1\":{\"1673\":1}}],[\"存储内容大小一般支持\",{\"1\":{\"1436\":1}}],[\"存储数据对象\",{\"1\":{\"2015\":1}}],[\"存储数据\",{\"1\":{\"1002\":1}}],[\"存储`\",{\"1\":{\"770\":1}}],[\"存储示例\",{\"1\":{\"769\":1}}],[\"存储机制比传统的\",{\"1\":{\"768\":1}}],[\"存储机制的优缺点\",{\"0\":{\"767\":1},\"1\":{\"766\":1}}],[\"存储时间可以是一天\",{\"1\":{\"768\":1}}],[\"存储之前需要使用json\",{\"1\":{\"770\":1}}],[\"存储之前\",{\"1\":{\"766\":1}}],[\"存储\",{\"1\":{\"766\":1,\"767\":1,\"1601\":1}}],[\"存储所有请求的结果\",{\"1\":{\"499\":1}}],[\"存储限制\",{\"1\":{\"356\":1}}],[\"存储和管理数据的\",{\"1\":{\"172\":1}}],[\"存放新进入的路由记录\",{\"1\":{\"2073\":1}}],[\"存放要更新的路由记录\",{\"1\":{\"2073\":1}}],[\"存放要离开的路由记录\",{\"1\":{\"2073\":1}}],[\"存放进去\",{\"1\":{\"2072\":1}}],[\"存放所有store对象的位置\",{\"1\":{\"2016\":1}}],[\"存放组件\",{\"1\":{\"1427\":1}}],[\"存放到排序序列的起始位置\",{\"1\":{\"411\":1}}],[\"存放于服务器中\",{\"1\":{\"356\":1}}],[\"存放ejs模板引擎\",{\"1\":{\"332\":1}}],[\"存放静态资源\",{\"1\":{\"332\":1,\"1427\":1}}],[\"存放下载的包\",{\"1\":{\"66\":1}}],[\"存在响应式的\",{\"1\":{\"2044\":1}}],[\"存在嵌套的情况\",{\"1\":{\"2031\":1}}],[\"存在可复用的节点\",{\"1\":{\"1966\":1}}],[\"存在于arrayinstrumentations\",{\"1\":{\"1923\":1,\"1993\":1}}],[\"存在多个\",{\"1\":{\"1794\":1}}],[\"存在误差是非常正常的\",{\"1\":{\"1723\":1}}],[\"存在跨域问题\",{\"1\":{\"1572\":1}}],[\"存在问题\",{\"1\":{\"1490\":1}}],[\"存在的情况下并且\",{\"1\":{\"2070\":1}}],[\"存在的问题\",{\"0\":{\"1511\":1,\"1964\":1},\"1\":{\"1313\":1}}],[\"存在的位置\",{\"1\":{\"356\":1}}],[\"存在变量提升\",{\"1\":{\"987\":1}}],[\"存在短路现象\",{\"1\":{\"808\":1}}],[\"存在边框的话\",{\"1\":{\"706\":1}}],[\"存在一定的网络问题\",{\"1\":{\"621\":1}}],[\"存在一定的兼容性问题\",{\"1\":{\"564\":1}}],[\"存在两个块级元素\",{\"1\":{\"565\":1}}],[\"存在浅拷贝的现象有\",{\"1\":{\"469\":1}}],[\"存在客户端\",{\"1\":{\"353\":1}}],[\"存在\",{\"1\":{\"52\":1,\"787\":1,\"1789\":1,\"1799\":1,\"1944\":2,\"1951\":1,\"2061\":1,\"2069\":2,\"2073\":1}}],[\"存档\",{\"1\":{\"10\":1}}],[\"号了\",{\"1\":{\"2050\":1}}],[\"号代表求幂\",{\"1\":{\"803\":1}}],[\"号称企业级\",{\"1\":{\"223\":1}}],[\"号称是国外游戏直播的鼻祖\",{\"1\":{\"222\":1}}],[\"号\",{\"1\":{\"52\":1,\"1468\":1,\"2058\":1}}],[\"号导入所有的基本导出\",{\"1\":{\"50\":1}}],[\"注入深度\",{\"1\":{\"2068\":1}}],[\"注入了的话\",{\"1\":{\"2068\":1}}],[\"注入注册操作provide\",{\"1\":{\"2016\":1}}],[\"注入\",{\"0\":{\"2010\":1}}],[\"注入promise内部函数的参数\",{\"1\":{\"1777\":1}}],[\"注重的计算出来的值\",{\"1\":{\"1498\":1}}],[\"注释节点同理\",{\"1\":{\"1951\":1}}],[\"注释节点\",{\"1\":{\"1788\":1,\"1796\":1,\"1797\":1}}],[\"注释可以分为单行注释和多行注释\",{\"1\":{\"777\":1}}],[\"注释\",{\"0\":{\"1255\":1,\"1325\":1},\"1\":{\"657\":3,\"1262\":1,\"1792\":2}}],[\"注释标签\",{\"0\":{\"698\":1},\"1\":{\"328\":1}}],[\"注册之后\",{\"1\":{\"2047\":1}}],[\"注册插件\",{\"1\":{\"2041\":1}}],[\"注册路由实例\",{\"1\":{\"2031\":1}}],[\"注册路由器\",{\"1\":{\"2025\":1}}],[\"注册pinia\",{\"1\":{\"2010\":1}}],[\"注册副作用函数\",{\"0\":{\"1984\":1}}],[\"注册副作用函数时\",{\"1\":{\"1888\":1,\"1891\":1,\"1893\":1,\"1897\":1}}],[\"注册的副作用函数执行时\",{\"1\":{\"1902\":1}}],[\"注册的监听子组件内触发的事件\",{\"1\":{\"1801\":1,\"1802\":1}}],[\"注册一个事件\",{\"1\":{\"1817\":1}}],[\"注册全局指令\",{\"1\":{\"1518\":1}}],[\"注册全局指令等\",{\"1\":{\"1518\":1}}],[\"注册全局组件\",{\"1\":{\"1518\":2}}],[\"注册组件\",{\"0\":{\"1416\":1},\"1\":{\"1416\":1}}],[\"注册过滤器\",{\"1\":{\"1397\":1}}],[\"注册表\",{\"1\":{\"828\":1}}],[\"注册\",{\"1\":{\"355\":1,\"670\":1,\"1977\":1}}],[\"注册页面\",{\"1\":{\"285\":2}}],[\"注册账号\",{\"1\":{\"91\":1}}],[\"注\",{\"1\":{\"52\":1,\"129\":1,\"254\":1,\"764\":1,\"765\":1,\"771\":1,\"772\":1,\"773\":1,\"875\":3,\"911\":1,\"924\":1,\"941\":1,\"945\":1,\"946\":1,\"1087\":2,\"1145\":1,\"1146\":1,\"1149\":2,\"1150\":1,\"1152\":2,\"1154\":1,\"1156\":4,\"1157\":1,\"1160\":1,\"1161\":3,\"1200\":1,\"1201\":1}}],[\"注意仍然是转为了\",{\"1\":{\"2080\":1}}],[\"注意之前计算出来的\",{\"1\":{\"2061\":1}}],[\"注意上面在进行对象合并的时候\",{\"1\":{\"2055\":1}}],[\"注意后面的\",{\"1\":{\"2047\":1}}],[\"注意这是一个函数\",{\"1\":{\"2061\":1}}],[\"注意这一次修改使用的是\",{\"1\":{\"2058\":1}}],[\"注意这个\",{\"1\":{\"2058\":2,\"2061\":1}}],[\"注意这个对象的类型为\",{\"1\":{\"2047\":1}}],[\"注意这里在注入的时候\",{\"1\":{\"2068\":1}}],[\"注意这里第一个参数为什么要用空对象\",{\"1\":{\"1053\":1}}],[\"注意这里\",{\"1\":{\"419\":1}}],[\"注意这里的js语法\",{\"1\":{\"418\":1}}],[\"注意这里的\",{\"1\":{\"49\":1}}],[\"注意它仅仅影响实例本身和插入插槽内容的子组件\",{\"1\":{\"1821\":1}}],[\"注意它和\",{\"1\":{\"1225\":1}}],[\"注意比重趋势的逆运用\",{\"1\":{\"1734\":1}}],[\"注意饼图中各部分的位置关系一般为从\",{\"1\":{\"1731\":1}}],[\"注意力机制\",{\"0\":{\"1678\":1}}],[\"注意我们这里需要使用动态的\",{\"1\":{\"1499\":1}}],[\"注意点\",{\"1\":{\"1486\":1}}],[\"注意此处的this是window\",{\"1\":{\"1407\":1}}],[\"注意特别注意\",{\"1\":{\"1396\":1}}],[\"注意该事件需要通\",{\"1\":{\"1153\":1}}],[\"注意返回的是一个布尔值\",{\"1\":{\"1088\":1}}],[\"注意观察上面的图\",{\"1\":{\"1064\":1}}],[\"注意括号后面的地方第一个字符必须写成\",{\"1\":{\"918\":1}}],[\"注意使用该方法时会改变原来数组的顺序\",{\"1\":{\"855\":1}}],[\"注意下标是从\",{\"1\":{\"843\":1}}],[\"注意以\",{\"1\":{\"756\":2}}],[\"注意以下细节\",{\"1\":{\"50\":1}}],[\"注意表单项的\",{\"1\":{\"754\":1}}],[\"注意是\",{\"1\":{\"744\":1}}],[\"注意过渡时必须是从一个有效数值向另外一个有效数值进行过渡\",{\"1\":{\"641\":1}}],[\"注意要注意所使用字体的版权问题\",{\"1\":{\"621\":1}}],[\"注意事项\",{\"0\":{\"275\":1},\"1\":{\"282\":1,\"316\":1}}],[\"注意必须是一个声明表达式\",{\"1\":{\"49\":1}}],[\"注意\",{\"0\":{\"1390\":1},\"1\":{\"11\":1,\"13\":1,\"47\":1,\"177\":1,\"367\":1,\"527\":1,\"670\":1,\"745\":1,\"752\":1,\"846\":1,\"854\":1,\"877\":2,\"904\":1,\"918\":1,\"920\":1,\"925\":3,\"1054\":1,\"1088\":1,\"1098\":1,\"1199\":1,\"1206\":1,\"1224\":1,\"1225\":1,\"1231\":1,\"1270\":1,\"1286\":1,\"1290\":1,\"1301\":1,\"1314\":1,\"1368\":1,\"1388\":1,\"1425\":1,\"1428\":1,\"1429\":1,\"1437\":1,\"1453\":1,\"1840\":1,\"1902\":1,\"1928\":1,\"1929\":2,\"1974\":4,\"1977\":1,\"2041\":1,\"2047\":1}}],[\"具名插槽\",{\"1\":{\"1446\":2}}],[\"具名符号\",{\"1\":{\"49\":2}}],[\"具有更高的灵活性来适应内部需求\",{\"1\":{\"2002\":1}}],[\"具有自动垃圾回收机制\",{\"1\":{\"1028\":1,\"1031\":1}}],[\"具有相同优先级的运算符按从左至右的顺序求值\",{\"1\":{\"816\":1}}],[\"具有相同属性和方法对象的集合\",{\"1\":{\"405\":1}}],[\"具有较高优先级的运算符先于较低优先级的运算符执行\",{\"1\":{\"816\":1}}],[\"具有事\",{\"1\":{\"404\":1}}],[\"具有模板语法内容的文件\",{\"1\":{\"329\":1}}],[\"具体所做的事情如下\",{\"1\":{\"2065\":1}}],[\"具体过程可以参考一文读懂\",{\"1\":{\"1867\":1}}],[\"具体流程可参考知乎\",{\"1\":{\"1779\":1}}],[\"具体可看下面的面试题目\",{\"1\":{\"1777\":1}}],[\"具体可以参考\",{\"1\":{\"1105\":1}}],[\"具体公式\",{\"1\":{\"1735\":1}}],[\"具体公式为\",{\"1\":{\"1728\":1}}],[\"具体题型\",{\"0\":{\"1694\":1}}],[\"具体说明或铺垫\",{\"1\":{\"1686\":1}}],[\"具体说明如下\",{\"1\":{\"808\":1,\"809\":1}}],[\"具体来说\",{\"1\":{\"1661\":1,\"1667\":1}}],[\"具体在开发中应该选择什么请求方法\",{\"1\":{\"1632\":1}}],[\"具体每一部分写什么内容\",{\"1\":{\"1629\":1}}],[\"具体细节\",{\"1\":{\"1626\":1}}],[\"具体做法是当某些任务发生时\",{\"1\":{\"1558\":1}}],[\"具体写法\",{\"1\":{\"1508\":1}}],[\"具体名字\",{\"1\":{\"1466\":1}}],[\"具体编码\",{\"1\":{\"1446\":1,\"1464\":1,\"1465\":1}}],[\"具体情况取决于浏览器所在的硬件设备\",{\"1\":{\"1101\":1}}],[\"具体如下表\",{\"1\":{\"1087\":1}}],[\"具体内容参考指令篇\",{\"1\":{\"1407\":1}}],[\"具体内容参考浏览器原理系列\",{\"1\":{\"1015\":1}}],[\"具体内容参考css\",{\"1\":{\"605\":1}}],[\"具体原因是因为不同的对象在底层都表现为二进制\",{\"1\":{\"980\":1}}],[\"具体而言包含以下几部分\",{\"1\":{\"1972\":1}}],[\"具体而言\",{\"1\":{\"909\":1,\"1663\":1}}],[\"具体示例如下\",{\"1\":{\"868\":1,\"883\":1,\"951\":1,\"1087\":2,\"1104\":1,\"1112\":2}}],[\"具体规则参考下列堆叠上下文\",{\"1\":{\"575\":1}}],[\"具体哪些样式会被继承请查阅\",{\"1\":{\"527\":1}}],[\"具体读写\",{\"1\":{\"404\":1}}],[\"具体又可以细分为\",{\"1\":{\"382\":1}}],[\"具体的实现\",{\"1\":{\"2062\":1}}],[\"具体的配置方法取决于你的服务器软件\",{\"1\":{\"2050\":1}}],[\"具体的计算方式取决于注意力机制的不同类型\",{\"1\":{\"1678\":1}}],[\"具体的几种场景\",{\"1\":{\"1616\":1}}],[\"具体的有效期设置\",{\"1\":{\"1541\":1}}],[\"具体的中间流程无法通过\",{\"1\":{\"1439\":1}}],[\"具体的语法可以参考他人博客常用的\",{\"1\":{\"1341\":1}}],[\"具体的语法是\",{\"1\":{\"51\":1}}],[\"具体的用法大家可以参考\",{\"1\":{\"1204\":1}}],[\"具体的默认行为取决于浏览器实现\",{\"1\":{\"1153\":1}}],[\"具体的示例如下\",{\"1\":{\"805\":1,\"1112\":1,\"1120\":1,\"1123\":2,\"1143\":1,\"1144\":1,\"1146\":2,\"1150\":2,\"1151\":2,\"1152\":2,\"1153\":2}}],[\"具体的使用可以参考音视频\",{\"1\":{\"668\":1}}],[\"具体的做法是排除不需要再次编译的\",{\"1\":{\"150\":1}}],[\"具体使用参考npx\",{\"1\":{\"78\":1}}],[\"比对前一个\",{\"1\":{\"1789\":1}}],[\"比对下一个\",{\"1\":{\"1789\":1}}],[\"比值趋势\",{\"1\":{\"1753\":2}}],[\"比值倍数=比值增长率+100\",{\"1\":{\"1746\":1}}],[\"比值大小比较\",{\"0\":{\"1737\":1}}],[\"比值差和比重差具体计算的公式相同\",{\"1\":{\"1735\":1}}],[\"比值差\",{\"1\":{\"1735\":1,\"1745\":1}}],[\"比值差不能秒杀\",{\"1\":{\"1735\":1}}],[\"比值增长率\",{\"1\":{\"1728\":1,\"1735\":1,\"1745\":1,\"1746\":1,\"1753\":3}}],[\"比值\",{\"1\":{\"1721\":1,\"1753\":2}}],[\"比重考点\",{\"1\":{\"1753\":1}}],[\"比重问题的整体\",{\"1\":{\"1752\":1}}],[\"比重趋势\",{\"1\":{\"1745\":1,\"1753\":1}}],[\"比重趋势是根据分子分母增速大小来判断本期比重与前期相比变化情况的定性分析方法\",{\"1\":{\"1734\":1}}],[\"比重下降\",{\"1\":{\"1734\":1}}],[\"比重上升\",{\"1\":{\"1734\":1}}],[\"比重差=ba​×\",{\"1\":{\"1735\":1,\"1753\":1}}],[\"比重差=本期比重−前期比重=本期整体前期部分​×\",{\"1\":{\"1735\":1}}],[\"比重差绝对值小于增速差绝对值\",{\"1\":{\"1735\":1}}],[\"比重差秒杀计\",{\"1\":{\"1735\":1}}],[\"比重差\",{\"1\":{\"1731\":1,\"1735\":2,\"1753\":4}}],[\"比重和\",{\"1\":{\"1731\":1}}],[\"比重＝部分\",{\"1\":{\"1731\":1}}],[\"比重\",{\"0\":{\"1730\":1},\"1\":{\"1721\":1,\"1731\":3,\"1737\":1,\"1753\":1}}],[\"比普通函数声明更简洁\",{\"1\":{\"942\":1}}],[\"比起始和结束位置都要低\",{\"1\":{\"920\":1}}],[\"比起之前广泛使用的\",{\"1\":{\"895\":1}}],[\"比起其他编程语言\",{\"1\":{\"874\":1}}],[\"比\",{\"1\":{\"345\":1,\"720\":1,\"1746\":1}}],[\"比较的浅显易懂\",{\"1\":{\"2091\":1}}],[\"比较当前路由的参数对象和目标路由的参数对象是否完全相等\",{\"1\":{\"2065\":1}}],[\"比较当前路由的参数对象和目标路由的参数对象是否相等\",{\"1\":{\"2065\":1}}],[\"比较新值与旧值\",{\"1\":{\"1909\":1}}],[\"比较类考点\",{\"1\":{\"1753\":1}}],[\"比较类\",{\"0\":{\"1736\":1}}],[\"比较晦涩的时候适当跳过\",{\"1\":{\"1687\":1}}],[\"比较规则如下\",{\"1\":{\"1394\":1}}],[\"比较\",{\"1\":{\"1394\":1,\"1737\":3,\"1965\":4}}],[\"比较常用的方法有\",{\"1\":{\"1226\":1}}],[\"比较方式\",{\"0\":{\"983\":1}}],[\"比较值\",{\"1\":{\"976\":1}}],[\"比较字典顺序\",{\"1\":{\"976\":1}}],[\"比较相似的是some\",{\"1\":{\"945\":1}}],[\"比较相邻的元素\",{\"1\":{\"410\":1}}],[\"比较快速的方法还是使用前面介绍过的扩展运算符\",{\"1\":{\"871\":1}}],[\"比较函数接收两个参数\",{\"1\":{\"855\":1}}],[\"比较也是\",{\"1\":{\"813\":1}}],[\"比较特殊\",{\"1\":{\"730\":1,\"980\":1}}],[\"比较特殊性\",{\"0\":{\"524\":1}}],[\"比较源次序\",{\"0\":{\"525\":1}}],[\"比较优先级时\",{\"1\":{\"524\":1}}],[\"比较重要性\",{\"0\":{\"523\":1}}],[\"比较前缀是否相同\",{\"1\":{\"501\":1}}],[\"比较运算符\",{\"0\":{\"166\":1,\"398\":1,\"811\":1,\"976\":1}}],[\"比较模糊\",{\"1\":{\"46\":1}}],[\"比如病毒\",{\"1\":{\"2091\":1}}],[\"比如注册\",{\"1\":{\"2026\":1}}],[\"比如根据\",{\"1\":{\"1998\":1}}],[\"比如最常用的push方法\",{\"1\":{\"1925\":1}}],[\"比如模板中经常会包含\",{\"1\":{\"1890\":1}}],[\"比如聊天\",{\"1\":{\"1649\":1}}],[\"比如下面的聊天场景\",{\"1\":{\"1644\":1}}],[\"比如下面这段代码\",{\"1\":{\"1239\":1}}],[\"比如下面这个例子\",{\"1\":{\"1198\":1}}],[\"比如get表达了客户端想要获取一些东西\",{\"1\":{\"1632\":1}}],[\"比如301\",{\"1\":{\"1570\":1}}],[\"比如计时器\",{\"1\":{\"1558\":1}}],[\"比如变成了app\",{\"1\":{\"1543\":1}}],[\"比如有一个页面资源\",{\"1\":{\"1539\":2}}],[\"比如浏览器\",{\"1\":{\"1533\":1}}],[\"比如display\",{\"1\":{\"1526\":1}}],[\"比如em会变成px\",{\"1\":{\"1526\":1}}],[\"比如red会变成rgb\",{\"1\":{\"1526\":1}}],[\"比如css\",{\"1\":{\"1232\":1}}],[\"比如节点的移动\",{\"1\":{\"1224\":1}}],[\"比如刚才的代码可写成这样\",{\"1\":{\"1208\":1}}],[\"比如往一个\",{\"1\":{\"1208\":1}}],[\"比如创建节点\",{\"1\":{\"1208\":1}}],[\"比如访问和设置属性的\",{\"1\":{\"1205\":1}}],[\"比如只允许粘贴数字\",{\"1\":{\"1162\":1}}],[\"比如给\",{\"1\":{\"1125\":1}}],[\"比如地图服务\",{\"1\":{\"1102\":1}}],[\"比如渲染海量节点\",{\"1\":{\"1038\":1}}],[\"比如foreach\",{\"1\":{\"1033\":1}}],[\"比如把\",{\"1\":{\"916\":1}}],[\"比如垃圾回收机制\",{\"1\":{\"865\":1}}],[\"比如字符串\",{\"1\":{\"826\":1}}],[\"比如字母两侧的大于和小于号\",{\"1\":{\"658\":1}}],[\"比如在新的标签页中打开链接\",{\"1\":{\"2065\":1}}],[\"比如在if块中声明一个变量\",{\"1\":{\"948\":1}}],[\"比如在\",{\"1\":{\"650\":1,\"993\":1}}],[\"比如背景相关的\",{\"1\":{\"527\":1}}],[\"比如ssr\",{\"1\":{\"507\":1}}],[\"比如检查签名是否正确\",{\"1\":{\"368\":1}}],[\"比如用在用户登录上\",{\"1\":{\"363\":1}}],[\"比如用户密码\",{\"1\":{\"350\":1}}],[\"比如放在\",{\"1\":{\"360\":1}}],[\"比如我们使用了一个别人提供的对象\",{\"1\":{\"828\":1}}],[\"比如我们经常使用的默认登录功能\",{\"1\":{\"356\":1}}],[\"比如我们创建一个包名字为\",{\"1\":{\"66\":1}}],[\"比如短信接口\",{\"1\":{\"337\":1}}],[\"比如php\",{\"1\":{\"219\":1}}],[\"比如说做蛋炒饭需要大米\",{\"1\":{\"72\":1}}],[\"比如\",{\"1\":{\"50\":3,\"71\":1,\"94\":1,\"224\":1,\"391\":1,\"407\":1,\"514\":1,\"520\":1,\"535\":1,\"572\":1,\"658\":1,\"748\":1,\"902\":1,\"905\":1,\"911\":1,\"913\":1,\"958\":1,\"995\":3,\"1039\":1,\"1055\":1,\"1194\":1,\"1199\":1,\"1205\":2,\"1209\":2,\"1214\":1,\"1218\":1,\"1220\":1,\"1224\":1,\"1231\":1,\"1232\":3,\"1234\":1,\"1235\":1,\"1266\":3,\"1282\":1,\"1319\":1,\"1394\":1,\"1539\":1,\"1543\":1,\"1556\":1,\"1558\":1,\"1570\":1,\"1615\":1,\"1621\":1,\"1634\":1,\"1639\":1,\"1791\":1,\"1917\":1}}],[\"下添加指定元素\",{\"1\":{\"1946\":1}}],[\"下定义\",{\"1\":{\"1687\":1}}],[\"下述步骤\",{\"1\":{\"1573\":1}}],[\"下将不能运行\",{\"1\":{\"956\":1}}],[\"下可以运行的语句\",{\"1\":{\"956\":1}}],[\"下表按照最高到最低的优先级列出了\",{\"1\":{\"816\":1}}],[\"下表列出了一些特殊的情况\",{\"1\":{\"813\":1}}],[\"下拉框\",{\"1\":{\"756\":1}}],[\"下拉列表\",{\"1\":{\"670\":1}}],[\"下划线\",{\"1\":{\"625\":1,\"904\":2}}],[\"下某个运行起来的\",{\"1\":{\"407\":1}}],[\"下一次就不会进来了\",{\"1\":{\"2047\":1}}],[\"下一次访问直接使用缓存到\",{\"1\":{\"1896\":1}}],[\"下一次页面请求时\",{\"1\":{\"767\":1}}],[\"下一步是\",{\"1\":{\"1526\":1}}],[\"下一个\",{\"1\":{\"518\":1}}],[\"下一级目录\",{\"1\":{\"378\":1}}],[\"下一代\",{\"1\":{\"223\":1}}],[\"下一代的\",{\"1\":{\"223\":1}}],[\"下次发送请求时会自动携带cookie\",{\"1\":{\"354\":1}}],[\"下生效\",{\"1\":{\"345\":1}}],[\"下达到任务队列\",{\"1\":{\"242\":1}}],[\"下\",{\"1\":{\"177\":1,\"544\":2,\"1370\":1,\"1944\":1}}],[\"下图描述了\",{\"1\":{\"1647\":1}}],[\"下图\",{\"1\":{\"158\":1}}],[\"下的路由可以访问到该\",{\"1\":{\"345\":1}}],[\"下的\",{\"1\":{\"149\":1,\"769\":1}}],[\"下面这段代码主要是创建一个表示\",{\"1\":{\"2070\":1}}],[\"下面两行代码主要就是在执行\",{\"1\":{\"2069\":1}}],[\"下面我换种做法\",{\"1\":{\"1239\":1}}],[\"下面我们来举一个例子\",{\"1\":{\"2050\":1}}],[\"下面我们来看看有哪些方法可以提高\",{\"1\":{\"1233\":1}}],[\"下面我们来看看比较常用的筛选方法\",{\"1\":{\"1204\":1}}],[\"下面我们来看看\",{\"1\":{\"1195\":1}}],[\"下面我们来对此进行一个具体的介绍\",{\"1\":{\"1155\":1}}],[\"下面我们将重点介绍鼠标\",{\"1\":{\"1147\":1}}],[\"下面我们尝试使用这种方式为同一个元素节点绑定\",{\"1\":{\"1144\":1}}],[\"下面我们一起来看一下\",{\"1\":{\"1077\":1}}],[\"下面我们就来根据实战例题逐一梳理\",{\"1\":{\"990\":1}}],[\"下面看个例子\",{\"1\":{\"1204\":1}}],[\"下面依次对这\",{\"1\":{\"1161\":1}}],[\"下面将针对这\",{\"1\":{\"1148\":1}}],[\"下面用函数名建立一个属性\",{\"1\":{\"1015\":1}}],[\"下面列举一些较为常见的属性和方法\",{\"1\":{\"1219\":1}}],[\"下面列举一些\",{\"1\":{\"1203\":1}}],[\"下面列举了前端常用的包管理工具\",{\"1\":{\"60\":1}}],[\"下面列出了\",{\"1\":{\"921\":1}}],[\"下面数组的解构也是同理\",{\"1\":{\"832\":1}}],[\"下面\",{\"1\":{\"764\":1,\"765\":1,\"1015\":1}}],[\"下面是基于\",{\"1\":{\"2050\":1}}],[\"下面是整个\",{\"1\":{\"2042\":1}}],[\"下面是state\",{\"1\":{\"1671\":1}}],[\"下面是\",{\"1\":{\"1205\":1,\"2058\":1}}],[\"下面是函数被频繁调用的常见的几个场景\",{\"1\":{\"1034\":1}}],[\"下面是一个简单的示例\",{\"1\":{\"1673\":1}}],[\"下面是一个简单的使用实例\",{\"1\":{\"1665\":1}}],[\"下面是一个示例\",{\"1\":{\"1663\":2}}],[\"下面是一个使用\",{\"1\":{\"1662\":1}}],[\"下面是一个剪贴板事件的基本操作示例\",{\"1\":{\"1160\":1}}],[\"下面是一张决策图\",{\"1\":{\"1616\":1}}],[\"下面是一段示例代码\",{\"1\":{\"1028\":1}}],[\"下面是一些示例\",{\"1\":{\"614\":1}}],[\"下面是具体的代码示例\",{\"1\":{\"980\":1,\"981\":1}}],[\"下面是关于||运算符的一道经典练习题\",{\"1\":{\"809\":1}}],[\"下面是关于\",{\"1\":{\"808\":1,\"2061\":1}}],[\"下面是关于算数运算符的示例\",{\"1\":{\"803\":1}}],[\"下面是常见文件对应的\",{\"1\":{\"294\":1}}],[\"下面是模块化的一些好处\",{\"1\":{\"234\":1}}],[\"下面的跨域请求哪些是简单请求\",{\"1\":{\"1609\":1}}],[\"下面的第一个\",{\"1\":{\"1112\":1}}],[\"下面的第一个子节点\",{\"1\":{\"1112\":1}}],[\"下面的例子演示了在现代浏览器中通过stoppropagation\",{\"1\":{\"1155\":1}}],[\"下面的例子演示了使用reduce\",{\"1\":{\"946\":1}}],[\"下面的例子显示了cleartimeout\",{\"1\":{\"1088\":1}}],[\"下面的代码是无效的\",{\"1\":{\"995\":1}}],[\"下面的\",{\"1\":{\"828\":1,\"2047\":1}}],[\"下面的示例从用户选择的内容中过滤掉了图片\",{\"1\":{\"773\":1}}],[\"下面的场景都用到了文件写入\",{\"1\":{\"248\":1}}],[\"下面的做法是错误的\",{\"1\":{\"49\":1}}],[\"下面介绍几种常用的模块\",{\"1\":{\"241\":1}}],[\"下面创建\",{\"1\":{\"138\":1}}],[\"下载和加载数据集\",{\"1\":{\"1656\":1}}],[\"下载第三方库\",{\"1\":{\"1441\":1}}],[\"下载第三方包\",{\"1\":{\"71\":1}}],[\"下载字体库\",{\"1\":{\"623\":1}}],[\"下载响应\",{\"1\":{\"307\":1}}],[\"下载文件\",{\"1\":{\"248\":1}}],[\"下载之后可以在文件目录下的settings\",{\"1\":{\"228\":1}}],[\"下载地址\",{\"1\":{\"177\":1}}],[\"下载的第三方包\",{\"1\":{\"116\":1}}],[\"下载量\",{\"1\":{\"93\":1}}],[\"下载\",{\"0\":{\"39\":1,\"300\":1},\"1\":{\"228\":1,\"294\":1}}],[\"下载安装ejs\",{\"0\":{\"326\":1}}],[\"下载安装与启动\",{\"0\":{\"177\":1}}],[\"下载安装包\",{\"0\":{\"66\":1}}],[\"下载安装\",{\"0\":{\"33\":1},\"1\":{\"58\":1,\"1591\":1}}],[\"下载安装即可\",{\"1\":{\"2\":1}}],[\"如单点登录\",{\"1\":{\"2088\":1}}],[\"如上述代码光标处所示\",{\"1\":{\"1977\":1}}],[\"如上例所用模板\",{\"1\":{\"1975\":1}}],[\"如concat\",{\"1\":{\"1915\":1}}],[\"如class对应的a\",{\"1\":{\"1792\":1}}],[\"如class\",{\"1\":{\"1792\":1}}],[\"如tag表示节点的标签名\",{\"1\":{\"1788\":1}}],[\"如weexsh\",{\"1\":{\"1782\":1}}],[\"如全连接层或卷积操作\",{\"1\":{\"1678\":1}}],[\"如平均值和标准差\",{\"1\":{\"1665\":1}}],[\"如有\",{\"1\":{\"1498\":1}}],[\"如出现下载缓慢请配置\",{\"1\":{\"1426\":1}}],[\"如需给后添加的属性做响应式\",{\"1\":{\"1396\":1}}],[\"如12\",{\"1\":{\"1264\":1}}],[\"如今认为\",{\"1\":{\"1181\":1}}],[\"如今的\",{\"1\":{\"1153\":1}}],[\"如增加文档内容\",{\"1\":{\"1109\":1}}],[\"如确定作用域\",{\"1\":{\"1013\":1}}],[\"如以下代码中的嵌套关系\",{\"1\":{\"992\":1}}],[\"如设置偏好\",{\"1\":{\"768\":1}}],[\"如跳跃或下载\",{\"1\":{\"752\":1}}],[\"如回放\",{\"1\":{\"752\":1}}],[\"如社交网站\",{\"1\":{\"659\":1}}],[\"如图片\",{\"1\":{\"2088\":1}}],[\"如图所示\",{\"1\":{\"1965\":1,\"1969\":1}}],[\"如图可以看到父组件设置的样式最终显现出来\",{\"1\":{\"1433\":1}}],[\"如图\",{\"1\":{\"507\":1}}],[\"如ajax请求或者通过图片请求来模拟心跳\",{\"1\":{\"505\":1}}],[\"如想永久生效\",{\"1\":{\"379\":1}}],[\"如掘金\",{\"1\":{\"343\":1}}],[\"如何劫持\",{\"1\":{\"2091\":1}}],[\"如何确定卸载节点\",{\"1\":{\"1962\":1}}],[\"如何确定新增节点\",{\"1\":{\"1962\":1}}],[\"如何确定哪些节点可复用\",{\"1\":{\"1962\":1}}],[\"如何判断一个节点是否需要移动\",{\"1\":{\"1962\":1}}],[\"如何正确设置元素的属性\",{\"1\":{\"1949\":1}}],[\"如何代理\",{\"0\":{\"1927\":1}}],[\"如何运输\",{\"1\":{\"1621\":1}}],[\"如何获取王富贵的地址\",{\"1\":{\"1621\":1}}],[\"如何保证可乐不被运输的人偷喝\",{\"1\":{\"1621\":1}}],[\"如何理解\",{\"1\":{\"1558\":1}}],[\"如何调度任务\",{\"1\":{\"1556\":1}}],[\"如何验证呢\",{\"1\":{\"1535\":1}}],[\"如何开启replace模式\",{\"1\":{\"1463\":1}}],[\"如何使用\",{\"1\":{\"1460\":1}}],[\"如何监测数组中的数据\",{\"1\":{\"1396\":1}}],[\"如何监测对象中的数据\",{\"1\":{\"1396\":1}}],[\"如何选择\",{\"0\":{\"1616\":1},\"1\":{\"1361\":1}}],[\"如何排序\",{\"1\":{\"1054\":1}}],[\"如何对子元素进行收缩\",{\"1\":{\"591\":1}}],[\"如何处理高并发的呢\",{\"1\":{\"224\":1}}],[\"如何优雅的让\",{\"1\":{\"71\":1}}],[\"如下所示\",{\"1\":{\"2016\":1,\"2019\":1}}],[\"如下的代码会检测在用户按下c键的同时\",{\"1\":{\"1154\":1}}],[\"如下面代码所示\",{\"1\":{\"1105\":1}}],[\"如下图\",{\"1\":{\"980\":1,\"1105\":1,\"1113\":1}}],[\"如下图所示的节点\",{\"1\":{\"1964\":1}}],[\"如下图所示\",{\"1\":{\"284\":1,\"763\":1,\"769\":1,\"981\":1,\"1966\":1}}],[\"如下\",{\"1\":{\"128\":1,\"129\":1,\"138\":3,\"143\":1,\"148\":4,\"769\":5,\"770\":1,\"780\":1,\"785\":1,\"786\":2,\"789\":2,\"790\":1,\"792\":2,\"797\":1,\"801\":1,\"810\":2,\"812\":2,\"814\":1,\"827\":2,\"828\":4,\"830\":4,\"832\":4,\"833\":1,\"842\":1,\"843\":1,\"844\":2,\"847\":2,\"851\":1,\"855\":1,\"863\":1,\"864\":2,\"865\":1,\"872\":1,\"874\":1,\"876\":2,\"895\":1,\"896\":1,\"906\":1,\"907\":1,\"910\":1,\"911\":1,\"918\":3,\"920\":1,\"934\":2,\"939\":1,\"940\":1,\"941\":1,\"943\":2,\"946\":1,\"950\":1,\"951\":1,\"953\":1,\"993\":1,\"996\":5,\"1015\":1,\"1063\":1,\"1078\":1,\"1084\":1,\"1087\":2,\"1088\":2,\"1092\":1,\"1093\":1,\"1105\":1,\"1137\":1,\"1139\":1,\"1140\":2,\"1144\":1,\"1149\":1,\"1152\":2,\"1153\":1,\"1154\":2,\"1158\":2,\"1160\":1,\"1284\":1}}],[\"如\",{\"1\":{\"49\":1,\"142\":1,\"248\":1,\"345\":1,\"383\":1,\"681\":1,\"725\":1,\"875\":3,\"912\":1,\"1035\":1,\"1036\":1,\"1101\":2,\"1160\":1,\"1209\":1,\"1215\":1,\"1225\":1,\"1237\":1,\"1265\":2,\"1267\":3,\"1274\":1,\"1302\":1,\"1308\":1,\"1356\":1,\"1613\":1,\"1747\":1,\"1791\":1,\"2016\":1,\"2095\":1}}],[\"如果请求不是来自同一域名下的站点\",{\"1\":{\"2088\":1}}],[\"如果攻击成功\",{\"1\":{\"2087\":1}}],[\"如果导航守卫的参数的个数小于\",{\"1\":{\"2075\":1}}],[\"如果导入的路径是个文件夹\",{\"1\":{\"238\":1}}],[\"如果导入其他类型的文件\",{\"1\":{\"238\":1}}],[\"如果数组不存在\",{\"1\":{\"2075\":1}}],[\"如果数据为只读\",{\"1\":{\"1914\":1}}],[\"如果数据已经下载过\",{\"1\":{\"1656\":1}}],[\"如果数据库不存在会自动创建数据库\",{\"1\":{\"179\":1}}],[\"如果前面的所有条件都不满足\",{\"1\":{\"2065\":1}}],[\"如果前面都不满足的话\",{\"1\":{\"819\":1}}],[\"如果点击的元素有\",{\"1\":{\"2065\":1}}],[\"如果事件的\",{\"1\":{\"2065\":2}}],[\"如果事件发生的时间早于事件处理函数绑定的时间\",{\"1\":{\"1949\":1}}],[\"如果未传参则直接放行\",{\"1\":{\"2029\":1}}],[\"如果未发生变化则子组件不会重新渲染\",{\"1\":{\"1955\":1}}],[\"如果确定可以跳转\",{\"1\":{\"2029\":1}}],[\"如果确保粘贴到文本框中的文本中包含某些字符\",{\"1\":{\"1162\":1}}],[\"如果路由配置中有命名路由\",{\"1\":{\"2028\":1}}],[\"如果它是ref或者reactive则说明他是state\",{\"1\":{\"2020\":1}}],[\"如果它的表达式返回\",{\"1\":{\"1286\":1}}],[\"如果已经存在则只需要返回数据\",{\"1\":{\"2019\":1}}],[\"如果被转换的节点不是元素节点\",{\"1\":{\"1978\":1}}],[\"如果被移除了\",{\"1\":{\"1977\":1}}],[\"如果被对象覆盖\",{\"1\":{\"995\":1}}],[\"如果更新过的节点数量大于需要更新的节点数量\",{\"1\":{\"1969\":1}}],[\"如果更新过的节点数量小于等于需要更新的节点数量\",{\"1\":{\"1969\":1}}],[\"如果满足条件\",{\"1\":{\"1966\":1}}],[\"如果满足条件的元素有多个\",{\"1\":{\"1112\":1}}],[\"如果头尾部节点为\",{\"1\":{\"1966\":1}}],[\"如果组件自身没有该数据\",{\"1\":{\"1956\":1}}],[\"如果组件中有子组件\",{\"1\":{\"1862\":1}}],[\"如果发生变化\",{\"1\":{\"1955\":1}}],[\"如果发现代码中有\",{\"1\":{\"50\":1}}],[\"如果也没有旧子节点\",{\"1\":{\"1951\":1}}],[\"如果旧\",{\"1\":{\"1951\":2}}],[\"如果读取的值是\",{\"1\":{\"1938\":1}}],[\"如果读取的属性是一个\",{\"1\":{\"1938\":1}}],[\"如果读取的是\",{\"1\":{\"1927\":1}}],[\"如果迭代产生的值也是可以被代理\",{\"1\":{\"1931\":1}}],[\"如果得到的结果\",{\"1\":{\"1929\":1}}],[\"如果调用\",{\"1\":{\"1928\":1}}],[\"如果调用时没有传递正确的参数\",{\"1\":{\"1252\":1}}],[\"如果找到了相同的路由记录\",{\"1\":{\"2065\":1}}],[\"如果找到了具有相同\",{\"1\":{\"1962\":2}}],[\"如果找到了\",{\"1\":{\"1923\":1,\"1962\":1}}],[\"如果找不到\",{\"1\":{\"1922\":1}}],[\"如果碰到这种\",{\"1\":{\"1921\":1}}],[\"如果碰到文本中包含过滤器那就调用过滤器解析器来解析\",{\"1\":{\"1791\":1}}],[\"如果操作类型是\",{\"1\":{\"1930\":1}}],[\"如果操作的目标对象是数组\",{\"1\":{\"1923\":1,\"1993\":1}}],[\"如果操作目标\",{\"1\":{\"1920\":1,\"1993\":1}}],[\"如果操作目标是数组\",{\"1\":{\"1918\":1}}],[\"如果操作数是\",{\"1\":{\"810\":3}}],[\"如果操作数是任意非\",{\"1\":{\"810\":1}}],[\"如果操作数是数值\",{\"1\":{\"810\":1}}],[\"如果操作数是一个非空字符串\",{\"1\":{\"810\":1}}],[\"如果操作数是一个空字符串\",{\"1\":{\"810\":1}}],[\"如果操作数是一个对象\",{\"1\":{\"810\":1}}],[\"如果代码运行到这里\",{\"1\":{\"1962\":1}}],[\"如果代码中需要\",{\"1\":{\"1493\":1}}],[\"如果代理目标是数组\",{\"1\":{\"1917\":1,\"1993\":1}}],[\"如果改变了默认方法\",{\"1\":{\"1903\":1}}],[\"如果改成如下的形式\",{\"1\":{\"991\":1}}],[\"如果成立就执行回调\",{\"1\":{\"1860\":1}}],[\"如果成员是变量\",{\"1\":{\"1311\":1}}],[\"如果watch的sync为true\",{\"1\":{\"1860\":1}}],[\"如果watch的immediate为true\",{\"1\":{\"1860\":1}}],[\"如果最新值与旧老值不相等\",{\"1\":{\"1855\":1}}],[\"如果最终没找到\",{\"1\":{\"1009\":1}}],[\"如果父级的\",{\"1\":{\"2068\":1}}],[\"如果父级元素和后代元素都绑定了相同的事件\",{\"1\":{\"1155\":1}}],[\"如果父节点也是\",{\"1\":{\"2031\":1}}],[\"如果父组件直接修改这个对象的引用\",{\"1\":{\"1842\":1}}],[\"如果插件是一个函数\",{\"1\":{\"1824\":1}}],[\"如果插件是一个对象\",{\"1\":{\"1824\":1}}],[\"如果异步锁未锁上\",{\"1\":{\"1822\":1}}],[\"如果index不大于lastindex\",{\"1\":{\"1793\":1}}],[\"如果后面还有元素\",{\"1\":{\"1792\":1}}],[\"如果tagname不存在\",{\"1\":{\"1792\":1}}],[\"如果tagname存在\",{\"1\":{\"1792\":1}}],[\"如果tragte是\",{\"1\":{\"1786\":2}}],[\"如果都匹配不上\",{\"1\":{\"1792\":1}}],[\"如果html字符串不是以\",{\"1\":{\"1792\":1}}],[\"如果html字符串是以\",{\"1\":{\"1792\":1}}],[\"如果newchildren比oldchildren先循环完毕\",{\"1\":{\"1789\":1}}],[\"如果新旧\",{\"1\":{\"1955\":1}}],[\"如果新前与旧后节点相同\",{\"1\":{\"1789\":1}}],[\"如果新前与旧前节点相同\",{\"1\":{\"1789\":1}}],[\"如果新后与旧前节点相同\",{\"1\":{\"1789\":1}}],[\"如果新后与旧后节点相同\",{\"1\":{\"1789\":1}}],[\"如果oldchildren比newchildren先循环完毕\",{\"1\":{\"1789\":1}}],[\"如果oldendvnode不存在\",{\"1\":{\"1789\":1}}],[\"如果oldstartvnode不存在\",{\"1\":{\"1789\":1}}],[\"如果object是null\",{\"1\":{\"1769\":1}}],[\"如果既不是元素节点\",{\"1\":{\"1789\":1}}],[\"如果分子很小\",{\"1\":{\"1720\":1}}],[\"如果分子在分母的\",{\"1\":{\"1720\":1}}],[\"如果分数大小约等于\",{\"1\":{\"1720\":1}}],[\"如果选项的最后一位均不同\",{\"1\":{\"1711\":1}}],[\"如果梯度计算启用\",{\"1\":{\"1677\":1}}],[\"如果训练期间一个\",{\"1\":{\"1666\":1}}],[\"如果时间到了还没有数据\",{\"1\":{\"1646\":1}}],[\"如果正在发送\",{\"1\":{\"1582\":1}}],[\"如果嵌套层级超过\",{\"1\":{\"1560\":1}}],[\"如果让渲染主线程等待这些任务的时机达到\",{\"1\":{\"1558\":1}}],[\"如果程序需要同时执行多块代码\",{\"1\":{\"1554\":1}}],[\"如果勾选了disable\",{\"1\":{\"1542\":1}}],[\"如果客户端是其他应用程序\",{\"1\":{\"1534\":1}}],[\"如果缓存过期了\",{\"1\":{\"1533\":1}}],[\"如果服务器的资源有改动\",{\"1\":{\"1533\":1}}],[\"如果键名存在\",{\"1\":{\"1436\":1}}],[\"如果进行了修改\",{\"1\":{\"1429\":1}}],[\"如果结构中还包含输入类的\",{\"1\":{\"1394\":1}}],[\"如果计算属性不被修改\",{\"1\":{\"1376\":1}}],[\"如果计算属性要被修改\",{\"1\":{\"1376\":1}}],[\"如果通过\",{\"1\":{\"1320\":1}}],[\"如果写\",{\"1\":{\"1309\":1,\"1319\":2}}],[\"如果能使用\",{\"1\":{\"1286\":1}}],[\"如果能找到\",{\"1\":{\"384\":1}}],[\"如果列表中包含一个空值\",{\"1\":{\"1275\":1}}],[\"如果整个页面还有很多其他元素在\",{\"1\":{\"1239\":1}}],[\"如果直接将它们写在标签上\",{\"1\":{\"1205\":1}}],[\"如果直接替换\",{\"1\":{\"916\":1}}],[\"如果还没有开始刷新队列\",{\"1\":{\"1954\":1}}],[\"如果还有\",{\"1\":{\"1792\":1}}],[\"如果还要考虑老的浏览器\",{\"1\":{\"1196\":1}}],[\"如果还是移动到当前路径\",{\"1\":{\"254\":1}}],[\"如果还是没找到\",{\"1\":{\"238\":1}}],[\"如果主线程解析到script位置\",{\"1\":{\"1526\":1}}],[\"如果主线程解析到link位置\",{\"1\":{\"1526\":1}}],[\"如果主线程是休眠状态\",{\"1\":{\"1180\":1,\"1556\":1}}],[\"如果主轴是纵向的则该值指定的是就是元素的高度\",{\"1\":{\"591\":1}}],[\"如果主轴是横向的则该值指定的就是元素的宽度\",{\"1\":{\"591\":1}}],[\"如果按住不放\",{\"1\":{\"1149\":1}}],[\"如果单击了页面中的\",{\"1\":{\"1139\":1}}],[\"如果单击了某个按钮\",{\"1\":{\"1138\":1}}],[\"如果单单靠settimeout\",{\"1\":{\"491\":1}}],[\"如果把手指放在圆心上\",{\"1\":{\"1138\":1}}],[\"如果把一个表达式用括号包围起来\",{\"1\":{\"910\":1}}],[\"如果元素节点没有给出的类\",{\"1\":{\"1125\":1}}],[\"如果元素的层级一样\",{\"1\":{\"575\":1}}],[\"如果我现在将\",{\"1\":{\"1112\":1}}],[\"如果我们只是执行一次\",{\"1\":{\"1925\":1,\"1993\":1}}],[\"如果我们同步将一千个项目推入被侦听的数组中\",{\"1\":{\"1498\":1}}],[\"如果我们改成新的模块系统\",{\"1\":{\"1319\":1}}],[\"如果我们想把事件监听器绑定到所有的\",{\"1\":{\"1158\":1}}],[\"如果我们使用style来获取元素节点的属性的时候\",{\"1\":{\"1127\":1}}],[\"如果我们把上面的写法稍作修改\",{\"1\":{\"953\":1}}],[\"如果我们声明函数时使用的是var关键字\",{\"1\":{\"940\":1}}],[\"如果我们在函数里面声明变量时没有添加关键字\",{\"1\":{\"939\":1}}],[\"如果我们要跳过某一个子表达式\",{\"1\":{\"912\":1}}],[\"如果我们的应用程序只会用到这些\",{\"1\":{\"772\":1}}],[\"如果我们需要在网页中书写这些特殊的符号\",{\"1\":{\"658\":1}}],[\"如果我们不希望某个元素因为其他元素浮动的影响而改变其位置\",{\"1\":{\"565\":1}}],[\"如果将所有需要进行的转换操作全部写与traversenode函数中\",{\"1\":{\"1977\":1}}],[\"如果将\",{\"1\":{\"1315\":1}}],[\"如果将上例中的\",{\"1\":{\"1290\":1}}],[\"如果将浏览器最小化然后干其他的工作的话\",{\"1\":{\"1104\":1}}],[\"如果将两个外边距设置为\",{\"1\":{\"556\":1}}],[\"如果他们同意\",{\"1\":{\"1100\":1}}],[\"如果用\",{\"1\":{\"1209\":1}}],[\"如果用户使用中键或右键点击链接\",{\"1\":{\"2065\":1}}],[\"如果用户在点击链接时按住了\",{\"1\":{\"2065\":1}}],[\"如果用户传递的关键字参数\",{\"1\":{\"1273\":1}}],[\"如果用户选择的是允许\",{\"1\":{\"1105\":2}}],[\"如果用户点击的是禁止\",{\"1\":{\"1105\":1}}],[\"如果用户点击的是允许\",{\"1\":{\"1105\":1}}],[\"如果用户正在和其他选手一起参加跑步比赛\",{\"1\":{\"1100\":1}}],[\"如果用户同意\",{\"1\":{\"1099\":1}}],[\"如果用来补全的字符串与原字符串\",{\"1\":{\"893\":1}}],[\"如果遇到了管道中需要用到多参函数的场景\",{\"1\":{\"1040\":1}}],[\"如果遇到和函数名同名的变量\",{\"1\":{\"1015\":1}}],[\"如果包含对这个值引用的变量又取得了另外一个值\",{\"1\":{\"1030\":1}}],[\"如果包含返回\",{\"1\":{\"889\":1}}],[\"如果同一个值又被赋给另一个变量\",{\"1\":{\"1030\":1}}],[\"如果上述函数名已经存在于\",{\"1\":{\"1015\":1}}],[\"如果证明呢\",{\"1\":{\"996\":1}}],[\"如果再进一步\",{\"1\":{\"995\":1}}],[\"如果每一项返回\",{\"1\":{\"945\":1}}],[\"如果该标签是自闭合标签\",{\"1\":{\"1792\":1}}],[\"如果该标签是非自闭合标签\",{\"1\":{\"1792\":1}}],[\"如果该函数只要有一项返回\",{\"1\":{\"945\":1}}],[\"如果该函数每一项都返回\",{\"1\":{\"945\":1}}],[\"如果该值为\",{\"1\":{\"815\":2}}],[\"如果该值为false\",{\"1\":{\"400\":1}}],[\"如果该值为true\",{\"1\":{\"400\":1}}],[\"如果全局作用域中依然没有找到\",{\"1\":{\"938\":1}}],[\"如果函数是在全局执行环境中\",{\"1\":{\"952\":1}}],[\"如果函数体只有一行\",{\"1\":{\"942\":1}}],[\"如果函数体只有一个返回值\",{\"1\":{\"941\":1}}],[\"如果函数中不写\",{\"1\":{\"935\":1}}],[\"如果函数需要的参数\",{\"1\":{\"487\":1}}],[\"如果实参的数量少于形参的数量\",{\"1\":{\"931\":1}}],[\"如果加上关键字反而会报错\",{\"1\":{\"931\":1}}],[\"如果模块中的变量使用了\",{\"1\":{\"1306\":1}}],[\"如果模块路径不是以\",{\"1\":{\"59\":1}}],[\"如果模式中没有捕获组\",{\"1\":{\"925\":1}}],[\"如果指向全局对象\",{\"1\":{\"995\":1}}],[\"如果指定了全局模式\",{\"1\":{\"925\":1}}],[\"如果指的是\",{\"1\":{\"362\":1}}],[\"如果设为\",{\"1\":{\"995\":1}}],[\"如果设定了全局模式g\",{\"1\":{\"923\":1}}],[\"如果设置的属性不存在于对象上\",{\"1\":{\"1910\":1}}],[\"如果设置的属性有多个单词构成\",{\"1\":{\"1206\":1}}],[\"如果设置多个属性\",{\"1\":{\"1205\":1}}],[\"如果设置了lazy修饰符\",{\"1\":{\"1356\":1}}],[\"如果设置了\",{\"1\":{\"668\":1,\"696\":4}}],[\"如果设置为\",{\"1\":{\"345\":1}}],[\"如果像下面这样写\",{\"1\":{\"918\":1}}],[\"如果某个选择项匹配就\",{\"1\":{\"914\":1}}],[\"如果某次计算返回了\",{\"1\":{\"794\":1}}],[\"如果某次计算的结果超出了\",{\"1\":{\"794\":1}}],[\"如果搜索到指定内容\",{\"1\":{\"894\":1}}],[\"如果第一步完成后无法确定答案\",{\"1\":{\"1743\":1}}],[\"如果第一个参数应该位于第二个数的后面\",{\"1\":{\"855\":1}}],[\"如果第一个参数应该位于第二个数的前面\",{\"1\":{\"855\":1}}],[\"如果第一个操作数为假\",{\"1\":{\"809\":1}}],[\"如果第一个操作数为真\",{\"1\":{\"809\":1}}],[\"如果第一个比第二个大\",{\"1\":{\"410\":1}}],[\"如果第二个参数小于第一个\",{\"1\":{\"891\":1}}],[\"如果参数是一个路由路径\",{\"1\":{\"2075\":1}}],[\"如果参数是一个\",{\"1\":{\"2075\":1}}],[\"如果参数是一个数组\",{\"1\":{\"934\":1}}],[\"如果参数是\",{\"1\":{\"2075\":1}}],[\"如果参数为空或\",{\"1\":{\"995\":1}}],[\"如果参数有\",{\"1\":{\"883\":1}}],[\"如果参数只有\",{\"1\":{\"883\":1}}],[\"如果参数位置超出了数组范围\",{\"1\":{\"856\":1}}],[\"如果传给子组件的是基本数据类型\",{\"1\":{\"1841\":1}}],[\"如果传递了相应的实际参数\",{\"1\":{\"934\":1}}],[\"如果传递了一个负值\",{\"1\":{\"891\":1}}],[\"如果传递了一个具体的数值\",{\"1\":{\"591\":1}}],[\"如果传递一个空串作为参数\",{\"1\":{\"894\":1}}],[\"如果传入了definition参数\",{\"1\":{\"1828\":1}}],[\"如果传入的是一个对象类型\",{\"1\":{\"1840\":1}}],[\"如果传入的是字符串参数\",{\"1\":{\"876\":1}}],[\"如果传入的是负数\",{\"1\":{\"854\":1}}],[\"如果传入数字参数\",{\"1\":{\"876\":1}}],[\"如果对象有多个重名属性\",{\"1\":{\"958\":1}}],[\"如果对象的属性使用了外面变量的值\",{\"1\":{\"836\":1}}],[\"如果对象对应的某个属性为\",{\"1\":{\"830\":1}}],[\"如果对象没有valueof\",{\"1\":{\"812\":1}}],[\"如果存在就使用它\",{\"1\":{\"2066\":2}}],[\"如果存在暂停状态并且暂停状态等于之前的\",{\"1\":{\"2061\":1}}],[\"如果存在新子节点未处理\",{\"1\":{\"1966\":1}}],[\"如果存在说明此节点可复用\",{\"1\":{\"1966\":1}}],[\"如果存在我们就不再重新生成reactive对象\",{\"1\":{\"1923\":1}}],[\"如果存在\",{\"1\":{\"828\":1,\"1929\":1,\"2061\":1,\"2073\":1}}],[\"如果存在则导入\",{\"1\":{\"238\":1}}],[\"如果属性不存在\",{\"1\":{\"1906\":1,\"1917\":1}}],[\"如果属性值为空\",{\"1\":{\"1275\":1}}],[\"如果属性名是数字的话\",{\"1\":{\"828\":1}}],[\"如果属性是引用类型\",{\"1\":{\"469\":1}}],[\"如果属性是基本类型\",{\"1\":{\"469\":1}}],[\"如果表达式成立\",{\"1\":{\"820\":1,\"821\":1}}],[\"如果表格中没有使用\",{\"1\":{\"669\":1}}],[\"如果条件不是一个布尔值\",{\"1\":{\"818\":1}}],[\"如果条件的表达式的求值结果是一个非布尔值\",{\"1\":{\"400\":1,\"815\":1}}],[\"如果想在侦听器回调中能访问被\",{\"1\":{\"1498\":1}}],[\"如果想在字符串中包含反引号\",{\"1\":{\"790\":1}}],[\"如果想往原来内容的中间添加\",{\"1\":{\"1208\":1}}],[\"如果想调用\",{\"1\":{\"1199\":1}}],[\"如果想显示固定范围的随机数\",{\"1\":{\"883\":1}}],[\"如果想要在\",{\"1\":{\"1309\":1}}],[\"如果想要在保持之前的\",{\"1\":{\"1112\":1}}],[\"如果想要追加内容到原来的内容之后\",{\"1\":{\"1208\":1}}],[\"如果想要循环数组需要先将它转换为\",{\"1\":{\"1199\":1}}],[\"如果想要按照数值来进行排序\",{\"1\":{\"944\":1}}],[\"如果想要得到秒数\",{\"1\":{\"874\":1}}],[\"如果想要集合在创建时就包含初始值\",{\"1\":{\"860\":1}}],[\"如果想要看见效果\",{\"1\":{\"616\":1}}],[\"如果想要更精确的转化\",{\"1\":{\"395\":1}}],[\"如果变量名和全局作用域里面的变量名冲突\",{\"1\":{\"786\":1}}],[\"如果试图读取一个没有声明的变量的值\",{\"1\":{\"783\":1}}],[\"如果重新声明并且带有赋值\",{\"1\":{\"782\":1}}],[\"如果重复\",{\"1\":{\"458\":1}}],[\"如果声明变量时没有赋予初值\",{\"1\":{\"780\":1}}],[\"如果浏览器支持\",{\"1\":{\"769\":1,\"1099\":1}}],[\"如果浏览器的安全配置为最高级别\",{\"1\":{\"767\":1}}],[\"如果浏览器不知道如何显示或处理文件\",{\"1\":{\"664\":1}}],[\"如果八种验证都通过返回\",{\"1\":{\"759\":1}}],[\"如果需要在局部范围内\",{\"1\":{\"1261\":1}}],[\"如果需要对不同字符串调用同一个\",{\"1\":{\"923\":1}}],[\"如果需要设置允许放置\",{\"1\":{\"764\":1}}],[\"如果需要的话\",{\"1\":{\"748\":1}}],[\"如果需要读取\",{\"1\":{\"37\":1}}],[\"如果图形是已经闭合了的\",{\"1\":{\"711\":1}}],[\"如果图像的长宽比与盒子的长宽比不同\",{\"1\":{\"633\":1}}],[\"如果默认情况下\",{\"1\":{\"648\":1}}],[\"如果只想转发某些成员\",{\"1\":{\"1311\":1}}],[\"如果只匹配长度\",{\"1\":{\"910\":1}}],[\"如果只有一个形参\",{\"1\":{\"941\":1}}],[\"如果只有\",{\"1\":{\"883\":1}}],[\"如果只写一个\",{\"1\":{\"633\":1}}],[\"如果只写一个则第二个默认就是center\",{\"1\":{\"630\":1}}],[\"如果只需要对某一些路由进行功能封装\",{\"1\":{\"315\":1}}],[\"如果背景图片和元素一样大\",{\"1\":{\"628\":1}}],[\"如果背景的图片大于元素\",{\"1\":{\"628\":1}}],[\"如果背景的图片小于元素\",{\"1\":{\"628\":1}}],[\"如果所有的功能都放在服务器端进行处理的话\",{\"1\":{\"1137\":1}}],[\"如果所有的祖先元素都没有开启定位\",{\"1\":{\"570\":1}}],[\"如果所有子选择项都不匹配\",{\"1\":{\"914\":1}}],[\"如果所有属性都需要过渡\",{\"1\":{\"641\":1}}],[\"如果所有项目的\",{\"1\":{\"591\":1}}],[\"如果项目只有一根轴线该属性不起作用\",{\"1\":{\"590\":1}}],[\"如果项目没设置\",{\"1\":{\"589\":1}}],[\"如果有效\",{\"1\":{\"2065\":1}}],[\"如果有则把事件绑定到\",{\"1\":{\"2032\":1}}],[\"如果有子节点\",{\"1\":{\"1976\":1}}],[\"如果有前一个\",{\"1\":{\"1962\":1}}],[\"如果有content\",{\"1\":{\"1607\":1}}],[\"如果有重名\",{\"1\":{\"1486\":1}}],[\"如果有该类\",{\"1\":{\"1125\":1}}],[\"如果有一个对象数据\",{\"1\":{\"1504\":2}}],[\"如果有一个操作数是\",{\"1\":{\"813\":1}}],[\"如果有一个操作数为字符串时\",{\"1\":{\"801\":1}}],[\"如果有一项返回\",{\"1\":{\"945\":1}}],[\"如果有就直接使用\",{\"1\":{\"938\":1}}],[\"如果有可能则需要对参数进行\",{\"1\":{\"931\":1}}],[\"如果有解构的值传过来的话\",{\"1\":{\"832\":1}}],[\"如果有返回\",{\"1\":{\"830\":1}}],[\"如果有\",{\"1\":{\"574\":1,\"883\":1,\"1180\":1,\"1535\":1,\"1556\":1,\"2002\":1,\"2058\":2}}],[\"如果有的话\",{\"1\":{\"520\":1}}],[\"如果浮动元素的上边是一个没有浮动的块元素\",{\"1\":{\"561\":1}}],[\"如果相邻的外边距都是负值\",{\"1\":{\"558\":1}}],[\"如果相邻的外边距一正一负\",{\"1\":{\"558\":1}}],[\"如果相加结果使等式不成立\",{\"1\":{\"553\":1}}],[\"如果子元素的大小超过了父元素\",{\"1\":{\"557\":1}}],[\"如果宽度和其他属性设置为\",{\"1\":{\"556\":1}}],[\"如果这几个属性返回\",{\"1\":{\"1154\":1}}],[\"如果这个布尔值为\",{\"1\":{\"1145\":1}}],[\"如果这个计算结果与原cookie中的签名信息不一样\",{\"1\":{\"350\":1}}],[\"如果这些元数据不存在则返回\",{\"1\":{\"1101\":1}}],[\"如果这行语句不在第一行\",{\"1\":{\"957\":1}}],[\"如果这七个值中没有为\",{\"1\":{\"554\":1}}],[\"如果两个节点相同\",{\"1\":{\"1789\":1}}],[\"如果两个参数相等\",{\"1\":{\"855\":1}}],[\"如果两个数都是字符串\",{\"1\":{\"812\":1}}],[\"如果两个数都是数值\",{\"1\":{\"812\":1}}],[\"如果两个垂直相邻的元素都设置了外边距并且两个外边距相接触\",{\"1\":{\"552\":1}}],[\"如果两端都采用\",{\"1\":{\"222\":1}}],[\"如果空间不够\",{\"1\":{\"552\":1}}],[\"如果一致的话\",{\"1\":{\"2071\":1}}],[\"如果一\",{\"1\":{\"1962\":1}}],[\"如果一个函数接收原始值作为参数\",{\"1\":{\"1935\":1}}],[\"如果一个副作用函数存在调度器\",{\"1\":{\"1893\":1,\"1985\":1}}],[\"如果一个数据是只读的\",{\"1\":{\"1914\":1}}],[\"如果一个数据集包含图像和相应的标签\",{\"1\":{\"1655\":1}}],[\"如果一个数是布尔值\",{\"1\":{\"812\":1}}],[\"如果一个子组件使用的是选项式\",{\"1\":{\"1499\":1}}],[\"如果一个文件转发多个文件中的成员\",{\"1\":{\"1310\":1}}],[\"如果一个\",{\"1\":{\"1290\":1}}],[\"如果一个变量表示的列表需要修改\",{\"1\":{\"1272\":1}}],[\"如果一个页面中含有大量的图片\",{\"1\":{\"1200\":1}}],[\"如果一个字面量对象里面包含了方法\",{\"1\":{\"896\":1}}],[\"如果一个对象的属性对应的是一个函数\",{\"1\":{\"828\":1}}],[\"如果一个键映射的是一个非函数的值\",{\"1\":{\"826\":1}}],[\"如果一个操作数是对象\",{\"1\":{\"812\":1}}],[\"如果一个操作数是数值\",{\"1\":{\"812\":1}}],[\"如果一行中不能容纳下所有的行内元素\",{\"1\":{\"540\":1}}],[\"如果一直找到该模块的磁盘根路径都没有找到\",{\"1\":{\"59\":1}}],[\"如果颜色两位两位重复可以进行简写\",{\"1\":{\"535\":1}}],[\"如果优先级计算后相同\",{\"1\":{\"524\":1}}],[\"如果超过预定时间没有收到响应\",{\"1\":{\"505\":2}}],[\"如果循环超过设定的时间仍未完成\",{\"1\":{\"504\":1}}],[\"如果不合法\",{\"1\":{\"2088\":1}}],[\"如果不属于以上四种情况\",{\"1\":{\"1789\":1}}],[\"如果不需要标签\",{\"1\":{\"1655\":1}}],[\"如果不是函数\",{\"1\":{\"2070\":1}}],[\"如果不是数组\",{\"1\":{\"2045\":1}}],[\"如果不是根节点\",{\"1\":{\"1978\":1}}],[\"如果不是文本节点\",{\"1\":{\"1978\":1}}],[\"如果不是动态文本\",{\"1\":{\"1791\":1}}],[\"如果不是\",{\"1\":{\"1535\":1}}],[\"如果不是放在最后\",{\"1\":{\"933\":1}}],[\"如果不同则直接判定不同\",{\"1\":{\"1394\":1}}],[\"如果不同模式的代码文件合并成一个文件\",{\"1\":{\"957\":1}}],[\"如果不想将模块中的成员暴露给其他文件访问\",{\"1\":{\"1305\":1}}],[\"如果不调用已声明的占位符\",{\"1\":{\"1299\":1}}],[\"如果不加以控制\",{\"1\":{\"1034\":1}}],[\"如果不使用new关键字\",{\"1\":{\"876\":1}}],[\"如果不存在相同的路由记录\",{\"1\":{\"2073\":2}}],[\"如果不存在就检查\",{\"1\":{\"2066\":1}}],[\"如果不存在之前的状态对象\",{\"1\":{\"2061\":1}}],[\"如果不存在对数据的逆序添加\",{\"1\":{\"1394\":1}}],[\"如果不存在\",{\"1\":{\"828\":1,\"1686\":1,\"1889\":1,\"1929\":2,\"2061\":1}}],[\"如果不书写\",{\"1\":{\"819\":1}}],[\"如果不能转换为数字\",{\"1\":{\"812\":1}}],[\"如果不写\",{\"1\":{\"666\":1}}],[\"如果不写使用默认值\",{\"1\":{\"621\":1}}],[\"如果不设置偏移量元素的位置不会发生变化\",{\"1\":{\"570\":1}}],[\"如果不设置偏移量元素不会发生任何的变化\",{\"1\":{\"569\":1}}],[\"如果不相同\",{\"1\":{\"487\":1}}],[\"如果不解决这些问题\",{\"1\":{\"117\":1}}],[\"如果不解决这个问题\",{\"1\":{\"24\":1}}],[\"如果值是\",{\"1\":{\"1938\":1}}],[\"如果值是数组\",{\"1\":{\"452\":1}}],[\"如果值没有发生变化\",{\"1\":{\"1909\":1}}],[\"如果值的单位是\",{\"1\":{\"1224\":1}}],[\"如果值为数组通过\",{\"1\":{\"2045\":1}}],[\"如果值为二进制数据\",{\"1\":{\"345\":1}}],[\"如果值为\",{\"1\":{\"345\":1}}],[\"如果返回值是对象\",{\"1\":{\"2001\":1}}],[\"如果返回值是函数\",{\"1\":{\"2001\":1}}],[\"如果返回\",{\"1\":{\"402\":1}}],[\"如果字符串中含有该内容\",{\"1\":{\"890\":1}}],[\"如果字符串不能被解析为日期\",{\"1\":{\"876\":1}}],[\"如果字符串不足这个长度\",{\"1\":{\"386\":1}}],[\"如果字符串无法识别\",{\"1\":{\"875\":1}}],[\"如果字符串的长度大于\",{\"1\":{\"386\":1}}],[\"如果隔行了\",{\"1\":{\"383\":1}}],[\"如果没设置\",{\"1\":{\"696\":2}}],[\"如果没找到就返回\",{\"1\":{\"856\":1}}],[\"如果没找到\",{\"1\":{\"379\":1}}],[\"如果没有权威机构对证书进行签名\",{\"1\":{\"2091\":1}}],[\"如果没有插槽\",{\"1\":{\"2070\":1}}],[\"如果没有父级注入\",{\"1\":{\"2068\":1}}],[\"如果没有手动指定\",{\"1\":{\"2068\":1}}],[\"如果没有效\",{\"1\":{\"2065\":1}}],[\"如果没有进入上面的\",{\"1\":{\"2061\":1}}],[\"如果没有传递\",{\"1\":{\"2054\":1}}],[\"如果没有传入definition参数\",{\"1\":{\"1828\":1}}],[\"如果没有通过这两个方法进行创建的话\",{\"1\":{\"2048\":1}}],[\"如果没有找到\",{\"1\":{\"1966\":1,\"2070\":1}}],[\"如果没有找到具有相同\",{\"1\":{\"1962\":1}}],[\"如果没有找到指定的内容\",{\"1\":{\"890\":1}}],[\"如果没有前一个\",{\"1\":{\"1962\":1}}],[\"如果没有变化\",{\"1\":{\"1955\":1}}],[\"如果没有提供回调\",{\"1\":{\"1822\":1}}],[\"如果没有了\",{\"1\":{\"1792\":1}}],[\"如果没有数据就会\",{\"1\":{\"1646\":1}}],[\"如果没有安装\",{\"1\":{\"1591\":1}}],[\"如果没有及时释放\",{\"1\":{\"1027\":1}}],[\"如果没有参数\",{\"1\":{\"941\":1}}],[\"如果没有则向上一级作用域中寻找\",{\"1\":{\"938\":1}}],[\"如果没有出现括号\",{\"1\":{\"914\":1}}],[\"如果没有出错\",{\"1\":{\"191\":1,\"212\":1}}],[\"如果没有搜索到返回\",{\"1\":{\"894\":1}}],[\"如果没有保存状态\",{\"1\":{\"711\":1}}],[\"如果没有\",{\"1\":{\"696\":1,\"1009\":1,\"1180\":1,\"1332\":1,\"1535\":1,\"1556\":1}}],[\"如果没有设置父元素的定位属性\",{\"1\":{\"1207\":1}}],[\"如果没有设置\",{\"1\":{\"696\":1}}],[\"如果没有一个好的工具解决这些问题\",{\"1\":{\"116\":1}}],[\"如果当前路由的索引位置大于\",{\"1\":{\"2065\":1}}],[\"如果当前组件实例存在就注入整个piniastore\",{\"1\":{\"2019\":1}}],[\"如果当前标签节点有多个子节点\",{\"1\":{\"1978\":1}}],[\"如果当前标签节点只有一个子节点\",{\"1\":{\"1978\":1}}],[\"如果当前\",{\"1\":{\"1974\":2}}],[\"如果当前找到的节点在旧\",{\"1\":{\"1962\":2}}],[\"如果当前节点不是静态根节点\",{\"1\":{\"1795\":1}}],[\"如果当前元素没有设置该样式\",{\"1\":{\"1128\":1}}],[\"如果当前模块里已经包含其中某个函数\",{\"1\":{\"378\":1}}],[\"如果当前这个模块依赖另一个模块怎么办\",{\"1\":{\"29\":1}}],[\"如果修改失败\",{\"1\":{\"372\":1}}],[\"如果永远只是自己的网站\",{\"1\":{\"362\":1}}],[\"如果你已经在银行应用程序中登录\",{\"1\":{\"2087\":1}}],[\"如果你没有配置\",{\"1\":{\"2053\":1}}],[\"如果你使用的是\",{\"1\":{\"2050\":1}}],[\"如果你觉得应该进行限制\",{\"1\":{\"1595\":1}}],[\"如果你是一个前端工程师\",{\"1\":{\"1543\":1}}],[\"如果你断开网络\",{\"1\":{\"1536\":1}}],[\"如果你发现自己想一次配置很多变量\",{\"1\":{\"1307\":1}}],[\"如果你的参数不是一个\",{\"1\":{\"2047\":1}}],[\"如果你的参数是一个响应式的值\",{\"1\":{\"2047\":1}}],[\"如果你的代码块不需要传任何变量参数\",{\"1\":{\"1299\":1}}],[\"如果你的代码块中涉及到变量\",{\"1\":{\"1299\":1}}],[\"如果你的用户数据可能需要和第三方共享\",{\"1\":{\"362\":1}}],[\"如果你需要实现有状态的会话\",{\"1\":{\"362\":1}}],[\"如果你有单独的后端开发服务器\",{\"1\":{\"134\":1}}],[\"如果验证成功\",{\"1\":{\"360\":1}}],[\"如果给某个\",{\"1\":{\"345\":1}}],[\"如果为空\",{\"1\":{\"2069\":2}}],[\"如果为组件传递的\",{\"1\":{\"1954\":1}}],[\"如果为false则不用移动\",{\"1\":{\"1789\":1}}],[\"如果为true表示需要移动\",{\"1\":{\"1789\":1}}],[\"如果为\",{\"1\":{\"345\":1,\"1145\":1,\"1655\":1}}],[\"如果为负数\",{\"1\":{\"345\":1}}],[\"如果为整数\",{\"1\":{\"345\":1}}],[\"如果静态资源与路由规则同时匹配\",{\"1\":{\"316\":1}}],[\"如果public目录下有index\",{\"1\":{\"316\":1}}],[\"如果访问的内容经常变化\",{\"1\":{\"316\":1}}],[\"如果访问网站的时候\",{\"1\":{\"282\":1}}],[\"如果出现错误\",{\"1\":{\"294\":1}}],[\"如果端口被其他程序占用\",{\"1\":{\"275\":1}}],[\"如果端口号是默认端口号\",{\"1\":{\"191\":1}}],[\"如果文件存在\",{\"1\":{\"245\":1}}],[\"如果文件不存在\",{\"1\":{\"245\":1}}],[\"如果是数组\",{\"1\":{\"2081\":1}}],[\"如果是数字的字符串和数字进行比较\",{\"1\":{\"813\":1}}],[\"如果是回调函数\",{\"1\":{\"2075\":1}}],[\"如果是函数\",{\"1\":{\"2070\":1}}],[\"如果是的话\",{\"1\":{\"2070\":1}}],[\"如果是最顶层那么这个值为\",{\"1\":{\"2068\":1}}],[\"如果是第一次\",{\"1\":{\"2057\":1}}],[\"如果是第一次启动\",{\"1\":{\"2047\":1}}],[\"如果是第一种情况\",{\"1\":{\"1537\":1}}],[\"如果是setup函数\",{\"1\":{\"2020\":1}}],[\"如果是splice方法\",{\"1\":{\"1785\":1}}],[\"如果是子组件\",{\"1\":{\"2016\":1}}],[\"如果是根组件\",{\"1\":{\"2016\":1}}],[\"如果是只读的\",{\"1\":{\"1914\":2}}],[\"如果是浅响应\",{\"1\":{\"1913\":1,\"1991\":1}}],[\"如果是动态文本\",{\"1\":{\"1791\":1}}],[\"如果是push或unshift方法\",{\"1\":{\"1785\":1}}],[\"如果是事件委托\",{\"1\":{\"1219\":1}}],[\"如果是获取属性\",{\"1\":{\"1205\":1}}],[\"如果是直接在\",{\"1\":{\"1078\":1}}],[\"如果是继承而来的或者根本没有这个属性\",{\"1\":{\"1067\":1}}],[\"如果是本身的\",{\"1\":{\"1067\":1}}],[\"如果是返回\",{\"1\":{\"1065\":1}}],[\"如果是像这样自动形成的闭包\",{\"1\":{\"1023\":1}}],[\"如果是要进行降序排列\",{\"1\":{\"855\":1}}],[\"如果是要为已有的\",{\"1\":{\"128\":1}}],[\"如果是使用函数表达式来进行的函数声明\",{\"1\":{\"940\":1}}],[\"如果是使用的其他开发者的代码库\",{\"1\":{\"835\":1}}],[\"如果是使用var关键字来声明的变量\",{\"1\":{\"782\":1}}],[\"如果是删除的是属性\",{\"1\":{\"829\":1}}],[\"如果是通过symbol\",{\"1\":{\"828\":1}}],[\"如果是字符串和数字进行比较\",{\"1\":{\"812\":1}}],[\"如果是后置\",{\"1\":{\"806\":1}}],[\"如果是前置\",{\"1\":{\"806\":1}}],[\"如果是无穷大数\",{\"1\":{\"794\":1}}],[\"如果是在严格模式中\",{\"1\":{\"782\":1}}],[\"如果是一个整数的话\",{\"1\":{\"621\":1}}],[\"如果是就调用old\",{\"1\":{\"487\":1}}],[\"如果是\",{\"1\":{\"397\":1,\"1194\":1,\"1219\":2,\"1530\":1,\"1535\":1,\"1897\":1,\"1917\":1,\"1993\":1}}],[\"如果是个人项目\",{\"1\":{\"89\":1}}],[\"如果\",{\"1\":{\"69\":1,\"150\":1,\"238\":1,\"403\":1,\"574\":1,\"935\":1,\"942\":1,\"980\":1,\"995\":3,\"1030\":1,\"1053\":1,\"1093\":1,\"1127\":1,\"1290\":1,\"1308\":1,\"1428\":1,\"1436\":1,\"1655\":1,\"1792\":2,\"1799\":1,\"1878\":2,\"1889\":2,\"1892\":2,\"1897\":1,\"1921\":1,\"1929\":1,\"1931\":1,\"1948\":1,\"1949\":1,\"1954\":2,\"1961\":2,\"1962\":1,\"2035\":1,\"2051\":1,\"2054\":1,\"2058\":1,\"2065\":3,\"2068\":1,\"2073\":1}}],[\"如果本地安装的包带有\",{\"1\":{\"66\":1}}],[\"如果本地的版本低于远程库\",{\"1\":{\"13\":1}}],[\"如果显示版本号说明安装成功\",{\"1\":{\"62\":1}}],[\"如果在piniastore的map中没有对应的id\",{\"1\":{\"2019\":1}}],[\"如果在oldchildren里找到了当前循环的newchildren里的子节点\",{\"1\":{\"1789\":1}}],[\"如果在oldchildren里找不到当前循环的newchildren里的子节点\",{\"1\":{\"1789\":1}}],[\"如果在不同选择器调用占位符\",{\"1\":{\"1299\":1}}],[\"如果在样式文件中调用同一个混合宏\",{\"1\":{\"1299\":1}}],[\"如果在第一次获取时将它赋给一个变量缓存下来\",{\"1\":{\"1238\":1}}],[\"如果在主线程执行了一个长时间的操作\",{\"1\":{\"1175\":1}}],[\"如果在规定时间内又触发了事件\",{\"1\":{\"1035\":1}}],[\"如果在另一个函数中被调用\",{\"1\":{\"952\":1}}],[\"如果在数组中找到一个元素使得提供的函数返回\",{\"1\":{\"857\":1}}],[\"如果在\",{\"1\":{\"821\":1,\"918\":1,\"1034\":1}}],[\"如果在局部作用域里面声明变量时没有书写关键字\",{\"1\":{\"786\":1}}],[\"如果在加载第三方模块的文件的同级目录没有找到node\",{\"1\":{\"59\":1}}],[\"如果在要加载的第三方包中没有找到package\",{\"1\":{\"59\":1}}],[\"如果使用简单\",{\"1\":{\"1964\":1}}],[\"如果使用同步的方式\",{\"1\":{\"1558\":1}}],[\"如果使用菜单键\",{\"1\":{\"1163\":1}}],[\"如果使用的是以前的\",{\"1\":{\"1112\":1}}],[\"如果使用的是test\",{\"1\":{\"911\":1}}],[\"如果使用的格式都得不到浏览器的支持\",{\"1\":{\"747\":1}}],[\"如果使用new关键字\",{\"1\":{\"876\":1}}],[\"如果使用标准的日期时间字符串格式规则的字符串中\",{\"1\":{\"875\":1}}],[\"如果使用symbol\",{\"1\":{\"828\":1}}],[\"如果使用类的实例来修改类变量\",{\"1\":{\"405\":1}}],[\"如果使用\",{\"1\":{\"52\":1,\"995\":1,\"2044\":1}}],[\"如果希望多文件共同访问\",{\"1\":{\"1302\":1}}],[\"如果希望字符串ab重复出现\",{\"1\":{\"910\":1}}],[\"如果希望\",{\"1\":{\"818\":1}}],[\"如果希望同时导入某个模块的默认导出和基本导出\",{\"1\":{\"52\":1}}],[\"如果希望页面可以通过\",{\"1\":{\"16\":1}}],[\"如果要注册一个插件到\",{\"1\":{\"2047\":1}}],[\"如果要读取的数据是原始值\",{\"1\":{\"1897\":1}}],[\"如果要自定义数据集\",{\"1\":{\"1655\":1}}],[\"如果要访问其他头\",{\"1\":{\"1613\":1}}],[\"如果要访问\",{\"1\":{\"1493\":1}}],[\"如果要访问多维数组里面的数据\",{\"1\":{\"848\":1}}],[\"如果要让编译器原封不动地输出\",{\"1\":{\"1316\":1}}],[\"如果要设置属性\",{\"1\":{\"1205\":1}}],[\"如果要通过该方法移除某一类事件类型的一个事件的话\",{\"1\":{\"1146\":1}}],[\"如果要实现一个拖拽功能\",{\"1\":{\"1034\":1}}],[\"如果要实现高性能\",{\"1\":{\"24\":1}}],[\"如果要获取的标签在页面只有这一个\",{\"1\":{\"1236\":1}}],[\"如果要获取\",{\"1\":{\"911\":1}}],[\"如果要匹配任意字符\",{\"1\":{\"905\":1}}],[\"如果要从集合中获取信息\",{\"1\":{\"868\":1}}],[\"如果要向\",{\"1\":{\"868\":1}}],[\"如果要一次性删除所有的元素\",{\"1\":{\"862\":1}}],[\"如果要彻底删除本地存储中所有的东西\",{\"1\":{\"769\":1}}],[\"如果要删除本地存储中的一个条目\",{\"1\":{\"769\":1}}],[\"如果要改变它\",{\"1\":{\"720\":1}}],[\"如果要写延迟\",{\"1\":{\"641\":1}}],[\"如果要独立的使用\",{\"1\":{\"147\":1}}],[\"如果要进行导入\",{\"1\":{\"50\":1}}],[\"如果此时远程仓库存在更新\",{\"1\":{\"17\":1}}],[\"如果此时远程仓库没有更新\",{\"1\":{\"17\":1}}],[\"如果非得要回到后边的节点对代码进行操作\",{\"1\":{\"14\":1}}],[\"每层有多种方案可供选择\",{\"1\":{\"1621\":1}}],[\"每层无须考虑上层的交付\",{\"1\":{\"1621\":1}}],[\"每层相对独立\",{\"1\":{\"1621\":1}}],[\"每秒把页面画\",{\"1\":{\"1556\":1}}],[\"每秒的请求数维持在一个较低的水平\",{\"1\":{\"225\":1}}],[\"每当这些事件被触发时\",{\"1\":{\"1151\":1}}],[\"每当通知遇到错误时被触发\",{\"1\":{\"1105\":1}}],[\"每当用户点击通知时被触发\",{\"1\":{\"1105\":1}}],[\"每移动一定像素而触发的回调数量非常惊人\",{\"1\":{\"1034\":1}}],[\"每找到一个函数声明\",{\"1\":{\"1015\":1}}],[\"每行最后一个元素与行尾对齐\",{\"1\":{\"588\":1}}],[\"每行第一个元素与行首对齐\",{\"1\":{\"588\":1}}],[\"每行第一个元素到行首的距离和每行最后一个元素到行尾的距离将会是相邻元素之间距离的一半\",{\"1\":{\"588\":1}}],[\"每行之间可以直接用回车符分开\",{\"1\":{\"383\":1}}],[\"每一条路由记录是一个对象\",{\"1\":{\"2042\":1}}],[\"每一层会在上一层的基础上增加一些额外信息\",{\"1\":{\"1621\":1}}],[\"每一批创建的节点数量\",{\"1\":{\"1038\":1}}],[\"每一款移动设备设计时\",{\"1\":{\"649\":1}}],[\"每一个导航的更新都会触发\",{\"1\":{\"2071\":1}}],[\"每一个虚拟节点\",{\"1\":{\"2070\":1}}],[\"每一个组件有一个专门的\",{\"1\":{\"2047\":1}}],[\"每一个\",{\"1\":{\"1154\":1,\"1313\":1,\"2068\":1,\"2072\":1}}],[\"每一个盒子都由以下几个部分组成\",{\"1\":{\"542\":1}}],[\"每一个请求\",{\"1\":{\"286\":1,\"312\":1}}],[\"每一种颜色的范围在\",{\"1\":{\"535\":1}}],[\"每一次循环会检查消息队列中是否有任务存在\",{\"1\":{\"1556\":1}}],[\"每一次返回一个新函数\",{\"1\":{\"995\":1}}],[\"每一次请求都需要携带\",{\"1\":{\"360\":1}}],[\"每一次代码的提交都会创建一个与之对应的节点\",{\"1\":{\"10\":1}}],[\"每一项是一个\",{\"1\":{\"156\":1}}],[\"每一项都是一个\",{\"1\":{\"156\":1}}],[\"每次用户提交请求时\",{\"1\":{\"2088\":1}}],[\"每次用户与一个网页进行交互\",{\"1\":{\"1135\":1}}],[\"每次副作用函数执行时\",{\"1\":{\"1890\":1}}],[\"每次请求都会在服务端将页面渲染好再交给客户端\",{\"1\":{\"1640\":1}}],[\"每次\",{\"1\":{\"1593\":1,\"2061\":1}}],[\"每次路由切换后执行\",{\"1\":{\"1467\":1}}],[\"每次路由切换前执行\",{\"1\":{\"1467\":1}}],[\"每次循环从消息队列中取出第一个任务执行\",{\"1\":{\"1560\":1}}],[\"每次循环都用了\",{\"1\":{\"1239\":1}}],[\"每次循环会检查消息队列中是否有任务存在\",{\"1\":{\"1180\":1}}],[\"每次进入一个人\",{\"1\":{\"1035\":1}}],[\"每次执行test\",{\"1\":{\"925\":1}}],[\"每次将一个值存储到本地存储时\",{\"1\":{\"770\":1}}],[\"每次调用vue\",{\"1\":{\"1423\":1}}],[\"每次调用\",{\"1\":{\"925\":1,\"1923\":2}}],[\"每次调用样式\",{\"1\":{\"712\":1}}],[\"每次调用路径\",{\"1\":{\"711\":1}}],[\"每次调用传入两个参数\",{\"1\":{\"402\":1}}],[\"每次都是这样\",{\"1\":{\"644\":2}}],[\"每次间隔3秒\",{\"1\":{\"490\":1}}],[\"每次浏览器发送请求时会带上这个令牌\",{\"1\":{\"343\":1}}],[\"每次取出\",{\"1\":{\"252\":1}}],[\"每次我们运行npm\",{\"1\":{\"129\":1}}],[\"每次手动删除非常的麻烦\",{\"1\":{\"129\":1}}],[\"每个<router\",{\"1\":{\"2031\":1}}],[\"每个异步任务\",{\"1\":{\"1776\":1}}],[\"每个特征图的大小为\",{\"1\":{\"1665\":1}}],[\"每个任务对象\",{\"1\":{\"1776\":1}}],[\"每个任务有不同的类型\",{\"1\":{\"1560\":1}}],[\"每个任务都有一个任务类型\",{\"1\":{\"1181\":1,\"1560\":1}}],[\"每个应用至少有一个进程\",{\"1\":{\"1553\":1}}],[\"每个用户看到的都不一样\",{\"1\":{\"1539\":1}}],[\"每个块的位图后\",{\"1\":{\"1526\":1}}],[\"每个块级元素会在上一个元素下面另起一行\",{\"1\":{\"552\":1}}],[\"每个阶段都有明确的输入输出\",{\"1\":{\"1526\":1}}],[\"每个组件都有自己的$route属性\",{\"1\":{\"1457\":1}}],[\"每个样式表都会被执行编译\",{\"1\":{\"1313\":1}}],[\"每个表达式都会产生一个值\",{\"1\":{\"1263\":1}}],[\"每个函数都是对象\",{\"1\":{\"1158\":1}}],[\"每个元素只能为每种事件类型绑定一个事件处理器\",{\"1\":{\"1143\":1}}],[\"每个元素占据一定的空间\",{\"1\":{\"539\":1}}],[\"每个对象都有相同的数据\",{\"1\":{\"1048\":1}}],[\"每个执行任务之间的时间间隔\",{\"1\":{\"1038\":1}}],[\"每个人进入后\",{\"1\":{\"1036\":1}}],[\"每个字节均由一个\",{\"1\":{\"773\":1}}],[\"每个堆叠上下文\",{\"1\":{\"578\":1}}],[\"每个盒子都有它的包含块\",{\"1\":{\"539\":1}}],[\"每个大括号里的第一项用于维护与后面具体内容的对应关系\",{\"1\":{\"388\":1}}],[\"每个\",{\"1\":{\"345\":1,\"765\":1,\"923\":1,\"1224\":1,\"1276\":1,\"1290\":1,\"2047\":1}}],[\"每个中间件都可以对http请求\",{\"1\":{\"309\":1}}],[\"每个中间件可以从app实例\",{\"1\":{\"309\":1}}],[\"每个文件就是一个模块\",{\"1\":{\"232\":1}}],[\"每个项目都使用自己的\",{\"1\":{\"123\":1}}],[\"每个客户都可以访问\",{\"1\":{\"71\":1}}],[\"每个包都必须要有\",{\"1\":{\"64\":1}}],[\"每个模块不能出现多个默认导出语句\",{\"1\":{\"51\":1}}],[\"每个模块\",{\"1\":{\"51\":1}}],[\"每个必须有名称\",{\"1\":{\"49\":1}}],[\"再继续对比当前组件的子元素\",{\"1\":{\"2002\":1}}],[\"再进行设置\",{\"1\":{\"1929\":1}}],[\"再进行一次划分到不同的桶中\",{\"1\":{\"418\":1}}],[\"再去其中查找\",{\"1\":{\"1924\":1,\"1993\":1}}],[\"再去其中查找并更新\",{\"1\":{\"1923\":1}}],[\"再去原始数组中查找\",{\"1\":{\"1922\":1}}],[\"再去处理的话\",{\"1\":{\"150\":1}}],[\"再根据\",{\"1\":{\"1889\":1}}],[\"再利用\",{\"1\":{\"1874\":1}}],[\"再利用实际增长率求后期\",{\"1\":{\"1727\":1}}],[\"再把该字符串作为元素的\",{\"1\":{\"1949\":1}}],[\"再把vnode的子节点添加到真实dom中\",{\"1\":{\"1789\":1}}],[\"再把每个\",{\"1\":{\"154\":1}}],[\"再除以数据的个数\",{\"1\":{\"1745\":1}}],[\"再计算\",{\"1\":{\"1736\":1}}],[\"再求比值即可\",{\"1\":{\"1729\":1}}],[\"再下一步是\",{\"1\":{\"1526\":1}}],[\"再按下其他键\",{\"1\":{\"1370\":1}}],[\"再写\",{\"1\":{\"1309\":1}}],[\"再写另一个\",{\"1\":{\"1307\":1}}],[\"再到\",{\"1\":{\"1141\":1}}],[\"再排其他\",{\"1\":{\"1054\":1}}],[\"再沿着\",{\"1\":{\"1009\":1}}],[\"再更新对象\",{\"1\":{\"984\":1}}],[\"再例如\",{\"1\":{\"911\":1,\"918\":1}}],[\"再对象中\",{\"1\":{\"836\":1}}],[\"再对子数组进行排序\",{\"1\":{\"418\":1}}],[\"再执行代码\",{\"1\":{\"1012\":1}}],[\"再执行加减\",{\"1\":{\"806\":3}}],[\"再执行模块脚本\",{\"1\":{\"47\":1}}],[\"再减速\",{\"1\":{\"641\":1}}],[\"再设置稍小数值的负的margin\",{\"1\":{\"582\":1}}],[\"再返回给客户端\",{\"1\":{\"507\":1}}],[\"再次调用\",{\"1\":{\"2028\":1,\"2058\":2}}],[\"再次\",{\"1\":{\"1320\":1}}],[\"再次执行插入排序操作直至增量减至1\",{\"1\":{\"413\":1}}],[\"再次运行npm\",{\"1\":{\"150\":1}}],[\"再从剩余未排序元素中继续寻找最小\",{\"1\":{\"411\":1}}],[\"再创建一个定时器\",{\"1\":{\"408\":1}}],[\"再通过其他的逻辑代码让程序继续运行\",{\"1\":{\"403\":1}}],[\"再将该字符串通过\",{\"1\":{\"1239\":1}}],[\"再将签名信息拼接在原始值后面形成一个新的值作为cookie的值\",{\"1\":{\"350\":1}}],[\"再将自己的分支合并到主分支中\",{\"1\":{\"10\":1}}],[\"再传递给下一个中间件\",{\"1\":{\"309\":1}}],[\"再发送请求\",{\"1\":{\"291\":2,\"292\":1,\"1035\":1}}],[\"再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理\",{\"1\":{\"154\":1}}],[\"再找出该模块依赖的模块\",{\"1\":{\"154\":1}}],[\"或$开头的属性代理到实例vm上\",{\"1\":{\"1804\":1}}],[\"或$once方法\",{\"1\":{\"1437\":1}}],[\"或p标签\",{\"1\":{\"1792\":1}}],[\"或pow\",{\"1\":{\"395\":1}}],[\"或简单记为后除前\",{\"1\":{\"1745\":1}}],[\"或简写为\",{\"1\":{\"1353\":1}}],[\"或论证作者的观点\",{\"1\":{\"1691\":1}}],[\"或无穷大\",{\"1\":{\"1666\":1}}],[\"或版本号\",{\"0\":{\"1543\":1}}],[\"或没有使用\",{\"1\":{\"1499\":1}}],[\"或数组\",{\"1\":{\"1488\":1,\"1492\":2}}],[\"或vm\",{\"1\":{\"1407\":1}}],[\"或组件实例对象\",{\"1\":{\"1383\":1}}],[\"或混入\",{\"1\":{\"1333\":1}}],[\"或修改为固定的值\",{\"1\":{\"1312\":1}}],[\"或不想转发某些成员\",{\"1\":{\"1311\":1}}],[\"或一个\",{\"1\":{\"1287\":1}}],[\"或空格分隔\",{\"1\":{\"1267\":1}}],[\"或100px\",{\"1\":{\"1264\":1}}],[\"或函数时\",{\"1\":{\"1252\":1}}],[\"或客户区\",{\"1\":{\"1153\":1}}],[\"或test\",{\"1\":{\"923\":2,\"924\":1,\"925\":1}}],[\"或循环语句\",{\"1\":{\"824\":1}}],[\"或是在结束后重新开始\",{\"1\":{\"752\":1}}],[\"或使用<script\",{\"1\":{\"675\":1}}],[\"或下载文件\",{\"1\":{\"664\":1}}],[\"或其他资源\",{\"1\":{\"664\":1}}],[\"或其他包管理器下载的模块\",{\"1\":{\"117\":1}}],[\"或设备不同的状态来分别设置样式\",{\"1\":{\"651\":1}}],[\"或设为\",{\"1\":{\"589\":1}}],[\"或换行\",{\"1\":{\"552\":1}}],[\"或类似的机制的话\",{\"1\":{\"362\":1}}],[\"或整个楼层\",{\"1\":{\"219\":1}}],[\"或者用户信息被窃取\",{\"1\":{\"2094\":1}}],[\"或者说离开的路由\",{\"1\":{\"2074\":1}}],[\"或者说借用了\",{\"1\":{\"1647\":1}}],[\"或者已经被读取过了\",{\"1\":{\"1897\":1}}],[\"或者===\",{\"1\":{\"1879\":1}}],[\"或者在某些无内容的情况下作为默认\",{\"1\":{\"1797\":1}}],[\"或者在模块加载后更新配置\",{\"1\":{\"1307\":1}}],[\"或者是\",{\"1\":{\"1786\":2}}],[\"或者是一个表达式\",{\"1\":{\"910\":1}}],[\"或者dataset对象\",{\"1\":{\"1655\":1}}],[\"或者直接用\",{\"1\":{\"1583\":1}}],[\"或者直接使用中括号来表示\",{\"1\":{\"1127\":1}}],[\"或者指定一个确定的值均可\",{\"1\":{\"1312\":1}}],[\"或者包含透明值的\",{\"1\":{\"1266\":1}}],[\"或者符合某种形式时\",{\"1\":{\"1162\":1}}],[\"或者按一下空格键\",{\"1\":{\"1156\":1}}],[\"或者按下回车键时触发\",{\"1\":{\"1148\":1}}],[\"或者鼠标光标的位置\",{\"1\":{\"1153\":1}}],[\"或者关闭浏览器\",{\"1\":{\"1150\":1}}],[\"或者参数为\",{\"1\":{\"995\":1}}],[\"或者写一些复杂函数的时候经常会用到\",{\"1\":{\"995\":1}}],[\"或者对匹配的子串进行替换\",{\"1\":{\"898\":1}}],[\"或者对某一段代码进行重复执行\",{\"1\":{\"817\":1}}],[\"或者使用\",{\"1\":{\"871\":1,\"1274\":1,\"2061\":1,\"2095\":1}}],[\"或者使用let或者const的话是会报错的\",{\"1\":{\"782\":1}}],[\"或者通过foreach来进行遍历\",{\"1\":{\"863\":1}}],[\"或者当对非布尔类型的数据求布尔值的时候\",{\"1\":{\"801\":1}}],[\"或者称之为浮点数\",{\"1\":{\"793\":1}}],[\"或者称为mime\",{\"1\":{\"693\":1}}],[\"或者从桌面拖动目录或文件\",{\"1\":{\"771\":1}}],[\"或者限制上传内容的大小\",{\"1\":{\"771\":1}}],[\"或者允许应用程序在用户离线时保存文件引用\",{\"1\":{\"771\":1}}],[\"或者允许第三方调用\",{\"1\":{\"362\":1}}],[\"或者一段文本等等\",{\"1\":{\"763\":1}}],[\"或者比最大值还大\",{\"1\":{\"696\":1}}],[\"或者碰到另外一个浮动的元素\",{\"1\":{\"561\":1}}],[\"或者其他水平书写\",{\"1\":{\"552\":1}}],[\"或者都是重复数字\",{\"1\":{\"418\":1}}],[\"或者大于\",{\"1\":{\"416\":1}}],[\"或者\",{\"1\":{\"64\":1,\"138\":1,\"206\":1,\"238\":1,\"301\":1,\"356\":1,\"384\":1,\"398\":1,\"520\":2,\"580\":1,\"722\":1,\"769\":1,\"1088\":1,\"1149\":1,\"1232\":1,\"1509\":1,\"1867\":1,\"2032\":1,\"2048\":1,\"2050\":1,\"2054\":1,\"2058\":2,\"2061\":2,\"2065\":1,\"2071\":1,\"2074\":1,\"2075\":1,\"2087\":2,\"2088\":2}}],[\"或者以上所有情况都没有找到\",{\"1\":{\"59\":1}}],[\"或\",{\"0\":{\"809\":1,\"1242\":1,\"1669\":1},\"1\":{\"46\":1,\"49\":2,\"51\":1,\"59\":1,\"254\":1,\"255\":1,\"257\":1,\"258\":1,\"259\":1,\"260\":1,\"294\":1,\"388\":1,\"397\":2,\"402\":1,\"548\":2,\"557\":1,\"617\":1,\"623\":1,\"633\":1,\"694\":2,\"717\":1,\"767\":1,\"801\":1,\"875\":1,\"906\":1,\"911\":1,\"912\":1,\"980\":1,\"995\":3,\"1252\":1,\"1267\":1,\"1273\":2,\"1283\":1,\"1286\":1,\"1301\":1,\"1302\":1,\"1305\":1,\"1308\":1,\"1316\":1,\"1320\":1,\"1368\":1,\"1383\":1,\"1396\":3,\"1397\":1,\"1406\":2,\"1428\":1,\"1437\":1,\"1451\":1,\"1636\":1,\"1669\":1,\"1720\":2,\"1751\":1,\"1796\":1,\"1801\":1,\"1802\":1,\"1906\":1,\"1932\":2,\"1990\":1,\"2008\":1,\"2016\":1,\"2061\":1,\"2091\":1,\"2095\":1}}],[\"后推入到\",{\"1\":{\"2083\":1}}],[\"后才推入进去的\",{\"1\":{\"2080\":1}}],[\"后置守卫\",{\"1\":{\"2071\":1}}],[\"后置示例\",{\"1\":{\"806\":1}}],[\"后去掉\",{\"1\":{\"2053\":1}}],[\"后会自动把\",{\"1\":{\"2030\":1}}],[\"后会修改它们的值\",{\"1\":{\"2028\":1}}],[\"后会生成如下的data数据传入\",{\"1\":{\"1802\":1}}],[\"后修改响应式数据的值\",{\"1\":{\"1937\":1}}],[\"后发生\",{\"1\":{\"1897\":1}}],[\"后再传给callback\",{\"1\":{\"1930\":1}}],[\"后再赋值给\",{\"1\":{\"1892\":1}}],[\"后再从attrs中解析信息\",{\"1\":{\"1353\":1}}],[\"后来的会覆盖先前的\",{\"1\":{\"1891\":1}}],[\"后缀名不符合要求\",{\"1\":{\"1592\":1}}],[\"后缀名不符号要求\",{\"1\":{\"1592\":1}}],[\"后缀为扩展名\",{\"1\":{\"1247\":2}}],[\"后期也可以返回一个\",{\"1\":{\"1486\":1}}],[\"后退\",{\"1\":{\"1464\":1}}],[\"后执行\",{\"1\":{\"1215\":1}}],[\"后表达式执行\",{\"1\":{\"1187\":1}}],[\"后表达式的值转为\",{\"1\":{\"1187\":1}}],[\"后有\",{\"1\":{\"980\":1}}],[\"后一个不是\",{\"1\":{\"957\":1}}],[\"后跟着一个\",{\"1\":{\"824\":1}}],[\"后的变量数量表示的意义有一点区别\",{\"1\":{\"1290\":1}}],[\"后的变量数量多于内层数组的元素数量\",{\"1\":{\"1290\":1}}],[\"后的字母大写\",{\"1\":{\"1127\":1}}],[\"后的部分\",{\"1\":{\"1093\":1,\"2051\":1}}],[\"后的语句都不会执行\",{\"1\":{\"935\":1}}],[\"后的数值\",{\"1\":{\"806\":1}}],[\"后的特点\",{\"1\":{\"564\":1}}],[\"后三个参数则定义另一个以\",{\"1\":{\"726\":1}}],[\"后绘制的矩形会覆盖之前绘制的矩形\",{\"1\":{\"708\":1}}],[\"后减速\",{\"1\":{\"641\":1}}],[\"后两个属性可选\",{\"1\":{\"592\":1}}],[\"后代组件中\",{\"1\":{\"1508\":1}}],[\"后代组件有一个\",{\"1\":{\"1508\":1}}],[\"后代选择器除了找\",{\"1\":{\"1243\":1}}],[\"后代是\",{\"1\":{\"1243\":1}}],[\"后代\",{\"1\":{\"518\":1}}],[\"后代元素选择器\",{\"1\":{\"518\":1}}],[\"后真\",{\"1\":{\"401\":1}}],[\"后假\",{\"1\":{\"401\":1}}],[\"后\",{\"1\":{\"292\":1,\"995\":1,\"1232\":2,\"1309\":1,\"1446\":1,\"1494\":1,\"1665\":1,\"1779\":1,\"1865\":1,\"2031\":1}}],[\"后续客户端和服务器使用会话密钥加密信息传递消息\",{\"1\":{\"2091\":2}}],[\"后续操作\",{\"0\":{\"2055\":1}}],[\"后续会完成计算属性和对象的使用\",{\"1\":{\"2016\":1}}],[\"后续消息收发不再使用\",{\"1\":{\"1648\":1}}],[\"后续咱们别用http了\",{\"1\":{\"1648\":1}}],[\"后续统一讲解\",{\"1\":{\"1577\":1}}],[\"后续的请求通过缓存指令发送到服务器\",{\"1\":{\"1541\":1}}],[\"后续的每一次请求都需要附带缓存指令\",{\"1\":{\"1539\":1}}],[\"后续的课程中主要使用的还是\",{\"1\":{\"1196\":1}}],[\"后续功能不会修改该对象中的属性\",{\"1\":{\"1504\":1}}],[\"后续处理后返回的值\",{\"1\":{\"1189\":1}}],[\"后续发送请求时\",{\"1\":{\"360\":1}}],[\"后续向服务器发送请求时\",{\"1\":{\"347\":1}}],[\"后续如果需要安装其他版本\",{\"1\":{\"227\":1}}],[\"后续可以对自己发布的包进行更新\",{\"1\":{\"92\":1}}],[\"后台人力不够\",{\"1\":{\"220\":1}}],[\"后台管理系统对性能和并发的要求不是太高\",{\"1\":{\"220\":1}}],[\"后端路由\",{\"1\":{\"1455\":1}}],[\"后端解析出jwt\",{\"1\":{\"368\":1}}],[\"后端检查前端传过来的jwt\",{\"1\":{\"368\":1}}],[\"后端将jwt\",{\"1\":{\"368\":1}}],[\"后端核对用户名和密码成功后\",{\"1\":{\"368\":1}}],[\"后端工程师也会调用接口\",{\"1\":{\"337\":1}}],[\"后端工程师\",{\"1\":{\"337\":1}}],[\"后端发现页面中的\",{\"1\":{\"219\":1}}],[\"后端可以专注于业务领域\",{\"1\":{\"218\":1}}],[\"后端通过\",{\"1\":{\"218\":1}}],[\"后端开发者压力逐渐增加\",{\"1\":{\"23\":1}}],[\"后面部分\",{\"1\":{\"2061\":1}}],[\"后面要使用\",{\"1\":{\"2047\":1}}],[\"后面再来追\",{\"1\":{\"2047\":1}}],[\"后面再用它时就不会再次到页面上进行搜索\",{\"1\":{\"1238\":1}}],[\"后面涉及哪个再来分析哪个\",{\"1\":{\"2046\":1}}],[\"后面不应该再有元素\",{\"1\":{\"1792\":1}}],[\"后面也是文本\",{\"1\":{\"1792\":1}}],[\"后面往往跟上一个对应的单词\",{\"1\":{\"1635\":1}}],[\"后面必须书写\",{\"1\":{\"918\":1}}],[\"后面是\",{\"1\":{\"918\":1}}],[\"后面会提到的非捕获\",{\"1\":{\"912\":1}}],[\"后面我们会学习addeventlistener\",{\"1\":{\"1140\":1}}],[\"后面我们会具体来探讨此问题\",{\"1\":{\"779\":1}}],[\"后面我们直接运行\",{\"1\":{\"148\":1}}],[\"后面没有跟异常名\",{\"1\":{\"403\":1}}],[\"后面跟着字符串\",{\"1\":{\"389\":1}}],[\"后面单独讲\",{\"1\":{\"269\":1}}],[\"后面的字符串\",{\"1\":{\"2058\":1}}],[\"后面的字符不能是某一个字符\",{\"1\":{\"918\":1}}],[\"后面的写法是前面写法的一种简写\",{\"1\":{\"1200\":1}}],[\"后面的章节会具体的介绍异步相关的知识\",{\"1\":{\"1137\":1}}],[\"后面的值不一定必须是常量\",{\"1\":{\"819\":1}}],[\"后面的序列数据进行了修改时\",{\"1\":{\"401\":1}}],[\"后面的\",{\"1\":{\"138\":1,\"918\":1}}],[\"后成为\",{\"1\":{\"46\":1}}],[\"79\",{\"1\":{\"1715\":1}}],[\"7976931348623157e+308\",{\"1\":{\"794\":2}}],[\"7858\",{\"1\":{\"1711\":1}}],[\"789aaaa\",{\"1\":{\"482\":1}}],[\"789\",{\"1\":{\"482\":1}}],[\"7111\",{\"1\":{\"1711\":1}}],[\"74\",{\"1\":{\"895\":1}}],[\"724\",{\"1\":{\"1723\":1}}],[\"72\",{\"1\":{\"888\":1,\"1594\":4}}],[\"7298\",{\"1\":{\"1792\":1}}],[\"729\",{\"1\":{\"396\":1}}],[\"768\",{\"1\":{\"651\":2}}],[\"75px\",{\"1\":{\"1207\":4}}],[\"75\",{\"1\":{\"681\":1}}],[\"750px\",{\"1\":{\"650\":1}}],[\"7519\",{\"1\":{\"363\":1}}],[\"7常用的内置函数\",{\"1\":{\"405\":1}}],[\"7j\",{\"1\":{\"395\":1}}],[\"70d214\",{\"1\":{\"1658\":3}}],[\"7001\",{\"1\":{\"1600\":2}}],[\"700\",{\"1\":{\"1277\":1}}],[\"700px\",{\"1\":{\"643\":1,\"651\":1}}],[\"70px\",{\"1\":{\"1087\":2}}],[\"706579200000\",{\"1\":{\"877\":1}}],[\"701308800000\",{\"1\":{\"877\":1}}],[\"70\",{\"1\":{\"206\":2,\"1087\":2}}],[\"7\",{\"0\":{\"45\":1,\"74\":1,\"183\":1,\"204\":1,\"261\":1,\"286\":1,\"522\":1,\"591\":1,\"633\":1,\"667\":1,\"833\":1,\"847\":1,\"865\":1,\"915\":1,\"941\":1,\"1240\":1,\"1371\":1,\"1433\":1,\"1454\":1,\"1462\":1,\"1494\":1,\"1581\":1,\"1667\":1,\"1701\":1,\"1806\":1,\"1894\":1,\"1972\":1,\"2014\":1,\"2046\":1},\"1\":{\"191\":1,\"212\":1,\"269\":1,\"385\":1,\"395\":3,\"402\":2,\"405\":1,\"408\":2,\"449\":2,\"486\":6,\"487\":8,\"488\":7,\"725\":1,\"726\":1,\"787\":1,\"792\":1,\"794\":1,\"803\":1,\"805\":2,\"846\":1,\"854\":13,\"855\":5,\"856\":1,\"864\":3,\"875\":1,\"891\":13,\"944\":2,\"945\":5,\"946\":1,\"947\":1,\"1088\":1,\"1148\":2,\"1266\":3,\"1286\":1,\"1584\":1,\"1711\":2,\"1723\":2}}],[\"+1\",{\"1\":{\"2068\":1}}],[\"+0\",{\"1\":{\"1052\":1}}],[\"++newstartidx\",{\"1\":{\"1789\":3,\"1965\":2,\"1966\":2}}],[\"++oldstartidx\",{\"1\":{\"1789\":3,\"1965\":2,\"1966\":1}}],[\"++count\",{\"1\":{\"1493\":1}}],[\"++index\",{\"1\":{\"727\":1}}],[\"++i\",{\"1\":{\"472\":1,\"1789\":2}}],[\"++\",{\"1\":{\"417\":1,\"816\":1,\"1799\":1}}],[\"+pop\",{\"1\":{\"390\":1}}],[\"+号连接和extend效果相同\",{\"1\":{\"390\":1}}],[\"+req\",{\"1\":{\"350\":1}}],[\"+=\",{\"1\":{\"283\":1,\"396\":1,\"474\":2,\"480\":1,\"482\":2,\"727\":1,\"805\":1,\"1124\":1,\"1139\":5,\"1140\":5,\"1239\":1,\"1353\":2,\"1358\":1,\"1368\":2,\"1407\":1,\"1428\":1,\"1451\":1,\"1792\":3,\"1979\":2,\"2012\":1}}],[\"+6\",{\"1\":{\"165\":1}}],[\"+\",{\"0\":{\"975\":1,\"1049\":1},\"1\":{\"41\":2,\"44\":2,\"155\":1,\"219\":1,\"262\":2,\"263\":3,\"264\":2,\"275\":1,\"287\":1,\"294\":5,\"306\":1,\"307\":1,\"355\":2,\"389\":1,\"395\":1,\"402\":1,\"410\":3,\"412\":2,\"413\":2,\"414\":1,\"415\":1,\"416\":4,\"417\":3,\"418\":1,\"422\":1,\"428\":1,\"429\":1,\"430\":1,\"432\":1,\"436\":1,\"438\":1,\"439\":1,\"441\":1,\"443\":1,\"464\":1,\"478\":1,\"479\":1,\"482\":1,\"488\":1,\"518\":2,\"553\":6,\"555\":36,\"573\":8,\"574\":4,\"740\":18,\"764\":2,\"789\":5,\"795\":1,\"801\":1,\"803\":1,\"806\":4,\"816\":2,\"835\":1,\"883\":5,\"902\":1,\"906\":1,\"908\":1,\"912\":4,\"920\":1,\"934\":1,\"946\":3,\"947\":1,\"948\":2,\"956\":1,\"995\":4,\"1039\":3,\"1059\":2,\"1060\":2,\"1124\":2,\"1141\":2,\"1161\":1,\"1181\":4,\"1182\":3,\"1186\":1,\"1254\":3,\"1255\":2,\"1286\":1,\"1338\":3,\"1341\":3,\"1352\":4,\"1376\":4,\"1407\":1,\"1427\":1,\"1496\":4,\"1535\":1,\"1579\":1,\"1600\":2,\"1633\":1,\"1680\":4,\"1685\":1,\"1711\":6,\"1712\":4,\"1714\":3,\"1718\":3,\"1720\":4,\"1723\":1,\"1726\":2,\"1727\":1,\"1748\":2,\"1753\":3,\"1786\":2,\"1789\":2,\"1792\":8,\"1793\":6,\"1794\":3,\"1797\":2,\"1802\":1,\"1803\":2,\"1804\":7,\"1805\":1,\"1822\":1,\"1828\":3,\"1896\":1,\"1954\":1,\"1968\":1,\"1969\":6,\"1979\":1,\"2012\":1,\"2019\":5,\"2029\":2,\"2040\":1,\"2045\":1,\"2054\":2,\"2058\":11,\"2061\":3,\"2065\":2,\"2068\":1,\"2091\":1}}],[\"官方的设计\",{\"1\":{\"2047\":1}}],[\"官方的解释\",{\"1\":{\"1560\":1}}],[\"官方的密切关注\",{\"1\":{\"25\":1}}],[\"官方说明文档\",{\"1\":{\"1555\":1}}],[\"官方文档\",{\"1\":{\"1482\":1,\"1483\":1,\"1485\":1,\"2053\":1}}],[\"官方文档地址\",{\"1\":{\"122\":1}}],[\"官方已经不再维护\",{\"1\":{\"1445\":1}}],[\"官方没有明确要求\",{\"1\":{\"1054\":1}}],[\"官方定义\",{\"1\":{\"303\":1}}],[\"官方地址\",{\"1\":{\"171\":1,\"340\":1}}],[\"官方制作了一个单独的库\",{\"1\":{\"133\":1}}],[\"官方宣称的一些特点\",{\"1\":{\"85\":1}}],[\"官方网址\",{\"1\":{\"84\":1,\"298\":1}}],[\"官方也提供了一个全局工具包\",{\"1\":{\"80\":1}}],[\"官方内置的包管理工具\",{\"1\":{\"61\":1}}],[\"官网地址\",{\"1\":{\"146\":1}}],[\"官网上有这么一段话来介绍\",{\"1\":{\"122\":1}}],[\"官网\",{\"1\":{\"39\":1,\"189\":1,\"324\":1,\"1483\":1}}],[\"基期年份差值\",{\"1\":{\"1747\":1}}],[\"基期应向前推一年\",{\"1\":{\"1747\":1}}],[\"基期平均数\",{\"1\":{\"1745\":1,\"1753\":2}}],[\"基期平均值\",{\"1\":{\"1732\":1}}],[\"基期代替\",{\"1\":{\"1737\":1}}],[\"基期比值共用一个公式\",{\"1\":{\"1753\":1}}],[\"基期比值\",{\"1\":{\"1753\":1}}],[\"基期比值均可看作是\",{\"1\":{\"1732\":1}}],[\"基期比重\",{\"1\":{\"1732\":1,\"1745\":1,\"1753\":2}}],[\"基期比重等于现期比重乘上\",{\"1\":{\"1732\":1}}],[\"基期倍数\",{\"1\":{\"1732\":1,\"1746\":1}}],[\"基期差值\",{\"1\":{\"1726\":1}}],[\"基期考法\",{\"0\":{\"1726\":1}}],[\"基期\",{\"1\":{\"1721\":1,\"1722\":1,\"1726\":1,\"1737\":1,\"1748\":1}}],[\"基础使用\",{\"0\":{\"2007\":1}}],[\"基础响应式\",{\"0\":{\"1983\":1}}],[\"基础响应系统的实现\",{\"0\":{\"1884\":1}}],[\"基础知识\",{\"0\":{\"1644\":1,\"2048\":1}}],[\"基础重点总结\",{\"0\":{\"962\":1}}],[\"基类的样式都将会出现在编译出来的\",{\"1\":{\"1299\":1}}],[\"基类已在文件中存在\",{\"1\":{\"1299\":1}}],[\"基线对齐\",{\"1\":{\"625\":1}}],[\"基数排序\",{\"0\":{\"419\":1},\"1\":{\"419\":1}}],[\"基准值\",{\"1\":{\"1714\":2}}],[\"基准\",{\"1\":{\"415\":1}}],[\"基本用法\",{\"0\":{\"2025\":1}}],[\"基本原理参考\",{\"1\":{\"2024\":1}}],[\"基本结构\",{\"0\":{\"2018\":1}}],[\"基本语义\",{\"1\":{\"1901\":1}}],[\"基本思路的实现\",{\"1\":{\"1886\":1}}],[\"基本概念\",{\"0\":{\"1725\":1}}],[\"基本的获取响应能力\",{\"1\":{\"1572\":1}}],[\"基本的请求能力\",{\"1\":{\"1572\":1}}],[\"基本流程\",{\"0\":{\"1571\":1}}],[\"基本类型数据\",{\"1\":{\"1492\":1}}],[\"基本类型不要用它\",{\"1\":{\"1488\":1}}],[\"基本类型的数据\",{\"1\":{\"1487\":1}}],[\"基本类型\",{\"1\":{\"1487\":1}}],[\"基本配置项\",{\"1\":{\"1451\":1}}],[\"基本介绍\",{\"0\":{\"1082\":1}}],[\"基本上和前面是类似的\",{\"1\":{\"2060\":1}}],[\"基本上和数组的解构类似\",{\"1\":{\"832\":1}}],[\"基本上没有理由声明一个永远不需要更新或只在单一地方使用的变量\",{\"1\":{\"1261\":1}}],[\"基本上跟严格相等\",{\"1\":{\"1052\":1}}],[\"基本\",{\"0\":{\"965\":1}}],[\"基本不用\",{\"1\":{\"928\":1}}],[\"基本使用\",{\"0\":{\"63\":1,\"1327\":1,\"1392\":1,\"1414\":1,\"1451\":1,\"1456\":1}}],[\"基本导入\",{\"0\":{\"50\":1}}],[\"基本导入导出\",{\"1\":{\"48\":1}}],[\"基本导出的语法如下\",{\"1\":{\"49\":1}}],[\"基本导出可以有多个\",{\"1\":{\"49\":1}}],[\"基本导出\",{\"0\":{\"49\":1}}],[\"基本路径\",{\"1\":{\"42\":1,\"45\":1}}],[\"基本操作\",{\"0\":{\"10\":1},\"1\":{\"404\":1}}],[\"基于位置的应用\",{\"1\":{\"1644\":1}}],[\"基于此\",{\"1\":{\"1446\":1,\"1494\":1}}],[\"基于上述原理我们可以使用如下方式实现父子间的通信\",{\"1\":{\"1358\":1}}],[\"基于文件\",{\"1\":{\"404\":1}}],[\"基于内存\",{\"1\":{\"404\":1}}],[\"基于事件流框架\",{\"1\":{\"156\":1}}],[\"基于模块化\",{\"1\":{\"122\":1}}],[\"基于\",{\"0\":{\"220\":1,\"222\":1},\"1\":{\"122\":1,\"218\":1,\"360\":1,\"548\":1}}],[\"基于这种简单有效的思路\",{\"1\":{\"37\":1}}],[\"基于以上两点原因\",{\"1\":{\"37\":1}}],[\"新创建一个标签页会话\",{\"1\":{\"2048\":1}}],[\"新版\",{\"0\":{\"2038\":1}}],[\"新值\",{\"1\":{\"1987\":1}}],[\"新子节点是一组子节点\",{\"1\":{\"1951\":1}}],[\"新子节点的类型是文本节点\",{\"1\":{\"1951\":1}}],[\"新后\",{\"1\":{\"1789\":1}}],[\"新前\",{\"1\":{\"1789\":1}}],[\"新旧值\",{\"1\":{\"1987\":1}}],[\"新旧两组子节点中总会有一组子节点全部被处理完毕\",{\"1\":{\"1969\":1}}],[\"新旧节点中可能存在还未处理的节点\",{\"1\":{\"1966\":1}}],[\"新旧节点中\",{\"1\":{\"1962\":1}}],[\"新旧节点类型不同\",{\"1\":{\"1951\":1}}],[\"新旧\",{\"1\":{\"1789\":2}}],[\"新一代前端构建工具\",{\"1\":{\"1483\":1}}],[\"新虚拟\",{\"1\":{\"1394\":1}}],[\"新数据\",{\"1\":{\"1394\":1}}],[\"新任务会加到消息队列的末尾\",{\"1\":{\"1180\":1,\"1556\":1}}],[\"新节点没有在旧的一组子节点中找到可复用的节点\",{\"1\":{\"1962\":1}}],[\"新节点也将持有对真实\",{\"1\":{\"1951\":1}}],[\"新节点\",{\"1\":{\"1119\":1,\"1122\":1}}],[\"新建文件xxx\",{\"1\":{\"1630\":1}}],[\"新建的通知包括标题\",{\"1\":{\"1105\":1}}],[\"新建一条路径\",{\"1\":{\"711\":1}}],[\"新建一个自己的分支\",{\"1\":{\"17\":1}}],[\"新\",{\"1\":{\"1104\":1,\"1647\":1,\"1705\":4,\"1897\":1,\"1944\":1,\"1962\":1}}],[\"新窗口是否取代历史记录中的当前页面\",{\"1\":{\"1088\":3}}],[\"新窗口的大小\",{\"1\":{\"1088\":3}}],[\"新提供的\",{\"1\":{\"1086\":1}}],[\"新图像\",{\"1\":{\"743\":1}}],[\"新对象的高度\",{\"1\":{\"739\":1}}],[\"新对象的宽度\",{\"1\":{\"739\":1}}],[\"新页面的标题\",{\"1\":{\"2050\":1}}],[\"新页面\",{\"1\":{\"664\":1}}],[\"新加的标签\",{\"1\":{\"662\":1,\"668\":1}}],[\"新增节点\",{\"1\":{\"1966\":2}}],[\"新增节点并插入到合适位置\",{\"1\":{\"1789\":1}}],[\"新增头部\",{\"1\":{\"1609\":1}}],[\"新增或者修改一个需求\",{\"1\":{\"1511\":1}}],[\"新增属性\",{\"1\":{\"1490\":1}}],[\"新增的情况\",{\"1\":{\"1966\":1}}],[\"新增的内容\",{\"1\":{\"1647\":1}}],[\"新增的地理位置应用程序接口\",{\"1\":{\"1099\":1}}],[\"新增的元素\",{\"1\":{\"701\":1}}],[\"新增了symbol这种数据类型\",{\"1\":{\"828\":1}}],[\"新增了一种资源模块\",{\"1\":{\"142\":1}}],[\"新增表单属性\",{\"0\":{\"758\":1}}],[\"新增表单控件\",{\"0\":{\"757\":1}}],[\"新增歌曲\",{\"1\":{\"339\":1}}],[\"新增\",{\"0\":{\"184\":1},\"1\":{\"212\":1,\"1786\":1,\"1890\":4,\"1891\":4,\"1892\":1,\"1893\":4,\"1894\":2,\"1895\":2,\"1917\":2,\"1969\":1}}],[\"新的历史记录的\",{\"1\":{\"2050\":1}}],[\"新的一组子节点的长度\",{\"1\":{\"1961\":1}}],[\"新的索引值\",{\"1\":{\"1918\":1,\"1993\":1}}],[\"新的dom节点\",{\"1\":{\"1862\":1}}],[\"新的vnode和旧的oldvnode中都有\",{\"1\":{\"1789\":1}}],[\"新的vnode中没有而旧的oldvnode中有\",{\"1\":{\"1789\":1}}],[\"新的vnode中有而旧的oldvnode中没有\",{\"1\":{\"1789\":1}}],[\"新的组件\",{\"0\":{\"1513\":1}}],[\"新的合成型\",{\"1\":{\"1485\":1}}],[\"新的生命周期钩子\",{\"1\":{\"1480\":1}}],[\"新的内置组件\",{\"1\":{\"1480\":1}}],[\"新的内容\",{\"1\":{\"894\":1}}],[\"新的特性\",{\"0\":{\"1480\":1}}],[\"新的真实\",{\"1\":{\"1394\":2}}],[\"新的虚拟\",{\"1\":{\"1394\":1}}],[\"新的语法规则\",{\"1\":{\"1250\":1}}],[\"新的\",{\"1\":{\"1158\":1,\"1951\":1}}],[\"新的样式值\",{\"0\":{\"1127\":1}}],[\"新的图像层级比较高\",{\"1\":{\"743\":1}}],[\"新的图像\",{\"1\":{\"743\":1}}],[\"新的文档\",{\"1\":{\"181\":1}}],[\"新的规范\",{\"1\":{\"37\":1}}],[\"使代码更加便于管理\",{\"1\":{\"2043\":1}}],[\"使应用在加载时根据当前\",{\"1\":{\"2026\":1}}],[\"使之成为跟新的\",{\"1\":{\"1789\":1}}],[\"使异步代码更加清晰\",{\"1\":{\"1776\":1}}],[\"使命的意味\",{\"1\":{\"1705\":1}}],[\"使人类得以生存和成功\",{\"1\":{\"1678\":1}}],[\"使模型能够恢复任意的变换\",{\"1\":{\"1665\":1}}],[\"使输出具有特定形状\",{\"1\":{\"1663\":1}}],[\"使\",{\"0\":{\"1891\":1},\"1\":{\"1324\":1,\"2063\":1}}],[\"使所有变量\",{\"1\":{\"1313\":1}}],[\"使其永远不会再成为响应式对象\",{\"1\":{\"1506\":1}}],[\"使其能够享受位置感知的服务\",{\"1\":{\"1099\":1}}],[\"使其轻量又高效\",{\"1\":{\"215\":1}}],[\"使标签中的文本可编辑\",{\"1\":{\"685\":1}}],[\"使单行文字在一个元素中垂直居中\",{\"1\":{\"621\":1}}],[\"使新函数在返回原有\",{\"1\":{\"402\":1}}],[\"使服务端无状态化\",{\"1\":{\"362\":1}}],[\"使服务端有状态化\",{\"1\":{\"362\":1}}],[\"使开发者可以使用\",{\"1\":{\"222\":1}}],[\"使得针对所有的路由请求\",{\"1\":{\"2050\":1}}],[\"使得管理\",{\"1\":{\"2016\":1}}],[\"使得应用在状态变化时能够自动更新视图\",{\"1\":{\"2016\":1}}],[\"使得其中一个proxy实例继承了另一个proxy实例时\",{\"1\":{\"1910\":1}}],[\"使得副作用函数重新执行才对\",{\"1\":{\"1902\":1}}],[\"使得在对序列进行处理时\",{\"1\":{\"1678\":1}}],[\"使得开发变得困难和模糊\",{\"1\":{\"995\":1}}],[\"使得一些第三方库可以融于到\",{\"1\":{\"122\":1}}],[\"使得\",{\"1\":{\"37\":1}}],[\"使用相同的密钥对密文进行解密以获取原始的明文消息\",{\"1\":{\"2099\":1}}],[\"使用相对较少\",{\"1\":{\"348\":1}}],[\"使用伪造的证书进行攻击\",{\"1\":{\"2091\":1}}],[\"使用新的子树与上一次渲染的子树进行打补丁操作\",{\"1\":{\"1954\":1}}],[\"使用数据代理的方式\",{\"1\":{\"1937\":1}}],[\"使用原始值查找是查找不到的\",{\"1\":{\"1922\":1}}],[\"使用当前头部节点oldstartvnode\",{\"1\":{\"1966\":1}}],[\"使用当前元素\",{\"1\":{\"1878\":1}}],[\"使用当前的描点\",{\"1\":{\"717\":1}}],[\"使用基础\",{\"1\":{\"1825\":2}}],[\"使用假设分配求得\",{\"1\":{\"1735\":1}}],[\"使用model\",{\"1\":{\"1670\":1}}],[\"使用msi类型安装时会安装mongodb的二进制文件和默认的配置文件\",{\"1\":{\"177\":1}}],[\"使用inplace=true有时也可能会导致不可预测的结果或者梯度计算的错误\",{\"1\":{\"1666\":1}}],[\"使用intersectionobserver\",{\"1\":{\"512\":1}}],[\"使用nvidia\",{\"1\":{\"1675\":1}}],[\"使用nn\",{\"1\":{\"1666\":1}}],[\"使用new关键字但是没有传入任何参数\",{\"1\":{\"876\":1}}],[\"使用new关键字与map\",{\"1\":{\"868\":1}}],[\"使用https\",{\"1\":{\"1648\":1}}],[\"使用http\",{\"1\":{\"1648\":1}}],[\"使用has\",{\"1\":{\"862\":1}}],[\"使用浏览器自带的调试器模拟离线操作\",{\"1\":{\"1580\":1}}],[\"使用异步的方式\",{\"1\":{\"1558\":1}}],[\"使用过vue或其他基于webpack搭建的工程\",{\"1\":{\"1543\":1}}],[\"使用过滤器\",{\"1\":{\"1397\":1}}],[\"使用suspense包裹组件\",{\"1\":{\"1516\":1}}],[\"使用sort\",{\"1\":{\"944\":1}}],[\"使用传统\",{\"1\":{\"1511\":1}}],[\"使用程序员自定义的ref\",{\"1\":{\"1507\":1}}],[\"使用属性来分组\",{\"1\":{\"1485\":1}}],[\"使用占位符声明接收params参数\",{\"1\":{\"1461\":1}}],[\"使用占位符编译出来的\",{\"1\":{\"1299\":1}}],[\"使用具体的类名引入相关动画效果\",{\"1\":{\"1441\":1}}],[\"使用<script\",{\"1\":{\"1493\":1}}],[\"使用<transition>包裹要过渡的元素\",{\"1\":{\"1441\":1}}],[\"使用<canvas>标签时\",{\"1\":{\"701\":1}}],[\"使用步骤\",{\"1\":{\"1439\":1,\"1516\":1,\"1723\":1}}],[\"使用场景\",{\"1\":{\"1437\":1,\"1506\":1}}],[\"使用场合\",{\"0\":{\"1259\":1}}],[\"使用插件\",{\"1\":{\"1432\":1}}],[\"使用混合\",{\"1\":{\"1431\":1}}],[\"使用children配置项\",{\"1\":{\"1458\":1}}],[\"使用createelm创建\",{\"1\":{\"1423\":1}}],[\"使用callable函数查看函数是否可以被调用\",{\"1\":{\"402\":1}}],[\"使用组件\",{\"0\":{\"1417\":1}}],[\"使用template可以配置组件结构\",{\"1\":{\"1415\":1}}],[\"使用事件总线\",{\"1\":{\"1438\":1}}],[\"使用事件的捕获模式\",{\"1\":{\"1369\":1}}],[\"使用事件委托时用\",{\"0\":{\"1242\":1}}],[\"使用vue准备好的内置ref\",{\"1\":{\"1507\":1}}],[\"使用vue\",{\"1\":{\"1415\":1}}],[\"使用v\",{\"1\":{\"1368\":1,\"1390\":1,\"1429\":1}}],[\"使用values\",{\"1\":{\"846\":1}}],[\"使用嵌套代替层叠或与层叠结合使用\",{\"1\":{\"1331\":1}}],[\"使用成员\",{\"0\":{\"1302\":1}}],[\"使用环境\",{\"1\":{\"1299\":1}}],[\"使用分析\",{\"0\":{\"1299\":1}}],[\"使用实例\",{\"1\":{\"1186\":1}}],[\"使用preventdefault\",{\"1\":{\"1156\":1}}],[\"使用return\",{\"1\":{\"1156\":1}}],[\"使用returnvalue\",{\"1\":{\"1156\":1}}],[\"使用repr\",{\"1\":{\"384\":1}}],[\"使用这个密钥将消息加密\",{\"1\":{\"2099\":1}}],[\"使用这个方法来获取元素当前的样式\",{\"0\":{\"1129\":1}}],[\"使用这两种映射简化上述定义计算属性的操作\",{\"1\":{\"1453\":1}}],[\"使用这些\",{\"1\":{\"1396\":1}}],[\"使用这些词作为变量名将会报错\",{\"1\":{\"958\":1}}],[\"使用这些属性\",{\"1\":{\"924\":1}}],[\"使用指定的子节点替换已有的子节点\",{\"0\":{\"1122\":1}}],[\"使用该方法总会返回唯一的一个元素\",{\"1\":{\"1112\":1}}],[\"使用系统通知的一个好处在于\",{\"1\":{\"1105\":1}}],[\"使用作为观察用的\",{\"1\":{\"1102\":1}}],[\"使用window\",{\"1\":{\"1088\":1}}],[\"使用document\",{\"1\":{\"1087\":1}}],[\"使用delete\",{\"1\":{\"862\":1}}],[\"使用注意点\",{\"1\":{\"995\":1}}],[\"使用它就相当于设置样式时用了\",{\"1\":{\"1206\":1}}],[\"使用它的名称\",{\"1\":{\"982\":1}}],[\"使用它区别是什么\",{\"1\":{\"955\":1,\"959\":1}}],[\"使用的文件\",{\"0\":{\"1319\":1}}],[\"使用的是\",{\"1\":{\"1250\":1,\"2044\":1}}],[\"使用的默认的语言\",{\"1\":{\"1091\":1}}],[\"使用的方法为json\",{\"1\":{\"896\":1,\"897\":1}}],[\"使用的一些注意事项\",{\"1\":{\"238\":1}}],[\"使用毫秒的格式\",{\"1\":{\"877\":1}}],[\"使用add\",{\"1\":{\"861\":1}}],[\"使用asyncio模块\",{\"1\":{\"408\":1}}],[\"使用entries\",{\"1\":{\"846\":1}}],[\"使用keys\",{\"1\":{\"846\":1}}],[\"使用迭代器进行遍历\",{\"1\":{\"846\":1}}],[\"使用for\",{\"1\":{\"830\":1,\"870\":1}}],[\"使用fetch拉取代码后\",{\"1\":{\"13\":1}}],[\"使用一个变量来存储数组的长度\",{\"1\":{\"822\":1}}],[\"使用两个\",{\"1\":{\"803\":1}}],[\"使用+符号做相加运算时\",{\"1\":{\"801\":1}}],[\"使用0o作为前缀\",{\"1\":{\"792\":1}}],[\"使用模型来表示对象之间的关系\",{\"1\":{\"1109\":1}}],[\"使用模板字面量语法创建一个字符串\",{\"1\":{\"790\":1}}],[\"使用模块时\",{\"1\":{\"1308\":1}}],[\"使用模块\",{\"1\":{\"35\":1}}],[\"使用可选编码参数可指定其他格式\",{\"1\":{\"773\":1}}],[\"使用拖放操作进行选择\",{\"1\":{\"772\":1}}],[\"使用表单输入进行选择\",{\"1\":{\"772\":1}}],[\"使用表达式\",{\"1\":{\"389\":1}}],[\"使用响应式布局\",{\"1\":{\"651\":1}}],[\"使用方位词时必须要同时指定两个值\",{\"1\":{\"630\":1}}],[\"使用方式除了关键词由\",{\"1\":{\"1445\":1}}],[\"使用方式相同\",{\"1\":{\"1309\":1}}],[\"使用方式和数组相同\",{\"1\":{\"891\":1}}],[\"使用方式\",{\"1\":{\"623\":1,\"1431\":1,\"1446\":1}}],[\"使用方法如下\",{\"1\":{\"1667\":1}}],[\"使用方法\",{\"1\":{\"317\":1}}],[\"使用默认值\",{\"0\":{\"532\":1},\"1\":{\"532\":1}}],[\"使用继承后\",{\"1\":{\"1299\":1}}],[\"使用继承\",{\"0\":{\"531\":1}}],[\"使用js实现一个repeat方法\",{\"1\":{\"490\":1}}],[\"使用示例\",{\"1\":{\"476\":1}}],[\"使用object\",{\"0\":{\"467\":1}}],[\"使用圣杯模式实现继承\",{\"1\":{\"466\":1,\"1072\":1}}],[\"使用装饰器技术\",{\"1\":{\"405\":1}}],[\"使用在实例化前与类进行交互\",{\"1\":{\"405\":1}}],[\"使用捕获异常的方式获取这个异常的名\",{\"1\":{\"403\":1}}],[\"使用循环生成多个工厂函数时的问题\",{\"1\":{\"402\":1}}],[\"使用字典和元组的解包参数来作为形参\",{\"1\":{\"402\":1}}],[\"使用解包参数的函数\",{\"1\":{\"402\":1}}],[\"使用切片的方\",{\"1\":{\"401\":1}}],[\"使用函数式编程\",{\"1\":{\"2035\":1}}],[\"使用函数\",{\"1\":{\"384\":1}}],[\"使用函数封装公共操作\",{\"1\":{\"310\":1}}],[\"使用单引号\",{\"1\":{\"383\":1}}],[\"使用前需要验证合法性\",{\"1\":{\"350\":1}}],[\"使用格式如下\",{\"1\":{\"304\":1}}],[\"使用较多\",{\"1\":{\"275\":1}}],[\"使用时\",{\"1\":{\"1453\":1,\"1893\":1,\"1894\":1,\"1897\":2}}],[\"使用时会报错\",{\"1\":{\"798\":1}}],[\"使用时有几点注意\",{\"1\":{\"237\":1}}],[\"使用时可以省略\",{\"1\":{\"77\":1}}],[\"使用了v\",{\"1\":{\"1795\":1}}],[\"使用了一种极为简单的消息传递模式\",{\"1\":{\"1628\":1}}],[\"使用了一个事件驱动\",{\"1\":{\"215\":1}}],[\"使用了\",{\"1\":{\"1499\":1}}],[\"使用了非常强大的\",{\"1\":{\"134\":1}}],[\"使用流程\",{\"0\":{\"191\":1}}],[\"使用文件路径作为每个模块的唯一标识符\",{\"1\":{\"155\":1}}],[\"使用详细\",{\"1\":{\"85\":1}}],[\"使用教程\",{\"1\":{\"78\":1}}],[\"使用命令npx\",{\"1\":{\"66\":1}}],[\"使用下面的代码可以检测在鼠标单击时\",{\"1\":{\"1154\":1}}],[\"使用下面的代码\",{\"1\":{\"50\":1}}],[\"使用依赖\",{\"1\":{\"46\":1}}],[\"使用第三方不基于\",{\"0\":{\"45\":1}}],[\"使用第三方基于\",{\"0\":{\"44\":1}}],[\"使用\",{\"0\":{\"4\":1,\"70\":1,\"124\":1,\"148\":1,\"225\":1,\"299\":1,\"321\":1,\"769\":1,\"781\":1,\"1080\":1,\"1102\":1,\"1105\":1,\"1124\":1,\"1307\":1,\"1320\":1,\"1376\":1,\"1482\":1,\"1483\":1,\"1543\":1},\"1\":{\"64\":1,\"69\":1,\"91\":1,\"129\":1,\"138\":1,\"205\":4,\"262\":1,\"272\":1,\"284\":1,\"317\":1,\"349\":1,\"350\":2,\"355\":1,\"378\":1,\"402\":3,\"405\":1,\"408\":1,\"449\":2,\"568\":1,\"680\":1,\"767\":1,\"824\":1,\"828\":1,\"863\":1,\"876\":1,\"948\":2,\"995\":2,\"1086\":1,\"1091\":1,\"1100\":1,\"1105\":1,\"1201\":1,\"1250\":1,\"1268\":1,\"1269\":1,\"1270\":1,\"1271\":1,\"1274\":1,\"1279\":1,\"1287\":1,\"1293\":1,\"1303\":1,\"1304\":1,\"1308\":1,\"1313\":2,\"1319\":3,\"1327\":1,\"1358\":2,\"1394\":1,\"1401\":1,\"1478\":1,\"1530\":1,\"1605\":1,\"1647\":1,\"1649\":1,\"1655\":1,\"1656\":1,\"1666\":1,\"1669\":1,\"1671\":1,\"1674\":1,\"1676\":2,\"1785\":1,\"1867\":1,\"1878\":1,\"1896\":1,\"1897\":3,\"1901\":1,\"1907\":1,\"1910\":1,\"1915\":2,\"1917\":1,\"1932\":1,\"1936\":1,\"1937\":2,\"1974\":1,\"2040\":1,\"2061\":1,\"2065\":1,\"2076\":1,\"2095\":1}}],[\"导航触发\",{\"1\":{\"2071\":1}}],[\"导航函数\",{\"1\":{\"2050\":1}}],[\"导航\",{\"1\":{\"2032\":1}}],[\"导航被确认\",{\"1\":{\"2029\":1}}],[\"导航被触发\",{\"1\":{\"2029\":1}}],[\"导航守卫执行流程\",{\"0\":{\"2077\":1}}],[\"导航守卫相关源码\",{\"0\":{\"2072\":1}}],[\"导航守卫可以分为三大类\",{\"1\":{\"2071\":1}}],[\"导航守卫流程解析\",{\"0\":{\"2071\":1}}],[\"导航守卫是如何使用的\",{\"1\":{\"2043\":1}}],[\"导航守卫\",{\"1\":{\"2041\":1}}],[\"导航守卫实际上就是发生在路由路径切换的时候\",{\"1\":{\"2029\":1}}],[\"导航守卫队列\",{\"1\":{\"2029\":2}}],[\"导航钩子等\",{\"1\":{\"2029\":1}}],[\"导航菜单\",{\"1\":{\"661\":1}}],[\"导出资源的源代码\",{\"1\":{\"142\":1}}],[\"导出一个资源的\",{\"1\":{\"142\":1}}],[\"导入数据集\",{\"0\":{\"1654\":1}}],[\"导入语句\",{\"0\":{\"1316\":1}}],[\"导入的路由对象\",{\"1\":{\"2034\":1}}],[\"导入的文件的内容就像是直接写在\",{\"1\":{\"1320\":1}}],[\"导入的文件中的所有\",{\"1\":{\"1313\":1}}],[\"导入的所有成员和代码\",{\"1\":{\"1320\":1}}],[\"导入的\",{\"1\":{\"1314\":1}}],[\"导入的符号列表\",{\"1\":{\"50\":1}}],[\"导入多个文件\",{\"1\":{\"1313\":1}}],[\"导入一个目录时\",{\"1\":{\"1308\":1}}],[\"导入一个模块时\",{\"1\":{\"37\":1}}],[\"导入模块的基本流程\",{\"0\":{\"239\":1}}],[\"导入模块\",{\"1\":{\"236\":1,\"378\":1}}],[\"导入模块时\",{\"1\":{\"59\":1}}],[\"导入\",{\"0\":{\"238\":1},\"1\":{\"191\":1,\"212\":5,\"238\":1,\"239\":1,\"250\":1,\"263\":2,\"273\":1,\"282\":1,\"283\":1,\"284\":3,\"287\":2,\"301\":1,\"304\":1,\"305\":1,\"321\":1,\"329\":1,\"368\":1,\"1319\":5,\"1441\":1}}],[\"导入时配置模块成员\",{\"0\":{\"1320\":1}}],[\"导入时路径建议写\",{\"1\":{\"238\":1}}],[\"导入时使用的符号是常量\",{\"1\":{\"50\":1}}],[\"导入时\",{\"1\":{\"50\":1}}],[\"导入代码必须放置到所有代码之前\",{\"1\":{\"50\":1}}],[\"导入任何其他模块\",{\"1\":{\"50\":1}}],[\"导入项目\",{\"1\":{\"39\":1,\"45\":1}}],[\"导致调用栈溢出\",{\"1\":{\"1925\":1}}],[\"导致循环结束不了\",{\"1\":{\"1890\":1}}],[\"导致数据不必要的更新\",{\"1\":{\"1890\":1}}],[\"导致一旦副作用函数的名字不叫\",{\"1\":{\"1888\":1}}],[\"导致服务器端的数据变化网页端无法进行同步更新\",{\"1\":{\"1579\":1}}],[\"导致很难判断是在哪里定义的\",{\"1\":{\"1313\":1}}],[\"导致这一问题的原因是多方面的\",{\"1\":{\"1158\":1}}],[\"导致程序错乱\",{\"1\":{\"1155\":1}}],[\"导致程序和系统的速度变慢甚至崩溃\",{\"1\":{\"865\":1}}],[\"导致没有办法取到值\",{\"1\":{\"995\":1}}],[\"导致页面的布局混乱\",{\"1\":{\"562\":1}}],[\"导致父元素的高度丢失\",{\"1\":{\"562\":1}}],[\"导致无法下载或者下载很慢\",{\"1\":{\"67\":1}}],[\"导致\",{\"1\":{\"23\":1,\"150\":1,\"565\":1}}],[\"6574\",{\"1\":{\"1803\":1}}],[\"628\",{\"1\":{\"1723\":1}}],[\"620\",{\"1\":{\"1723\":1}}],[\"6914\",{\"1\":{\"1711\":1}}],[\"68297cd8\",{\"1\":{\"1543\":2}}],[\"61\",{\"1\":{\"1353\":1}}],[\"6cm\",{\"1\":{\"1338\":1}}],[\"6759\",{\"1\":{\"1807\":1}}],[\"673\",{\"1\":{\"1723\":2}}],[\"67\",{\"1\":{\"1266\":1}}],[\"6e\",{\"1\":{\"1264\":1}}],[\"666\",{\"1\":{\"1460\":1,\"1461\":2,\"1488\":1}}],[\"6666\",{\"1\":{\"1105\":1}}],[\"666666666666667\",{\"1\":{\"395\":1}}],[\"66\",{\"1\":{\"1368\":2,\"1658\":1,\"1723\":1}}],[\"667vw\",{\"1\":{\"650\":1}}],[\"630\",{\"1\":{\"1723\":1}}],[\"632\",{\"1\":{\"1714\":2}}],[\"638150400000\",{\"1\":{\"877\":2}}],[\"638121600000\",{\"1\":{\"875\":2,\"876\":1}}],[\"63\",{\"1\":{\"488\":1}}],[\"6实现子类\",{\"1\":{\"405\":1}}],[\"6工厂函数\",{\"1\":{\"402\":1}}],[\"6ypzuibnahr0ye827gn\",{\"1\":{\"350\":3}}],[\"608\",{\"1\":{\"1720\":2}}],[\"60k\",{\"1\":{\"1488\":1}}],[\"60b\",{\"1\":{\"1273\":3}}],[\"60px\",{\"1\":{\"619\":1,\"732\":1,\"1087\":1}}],[\"600+次\",{\"1\":{\"1475\":1}}],[\"600\",{\"1\":{\"555\":1,\"667\":1,\"1290\":6,\"1714\":2,\"1723\":3}}],[\"60\",{\"1\":{\"349\":1,\"355\":1,\"368\":1,\"395\":1,\"422\":2,\"619\":1,\"696\":3,\"732\":1,\"1087\":1,\"1556\":1,\"1718\":1,\"1746\":1}}],[\"649481567\",{\"1\":{\"2065\":1}}],[\"642=31\",{\"1\":{\"1723\":1}}],[\"640796400000\",{\"1\":{\"877\":1}}],[\"640828800000\",{\"1\":{\"875\":1}}],[\"640\",{\"1\":{\"673\":1,\"674\":1}}],[\"64\",{\"1\":{\"263\":1,\"1662\":3,\"1667\":3,\"1669\":2}}],[\"64k\",{\"1\":{\"252\":1,\"263\":1}}],[\"6\",{\"0\":{\"44\":1,\"73\":1,\"182\":1,\"199\":1,\"223\":1,\"260\":1,\"282\":1,\"317\":1,\"350\":1,\"393\":1,\"400\":1,\"521\":1,\"548\":1,\"590\":1,\"632\":1,\"666\":1,\"715\":1,\"740\":1,\"752\":1,\"816\":1,\"832\":1,\"846\":1,\"864\":1,\"872\":1,\"914\":1,\"940\":1,\"985\":1,\"1157\":1,\"1239\":1,\"1367\":1,\"1424\":1,\"1432\":1,\"1453\":1,\"1461\":1,\"1493\":1,\"1509\":1,\"1580\":1,\"1666\":1,\"1700\":1,\"1723\":1,\"1805\":1,\"1893\":1,\"1932\":1,\"1959\":1,\"2013\":1,\"2045\":1},\"1\":{\"37\":1,\"148\":6,\"149\":10,\"182\":1,\"191\":1,\"200\":1,\"239\":1,\"321\":1,\"382\":1,\"385\":2,\"389\":1,\"395\":1,\"396\":1,\"402\":13,\"405\":1,\"408\":2,\"449\":5,\"486\":2,\"487\":3,\"488\":3,\"650\":1,\"771\":1,\"790\":2,\"792\":1,\"803\":2,\"828\":4,\"830\":1,\"846\":2,\"847\":1,\"849\":3,\"854\":16,\"857\":1,\"858\":1,\"859\":1,\"864\":2,\"866\":1,\"867\":1,\"875\":1,\"877\":1,\"906\":1,\"933\":1,\"934\":1,\"941\":2,\"945\":6,\"946\":2,\"947\":1,\"948\":1,\"953\":1,\"992\":1,\"1039\":1,\"1054\":1,\"1086\":1,\"1286\":1,\"1338\":1,\"1446\":1,\"1494\":1,\"1712\":1,\"1723\":3,\"1746\":1,\"1779\":3,\"1865\":1,\"2041\":1,\"2053\":1}}],[\"|false\",{\"1\":{\"1227\":1}}],[\"||\",{\"0\":{\"809\":1},\"1\":{\"418\":1,\"421\":1,\"428\":1,\"436\":1,\"438\":1,\"441\":1,\"443\":1,\"458\":1,\"472\":1,\"478\":1,\"483\":1,\"498\":1,\"727\":1,\"809\":11,\"1038\":2,\"1151\":1,\"1153\":1,\"1160\":2,\"1161\":8,\"1162\":3,\"1353\":1,\"1354\":1,\"1358\":4,\"1366\":1,\"1394\":1,\"1423\":1,\"1428\":1,\"1430\":1,\"1777\":1,\"1786\":4,\"1789\":1,\"1792\":10,\"1794\":2,\"1795\":3,\"1796\":1,\"1799\":1,\"1802\":2,\"1804\":5,\"1805\":1,\"1810\":1,\"1814\":1,\"1816\":1,\"1822\":1,\"1824\":1,\"1825\":3,\"1828\":1,\"1836\":1,\"1855\":2,\"1888\":1,\"1897\":2,\"1906\":1,\"1909\":1,\"1910\":1,\"1914\":1,\"1917\":1,\"1918\":1,\"1924\":1,\"1925\":1,\"1929\":3,\"1930\":2,\"1932\":1,\"1949\":2,\"1954\":2,\"1974\":1,\"1990\":2,\"1993\":3,\"1998\":1,\"2020\":1,\"2026\":1,\"2027\":1,\"2029\":2,\"2031\":1,\"2034\":1,\"2054\":1,\"2058\":2,\"2065\":5,\"2068\":1,\"2069\":3,\"2070\":1,\"2075\":2}}],[\"|\",{\"1\":{\"34\":6,\"40\":8,\"153\":1,\"251\":1,\"399\":1,\"605\":1,\"752\":77,\"816\":56,\"889\":1,\"902\":58,\"914\":1,\"920\":1,\"1131\":1,\"1227\":1,\"1357\":1,\"1358\":5,\"1397\":2,\"1407\":1,\"1427\":16,\"1515\":1,\"1715\":3,\"1723\":2,\"1779\":1,\"1786\":2,\"1788\":1,\"1791\":1,\"1793\":1,\"1794\":5,\"1802\":5,\"1804\":3,\"1805\":1,\"1824\":2,\"1836\":1,\"1949\":2,\"2045\":4,\"2050\":1,\"2058\":14,\"2060\":2,\"2061\":2,\"2063\":1,\"2065\":4,\"2066\":2,\"2068\":2,\"2075\":6,\"2084\":3}}],[\"难以被破解缺点\",{\"1\":{\"2101\":1}}],[\"难以维护\",{\"1\":{\"31\":1}}],[\"难道就一定要用\",{\"1\":{\"25\":1}}],[\"5+\",{\"1\":{\"2029\":1}}],[\"512\",{\"1\":{\"2101\":3}}],[\"51\",{\"1\":{\"1658\":1}}],[\"51153153\",{\"1\":{\"1087\":1}}],[\"5mb\",{\"1\":{\"1436\":1}}],[\"5mm\",{\"1\":{\"1338\":1}}],[\"57\",{\"1\":{\"1353\":1}}],[\"5cm\",{\"1\":{\"1338\":2}}],[\"5c068fd8f265da61524d2abc\",{\"1\":{\"219\":1}}],[\"5rem\",{\"1\":{\"1260\":2,\"1307\":1}}],[\"5200\",{\"1\":{\"1264\":1}}],[\"52\",{\"1\":{\"1162\":1}}],[\"56\",{\"1\":{\"1162\":1,\"1534\":4}}],[\"55\",{\"1\":{\"946\":1,\"1161\":1,\"1477\":1,\"1718\":1}}],[\"5500\",{\"1\":{\"176\":1}}],[\"54\",{\"1\":{\"857\":1,\"1477\":1}}],[\"5eb63bbbe01eeed093cb22bb8f5acdc3\",{\"1\":{\"2101\":1}}],[\"5e\",{\"1\":{\"794\":1}}],[\"5px\",{\"1\":{\"773\":1,\"1264\":1,\"1284\":2,\"1297\":2,\"1298\":6}}],[\"590774400000\",{\"1\":{\"877\":1}}],[\"59\",{\"1\":{\"772\":1,\"877\":4,\"1161\":1}}],[\"53\",{\"1\":{\"765\":1,\"1720\":1}}],[\"5s\",{\"1\":{\"644\":1}}],[\"50px\",{\"1\":{\"613\":1,\"621\":1,\"630\":1,\"636\":1,\"1087\":6,\"1153\":1,\"1207\":2,\"1269\":5,\"1288\":5,\"1295\":1,\"1327\":1,\"1334\":2}}],[\"50\",{\"1\":{\"582\":1,\"602\":4,\"612\":2,\"707\":4,\"726\":1,\"767\":1,\"790\":1,\"883\":2,\"1087\":1,\"1088\":7,\"1239\":5,\"1292\":1,\"1293\":1,\"1296\":2,\"1718\":3,\"1720\":4,\"1723\":1}}],[\"5001\",{\"1\":{\"1445\":1}}],[\"5000\",{\"1\":{\"1088\":2,\"1105\":1,\"1444\":1,\"1445\":2}}],[\"5000px\",{\"1\":{\"1087\":1,\"1150\":1,\"1153\":1}}],[\"500px\",{\"1\":{\"616\":1,\"651\":1,\"1155\":2,\"1296\":1}}],[\"500\",{\"1\":{\"271\":1,\"307\":1,\"388\":1,\"498\":1,\"555\":1,\"1221\":3,\"1224\":3,\"1277\":2,\"1290\":6,\"1507\":1,\"1575\":1,\"1635\":1}}],[\"5类变量的私有化类属性\",{\"1\":{\"405\":1}}],[\"5总结\",{\"1\":{\"402\":1}}],[\"589\",{\"1\":{\"1714\":2}}],[\"5860889\",{\"1\":{\"918\":1}}],[\"58\",{\"1\":{\"382\":1,\"1353\":1}}],[\"5dd662b5381fc316b44ce167\",{\"1\":{\"203\":1}}],[\"5dd65f32be6401035cb5b1ed\",{\"1\":{\"201\":1}}],[\"5中启用file\",{\"1\":{\"142\":1}}],[\"5\",{\"0\":{\"31\":1,\"37\":1,\"43\":1,\"72\":1,\"175\":1,\"181\":1,\"193\":1,\"222\":1,\"256\":1,\"276\":1,\"316\":1,\"329\":1,\"349\":1,\"356\":1,\"362\":1,\"392\":1,\"399\":1,\"520\":1,\"533\":1,\"547\":1,\"572\":1,\"589\":1,\"614\":1,\"631\":1,\"665\":1,\"714\":1,\"733\":1,\"739\":1,\"751\":1,\"761\":1,\"762\":1,\"798\":1,\"815\":1,\"823\":1,\"831\":1,\"845\":1,\"863\":1,\"871\":1,\"909\":1,\"939\":1,\"959\":1,\"984\":1,\"1021\":1,\"1031\":1,\"1040\":1,\"1049\":1,\"1073\":1,\"1141\":1,\"1156\":1,\"1181\":1,\"1202\":1,\"1213\":1,\"1219\":1,\"1225\":1,\"1231\":1,\"1238\":1,\"1256\":1,\"1296\":1,\"1363\":1,\"1376\":1,\"1396\":1,\"1403\":1,\"1423\":1,\"1431\":1,\"1452\":1,\"1460\":1,\"1492\":1,\"1508\":1,\"1579\":1,\"1665\":1,\"1699\":1,\"1722\":1,\"1729\":1,\"1735\":1,\"1804\":1,\"1828\":1,\"1860\":1,\"1881\":1,\"1892\":1,\"1931\":1,\"1941\":1,\"1993\":1,\"2012\":1,\"2044\":1},\"1\":{\"37\":1,\"78\":1,\"142\":3,\"148\":2,\"149\":4,\"165\":1,\"182\":1,\"191\":1,\"239\":1,\"281\":1,\"321\":1,\"349\":1,\"386\":1,\"387\":1,\"388\":5,\"402\":7,\"405\":2,\"408\":2,\"439\":1,\"449\":5,\"535\":1,\"623\":4,\"650\":1,\"694\":1,\"707\":4,\"725\":2,\"726\":1,\"740\":1,\"746\":2,\"758\":1,\"762\":2,\"763\":1,\"764\":1,\"766\":1,\"768\":2,\"771\":1,\"780\":1,\"782\":2,\"783\":3,\"785\":1,\"789\":1,\"792\":1,\"803\":4,\"805\":4,\"808\":2,\"812\":4,\"813\":3,\"814\":4,\"822\":2,\"832\":1,\"835\":2,\"842\":1,\"843\":1,\"844\":2,\"845\":2,\"846\":13,\"848\":2,\"849\":2,\"851\":4,\"854\":14,\"855\":3,\"856\":1,\"857\":2,\"863\":4,\"864\":2,\"865\":1,\"877\":1,\"881\":2,\"893\":2,\"895\":1,\"913\":1,\"916\":1,\"923\":1,\"925\":2,\"931\":1,\"945\":5,\"946\":14,\"947\":1,\"951\":3,\"956\":1,\"958\":2,\"985\":1,\"992\":1,\"995\":7,\"1039\":4,\"1054\":1,\"1065\":1,\"1087\":1,\"1088\":3,\"1099\":3,\"1100\":2,\"1101\":2,\"1102\":1,\"1105\":6,\"1125\":1,\"1139\":1,\"1140\":1,\"1148\":2,\"1156\":1,\"1181\":2,\"1201\":3,\"1225\":2,\"1260\":1,\"1264\":3,\"1285\":3,\"1286\":2,\"1338\":1,\"1353\":1,\"1482\":1,\"1560\":1,\"1656\":2,\"1664\":1,\"1670\":1,\"1671\":1,\"1680\":1,\"1712\":1,\"1718\":4,\"1720\":3,\"1722\":3,\"1723\":1,\"1746\":1,\"1779\":3,\"1792\":2,\"1804\":1,\"1974\":1,\"2041\":1,\"2053\":1,\"2073\":2,\"2087\":1}}],[\"引发的行为实际上是各浏览器自行定义的\",{\"1\":{\"1153\":1}}],[\"引号来表示\",{\"1\":{\"383\":1}}],[\"引用静态资源\",{\"1\":{\"1583\":1}}],[\"引用vuex\",{\"1\":{\"1451\":1}}],[\"引用的是同一个函数\",{\"1\":{\"1216\":1}}],[\"引用计数方式\",{\"1\":{\"1031\":2}}],[\"引用计数的含义是跟踪记录每个值被引用的次数\",{\"1\":{\"1030\":1}}],[\"引用计数\",{\"0\":{\"1030\":1}}],[\"引用计数不太常用\",{\"1\":{\"1028\":1}}],[\"引用赋值\",{\"1\":{\"985\":1}}],[\"引用一个复杂对象时\",{\"1\":{\"982\":1}}],[\"引用访问\",{\"1\":{\"982\":1}}],[\"引用它们会转移其值\",{\"1\":{\"982\":1}}],[\"引用值\",{\"0\":{\"981\":1}}],[\"引用\",{\"0\":{\"966\":1}}],[\"引用捕获的内容\",{\"1\":{\"911\":1}}],[\"引用后\",{\"1\":{\"773\":1}}],[\"引用地址\",{\"1\":{\"381\":1}}],[\"引用模块\",{\"1\":{\"35\":1}}],[\"引入tree\",{\"1\":{\"1875\":1}}],[\"引入友好的警告信息\",{\"1\":{\"1875\":1}}],[\"引入的是一个名为createapp的工厂函数\",{\"1\":{\"1484\":1}}],[\"引入的不再是vue构造函数了\",{\"1\":{\"1484\":1}}],[\"引入的文件中定义的顶级\",{\"1\":{\"1314\":1}}],[\"引入luyou\",{\"1\":{\"1456\":1}}],[\"引入store\",{\"1\":{\"1450\":1,\"2013\":1}}],[\"引入app组件\",{\"1\":{\"1427\":1}}],[\"引入vuerouter\",{\"1\":{\"1456\":1}}],[\"引入vuex\",{\"1\":{\"1450\":1,\"1451\":1}}],[\"引入vue核心库\",{\"1\":{\"1450\":1,\"1451\":1}}],[\"引入vue\",{\"1\":{\"1427\":1}}],[\"引入时\",{\"1\":{\"1306\":1}}],[\"引入时的配置\",{\"0\":{\"1306\":1}}],[\"引入一个模块\",{\"1\":{\"1302\":1}}],[\"引入类变量的私有化\",{\"1\":{\"405\":1}}],[\"引入express\",{\"1\":{\"1573\":1}}],[\"引入express框架\",{\"1\":{\"316\":1}}],[\"引入ejs\",{\"1\":{\"327\":1}}],[\"引入子路由文件\",{\"1\":{\"321\":1}}],[\"引入http模块\",{\"1\":{\"285\":1}}],[\"引入mongoose\",{\"1\":{\"200\":1}}],[\"引入带有字体的css文件\",{\"1\":{\"143\":1}}],[\"引入createpinia\",{\"1\":{\"2010\":1}}],[\"引入css模块\",{\"1\":{\"138\":1}}],[\"引入clean\",{\"1\":{\"129\":1}}],[\"引入使用模块\",{\"1\":{\"42\":1,\"45\":1}}],[\"引入模块\",{\"1\":{\"35\":1}}],[\"引入依赖\",{\"1\":{\"30\":1}}],[\"引入\",{\"0\":{\"238\":1,\"1936\":1},\"1\":{\"30\":1,\"128\":1,\"349\":1,\"355\":1,\"377\":1,\"379\":1,\"659\":1,\"701\":1,\"1439\":1}}],[\"引擎执行代码基本流程\",{\"0\":{\"1178\":1}}],[\"引擎模块\",{\"1\":{\"1172\":1}}],[\"引擎中的垃圾回收器自动释放\",{\"1\":{\"1028\":1}}],[\"引擎在代码执行前就创建\",{\"1\":{\"1013\":1}}],[\"引擎如何管理内存\",{\"0\":{\"1002\":1}}],[\"引擎一进来就处于的运行环境\",{\"1\":{\"785\":1}}],[\"引擎允许遗漏声明\",{\"1\":{\"783\":1}}],[\"引擎会报错\",{\"1\":{\"783\":1}}],[\"引擎会自动忽略后面的变量声明\",{\"1\":{\"782\":1}}],[\"引擎\",{\"1\":{\"24\":1,\"216\":1}}],[\"引擎的\",{\"1\":{\"215\":1}}],[\"引擎的支撑\",{\"1\":{\"24\":1}}],[\"引擎的发布引起了他的注意\",{\"1\":{\"24\":1}}],[\"引擎发布\",{\"1\":{\"24\":1}}],[\"用创建好的实例调用\",{\"1\":{\"2029\":1}}],[\"用旧的\",{\"1\":{\"2002\":1}}],[\"用正则等方式解析\",{\"1\":{\"1790\":1}}],[\"用以优化\",{\"1\":{\"1788\":1}}],[\"用部分\",{\"1\":{\"1737\":1}}],[\"用倍数\",{\"1\":{\"1737\":1}}],[\"用末期\",{\"1\":{\"1737\":1}}],[\"用此时被分配数的\",{\"1\":{\"1723\":1}}],[\"用then回调处理\",{\"1\":{\"1584\":1}}],[\"用这种方式实现组件间的通讯\",{\"1\":{\"1439\":1}}],[\"用pubsub\",{\"1\":{\"1439\":1}}],[\"用$off去解绑\",{\"1\":{\"1438\":1}}],[\"用index作为\",{\"1\":{\"1394\":1}}],[\"用的很少\",{\"1\":{\"1392\":2}}],[\"用的非常少\",{\"1\":{\"286\":1}}],[\"用一个全局变量存储当前激活的\",{\"1\":{\"1891\":1}}],[\"用一个全局变量存储被注册的副作用函数\",{\"1\":{\"1888\":1,\"1890\":2}}],[\"用一个\",{\"1\":{\"1216\":1,\"1954\":1}}],[\"用法特殊\",{\"1\":{\"1370\":1}}],[\"用法与\",{\"1\":{\"1253\":1}}],[\"用法\",{\"1\":{\"1118\":1,\"1119\":1,\"1369\":1,\"1824\":1,\"1825\":1,\"1826\":1,\"1827\":1}}],[\"用法类似\",{\"1\":{\"1112\":1}}],[\"用法和\",{\"1\":{\"611\":1}}],[\"用法和padding一样\",{\"1\":{\"546\":1}}],[\"用新的文档替换当前文档\",{\"1\":{\"1094\":1,\"2051\":1}}],[\"用exec\",{\"1\":{\"925\":1}}],[\"用size属性获取元素个数\",{\"1\":{\"862\":1}}],[\"用得到的结果按照前面的规则执行比较\",{\"1\":{\"812\":1}}],[\"用作自定义数据集的基础\",{\"1\":{\"1655\":1}}],[\"用作\",{\"1\":{\"697\":1}}],[\"用效果好的\",{\"1\":{\"666\":1}}],[\"用小的\",{\"1\":{\"666\":1}}],[\"用元素的边框颜色来伪装左右两边侧边栏的背景色\",{\"1\":{\"582\":1}}],[\"用父类来描述\",{\"1\":{\"405\":1}}],[\"用完立即销毁\",{\"1\":{\"402\":1}}],[\"用大括号括起来\",{\"1\":{\"392\":1}}],[\"用=填充\",{\"1\":{\"388\":1}}],[\"用三个\",{\"1\":{\"383\":1}}],[\"用什么就无所谓了\",{\"1\":{\"362\":1}}],[\"用\",{\"1\":{\"362\":1,\"388\":2,\"401\":1,\"405\":1,\"948\":1,\"1219\":1,\"1302\":1,\"1307\":1,\"1737\":1,\"1792\":1,\"1930\":1}}],[\"用解析\",{\"1\":{\"360\":1}}],[\"用简洁的方式展示\",{\"1\":{\"223\":1}}],[\"用于提供一些配置选项\",{\"1\":{\"2069\":1}}],[\"用于临时存储匹配的路由记录\",{\"1\":{\"2068\":1}}],[\"用于配置\",{\"1\":{\"2063\":1}}],[\"用于访问项目的环境变量\",{\"1\":{\"2053\":1}}],[\"用于处理浏览器的前进和后退等操作\",{\"1\":{\"2026\":1}}],[\"用于处理栈中剩余未处理的标签\",{\"1\":{\"1792\":1}}],[\"用于管理浏览器的历史记录和路由状态\",{\"1\":{\"2029\":1}}],[\"用于管理状态数据\",{\"1\":{\"2016\":1}}],[\"用于管理\",{\"1\":{\"2016\":1}}],[\"用于删除当前节点\",{\"1\":{\"1977\":1}}],[\"用于删除字符串的头尾空白符\",{\"1\":{\"889\":1}}],[\"用于替换节点的函数\",{\"1\":{\"1977\":1}}],[\"用于缓存字符\",{\"1\":{\"1974\":1}}],[\"用于缓存创建出来的类\",{\"1\":{\"1825\":1}}],[\"用于判断当前链接是否处于活动状态\",{\"1\":{\"2065\":1}}],[\"用于判断是否是字母\",{\"1\":{\"1974\":1}}],[\"用于判断两个数据是否相等\",{\"1\":{\"1052\":1}}],[\"用于后续更新\",{\"1\":{\"1954\":1}}],[\"用于指定是否要自定义\",{\"1\":{\"2064\":1}}],[\"用于指定使用哪一种模式来进行路由导航\",{\"1\":{\"2064\":1}}],[\"用于指定兼容模式对应的值\",{\"1\":{\"2063\":1}}],[\"用于指定\",{\"1\":{\"1926\":2}}],[\"用于简单的场景\",{\"1\":{\"1827\":1}}],[\"用于创建元素\",{\"1\":{\"1946\":1}}],[\"用于创建一个空的\",{\"1\":{\"1797\":1}}],[\"用于创建一张渐变的图片\",{\"1\":{\"636\":1}}],[\"用于创建文本节点的\",{\"1\":{\"1797\":1}}],[\"用于创建\",{\"1\":{\"1797\":1}}],[\"用于进行反卷积\",{\"1\":{\"1667\":1}}],[\"用于更新求得的均值和方差\",{\"1\":{\"1665\":1}}],[\"用于计算移动平均值的动量系数\",{\"1\":{\"1665\":1}}],[\"用于将\",{\"1\":{\"1797\":1}}],[\"用于将输入张量展平成一个向量\",{\"1\":{\"1661\":1}}],[\"用于将函数体内的\",{\"1\":{\"995\":1}}],[\"用于控制模型复杂度\",{\"1\":{\"1659\":1}}],[\"用于控制流程的语句有\",{\"1\":{\"1283\":1}}],[\"用于对标签进行转换\",{\"1\":{\"1655\":1}}],[\"用于对数据进行转换\",{\"1\":{\"1655\":1}}],[\"用于对文档进行动态操作\",{\"1\":{\"1109\":1}}],[\"用于针对张量数据创建数据集\",{\"1\":{\"1655\":1}}],[\"用于定位网络服务\",{\"1\":{\"1626\":1}}],[\"用于定义页面的主要导航部分\",{\"1\":{\"694\":1}}],[\"用于帮助浏览器判断是否校验通过\",{\"1\":{\"1605\":1}}],[\"用于帮助我们生成与mutations对话的方法\",{\"1\":{\"1453\":1}}],[\"用于帮助我们生成与actions对话的方法\",{\"1\":{\"1453\":1}}],[\"用于帮助我们映射getters中的数据为计算属性\",{\"1\":{\"1453\":1}}],[\"用于帮助我们映射state中的数据为计算属性\",{\"1\":{\"1453\":1}}],[\"用于存放用户操作后产生的事件处理任务\",{\"1\":{\"1560\":1}}],[\"用于存放计时器到达后的回调任务\",{\"1\":{\"1560\":1}}],[\"用于描述这一层的内容该如何画出来\",{\"1\":{\"1526\":1}}],[\"用于读取响应式对象对应的普通对象\",{\"1\":{\"1506\":1}}],[\"用于捕获路由组件的激活状态\",{\"1\":{\"1466\":1}}],[\"用于增强\",{\"1\":{\"1432\":1}}],[\"用于一些动态显示初始值的地方\",{\"1\":{\"1402\":1}}],[\"用于监视data中属性的变化\",{\"1\":{\"1396\":1}}],[\"用于展示列表数据\",{\"1\":{\"1392\":1}}],[\"用于解析标签\",{\"1\":{\"1353\":1}}],[\"用于解析标签体内容\",{\"1\":{\"1352\":1}}],[\"用于解析依赖\",{\"1\":{\"155\":1}}],[\"用于\",{\"1\":{\"1319\":2}}],[\"用于给\",{\"1\":{\"1201\":1}}],[\"用于为\",{\"1\":{\"1201\":2}}],[\"用于显示一个带有指定消息和\",{\"1\":{\"1088\":1}}],[\"用于显示带有一条指定消息和一个确定按钮的警告框\",{\"1\":{\"1088\":1}}],[\"用于混合对象\",{\"1\":{\"1053\":1}}],[\"用于标记的无用变量的策略可能因实现而有所区别\",{\"1\":{\"1028\":1}}],[\"用于查找变量\",{\"1\":{\"1017\":1}}],[\"用于查看数组里面是否包含某个元素\",{\"1\":{\"856\":1}}],[\"用于测试一个字符串是否匹配某个正则表达式\",{\"1\":{\"924\":1}}],[\"用于限定量词或选择项的作用范围\",{\"1\":{\"909\":1}}],[\"用于尾部补全\",{\"1\":{\"893\":1}}],[\"用于头部补全\",{\"1\":{\"893\":1}}],[\"用于表达服务器对这个响应的整体\",{\"1\":{\"1635\":1}}],[\"用于表现颜色的位数\",{\"1\":{\"1098\":1}}],[\"用于表示唯一的值\",{\"1\":{\"858\":1}}],[\"用于表格的行\",{\"1\":{\"548\":1}}],[\"用于反转数组项的顺序\",{\"1\":{\"855\":1}}],[\"用于返回数组元素的个数\",{\"1\":{\"851\":1}}],[\"用于取出可迭代对象的每一项\",{\"1\":{\"849\":1}}],[\"用于本地存储一个会话\",{\"1\":{\"768\":1}}],[\"用于持久化的本地存储\",{\"1\":{\"768\":1}}],[\"用于在浏览器堆栈里面添加一个新的状态\",{\"1\":{\"2050\":1}}],[\"用于在给定的\",{\"1\":{\"1946\":1}}],[\"用于在训练过程中批量加载数据\",{\"1\":{\"1655\":1}}],[\"用于在源对象和目标对象之间传递数据\",{\"1\":{\"765\":1}}],[\"用于在用户播放或者跳帧之前展示\",{\"1\":{\"748\":1}}],[\"用于设定阴影颜色效果\",{\"1\":{\"733\":1}}],[\"用于设定阴影的模糊程度\",{\"1\":{\"733\":1}}],[\"用于设置元素的文本节点\",{\"1\":{\"1946\":1}}],[\"用于设置元素显示的类型\",{\"1\":{\"548\":1}}],[\"用于设置网页中的一些元数据\",{\"1\":{\"659\":1}}],[\"用于向当前页面中引入一个其他页面\",{\"1\":{\"667\":1}}],[\"用于确定最大进制位\",{\"1\":{\"419\":1}}],[\"用于流程控制\",{\"1\":{\"328\":1}}],[\"用于暴露有函数\",{\"1\":{\"29\":2,\"30\":2}}],[\"用上一步得到的参数初始化\",{\"1\":{\"154\":1}}],[\"用来描述函数的名称\",{\"1\":{\"1979\":1}}],[\"用来缩进\",{\"1\":{\"1979\":1}}],[\"用来创建\",{\"1\":{\"1978\":5}}],[\"用来保存需要进行的转换操作\",{\"1\":{\"1977\":1}}],[\"用来标志是否需要进行移动\",{\"1\":{\"1969\":1}}],[\"用来标识是否需要重新计算值\",{\"1\":{\"1896\":1}}],[\"用来将一个任务添加到缓冲队列中\",{\"1\":{\"1954\":1}}],[\"用来判断一个数据是否是\",{\"1\":{\"1936\":1}}],[\"用来判断对象是否包含自身特点\",{\"1\":{\"995\":1}}],[\"用来缓存上一次计算的值\",{\"1\":{\"1896\":1}}],[\"用来存放这个组件内用到的所有状态的依赖\",{\"1\":{\"1804\":1}}],[\"用来存储与此副作用函数相关的依赖数组\",{\"1\":{\"1984\":1}}],[\"用来存储当前转换节点的父节点\",{\"1\":{\"1977\":1}}],[\"用来存储当前节点在父节点的\",{\"1\":{\"1977\":1}}],[\"用来存储当前正在转换的节点\",{\"1\":{\"1977\":1}}],[\"用来存储当前实例中所有的watcher实例\",{\"1\":{\"1804\":1}}],[\"用来存储标识符的名称\",{\"1\":{\"1975\":1}}],[\"用来存储寻找过程中遇到的最大索引值\",{\"1\":{\"1962\":1}}],[\"用来存储由\",{\"1\":{\"1954\":1}}],[\"用来存储通过\",{\"1\":{\"1954\":1}}],[\"用来存储用户注册的过期回调\",{\"1\":{\"1897\":1}}],[\"用来存储所有与该副作用函数相关的依赖集合\",{\"1\":{\"1891\":1,\"1893\":1}}],[\"用来存储所有与该副作用函数相关联的依赖集合\",{\"1\":{\"1890\":1}}],[\"用来存储对应的依赖集合\",{\"1\":{\"1890\":1}}],[\"用来存储依赖的\",{\"1\":{\"1890\":1}}],[\"用来存储不同数据\",{\"1\":{\"1001\":1}}],[\"用来存储最大值的索引\",{\"1\":{\"416\":1}}],[\"用来挂载渲染watcher\",{\"1\":{\"1800\":1}}],[\"用来检测一个标签是否是可以省略闭合标签的非自闭合标签\",{\"1\":{\"1792\":1}}],[\"用来收集数组依赖\",{\"1\":{\"1785\":1}}],[\"用来暂存当前运行中的\",{\"1\":{\"1784\":1}}],[\"用来表达作者的\",{\"1\":{\"1686\":1}}],[\"用来表示组件是否已经被挂载\",{\"1\":{\"1954\":1}}],[\"用来表示对真实\",{\"1\":{\"1873\":1}}],[\"用来表示键值对的映射\",{\"1\":{\"1276\":1}}],[\"用来表示鼠标点击的状态\",{\"1\":{\"520\":1}}],[\"用来表示鼠标移入的状态\",{\"1\":{\"520\":1}}],[\"用来表示访问过的链接\",{\"1\":{\"520\":1}}],[\"用来表示没访问过的链接\",{\"1\":{\"520\":1}}],[\"用来表示文档\",{\"1\":{\"294\":1}}],[\"用来定义\",{\"1\":{\"1492\":2}}],[\"用来访问\",{\"1\":{\"1446\":1,\"1494\":1,\"1865\":1}}],[\"用来访问父组件传递的\",{\"1\":{\"1446\":1,\"1494\":1,\"1865\":1}}],[\"用来指定按某种顺序进行排列的函数\",{\"1\":{\"1395\":1}}],[\"用来指代该类\",{\"1\":{\"405\":1}}],[\"用来获取一个对象的所有属于自己的键值\",{\"1\":{\"1906\":1}}],[\"用来获取表达式的值并转为字符串格式\",{\"1\":{\"1352\":1}}],[\"用来获取实例对象某个方面的值\",{\"1\":{\"877\":1}}],[\"用来传递给服务器\",{\"1\":{\"1231\":1}}],[\"用来在多个动画之间插入延迟时间\",{\"1\":{\"1225\":1}}],[\"用来监听另一个线程发送过来的数据\",{\"1\":{\"1182\":1}}],[\"用来读取当前元素正在显示的样式\",{\"1\":{\"1128\":1}}],[\"用来对总说进行\",{\"1\":{\"1686\":1}}],[\"用来对\",{\"1\":{\"1227\":1}}],[\"用来对类进行切换\",{\"1\":{\"1125\":1}}],[\"用来对每个元素进行处理\",{\"1\":{\"841\":1}}],[\"用来确定函数嵌套时代码的执行顺序\",{\"1\":{\"1013\":1}}],[\"用来规定整个选择结构的范围\",{\"1\":{\"914\":1}}],[\"用来设定某个模式出现的次数\",{\"1\":{\"906\":1}}],[\"用来设定阴影在\",{\"1\":{\"733\":1}}],[\"用来设置实例对象各个方面的值\",{\"1\":{\"877\":1}}],[\"用来设置字体的颜色\",{\"1\":{\"621\":1}}],[\"用来设置元素的变形效果\",{\"1\":{\"616\":1}}],[\"用来设置元素的阴影效果\",{\"1\":{\"613\":1}}],[\"用来设置元素的轮廓线\",{\"1\":{\"611\":1}}],[\"用来设置圆角\",{\"1\":{\"612\":1}}],[\"用来显示一项任务的完成进度\",{\"1\":{\"696\":1}}],[\"用来显示已知范围的标量值或者分数值\",{\"1\":{\"696\":1}}],[\"用来加载其他样式表的\",{\"1\":{\"1300\":1}}],[\"用来加载\",{\"1\":{\"675\":1}}],[\"用来向页面中引入一个外部的音频文件\",{\"1\":{\"668\":1}}],[\"用来向服务器发送数据\",{\"1\":{\"266\":1}}],[\"用来包含元素的额外信息\",{\"1\":{\"657\":1}}],[\"用来选中多个类属性中含有某个类属性的标签\",{\"1\":{\"519\":1}}],[\"用来执行一个字符串形式的\",{\"1\":{\"402\":1}}],[\"用来说明函数的功能及调用方法\",{\"1\":{\"402\":1}}],[\"用来查询类或者类型的所有属性\",{\"1\":{\"380\":1}}],[\"用来查询类或者类型具体的说明文档\",{\"1\":{\"380\":1}}],[\"用来防止cookie被篡改\",{\"1\":{\"350\":1}}],[\"用来管理已添加getter\",{\"1\":{\"1784\":1}}],[\"用来管理产生的多个执行上下文\",{\"1\":{\"1013\":1}}],[\"用来管理\",{\"1\":{\"228\":1}}],[\"用来唯一标识文档\",{\"1\":{\"181\":1}}],[\"用来测试webpack是否支持字体大包\",{\"1\":{\"143\":1}}],[\"用来锁定包的版本\",{\"1\":{\"66\":1}}],[\"用户使用这个函数就能获取\",{\"1\":{\"2018\":1}}],[\"用户既可能使用代理对象进行查找\",{\"1\":{\"1922\":1}}],[\"用户和页面之间交互时用户的体验就会好很多\",{\"1\":{\"1640\":1}}],[\"用户在地址栏输入了一个\",{\"1\":{\"1569\":1}}],[\"用户在使用这个模块时\",{\"1\":{\"1319\":1}}],[\"用户存放需要最快执行的任务\",{\"1\":{\"1560\":1}}],[\"用户操作后需要执行的任务\",{\"1\":{\"1558\":1}}],[\"用户操作的是\",{\"1\":{\"684\":1}}],[\"用户点击了按钮\",{\"1\":{\"1556\":1}}],[\"用户点击页面上的某个按钮时\",{\"1\":{\"1137\":1}}],[\"用户创建的侦听器回调函数也会被批量处理以避免重复调用\",{\"1\":{\"1498\":1}}],[\"用户输入的就是\",{\"1\":{\"1357\":1}}],[\"用户输入内容\",{\"1\":{\"1088\":1}}],[\"用户交互\",{\"1\":{\"1168\":1,\"1555\":1}}],[\"用户按下了任意鼠标按钮时触发\",{\"1\":{\"1148\":1}}],[\"用户双击鼠标按钮时触发\",{\"1\":{\"1148\":1}}],[\"用户单机主鼠标按钮\",{\"1\":{\"1148\":1}}],[\"用户不仅可以存储\",{\"1\":{\"768\":1}}],[\"用户设置和密码记忆等\",{\"1\":{\"767\":1}}],[\"用户需要这个视频优先加载\",{\"1\":{\"748\":1}}],[\"用户电脑会先将服务器中指定的字体下载\",{\"1\":{\"621\":1}}],[\"用户的动作触发数据的更新\",{\"1\":{\"507\":1}}],[\"用户身份信息\",{\"1\":{\"363\":1}}],[\"用户可以从其中检索附加信息\",{\"1\":{\"697\":1}}],[\"用户可以删除或者禁用cookie\",{\"1\":{\"346\":1}}],[\"用户可轻松看到\",{\"1\":{\"346\":1}}],[\"用户授予第三方应用访问该用户某些资源的权限\",{\"1\":{\"343\":1}}],[\"用户界面和业务数据\",{\"1\":{\"323\":1}}],[\"用户代理\",{\"0\":{\"1568\":1},\"1\":{\"269\":1,\"1568\":1}}],[\"用户注册\",{\"1\":{\"184\":1}}],[\"用户名是必须的\",{\"1\":{\"45\":1}}],[\"用户名\",{\"1\":{\"45\":1,\"317\":1}}],[\"用户端的电脑配置不足\",{\"1\":{\"23\":1}}],[\"作修改\",{\"1\":{\"332\":1}}],[\"作者又设计了一个\",{\"1\":{\"980\":1}}],[\"作者觉得\",{\"1\":{\"980\":1}}],[\"作者觉得表示\",{\"1\":{\"980\":1}}],[\"作者样式表和默认样式表\",{\"1\":{\"529\":1}}],[\"作者样式表中样式\",{\"1\":{\"523\":1}}],[\"作者样式表中的\",{\"1\":{\"523\":1}}],[\"作者\",{\"1\":{\"64\":1,\"694\":1}}],[\"作用并不大\",{\"1\":{\"1895\":1}}],[\"作用类似\",{\"1\":{\"995\":1}}],[\"作用类似于数组的map\",{\"1\":{\"841\":1}}],[\"作用和+一样\",{\"1\":{\"889\":1}}],[\"作用域插槽\",{\"1\":{\"1446\":3,\"1494\":1,\"1865\":1}}],[\"作用域描述代码的作用范围\",{\"1\":{\"1021\":1}}],[\"作用域规则确定\",{\"1\":{\"1020\":1}}],[\"作用域是分层的\",{\"1\":{\"1018\":1}}],[\"作用域就是一个独立的地盘\",{\"1\":{\"1016\":1}}],[\"作用域与作用域链\",{\"0\":{\"1016\":1}}],[\"作用域链实现变量的查找顺序\",{\"1\":{\"1021\":1}}],[\"作用域链\",{\"1\":{\"1015\":1,\"1017\":1,\"1019\":1}}],[\"作用域来决定的\",{\"1\":{\"990\":1,\"996\":1}}],[\"作用域指一个变量作用的范围\",{\"1\":{\"936\":1}}],[\"作用域问题\",{\"0\":{\"936\":1}}],[\"作用域\",{\"0\":{\"784\":1},\"1\":{\"936\":1,\"958\":2,\"1017\":1,\"1019\":1,\"1020\":1}}],[\"作用于两到多个值\",{\"1\":{\"808\":1}}],[\"作用于当前实例\",{\"1\":{\"405\":1}}],[\"作用于数据清洗\",{\"1\":{\"392\":1}}],[\"作用是清除设置的超时调用\",{\"1\":{\"1088\":1}}],[\"作用是清除设置的间歇调用\",{\"1\":{\"1088\":1}}],[\"作用是输出当前表达式的执行结构\",{\"1\":{\"327\":1}}],[\"作用是在文件尾部追加内容\",{\"1\":{\"246\":1}}],[\"作用\",{\"0\":{\"320\":1,\"1019\":1,\"1024\":1},\"1\":{\"28\":1,\"29\":1,\"286\":1,\"516\":4,\"517\":2,\"518\":2,\"565\":1,\"1009\":1,\"1369\":1,\"1399\":1,\"1400\":1,\"1433\":1,\"1440\":1,\"1441\":1,\"1446\":1,\"1460\":1,\"1462\":1,\"1463\":1,\"1464\":1,\"1465\":1,\"1466\":1,\"1467\":1,\"1487\":1,\"1488\":1,\"1502\":1,\"1506\":2,\"1507\":1,\"1508\":1,\"1944\":1}}],[\"作为全局后置守卫\",{\"1\":{\"2084\":1}}],[\"作为全局表里面的键来进行注册\",{\"1\":{\"828\":1}}],[\"作为可能的父级路由记录路径\",{\"1\":{\"2065\":1}}],[\"作为路由而是使用计算属性将每个属性包了一层\",{\"1\":{\"2035\":1}}],[\"作为新节点挂载到头部\",{\"1\":{\"1966\":1}}],[\"作为锚点\",{\"1\":{\"1962\":1,\"1966\":1}}],[\"作为渲染函数\",{\"1\":{\"1954\":1}}],[\"作为渲染引擎\",{\"1\":{\"222\":1}}],[\"作为第二个参数传递\",{\"1\":{\"1954\":1}}],[\"作为第一个参数传递\",{\"1\":{\"1954\":1}}],[\"作为第三个参数传递给\",{\"1\":{\"1906\":1}}],[\"作为组件来处理\",{\"1\":{\"1951\":1}}],[\"作为组件实例的构造函数\",{\"1\":{\"1825\":1}}],[\"作为标识\",{\"1\":{\"1906\":1}}],[\"作为标签名称创建\",{\"1\":{\"1878\":1}}],[\"作为修改行为的基础\",{\"1\":{\"1901\":1}}],[\"作为回调函数的第三个参数\",{\"1\":{\"1897\":1}}],[\"作为副作用函数\",{\"1\":{\"1896\":1}}],[\"作为挂载点\",{\"1\":{\"1878\":1}}],[\"作为输出\",{\"1\":{\"1663\":1}}],[\"作为事件\",{\"1\":{\"1358\":1}}],[\"作为字符串一部分使用\",{\"1\":{\"1328\":1}}],[\"作为变量名使用\",{\"1\":{\"1328\":1}}],[\"作为变量属性值直接使用\",{\"1\":{\"1327\":1}}],[\"作为配置项传入创建渲染器的函数中\",{\"1\":{\"1946\":1}}],[\"作为配置\",{\"1\":{\"1307\":1}}],[\"作为冒泡元素\",{\"1\":{\"1219\":1}}],[\"作为的形参\",{\"1\":{\"1152\":1}}],[\"作为前缀\",{\"1\":{\"1125\":1}}],[\"作为一个项目的入口\",{\"1\":{\"2040\":1}}],[\"作为一个了解即可\",{\"1\":{\"1102\":1}}],[\"作为一种数据存储格式从诞生以来日益流行\",{\"1\":{\"895\":1}}],[\"作为对象原型链的终点\",{\"1\":{\"980\":1}}],[\"作为对象的属性\",{\"1\":{\"828\":1}}],[\"作为函数的参数\",{\"1\":{\"980\":1}}],[\"作为表示\",{\"1\":{\"980\":1}}],[\"作为妥协\",{\"1\":{\"875\":1}}],[\"作为返回值返回\",{\"1\":{\"853\":1}}],[\"作为容器的两个\",{\"1\":{\"765\":1}}],[\"作为使用指定半径的圆的切线\",{\"1\":{\"717\":1}}],[\"作为搜索结果的相关描述\",{\"1\":{\"659\":1}}],[\"作为搜索引擎搜索时依据的关键词\",{\"1\":{\"659\":1}}],[\"作为开发人员\",{\"1\":{\"648\":1}}],[\"作为自定义基类的派生类\",{\"1\":{\"405\":1}}],[\"作为自\",{\"1\":{\"405\":1}}],[\"作为身份认证\",{\"1\":{\"362\":1}}],[\"作为运行时\",{\"1\":{\"222\":1}}],[\"作为模块的解析规则\",{\"1\":{\"156\":1}}],[\"作为参数发送到服务器端\",{\"1\":{\"2088\":1}}],[\"作为参数传入\",{\"1\":{\"1655\":1,\"1824\":1}}],[\"作为参数传入到函数\",{\"1\":{\"388\":1}}],[\"作为参数传递给函数和\",{\"1\":{\"1259\":1}}],[\"作为参数\",{\"1\":{\"155\":1,\"1446\":1,\"1494\":1,\"1978\":1,\"2057\":1}}],[\"作为\",{\"1\":{\"25\":1,\"529\":1,\"1112\":2,\"1358\":1,\"1394\":1,\"1519\":1,\"1784\":1,\"1802\":1,\"1895\":1,\"1910\":1,\"1978\":1,\"1984\":1,\"2061\":1}}],[\"很难在用户不察觉的情况下进行攻击\",{\"1\":{\"2091\":1}}],[\"很难找到事件是在哪里声明的\",{\"1\":{\"1143\":1}}],[\"很轻松的拿到这个\",{\"1\":{\"2047\":1}}],[\"很显然\",{\"1\":{\"1927\":1}}],[\"很明显代理对象没有\",{\"1\":{\"1931\":1}}],[\"很明显对于使用object\",{\"1\":{\"1785\":1}}],[\"很明显上面的代码\",{\"1\":{\"294\":1}}],[\"很大程度上是由于它们提供了与浏览器的互操作性\",{\"1\":{\"1084\":1}}],[\"很可能也会出错\",{\"1\":{\"995\":1}}],[\"很不容易发现错误\",{\"1\":{\"980\":1}}],[\"很不安全\",{\"1\":{\"353\":1}}],[\"很容易被\",{\"1\":{\"2088\":1}}],[\"很容易被黑客窃取\",{\"1\":{\"767\":1}}],[\"很容易引起命名冲突\",{\"1\":{\"27\":1}}],[\"很少用\",{\"1\":{\"269\":1}}],[\"很适合拥有前端技术背景的全栈型工程师\",{\"1\":{\"218\":1}}],[\"很多时候新旧节点之间存在相同的子节点\",{\"1\":{\"1962\":1}}],[\"很多时候出于上层\",{\"1\":{\"1949\":1}}],[\"很多时候增长率\",{\"1\":{\"1722\":1}}],[\"很多时候我们需要在判断网页所处的浏览器和平台\",{\"1\":{\"1090\":1}}],[\"很多后端语言搭建的服务器都会自带自己的默认缓存规则\",{\"1\":{\"1544\":1}}],[\"很多预设值会变成绝对值\",{\"1\":{\"1526\":1}}],[\"很多浏览器可以一直捕获\",{\"1\":{\"1141\":1}}],[\"很多初学者刚开始都搞不清楚\",{\"1\":{\"1084\":1}}],[\"很多开发人员喜欢使用div\",{\"1\":{\"694\":1}}],[\"很多开发者\",{\"1\":{\"25\":1}}],[\"很多\",{\"1\":{\"681\":1}}],[\"很多编程语言都有包管理工具\",{\"1\":{\"58\":1}}],[\">user<\",{\"1\":{\"2062\":1}}],[\">page3<\",{\"1\":{\"2061\":1}}],[\">page2<\",{\"1\":{\"2061\":1}}],[\">page1<\",{\"1\":{\"2061\":1}}],[\">home<\",{\"1\":{\"2050\":1,\"2062\":1}}],[\">hello\",{\"1\":{\"1872\":1}}],[\">hello<\",{\"1\":{\"533\":1}}],[\">effects\",{\"1\":{\"1889\":1}}],[\">我是内容<\",{\"1\":{\"1788\":1}}],[\">我是一个div<\",{\"1\":{\"993\":1}}],[\">失败称之为reject\",{\"1\":{\"1776\":1}}],[\">完成\",{\"1\":{\"1776\":1}}],[\">关闭弹窗<\",{\"1\":{\"1515\":1}}],[\">关闭新窗口<\",{\"1\":{\"1088\":1}}],[\">跳转<\",{\"1\":{\"1459\":1,\"1460\":3,\"1461\":2}}],[\">news<\",{\"1\":{\"1458\":1,\"1463\":1}}],[\">about<\",{\"1\":{\"1456\":1,\"2050\":1}}],[\">插槽默认内容\",{\"1\":{\"1446\":2}}],[\">哇哈哈<\",{\"1\":{\"1441\":1}}],[\">你好啊<\",{\"1\":{\"1441\":1}}],[\">你好啊\",{\"1\":{\"1441\":1}}],[\">或<school><\",{\"1\":{\"1423\":1}}],[\">会导致后续组件不能渲染\",{\"1\":{\"1420\":1}}],[\">点我提示学校名<\",{\"1\":{\"1415\":1}}],[\">点我提示信息<\",{\"1\":{\"1369\":4}}],[\">点我提示信息2\",{\"1\":{\"1368\":1}}],[\">点击我<\",{\"1\":{\"1137\":1,\"1143\":1,\"1144\":2,\"1145\":1,\"1146\":2,\"1152\":3,\"1157\":3}}],[\">点击我们跳转<\",{\"1\":{\"1093\":1}}],[\">点击<\",{\"1\":{\"1080\":1,\"1081\":1}}],[\">contact<\",{\"1\":{\"2062\":1}}],[\">content<\",{\"1\":{\"580\":1}}],[\">clicked\",{\"1\":{\"1518\":1}}],[\">click\",{\"1\":{\"1353\":1,\"1878\":1,\"1880\":1}}],[\">执行主代码>从事件队列中加载任务执行\",{\"1\":{\"1187\":1}}],[\">屏蔽剪贴板<\",{\"1\":{\"1162\":1}}],[\">百度<\",{\"1\":{\"1156\":6}}],[\">9\",{\"1\":{\"1148\":1}}],[\">6\",{\"1\":{\"1148\":1}}],[\">3\",{\"1\":{\"1148\":1}}],[\">3<\",{\"1\":{\"697\":1}}],[\">2\",{\"1\":{\"1148\":1}}],[\">2<\",{\"1\":{\"697\":1}}],[\">1\",{\"1\":{\"1148\":1}}],[\">1<\",{\"1\":{\"697\":1}}],[\">还原<\",{\"1\":{\"1139\":1,\"1140\":1}}],[\">item2<\",{\"1\":{\"1120\":1}}],[\">添加段落<\",{\"1\":{\"1112\":1}}],[\">链接1<\",{\"1\":{\"1112\":3,\"1120\":1,\"1123\":2}}],[\">lorem\",{\"1\":{\"1112\":6,\"1120\":2,\"1123\":4,\"1153\":1}}],[\">left\",{\"1\":{\"580\":3}}],[\">查看历史列表数量<\",{\"1\":{\"1096\":1}}],[\">替换<\",{\"1\":{\"1094\":1}}],[\">加载<\",{\"1\":{\"1094\":1}}],[\">刷下<\",{\"1\":{\"1094\":1}}],[\">5秒后显示<\",{\"1\":{\"1088\":2}}],[\">在原来的基础上向右移动100\",{\"1\":{\"1088\":1}}],[\">在原来的基础上增加100和50<\",{\"1\":{\"1088\":1}}],[\">移动到100x100的位置<\",{\"1\":{\"1088\":1}}],[\">调整到100x100<\",{\"1\":{\"1088\":1}}],[\">原始\",{\"0\":{\"973\":1}}],[\">字符串\",{\"0\":{\"972\":1}}],[\">bool\",{\"0\":{\"971\":1}}],[\">数字\",{\"0\":{\"970\":1}}],[\">drop\",{\"1\":{\"772\":1}}],[\">djhaldhaskj<\",{\"1\":{\"685\":1}}],[\">元素视为本地拖放目标\",{\"1\":{\"772\":1}}],[\">元素\",{\"1\":{\"772\":1}}],[\">此链接<\",{\"1\":{\"747\":2}}],[\">4<\",{\"1\":{\"697\":1}}],[\">按钮<\",{\"1\":{\"670\":1}}],[\">重置<\",{\"1\":{\"670\":1}}],[\">提交<\",{\"1\":{\"670\":1}}],[\">选项二<\",{\"1\":{\"670\":1}}],[\">选项一<\",{\"1\":{\"670\":1}}],[\">动人心弦<\",{\"1\":{\"665\":1}}],[\">超链接<\",{\"1\":{\"664\":1}}],[\">这是我的页面<\",{\"1\":{\"657\":1}}],[\">right\",{\"1\":{\"580\":3}}],[\">main\",{\"1\":{\"580\":3}}],[\">you<\",{\"1\":{\"580\":1}}],[\">zuo<\",{\"1\":{\"580\":1}}],[\">>+服务器\",{\"1\":{\"1646\":2}}],[\">>客户端\",{\"1\":{\"1645\":5}}],[\">>服务器\",{\"1\":{\"1645\":5,\"1646\":1}}],[\">>>\",{\"1\":{\"436\":1,\"438\":1,\"441\":1}}],[\">>\",{\"1\":{\"399\":1,\"1646\":2,\"1872\":1}}],[\">使用\",{\"1\":{\"205\":1}}],[\">=\",{\"1\":{\"205\":1,\"398\":1,\"412\":1,\"413\":1,\"414\":2,\"415\":1,\"416\":1,\"438\":1,\"476\":1,\"857\":2,\"1039\":1,\"1091\":5,\"1575\":1,\"1576\":1,\"1577\":1,\"1792\":6,\"1794\":1,\"1918\":1,\"1969\":1,\"1974\":2,\"1993\":1,\"2029\":1}}],[\">\",{\"0\":{\"976\":1},\"1\":{\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"45\":3,\"47\":1,\"143\":1,\"205\":1,\"287\":10,\"327\":3,\"328\":6,\"329\":5,\"377\":1,\"382\":4,\"388\":1,\"398\":1,\"410\":1,\"413\":1,\"416\":3,\"417\":2,\"418\":2,\"419\":2,\"451\":1,\"463\":1,\"479\":1,\"498\":1,\"518\":2,\"520\":1,\"523\":2,\"533\":1,\"535\":1,\"580\":10,\"582\":9,\"623\":2,\"636\":2,\"649\":1,\"657\":4,\"659\":7,\"664\":1,\"666\":2,\"668\":5,\"669\":5,\"670\":14,\"672\":2,\"673\":1,\"674\":3,\"685\":1,\"691\":1,\"693\":2,\"694\":5,\"697\":1,\"737\":4,\"747\":4,\"764\":3,\"765\":4,\"770\":4,\"772\":1,\"773\":5,\"812\":7,\"855\":2,\"857\":1,\"877\":1,\"883\":1,\"912\":4,\"973\":2,\"993\":1,\"1059\":2,\"1078\":2,\"1079\":1,\"1080\":1,\"1081\":1,\"1087\":7,\"1112\":3,\"1120\":1,\"1123\":2,\"1124\":3,\"1139\":2,\"1140\":2,\"1148\":6,\"1150\":2,\"1152\":1,\"1153\":2,\"1154\":2,\"1155\":4,\"1158\":3,\"1160\":2,\"1161\":3,\"1162\":2,\"1199\":1,\"1201\":3,\"1205\":2,\"1207\":2,\"1216\":1,\"1219\":1,\"1231\":5,\"1234\":1,\"1243\":1,\"1348\":1,\"1356\":5,\"1357\":12,\"1358\":6,\"1369\":5,\"1385\":5,\"1392\":2,\"1393\":3,\"1401\":1,\"1420\":1,\"1428\":1,\"1429\":3,\"1437\":3,\"1441\":2,\"1446\":15,\"1459\":3,\"1460\":3,\"1461\":2,\"1465\":4,\"1486\":1,\"1493\":1,\"1499\":4,\"1507\":1,\"1515\":6,\"1516\":2,\"1519\":1,\"1543\":2,\"1569\":1,\"1674\":1,\"1789\":2,\"1792\":23,\"1793\":1,\"1815\":1,\"1824\":1,\"1834\":1,\"1835\":1,\"1862\":3,\"1872\":1,\"1889\":1,\"1929\":1,\"1948\":1,\"1954\":4,\"1961\":4,\"1966\":1,\"1968\":3,\"1969\":2,\"1974\":7,\"2029\":4,\"2034\":1,\"2042\":1,\"2043\":1,\"2045\":1,\"2050\":1,\"2054\":2,\"2058\":8,\"2061\":3,\"2064\":1,\"2065\":4,\"2068\":4,\"2075\":1,\"2091\":1,\"2095\":1}}],[\"><span><\",{\"1\":{\"1877\":1}}],[\"><p>hello\",{\"1\":{\"1797\":1}}],[\"><div><\",{\"1\":{\"1792\":2}}],[\"><\",{\"1\":{\"27\":2,\"28\":2,\"29\":1,\"30\":2,\"31\":4,\"43\":1,\"143\":4,\"519\":4,\"623\":2,\"667\":1,\"669\":2,\"681\":2,\"685\":1,\"692\":1,\"696\":3,\"697\":1,\"764\":1,\"765\":1,\"772\":2,\"773\":1,\"1079\":1,\"1087\":3,\"1088\":1,\"1139\":1,\"1140\":1,\"1148\":4,\"1153\":1,\"1155\":2,\"1201\":2,\"1207\":4,\"1219\":1,\"1358\":2,\"1428\":1,\"1446\":1,\"1583\":1,\"1792\":5,\"1954\":2,\"2047\":2,\"2050\":1,\"2061\":1}}],[\"`属性\",{\"1\":{\"1914\":2,\"1917\":1,\"1918\":1,\"1992\":2,\"1993\":1}}],[\"`event\",{\"1\":{\"1815\":1}}],[\"`export\",{\"1\":{\"156\":1}}],[\"`getter\",{\"1\":{\"1804\":1}}],[\"`use\",{\"1\":{\"1804\":1}}],[\"`update\",{\"1\":{\"1358\":1}}],[\"`do\",{\"1\":{\"1805\":1}}],[\"`domprops\",{\"1\":{\"1353\":1}}],[\"`data\",{\"1\":{\"1804\":1}}],[\"`did\",{\"1\":{\"1804\":1}}],[\"`value\",{\"1\":{\"1804\":1}}],[\"`vue\",{\"1\":{\"1358\":1,\"1799\":3,\"1802\":1,\"1805\":1}}],[\"`attempting\",{\"1\":{\"1956\":1}}],[\"`attrs\",{\"1\":{\"1353\":1}}],[\"`avoid\",{\"1\":{\"1803\":1,\"1804\":2}}],[\"`new`\",{\"1\":{\"1799\":1}}],[\"`with\",{\"1\":{\"1796\":1}}],[\"`window\",{\"1\":{\"1087\":4}}],[\"`template\",{\"1\":{\"1805\":1}}],[\"`the\",{\"1\":{\"1804\":3}}],[\"`tag\",{\"1\":{\"1792\":1}}],[\"`true`\",{\"1\":{\"1515\":1}}],[\"`情况\",{\"1\":{\"1769\":1}}],[\"`ref\",{\"1\":{\"1428\":1}}],[\"`return\",{\"1\":{\"1370\":3,\"1979\":1}}],[\"`function\",{\"1\":{\"1358\":1,\"1370\":1,\"1979\":1}}],[\"`foo\",{\"1\":{\"27\":2,\"28\":2,\"29\":1,\"30\":1}}],[\"`<h1>$\",{\"1\":{\"1943\":1}}],[\"`<h1>\",{\"1\":{\"1422\":1}}],[\"`<p>第$\",{\"1\":{\"1239\":2}}],[\"`<ul>$\",{\"1\":{\"772\":2}}],[\"`经度为\",{\"1\":{\"1102\":1}}],[\"`纬度为\",{\"1\":{\"1102\":1}}],[\"`on$\",{\"1\":{\"1954\":1}}],[\"`overwritten\",{\"1\":{\"1803\":1,\"1804\":1}}],[\"`offsetleft\",{\"1\":{\"1087\":1}}],[\"`offsettop\",{\"1\":{\"1087\":1}}],[\"`outerwidth\",{\"1\":{\"1087\":1}}],[\"`outerheight\",{\"1\":{\"1087\":1}}],[\"`instead\",{\"1\":{\"1804\":1}}],[\"`injection\",{\"1\":{\"1803\":2}}],[\"`invalid\",{\"1\":{\"1802\":1,\"2027\":1}}],[\"`input\",{\"1\":{\"1368\":1}}],[\"`innerwidth\",{\"1\":{\"1087\":1}}],[\"`innerheight\",{\"1\":{\"1087\":1}}],[\"`img\",{\"1\":{\"727\":1}}],[\"`键为$\",{\"1\":{\"846\":1}}],[\"`method\",{\"1\":{\"1804\":4}}],[\"`mal\",{\"1\":{\"1792\":1}}],[\"`model\",{\"1\":{\"1358\":1}}],[\"`mongodb\",{\"1\":{\"212\":1}}],[\"`mongod`\",{\"1\":{\"177\":1}}],[\"`my\",{\"1\":{\"834\":1,\"943\":1,\"948\":2}}],[\"`我叫$\",{\"1\":{\"833\":3,\"1486\":1}}],[\"`hello\",{\"1\":{\"790\":3}}],[\"`被改变的url为$\",{\"1\":{\"770\":1}}],[\"`这是一个$\",{\"1\":{\"770\":1}}],[\"`姓名为$\",{\"1\":{\"770\":1}}],[\"`姓名为\",{\"1\":{\"769\":2}}],[\"``\",{\"1\":{\"691\":1,\"796\":1,\"1794\":1}}],[\"`$route\",{\"1\":{\"2065\":1}}],[\"`$attrs\",{\"1\":{\"1430\":1}}],[\"`$\",{\"1\":{\"433\":1,\"474\":1,\"486\":3,\"770\":1,\"790\":1,\"1368\":2,\"1396\":1,\"1979\":1}}],[\"`你好\",{\"1\":{\"355\":1}}],[\"`中间件函数2`\",{\"1\":{\"315\":1}}],[\"`中间件函数1`\",{\"1\":{\"315\":1}}],[\"`中间件函数`\",{\"1\":{\"315\":1}}],[\"`count\",{\"1\":{\"1827\":1,\"1953\":1}}],[\"`computed\",{\"1\":{\"1804\":1}}],[\"`callback\",{\"1\":{\"1855\":1}}],[\"`callback=$\",{\"1\":{\"474\":1}}],[\"`cannot\",{\"1\":{\"1786\":2}}],[\"`click\",{\"1\":{\"1368\":1}}],[\"`c\",{\"1\":{\"177\":2}}],[\"`bar\",{\"1\":{\"27\":1,\"28\":2,\"29\":1,\"30\":1}}],[\"`\",{\"1\":{\"27\":3,\"28\":4,\"29\":2,\"30\":2,\"155\":2,\"156\":3,\"212\":1,\"263\":4,\"287\":2,\"355\":1,\"433\":1,\"474\":2,\"482\":2,\"769\":2,\"770\":3,\"772\":4,\"790\":3,\"846\":1,\"943\":1,\"948\":2,\"1087\":10,\"1102\":2,\"1352\":2,\"1353\":2,\"1354\":1,\"1358\":8,\"1368\":4,\"1370\":4,\"1392\":2,\"1415\":2,\"1422\":2,\"1428\":1,\"1430\":1,\"1459\":2,\"1486\":1,\"1786\":2,\"1792\":2,\"1793\":2,\"1794\":2,\"1796\":7,\"1797\":2,\"1799\":2,\"1802\":4,\"1803\":3,\"1804\":21,\"1805\":2,\"1815\":1,\"1827\":1,\"1836\":1,\"1838\":1,\"1855\":1,\"1953\":3,\"1954\":1,\"1956\":1,\"1979\":17,\"2027\":1}}],[\"$uri\",{\"1\":{\"2050\":1}}],[\"$xxx\",{\"1\":{\"1808\":1}}],[\"$pinia\",{\"1\":{\"2016\":2}}],[\"$parent\",{\"1\":{\"1800\":4,\"1803\":1,\"1804\":1,\"1807\":1,\"1864\":1,\"1865\":1,\"2016\":2,\"2026\":2}}],[\"$props这些\",{\"1\":{\"2002\":1}}],[\"$props\",{\"1\":{\"1430\":2,\"1838\":1}}],[\"$prefix\",{\"1\":{\"1265\":2}}],[\"$primary\",{\"1\":{\"1249\":2,\"1250\":2,\"1259\":2}}],[\"$destory\",{\"1\":{\"1818\":1}}],[\"$destroy\",{\"1\":{\"1807\":2}}],[\"$destroy方法\",{\"1\":{\"1807\":1}}],[\"$delete和vm\",{\"1\":{\"1809\":1}}],[\"$delete\",{\"1\":{\"1490\":1}}],[\"$data\",{\"1\":{\"1786\":2,\"1804\":1,\"1836\":2}}],[\"$direction\",{\"1\":{\"1259\":2,\"1284\":6}}],[\"$dirty\",{\"1\":{\"45\":1}}],[\"$vnode\",{\"1\":{\"1430\":1,\"1806\":1,\"1807\":2,\"1834\":1,\"1864\":1,\"1865\":1}}],[\"$var\",{\"1\":{\"1285\":4,\"1311\":2}}],[\"$variable\",{\"1\":{\"1261\":4,\"1273\":1}}],[\"$value\",{\"1\":{\"1271\":1,\"1278\":2,\"1279\":1,\"1289\":3}}],[\"$val\",{\"1\":{\"1270\":1}}],[\"$myproperty\",{\"1\":{\"1432\":1}}],[\"$mymethod\",{\"1\":{\"1432\":1}}],[\"$mount\",{\"1\":{\"1360\":2,\"1423\":1,\"1427\":1,\"1799\":1,\"1805\":2,\"1806\":2,\"1818\":1,\"1825\":1}}],[\"$mat\",{\"1\":{\"1302\":1}}],[\"$map2\",{\"1\":{\"1280\":1}}],[\"$map1\",{\"1\":{\"1280\":1}}],[\"$map\",{\"1\":{\"1277\":1,\"1279\":1,\"1289\":1}}],[\"$el\",{\"1\":{\"1806\":2,\"1807\":2,\"1862\":4,\"2002\":1}}],[\"$ele\",{\"1\":{\"1269\":2}}],[\"$event\",{\"1\":{\"1358\":4,\"1368\":9,\"1370\":8,\"1802\":2}}],[\"$emit\",{\"0\":{\"1815\":1},\"1\":{\"1358\":4,\"1368\":1,\"1437\":1,\"1438\":1,\"1493\":3,\"1813\":1,\"1815\":1}}],[\"$green\",{\"1\":{\"1312\":2}}],[\"$gte\",{\"1\":{\"205\":1}}],[\"$gt\",{\"1\":{\"205\":2,\"206\":2}}],[\"$height\",{\"1\":{\"1296\":3}}],[\"$router\",{\"1\":{\"1464\":5,\"2026\":1,\"2047\":4}}],[\"$router的两个api\",{\"1\":{\"1464\":1}}],[\"$route\",{\"1\":{\"1459\":2,\"1461\":2,\"2026\":1,\"2031\":1,\"2047\":4}}],[\"$root\",{\"1\":{\"1238\":3,\"1239\":4,\"1800\":3,\"1864\":1,\"1865\":1}}],[\"$refs\",{\"1\":{\"1428\":4,\"1437\":2,\"1800\":1}}],[\"$red\",{\"1\":{\"1306\":3,\"1309\":8,\"1310\":1,\"1312\":4,\"1313\":2,\"1314\":2,\"1318\":4,\"1319\":3,\"1320\":2}}],[\"$radius\",{\"1\":{\"1294\":3,\"1295\":2,\"1302\":1}}],[\"$off和vm\",{\"1\":{\"1813\":1}}],[\"$off\",{\"0\":{\"1816\":1},\"1\":{\"1437\":1,\"1802\":2,\"1807\":1,\"1816\":2,\"1817\":1}}],[\"$once\",{\"0\":{\"1817\":1},\"1\":{\"1813\":1,\"1817\":1}}],[\"$on的时候将事件按名称存在事件中心\",{\"1\":{\"1368\":1}}],[\"$on\",{\"0\":{\"1814\":1},\"1\":{\"1368\":1,\"1437\":2,\"1438\":1,\"1802\":2,\"1813\":1,\"1814\":2,\"1817\":1}}],[\"$options的取值\",{\"1\":{\"1799\":1}}],[\"$options\",{\"0\":{\"1864\":1},\"1\":{\"1354\":1,\"1360\":2,\"1407\":2,\"1423\":1,\"1446\":1,\"1799\":3,\"1800\":2,\"1802\":1,\"1803\":2,\"1804\":11,\"1805\":1,\"1806\":2,\"1807\":1,\"1834\":1,\"1836\":1,\"1864\":1,\"2016\":3,\"2026\":2,\"2031\":2}}],[\"$other\",{\"1\":{\"1290\":4}}],[\"$or\",{\"1\":{\"206\":3}}],[\"$watch注册的监听\",{\"1\":{\"1858\":1}}],[\"$watch\",{\"0\":{\"1810\":1},\"1\":{\"1380\":2,\"1804\":1,\"1809\":1,\"1810\":1}}],[\"$width\",{\"1\":{\"1296\":3,\"1302\":1}}],[\"$weight\",{\"1\":{\"1290\":6}}],[\"$white\",{\"1\":{\"1248\":1}}],[\"$item\",{\"1\":{\"1287\":1}}],[\"$index\",{\"1\":{\"1268\":1}}],[\"$invalid\",{\"1\":{\"45\":1}}],[\"$key\",{\"1\":{\"1277\":1,\"1278\":2,\"1279\":1,\"1289\":3}}],[\"$createelement\",{\"1\":{\"1865\":1}}],[\"$children\",{\"1\":{\"1800\":3,\"1807\":1,\"1864\":1,\"1865\":1}}],[\"$c\",{\"1\":{\"1310\":1}}],[\"$circle\",{\"1\":{\"1274\":4}}],[\"$comment\",{\"1\":{\"1273\":1}}],[\"$colors2\",{\"1\":{\"1280\":2}}],[\"$colors\",{\"1\":{\"1278\":2,\"1279\":3,\"1280\":2}}],[\"$color\",{\"1\":{\"1261\":4,\"1273\":2,\"1284\":5,\"1290\":6,\"1330\":1}}],[\"$store\",{\"1\":{\"1451\":3,\"1452\":1,\"1453\":3,\"1454\":4,\"2016\":3}}],[\"$string\",{\"1\":{\"1273\":1}}],[\"$scopedslots\",{\"1\":{\"1446\":4,\"1494\":2,\"1865\":2}}],[\"$slots\",{\"1\":{\"1446\":5,\"1493\":2,\"1494\":3,\"1865\":2,\"1954\":4,\"1956\":2}}],[\"$size\",{\"1\":{\"1269\":5,\"1274\":4,\"1284\":2,\"1288\":5,\"1290\":6,\"1306\":3}}],[\"$sizes\",{\"1\":{\"1269\":2,\"1288\":2}}],[\"$set\",{\"1\":{\"181\":1,\"202\":1,\"1358\":1,\"1396\":3,\"1490\":1,\"1809\":1}}],[\"$bus就是当前应用的vm\",{\"1\":{\"1438\":1}}],[\"$bus\",{\"1\":{\"1438\":3}}],[\"$bg\",{\"1\":{\"1306\":2}}],[\"$b\",{\"1\":{\"1290\":1,\"1310\":1}}],[\"$box\",{\"1\":{\"1260\":2,\"1307\":3}}],[\"$border4\",{\"1\":{\"1267\":2}}],[\"$border3\",{\"1\":{\"1267\":2}}],[\"$border2\",{\"1\":{\"1267\":2}}],[\"$border1\",{\"1\":{\"1267\":2}}],[\"$border\",{\"1\":{\"1260\":3,\"1307\":4}}],[\"$black\",{\"1\":{\"1260\":3,\"1307\":4,\"1312\":3,\"1313\":2,\"1318\":3}}],[\"$background\",{\"1\":{\"1259\":3}}],[\"$baselineheight\",{\"1\":{\"1260\":2}}],[\"$base\",{\"1\":{\"1259\":4}}],[\"$top\",{\"1\":{\"1259\":2,\"1262\":2}}],[\"$theme\",{\"1\":{\"1259\":2}}],[\"$n\",{\"1\":{\"1290\":1}}],[\"$num\",{\"1\":{\"1286\":5}}],[\"$num4\",{\"1\":{\"1264\":1}}],[\"$num3\",{\"1\":{\"1264\":1}}],[\"$num2\",{\"1\":{\"1264\":2}}],[\"$num1\",{\"1\":{\"1264\":2}}],[\"$name\",{\"1\":{\"1259\":3,\"1262\":3,\"1273\":2,\"1290\":6}}],[\"$nexttick方法是在rendermixin函数中挂载到vue原型上的\",{\"1\":{\"1818\":1}}],[\"$nexttick和vm\",{\"1\":{\"1818\":1}}],[\"$nexttick\",{\"0\":{\"1822\":1},\"1\":{\"1440\":1,\"2029\":2}}],[\"$ne\",{\"1\":{\"205\":1}}],[\"$listeners\",{\"1\":{\"1864\":1,\"1865\":1}}],[\"$list\",{\"1\":{\"1268\":1,\"1269\":2,\"1270\":1,\"1271\":1,\"1272\":4,\"1287\":1,\"1290\":1}}],[\"$left\",{\"1\":{\"1259\":2,\"1262\":2}}],[\"$large\",{\"1\":{\"1259\":2}}],[\"$lte\",{\"1\":{\"205\":1}}],[\"$lt\",{\"1\":{\"205\":2,\"206\":2}}],[\"$变量名称\",{\"1\":{\"1258\":1}}],[\"$attrs\",{\"1\":{\"1430\":2,\"1493\":2,\"1865\":1,\"1956\":2}}],[\"$a\",{\"1\":{\"1290\":1,\"1310\":1,\"1319\":1,\"1320\":2}}],[\"$args\",{\"1\":{\"1273\":3}}],[\"$align\",{\"1\":{\"1252\":4}}],[\"$and\",{\"1\":{\"206\":3}}],[\"$forceupdate和$destroy方法是在lifecyclemixin函数中挂载到vue原型上的\",{\"1\":{\"1818\":1}}],[\"$forceupdate\",{\"0\":{\"1821\":1},\"1\":{\"1818\":1,\"1821\":1}}],[\"$fonts\",{\"1\":{\"1275\":4}}],[\"$fontsize\",{\"1\":{\"1260\":2}}],[\"$font\",{\"1\":{\"1249\":2,\"1250\":2,\"1259\":2,\"1277\":3,\"1289\":2,\"1290\":6}}],[\"$flow\",{\"1\":{\"1428\":1}}],[\"$family\",{\"1\":{\"1317\":2}}],[\"$f36\",{\"1\":{\"1248\":1}}],[\"$0并不存在\",{\"1\":{\"925\":1}}],[\"$0\",{\"1\":{\"924\":1,\"925\":1}}],[\"$`\",{\"1\":{\"924\":2}}],[\"$+\",{\"1\":{\"924\":2}}],[\"$4\",{\"1\":{\"911\":1}}],[\"$9\",{\"1\":{\"911\":1,\"924\":1}}],[\"$9属性来进行访问到\",{\"1\":{\"911\":1}}],[\"$3的值\",{\"1\":{\"911\":2}}],[\"$3\",{\"1\":{\"911\":4,\"924\":1,\"925\":1}}],[\"$1的值\",{\"1\":{\"911\":2}}],[\"$1\",{\"1\":{\"911\":4,\"913\":2,\"924\":2,\"925\":1,\"967\":1,\"1769\":1,\"1792\":2}}],[\"$2的值\",{\"1\":{\"911\":2}}],[\"$2\",{\"1\":{\"790\":1,\"911\":4,\"924\":2,\"925\":1}}],[\"$$\",{\"1\":{\"790\":1}}],[\"$\",{\"1\":{\"27\":3,\"28\":4,\"29\":2,\"30\":4,\"41\":2,\"44\":2,\"142\":4,\"143\":1,\"155\":2,\"156\":1,\"212\":3,\"263\":2,\"355\":1,\"433\":2,\"482\":1,\"769\":3,\"772\":8,\"777\":1,\"790\":1,\"834\":2,\"889\":1,\"902\":1,\"920\":4,\"924\":8,\"925\":3,\"943\":1,\"948\":2,\"967\":1,\"1087\":10,\"1102\":2,\"1194\":1,\"1198\":10,\"1199\":3,\"1200\":3,\"1201\":20,\"1204\":1,\"1205\":9,\"1206\":3,\"1207\":2,\"1208\":1,\"1209\":2,\"1210\":2,\"1211\":3,\"1215\":1,\"1216\":4,\"1217\":1,\"1218\":2,\"1219\":1,\"1221\":3,\"1224\":3,\"1225\":1,\"1227\":1,\"1228\":1,\"1229\":1,\"1230\":1,\"1231\":3,\"1232\":5,\"1234\":3,\"1235\":2,\"1237\":1,\"1238\":1,\"1239\":2,\"1307\":9,\"1311\":1,\"1352\":1,\"1353\":2,\"1354\":1,\"1358\":10,\"1370\":5,\"1428\":1,\"1441\":1,\"1786\":2,\"1792\":1,\"1793\":1,\"1796\":6,\"1799\":3,\"1802\":4,\"1803\":2,\"1804\":13,\"1805\":2,\"1815\":1,\"1827\":1,\"1835\":1,\"1836\":1,\"1855\":1,\"1914\":2,\"1917\":1,\"1918\":1,\"1953\":3,\"1956\":1,\"1979\":2,\"1992\":2,\"1993\":1,\"2027\":1,\"2028\":1,\"2054\":1}}],[\"=methods\",{\"1\":{\"1836\":1}}],[\"=max\",{\"1\":{\"1666\":1}}],[\"=2的方式来更改数据是监测不到的\",{\"1\":{\"1786\":1}}],[\"=x\",{\"1\":{\"1753\":1}}],[\"=x^3\",{\"1\":{\"1658\":1}}],[\"=42\",{\"1\":{\"1723\":1}}],[\"=0\",{\"1\":{\"1658\":1}}],[\"=tanh⁡\",{\"1\":{\"1658\":1}}],[\"=title\",{\"1\":{\"329\":1}}],[\"=cd\",{\"1\":{\"918\":1}}],[\"=complex\",{\"1\":{\"395\":1}}],[\"=刚好相反\",{\"1\":{\"918\":1}}],[\"=位置后面就写的\",{\"1\":{\"918\":1}}],[\"=后面的字符\",{\"1\":{\"918\":1}}],[\"=后面想要继续书写字符\",{\"1\":{\"918\":1}}],[\"=a\",{\"1\":{\"918\":3}}],[\"=abc\",{\"1\":{\"519\":1}}],[\"=正则表达式\",{\"1\":{\"918\":1}}],[\"=表示不相等\",{\"1\":{\"813\":1}}],[\"=等一系列赋值运算符\",{\"1\":{\"805\":1}}],[\"=属性值\",{\"1\":{\"519\":1}}],[\"=$\",{\"1\":{\"474\":1,\"2028\":1}}],[\"=1−tanh2⁡\",{\"1\":{\"1658\":1}}],[\"=1\",{\"1\":{\"403\":2}}],[\"=b\",{\"1\":{\"396\":12,\"398\":1,\"918\":2}}],[\"=值\",{\"1\":{\"393\":1}}],[\"=require\",{\"1\":{\"349\":1}}],[\"==表示相等\",{\"1\":{\"813\":1}}],[\"==>\",{\"1\":{\"270\":1,\"1394\":2,\"1782\":3,\"1785\":2}}],[\"==\",{\"1\":{\"205\":2,\"212\":1,\"285\":3,\"294\":6,\"377\":1,\"397\":3,\"398\":2,\"401\":1,\"418\":1,\"421\":2,\"424\":1,\"428\":1,\"430\":1,\"432\":1,\"436\":1,\"438\":1,\"441\":1,\"443\":1,\"457\":1,\"458\":2,\"472\":4,\"488\":2,\"797\":1,\"813\":10,\"814\":2,\"816\":2,\"945\":4,\"953\":2,\"967\":1,\"976\":1,\"980\":1,\"983\":4,\"1104\":1,\"1259\":1,\"1274\":2,\"1284\":4,\"1358\":1,\"1370\":2,\"1393\":1,\"1395\":1,\"1428\":1,\"1680\":4,\"1769\":4,\"1777\":3,\"1778\":1,\"1786\":4,\"1789\":5,\"1790\":1,\"1792\":6,\"1794\":8,\"1795\":2,\"1799\":4,\"1802\":2,\"1803\":2,\"1804\":13,\"1805\":6,\"1806\":1,\"1822\":4,\"1825\":1,\"1828\":1,\"1855\":1,\"1861\":1,\"1892\":1,\"1893\":1,\"1897\":1,\"1906\":4,\"1909\":1,\"1910\":1,\"1912\":1,\"1913\":1,\"1914\":3,\"1917\":2,\"1918\":2,\"1921\":2,\"1923\":3,\"1929\":2,\"1930\":1,\"1931\":1,\"1932\":1,\"1951\":3,\"1955\":2,\"1969\":2,\"1978\":3,\"1985\":1,\"1990\":2,\"1991\":1,\"1992\":1,\"1993\":5,\"2019\":1,\"2020\":1,\"2027\":1,\"2029\":2,\"2031\":1,\"2054\":2,\"2058\":1,\"2065\":3,\"2069\":1,\"2074\":1}}],[\"===>onunmounted\",{\"1\":{\"1500\":1}}],[\"===>onupdated\",{\"1\":{\"1500\":1}}],[\"===>onbeforeunmount\",{\"1\":{\"1500\":1}}],[\"===>onbeforemount\",{\"1\":{\"1500\":1}}],[\"===>\",{\"1\":{\"270\":1,\"1504\":2}}],[\"===========\",{\"1\":{\"1181\":1}}],[\"=========5\",{\"1\":{\"388\":1}}],[\"====\",{\"1\":{\"263\":1,\"816\":1}}],[\"===\",{\"1\":{\"71\":3,\"262\":1,\"421\":2,\"424\":2,\"436\":2,\"438\":3,\"441\":2,\"443\":2,\"461\":1,\"472\":1,\"482\":2,\"483\":2,\"486\":3,\"487\":2,\"488\":2,\"493\":1,\"498\":1,\"499\":2,\"501\":1,\"795\":1,\"814\":1,\"857\":1,\"947\":1,\"953\":1,\"965\":2,\"967\":1,\"976\":1,\"983\":6,\"992\":1,\"995\":3,\"1038\":1,\"1052\":1,\"1063\":5,\"1064\":1,\"1088\":2,\"1092\":1,\"1104\":1,\"1105\":3,\"1154\":1,\"1158\":1,\"1188\":1,\"1352\":1,\"1354\":1,\"1357\":1,\"1358\":1,\"1366\":1,\"1394\":5,\"1395\":1,\"1407\":2,\"1423\":1,\"1424\":1,\"1428\":1,\"1446\":2,\"1467\":2,\"1575\":1,\"1576\":1,\"1577\":1,\"1582\":1,\"1777\":9,\"1778\":2,\"1789\":2,\"1792\":9,\"1794\":8,\"1795\":6,\"1796\":2,\"1803\":3,\"1804\":5,\"1805\":4,\"1816\":2,\"1822\":1,\"1824\":2,\"1828\":4,\"1836\":1,\"1878\":1,\"1879\":2,\"1897\":7,\"1906\":2,\"1909\":4,\"1910\":7,\"1912\":2,\"1913\":2,\"1914\":7,\"1917\":4,\"1918\":4,\"1921\":2,\"1923\":4,\"1924\":2,\"1927\":3,\"1928\":2,\"1929\":5,\"1930\":6,\"1931\":2,\"1932\":5,\"1948\":3,\"1949\":3,\"1951\":7,\"1954\":1,\"1956\":2,\"1962\":2,\"1965\":4,\"1966\":5,\"1968\":2,\"1969\":4,\"1974\":5,\"1978\":1,\"1987\":2,\"1990\":7,\"1991\":2,\"1992\":1,\"1993\":9,\"2019\":1,\"2029\":6,\"2031\":1,\"2034\":3,\"2047\":2,\"2061\":2,\"2065\":3,\"2069\":1,\"2070\":2,\"2075\":3}}],[\"=6\",{\"1\":{\"165\":1}}],[\"=5\",{\"1\":{\"165\":1}}],[\"=3\",{\"1\":{\"165\":1,\"1723\":1}}],[\"=>10d\",{\"1\":{\"388\":1}}],[\"=>如图所示\",{\"1\":{\"284\":1}}],[\"=>h5\",{\"1\":{\"284\":1}}],[\"=>设置响应体\",{\"1\":{\"282\":1,\"283\":1}}],[\"=>结果是一个对象\",{\"1\":{\"282\":1}}],[\"=>get\",{\"1\":{\"282\":1}}],[\"=>返回结果是一个对象\",{\"1\":{\"273\":1}}],[\"=>文件的绝对路径\",{\"1\":{\"264\":1}}],[\"=>d\",{\"1\":{\"264\":5}}],[\"=>deprecationwarning\",{\"1\":{\"259\":1}}],[\"=>\",{\"1\":{\"148\":2,\"149\":1,\"155\":5,\"156\":1,\"191\":4,\"200\":2,\"205\":1,\"206\":2,\"207\":2,\"212\":7,\"236\":1,\"244\":1,\"246\":1,\"250\":2,\"252\":2,\"254\":1,\"255\":2,\"257\":2,\"258\":1,\"259\":3,\"260\":1,\"262\":1,\"263\":2,\"264\":1,\"273\":2,\"282\":3,\"283\":5,\"284\":7,\"285\":2,\"287\":6,\"294\":5,\"301\":2,\"304\":6,\"305\":2,\"306\":1,\"307\":1,\"315\":2,\"316\":2,\"317\":1,\"321\":3,\"329\":2,\"349\":4,\"355\":7,\"368\":1,\"417\":3,\"418\":4,\"419\":4,\"439\":1,\"450\":1,\"451\":1,\"453\":1,\"456\":2,\"457\":1,\"458\":1,\"460\":1,\"461\":1,\"464\":1,\"472\":1,\"474\":4,\"476\":1,\"480\":1,\"483\":2,\"491\":3,\"493\":2,\"494\":1,\"498\":6,\"499\":1,\"501\":1,\"504\":1,\"740\":1,\"770\":1,\"835\":1,\"841\":2,\"857\":4,\"863\":1,\"868\":7,\"869\":3,\"941\":6,\"944\":1,\"947\":2,\"996\":3,\"1035\":2,\"1036\":2,\"1040\":1,\"1058\":1,\"1105\":3,\"1181\":6,\"1188\":7,\"1380\":1,\"1393\":1,\"1395\":2,\"1396\":1,\"1427\":1,\"1430\":1,\"1437\":1,\"1446\":1,\"1450\":1,\"1467\":2,\"1486\":1,\"1493\":2,\"1496\":1,\"1497\":10,\"1498\":1,\"1499\":3,\"1507\":2,\"1516\":1,\"1518\":2,\"1573\":2,\"1576\":1,\"1577\":1,\"1578\":1,\"1584\":1,\"1586\":1,\"1587\":2,\"1769\":3,\"1777\":8,\"1778\":4,\"1779\":8,\"1792\":3,\"1803\":2,\"1804\":1,\"1806\":1,\"1822\":6,\"1827\":2,\"1828\":2,\"1865\":1,\"1872\":2,\"1878\":1,\"1879\":2,\"1880\":2,\"1886\":1,\"1888\":2,\"1889\":2,\"1890\":5,\"1891\":3,\"1892\":3,\"1893\":4,\"1894\":2,\"1895\":1,\"1896\":1,\"1897\":17,\"1902\":1,\"1906\":6,\"1910\":1,\"1911\":1,\"1917\":1,\"1918\":2,\"1924\":1,\"1925\":4,\"1929\":1,\"1930\":5,\"1931\":2,\"1932\":3,\"1937\":1,\"1943\":1,\"1948\":1,\"1949\":2,\"1951\":4,\"1953\":1,\"1954\":4,\"1962\":1,\"1966\":1,\"1977\":1,\"1978\":3,\"1979\":1,\"1984\":1,\"1985\":2,\"1987\":6,\"1990\":1,\"1993\":5,\"1997\":1,\"1998\":2,\"2002\":1,\"2012\":1,\"2015\":2,\"2019\":6,\"2021\":2,\"2025\":1,\"2028\":1,\"2029\":17,\"2031\":2,\"2034\":4,\"2041\":3,\"2042\":1,\"2043\":5,\"2045\":3,\"2047\":7,\"2053\":2,\"2054\":1,\"2055\":5,\"2060\":2,\"2061\":6,\"2065\":6,\"2066\":3,\"2067\":1,\"2068\":4,\"2069\":5,\"2070\":2,\"2072\":7,\"2073\":2,\"2074\":3,\"2075\":8,\"2076\":2,\"2078\":1,\"2079\":1,\"2080\":2,\"2081\":1,\"2082\":2,\"2083\":1,\"2084\":4}}],[\"=\",{\"0\":{\"976\":1,\"1127\":1},\"1\":{\"27\":3,\"28\":3,\"29\":3,\"30\":2,\"35\":11,\"37\":6,\"41\":2,\"44\":1,\"49\":7,\"52\":1,\"59\":1,\"71\":4,\"124\":2,\"128\":1,\"129\":2,\"134\":2,\"142\":2,\"155\":32,\"156\":4,\"165\":1,\"191\":3,\"200\":3,\"205\":1,\"212\":12,\"219\":1,\"236\":2,\"237\":5,\"238\":1,\"239\":8,\"244\":1,\"247\":1,\"251\":2,\"252\":1,\"255\":1,\"258\":1,\"260\":1,\"262\":1,\"263\":9,\"264\":3,\"269\":1,\"273\":2,\"282\":2,\"283\":3,\"284\":10,\"285\":3,\"286\":2,\"287\":11,\"294\":9,\"301\":2,\"304\":2,\"305\":2,\"307\":2,\"313\":1,\"316\":2,\"317\":2,\"321\":6,\"327\":6,\"328\":2,\"329\":4,\"349\":2,\"350\":3,\"355\":7,\"368\":2,\"378\":2,\"382\":1,\"388\":2,\"389\":2,\"390\":1,\"391\":1,\"393\":1,\"395\":2,\"396\":6,\"398\":1,\"401\":3,\"402\":4,\"405\":2,\"408\":7,\"410\":3,\"411\":5,\"412\":5,\"413\":8,\"414\":13,\"415\":6,\"416\":10,\"417\":6,\"418\":13,\"419\":10,\"421\":4,\"422\":6,\"424\":3,\"425\":1,\"428\":6,\"429\":1,\"430\":4,\"432\":2,\"433\":4,\"436\":4,\"438\":7,\"439\":2,\"441\":5,\"443\":8,\"449\":2,\"451\":2,\"452\":3,\"453\":2,\"456\":3,\"460\":2,\"461\":3,\"463\":1,\"464\":2,\"466\":8,\"467\":4,\"469\":2,\"471\":2,\"472\":9,\"474\":6,\"476\":3,\"478\":7,\"479\":3,\"480\":9,\"482\":14,\"483\":2,\"486\":4,\"487\":3,\"488\":7,\"490\":2,\"491\":1,\"493\":11,\"494\":6,\"496\":9,\"498\":7,\"499\":9,\"501\":6,\"504\":3,\"534\":1,\"553\":1,\"555\":8,\"573\":1,\"574\":1,\"621\":1,\"646\":1,\"650\":7,\"681\":1,\"685\":3,\"704\":4,\"713\":2,\"725\":2,\"726\":2,\"727\":11,\"730\":3,\"732\":6,\"733\":4,\"740\":28,\"742\":1,\"764\":5,\"765\":11,\"769\":6,\"770\":7,\"772\":10,\"773\":7,\"777\":2,\"779\":4,\"780\":4,\"782\":3,\"783\":1,\"785\":1,\"786\":5,\"789\":21,\"790\":5,\"792\":8,\"793\":2,\"794\":4,\"795\":1,\"796\":1,\"797\":1,\"801\":1,\"805\":6,\"806\":13,\"808\":4,\"809\":4,\"810\":1,\"813\":1,\"816\":1,\"821\":1,\"822\":5,\"827\":7,\"828\":27,\"829\":1,\"830\":31,\"831\":2,\"832\":17,\"833\":6,\"834\":1,\"835\":3,\"836\":10,\"840\":1,\"841\":2,\"842\":3,\"843\":9,\"844\":3,\"845\":1,\"846\":9,\"847\":7,\"848\":8,\"849\":7,\"851\":5,\"853\":5,\"854\":21,\"855\":5,\"856\":4,\"857\":4,\"860\":2,\"861\":5,\"862\":4,\"863\":5,\"864\":7,\"865\":11,\"868\":4,\"869\":2,\"870\":4,\"871\":4,\"872\":1,\"874\":3,\"876\":5,\"877\":3,\"881\":2,\"882\":1,\"883\":6,\"888\":2,\"889\":7,\"890\":2,\"891\":15,\"892\":2,\"894\":2,\"895\":1,\"896\":4,\"897\":4,\"900\":1,\"901\":3,\"907\":2,\"908\":2,\"911\":8,\"912\":6,\"916\":2,\"917\":4,\"918\":23,\"920\":1,\"923\":3,\"924\":4,\"925\":26,\"928\":1,\"929\":1,\"932\":1,\"934\":9,\"935\":2,\"939\":6,\"940\":2,\"941\":6,\"943\":4,\"944\":2,\"945\":10,\"946\":6,\"947\":2,\"948\":9,\"950\":1,\"951\":5,\"952\":4,\"953\":10,\"958\":9,\"967\":1,\"978\":2,\"980\":5,\"981\":5,\"982\":6,\"983\":9,\"984\":8,\"985\":6,\"991\":3,\"992\":6,\"993\":8,\"995\":33,\"996\":13,\"1008\":2,\"1012\":2,\"1015\":11,\"1021\":4,\"1023\":2,\"1025\":9,\"1028\":4,\"1029\":2,\"1030\":8,\"1035\":3,\"1036\":4,\"1038\":5,\"1039\":6,\"1040\":3,\"1045\":4,\"1046\":2,\"1047\":5,\"1048\":6,\"1049\":6,\"1053\":5,\"1054\":2,\"1055\":3,\"1056\":2,\"1057\":4,\"1058\":4,\"1059\":3,\"1060\":1,\"1061\":1,\"1063\":4,\"1064\":2,\"1065\":3,\"1066\":3,\"1067\":2,\"1069\":4,\"1070\":3,\"1071\":7,\"1072\":8,\"1073\":1,\"1086\":6,\"1087\":1,\"1088\":17,\"1091\":1,\"1093\":2,\"1094\":3,\"1096\":1,\"1102\":2,\"1104\":10,\"1105\":2,\"1111\":5,\"1112\":9,\"1120\":5,\"1123\":4,\"1124\":3,\"1125\":1,\"1127\":2,\"1137\":1,\"1139\":6,\"1140\":1,\"1143\":1,\"1144\":5,\"1145\":1,\"1146\":6,\"1148\":1,\"1149\":1,\"1150\":5,\"1151\":4,\"1152\":3,\"1153\":1,\"1154\":6,\"1155\":4,\"1156\":14,\"1157\":4,\"1158\":2,\"1160\":10,\"1161\":14,\"1162\":8,\"1181\":9,\"1182\":5,\"1186\":1,\"1187\":2,\"1188\":4,\"1189\":2,\"1194\":3,\"1198\":2,\"1199\":1,\"1201\":12,\"1204\":1,\"1205\":5,\"1208\":7,\"1214\":4,\"1215\":1,\"1216\":1,\"1238\":1,\"1239\":5,\"1252\":2,\"1254\":2,\"1255\":1,\"1352\":2,\"1354\":3,\"1357\":4,\"1358\":13,\"1364\":3,\"1365\":3,\"1366\":1,\"1368\":6,\"1370\":2,\"1376\":3,\"1388\":5,\"1392\":3,\"1395\":1,\"1396\":7,\"1397\":2,\"1407\":11,\"1415\":1,\"1421\":2,\"1422\":2,\"1423\":6,\"1424\":4,\"1427\":1,\"1428\":10,\"1431\":5,\"1432\":3,\"1434\":1,\"1438\":1,\"1439\":1,\"1445\":1,\"1446\":5,\"1450\":3,\"1451\":3,\"1452\":1,\"1454\":3,\"1456\":1,\"1467\":2,\"1484\":1,\"1486\":3,\"1487\":1,\"1488\":7,\"1491\":1,\"1493\":9,\"1496\":5,\"1498\":2,\"1499\":4,\"1502\":1,\"1505\":2,\"1507\":4,\"1508\":2,\"1515\":1,\"1516\":1,\"1559\":5,\"1573\":2,\"1576\":6,\"1577\":4,\"1578\":6,\"1580\":3,\"1581\":5,\"1582\":9,\"1584\":1,\"1586\":1,\"1600\":1,\"1612\":2,\"1655\":16,\"1656\":3,\"1659\":3,\"1661\":1,\"1662\":3,\"1663\":6,\"1664\":2,\"1665\":3,\"1666\":2,\"1667\":3,\"1669\":8,\"1670\":5,\"1671\":6,\"1673\":4,\"1674\":2,\"1675\":1,\"1676\":3,\"1680\":11,\"1711\":1,\"1714\":4,\"1715\":1,\"1718\":6,\"1720\":6,\"1723\":1,\"1726\":2,\"1727\":1,\"1745\":1,\"1747\":1,\"1768\":1,\"1769\":5,\"1772\":2,\"1777\":19,\"1778\":7,\"1779\":1,\"1785\":19,\"1786\":5,\"1788\":23,\"1789\":49,\"1790\":3,\"1792\":59,\"1793\":12,\"1794\":30,\"1795\":16,\"1796\":8,\"1797\":18,\"1799\":10,\"1800\":13,\"1802\":29,\"1803\":14,\"1804\":41,\"1805\":11,\"1806\":7,\"1807\":8,\"1808\":1,\"1810\":5,\"1814\":5,\"1815\":7,\"1816\":9,\"1817\":3,\"1821\":2,\"1822\":20,\"1824\":4,\"1825\":24,\"1826\":2,\"1827\":3,\"1828\":8,\"1834\":3,\"1836\":4,\"1838\":3,\"1847\":3,\"1849\":1,\"1854\":1,\"1855\":3,\"1861\":1,\"1862\":3,\"1864\":12,\"1872\":2,\"1873\":1,\"1878\":1,\"1879\":4,\"1886\":4,\"1888\":4,\"1889\":17,\"1890\":17,\"1891\":5,\"1892\":3,\"1893\":9,\"1894\":6,\"1895\":7,\"1896\":22,\"1897\":34,\"1902\":4,\"1905\":2,\"1906\":14,\"1907\":3,\"1909\":4,\"1910\":8,\"1911\":2,\"1912\":1,\"1913\":2,\"1914\":11,\"1915\":2,\"1917\":8,\"1918\":5,\"1920\":2,\"1921\":3,\"1923\":13,\"1924\":5,\"1925\":13,\"1927\":6,\"1928\":13,\"1929\":15,\"1930\":9,\"1931\":14,\"1932\":12,\"1936\":4,\"1937\":8,\"1938\":7,\"1943\":1,\"1944\":8,\"1946\":4,\"1948\":3,\"1949\":14,\"1950\":1,\"1951\":10,\"1953\":4,\"1954\":29,\"1955\":8,\"1956\":5,\"1961\":8,\"1962\":19,\"1965\":18,\"1966\":19,\"1968\":15,\"1969\":43,\"1972\":3,\"1974\":36,\"1975\":1,\"1976\":3,\"1977\":27,\"1978\":5,\"1979\":10,\"1984\":13,\"1985\":9,\"1986\":6,\"1987\":15,\"1990\":6,\"1991\":2,\"1992\":2,\"1993\":18,\"1997\":10,\"1998\":7,\"2000\":2,\"2001\":7,\"2002\":12,\"2010\":1,\"2012\":1,\"2013\":3,\"2015\":2,\"2016\":9,\"2019\":13,\"2020\":6,\"2021\":5,\"2025\":2,\"2026\":4,\"2027\":4,\"2028\":5,\"2029\":14,\"2031\":10,\"2034\":12,\"2041\":15,\"2042\":2,\"2043\":9,\"2044\":5,\"2045\":8,\"2047\":35,\"2049\":1,\"2050\":5,\"2052\":1,\"2053\":5,\"2054\":8,\"2055\":6,\"2057\":3,\"2058\":31,\"2059\":1,\"2060\":4,\"2061\":29,\"2062\":3,\"2065\":25,\"2066\":7,\"2067\":1,\"2068\":11,\"2069\":3,\"2070\":9,\"2072\":3,\"2073\":8,\"2074\":4,\"2075\":7,\"2078\":1,\"2079\":1,\"2080\":1,\"2081\":1,\"2082\":2,\"2083\":1,\"2091\":1,\"2101\":3}}],[\"模一样的\",{\"1\":{\"681\":1}}],[\"模拟promise在微队列中执行\",{\"1\":{\"1777\":1}}],[\"模拟\",{\"1\":{\"1767\":1}}],[\"模拟函数重载\",{\"0\":{\"484\":1}}],[\"模拟栈\",{\"0\":{\"452\":1}}],[\"模拟数组遍历\",{\"0\":{\"434\":1}}],[\"模拟bind\",{\"0\":{\"431\":1}}],[\"模拟call\",{\"0\":{\"430\":1}}],[\"模拟apply\",{\"0\":{\"426\":1,\"427\":1}}],[\"模拟instanceof\",{\"0\":{\"423\":1}}],[\"模拟new\",{\"0\":{\"420\":1}}],[\"模板的\",{\"1\":{\"1974\":1}}],[\"模板的文件名\",{\"1\":{\"329\":1}}],[\"模板会经由编译器编译为\",{\"1\":{\"1953\":1}}],[\"模板和配置对象\",{\"1\":{\"1953\":1}}],[\"模板就是一个普通的字符串\",{\"1\":{\"1880\":1}}],[\"模板挂载\",{\"0\":{\"1806\":1}}],[\"模板编译器的目标代码其实就是渲染函数\",{\"1\":{\"1972\":1}}],[\"模板编译阶段完成之后\",{\"1\":{\"1806\":1}}],[\"模板编译阶段只存在于完整版中\",{\"1\":{\"1805\":1}}],[\"模板编译发生在\",{\"1\":{\"1805\":1}}],[\"模板编译优化后的ast\",{\"1\":{\"1797\":1}}],[\"模板编译过程就是把用户写的模板经过一系列处理最终生成render函数的过程\",{\"1\":{\"1790\":1}}],[\"模板编译\",{\"0\":{\"1790\":1,\"1805\":1},\"1\":{\"1782\":1}}],[\"模板编译时\",{\"1\":{\"1446\":1}}],[\"模板引用也可以被用在一个子组件上\",{\"1\":{\"1499\":1}}],[\"模板引擎的支持\",{\"1\":{\"331\":4}}],[\"模板引擎是分离\",{\"1\":{\"323\":1}}],[\"模板引擎\",{\"0\":{\"322\":1},\"1\":{\"331\":1}}],[\"模板看不到\",{\"1\":{\"1486\":1}}],[\"模板中会使用的数据\",{\"1\":{\"2001\":1}}],[\"模板中的指令\",{\"1\":{\"1790\":1}}],[\"模板中读取数据\",{\"1\":{\"1487\":1}}],[\"模板中使用\",{\"1\":{\"1462\":1}}],[\"模板中直接指定后面列表变量里具体元素的顺序即可\",{\"1\":{\"388\":1}}],[\"模板解析的功能有\",{\"1\":{\"1427\":1}}],[\"模板解析器\",{\"1\":{\"1427\":1}}],[\"模板解析阶段\",{\"1\":{\"1368\":1,\"1388\":1,\"1392\":1,\"1790\":2}}],[\"模板解析\",{\"0\":{\"1791\":1},\"1\":{\"1353\":2,\"1802\":1}}],[\"模板写法\",{\"0\":{\"1351\":1}}],[\"模板字面量看上去仅仅是普通\",{\"1\":{\"790\":1}}],[\"模板直出\",{\"1\":{\"507\":1}}],[\"模板语法\",{\"0\":{\"482\":1}}],[\"模板渲染\",{\"0\":{\"481\":1}}],[\"模板\",{\"1\":{\"332\":1,\"1348\":1,\"1350\":1,\"1353\":1,\"1874\":2,\"1877\":1}}],[\"模板文件\",{\"1\":{\"329\":1}}],[\"模板文件存在的位置\",{\"1\":{\"128\":1}}],[\"模型的运转流程\",{\"0\":{\"1180\":1}}],[\"模型的\",{\"0\":{\"1179\":1}}],[\"模型\",{\"0\":{\"1346\":1,\"1347\":1},\"1\":{\"224\":1,\"1109\":1,\"1661\":1,\"1673\":1}}],[\"模型对象\",{\"1\":{\"189\":1}}],[\"模块相关的元数据\",{\"1\":{\"2053\":1}}],[\"模块也不会使用修改的配置\",{\"1\":{\"1320\":1}}],[\"模块后更改了配置\",{\"1\":{\"1320\":1}}],[\"模块只会被加载一次\",{\"1\":{\"1320\":1}}],[\"模块系统\",{\"1\":{\"1319\":1}}],[\"模块在分线程执行\",{\"1\":{\"1182\":1}}],[\"模块下的\",{\"1\":{\"408\":2}}],[\"模块中的所有成员都通过这个命名空间来访问\",{\"1\":{\"1302\":1}}],[\"模块中的\",{\"1\":{\"408\":2}}],[\"模块中的代码需要放置到函数中执行\",{\"1\":{\"37\":1}}],[\"模块导入方式\",{\"0\":{\"378\":1}}],[\"模块名\",{\"1\":{\"378\":5}}],[\"模块名字\",{\"1\":{\"377\":1}}],[\"模块名或模块路径\",{\"1\":{\"35\":1}}],[\"模块除了被引用以外\",{\"1\":{\"377\":1}}],[\"模块提供了\",{\"1\":{\"264\":1}}],[\"模块对资源进行操作时\",{\"1\":{\"261\":1}}],[\"模块规范\",{\"1\":{\"241\":1}}],[\"模块内部\",{\"1\":{\"237\":1}}],[\"模块初体验\",{\"0\":{\"236\":1}}],[\"模块暴露数据的方式有两种\",{\"1\":{\"237\":1}}],[\"模块暴露数据\",{\"0\":{\"235\":1}}],[\"模块\",{\"0\":{\"238\":1,\"377\":1,\"2011\":1},\"1\":{\"155\":2,\"250\":1,\"263\":2,\"273\":1,\"282\":1,\"283\":1,\"284\":3,\"287\":2,\"376\":2,\"377\":1,\"408\":1,\"1172\":1,\"1182\":1,\"2011\":2}}],[\"模块数组\",{\"1\":{\"155\":1}}],[\"模块以\",{\"1\":{\"142\":1}}],[\"模块时\",{\"1\":{\"142\":1}}],[\"模块合并\",{\"1\":{\"122\":1}}],[\"模块划分越细越好\",{\"1\":{\"117\":1}}],[\"模块的私有成员无法在模块外部使用\",{\"1\":{\"1305\":1}}],[\"模块的搜索路径\",{\"0\":{\"379\":1}}],[\"模块的文件名以\",{\"1\":{\"378\":1}}],[\"模块的文件名中带\",{\"1\":{\"378\":1}}],[\"模块的名字属性会根据不同的使用场景发生变化\",{\"1\":{\"377\":1}}],[\"模块的名字即可\",{\"1\":{\"238\":1}}],[\"模块的方式\",{\"1\":{\"307\":1}}],[\"模块的获取方式\",{\"1\":{\"305\":1,\"307\":1}}],[\"模块的时候\",{\"1\":{\"262\":1}}],[\"模块的内部数据是私有的\",{\"1\":{\"232\":1}}],[\"模块的类型设置为\",{\"1\":{\"142\":1}}],[\"模块的处理\",{\"1\":{\"142\":1}}],[\"模块的基本导出和导入\",{\"0\":{\"48\":1}}],[\"模块的引入\",{\"0\":{\"47\":1}}],[\"模块文件\",{\"1\":{\"47\":1}}],[\"模块文件中的this指向exports\",{\"1\":{\"37\":1}}],[\"模块标识名与模块路径映射\",{\"1\":{\"42\":1,\"45\":1}}],[\"模块路径\",{\"1\":{\"37\":1,\"50\":4,\"52\":3}}],[\"模块化+命名空间\",{\"0\":{\"1454\":1}}],[\"模块化规范\",{\"1\":{\"240\":1}}],[\"模块化规范中的内容\",{\"1\":{\"240\":1}}],[\"模块化好处\",{\"0\":{\"234\":1}}],[\"模块化具有以下的特点\",{\"1\":{\"46\":1}}],[\"模块化编码\",{\"0\":{\"35\":1}}],[\"模块化编程\",{\"0\":{\"20\":1}}],[\"模块化的出现\",{\"1\":{\"25\":1}}],[\"模块化成为了\",{\"1\":{\"25\":1}}],[\"模块化\",{\"0\":{\"212\":1,\"230\":1},\"1\":{\"25\":1,\"46\":1,\"232\":1,\"1025\":1},\"2\":{\"54\":1,\"121\":1,\"126\":1,\"131\":1,\"136\":1,\"140\":1,\"145\":1,\"152\":1,\"161\":1}}],[\"模块化标准\",{\"1\":{\"24\":1}}],[\"模块化发展史\",{\"0\":{\"21\":1}}],[\"模式相比\",{\"1\":{\"2050\":1}}],[\"模式相比略差\",{\"1\":{\"1468\":1}}],[\"模式用到\",{\"1\":{\"2050\":1}}],[\"模式为例\",{\"1\":{\"2034\":1}}],[\"模式来适应不同的需求和浏览器环境\",{\"1\":{\"2029\":1}}],[\"模式的原理在于一个\",{\"1\":{\"2049\":1}}],[\"模式的问题\",{\"1\":{\"1468\":1}}],[\"模式的研发\",{\"1\":{\"218\":1}}],[\"模式作用范围\",{\"1\":{\"921\":1}}],[\"模式修正符\",{\"0\":{\"919\":1}}],[\"模式对象\",{\"1\":{\"189\":1}}],[\"模式下具体流程\",{\"1\":{\"2030\":1}}],[\"模式下\",{\"1\":{\"158\":1,\"218\":1}}],[\"模式增强\",{\"0\":{\"30\":1},\"1\":{\"30\":1}}],[\"模式\",{\"0\":{\"27\":1,\"28\":1,\"29\":1,\"2049\":1,\"2050\":1},\"1\":{\"28\":1,\"29\":1,\"956\":1,\"1468\":3,\"1628\":1,\"1644\":1,\"1666\":1,\"2027\":1,\"2048\":2,\"2050\":1,\"2058\":1,\"2063\":2,\"2064\":2}}],[\"变更状态\",{\"1\":{\"1777\":1}}],[\"变化\",{\"1\":{\"1906\":1,\"2035\":1}}],[\"变化量\",{\"1\":{\"1722\":3}}],[\"变化后会通知浏览器端对应用进行\",{\"1\":{\"158\":1}}],[\"变化后根据配置的时间执行重新打包\",{\"1\":{\"157\":1}}],[\"变成了一个字符串\",{\"1\":{\"1015\":1}}],[\"变成\",{\"1\":{\"995\":1}}],[\"变体的一种方式\",{\"1\":{\"956\":1}}],[\"变为了\",{\"1\":{\"2050\":1}}],[\"变为$http\",{\"1\":{\"1445\":1}}],[\"变为\",{\"1\":{\"752\":1,\"1088\":2}}],[\"变形发生在合成线程\",{\"1\":{\"1526\":1}}],[\"变形的原点在盒子中心\",{\"1\":{\"619\":1}}],[\"变形原点的位置\",{\"1\":{\"619\":1}}],[\"变形就是指通过\",{\"1\":{\"615\":1}}],[\"变形\",{\"0\":{\"615\":1}}],[\"变\",{\"1\":{\"381\":1}}],[\"变量包含了传入的所有参数\",{\"1\":{\"1335\":1}}],[\"变量用于\",{\"1\":{\"1328\":1}}],[\"变量用于url\",{\"1\":{\"1328\":1}}],[\"变量用于属性名\",{\"1\":{\"1328\":1}}],[\"变量用于选择器名\",{\"1\":{\"1328\":1}}],[\"变量插值\",{\"0\":{\"1328\":1}}],[\"变量依然会被导入为全局的变量\",{\"1\":{\"1314\":1}}],[\"变量保存值\",{\"1\":{\"1263\":1}}],[\"变量值\",{\"1\":{\"1258\":1}}],[\"变量里面\",{\"1\":{\"1105\":1}}],[\"变量并没有被放在闭包中\",{\"1\":{\"1023\":1}}],[\"变量被赋值为\",{\"1\":{\"1015\":2}}],[\"变量被声明了\",{\"1\":{\"980\":1}}],[\"变量对象赋值\",{\"1\":{\"1015\":1}}],[\"变量对象\",{\"1\":{\"1015\":1}}],[\"变量声明\",{\"1\":{\"1015\":1,\"1301\":1}}],[\"变量和函数分别成为\",{\"1\":{\"1012\":1}}],[\"变量是个不错的选择\",{\"1\":{\"1291\":1}}],[\"变量是声明式的\",{\"1\":{\"1259\":1}}],[\"变量是命令式的\",{\"1\":{\"1259\":1}}],[\"变量是内存的标识\",{\"1\":{\"1001\":1}}],[\"变量是在if块中声明\",{\"1\":{\"948\":1}}],[\"变量三者之间的关系\",{\"0\":{\"1001\":1}}],[\"变量赋值\",{\"0\":{\"985\":1},\"1\":{\"1015\":1}}],[\"变量提升\",{\"0\":{\"939\":1},\"1\":{\"1012\":1}}],[\"变量设置了一个默认值为\",{\"1\":{\"832\":1}}],[\"变量占位符由起始的$\",{\"1\":{\"790\":1}}],[\"变量占位符允许将任何有效的\",{\"1\":{\"790\":1}}],[\"变量的调用\",{\"1\":{\"1261\":1}}],[\"变量的用于一般包括以下几种\",{\"1\":{\"1259\":1}}],[\"变量的值和调用test\",{\"1\":{\"1086\":1}}],[\"变量的值\",{\"1\":{\"1023\":1}}],[\"变量的值就使用了默认的\",{\"1\":{\"832\":1}}],[\"变量的赋值与初始化\",{\"0\":{\"780\":1}}],[\"变量的作用域\",{\"1\":{\"402\":1}}],[\"变量或表达式的值将作为一个字符串在浏览器中输出\",{\"1\":{\"327\":1}}],[\"变量\",{\"0\":{\"380\":1,\"778\":1,\"997\":1,\"1258\":1,\"1326\":1},\"1\":{\"262\":1,\"378\":1,\"379\":1,\"392\":1,\"790\":1,\"900\":1,\"901\":1,\"929\":1,\"941\":4,\"1499\":1,\"1969\":1}}],[\"变具备了编写大型应用的基本功\",{\"1\":{\"25\":1}}],[\"变基和\",{\"1\":{\"11\":1}}],[\"变基时发生了什么\",{\"1\":{\"11\":1}}],[\"变基\",{\"0\":{\"11\":1}}],[\"通道\",{\"1\":{\"2091\":1}}],[\"通道数为\",{\"1\":{\"1665\":1}}],[\"通知user\",{\"1\":{\"1860\":1}}],[\"通知\",{\"1\":{\"1855\":1}}],[\"通知更新\",{\"0\":{\"1850\":1,\"1855\":1},\"1\":{\"1786\":1}}],[\"通知更新时重新执行副作用函数\",{\"1\":{\"1784\":1}}],[\"通知依赖更新\",{\"1\":{\"1785\":1}}],[\"通知变化\",{\"1\":{\"1785\":1}}],[\"通知读事件\",{\"1\":{\"408\":1}}],[\"通分法\",{\"1\":{\"1737\":1}}],[\"通信阶段\",{\"1\":{\"1647\":1}}],[\"通信\",{\"1\":{\"1429\":2},\"2\":{\"1597\":1,\"1618\":1,\"1652\":1}}],[\"通用的读取操作\",{\"1\":{\"1897\":1}}],[\"通用的\",{\"1\":{\"1782\":1}}],[\"通用的事件对象属性\",{\"0\":{\"1152\":1}}],[\"通用方法\",{\"0\":{\"1586\":1},\"1\":{\"1087\":2}}],[\"通用性更强\",{\"1\":{\"177\":1}}],[\"通俗点说就是只找\",{\"1\":{\"1243\":1}}],[\"通俗的来讲\",{\"1\":{\"943\":1}}],[\"通俗来说\",{\"1\":{\"216\":1}}],[\"通配选择器\",{\"1\":{\"516\":1,\"524\":1}}],[\"通常缩写为\",{\"1\":{\"2087\":1}}],[\"通常会存放一组像\",{\"1\":{\"2061\":1}}],[\"通常就是\",{\"1\":{\"2050\":1}}],[\"通常为人数或面积\",{\"1\":{\"1740\":1}}],[\"通常取\",{\"1\":{\"1664\":1}}],[\"通常出现在卷积和池化层后以便将其输出进入全连接层\",{\"1\":{\"1661\":1}}],[\"通常是浏览器地址栏中的路径和查询参数\",{\"1\":{\"2026\":1}}],[\"通常是在计算注意力权重时所依据的向量\",{\"1\":{\"1678\":1}}],[\"通常是写在样式表的顶层\",{\"1\":{\"1314\":1}}],[\"通常是一个字符串\",{\"1\":{\"1252\":1}}],[\"通常用于跨多个文件组织\",{\"1\":{\"1309\":1}}],[\"通常用于将内容推离边框\",{\"1\":{\"545\":1}}],[\"通常由函数返回\",{\"1\":{\"1275\":1}}],[\"通常希望接收到正确的参数\",{\"1\":{\"1252\":1}}],[\"通常等于\",{\"1\":{\"1093\":1,\"2051\":1}}],[\"通常含有该节的一些基本信息\",{\"1\":{\"694\":1}}],[\"通常包含h1\",{\"1\":{\"694\":1}}],[\"通常情况下我们都是一步到位\",{\"1\":{\"1155\":1}}],[\"通常情况下有两种实现方式\",{\"1\":{\"1028\":1}}],[\"通常情况下\",{\"1\":{\"980\":1,\"1632\":1}}],[\"通常情况下只会使用其中一个\",{\"1\":{\"569\":2}}],[\"通常情况\",{\"1\":{\"610\":1}}],[\"通常和文字内容相关的属性都能被继承\",{\"1\":{\"527\":1}}],[\"通常直接使用\",{\"1\":{\"365\":1}}],[\"通常称为\",{\"1\":{\"294\":1}}],[\"通常使用\",{\"1\":{\"142\":1}}],[\"通过校验对方是否存在证书的私钥\",{\"1\":{\"2091\":1}}],[\"通过在用户导航到目标网站时发送\",{\"1\":{\"2088\":1}}],[\"通过在绘图状态栈中弹出顶端的状态\",{\"1\":{\"711\":1}}],[\"通过插槽来决定如何使用\",{\"1\":{\"2070\":1}}],[\"通过插件的学习\",{\"1\":{\"148\":1}}],[\"通过两个状态对象之间的\",{\"1\":{\"2061\":1}}],[\"通过向\",{\"1\":{\"2061\":1}}],[\"通过刚才创建的状态对象调用\",{\"1\":{\"2058\":1}}],[\"通过这个对象可以获取到和\",{\"1\":{\"2051\":1}}],[\"通过这种方式\",{\"1\":{\"1137\":1}}],[\"通过对比当前路由和需要跳转的路由对象\",{\"1\":{\"2029\":1}}],[\"通过对事件冒泡的理解\",{\"1\":{\"1155\":1}}],[\"通过定义\",{\"1\":{\"2029\":1}}],[\"通过定位我们可以将元素摆放到页面的任意位置\",{\"1\":{\"567\":1}}],[\"通过调用其返回对象中的\",{\"1\":{\"1998\":1}}],[\"通过调用\",{\"1\":{\"1979\":1}}],[\"通过调用$on\",{\"1\":{\"1801\":1,\"1802\":1}}],[\"通过原始数据对象调用\",{\"1\":{\"1930\":2}}],[\"通过原始数据对象执行\",{\"1\":{\"1928\":1}}],[\"通过原始数据\",{\"1\":{\"1929\":1}}],[\"通过指定第三个参数\",{\"1\":{\"1927\":1}}],[\"通过pushstate或者replacestate\",{\"1\":{\"2029\":1}}],[\"通过proxy\",{\"1\":{\"1922\":1}}],[\"通过pagexoffset和pageyoffset属性我们可以获取文档在窗口左上角水平和垂直方向滚动的像素\",{\"1\":{\"1087\":1}}],[\"通过length判断元素是否存在\",{\"1\":{\"1921\":1}}],[\"通过索引读取和设置数组\",{\"1\":{\"1993\":1}}],[\"通过索引修改数组元素值\",{\"1\":{\"1915\":1}}],[\"通过索引访问数组元素值\",{\"1\":{\"1915\":1}}],[\"通过返回值能够拿到对应的副作用函数\",{\"1\":{\"1894\":1}}],[\"通过编译器\",{\"1\":{\"1877\":1}}],[\"通过编译成函数\",{\"1\":{\"1446\":1,\"1494\":1}}],[\"通过判断所处环境来决定构建的版本是否包含这些警告信息\",{\"1\":{\"1875\":1}}],[\"通过vm\",{\"1\":{\"1858\":1}}],[\"通过render\",{\"1\":{\"1849\":1}}],[\"通过进行数据变化前后的虚拟dom\",{\"1\":{\"1789\":1}}],[\"通过具体描述厘清被定义词中关键字的含义\",{\"1\":{\"1757\":1}}],[\"通过可学习的缩放和偏移参数进行线性变换\",{\"1\":{\"1665\":1}}],[\"通过计算当前梯度和历史梯度的加权平均值来更新模型参数\",{\"1\":{\"1659\":1}}],[\"通过最终迭代获得的数值解可能仅使目标函数局部最优\",{\"1\":{\"1658\":1}}],[\"通过客户端和服务器的视角\",{\"1\":{\"1543\":1}}],[\"通过customref去实现自定义\",{\"1\":{\"1507\":1}}],[\"通过children配置子级路由\",{\"1\":{\"1458\":1}}],[\"通过重写更新数组的一系列方法来实现拦截\",{\"1\":{\"1490\":1}}],[\"通过代理对象操作源对象内部数据进行操作\",{\"1\":{\"1488\":1}}],[\"通过路由规则\",{\"1\":{\"1467\":2}}],[\"通过切换\",{\"1\":{\"1457\":1}}],[\"通过this\",{\"1\":{\"1437\":1}}],[\"通过text\",{\"1\":{\"614\":1}}],[\"通过包裹数组更新元素的方法实现\",{\"1\":{\"1396\":1}}],[\"通过setter实现监视\",{\"1\":{\"1396\":1}}],[\"通过style属性设置和读取的都是内联样式\",{\"1\":{\"1127\":1}}],[\"通过object\",{\"1\":{\"1366\":1,\"1490\":1,\"1492\":1,\"1786\":1,\"1840\":1,\"1845\":1,\"1846\":1,\"1859\":1,\"2026\":1}}],[\"通过一个对象代理对另一个对象中属性的操作\",{\"1\":{\"1365\":1}}],[\"通过加引号可以避免\",{\"1\":{\"1341\":1}}],[\"通过with\",{\"1\":{\"1306\":1}}],[\"通过组合选择器的方式展现\",{\"1\":{\"1299\":1}}],[\"通过关键词\",{\"1\":{\"1297\":1}}],[\"通过标签绑定\",{\"1\":{\"1214\":1}}],[\"通过标准日期时间格式字符串\",{\"1\":{\"877\":1}}],[\"通过它获取的偏移需要将父元素及子元素都设置定位属性\",{\"1\":{\"1207\":1}}],[\"通过选择器获取\",{\"1\":{\"1198\":1}}],[\"通过选择器可以选中页面中的指定元素\",{\"1\":{\"514\":1}}],[\"通过取消默认行为可以自定义右键操作\",{\"1\":{\"1163\":1}}],[\"通过阻止默认行为来屏蔽剪贴板\",{\"1\":{\"1162\":1}}],[\"通过允许一些功能在客户端处理\",{\"1\":{\"1137\":1}}],[\"通过前面的学习\",{\"1\":{\"1124\":1}}],[\"通过前面的介绍\",{\"1\":{\"801\":1}}],[\"通过柯里化函数\",{\"1\":{\"1039\":2}}],[\"通过闭包在属性的\",{\"1\":{\"1889\":1}}],[\"通过闭包可以让局部变量持续保存下来\",{\"1\":{\"1024\":1}}],[\"通过闭包可以让外部环境访问到函数内部的局部变量\",{\"1\":{\"1024\":1}}],[\"通过闭包来获取文件信息\",{\"1\":{\"773\":1}}],[\"通过变量我们可以操作\",{\"1\":{\"1001\":1}}],[\"通过内存中的引用地址获取该对象值\",{\"1\":{\"982\":1}}],[\"通过上面的代码\",{\"1\":{\"939\":1,\"2041\":1}}],[\"通过设置sync属性可以在当前队列执行\",{\"1\":{\"1858\":1}}],[\"通过设置samesite属性可以实现跨域\",{\"1\":{\"350\":1}}],[\"通过设置标志i\",{\"1\":{\"919\":1}}],[\"通过以下的方式可以获取到时间戳\",{\"1\":{\"874\":1}}],[\"通过数组的下标\",{\"1\":{\"844\":1}}],[\"通过中括号法来访问时可以不用添加引号\",{\"1\":{\"828\":1}}],[\"通过datatransfer\",{\"1\":{\"765\":1}}],[\"通过下面的\",{\"1\":{\"759\":1}}],[\"通过下述属性使用户可以直接使用服务器中的字体\",{\"1\":{\"621\":1}}],[\"通过将当前状态放入栈中\",{\"1\":{\"711\":1}}],[\"通过将类变量隐藏起来\",{\"1\":{\"405\":1}}],[\"通过填充路径的内容区域生成实心的图形\",{\"1\":{\"711\":1}}],[\"通过线条来绘制图形轮廓\",{\"1\":{\"711\":1}}],[\"通过媒体查询\",{\"1\":{\"651\":1}}],[\"通过过渡可以指定一个属性发生变化时的切换方式\",{\"1\":{\"641\":1}}],[\"通过渐变可以设置一些复杂的背景颜色\",{\"1\":{\"636\":1}}],[\"通过文档查看\",{\"1\":{\"623\":1}}],[\"通过伪元素来设置图标字体\",{\"1\":{\"623\":1}}],[\"通过实体来使用图标字体\",{\"1\":{\"623\":1}}],[\"通过旋转可以使元素沿着\",{\"1\":{\"617\":1}}],[\"通过浮动可以制作一些\",{\"1\":{\"561\":1}}],[\"通过浮动可以使一个元素向其父元素的左侧或右侧移动\",{\"1\":{\"559\":1}}],[\"通过滚动条来查看完整的内容\",{\"1\":{\"557\":1}}],[\"通过三种颜色的不同浓度来调配出不同的颜色\",{\"1\":{\"535\":1}}],[\"通过声明块来指定要为元素设置的样式\",{\"1\":{\"514\":1}}],[\"通过负载均衡\",{\"1\":{\"508\":1}}],[\"通过number\",{\"1\":{\"794\":1}}],[\"通过node服务器转发请求到后端的服务器\",{\"1\":{\"507\":1}}],[\"通过new调用\",{\"1\":{\"433\":1}}],[\"通过传递参数的个数来进入不同的分支\",{\"1\":{\"486\":1}}],[\"通过使用\",{\"1\":{\"405\":1,\"1492\":1}}],[\"通过字典的解包参数方式\",{\"1\":{\"402\":1}}],[\"通过元组或列表的解包参数的方式\",{\"1\":{\"402\":1}}],[\"通过正则可以进行模糊查询\",{\"1\":{\"207\":1}}],[\"通过添加\",{\"1\":{\"142\":1}}],[\"通过锁文件判断\",{\"1\":{\"89\":1}}],[\"通过配置命令别名可以更简单的执行命令\",{\"1\":{\"77\":1}}],[\"通过该命令可以依据\",{\"1\":{\"74\":1}}],[\"通过模块路径找到本机文件\",{\"1\":{\"37\":1}}],[\"通过\",{\"0\":{\"36\":1},\"1\":{\"67\":1,\"123\":1,\"143\":1,\"148\":1,\"218\":1,\"220\":1,\"239\":1,\"273\":2,\"403\":1,\"405\":1,\"630\":2,\"751\":1,\"758\":1,\"765\":2,\"846\":4,\"948\":1,\"995\":1,\"1015\":1,\"1023\":1,\"1064\":1,\"1094\":1,\"1105\":2,\"1146\":2,\"1150\":1,\"1249\":1,\"1252\":1,\"1254\":1,\"1277\":1,\"1278\":1,\"1298\":1,\"1301\":1,\"1308\":1,\"1309\":1,\"1310\":1,\"1366\":1,\"1491\":2,\"1530\":1,\"1655\":1,\"1788\":1,\"1911\":1,\"1923\":1,\"1924\":1,\"1928\":1,\"1930\":1,\"1932\":1,\"1938\":1,\"1948\":1,\"1953\":1,\"1962\":1,\"1993\":1,\"2026\":1,\"2028\":1,\"2032\":1,\"2035\":1,\"2045\":3,\"2047\":1,\"2091\":1}}],[\"通过短短一个月的时间集训\",{\"1\":{\"23\":1}}],[\"通向大型应用的基石\",{\"1\":{\"25\":1}}],[\"为用户生成一个随机的\",{\"1\":{\"2088\":1}}],[\"为基础\",{\"1\":{\"2073\":1}}],[\"为基准\",{\"1\":{\"1789\":1}}],[\"为后续调用\",{\"1\":{\"2002\":1}}],[\"为函数体生成代码\",{\"1\":{\"1979\":1}}],[\"为函数的参数生成代码\",{\"1\":{\"1979\":1}}],[\"为toref添加getter\",{\"1\":{\"1937\":1}}],[\"为原始对象\",{\"1\":{\"1927\":1}}],[\"为原点\",{\"1\":{\"726\":2}}],[\"为下述修改作准备\",{\"1\":{\"1910\":1}}],[\"为对象添加新的属性值\",{\"1\":{\"1906\":1}}],[\"为代理对象\",{\"1\":{\"1902\":1,\"1922\":1}}],[\"为副作用函数添加调度函数\",{\"1\":{\"1893\":1}}],[\"为辅助创建虚拟\",{\"1\":{\"1877\":1}}],[\"为子组件创建vue实例\",{\"1\":{\"1862\":1}}],[\"为计算属性的getter创建watcher\",{\"1\":{\"1804\":1}}],[\"为空\",{\"1\":{\"1792\":1}}],[\"为每个计算属性创建一个computed\",{\"1\":{\"1845\":1}}],[\"为每个元素创建dom\",{\"1\":{\"1789\":1}}],[\"为每一个添加到\",{\"1\":{\"1366\":1}}],[\"为注释节点\",{\"1\":{\"1789\":1}}],[\"为新增元素添加响应式\",{\"1\":{\"1785\":1}}],[\"为末期\",{\"1\":{\"1747\":1}}],[\"为方便计算我们可以将基期设为\",{\"1\":{\"1722\":1}}],[\"为保证精度和速度\",{\"1\":{\"1711\":1}}],[\"为保留\",{\"1\":{\"1213\":1}}],[\"为此做出如下设计\",{\"1\":{\"1977\":1}}],[\"为此利用回调函数的机制将此部分提取出去进行解耦\",{\"1\":{\"1977\":1}}],[\"为此利用之前实现的调度器做出如下修改\",{\"1\":{\"1896\":1}}],[\"为此添加\",{\"1\":{\"1938\":1}}],[\"为此进行如下修改\",{\"1\":{\"1890\":1}}],[\"为此我们需要知道哪些依赖集合中包含这个副作用函数\",{\"1\":{\"1890\":1}}],[\"为此我们需要给每一个元素来绑定一个事件监听器\",{\"1\":{\"1158\":1}}],[\"为此在其前后通常会出现其服务的观点句\",{\"1\":{\"1688\":1}}],[\"为丢弃的概率\",{\"1\":{\"1664\":1}}],[\"为元素节点\",{\"1\":{\"1789\":1}}],[\"为元素对象绑定事件\",{\"1\":{\"1575\":1}}],[\"为元素添加属性\",{\"1\":{\"1407\":1}}],[\"为固定步骤\",{\"1\":{\"1573\":1}}],[\"为何会阻碍渲染\",{\"0\":{\"1559\":1}}],[\"为未添加自定义属性标识的样式新开一个<style><\",{\"1\":{\"1433\":1}}],[\"为未来新版本的\",{\"1\":{\"956\":1,\"959\":1}}],[\"为组件占位符时才有值\",{\"1\":{\"1866\":1}}],[\"为组件占位\",{\"1\":{\"1423\":1}}],[\"为props属性\",{\"1\":{\"1358\":1}}],[\"为绑定的变量赋予新的值\",{\"1\":{\"1357\":1}}],[\"为止\",{\"1\":{\"1286\":1}}],[\"为扩展名\",{\"1\":{\"1249\":1,\"1250\":1}}],[\"为浅克隆\",{\"1\":{\"1213\":1}}],[\"为深克隆\",{\"1\":{\"1213\":1}}],[\"为不保留\",{\"1\":{\"1213\":1}}],[\"为不同的值\",{\"1\":{\"796\":1}}],[\"为两种不同编写风格提供的\",{\"1\":{\"1209\":1}}],[\"为网站或者应用程序添加基于位置的信息提供了有用的接口\",{\"1\":{\"1102\":1}}],[\"为要处理的项目创建一个队列\",{\"1\":{\"1038\":1}}],[\"为数组元素生成代码\",{\"1\":{\"1979\":1}}],[\"为数组设立了其独自的响应式方案\",{\"1\":{\"1785\":1}}],[\"为数组进行排序的时候\",{\"1\":{\"944\":1}}],[\"为数据种类\",{\"1\":{\"765\":1}}],[\"为反向引用捕获文本\",{\"1\":{\"902\":1}}],[\"为字符串重复的次数\",{\"1\":{\"889\":1}}],[\"为字体的编码\",{\"1\":{\"623\":1}}],[\"为底\",{\"1\":{\"879\":2}}],[\"为我们提供了一种通过\",{\"1\":{\"771\":1}}],[\"为我们的源对象\",{\"1\":{\"764\":1}}],[\"为键的一个\",{\"1\":{\"770\":1}}],[\"为一行\",{\"1\":{\"765\":1}}],[\"为一个箭头函数\",{\"1\":{\"996\":1}}],[\"为一个控制点\",{\"1\":{\"718\":1}}],[\"为一个布尔值\",{\"1\":{\"716\":1}}],[\"为一个对象\",{\"1\":{\"284\":2}}],[\"为目标对象设置\",{\"1\":{\"764\":1}}],[\"为输入框构造一个选择列表\",{\"1\":{\"758\":1}}],[\"为控制点二\",{\"1\":{\"719\":1}}],[\"为控制点一\",{\"1\":{\"719\":1}}],[\"为结束点\",{\"1\":{\"718\":1,\"719\":1}}],[\"为半径\",{\"1\":{\"716\":1}}],[\"为半径的圆弧\",{\"1\":{\"716\":1}}],[\"为绘制圆弧所在圆上的圆心坐标\",{\"1\":{\"716\":1}}],[\"为圆心的以\",{\"1\":{\"716\":1}}],[\"为负值的堆叠上下文\",{\"1\":{\"578\":1}}],[\"为父元素设置\",{\"1\":{\"564\":1}}],[\"为最新元素提供插入空间\",{\"1\":{\"412\":1}}],[\"为其添加额外的上下文信息\",{\"1\":{\"1977\":1}}],[\"为其创建一个执行上下文\",{\"1\":{\"1014\":1}}],[\"为其\",{\"1\":{\"539\":1}}],[\"为其原函数指定一些默认的参数\",{\"1\":{\"402\":1}}],[\"为其设置默认值\",{\"1\":{\"212\":1}}],[\"为单个参数指定形参\",{\"1\":{\"402\":1}}],[\"为单行字符串的另一种写法\",{\"1\":{\"383\":1}}],[\"为单行字符串\",{\"1\":{\"383\":1}}],[\"为虚数部分\",{\"1\":{\"395\":1}}],[\"为实数部分\",{\"1\":{\"395\":1}}],[\"为浮点数时\",{\"1\":{\"395\":1}}],[\"为多行字符串\",{\"1\":{\"383\":1}}],[\"为它们赋予不同类型的值\",{\"1\":{\"382\":1}}],[\"为临时\",{\"1\":{\"345\":1}}],[\"为喜好系数\",{\"1\":{\"269\":1}}],[\"为有源头活水来\",{\"1\":{\"247\":1}}],[\"为\",{\"1\":{\"212\":1,\"292\":1,\"295\":2,\"306\":1,\"520\":1,\"555\":2,\"716\":1,\"758\":1,\"1030\":3,\"1034\":1,\"1105\":1,\"1112\":1,\"1198\":1,\"1232\":1,\"1239\":1,\"1575\":1,\"1655\":1,\"1665\":1,\"1784\":1,\"1789\":1,\"1791\":1,\"1792\":1,\"1804\":1,\"1890\":1,\"1896\":1,\"1897\":2,\"1918\":1,\"1923\":1,\"1924\":1,\"1926\":1,\"1929\":2,\"1954\":1,\"1986\":3,\"1993\":1,\"2026\":1,\"2047\":1,\"2053\":1,\"2054\":1,\"2058\":4}}],[\"为了能够全部遍历\",{\"1\":{\"2073\":1}}],[\"为了简化代码\",{\"1\":{\"2058\":1}}],[\"为了实现跨平台\",{\"1\":{\"1998\":1}}],[\"为了实现重载额外包了一层\",{\"1\":{\"1997\":1}}],[\"为了实现深只读\",{\"1\":{\"1914\":1}}],[\"为了替换节点\",{\"1\":{\"1977\":1}}],[\"为了对\",{\"1\":{\"1976\":1}}],[\"为了将节点挂载到正确位置\",{\"1\":{\"1962\":1}}],[\"为了提高性能\",{\"1\":{\"1962\":1,\"1969\":1}}],[\"为了提高解析效率\",{\"1\":{\"1526\":1}}],[\"为了方便和规范用户的使用\",{\"1\":{\"1936\":1}}],[\"为了方便后续操作\",{\"1\":{\"1889\":1}}],[\"为了方便后续方便使用\",{\"1\":{\"177\":1}}],[\"为了支持这两种形式\",{\"1\":{\"1922\":1}}],[\"为了保护\",{\"1\":{\"1836\":1}}],[\"为了保险起见\",{\"1\":{\"1240\":1}}],[\"为了充分利用\",{\"1\":{\"1647\":1}}],[\"为了减少连环崩溃的几率\",{\"1\":{\"1555\":1}}],[\"为了表达这个美好的愿望\",{\"1\":{\"1534\":1}}],[\"为了让\",{\"1\":{\"1519\":1}}],[\"为了通过组合式\",{\"1\":{\"1499\":1}}],[\"为了编码的方便\",{\"1\":{\"1366\":1}}],[\"为了避免发生意外的错误\",{\"1\":{\"1921\":1}}],[\"为了避免分母为零的情况\",{\"1\":{\"1665\":1}}],[\"为了避免相互影响\",{\"1\":{\"1555\":1}}],[\"为了避免连续的多次操作导致布局树反复计算\",{\"1\":{\"1527\":1}}],[\"为了避免作者一不小心把\",{\"1\":{\"1308\":1}}],[\"为了避免程序退出\",{\"1\":{\"403\":1}}],[\"为了得到\",{\"1\":{\"1069\":1,\"1070\":1}}],[\"为了向将来\",{\"1\":{\"958\":1}}],[\"为了举例说明其功能\",{\"1\":{\"771\":1}}],[\"为了使节点有资格作为静态根节点\",{\"1\":{\"1795\":1}}],[\"为了使元素可拖动\",{\"1\":{\"765\":1}}],[\"为了使变形的效果更加平滑\",{\"1\":{\"619\":1}}],[\"为了后台获取后的识别\",{\"1\":{\"756\":3}}],[\"为了显示出\",{\"1\":{\"617\":1}}],[\"为了解决上述问题\",{\"1\":{\"1786\":1}}],[\"为了解决上述错误\",{\"1\":{\"405\":1}}],[\"为了解决这类问题\",{\"1\":{\"916\":1}}],[\"为了解决这个问题\",{\"1\":{\"649\":1,\"867\":1,\"1319\":1,\"2050\":1}}],[\"为了解决这些问题\",{\"1\":{\"133\":1}}],[\"为了确保主线程不被阻塞\",{\"1\":{\"224\":1}}],[\"为了上网课\",{\"1\":{\"176\":1}}],[\"为了安全起见\",{\"1\":{\"156\":1}}],[\"为前端工程化而生\",{\"1\":{\"122\":1}}],[\"为前端接下来的迅猛发展奠定了实践基础\",{\"1\":{\"24\":1}}],[\"为起点\",{\"1\":{\"122\":1}}],[\"为什么这么做\",{\"1\":{\"2043\":1}}],[\"为什么不直接使用\",{\"1\":{\"2035\":1}}],[\"为什么不能放到其他终端环境呢\",{\"1\":{\"25\":1}}],[\"为什么有了\",{\"1\":{\"2016\":1}}],[\"为什么渲染进程不适用多个线程来处理这些事情\",{\"1\":{\"1556\":1}}],[\"为什么\",{\"0\":{\"1529\":1},\"1\":{\"1415\":2,\"1560\":1,\"2058\":1}}],[\"为什么要使用组件化编程\",{\"0\":{\"1413\":1}}],[\"为什么要阻止冒泡\",{\"1\":{\"1155\":1}}],[\"为什么要用\",{\"0\":{\"768\":1}}],[\"为什么要用session\",{\"0\":{\"353\":1}}],[\"为什么需要\",{\"0\":{\"1104\":1},\"1\":{\"2091\":1}}],[\"为什么呢\",{\"1\":{\"996\":1}}],[\"为什么选择\",{\"0\":{\"175\":1}}],[\"为什么在\",{\"1\":{\"117\":1}}],[\"自减后\",{\"1\":{\"1979\":1}}],[\"自增后\",{\"1\":{\"1979\":1}}],[\"自闭合为\",{\"1\":{\"1792\":1}}],[\"自闭合标签如\",{\"1\":{\"1792\":1}}],[\"自闭合标签剩下\",{\"1\":{\"1792\":1}}],[\"自适应平均池化层\",{\"1\":{\"1663\":1}}],[\"自适应宽度\",{\"1\":{\"580\":1}}],[\"自行车\",{\"1\":{\"1621\":1}}],[\"自身来根据数据变化驱动视图更新\",{\"1\":{\"1782\":1}}],[\"自身立即结束任务的执行\",{\"1\":{\"1558\":1}}],[\"自身只理解\",{\"1\":{\"138\":1}}],[\"自\",{\"1\":{\"1446\":1,\"1494\":1,\"1865\":1}}],[\"自带的\",{\"1\":{\"1063\":1}}],[\"自由变量\",{\"1\":{\"1019\":1}}],[\"自然能够正确执行\",{\"1\":{\"1927\":1}}],[\"自然前三位也是\",{\"1\":{\"980\":1}}],[\"自然对数的底数\",{\"1\":{\"879\":1}}],[\"自然少不了各种实用的第三方库的支持\",{\"1\":{\"25\":1}}],[\"自下向上\",{\"1\":{\"586\":1}}],[\"自右向左\",{\"1\":{\"586\":1}}],[\"自左向右\",{\"1\":{\"553\":1,\"586\":1}}],[\"自上向下\",{\"1\":{\"586\":1}}],[\"自上向下垂直排列\",{\"1\":{\"540\":1}}],[\"自上而下的书写模式中\",{\"1\":{\"552\":1}}],[\"自包含了用户信息和加密的数据\",{\"1\":{\"369\":1}}],[\"自己人\",{\"1\":{\"1605\":1,\"1615\":2}}],[\"自己直接commit\",{\"1\":{\"1454\":1}}],[\"自己直接dispatch\",{\"1\":{\"1454\":1}}],[\"自己直接读取\",{\"1\":{\"1454\":2}}],[\"自己开发的模块\",{\"1\":{\"377\":1}}],[\"自己实现的\",{\"1\":{\"369\":1}}],[\"自己的\",{\"1\":{\"362\":1}}],[\"自己的改变先按兵不动\",{\"1\":{\"11\":1}}],[\"自从\",{\"1\":{\"317\":1}}],[\"自执行函数\",{\"1\":{\"239\":1}}],[\"自定义样式类等\",{\"1\":{\"2065\":1}}],[\"自定义代理对象本身的内部方法和行为\",{\"1\":{\"1903\":1}}],[\"自定义配置项\",{\"1\":{\"1854\":2}}],[\"自定义事件\",{\"1\":{\"1834\":1}}],[\"自定义事件原理\",{\"1\":{\"1368\":1}}],[\"自定义包裹变量所用符号\",{\"1\":{\"1793\":1}}],[\"自定义的\",{\"1\":{\"1655\":1,\"1950\":1}}],[\"自定义或pytorch中的\",{\"1\":{\"1655\":1}}],[\"自定义一个myref\",{\"1\":{\"1507\":1}}],[\"自定义属性标识会添加在上一级选择器中\",{\"1\":{\"1433\":1}}],[\"自定义属性值\",{\"1\":{\"1262\":1}}],[\"自定义指令\",{\"0\":{\"1405\":1},\"1\":{\"1407\":1}}],[\"自定义键名\",{\"1\":{\"1370\":1}}],[\"自定义命名空间名称\",{\"0\":{\"1303\":1}}],[\"自定义函数\",{\"1\":{\"1182\":1}}],[\"自定义构造函数模式\",{\"0\":{\"1048\":1}}],[\"自定义bind\",{\"1\":{\"433\":1}}],[\"自定义基类需要放在所有派生类后面\",{\"1\":{\"405\":1}}],[\"自定义响应头\",{\"1\":{\"286\":1}}],[\"自定义匹配\",{\"0\":{\"198\":1}}],[\"自定义\",{\"0\":{\"1501\":1},\"1\":{\"155\":1,\"304\":1,\"1501\":1,\"1572\":1}}],[\"自定义模块和第三方模块三类\",{\"1\":{\"377\":1}}],[\"自定义模块\",{\"1\":{\"45\":1,\"239\":1,\"241\":1,\"377\":1}}],[\"自动更新时\",{\"1\":{\"2035\":1}}],[\"自动机就会一直运行\",{\"1\":{\"1974\":1}}],[\"自动脱\",{\"0\":{\"1938\":1},\"1\":{\"1938\":1}}],[\"自动转换结果\",{\"1\":{\"1578\":1}}],[\"自动转换\",{\"1\":{\"1578\":1}}],[\"自动转为\",{\"1\":{\"980\":1}}],[\"自动解析响应的能力\",{\"0\":{\"1570\":1},\"1\":{\"1568\":1}}],[\"自动发出请求的能力\",{\"0\":{\"1569\":1},\"1\":{\"1568\":1}}],[\"自动发布\",{\"1\":{\"122\":1}}],[\"自动记录缓存到本地文件\",{\"1\":{\"1541\":1}}],[\"自动执行器执行generator函数\",{\"1\":{\"1187\":1}}],[\"自动调用vue\",{\"1\":{\"1423\":1}}],[\"自动调用\",{\"1\":{\"711\":1}}],[\"自动调整说明\",{\"0\":{\"556\":1}}],[\"自动生成的代码中会自动包含此部分\",{\"1\":{\"649\":1}}],[\"自动生成的唯一编号\",{\"1\":{\"181\":1}}],[\"自动换行\",{\"1\":{\"625\":1}}],[\"自动扩展填充剩余空间\",{\"1\":{\"580\":1}}],[\"自动在mongodb中创建一个数据库存储session\",{\"1\":{\"355\":1}}],[\"自动携带\",{\"1\":{\"347\":1}}],[\"自动构建出线上发布代码并传输给发布系统\",{\"1\":{\"122\":1}}],[\"自动重新构建\",{\"1\":{\"122\":1}}],[\"自动重启\",{\"1\":{\"73\":1}}],[\"自动刷新\",{\"1\":{\"122\":1}}],[\"自动化思想在前端开发中的体现\",{\"1\":{\"122\":1}}],[\"自动安装\",{\"1\":{\"62\":1}}],[\"等字符\",{\"1\":{\"2095\":1}}],[\"等判断分支\",{\"1\":{\"1890\":1}}],[\"等子组件执行完成之后将子组件的\",{\"1\":{\"1862\":1}}],[\"等内容\",{\"1\":{\"1782\":1}}],[\"等或两部分之间的倍数关系\",{\"1\":{\"1731\":1}}],[\"等相关的除法\",{\"1\":{\"1721\":1}}],[\"等到再次执行第一个副作用函数时又会出现上述情况\",{\"1\":{\"1925\":1}}],[\"等到数据发生变化页面需要重新渲染的时候\",{\"1\":{\"1788\":1}}],[\"等到有新消息时再进行响应\",{\"1\":{\"1649\":2}}],[\"等到匹配完成后\",{\"1\":{\"911\":1}}],[\"等样式都会或多或少的影响分层结果\",{\"1\":{\"1526\":1}}],[\"等辅助按键时不会触发事件\",{\"1\":{\"1154\":1}}],[\"等辅助按键时将会触发事件\",{\"1\":{\"1154\":1}}],[\"等辅助按键的时候\",{\"1\":{\"1154\":1}}],[\"等模态对话框不再允许弹出\",{\"1\":{\"1150\":1}}],[\"等功能按键则不是字符键\",{\"1\":{\"1149\":1}}],[\"等现代浏览器都支持事件捕获\",{\"1\":{\"1140\":1}}],[\"等级\",{\"1\":{\"1091\":1}}],[\"等方法来说是必需的\",{\"1\":{\"1932\":1}}],[\"等方法的经验\",{\"1\":{\"1929\":1}}],[\"等方法都需要做类似的处理\",{\"1\":{\"1925\":1}}],[\"等方法调用时会间接地读取和设置数组的\",{\"1\":{\"1925\":1}}],[\"等方法很相似\",{\"1\":{\"946\":1}}],[\"等方法\",{\"1\":{\"865\":1,\"872\":1,\"1218\":1,\"1921\":1,\"2042\":1}}],[\"等函数\",{\"1\":{\"944\":1}}],[\"等函数的止点\",{\"1\":{\"717\":1}}],[\"等函数进行转化\",{\"1\":{\"402\":1}}],[\"等等\",{\"1\":{\"711\":1,\"725\":1,\"1194\":1,\"1205\":1,\"1224\":1,\"1232\":1,\"1243\":1,\"1485\":1,\"1601\":1,\"1602\":1,\"2071\":1}}],[\"等预定义属性\",{\"1\":{\"680\":1}}],[\"等下载执行完毕之后再接着解析\",{\"1\":{\"675\":1}}],[\"等待导航确认后再执行\",{\"1\":{\"2075\":1}}],[\"等待下一个事件循环\",{\"1\":{\"1784\":1}}],[\"等待下一个人进入\",{\"1\":{\"1036\":1}}],[\"等待主线程调度执行\",{\"1\":{\"1558\":1}}],[\"等待主线程的调度执行\",{\"1\":{\"1180\":1}}],[\"等待异步组件时渲染一些额外内容\",{\"1\":{\"1516\":1}}],[\"等待一段时间后在执行过渡\",{\"1\":{\"641\":1}}],[\"等待写事件\",{\"1\":{\"408\":1}}],[\"等宽字体\",{\"1\":{\"621\":1}}],[\"等高布局\",{\"0\":{\"581\":1}}],[\"等式会自动调整\",{\"1\":{\"553\":1}}],[\"等同于route\",{\"1\":{\"2031\":1}}],[\"等同于obj\",{\"1\":{\"1902\":1}}],[\"等同于str\",{\"1\":{\"889\":1}}],[\"等同于\",{\"1\":{\"548\":4,\"680\":1,\"888\":1,\"901\":1,\"904\":6,\"995\":1,\"1187\":1,\"1772\":1}}],[\"等同于普通函数\",{\"1\":{\"405\":1}}],[\"等同于打开了<script>标签的\",{\"1\":{\"47\":1}}],[\"等于x\",{\"1\":{\"1666\":1}}],[\"等于将\",{\"1\":{\"995\":1}}],[\"等于十进制的\",{\"1\":{\"958\":1}}],[\"等于比较\",{\"1\":{\"398\":1}}],[\"等于\",{\"1\":{\"398\":1,\"816\":1,\"1666\":1}}],[\"等价\",{\"1\":{\"993\":1,\"1152\":1,\"1926\":1,\"1931\":1}}],[\"等价字符引用\",{\"1\":{\"658\":1}}],[\"等价于slice\",{\"1\":{\"854\":3}}],[\"等价于\",{\"1\":{\"396\":14,\"906\":1,\"940\":1,\"992\":1,\"1201\":1,\"1741\":1}}],[\"等价与\",{\"1\":{\"395\":1}}],[\"等号赋值是指直接将对象的内存指针赋值\",{\"1\":{\"382\":1}}],[\"等类型的值\",{\"1\":{\"1935\":1}}],[\"等类型\",{\"1\":{\"382\":1}}],[\"等这些都不能有\",{\"1\":{\"339\":1}}],[\"等操作\",{\"1\":{\"256\":1,\"1274\":1}}],[\"等语言负责服务实现\",{\"1\":{\"218\":1}}],[\"等运算符\",{\"1\":{\"205\":1}}],[\"等属性\",{\"1\":{\"156\":1}}],[\"等\",{\"1\":{\"122\":1,\"142\":1,\"275\":1,\"335\":1,\"337\":1,\"636\":1,\"681\":1,\"1098\":1,\"1149\":1,\"1282\":1,\"1656\":1,\"1825\":1,\"1915\":2,\"1956\":1,\"2002\":1,\"2088\":1,\"2095\":1}}],[\"等效于上面的写法\",{\"1\":{\"261\":1}}],[\"等效于\",{\"1\":{\"72\":2}}],[\"等技术发布\",{\"1\":{\"25\":1}}],[\"等构建工具出现\",{\"1\":{\"25\":1}}],[\"等后端开发框架出现\",{\"1\":{\"25\":1}}],[\"等前端开发框架出现\",{\"1\":{\"25\":1}}],[\"于\",{\"1\":{\"895\":1}}],[\"于此同时\",{\"1\":{\"25\":1}}],[\"于是就产生了栈溢出\",{\"1\":{\"1892\":1}}],[\"于是响应行中包含switching\",{\"1\":{\"1649\":1}}],[\"于是浏览器就会发送新的普通请求来获取这个资源\",{\"1\":{\"1543\":1}}],[\"于是浏览器之间共有的对象就成了事实上的标准\",{\"1\":{\"1084\":1}}],[\"于是用\",{\"1\":{\"219\":1}}],[\"于是让公司招聘专门写\",{\"1\":{\"219\":1}}],[\"于是有了下面的故事\",{\"1\":{\"25\":1}}],[\"于是很快\",{\"1\":{\"25\":1}}],[\"于是\",{\"1\":{\"24\":3,\"25\":1,\"353\":1,\"1537\":2,\"1925\":1}}],[\"都能够得到出来\",{\"1\":{\"2074\":1}}],[\"都能通过\",{\"1\":{\"857\":1}}],[\"都可能关联一个组件实例\",{\"1\":{\"2070\":1}}],[\"都可以看作是一个异步任务\",{\"1\":{\"1776\":1}}],[\"都可以表示任意字符\",{\"1\":{\"905\":1}}],[\"都可以当作键\",{\"1\":{\"867\":1}}],[\"都可以实现一些动态的效果\",{\"1\":{\"642\":1}}],[\"都可以记录用户的信息\",{\"1\":{\"369\":1}}],[\"都可以叫\",{\"1\":{\"128\":1}}],[\"都需要遍历\",{\"1\":{\"2073\":1}}],[\"都需要知道它在整个视图树里面的位置\",{\"1\":{\"2068\":1}}],[\"都需要暴露到渲染函数中\",{\"1\":{\"1956\":1}}],[\"都存储在节点的\",{\"1\":{\"1978\":1}}],[\"都存在时locals优先级较高\",{\"1\":{\"402\":1}}],[\"都传递给\",{\"1\":{\"1977\":1}}],[\"都被扫描完毕为止\",{\"1\":{\"1974\":1}}],[\"都被替换成\",{\"1\":{\"916\":1}}],[\"都遵循同样的处理规则\",{\"1\":{\"1959\":1}}],[\"都将其添加到\",{\"1\":{\"1954\":1}}],[\"都将成为第一个对象的属性\",{\"1\":{\"1201\":1}}],[\"都与副作用函数建立了响应联系\",{\"1\":{\"1910\":1}}],[\"都必须是静态节点才有的\",{\"1\":{\"1795\":1}}],[\"都必须是字符串类型\",{\"1\":{\"345\":1}}],[\"都应该检查当前节点是否已经被移除\",{\"1\":{\"1977\":1}}],[\"都应该有两个阶段\",{\"1\":{\"1776\":1}}],[\"都应该能推送给用户让他知道有新的消息来了\",{\"1\":{\"1104\":1}}],[\"都要结合现实和常识进行联想判断\",{\"1\":{\"1757\":1}}],[\"都暴露了\",{\"1\":{\"1649\":1}}],[\"都用\",{\"1\":{\"1647\":1}}],[\"都在可控范围内\",{\"1\":{\"1723\":1}}],[\"都在其中运行\",{\"1\":{\"1558\":1}}],[\"都在全局作用域\",{\"1\":{\"937\":1}}],[\"都指定一个getter\",{\"1\":{\"1366\":1}}],[\"都只会在编译后输出一次到\",{\"1\":{\"1301\":1}}],[\"都算作一个\",{\"1\":{\"1276\":1}}],[\"都算作\",{\"1\":{\"1276\":1}}],[\"都不支持直接使用settimeout\",{\"1\":{\"1822\":1}}],[\"都不会影响结果\",{\"1\":{\"995\":1}}],[\"都不是布尔值\",{\"1\":{\"796\":1}}],[\"都有一个共同点\",{\"1\":{\"990\":1}}],[\"都有与之对应的\",{\"1\":{\"681\":2}}],[\"都做了哪些改变\",{\"1\":{\"958\":1}}],[\"都直接返回第二个操作数\",{\"1\":{\"809\":1}}],[\"都直接返回第一个操作数\",{\"1\":{\"809\":1}}],[\"都设置了\",{\"1\":{\"765\":1}}],[\"都没有实际意义\",{\"1\":{\"694\":1}}],[\"都依靠\",{\"1\":{\"693\":1}}],[\"都完全一样\",{\"1\":{\"588\":1}}],[\"都会做一件事情\",{\"1\":{\"2074\":1}}],[\"都会发生变化\",{\"1\":{\"2058\":1}}],[\"都会精确触发相应的渲染更新\",{\"1\":{\"2035\":1}}],[\"都会创建新的代理对象\",{\"1\":{\"1923\":1}}],[\"都会把副作用函数收集到\",{\"1\":{\"1889\":1}}],[\"都会对数据进行随机打乱\",{\"1\":{\"1655\":1}}],[\"都会自动解包\",{\"1\":{\"1499\":1}}],[\"都会作为函数暴露在\",{\"1\":{\"1446\":1,\"1494\":1,\"1865\":1}}],[\"都会生成它的\",{\"1\":{\"1313\":1}}],[\"都会在请求头中添加cookie字段\",{\"1\":{\"1612\":1}}],[\"都会在页面上进行搜索\",{\"1\":{\"1238\":1}}],[\"都会在字符串中继续查找新匹配项\",{\"1\":{\"925\":1}}],[\"都会弹出东西\",{\"1\":{\"1158\":1}}],[\"都会占用内存\",{\"1\":{\"1158\":1}}],[\"都会从字符串中的lastindex偏移值开始尝试匹配\",{\"1\":{\"925\":1}}],[\"都会返回一个object\",{\"1\":{\"842\":1}}],[\"都会返回第二个操作数\",{\"1\":{\"808\":1}}],[\"都会往样式容器里做登记\",{\"1\":{\"712\":1}}],[\"都会往路径容器里做登记\",{\"1\":{\"711\":1}}],[\"都会有一个最佳的像素比\",{\"1\":{\"649\":1}}],[\"都会绑定单一的域名\",{\"1\":{\"345\":1}}],[\"都会执行全局中间件函数\",{\"1\":{\"312\":1}}],[\"都会改为使用淘宝的镜像源\",{\"1\":{\"68\":1}}],[\"都相同时则认定两者相同\",{\"1\":{\"166\":1}}],[\"都是引用类型\",{\"1\":{\"2028\":1}}],[\"都是函数\",{\"1\":{\"2015\":1}}],[\"都是文本\",{\"1\":{\"1792\":1}}],[\"都是通过卷积核与输入的特征图进行卷积操作\",{\"1\":{\"1667\":1}}],[\"都是独立的\",{\"1\":{\"1593\":1}}],[\"都是被\",{\"1\":{\"1368\":1}}],[\"都是布尔值\",{\"1\":{\"1225\":1}}],[\"都是回调函数\",{\"1\":{\"1217\":1}}],[\"都是attribute\",{\"1\":{\"680\":1}}],[\"都是四个方向统一设置\",{\"1\":{\"544\":1}}],[\"都是在指定元素外部或内部包裹其他元素\",{\"1\":{\"1212\":1}}],[\"都是在字符串\",{\"1\":{\"384\":1}}],[\"都是在自己的分支上编写代码\",{\"1\":{\"10\":1}}],[\"都是只有验证成功后\",{\"1\":{\"369\":1}}],[\"都是使服务端无状态化\",{\"1\":{\"369\":1}}],[\"都是访问资源的令牌\",{\"1\":{\"369\":1}}],[\"都是需要授权的\",{\"1\":{\"355\":1}}],[\"都是默认储存的\",{\"1\":{\"345\":1}}],[\"都是\",{\"1\":{\"262\":1,\"1047\":1,\"1723\":1}}],[\"都是用\",{\"1\":{\"220\":1}}],[\"都是异步加载\",{\"1\":{\"47\":1}}],[\"都受到了\",{\"1\":{\"25\":1}}],[\"办法总比困难多\",{\"1\":{\"25\":1}}],[\"运算双方都需要转化为原始类型\",{\"1\":{\"975\":1}}],[\"运算\",{\"0\":{\"1338\":1},\"1\":{\"392\":1}}],[\"运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例\",{\"1\":{\"1073\":1}}],[\"运算符的优先级\",{\"0\":{\"816\":1}}],[\"运算符的一道经典练习题\",{\"1\":{\"808\":1}}],[\"运算符\",{\"0\":{\"164\":1,\"205\":1,\"394\":1,\"802\":1},\"1\":{\"395\":1,\"396\":1,\"397\":1,\"398\":1,\"399\":1,\"816\":2}}],[\"运行代码的\",{\"1\":{\"1554\":1}}],[\"运行结果\",{\"1\":{\"1088\":3}}],[\"运行结果如下\",{\"1\":{\"128\":1}}],[\"运行不会影响类的属性\",{\"1\":{\"405\":1}}],[\"运行流程\",{\"0\":{\"354\":1}}],[\"运行环境\",{\"1\":{\"215\":1}}],[\"运行命令\",{\"1\":{\"177\":1}}],[\"运行命令别名\",{\"1\":{\"87\":1}}],[\"运行npm\",{\"1\":{\"149\":1,\"1591\":2}}],[\"运行的生命周期中会广播出许多事件\",{\"1\":{\"156\":1}}],[\"运行的\",{\"1\":{\"117\":1}}],[\"运行之后文件夹下会增加两个资源\",{\"1\":{\"66\":1}}],[\"运行\",{\"0\":{\"36\":1},\"1\":{\"133\":1,\"644\":4,\"957\":3,\"1483\":1}}],[\"运行时编译\",{\"1\":{\"1874\":1}}],[\"运行时态\",{\"1\":{\"117\":1}}],[\"运行时\",{\"0\":{\"1874\":1},\"1\":{\"24\":1,\"1874\":1}}],[\"运用到浏览器困难\",{\"1\":{\"25\":1}}],[\"运用到浏览器中\",{\"1\":{\"25\":1}}],[\"开放\",{\"1\":{\"1572\":1}}],[\"开启守卫的第一道拦截\",{\"1\":{\"2071\":1}}],[\"开启一个\",{\"1\":{\"1792\":1,\"1974\":1}}],[\"开启渲染流程\",{\"1\":{\"1526\":1}}],[\"开启命名空间后\",{\"1\":{\"1454\":4}}],[\"开启命名空间\",{\"1\":{\"1454\":2}}],[\"开启严格模式\",{\"0\":{\"957\":1}}],[\"开启多行模式\",{\"1\":{\"919\":1}}],[\"开启绝对定位后\",{\"1\":{\"570\":2}}],[\"开启元素的粘滞定位\",{\"1\":{\"568\":1}}],[\"开启元素的固定定位\",{\"1\":{\"568\":1}}],[\"开启元素的绝对定位\",{\"1\":{\"568\":1}}],[\"开启元素的相对定位\",{\"1\":{\"568\":1}}],[\"开启其\",{\"1\":{\"564\":1}}],[\"开启\",{\"1\":{\"564\":4,\"959\":1,\"1378\":1,\"1897\":1}}],[\"开启后前端无法通过\",{\"1\":{\"355\":1}}],[\"开启监听模式\",{\"1\":{\"157\":1}}],[\"开源\",{\"1\":{\"1195\":1}}],[\"开源项目\",{\"0\":{\"223\":1},\"1\":{\"223\":1}}],[\"开源证书\",{\"1\":{\"64\":1}}],[\"开始监听端口开启服务\",{\"1\":{\"1573\":1}}],[\"开始结束索引\",{\"1\":{\"1353\":1}}],[\"开始已经提供了专门用于求幂的运算符\",{\"1\":{\"941\":1}}],[\"开始标签节点\",{\"1\":{\"1974\":3}}],[\"开始标签的标签名\",{\"1\":{\"1792\":1}}],[\"开始标签\",{\"1\":{\"912\":1,\"1353\":1,\"1792\":2}}],[\"开始截取位置的索引\",{\"1\":{\"891\":1}}],[\"开始新增的一种方式\",{\"1\":{\"956\":1}}],[\"开始新增加的一种声明函数的方式\",{\"1\":{\"941\":1}}],[\"开始新增加了求幂运算\",{\"1\":{\"803\":1}}],[\"开始新添加的运算符\",{\"1\":{\"849\":1}}],[\"开始新添加的功能\",{\"1\":{\"847\":1,\"933\":1}}],[\"开始的\",{\"1\":{\"843\":1,\"844\":1}}],[\"开始的整数就是索引\",{\"1\":{\"838\":1}}],[\"开始播放到现在所用的时间\",{\"1\":{\"750\":1}}],[\"开始引入了<audio>和video这\",{\"1\":{\"746\":1}}],[\"开始到\",{\"1\":{\"716\":1}}],[\"开始位置字符串\",{\"1\":{\"402\":1}}],[\"开始\",{\"1\":{\"401\":1,\"828\":1,\"895\":1,\"934\":1,\"1265\":1,\"1267\":1,\"1974\":1,\"1997\":1}}],[\"开始编译\",{\"1\":{\"154\":1}}],[\"开始有人想办法把\",{\"1\":{\"25\":1}}],[\"开发项目时\",{\"1\":{\"2030\":1}}],[\"开发中如何选择\",{\"1\":{\"1394\":1}}],[\"开发中最常见的一类事件\",{\"1\":{\"1148\":1}}],[\"开发起来更为简洁方便\",{\"1\":{\"1195\":1}}],[\"开发团队居然提出了差不多是完全相反的事件流的概念\",{\"1\":{\"1138\":1}}],[\"开发者也可以通过\",{\"1\":{\"2049\":1}}],[\"开发者想了很多办法来解决这一问题\",{\"1\":{\"1644\":1}}],[\"开发者工具看不到任何信息\",{\"1\":{\"1411\":1}}],[\"开发者可以使用\",{\"1\":{\"768\":1}}],[\"开发者就可以专注于开发时态的代码结构\",{\"1\":{\"118\":1}}],[\"开发语言不限\",{\"1\":{\"337\":1}}],[\"开发的\",{\"1\":{\"223\":1,\"337\":1}}],[\"开发的一个开源框架\",{\"1\":{\"222\":1}}],[\"开发\",{\"1\":{\"220\":1}}],[\"开发工作流\",{\"1\":{\"217\":1}}],[\"开发服务器\",{\"0\":{\"132\":1,\"133\":1}}],[\"开发模式\",{\"1\":{\"124\":1}}],[\"开发人员和浏览器喜欢的代码是不同的\",{\"1\":{\"117\":1}}],[\"开发时态\",{\"1\":{\"117\":2}}],[\"开发依赖yarn\",{\"1\":{\"87\":1}}],[\"开发依赖\",{\"1\":{\"72\":2}}],[\"开发环境中\",{\"1\":{\"1483\":1}}],[\"开发环境的项目一般\",{\"1\":{\"71\":1}}],[\"开发环境\",{\"1\":{\"71\":2}}],[\"开发过程比较波折时\",{\"1\":{\"11\":1}}],[\"开头即可\",{\"1\":{\"1305\":1,\"1308\":1}}],[\"开头的供内部使用的内部属性\",{\"1\":{\"1800\":1}}],[\"开头的属性则被认为是内部的\",{\"1\":{\"1836\":1}}],[\"开头的属性被认为是私有的\",{\"1\":{\"1836\":1}}],[\"开头的属性\",{\"1\":{\"1795\":1}}],[\"开头的属性集合\",{\"1\":{\"1125\":1}}],[\"开头的地址\",{\"1\":{\"1649\":1}}],[\"开头的请求路径\",{\"1\":{\"1445\":2}}],[\"开头的\",{\"1\":{\"519\":1,\"1954\":1}}],[\"开头\",{\"1\":{\"46\":1,\"59\":1,\"389\":1,\"520\":1,\"521\":1,\"1316\":1,\"1792\":2,\"1804\":1,\"1878\":1}}],[\"现比\",{\"1\":{\"1753\":1}}],[\"现期比重\",{\"1\":{\"1753\":1}}],[\"现期考法\",{\"0\":{\"1727\":1}}],[\"现期为基期和变化量的和\",{\"1\":{\"1722\":1}}],[\"现期的份数分别为\",{\"1\":{\"1722\":1}}],[\"现期的份数\",{\"1\":{\"1722\":1}}],[\"现期\",{\"1\":{\"1722\":1,\"1725\":1}}],[\"现有指令总结\",{\"0\":{\"1404\":1}}],[\"现代浏览器规定当页面被卸载时\",{\"1\":{\"1150\":1}}],[\"现将其转换为数字值\",{\"1\":{\"806\":1}}],[\"现从0\",{\"1\":{\"419\":1}}],[\"现已无力回天\",{\"1\":{\"24\":1}}],[\"现在这里的\",{\"1\":{\"1902\":1}}],[\"现在这两组属性在很多浏览器里面都是通用的了\",{\"1\":{\"1087\":1}}],[\"现在官方推荐使用\",{\"1\":{\"1425\":1}}],[\"现在所有的事件均会失效\",{\"1\":{\"1411\":1}}],[\"现在所有的属性包含了它们应有的有效信息\",{\"1\":{\"752\":1}}],[\"现在要尽可能用新版本的方法\",{\"1\":{\"1242\":1}}],[\"现在已被废弃\",{\"1\":{\"1216\":1}}],[\"现在已被\",{\"1\":{\"1216\":1}}],[\"现在已经很多很多了\",{\"1\":{\"1100\":1}}],[\"现在已经发展出比较成熟的技术体系\",{\"1\":{\"217\":1}}],[\"现在我们使用的vs\",{\"1\":{\"1519\":1}}],[\"现在我们单击列表中的任何一个\",{\"1\":{\"1158\":1}}],[\"现在我们已经能够对文档中的节点进行基本的增删改操作了\",{\"1\":{\"1124\":1}}],[\"现在添加上了\",{\"1\":{\"1112\":1}}],[\"现在很多编程语言都有现成的库来解析和生成\",{\"1\":{\"895\":1}}],[\"现在很多公司的后台管理系统\",{\"1\":{\"220\":1}}],[\"现在支持有以下几种\",{\"1\":{\"765\":1}}],[\"现在的\",{\"1\":{\"692\":1,\"693\":1}}],[\"现在在一起的时候\",{\"1\":{\"219\":1}}],[\"现在\",{\"1\":{\"23\":1,\"865\":1,\"1569\":1}}],[\"蚕食\",{\"1\":{\"24\":1}}],[\"彻底解决了全局变量污染和依赖混乱的问题\",{\"1\":{\"24\":1}}],[\"该导航守卫会在组件失活的时候被调用\",{\"1\":{\"2078\":1}}],[\"该钩子函数会在组件被卸载时调用\",{\"1\":{\"2070\":1}}],[\"该钩子函数会创建一个注释类型的ast节点\",{\"1\":{\"1791\":1}}],[\"该计算属性会优先的使用\",{\"1\":{\"2068\":1}}],[\"该事件会在页面卸载之前触发\",{\"1\":{\"2061\":1}}],[\"该事件通常在鼠标点击右键或者按下键盘上的菜单键时被触发\",{\"1\":{\"1163\":1}}],[\"该辅助函数用于处理可能是\",{\"1\":{\"2047\":1}}],[\"该配置对象在官方中对应的类型\",{\"1\":{\"2041\":1}}],[\"该上下文对象用来维护代码生成过程中程序的运行状态\",{\"1\":{\"1979\":1}}],[\"该上下文菜单会被展示\",{\"1\":{\"1163\":1}}],[\"该节点的下一个节点的位置索引\",{\"1\":{\"1969\":2}}],[\"该节点在新的一组子节点中的真实位置索引\",{\"1\":{\"1969\":1}}],[\"该节点在新\",{\"1\":{\"1969\":1}}],[\"该调度器的作用是\",{\"1\":{\"1954\":1}}],[\"该阶段所做的主要工作是\",{\"1\":{\"1807\":1}}],[\"该阶段发生的大事件\",{\"1\":{\"24\":1}}],[\"该字典包含每个层的名称和参数\",{\"1\":{\"1671\":1}}],[\"该字符串在默认情况下采用\",{\"1\":{\"773\":1}}],[\"该例子中\",{\"1\":{\"1665\":1}}],[\"该算法是常用的优化算法之一\",{\"1\":{\"1659\":1}}],[\"该类的主要参数包括\",{\"1\":{\"1665\":1}}],[\"该类的初始化函数将所有参数合并为一个张量元组\",{\"1\":{\"1655\":1}}],[\"该类的所有属性\",{\"1\":{\"405\":1}}],[\"该类接受一个或多个张量作为参数\",{\"1\":{\"1655\":1}}],[\"该协议规定了两个方面的内容\",{\"1\":{\"1627\":1}}],[\"该跨域的\",{\"1\":{\"1612\":1}}],[\"该线程称之为主线程\",{\"1\":{\"1554\":1}}],[\"该缓存资源是否还有效呢\",{\"1\":{\"1535\":1}}],[\"该值和其他值不同\",{\"1\":{\"1570\":1}}],[\"该值所有的表现都与变量有关\",{\"1\":{\"1261\":1}}],[\"该值至少可能被更新一次\",{\"1\":{\"1261\":1}}],[\"该值至少重复出现了\",{\"1\":{\"1261\":1}}],[\"该值可以用于停止重复调用\",{\"1\":{\"1088\":1}}],[\"该文档不允许复制剪贴操作\",{\"1\":{\"1162\":1}}],[\"该文件是整个文件的入口文件\",{\"1\":{\"1427\":1}}],[\"该文件的编译过程就像它的所有代码直接出现在\",{\"1\":{\"1313\":1}}],[\"该文件的作用是\",{\"1\":{\"376\":1}}],[\"该文件所处的文件夹\",{\"1\":{\"289\":1}}],[\"该位置信息是通过支持\",{\"1\":{\"1099\":1}}],[\"该对话框用于提示用户输入某些信息\",{\"1\":{\"1088\":1}}],[\"该对象上面会有方法内部的一些新定义的方法\",{\"1\":{\"2060\":1}}],[\"该对象主要是负责路由的历史状态和当前位置的管理\",{\"1\":{\"2057\":1}}],[\"该对象还支持一些方法\",{\"1\":{\"2051\":1}}],[\"该对象用于管理当前创建最近访问过的\",{\"1\":{\"2048\":1}}],[\"该对象身上会包含一部分上面所声明的变量以及方法\",{\"1\":{\"2041\":1}}],[\"该对象会包含部分上面所定义的方法\",{\"1\":{\"2041\":1}}],[\"该对象对应的类型就是\",{\"1\":{\"2041\":1}}],[\"该对象称之为promise\",{\"1\":{\"1776\":1}}],[\"该对象中所有的key\",{\"1\":{\"1462\":1}}],[\"该对象是原生对象而不是\",{\"1\":{\"1199\":1}}],[\"该对象并不需要我们自己创建\",{\"1\":{\"1151\":1}}],[\"该对象包含了许多和当前所触发的事件相关的信息\",{\"1\":{\"1151\":1}}],[\"该对象提供了一组属性\",{\"1\":{\"1098\":1}}],[\"该对象拥有\",{\"1\":{\"1015\":1}}],[\"该对象的一些方法\",{\"1\":{\"895\":1}}],[\"该继承方式综合了原型链和借用构造函数的方式\",{\"1\":{\"1071\":1}}],[\"该分时函数将返回一个计时函数\",{\"1\":{\"1038\":1}}],[\"该分时函数接收\",{\"1\":{\"1038\":1}}],[\"该数组的所有成员依次作为参数\",{\"1\":{\"995\":1}}],[\"该参数等于\",{\"1\":{\"980\":1}}],[\"该回调函数没有返回值\",{\"1\":{\"945\":1}}],[\"该构造函数根据使用的不同效果也不尽相同\",{\"1\":{\"876\":1}}],[\"该操作符用于判断一个对象是否含有某一个属性\",{\"1\":{\"830\":1}}],[\"该规范出现后\",{\"1\":{\"1776\":1}}],[\"该规范通过\",{\"1\":{\"771\":1}}],[\"该规则在计算表达式时控制运算符执行的顺序\",{\"1\":{\"816\":1}}],[\"该函数用来换行\",{\"1\":{\"1979\":1}}],[\"该函数用于设置某个对象的隐式原型\",{\"1\":{\"1055\":1}}],[\"该函数即作为退出阶段的回调函数\",{\"1\":{\"1977\":1}}],[\"该函数将作为组件的渲染函数\",{\"1\":{\"1953\":1}}],[\"该函数接收一个对象作为参数\",{\"1\":{\"1909\":1}}],[\"该函数有以下参数\",{\"1\":{\"1663\":1}}],[\"该函数会收到元素引用作为其第一个参数\",{\"1\":{\"1499\":1}}],[\"该函数会将\",{\"1\":{\"789\":1}}],[\"该函数返回的对象中每一组key\",{\"1\":{\"1462\":1}}],[\"该函数并不会立即求值\",{\"1\":{\"1039\":1}}],[\"该函数什么也不做\",{\"1\":{\"711\":1}}],[\"该页面下面的\",{\"1\":{\"770\":1}}],[\"该方法看名字我们就知道\",{\"1\":{\"2076\":1}}],[\"该方法从名字上面基本上就能够猜到它是做什么的\",{\"1\":{\"2074\":1}}],[\"该方法表示从当前路由和目标路由中提取离开的路由记录\",{\"1\":{\"2073\":1}}],[\"该方法首先会遍历\",{\"1\":{\"2061\":1}}],[\"该方法就是根据传入的\",{\"1\":{\"2058\":1}}],[\"该方法就是简单的将数组每一项传入到函数\",{\"1\":{\"945\":1}}],[\"该方法主要负责从一个路径中移除\",{\"1\":{\"2058\":1}}],[\"该方法返回\",{\"1\":{\"1906\":1}}],[\"该方法返回距离\",{\"1\":{\"877\":1}}],[\"该方法需要在调用\",{\"1\":{\"1824\":1}}],[\"该方法接收组件实例作为参数\",{\"1\":{\"1954\":1}}],[\"该方法接收两个参数\",{\"1\":{\"911\":1}}],[\"该方法接受一个键名作为参数\",{\"1\":{\"1436\":2}}],[\"该方法接受一个键和值作为参数\",{\"1\":{\"1436\":1}}],[\"该方法是最终会暴露给外部的方法\",{\"1\":{\"2061\":1}}],[\"该方法是属于\",{\"1\":{\"2047\":1}}],[\"该方法是将队列中的两次动画间加入延迟\",{\"1\":{\"1225\":1}}],[\"该方法是在\",{\"1\":{\"1200\":1}}],[\"该方法是事件对象上面的一个方法\",{\"1\":{\"1155\":1}}],[\"该方法无返回值\",{\"1\":{\"1161\":1}}],[\"该方法在成功将文本放到剪贴板中后\",{\"1\":{\"1161\":2}}],[\"该方法在每次设备的位置更新时\",{\"1\":{\"1102\":1}}],[\"该方法的作用就是将导航守卫转为\",{\"1\":{\"2074\":1}}],[\"该方法的作用就是将添加到\",{\"1\":{\"2043\":1}}],[\"该方法的源码如下\",{\"1\":{\"2074\":1,\"2075\":1}}],[\"该方法的源码位于\",{\"1\":{\"2045\":1}}],[\"该方法的整体结构如下\",{\"1\":{\"2041\":1,\"2057\":1}}],[\"该方法的主要作用就是用来阻止冒泡的\",{\"1\":{\"1155\":1}}],[\"该方法的用法和indexof\",{\"1\":{\"890\":1}}],[\"该方法和\",{\"1\":{\"1112\":1,\"2050\":1}}],[\"该方法也会返回一个\",{\"1\":{\"1088\":1}}],[\"该方法有\",{\"1\":{\"1088\":1}}],[\"该方法将返回该符号之后的内容\",{\"1\":{\"1093\":1,\"2051\":1}}],[\"该方法将返回在setdata\",{\"1\":{\"765\":1}}],[\"该方法将会返回一个布尔值\",{\"1\":{\"1066\":1}}],[\"该方法被作为普通函数调用时\",{\"1\":{\"993\":1}}],[\"该方法会为我们返回一个对象\",{\"1\":{\"2057\":1}}],[\"该方法会清空存储中的所有数据\",{\"1\":{\"1436\":1}}],[\"该方法会返回一个\",{\"1\":{\"1088\":1,\"1102\":1}}],[\"该方法会返回一个数组\",{\"1\":{\"907\":1}}],[\"该方法会根据日期时间字符串格式规则来解析字符串的格式\",{\"1\":{\"875\":1}}],[\"该方法使用的是\",{\"1\":{\"875\":1}}],[\"该方法用于解析一个日期字符串\",{\"1\":{\"875\":1}}],[\"该方法只能找到注册到全局表里面的\",{\"1\":{\"828\":1}}],[\"该方法可以对数组的每一项运行指定的函数\",{\"1\":{\"945\":1}}],[\"该方法可以检索一个字符串中是否含有指定内容\",{\"1\":{\"890\":1}}],[\"该方法可以删除数组的最后一个元素\",{\"1\":{\"853\":1}}],[\"该方法可以向数组的末尾添加一个或多个元素\",{\"1\":{\"853\":1}}],[\"该方法可以遍历出一个对象的所有类型的键名\",{\"1\":{\"830\":1}}],[\"该方法可以\",{\"1\":{\"789\":1}}],[\"该方案一出\",{\"1\":{\"24\":1}}],[\"该方案\",{\"1\":{\"24\":1}}],[\"该属性可读写\",{\"1\":{\"1156\":1}}],[\"该属性为只读属性\",{\"1\":{\"1156\":1}}],[\"该属性的值与\",{\"1\":{\"1154\":1}}],[\"该属性的值为\",{\"1\":{\"980\":1}}],[\"该属性又有\",{\"1\":{\"1102\":1}}],[\"该属性是一个数组\",{\"1\":{\"2065\":1}}],[\"该属性是一个指针\",{\"1\":{\"953\":1}}],[\"该属性是否出现在对象的枚举属性中\",{\"1\":{\"1059\":1}}],[\"该属性旨在告诉浏览器作者认为达到最佳的用户体验的方式是什么\",{\"1\":{\"748\":1}}],[\"该属性定义是显示还是隐藏用户控制界面\",{\"1\":{\"747\":2}}],[\"该属性用来指定该进度条已完成的工作量\",{\"1\":{\"696\":1}}],[\"该属性描述了这个\",{\"1\":{\"696\":1}}],[\"该盒子不是一个滚动的容器\",{\"1\":{\"557\":1}}],[\"该元素可以将h1到h6元素放在其内\",{\"1\":{\"694\":1}}],[\"该元素会变成一个\",{\"1\":{\"564\":1}}],[\"该元素的行为类似块级元素并且根据网格模型布局它的内容\",{\"1\":{\"548\":1}}],[\"该元素的行为类似块级元素并且根据弹性盒模型布局它的内容\",{\"1\":{\"548\":1}}],[\"该元素的行为类似于\",{\"1\":{\"548\":1}}],[\"该元素的所有\",{\"1\":{\"528\":1}}],[\"该元素生成一个块级元素盒\",{\"1\":{\"548\":1}}],[\"该元素使用流式布局\",{\"1\":{\"548\":1}}],[\"该关系伪类表示与任何一个与锚定的元素的相对选择器相匹配\",{\"1\":{\"520\":1}}],[\"该基准就处于数列的中间位置\",{\"1\":{\"415\":1}}],[\"该闭合函数的自由变量是\",{\"1\":{\"402\":1}}],[\"该jwt都是不可用的\",{\"1\":{\"366\":1}}],[\"该加密是可以对称解密的\",{\"1\":{\"365\":1}}],[\"该\",{\"1\":{\"345\":2,\"1105\":1,\"1975\":2,\"2075\":1}}],[\"该命令的作用是\",{\"1\":{\"73\":1}}],[\"该入口模块即为加载的第三方模块\",{\"1\":{\"59\":1}}],[\"该服务对于性能要求之高\",{\"1\":{\"24\":1}}],[\"最顶层的\",{\"1\":{\"2068\":1}}],[\"最外层的\",{\"1\":{\"1975\":1}}],[\"最外层函数和在最外层函数外面定义的变量拥有全局作用域\",{\"1\":{\"1018\":1}}],[\"最\",{\"1\":{\"1897\":1}}],[\"最重要的是它返回的对象\",{\"1\":{\"1998\":1}}],[\"最重要的\",{\"1\":{\"1616\":1}}],[\"最高\",{\"1\":{\"1560\":1}}],[\"最高优先级\",{\"1\":{\"1181\":1}}],[\"最基本的缓存分为两种\",{\"1\":{\"1533\":1}}],[\"最简单的模拟实现\",{\"1\":{\"1396\":1}}],[\"最简单的方式就是通过for循环来进行数组的遍历\",{\"1\":{\"846\":1}}],[\"最好\",{\"1\":{\"1795\":1}}],[\"最好在beforedestroy钩子中\",{\"1\":{\"1438\":1,\"1439\":1}}],[\"最好使用每条数据的唯一标识作为\",{\"1\":{\"1394\":1}}],[\"最好写成箭头函数\",{\"1\":{\"1383\":1}}],[\"最好写成普通函数\",{\"1\":{\"1383\":1}}],[\"最初它是为了配合\",{\"1\":{\"1247\":1}}],[\"最初触发实现的\",{\"1\":{\"1219\":1}}],[\"最初被设计出来就是用来解决这些问题的\",{\"1\":{\"1137\":1}}],[\"最初像\",{\"1\":{\"980\":1}}],[\"最主要的两个特性\",{\"1\":{\"1572\":1}}],[\"最主要的进程有\",{\"1\":{\"1555\":1}}],[\"最主要就是父类的构造函数始终会被调用两次\",{\"1\":{\"1071\":1}}],[\"最主要信息还是新模块的\",{\"1\":{\"158\":1}}],[\"最近一次匹配的捕获组\",{\"1\":{\"924\":1}}],[\"最近一次的匹配项\",{\"1\":{\"924\":1}}],[\"最近一次要匹配的字符串\",{\"1\":{\"924\":1}}],[\"最近的开启了定位的祖先元素\",{\"1\":{\"570\":1}}],[\"最近的开启了定位的父元素\",{\"1\":{\"539\":1}}],[\"最多\",{\"1\":{\"902\":1,\"906\":1,\"908\":1}}],[\"最多最多就是和它一样高\",{\"1\":{\"561\":1}}],[\"最快的方法就是使用前面所讲过的扩展运算符\",{\"1\":{\"864\":1}}],[\"最早是微软在\",{\"1\":{\"1572\":1}}],[\"最早在\",{\"1\":{\"1156\":1}}],[\"最早的时候\",{\"1\":{\"822\":1}}],[\"最早由\",{\"1\":{\"701\":1}}],[\"最直接的方法就是使用标准<input\",{\"1\":{\"772\":1}}],[\"最典型的应用是用来保存用户信息\",{\"1\":{\"767\":1}}],[\"最佳取值\",{\"1\":{\"696\":1}}],[\"最常用的模式之一\",{\"1\":{\"995\":1}}],[\"最常用的软件负载均衡器\",{\"1\":{\"508\":1}}],[\"最常见的两个属性就是事件类型以及事件目标\",{\"1\":{\"1152\":1}}],[\"最常见的写法如下\",{\"1\":{\"1150\":1}}],[\"最常见的就是=\",{\"1\":{\"805\":1}}],[\"最常见的就是tostring\",{\"1\":{\"789\":1}}],[\"最常见的预设是\",{\"1\":{\"148\":1}}],[\"最小值返回\",{\"1\":{\"760\":1}}],[\"最小值\",{\"1\":{\"418\":1}}],[\"最大池化层\",{\"1\":{\"1663\":1}}],[\"最大池化操作\",{\"1\":{\"1663\":1}}],[\"最大尺寸\",{\"1\":{\"1592\":1}}],[\"最大的好处在于通知是系统级别的\",{\"1\":{\"1105\":1}}],[\"最大的优点是在人\",{\"1\":{\"895\":1}}],[\"最大的原因是commonjs属于社区标准\",{\"1\":{\"37\":1}}],[\"最大限制返回\",{\"1\":{\"760\":1}}],[\"最大值返回\",{\"1\":{\"760\":1}}],[\"最大值\",{\"1\":{\"416\":2}}],[\"最关键是用户可以是可见的\",{\"1\":{\"353\":1}}],[\"最酷炫的编辑器\",{\"1\":{\"223\":1}}],[\"最为推荐的方式\",{\"1\":{\"67\":1}}],[\"最后都会构建守卫回调对应的\",{\"1\":{\"2074\":1}}],[\"最后总结一下\",{\"1\":{\"2073\":1}}],[\"最后向外部返回上面所生成的虚拟\",{\"1\":{\"2070\":1}}],[\"最后是关于\",{\"1\":{\"2070\":1}}],[\"最后是\",{\"1\":{\"2066\":1}}],[\"最后卸载事件\",{\"1\":{\"2061\":1}}],[\"最后还剩下两个方法\",{\"1\":{\"2058\":1}}],[\"最后仍然是给要暴露出去的\",{\"1\":{\"2055\":1}}],[\"最后判断当前\",{\"1\":{\"2032\":1}}],[\"最后根据有差异的vnode创建出真实的dom节点再插入到视图中\",{\"1\":{\"1788\":1}}],[\"最后将文本节点对应的\",{\"1\":{\"1978\":1}}],[\"最后将新的文本节点内容设置给容器元素\",{\"1\":{\"1951\":1}}],[\"最后将当前激活的副作用函数添加到\",{\"1\":{\"1889\":1}}],[\"最后将后面的文本再加入到tokens中\",{\"1\":{\"1793\":1}}],[\"最后将注意力权重与值向量进行加权求和\",{\"1\":{\"1678\":1}}],[\"最后将做出的修改推送到远程仓库\",{\"1\":{\"17\":1}}],[\"最后通过\",{\"1\":{\"1659\":1}}],[\"最后把每个节点利用\",{\"1\":{\"1530\":1}}],[\"最后一个是对应的要渲染的组件\",{\"1\":{\"2070\":1}}],[\"最后一个阶段就是\",{\"1\":{\"1526\":1}}],[\"最后一个版本是\",{\"1\":{\"1196\":1}}],[\"最后在patch阶段会调用v\",{\"1\":{\"1357\":1}}],[\"最后的布尔参数值为\",{\"1\":{\"1157\":2}}],[\"最后我们来总结一下页面跳转的方式\",{\"1\":{\"1094\":1}}],[\"最后说一下关于变量的赋值\",{\"1\":{\"985\":1}}],[\"最后赋值的那个属性会覆盖前面的值\",{\"1\":{\"958\":1}}],[\"最后返回\",{\"1\":{\"1954\":1,\"1974\":1}}],[\"最后返回新构建的数组\",{\"1\":{\"854\":1}}],[\"最后返回的是module\",{\"1\":{\"37\":1}}],[\"最后再介绍一种通过foreach的方式来遍历数组\",{\"1\":{\"846\":1}}],[\"最后需要重置\",{\"1\":{\"1890\":1,\"1984\":1}}],[\"最后需要说一点的就是\",{\"1\":{\"996\":1}}],[\"最后需要注意的是\",{\"1\":{\"855\":1}}],[\"最后需要注意的就是下面的\",{\"1\":{\"796\":1}}],[\"最后需要补充说明一下的是\",{\"1\":{\"795\":1}}],[\"最后需要提出需要注意的一点是\",{\"1\":{\"133\":1}}],[\"最后就是向外部返回这么一个对象\",{\"1\":{\"2061\":1}}],[\"最后就是\",{\"1\":{\"765\":1}}],[\"最后优先级越高\",{\"1\":{\"524\":1}}],[\"最后合并即可得到结果\",{\"1\":{\"418\":1}}],[\"最后修改时间\",{\"1\":{\"260\":1}}],[\"最后\",{\"1\":{\"143\":1,\"764\":1,\"770\":1,\"1015\":1,\"1029\":1,\"1543\":1,\"1656\":1,\"1667\":1,\"1673\":1,\"1974\":1,\"2058\":1}}],[\"最终得到\",{\"1\":{\"2101\":2}}],[\"最终得到的哈希值可以用于保护密码的存储\",{\"1\":{\"2101\":1}}],[\"最终得到的字符串为\",{\"1\":{\"2058\":1}}],[\"最终得到的是\",{\"1\":{\"2045\":1}}],[\"最终对应的值为一个对象\",{\"1\":{\"2058\":1}}],[\"最终是要暴露给开发者使用的\",{\"1\":{\"2047\":1}}],[\"最终是要暴露给外部使用的\",{\"1\":{\"2044\":1}}],[\"最终外部\",{\"1\":{\"2042\":1}}],[\"最终会返回一个字符串\",{\"1\":{\"2066\":1}}],[\"最终会导出一个对象\",{\"1\":{\"2041\":1}}],[\"最终会生成如下几个映射表\",{\"1\":{\"2028\":1}}],[\"最终会出现在\",{\"1\":{\"1368\":1}}],[\"最终显示\",{\"0\":{\"2014\":1}}],[\"最终生成的代码字符串如下\",{\"1\":{\"1979\":1}}],[\"最终生成运行时态的文件\",{\"1\":{\"122\":1}}],[\"最终导致调用栈溢出\",{\"1\":{\"1925\":1}}],[\"最终访问的其实是\",{\"1\":{\"1902\":1}}],[\"最终还是会将其编译为render函数\",{\"1\":{\"1877\":1}}],[\"最终做到只更新有差异的视图\",{\"1\":{\"1789\":1}}],[\"最终完成一次视图更新\",{\"1\":{\"1788\":1}}],[\"最终返回结果\",{\"1\":{\"1769\":1}}],[\"最终返回一个数组\",{\"1\":{\"945\":1}}],[\"最终决定获取属性立即\",{\"1\":{\"1527\":1}}],[\"最终$scopedslots为如下形式\",{\"1\":{\"1446\":1}}],[\"最终所有的组件都要经过一个\",{\"1\":{\"1415\":1}}],[\"最终编译为并集选择器\",{\"1\":{\"1339\":1}}],[\"最终要执行的函数\",{\"1\":{\"1039\":1}}],[\"最终计算结果仍然会为十进制\",{\"1\":{\"792\":1}}],[\"最终实现效果\",{\"1\":{\"765\":1}}],[\"最终才到达想要放置的元素内\",{\"1\":{\"764\":1}}],[\"最终解决方案\",{\"0\":{\"566\":1}}],[\"最终的\",{\"1\":{\"292\":1}}],[\"最终形成大前端生态\",{\"1\":{\"25\":1}}],[\"最终\",{\"1\":{\"24\":1}}],[\"便有机会实现\",{\"1\":{\"2091\":1}}],[\"便于复用\",{\"1\":{\"1931\":1}}],[\"便于我们开发\",{\"1\":{\"298\":1}}],[\"便是为了最小化此消耗采取的措施\",{\"1\":{\"1873\":1}}],[\"便把\",{\"1\":{\"24\":1}}],[\"便快速的完成了该项目\",{\"1\":{\"24\":1}}],[\"宿主程序\",{\"1\":{\"24\":1}}],[\"也给你返回\",{\"1\":{\"2050\":1}}],[\"也给程序员的调错带来了难度\",{\"1\":{\"958\":1}}],[\"也被称为\",{\"1\":{\"2087\":1}}],[\"也被称为boolean类型\",{\"1\":{\"796\":1}}],[\"也被重新计算或渲染\",{\"1\":{\"2035\":1}}],[\"也引用了真实\",{\"1\":{\"1951\":1}}],[\"也应该触发那些与\",{\"1\":{\"1930\":1}}],[\"也应该触发与\",{\"1\":{\"1916\":1}}],[\"也都会把\",{\"1\":{\"1889\":1}}],[\"也包括以\",{\"1\":{\"1800\":1}}],[\"也叫做任务对象\",{\"1\":{\"1776\":1}}],[\"也叫多行字符串\",{\"1\":{\"383\":1}}],[\"也为负数\",{\"1\":{\"1722\":1}}],[\"也为了后台能成功获取\",{\"1\":{\"756\":2}}],[\"也支持\",{\"1\":{\"1673\":1}}],[\"也需要双方同意\",{\"1\":{\"1553\":1}}],[\"也需要你对\",{\"1\":{\"1485\":1}}],[\"也同样因为如此\",{\"1\":{\"1527\":1}}],[\"也提供了\",{\"1\":{\"1500\":1}}],[\"也要指明监视的回调\",{\"1\":{\"1498\":1}}],[\"也要按顺序传递\",{\"1\":{\"1335\":1}}],[\"也要调用一下父\",{\"1\":{\"405\":1}}],[\"也更突出了\",{\"1\":{\"1298\":1}}],[\"也允许使用方括号来编写列表\",{\"1\":{\"1267\":1}}],[\"也可能使用原始对象进行查找\",{\"1\":{\"1922\":1}}],[\"也可称之为\",{\"1\":{\"1423\":1}}],[\"也可理解成父节点\",{\"1\":{\"1209\":1}}],[\"也可以将整个状态对象持久化保存并在页面刷新时恢复\",{\"1\":{\"2016\":1}}],[\"也可以将其作为\",{\"1\":{\"1673\":1}}],[\"也可以作为最小化的跨组件状态存储器\",{\"1\":{\"1827\":1}}],[\"也可以改用其他国内的资源以提升访问速度\",{\"1\":{\"1583\":1}}],[\"也可以改变和删除其属性和方法\",{\"1\":{\"984\":1}}],[\"也可以借助\",{\"1\":{\"1324\":1}}],[\"也可以去继承\",{\"1\":{\"1309\":1}}],[\"也可以有复杂的单位\",{\"1\":{\"1264\":1}}],[\"也可以用来定义\",{\"1\":{\"1492\":1}}],[\"也可以用系统定义的三种值来表示\",{\"1\":{\"1221\":1}}],[\"也可以用于替换\",{\"1\":{\"911\":1}}],[\"也可以用于捕获文本并进行引用或反向引用\",{\"1\":{\"909\":1}}],[\"也可以打印出\",{\"1\":{\"1086\":1}}],[\"也可以写在外部\",{\"1\":{\"821\":1}}],[\"也可以悬停后离开该区域\",{\"1\":{\"763\":1}}],[\"也可以是对象类型\",{\"1\":{\"1487\":1}}],[\"也可以是一个具有多个属性的对象\",{\"1\":{\"2064\":1}}],[\"也可以是一个对象\",{\"1\":{\"935\":1}}],[\"也可以是一个函数\",{\"1\":{\"931\":1,\"2069\":1}}],[\"也可以是一个字符组\",{\"1\":{\"910\":1}}],[\"也可以是\",{\"1\":{\"752\":1}}],[\"也可以是字符串\",{\"1\":{\"270\":1}}],[\"也可以链接到文档的指定部分\",{\"1\":{\"664\":1}}],[\"也可以手动指定渐变的分布情况\",{\"1\":{\"636\":1}}],[\"也可以直接为行高设置一个整数\",{\"1\":{\"621\":1}}],[\"也可以通过自己编写函数读取图像数据\",{\"1\":{\"1655\":1}}],[\"也可以通过will\",{\"1\":{\"1526\":1}}],[\"也可以通过返回值的形式来返回\",{\"1\":{\"943\":1}}],[\"也可以通过arguments来使用实参\",{\"1\":{\"932\":1}}],[\"也可以通过列表操作来对\",{\"1\":{\"379\":1}}],[\"也可以通过淘宝镜像进行加速\",{\"1\":{\"82\":1}}],[\"也可以在https\",{\"1\":{\"227\":1}}],[\"也可以使用双引号\",{\"1\":{\"789\":1}}],[\"也可以使用100\",{\"1\":{\"643\":1}}],[\"也可以使用\",{\"1\":{\"192\":1,\"643\":1,\"1265\":1,\"1370\":1,\"1493\":1}}],[\"也可以独立使用\",{\"1\":{\"147\":1}}],[\"也看到一个简单的\",{\"1\":{\"1195\":1}}],[\"也在\",{\"1\":{\"1141\":1}}],[\"也有暴露出去给外部使用的方法\",{\"1\":{\"2041\":1}}],[\"也有可能在使用时不清楚到底是哪个模块的成员\",{\"1\":{\"1310\":1}}],[\"也有一组方法\",{\"1\":{\"1088\":1}}],[\"也有一个\",{\"1\":{\"1007\":1}}],[\"也有其缺陷\",{\"1\":{\"767\":1}}],[\"也没有影响\",{\"1\":{\"995\":1}}],[\"也没有哪个属性是必须写的\",{\"1\":{\"635\":1}}],[\"也使用\",{\"1\":{\"895\":1}}],[\"也会被拦截下来\",{\"1\":{\"2075\":1}}],[\"也会被替换成\",{\"1\":{\"916\":1}}],[\"也会发生改变\",{\"1\":{\"2047\":2}}],[\"也会触发那些与\",{\"1\":{\"1932\":1}}],[\"也会触发当前render\",{\"1\":{\"1859\":1}}],[\"也会收集当前\",{\"1\":{\"1841\":1,\"1842\":1}}],[\"也会引入并编译\",{\"1\":{\"1309\":1}}],[\"也会全都拆分\",{\"1\":{\"894\":1}}],[\"也会自动的被转换为字符串类型\",{\"1\":{\"769\":1}}],[\"也会说\",{\"1\":{\"66\":1}}],[\"也决定了它应该如何被呈现\",{\"1\":{\"693\":1}}],[\"也是建立在\",{\"1\":{\"1647\":1}}],[\"也是需要我们主要适应的部分\",{\"1\":{\"1485\":1}}],[\"也是全局的\",{\"1\":{\"1313\":1}}],[\"也是目前推荐使用的方法\",{\"1\":{\"1216\":1}}],[\"也是会重复触发\",{\"1\":{\"1149\":1}}],[\"也是一种组件间通信的方式\",{\"1\":{\"1446\":1,\"1448\":1}}],[\"也是一种单一职责的实现\",{\"1\":{\"507\":1}}],[\"也是一个事件\",{\"1\":{\"1137\":1}}],[\"也是通过\",{\"1\":{\"995\":1}}],[\"也是改变\",{\"1\":{\"995\":1}}],[\"也是函数\",{\"1\":{\"948\":1}}],[\"也是很常见的内置回调函数\",{\"1\":{\"944\":1}}],[\"也是可以设定默认值的\",{\"1\":{\"934\":1}}],[\"也是键值对的集合\",{\"1\":{\"867\":1}}],[\"也是\",{\"1\":{\"866\":1,\"1092\":1}}],[\"也是用来存储一些值的\",{\"1\":{\"838\":1}}],[\"也是默认只会对离他最近的循环循环起作用\",{\"1\":{\"825\":1}}],[\"也是大多数元素的默认行为\",{\"1\":{\"539\":1}}],[\"也是从此刻开始\",{\"1\":{\"24\":1}}],[\"也就不会立即获取计算属性的返回值\",{\"1\":{\"1847\":1}}],[\"也就携带了这些偏差\",{\"1\":{\"1560\":1}}],[\"也就意味着页面会重新渲染\",{\"1\":{\"1239\":1}}],[\"也就没有捕获组编号\",{\"1\":{\"913\":1}}],[\"也就代指\",{\"1\":{\"748\":1}}],[\"也就会被删除\",{\"1\":{\"345\":1}}],[\"也就是外部所拿到的\",{\"1\":{\"2061\":1}}],[\"也就是外部所定义的\",{\"1\":{\"2047\":1}}],[\"也就是上图\",{\"1\":{\"1903\":1}}],[\"也就是被\",{\"1\":{\"1666\":1}}],[\"也就是这个文件只能通过\",{\"1\":{\"1319\":1}}],[\"也就是有\",{\"1\":{\"1285\":1}}],[\"也就是\",{\"1\":{\"834\":1,\"1250\":1,\"1962\":1,\"2042\":1}}],[\"也就是网页的样式会在这个点时发生变化\",{\"1\":{\"651\":1}}],[\"也就是不能将父元素撑开\",{\"1\":{\"541\":1}}],[\"也就是刚才保存的\",{\"1\":{\"487\":1}}],[\"也就是我们常见的\",{\"1\":{\"294\":1}}],[\"也就是说至此至终都是一个文档\",{\"1\":{\"2051\":1}}],[\"也就是说如果传给子组件的是一个对象\",{\"1\":{\"1842\":1}}],[\"也就是说当前html字符串要么没有父节点要么父节点不是纯文本标签\",{\"1\":{\"1792\":1}}],[\"也就是说函数返回的结果只能作为变量值或属性值\",{\"1\":{\"1282\":1}}],[\"也就是说默认为\",{\"1\":{\"1145\":1}}],[\"也就是说在捕获阶段\",{\"1\":{\"1141\":1}}],[\"也就是说window\",{\"1\":{\"1092\":1}}],[\"也就是说全局变量是\",{\"1\":{\"1086\":1}}],[\"也就是说作用域最大的用处就是隔离变量\",{\"1\":{\"1016\":1}}],[\"也就是说必须要我们自己手动来给某个变量赋值为\",{\"1\":{\"980\":1}}],[\"也就是说虽然失败了\",{\"1\":{\"958\":1}}],[\"也就是说无法像集合那样添加简单值进去\",{\"1\":{\"865\":1}}],[\"也就是说占着空间却没用\",{\"1\":{\"865\":1}}],[\"也就是说文本一半在\",{\"1\":{\"730\":1}}],[\"也就是说\",{\"1\":{\"219\":1,\"696\":1,\"714\":1,\"796\":1,\"867\":1,\"980\":1,\"1027\":1,\"1028\":1,\"1127\":1,\"1158\":1,\"1216\":1,\"1224\":2,\"1309\":1,\"1534\":1,\"1821\":1,\"1841\":1,\"1962\":1,\"2043\":1,\"2047\":2,\"2054\":1,\"2055\":1,\"2058\":2,\"2061\":2,\"2065\":1}}],[\"也就是说错误的时候会直接帮我们提示在真正代码的位置中出现的问题\",{\"1\":{\"124\":1}}],[\"也称之为\",{\"1\":{\"289\":1}}],[\"也称为标识符\",{\"1\":{\"1265\":1}}],[\"也称为锚点\",{\"1\":{\"915\":1}}],[\"也称为\",{\"1\":{\"80\":1}}],[\"也不会影响\",{\"1\":{\"1529\":1}}],[\"也不会再触发更新流程了\",{\"1\":{\"1411\":1}}],[\"也不会被垃圾回收\",{\"1\":{\"865\":1}}],[\"也不会超过它前边的其他浮动元素\",{\"1\":{\"561\":1}}],[\"也不一定等于\",{\"1\":{\"796\":1}}],[\"也不受变换矩阵的影响\",{\"1\":{\"733\":1}}],[\"也不太灵活\",{\"1\":{\"535\":1}}],[\"也不可以转到其它用户上\",{\"1\":{\"362\":1}}],[\"也不是注释节点\",{\"1\":{\"1789\":1}}],[\"也不是所有\",{\"1\":{\"681\":1}}],[\"也不是像nginx一样的web服务器\",{\"1\":{\"215\":1}}],[\"也不是\",{\"1\":{\"215\":1}}],[\"也不存在专业的前端工程师\",{\"1\":{\"22\":1}}],[\"也能够正常工作\",{\"1\":{\"2075\":1}}],[\"也能够自动地被转换为字符串类型\",{\"1\":{\"769\":1}}],[\"也能做事件委托\",{\"1\":{\"1216\":1}}],[\"也能像下面这种写法\",{\"1\":{\"142\":1}}],[\"也能编写大型应用\",{\"1\":{\"25\":1}}],[\"玩具\",{\"1\":{\"24\":1}}],[\"推入到队列里面\",{\"1\":{\"2074\":1}}],[\"推入到\",{\"1\":{\"2061\":1,\"2079\":1,\"2081\":1}}],[\"推入新的状态\",{\"1\":{\"2050\":1}}],[\"推陈\",{\"1\":{\"1705\":1}}],[\"推开\",{\"1\":{\"540\":2}}],[\"推荐包\",{\"1\":{\"1468\":1}}],[\"推荐用\",{\"1\":{\"395\":1}}],[\"推荐\",{\"1\":{\"65\":1,\"123\":1}}],[\"推出了该\",{\"1\":{\"24\":1}}],[\"推送代码之前\",{\"1\":{\"13\":1}}],[\"是网络通信中常用的加密方式\",{\"1\":{\"2100\":1}}],[\"是路由独享守卫\",{\"1\":{\"2081\":1}}],[\"是路径\",{\"1\":{\"1455\":2}}],[\"是得到一个索引值\",{\"1\":{\"2065\":1}}],[\"是会被渲染为一个\",{\"1\":{\"2064\":1}}],[\"是会被销毁掉的\",{\"1\":{\"1023\":1}}],[\"是必须要传递的\",{\"1\":{\"2064\":1}}],[\"是触发\",{\"1\":{\"2061\":1}}],[\"是触发事件的元素\",{\"1\":{\"993\":1,\"1152\":1}}],[\"是去除了\",{\"1\":{\"2061\":1}}],[\"是页面卸载之前会做的事情\",{\"1\":{\"2061\":1}}],[\"是原生的\",{\"1\":{\"2058\":2}}],[\"是两个对象\",{\"1\":{\"2055\":1}}],[\"是浏览器环境中所支持的一个对象\",{\"1\":{\"2048\":1}}],[\"是浏览器渲染主线程的工作方式\",{\"1\":{\"1560\":1}}],[\"是创建一个不会进行深度转换的响应变量\",{\"1\":{\"2044\":1}}],[\"是如何使用的\",{\"1\":{\"2041\":1}}],[\"是传入的\",{\"1\":{\"2031\":1}}],[\"是支持嵌套的\",{\"1\":{\"2031\":1}}],[\"是根节点\",{\"1\":{\"1978\":1}}],[\"是文本\",{\"1\":{\"1974\":1}}],[\"是文本中的一个字符\",{\"1\":{\"1792\":1}}],[\"是开始标签\",{\"1\":{\"1974\":1}}],[\"是开发阶段和最终上线运行阶段都用到的依赖包\",{\"1\":{\"72\":1}}],[\"是新增节点\",{\"1\":{\"1962\":1}}],[\"是新的格式化字符串的语法\",{\"1\":{\"389\":1}}],[\"是第一个节点\",{\"1\":{\"1962\":1}}],[\"是事件发生的时间\",{\"1\":{\"1949\":1}}],[\"是事件名\",{\"1\":{\"1368\":1}}],[\"是值\",{\"1\":{\"1932\":1}}],[\"是另外一个代理对象\",{\"1\":{\"1929\":1}}],[\"是属性\",{\"1\":{\"1927\":1}}],[\"是属于文本本身的内容\",{\"1\":{\"1792\":1}}],[\"是属于\",{\"1\":{\"681\":1,\"795\":1,\"2047\":1}}],[\"是代理对象\",{\"1\":{\"1923\":1,\"1924\":1,\"1993\":1}}],[\"是数组\",{\"1\":{\"1920\":1,\"1948\":1,\"1949\":1,\"1993\":1}}],[\"是数据预处理函数\",{\"1\":{\"1656\":1}}],[\"是只读的`\",{\"1\":{\"1914\":2,\"1917\":1,\"1918\":1,\"1992\":2,\"1993\":1}}],[\"是只在开发阶段使用的依赖包\",{\"1\":{\"72\":1}}],[\"是浅响应的\",{\"1\":{\"1911\":1}}],[\"是副作用函数第二次执行所产\",{\"1\":{\"1897\":1}}],[\"是副作用函数第一次执行所产生的副作用\",{\"1\":{\"1897\":1}}],[\"是函数\",{\"1\":{\"1897\":1}}],[\"是回调函数\",{\"1\":{\"1897\":1}}],[\"是响应式数据\",{\"1\":{\"1897\":1,\"1929\":1}}],[\"是响应行中的一个数字\",{\"1\":{\"1635\":1}}],[\"是依赖集合\",{\"1\":{\"1890\":1,\"1984\":1}}],[\"是弱引用\",{\"1\":{\"1889\":1}}],[\"是字符串\",{\"1\":{\"1878\":1}}],[\"是结束标签的开始\",{\"1\":{\"1792\":1}}],[\"是异步执行的\",{\"1\":{\"1784\":1}}],[\"是异步完成的\",{\"1\":{\"1527\":1}}],[\"是多少倍还是多多少倍\",{\"1\":{\"1752\":1}}],[\"是我的\",{\"1\":{\"1738\":1}}],[\"是你的\",{\"1\":{\"1738\":1}}],[\"是未经过变换的原始输入\",{\"1\":{\"1678\":1}}],[\"是深度学习中常用的激活函数\",{\"1\":{\"1666\":1}}],[\"是独立的基于\",{\"1\":{\"1647\":1}}],[\"是要保持生产环境和开发环境一致\",{\"1\":{\"1616\":1}}],[\"是最正统的跨域解决方案\",{\"1\":{\"1605\":1}}],[\"是最早使用引用计数策略的浏览器\",{\"1\":{\"1030\":1}}],[\"是的\",{\"1\":{\"1542\":1}}],[\"是向服务器表达\",{\"1\":{\"1542\":1}}],[\"是通过\",{\"1\":{\"2069\":1}}],[\"是通过expires响应头来指定过期时间点的\",{\"1\":{\"1540\":1}}],[\"是通过元素选择器获取的\",{\"1\":{\"1204\":1}}],[\"是undefined\",{\"1\":{\"1493\":1}}],[\"是所有composition\",{\"1\":{\"1486\":1}}],[\"是组件\",{\"1\":{\"1455\":1}}],[\"是子组件\",{\"1\":{\"1437\":1}}],[\"是父组件\",{\"1\":{\"1437\":1}}],[\"是运行版的\",{\"1\":{\"1427\":1}}],[\"是完整版的\",{\"1\":{\"1427\":1}}],[\"是vue\",{\"1\":{\"1423\":1}}],[\"是产生新的对应的数据\",{\"1\":{\"1397\":1}}],[\"是没有问题的\",{\"1\":{\"1394\":1}}],[\"是没有块作用域的\",{\"1\":{\"948\":1}}],[\"是虚拟\",{\"1\":{\"1394\":1}}],[\"是样式对象\",{\"1\":{\"1386\":1}}],[\"是动态值\",{\"1\":{\"1386\":1}}],[\"是动态语言\",{\"1\":{\"843\":1}}],[\"是当前操作的元素时才触发事件\",{\"1\":{\"1369\":1}}],[\"是布尔值\",{\"1\":{\"1357\":2}}],[\"是安全的\",{\"1\":{\"1302\":1}}],[\"是混合宏的名称\",{\"1\":{\"1292\":1}}],[\"是用来执行整个导航守卫队列的\",{\"1\":{\"2076\":1}}],[\"是用来声明混合宏的关键词\",{\"1\":{\"1292\":1}}],[\"是用户要跳转的目标路由\",{\"1\":{\"2065\":1}}],[\"是用于控制浏览器\",{\"1\":{\"216\":1}}],[\"是唯一\",{\"1\":{\"1236\":1}}],[\"是唯一的\",{\"1\":{\"362\":1}}],[\"是来到所有动画的最终状态\",{\"1\":{\"1225\":1}}],[\"是来源于\",{\"1\":{\"980\":1}}],[\"是较早版本的绑定事件的方法\",{\"1\":{\"1216\":1}}],[\"是取消事件\",{\"1\":{\"1216\":1}}],[\"是取消包裹\",{\"1\":{\"1212\":1}}],[\"是获取相对于父元素的偏移位置\",{\"1\":{\"1207\":1}}],[\"是非常消耗性能的\",{\"1\":{\"1789\":1}}],[\"是非常危险的\",{\"1\":{\"1400\":1}}],[\"是非常重用的\",{\"1\":{\"1205\":1}}],[\"是非常灵活\",{\"1\":{\"122\":1}}],[\"是针对特殊属性\",{\"1\":{\"1205\":1}}],[\"是针对普通属性\",{\"1\":{\"1205\":1}}],[\"是单线程执行的\",{\"1\":{\"1174\":1}}],[\"是程序在\",{\"1\":{\"1977\":1}}],[\"是程序执行的一个完整流程\",{\"1\":{\"1169\":1}}],[\"是程序员\",{\"1\":{\"71\":1}}],[\"是进程内的一个独立执行单元\",{\"1\":{\"1169\":1}}],[\"是进程的一部分\",{\"1\":{\"407\":1}}],[\"是每个元素节点都有的属性\",{\"1\":{\"1125\":1}}],[\"是显示一个图标\",{\"1\":{\"1105\":1}}],[\"是该通知的主体内容\",{\"1\":{\"1105\":1}}],[\"是该通知的标题\",{\"1\":{\"1105\":1}}],[\"是构造函数上面的一个属性\",{\"1\":{\"1063\":1}}],[\"是确定当前上下文中的局部变量\",{\"1\":{\"1015\":1}}],[\"是以安全为目标的\",{\"1\":{\"2091\":1}}],[\"是以严格的\",{\"1\":{\"1247\":1}}],[\"是以\",{\"1\":{\"1247\":2}}],[\"是以函数的形式被调用的\",{\"1\":{\"996\":1}}],[\"是以函数的形式调用时\",{\"1\":{\"996\":1}}],[\"是以明文的方式存放在客户端的\",{\"1\":{\"356\":1}}],[\"是绑定事件的元素\",{\"1\":{\"993\":1,\"1152\":1}}],[\"是直接\",{\"1\":{\"992\":1}}],[\"是为了实现嵌套路由的功能\",{\"1\":{\"2068\":1}}],[\"是为了兼容不同的服务器\",{\"1\":{\"1537\":1}}],[\"是为了填补之前的坑\",{\"1\":{\"980\":1}}],[\"是为了在网络应用环境间传递声明而执行的一种基于\",{\"1\":{\"363\":1}}],[\"是下面这行语句\",{\"1\":{\"957\":1}}],[\"是采用具有限制性\",{\"1\":{\"956\":1}}],[\"是过滤的意思\",{\"1\":{\"945\":1}}],[\"是作为一个参数传递到了\",{\"1\":{\"943\":1}}],[\"是从哪里来的\",{\"1\":{\"1317\":1}}],[\"是从右往左开始归并\",{\"1\":{\"946\":1}}],[\"是从左往右进行归并\",{\"1\":{\"946\":1}}],[\"是从\",{\"1\":{\"941\":1}}],[\"是按照升序排列数组每一项\",{\"1\":{\"855\":1}}],[\"是按照数据结构来组织\",{\"1\":{\"172\":1}}],[\"是将某一次的响应结果保存在客户端\",{\"1\":{\"1533\":1}}],[\"是将字符串转为数组\",{\"1\":{\"854\":1}}],[\"是将数组转为字符串\",{\"1\":{\"854\":1}}],[\"是将资源打包至内存当中\",{\"1\":{\"133\":1}}],[\"是找到可迭代元素的值\",{\"1\":{\"846\":1}}],[\"是找到可迭代元素的键\",{\"1\":{\"846\":1}}],[\"是大多数语言里面最常见的一种数据结构\",{\"1\":{\"838\":1}}],[\"是无法找到的\",{\"1\":{\"828\":1}}],[\"是无法做到每次间隔3秒的要求\",{\"1\":{\"491\":1}}],[\"是使用中括号法来访问对象的属性\",{\"1\":{\"828\":1}}],[\"是区分大小写的\",{\"1\":{\"796\":1}}],[\"是标准的\",{\"1\":{\"733\":1}}],[\"是其在目标\",{\"1\":{\"722\":1}}],[\"是累加的\",{\"1\":{\"720\":3}}],[\"是上下偏移量\",{\"1\":{\"720\":1}}],[\"是左右偏移量\",{\"1\":{\"720\":1}}],[\"是逆时针方向\",{\"1\":{\"716\":1}}],[\"是在干嘛了\",{\"1\":{\"2058\":1}}],[\"是在组合式\",{\"1\":{\"1485\":1}}],[\"是在\",{\"1\":{\"858\":1,\"2047\":1}}],[\"是在画布上绘制了一个与底色相同的边框\",{\"1\":{\"706\":1}}],[\"是在浏览器端还是服务端\",{\"1\":{\"507\":1}}],[\"是flex\",{\"1\":{\"592\":1}}],[\"是不同的\",{\"1\":{\"1927\":1}}],[\"是不能建立响应联系的\",{\"1\":{\"1911\":1}}],[\"是不可以修改的\",{\"1\":{\"1429\":1}}],[\"是不可跨域的\",{\"1\":{\"345\":1}}],[\"是不是很简单\",{\"1\":{\"1194\":1}}],[\"是不是函数\",{\"1\":{\"487\":1}}],[\"是同步执行的\",{\"1\":{\"1784\":1}}],[\"是同步的\",{\"1\":{\"37\":1}}],[\"是同时找到可迭代元素的键和值\",{\"1\":{\"846\":1}}],[\"是同一个地址\",{\"1\":{\"418\":1}}],[\"是应用程序的执行实例\",{\"1\":{\"407\":1}}],[\"是可以通过\",{\"1\":{\"2070\":1}}],[\"是可以通过名称来引用\",{\"1\":{\"926\":1}}],[\"是可以直接通过\",{\"1\":{\"1927\":1}}],[\"是可\",{\"1\":{\"402\":1}}],[\"是可选参数\",{\"1\":{\"395\":1}}],[\"是错误的\",{\"1\":{\"397\":1}}],[\"是目前最流行的跨域认证解决方案\",{\"1\":{\"363\":1}}],[\"是需要严格保密的\",{\"1\":{\"362\":1}}],[\"是令牌\",{\"1\":{\"362\":1}}],[\"是服务端生成并返回给\",{\"1\":{\"358\":1}}],[\"是服务器发送到用户浏览器并保存在本地的一小块数据\",{\"1\":{\"345\":1}}],[\"是服务器端\",{\"1\":{\"24\":1}}],[\"是接口\",{\"1\":{\"355\":1}}],[\"是控制\",{\"1\":{\"355\":1}}],[\"是相同的套路\",{\"1\":{\"2061\":1}}],[\"是相等的\",{\"1\":{\"813\":1}}],[\"是相互独立的\",{\"1\":{\"349\":1}}],[\"是相对于\",{\"1\":{\"223\":1,\"381\":1}}],[\"是否合法\",{\"1\":{\"2088\":1}}],[\"是否通过\",{\"1\":{\"2020\":1}}],[\"是否发生变化\",{\"1\":{\"1955\":2}}],[\"是否设置了deep为true\",{\"1\":{\"1860\":1}}],[\"是否自闭和\",{\"1\":{\"1792\":1}}],[\"是否为函数\",{\"1\":{\"2070\":1}}],[\"是否为\",{\"1\":{\"1897\":1}}],[\"是否为组件\",{\"1\":{\"1825\":1}}],[\"是否为微任务\",{\"1\":{\"1822\":1}}],[\"是否为br\",{\"1\":{\"1792\":1}}],[\"是否为自闭合标签的标志\",{\"1\":{\"1792\":1}}],[\"是否为克隆节点\",{\"1\":{\"1788\":1}}],[\"是否为注释节点\",{\"1\":{\"1788\":1}}],[\"是否为每次请求都设置一个cookie用来存储session的id\",{\"1\":{\"355\":1}}],[\"是否作为跟节点插入\",{\"1\":{\"1788\":1}}],[\"是否同步\",{\"1\":{\"1784\":1}}],[\"是否懒执行\",{\"1\":{\"1784\":1}}],[\"是否深度监测\",{\"1\":{\"1784\":1}}],[\"是否输出图像大小向上取整\",{\"1\":{\"1663\":1}}],[\"是否使用偏置\",{\"1\":{\"1667\":1}}],[\"是否使用\",{\"1\":{\"1659\":1}}],[\"是否下载\",{\"1\":{\"1656\":1}}],[\"是否将数据保存到\",{\"1\":{\"1655\":1}}],[\"是否打乱数据\",{\"1\":{\"1655\":1}}],[\"是否正在发送ajax请求\",{\"1\":{\"1582\":1}}],[\"是否异步\",{\"1\":{\"1575\":1,\"1576\":1}}],[\"是否阻止浏览器的默认行为\",{\"1\":{\"1357\":1}}],[\"是否冒泡\",{\"1\":{\"1357\":1}}],[\"是否是<a>标签\",{\"1\":{\"2032\":1}}],[\"是否是\",{\"1\":{\"1792\":1}}],[\"是否是自闭合标签的斜杠\",{\"1\":{\"1353\":1}}],[\"是否是一元属性\",{\"1\":{\"1353\":1}}],[\"是否按下了shift键\",{\"1\":{\"1154\":1}}],[\"是否按下了ctrl键\",{\"1\":{\"1154\":1}}],[\"是否按下了对应的辅助按键\",{\"1\":{\"1154\":1}}],[\"是否启用了字体平滑\",{\"1\":{\"1098\":1}}],[\"是否可以修改该属性的描述\",{\"1\":{\"1059\":1}}],[\"是否可以修改该属性的值\",{\"1\":{\"1059\":1}}],[\"是否有v\",{\"1\":{\"1788\":1}}],[\"是否有可能会接收到非法的参数\",{\"1\":{\"931\":1}}],[\"是否有效\",{\"1\":{\"369\":1,\"2065\":1}}],[\"是否存在的判断\",{\"1\":{\"2061\":1}}],[\"是否存在内部槽\",{\"1\":{\"1927\":1}}],[\"是否存在\",{\"1\":{\"828\":1,\"1929\":1,\"2061\":1,\"2069\":1,\"2070\":2}}],[\"是否存在用户数据\",{\"1\":{\"355\":1}}],[\"是否符合\",{\"1\":{\"760\":1}}],[\"是否静音\",{\"1\":{\"748\":1,\"750\":1}}],[\"是否允许用户控制播放\",{\"1\":{\"668\":1}}],[\"是否显示元素的背面\",{\"1\":{\"617\":1}}],[\"是否需要移动\",{\"1\":{\"1969\":1}}],[\"是否需要压缩\",{\"1\":{\"591\":1}}],[\"是否需要拉伸\",{\"1\":{\"591\":1}}],[\"是否过期\",{\"1\":{\"368\":1}}],[\"是否在每次请求时重新保存session\",{\"1\":{\"355\":1}}],[\"是否仅被使用安全协议传输\",{\"1\":{\"345\":1}}],[\"是否被编译成\",{\"1\":{\"149\":2}}],[\"是ejs解析内容的标记\",{\"1\":{\"327\":1}}],[\"是指攻击者利用站点的漏洞\",{\"1\":{\"2094\":1}}],[\"是指函数的所有梯度都消失但既不是全局最小值也不是局部最小值的任何位置\",{\"1\":{\"1658\":1}}],[\"是指添加的是一次性事件\",{\"1\":{\"1216\":1}}],[\"是指整个页面加载完成后执行\",{\"1\":{\"1215\":1}}],[\"是指按下后会产生一个字符值的按键\",{\"1\":{\"1149\":1}}],[\"是指在一组数据中所有数据之和\",{\"1\":{\"1745\":1}}],[\"是指在定义函数时\",{\"1\":{\"1023\":1}}],[\"是指在主轴方向上\",{\"1\":{\"591\":1}}],[\"是指向外层的\",{\"1\":{\"996\":1}}],[\"是指向\",{\"1\":{\"995\":1}}],[\"是指向全局对象\",{\"1\":{\"993\":1}}],[\"是指向触发事件的元素\",{\"1\":{\"993\":1}}],[\"是指当我们使用字面量方式来声明一个函数的时候\",{\"1\":{\"940\":1}}],[\"是指不影响\",{\"1\":{\"609\":1}}],[\"是指元素在文档中按照其出现的顺序自然排列的布局方式\",{\"1\":{\"539\":1}}],[\"是指\",{\"1\":{\"288\":2}}],[\"是对象\",{\"1\":{\"2019\":1}}],[\"是对响应报文的封装\",{\"1\":{\"1573\":1}}],[\"是对响应报文的封装对象\",{\"1\":{\"273\":1}}],[\"是对请求报文的封装\",{\"1\":{\"1573\":1}}],[\"是对请求报文的封装对象\",{\"1\":{\"273\":1}}],[\"是对应的响应函数\",{\"1\":{\"1455\":1}}],[\"是对应分组的编号\",{\"1\":{\"911\":1}}],[\"是对数组的每一项运行给定的函数\",{\"1\":{\"945\":1}}],[\"是对我们自己创建的\",{\"1\":{\"828\":1}}],[\"是实现了\",{\"1\":{\"240\":1}}],[\"是现在最流行的\",{\"1\":{\"223\":1}}],[\"是因为我们的单页应用主要就是和这个\",{\"1\":{\"2048\":1}}],[\"是因为需要一个\",{\"1\":{\"2002\":1}}],[\"是因为在挂载时使用proxyrefs进行了解构\",{\"1\":{\"2001\":1}}],[\"是因为它们是不可细化的\",{\"1\":{\"980\":1}}],[\"是因为\",{\"1\":{\"220\":1}}],[\"是因为前端开发还有几个大的问题没有解决\",{\"1\":{\"23\":1}}],[\"是前端做部分后端的工作\",{\"1\":{\"219\":1}}],[\"是后端做部分前端的工作\",{\"1\":{\"219\":1}}],[\"是后端渲染的\",{\"1\":{\"219\":1}}],[\"是全球最大的开源库生态系统\",{\"1\":{\"215\":1}}],[\"是什么类型取决于你传入的值\",{\"1\":{\"2058\":1}}],[\"是什么意思\",{\"1\":{\"955\":1,\"959\":1}}],[\"是什么\",{\"0\":{\"171\":1,\"345\":1,\"352\":1,\"358\":1},\"1\":{\"2047\":1}}],[\"是基于发布订阅模式的\",{\"1\":{\"1368\":1}}],[\"是基于\",{\"1\":{\"223\":1,\"1248\":1,\"1647\":1}}],[\"是基于插件的\",{\"1\":{\"148\":1}}],[\"是基于模块化的打包\",{\"1\":{\"122\":1}}],[\"是由\",{\"1\":{\"84\":1,\"222\":1}}],[\"是一套专门处理异步场景的规范\",{\"1\":{\"1776\":1}}],[\"是一套规则\",{\"1\":{\"1605\":1}}],[\"是一套用于在浏览器视口内组织元素如何放置的系统\",{\"1\":{\"552\":1}}],[\"是一门单线程的语言\",{\"1\":{\"1558\":1}}],[\"是一门真正的语言\",{\"1\":{\"24\":1}}],[\"是一元属性\",{\"1\":{\"1353\":1}}],[\"是一致的\",{\"1\":{\"1052\":1}}],[\"是一种可以在网站上配置的安全策略\",{\"1\":{\"2095\":1}}],[\"是一种挟制用户在当前已登录的\",{\"1\":{\"2087\":1}}],[\"是一种能够将我们的\",{\"1\":{\"1515\":1}}],[\"是一种动态样式语言\",{\"1\":{\"1324\":1}}],[\"是一种更完善的\",{\"1\":{\"867\":1}}],[\"是一种没有时间限制的数据存储方式\",{\"1\":{\"768\":1}}],[\"是一种记录服务器和客户端会话状态的机制\",{\"1\":{\"362\":1}}],[\"是一种无状态的协议\",{\"1\":{\"343\":1}}],[\"是一种特殊风格的接口\",{\"1\":{\"339\":1}}],[\"是一种标准\",{\"1\":{\"294\":1}}],[\"是一种基于tcp\",{\"1\":{\"266\":1}}],[\"是一种模块类型\",{\"1\":{\"142\":1}}],[\"是一个计算属性\",{\"1\":{\"2068\":1}}],[\"是一个用于比较两个路由记录是否相同的函数\",{\"1\":{\"2065\":1}}],[\"是一个布尔值\",{\"1\":{\"2064\":1}}],[\"是一个配置对象\",{\"1\":{\"2063\":1}}],[\"是一个响应式的变量\",{\"1\":{\"2044\":1}}],[\"是一个包含了内部方法的对象\",{\"1\":{\"2042\":1}}],[\"是一个只读数组\",{\"1\":{\"2042\":1}}],[\"是一个核心概念\",{\"1\":{\"2029\":1}}],[\"是一个普通对象\",{\"1\":{\"2016\":1}}],[\"是一个普通的\",{\"1\":{\"1873\":1}}],[\"是一个对象\",{\"1\":{\"2016\":1}}],[\"是一个标识符\",{\"1\":{\"1979\":1}}],[\"是一个方法\",{\"1\":{\"1927\":1,\"2065\":1}}],[\"是一个访问器属性\",{\"1\":{\"1927\":1}}],[\"是一个访问器属\",{\"1\":{\"1902\":1}}],[\"是一个函数\",{\"1\":{\"1893\":1,\"2066\":1}}],[\"是一个树形结构\",{\"1\":{\"1866\":1}}],[\"是一个字符串\",{\"1\":{\"1854\":1}}],[\"是一个字符串列表\",{\"1\":{\"379\":1}}],[\"是一个固定值而不是绑定值时\",{\"1\":{\"1840\":1}}],[\"是一个固定格式的字符串\",{\"1\":{\"1626\":1}}],[\"是一个占位符\",{\"1\":{\"1835\":1}}],[\"是一个数组\",{\"1\":{\"1788\":1,\"1977\":1}}],[\"是一个vnodedata类型\",{\"1\":{\"1788\":1}}],[\"是一个广泛运用于互联网的应用层协议\",{\"1\":{\"1627\":1}}],[\"是一个国外的静态资源网站\",{\"1\":{\"1583\":1}}],[\"是一个仅\",{\"1\":{\"1493\":1}}],[\"是一个\",{\"1\":{\"1224\":1,\"1227\":1,\"1673\":1,\"2031\":1,\"2065\":1}}],[\"是一个事件\",{\"1\":{\"1137\":1}}],[\"是一个表示\",{\"1\":{\"980\":2}}],[\"是一个公共的图标字体库\",{\"1\":{\"623\":1}}],[\"是一个短路运算符\",{\"1\":{\"397\":2}}],[\"是一个高效的\",{\"1\":{\"324\":1}}],[\"是一个完整的中间件和路由系统\",{\"1\":{\"319\":1}}],[\"是一个封装好的工具包\",{\"1\":{\"298\":1}}],[\"是一个基于\",{\"1\":{\"298\":1}}],[\"是一个基于分布式文件存储的数据库\",{\"1\":{\"171\":1}}],[\"是一个现代\",{\"1\":{\"122\":1}}],[\"是一个淘宝构建的npmjs\",{\"1\":{\"80\":1}}],[\"是默认选项包信息保存在\",{\"1\":{\"72\":1}}],[\"是极其重要的\",{\"1\":{\"71\":1}}],[\"是项目中常用的一个命令\",{\"1\":{\"77\":1}}],[\"是项目\",{\"1\":{\"71\":1}}],[\"是包的配置文件\",{\"1\":{\"64\":1}}],[\"是\",{\"1\":{\"25\":1,\"61\":2,\"66\":1,\"69\":1,\"181\":1,\"215\":1,\"216\":1,\"242\":1,\"296\":1,\"389\":1,\"564\":1,\"578\":2,\"584\":1,\"701\":1,\"708\":1,\"711\":2,\"722\":1,\"767\":1,\"995\":1,\"1084\":1,\"1087\":1,\"1093\":2,\"1099\":1,\"1101\":2,\"1102\":1,\"1169\":1,\"1247\":1,\"1250\":1,\"1352\":1,\"1499\":1,\"1647\":2,\"1656\":1,\"1659\":1,\"1661\":1,\"1662\":1,\"1667\":1,\"1746\":1,\"1797\":4,\"1910\":1,\"1929\":1,\"1990\":1,\"2051\":2,\"2058\":1,\"2060\":1,\"2073\":1,\"2091\":1}}],[\"是鼎鼎大名的谷歌公司发布的\",{\"1\":{\"24\":1}}],[\"而私钥只有密钥持有者才能拥有\",{\"1\":{\"2100\":1}}],[\"而页面中刚好出现攻击者的恶意脚本时\",{\"1\":{\"2094\":1}}],[\"而通过标签\",{\"1\":{\"2061\":1}}],[\"而通过设置标志m\",{\"1\":{\"919\":1}}],[\"而confirmtransition的代码如下所示\",{\"1\":{\"2029\":1}}],[\"而父组件传入子组件的\",{\"1\":{\"2002\":1}}],[\"而旧子节点中还存在未被处理的节点\",{\"1\":{\"1968\":1}}],[\"而存在旧子节点未处理\",{\"1\":{\"1966\":1}}],[\"而非\",{\"1\":{\"2044\":1}}],[\"而非按引用传递\",{\"1\":{\"1935\":1}}],[\"而非键值对\",{\"1\":{\"1932\":1}}],[\"而它的返回值是通过调用对象的内部方法\",{\"1\":{\"1905\":1}}],[\"而代理\",{\"1\":{\"1901\":1}}],[\"而过期回调是在watch回调执行前运行的\",{\"1\":{\"1897\":1}}],[\"而请求\",{\"1\":{\"1897\":1}}],[\"而组件的渲染函数是在\",{\"1\":{\"1891\":1}}],[\"而响应式数据是指会导致视图变化的数据\",{\"1\":{\"1885\":1}}],[\"而新子节点中还存在未被处理的节点\",{\"1\":{\"1968\":1}}],[\"而新加的处理组件的函数mountcomponent\",{\"1\":{\"1879\":1}}],[\"而新增的\",{\"1\":{\"1154\":1}}],[\"而虚拟\",{\"1\":{\"1879\":1}}],[\"而创建过程中会对被监听属性做依赖收集\",{\"1\":{\"1854\":1}}],[\"而render\",{\"1\":{\"1850\":1}}],[\"而data和props则定义在具体的组件实例上\",{\"1\":{\"1845\":1}}],[\"而do\",{\"1\":{\"820\":1}}],[\"而props的数据不会\",{\"1\":{\"1840\":1}}],[\"而渲染函数是用\",{\"1\":{\"1975\":1}}],[\"而渲染时使用的就是这个elm\",{\"1\":{\"1834\":1}}],[\"而渲染主线程承担着诸多的工作\",{\"1\":{\"1558\":1}}],[\"而渲染主线程只有一个\",{\"1\":{\"1558\":1}}],[\"而生成组件实例是在模板挂载时发生的\",{\"1\":{\"1825\":1}}],[\"而生成器\",{\"1\":{\"402\":1}}],[\"而vm\",{\"1\":{\"1806\":1}}],[\"而vnode\",{\"1\":{\"1789\":1}}],[\"而initprovide是将当前组件实例注入的属性挂载\",{\"1\":{\"1803\":1}}],[\"而浏览器原生事件是在父组件中处理\",{\"1\":{\"1802\":1}}],[\"而对于in操作符\",{\"1\":{\"1905\":1}}],[\"而对于自定义事件\",{\"1\":{\"1802\":1}}],[\"而对于<\",{\"1\":{\"1792\":1}}],[\"而对于数组来说\",{\"1\":{\"1786\":1}}],[\"而对象\",{\"1\":{\"1030\":1}}],[\"而影响部分只是为了观点服务\",{\"1\":{\"1690\":1}}],[\"而全连接层的输入为二维张量时\",{\"1\":{\"1661\":1}}],[\"而让客户端不断的发起请求又白白的占用了资源\",{\"1\":{\"1649\":1}}],[\"而服务器响应时\",{\"1\":{\"1612\":1}}],[\"而服务端内部根据原始的值和签名密钥重新计算出来的签名信息是针对老的原始值计算得到的\",{\"1\":{\"350\":1}}],[\"而后面三个参数则是使用的是上一句代码所得到的\",{\"1\":{\"2059\":1}}],[\"而后面的方法是清除前面的设定\",{\"1\":{\"1088\":1}}],[\"而后面的方法则是清除前面的设定\",{\"1\":{\"1088\":1}}],[\"而后续的请求仅需要从缓存中读取即可\",{\"1\":{\"1533\":1}}],[\"而attrs和slots在\",{\"1\":{\"1493\":1}}],[\"而封装过渡的话一般需要用到所有\",{\"1\":{\"1441\":1}}],[\"而子组件的样式优先进行了加载\",{\"1\":{\"1433\":1}}],[\"而判断是否相同的第一步就是对比两者的key是否相同\",{\"1\":{\"1394\":1}}],[\"而无法设置它\",{\"1\":{\"1836\":1}}],[\"而无法通过\",{\"1\":{\"1319\":1}}],[\"而无需针对每种语法转换设置具体的插件\",{\"1\":{\"148\":1}}],[\"而无需配置额外\",{\"1\":{\"142\":1}}],[\"而仅仅是将这些成员当作自己的成员对外暴露出去\",{\"1\":{\"1309\":1}}],[\"而文件扩展名依旧使用的是\",{\"1\":{\"1250\":1}}],[\"而设计的\",{\"1\":{\"1247\":1}}],[\"而设置下和右外边距会移动其他元素\",{\"1\":{\"546\":1}}],[\"而一个列表中包含的元素有很多的情况特别适用\",{\"1\":{\"1241\":1}}],[\"而一个函数的输出\",{\"1\":{\"1033\":1}}],[\"而产生了一个新的\",{\"1\":{\"1232\":1}}],[\"而产品中又大量存在的这样的需求\",{\"1\":{\"343\":1}}],[\"而特殊属性的值只有\",{\"1\":{\"1205\":1}}],[\"而$mount方法是在跨平台的代码中挂载到vue原型上的\",{\"1\":{\"1818\":1}}],[\"而$\",{\"1\":{\"1200\":1}}],[\"而我们在做游戏时\",{\"1\":{\"1154\":1}}],[\"而事件对象的target属性指代的是触发事件的元素\",{\"1\":{\"1152\":1}}],[\"而最具体的节点应该最后接收到事件\",{\"1\":{\"1140\":1}}],[\"而最大值为1\",{\"1\":{\"794\":1}}],[\"而使用计算属性包装后\",{\"1\":{\"2035\":1}}],[\"而使用的是整个对象\",{\"1\":{\"1842\":1}}],[\"而使用v\",{\"1\":{\"1390\":1}}],[\"而使用新的queryselectorall\",{\"1\":{\"1112\":1}}],[\"而使用列表传值的函数\",{\"1\":{\"402\":1}}],[\"而有的返回的是\",{\"1\":{\"1112\":1}}],[\"而有些编程语言\",{\"1\":{\"865\":1}}],[\"而必须要等我把当前页面切回到人人网才会知道有消息推送过来了\",{\"1\":{\"1104\":1}}],[\"而变为执行这段\",{\"1\":{\"1080\":1}}],[\"而跟\",{\"1\":{\"1034\":1}}],[\"而造成大的性能问题\",{\"1\":{\"1034\":1}}],[\"而闭包中由于内部函数的原因\",{\"1\":{\"1028\":1}}],[\"而作用域链\",{\"1\":{\"1023\":1}}],[\"而只是在当前对象中进行操作\",{\"1\":{\"1009\":1}}],[\"而只负责判断在某个位置左\",{\"1\":{\"915\":1}}],[\"而引用赋值是指将一个复杂值的引用赋值给变量\",{\"1\":{\"985\":1}}],[\"而复杂值采用引用比较\",{\"1\":{\"983\":1}}],[\"而在getter方法中会将watcher实例添加到该数据的依赖列表中\",{\"1\":{\"1806\":1}}],[\"而在选项的判断中\",{\"1\":{\"1686\":1}}],[\"而在古老的年代\",{\"1\":{\"1543\":1}}],[\"而在子组件对象中的内容\",{\"1\":{\"1493\":1}}],[\"而在我们自定义的组件中一般要使用此关键字\",{\"1\":{\"1433\":1}}],[\"而在\",{\"1\":{\"1151\":1,\"1923\":1,\"1954\":1,\"2016\":1,\"2034\":1}}],[\"而在此之后再被加上标记的变量将被视为准备删除的变量\",{\"1\":{\"1029\":1}}],[\"而在这个过程中会为局部变量在栈或堆上分配相应的空间\",{\"1\":{\"1028\":1}}],[\"而在严格模式中\",{\"1\":{\"958\":1}}],[\"而在设置全局标志的情况下\",{\"1\":{\"925\":1}}],[\"而正序环视又分为肯定正序环视和否定正序环视\",{\"1\":{\"918\":1}}],[\"而括号\",{\"1\":{\"914\":1}}],[\"而第二个参数为替换的内容\",{\"1\":{\"911\":1}}],[\"而exec\",{\"1\":{\"911\":1}}],[\"而这里标注的是\",{\"1\":{\"2058\":1}}],[\"而这一点\",{\"1\":{\"1921\":1}}],[\"而这些不同的内容在解析起来肯定需要不同的解析规则\",{\"1\":{\"1791\":1}}],[\"而这个\",{\"1\":{\"1219\":1,\"1864\":1,\"2043\":1}}],[\"而这个匿名函数又引用了\",{\"1\":{\"1023\":1}}],[\"而这个元素可以是一个字符\",{\"1\":{\"910\":1}}],[\"而这就是\",{\"1\":{\"859\":1}}],[\"而除了简单字符以外\",{\"1\":{\"902\":1}}],[\"而lastindexof是从后往前找\",{\"1\":{\"890\":1}}],[\"而let所声明的变量无论是简单数据类型还是复杂数据类型\",{\"1\":{\"779\":1}}],[\"而大多数实例方法在使用的时候都是非常相似的\",{\"1\":{\"877\":1}}],[\"而原本的数组不会变化\",{\"1\":{\"854\":1}}],[\"而数组是使用数字来作为索引操作元素\",{\"1\":{\"838\":1}}],[\"而如果写为ab\",{\"1\":{\"910\":1}}],[\"而如果删除的是方法\",{\"1\":{\"829\":1}}],[\"而如果一个键映射的是一个函数的值\",{\"1\":{\"826\":1}}],[\"而属性对应的数据称之为值\",{\"1\":{\"827\":1}}],[\"而值可以是任意数据类型\",{\"1\":{\"826\":1}}],[\"而其内部实现使用了\",{\"1\":{\"1906\":1}}],[\"而其他线程只需要在合适的时候将任务加入到队列末尾即可\",{\"1\":{\"1560\":1}}],[\"而其他浏览器该方法的返回值为\",{\"1\":{\"1161\":1}}],[\"而其他浏览器中\",{\"1\":{\"1161\":1}}],[\"而其他浏览器始终返回空字符串\",{\"1\":{\"1161\":1}}],[\"而其\",{\"1\":{\"773\":1}}],[\"而释放对应英语单词\",{\"1\":{\"762\":1}}],[\"而每次这个方法调用之后\",{\"1\":{\"711\":1}}],[\"而自定义的属性不会\",{\"1\":{\"680\":1}}],[\"而到了\",{\"1\":{\"650\":1}}],[\"而动画可以自动触发动态效果\",{\"1\":{\"642\":1}}],[\"而默认情况下网页不支持透视\",{\"1\":{\"616\":1}}],[\"而下面的属性属于\",{\"1\":{\"590\":1}}],[\"而主内容区分为两种情况\",{\"1\":{\"580\":1}}],[\"而多线程更适用与批处理任务等功能\",{\"1\":{\"408\":1}}],[\"而实例变量属于动态数据\",{\"1\":{\"405\":1}}],[\"而之前x=23所指向的内存地址依然存在\",{\"1\":{\"382\":1}}],[\"而当存在两个选项的数字尾数相同时\",{\"1\":{\"1711\":1}}],[\"而当其为函数调用的形式时\",{\"1\":{\"1368\":1}}],[\"而当变量离开环境时\",{\"1\":{\"1029\":1}}],[\"而当调用结束后\",{\"1\":{\"1028\":1}}],[\"而当实例变量与类变量同名\",{\"1\":{\"405\":1}}],[\"而当赋值之后\",{\"1\":{\"382\":1}}],[\"而当该模块自己独立运行时\",{\"1\":{\"377\":1}}],[\"而session是保存在服务端\",{\"1\":{\"352\":1}}],[\"而session保存在\",{\"1\":{\"352\":1}}],[\"而并非是文件的所在目录\",{\"1\":{\"261\":1}}],[\"而言的\",{\"1\":{\"223\":1}}],[\"而是替换\",{\"1\":{\"2050\":1}}],[\"而是会被转为\",{\"1\":{\"2072\":1}}],[\"而是会被\",{\"1\":{\"1954\":1}}],[\"而是会执行更新\",{\"1\":{\"1954\":1}}],[\"而是变成了频繁prop\",{\"1\":{\"1938\":1}}],[\"而是希望它在需要的时候才执行\",{\"1\":{\"1894\":1}}],[\"而是被用作其他组件的模板或占位符\",{\"1\":{\"1800\":1}}],[\"而是存在于node\",{\"1\":{\"1795\":1}}],[\"而是将每个值变为了一个\",{\"1\":{\"2047\":1}}],[\"而是将\",{\"1\":{\"1722\":1}}],[\"而是将其视为普通链接并进行页面跳转\",{\"1\":{\"496\":1}}],[\"而是说公考中的所有段落都摘自相应的日报或发言文件中\",{\"1\":{\"1685\":1}}],[\"而是使用全局的均值和方差\",{\"1\":{\"1665\":1}}],[\"而是抱着一丝希望\",{\"1\":{\"1537\":1}}],[\"而是生新的对象来替换\",{\"1\":{\"1504\":1}}],[\"而是\",{\"1\":{\"1486\":1}}],[\"而是用于运行时的导入\",{\"1\":{\"1315\":1}}],[\"而是原封不动地输出这条语句\",{\"1\":{\"1315\":1}}],[\"而是额外声明\",{\"1\":{\"1299\":1}}],[\"而是直接暴露到全局\",{\"1\":{\"1319\":1}}],[\"而是直接调用\",{\"1\":{\"1282\":1}}],[\"而是直接使用\",{\"1\":{\"669\":1}}],[\"而是操作完成后返回一个新的\",{\"1\":{\"1281\":1}}],[\"而是统一绑定在父元素身上\",{\"1\":{\"1241\":1}}],[\"而是字符串进行累加\",{\"1\":{\"1239\":1}}],[\"而是它的子元素\",{\"1\":{\"1232\":1}}],[\"而是获取筛选过后的\",{\"1\":{\"1232\":1}}],[\"而是获得原字符串\",{\"1\":{\"384\":1}}],[\"而是先执行了\",{\"1\":{\"1224\":1}}],[\"而是追加\",{\"1\":{\"1208\":1}}],[\"而是想用原生\",{\"1\":{\"1198\":1}}],[\"而是想复制某个节点\",{\"1\":{\"1123\":1}}],[\"而是点击的\",{\"1\":{\"1158\":1}}],[\"而是纸上的所有圆\",{\"1\":{\"1138\":1}}],[\"而是取得父类原型的一个副本\",{\"1\":{\"1072\":1}}],[\"而是继续返回另外一个函数\",{\"1\":{\"1039\":1}}],[\"而是分别代表年\",{\"1\":{\"875\":1}}],[\"而是各种类型的值\",{\"1\":{\"867\":1}}],[\"而是全局表里的键\",{\"1\":{\"828\":1}}],[\"而是一种现象\",{\"1\":{\"1023\":1}}],[\"而是一个全局变量\",{\"1\":{\"786\":1}}],[\"而是一整个页面\",{\"1\":{\"219\":1}}],[\"而是把字符串全部显示\",{\"1\":{\"386\":1}}],[\"而是改变数据的时候会不会改变变量的引用地址\",{\"1\":{\"381\":1}}],[\"而是具名导出的特殊语法\",{\"1\":{\"49\":1}}],[\"而抓取工具并不会等待异步完成\",{\"1\":{\"219\":1}}],[\"而今天的\",{\"1\":{\"146\":1}}],[\"而不仅仅是对整个对象进行依赖追踪\",{\"1\":{\"2035\":1}}],[\"而不仅仅像以前一样只能进行浏览\",{\"1\":{\"1135\":1}}],[\"而不关心值的变化\",{\"1\":{\"1932\":1}}],[\"而不会异步延迟执行\",{\"1\":{\"1784\":1}}],[\"而不必给每个可单击的元素分别添加事件处理程序\",{\"1\":{\"1158\":1}}],[\"而不捕获任何文本\",{\"1\":{\"913\":1}}],[\"而不需要包含在中括号里面\",{\"1\":{\"830\":1}}],[\"而不是整个对象\",{\"1\":{\"2035\":1}}],[\"而不是添加到\",{\"1\":{\"1954\":1}}],[\"而不是键值对\",{\"1\":{\"1932\":1}}],[\"而不是用来指定被代理对象的内部方法和行为的\",{\"1\":{\"1903\":1}}],[\"而不是所有子组件\",{\"1\":{\"1821\":1}}],[\"而不是最大值本身\",{\"1\":{\"1663\":1}}],[\"而不是最近的\",{\"1\":{\"824\":1}}],[\"而不是全局最优\",{\"1\":{\"1658\":1}}],[\"而不是移动到目标容器中\",{\"1\":{\"1515\":1}}],[\"而不是去编译后替换掉它\",{\"1\":{\"1316\":1}}],[\"而不是引入成员到当前文件使用\",{\"1\":{\"1309\":1}}],[\"而不是自己编译\",{\"1\":{\"1308\":1}}],[\"而不是反斜线\",{\"1\":{\"1308\":1}}],[\"而不是修改原始列表\",{\"1\":{\"1272\":1}}],[\"而不是默认值\",{\"1\":{\"1129\":1}}],[\"而不是实际的值\",{\"1\":{\"982\":1}}],[\"而不是一段\",{\"1\":{\"1282\":1}}],[\"而不是一次性全部执行\",{\"1\":{\"1038\":1}}],[\"而不是一个特定的已知值\",{\"1\":{\"981\":1}}],[\"而不是一整个段落或者一组内容\",{\"1\":{\"662\":1}}],[\"而不是字符\",{\"1\":{\"916\":1}}],[\"而不是字符串\",{\"1\":{\"916\":1}}],[\"而不是毫秒数\",{\"1\":{\"876\":1}}],[\"而不是本地时间\",{\"1\":{\"875\":1}}],[\"而不是返回一个副本\",{\"1\":{\"855\":1}}],[\"而不是\",{\"1\":{\"798\":1,\"1264\":1}}],[\"而不是真实的物理像素\",{\"1\":{\"649\":1}}],[\"而不是加密\",{\"1\":{\"350\":1}}],[\"而不是编译之后的代码\",{\"1\":{\"124\":1}}],[\"而不是转换后代码的错误\",{\"1\":{\"124\":1}}],[\"而不用担心运行时态遇到的问题了\",{\"1\":{\"118\":1}}],[\"而把工程化过程中的问题全部交给\",{\"1\":{\"122\":1}}],[\"而\",{\"1\":{\"72\":2,\"216\":2,\"224\":2,\"240\":1,\"296\":1,\"350\":1,\"362\":3,\"397\":1,\"398\":1,\"402\":1,\"646\":1,\"768\":1,\"796\":1,\"806\":1,\"820\":1,\"832\":1,\"867\":1,\"918\":1,\"980\":1,\"996\":1,\"1087\":1,\"1105\":1,\"1124\":2,\"1138\":1,\"1149\":1,\"1161\":2,\"1187\":1,\"1204\":1,\"1219\":1,\"1247\":2,\"1255\":1,\"1313\":1,\"1318\":1,\"1354\":1,\"1498\":1,\"1640\":1,\"1836\":1,\"1890\":1,\"1906\":1,\"1927\":1,\"2002\":1,\"2019\":1,\"2034\":2}}],[\"而网络传输的效率远远低于\",{\"1\":{\"37\":1}}],[\"而模块化开发是所有后端程序必不可少的内容\",{\"1\":{\"24\":1}}],[\"而执行\",{\"1\":{\"24\":1}}],[\"而且内部肯定会使用\",{\"1\":{\"2065\":1}}],[\"而且reflect中的一些函数还能接收第三个参数\",{\"1\":{\"1901\":1}}],[\"而且结果是在下次使用时获取\",{\"1\":{\"1857\":1}}],[\"而且有实现成本\",{\"1\":{\"1519\":1}}],[\"而且有一个\",{\"1\":{\"1299\":1}}],[\"而且我们不推荐它用于更高级的用例\",{\"1\":{\"1307\":1}}],[\"而且容易出错\",{\"1\":{\"1249\":1}}],[\"而且这种缩进要求非常严格\",{\"1\":{\"1249\":1}}],[\"而且也不会反复的获取相同的元素对象\",{\"1\":{\"1237\":1}}],[\"而且通过筛选方法得到的都是\",{\"1\":{\"1204\":1}}],[\"而且当拖动滚动条滚动时也不会触发此事件\",{\"1\":{\"1153\":1}}],[\"而且如果按住不放的话\",{\"1\":{\"1149\":1}}],[\"而且因为\",{\"1\":{\"995\":1}}],[\"而且还有相同的指针\",{\"1\":{\"382\":1}}],[\"而且它本身存储的尺寸大小也有限\",{\"1\":{\"353\":1}}],[\"而且相对容易理解\",{\"1\":{\"291\":1}}],[\"而且首屏渲染速度很慢\",{\"1\":{\"219\":1}}],[\"而且更加强大\",{\"1\":{\"133\":1}}],[\"而且\",{\"1\":{\"24\":1}}],[\"而要减少线程\",{\"1\":{\"24\":1}}],[\"有防篡改的特点\",{\"1\":{\"2091\":1}}],[\"有这么一个漫画描述\",{\"1\":{\"2091\":1}}],[\"有这种又省钱又省力的好事\",{\"1\":{\"24\":1}}],[\"有不相等的\",{\"1\":{\"1955\":1}}],[\"有没有超过范围\",{\"1\":{\"1925\":1,\"1993\":1}}],[\"有没有一种方式可以让我们更加快捷简便的操作节点呢\",{\"1\":{\"1124\":1}}],[\"有无交集\",{\"1\":{\"1751\":1}}],[\"有误差也不影响结果\",{\"1\":{\"1723\":1}}],[\"有困难再通读整段\",{\"1\":{\"1698\":1}}],[\"有消息了\",{\"1\":{\"1646\":2}}],[\"有新消息吗\",{\"1\":{\"1645\":5,\"1646\":2}}],[\"有非常多的工具可以发送\",{\"1\":{\"1630\":1}}],[\"有着明显的缺陷\",{\"1\":{\"1614\":1}}],[\"有兴趣的同学可参见chrome\",{\"1\":{\"1555\":1}}],[\"有许多全局\",{\"1\":{\"1518\":1}}],[\"有许多字符串函数\",{\"1\":{\"1265\":1}}],[\"有点像\",{\"1\":{\"1498\":1}}],[\"有人修改了age属性\",{\"1\":{\"1364\":1}}],[\"有人读取age属性了\",{\"1\":{\"1364\":1}}],[\"有助于保持样式表的清晰和可读性\",{\"1\":{\"1302\":1}}],[\"有助于更细致深入地理解\",{\"1\":{\"956\":1}}],[\"有什么优势\",{\"1\":{\"1649\":1}}],[\"有什么特点\",{\"1\":{\"1195\":1}}],[\"有什么不同\",{\"1\":{\"216\":1}}],[\"有test\",{\"1\":{\"1069\":1}}],[\"有的同学可能会问\",{\"1\":{\"1149\":1}}],[\"有的返回的是\",{\"1\":{\"1112\":1}}],[\"有的时候\",{\"1\":{\"1040\":1}}],[\"有的翻译成字符类或字符集\",{\"1\":{\"903\":1}}],[\"有块级作用域的概念\",{\"1\":{\"988\":1}}],[\"有全局作用域\",{\"1\":{\"987\":1}}],[\"有初始值的情况\",{\"1\":{\"946\":1}}],[\"有以下几个注意点\",{\"1\":{\"931\":1}}],[\"有介绍过这\",{\"1\":{\"830\":1}}],[\"有其优点\",{\"1\":{\"767\":1}}],[\"有清空文本的按钮\",{\"1\":{\"757\":1}}],[\"有\",{\"1\":{\"708\":1,\"911\":1,\"924\":2,\"925\":1,\"1161\":1,\"1189\":1,\"1205\":1,\"1224\":1,\"1225\":1,\"1251\":1,\"1645\":1,\"1737\":1,\"1834\":1,\"2064\":1}}],[\"有几个td就有几个单元格\",{\"1\":{\"669\":1}}],[\"有几个tr就有几行\",{\"1\":{\"669\":1}}],[\"有些服务器两个都认\",{\"1\":{\"1537\":1}}],[\"有些服务器只认if\",{\"1\":{\"1537\":1}}],[\"有些值不应被设置为响应式的\",{\"1\":{\"1506\":1}}],[\"有些时候\",{\"1\":{\"1123\":1}}],[\"有些时候我们会遇到一些困扰\",{\"1\":{\"993\":1}}],[\"有些时候我们希望在不同的代码中共享一个\",{\"1\":{\"828\":1}}],[\"有些结构并不真正匹配文本\",{\"1\":{\"915\":1}}],[\"有些浏览器会将<input\",{\"1\":{\"772\":1}}],[\"有些浏览器会在图片无法加载时显示\",{\"1\":{\"666\":1}}],[\"有些常用特性\",{\"1\":{\"680\":1}}],[\"有些开发者就想\",{\"1\":{\"25\":1}}],[\"有序\",{\"1\":{\"663\":1}}],[\"有可能父类函\",{\"1\":{\"405\":1}}],[\"有默认值的形参必须放在没有默认值的形参后面\",{\"1\":{\"402\":1}}],[\"有权利访问某用户的信息\",{\"1\":{\"362\":1}}],[\"有效分辨率\",{\"1\":{\"1098\":1}}],[\"有效的值范围是\",{\"1\":{\"742\":1}}],[\"有效的解决了浏览器模块化的问题\",{\"1\":{\"37\":1}}],[\"有效期尤为关键\",{\"1\":{\"1541\":1}}],[\"有效期\",{\"1\":{\"356\":1}}],[\"有三种\",{\"1\":{\"343\":1}}],[\"有一种情况除外\",{\"1\":{\"1840\":1}}],[\"有一种节点一旦首次渲染之后不管状态再怎么变化它都不会变了\",{\"1\":{\"1795\":1}}],[\"有一种新的方式可以访问这个属性\",{\"1\":{\"1125\":1}}],[\"有一种广为流传的说法就是\",{\"1\":{\"990\":1}}],[\"有一些是会随着\",{\"1\":{\"2046\":1}}],[\"有一些是查找的方法\",{\"1\":{\"1923\":1}}],[\"有一些面试题\",{\"1\":{\"1054\":1}}],[\"有一些内建验证器\",{\"1\":{\"193\":1}}],[\"有一个名为\",{\"1\":{\"2072\":1}}],[\"有一个名叫\",{\"1\":{\"24\":1}}],[\"有一个为false即为false\",{\"1\":{\"1795\":1}}],[\"有一个为字符串\",{\"1\":{\"975\":1}}],[\"有一个例外的情况\",{\"1\":{\"1499\":1}}],[\"有一个\",{\"1\":{\"1100\":1}}],[\"有一个函数f\",{\"1\":{\"1039\":1}}],[\"有一个局部的\",{\"1\":{\"993\":1}}],[\"有一个概念必须要了解\",{\"1\":{\"874\":1}}],[\"有一个概念我们必须要弄清楚\",{\"1\":{\"763\":1}}],[\"有一个中间层去鉴权\",{\"1\":{\"507\":1}}],[\"有关媒体当前已下载总计的信息可以在元素的\",{\"1\":{\"752\":1}}],[\"有关\",{\"1\":{\"159\":1,\"552\":1,\"1721\":1,\"2047\":1,\"2067\":1,\"2069\":1}}],[\"有两种原生事件\",{\"1\":{\"1368\":1}}],[\"有两种数据格式\",{\"1\":{\"1161\":1}}],[\"有两种调用方法\",{\"1\":{\"957\":1}}],[\"有两种方式\",{\"1\":{\"157\":1,\"1153\":1}}],[\"有两个关键性的问题\",{\"1\":{\"1783\":1}}],[\"有两个特点\",{\"1\":{\"795\":1}}],[\"有两个目标\",{\"1\":{\"138\":1}}],[\"有多种预设\",{\"1\":{\"148\":1}}],[\"有自动向上级目录查找的特性\",{\"1\":{\"77\":1}}],[\"有下面这几种方式\",{\"1\":{\"67\":1}}],[\"有时脚本需要获取浏览器或者显示器的一些信息\",{\"1\":{\"1098\":1}}],[\"有时会省略前面的\",{\"1\":{\"1093\":1,\"2051\":1}}],[\"有时会简称为\",{\"1\":{\"66\":1}}],[\"有时我们会根据需求手动的来制造一个闭包\",{\"1\":{\"1023\":1}}],[\"有时我们不想进行转义\",{\"1\":{\"384\":1}}],[\"有时为了方便搜索引擎的检索\",{\"1\":{\"580\":1}}],[\"有时候做\",{\"1\":{\"220\":1}}],[\"有时候会被墙\",{\"1\":{\"67\":1}}],[\"有时就需要安装指定版本的包\",{\"1\":{\"75\":1}}],[\"有依赖模块\",{\"1\":{\"41\":1}}],[\"有了实现\",{\"1\":{\"1929\":1}}],[\"有了进程后\",{\"1\":{\"1554\":1}}],[\"有了这些位置信息我们就可以构建位置感知类的应用程序\",{\"1\":{\"1099\":1}}],[\"有了这个运算符以后\",{\"1\":{\"849\":1}}],[\"有了cookie\",{\"1\":{\"354\":1}}],[\"有了\",{\"1\":{\"24\":1,\"138\":1,\"220\":1,\"347\":1,\"1208\":1,\"1232\":1}}],[\"他的作用其实就是一个占位符\",{\"1\":{\"1834\":1}}],[\"他是所有组件的父组件\",{\"1\":{\"1427\":1}}],[\"他可以\",{\"1\":{\"1299\":1}}],[\"他并没有产生任何代码块\",{\"1\":{\"1298\":1}}],[\"他会调用对象内部自己的\",{\"1\":{\"1903\":1}}],[\"他会返回一个对象\",{\"1\":{\"1088\":1}}],[\"他会吸收剩余的空间\",{\"1\":{\"554\":1}}],[\"他们可以使用对称加密算法\",{\"1\":{\"2099\":1}}],[\"他们的更新原理是父组件驱动子组件更新\",{\"1\":{\"1841\":1}}],[\"他们的核心库及常用的方法没有什么太大的区别\",{\"1\":{\"1196\":1}}],[\"他们都认为单击事件不仅仅发生在按钮上\",{\"1\":{\"1138\":1}}],[\"他们都是可替换元素\",{\"1\":{\"671\":1}}],[\"他们进行渲染时互不干扰\",{\"1\":{\"564\":1}}],[\"他突然发现\",{\"1\":{\"24\":1}}],[\"他打算自己实用\",{\"1\":{\"24\":1}}],[\"谷歌搜索框\",{\"1\":{\"1036\":1}}],[\"谷歌一定会不断的优化\",{\"1\":{\"24\":1}}],[\"谷歌\",{\"1\":{\"24\":1}}],[\"谷歌的\",{\"1\":{\"24\":1}}],[\"服务之间的信息共享与交换\",{\"1\":{\"895\":1}}],[\"服务间可以\",{\"1\":{\"361\":1}}],[\"服务中的一个路由规则\",{\"1\":{\"335\":1}}],[\"服务可以设置响应头\",{\"1\":{\"294\":1}}],[\"服务在哪个文件夹中寻找静态资源\",{\"1\":{\"289\":1}}],[\"服务启动中\",{\"1\":{\"285\":1}}],[\"服务开发常用端口有\",{\"1\":{\"275\":1}}],[\"服务已经启动\",{\"1\":{\"273\":1,\"282\":1,\"283\":1,\"284\":2,\"301\":1,\"304\":1,\"349\":1,\"355\":1,\"1573\":1}}],[\"服务框架\",{\"1\":{\"223\":3}}],[\"服务里\",{\"1\":{\"218\":1}}],[\"服务于前端的后端\",{\"1\":{\"218\":1}}],[\"服务领域\",{\"1\":{\"217\":1}}],[\"服务下可以有\",{\"1\":{\"176\":1}}],[\"服务端使用settimeout模拟耗时较长的操作\",{\"1\":{\"1580\":1}}],[\"服务端响应\",{\"0\":{\"1578\":1}}],[\"服务端返回了所有的结果\",{\"1\":{\"1576\":1}}],[\"服务端的基本流程\",{\"0\":{\"1575\":1}}],[\"服务端只需要使用密钥解密进行校验\",{\"1\":{\"369\":1}}],[\"服务端验证客户端发送过来的\",{\"1\":{\"369\":1}}],[\"服务端压力更小\",{\"1\":{\"361\":1}}],[\"服务端不用存放\",{\"1\":{\"360\":1}}],[\"服务端无状态\",{\"1\":{\"360\":1}}],[\"服务端会签发一个\",{\"1\":{\"360\":1}}],[\"服务端收到请求\",{\"1\":{\"360\":2}}],[\"服务端在解析这个cookie时会重新计算一遍签名信息\",{\"1\":{\"350\":1}}],[\"服务端渲染的概念\",{\"1\":{\"219\":1}}],[\"服务端渲染\",{\"0\":{\"219\":1},\"1\":{\"219\":3,\"507\":1}}],[\"服务端\",{\"0\":{\"99\":1},\"1\":{\"266\":1,\"356\":1,\"1576\":1,\"1577\":1,\"1578\":1},\"2\":{\"100\":1}}],[\"服务上\",{\"1\":{\"91\":1}}],[\"服务部署在国内\",{\"1\":{\"80\":1}}],[\"服务项目\",{\"1\":{\"24\":1}}],[\"服务的语言吗\",{\"1\":{\"24\":1}}],[\"服务产品都满足不了需求\",{\"1\":{\"24\":1}}],[\"服务\",{\"0\":{\"272\":1},\"1\":{\"24\":1,\"177\":1,\"212\":1,\"217\":1,\"218\":1,\"272\":1,\"273\":1,\"285\":1,\"287\":1,\"298\":1,\"340\":1,\"1102\":1}}],[\"服务器使用私钥解密被加密的会话密钥并保存起来\",{\"1\":{\"2091\":2}}],[\"服务器使用的端口号\",{\"1\":{\"1093\":1}}],[\"服务器响应公钥和服务器证书\",{\"1\":{\"2091\":2}}],[\"服务器响应一个\",{\"1\":{\"1530\":1}}],[\"服务器端验证\",{\"1\":{\"2088\":1}}],[\"服务器端就会发送\",{\"1\":{\"767\":1}}],[\"服务器都返回一份相同的\",{\"1\":{\"2050\":1}}],[\"服务器是被动的\",{\"1\":{\"1649\":1}}],[\"服务器收到请求后\",{\"1\":{\"1649\":1}}],[\"服务器收到的请求头中的host为\",{\"1\":{\"1445\":2}}],[\"服务器如果同意\",{\"1\":{\"1648\":1}}],[\"服务器不得不挂起这个请求直到新消息的出现\",{\"1\":{\"1646\":1}}],[\"服务器不得设置\",{\"1\":{\"1612\":1}}],[\"服务器内部错误\",{\"1\":{\"1635\":1}}],[\"服务器拒绝执行\",{\"1\":{\"1635\":1}}],[\"服务器允许这样的凭据\",{\"1\":{\"1612\":1}}],[\"服务器明确拒绝或没有表示\",{\"1\":{\"1605\":1}}],[\"服务器无法知道客户端到底有没有像浏览器那样缓存文件\",{\"1\":{\"1544\":1}}],[\"服务器视角\",{\"0\":{\"1544\":1}}],[\"服务器就不会传输消息体\",{\"1\":{\"1537\":1}}],[\"服务器再次给予一个正常的响应\",{\"1\":{\"1537\":1}}],[\"服务器在响应头中加入了以下内容\",{\"1\":{\"1534\":1}}],[\"服务器可以在任何需要的时候\",{\"1\":{\"1649\":1}}],[\"服务器可以将该请求挂起\",{\"1\":{\"1649\":2}}],[\"服务器可以通过这个标识来识别这个请求来自哪个客户端\",{\"1\":{\"269\":1}}],[\"服务器可能会产生两个情况\",{\"1\":{\"1537\":1}}],[\"服务器可能有以下的内心活动\",{\"1\":{\"1534\":1}}],[\"服务器缓存\",{\"1\":{\"1533\":1}}],[\"服务器处理请求\",{\"1\":{\"1530\":1}}],[\"服务器返回的消息\",{\"1\":{\"1228\":1,\"1229\":1}}],[\"服务器返回的不是接口数据\",{\"1\":{\"219\":1}}],[\"服务器返回消息时调用\",{\"1\":{\"1227\":1}}],[\"服务器的名字\",{\"1\":{\"1093\":1,\"2051\":1}}],[\"服务器才能获取表单\",{\"1\":{\"754\":1}}],[\"服务器也想要最小化访问流量\",{\"1\":{\"748\":1}}],[\"服务器中字体的路径\",{\"1\":{\"621\":1}}],[\"服务器通过\",{\"1\":{\"354\":1}}],[\"服务器拿到key后在映射表中查找来确定用户的登录状态\",{\"1\":{\"353\":1}}],[\"服务器把客户端信息以某种形式记录在服务器上\",{\"1\":{\"352\":1}}],[\"服务器上\",{\"1\":{\"352\":1}}],[\"服务器会给该用户使用的浏览器颁发一个令牌\",{\"1\":{\"343\":1}}],[\"服务器已启动~~~~\",{\"1\":{\"329\":1}}],[\"服务器已经启动\",{\"1\":{\"287\":2}}],[\"服务器\",{\"1\":{\"12\":1,\"266\":1,\"373\":2,\"1645\":9,\"1646\":6}}],[\"全部为表达式\",{\"1\":{\"1794\":1}}],[\"全部状态的方法\",{\"1\":{\"711\":1}}],[\"全国城市供水总量约为\",{\"1\":{\"1723\":1}}],[\"全国城市供水总量\",{\"1\":{\"1723\":1}}],[\"全双工通信的能力\",{\"1\":{\"1647\":1}}],[\"全名\",{\"1\":{\"1407\":1}}],[\"全等\",{\"1\":{\"816\":1,\"856\":1}}],[\"全等是===\",{\"1\":{\"814\":1}}],[\"全等和不全等\",{\"0\":{\"814\":1}}],[\"全都放到\",{\"1\":{\"669\":1}}],[\"全称为\",{\"1\":{\"242\":1}}],[\"全称\",{\"1\":{\"61\":1,\"2091\":1}}],[\"全局组件\",{\"0\":{\"2030\":1}}],[\"全局化方法有两种写法\",{\"1\":{\"2016\":1}}],[\"全局api的代码\",{\"1\":{\"1782\":1}}],[\"全局后置守卫\",{\"1\":{\"1467\":1}}],[\"全局前置守卫\",{\"1\":{\"1467\":1,\"2029\":1}}],[\"全局守卫\",{\"1\":{\"1467\":2,\"2071\":1}}],[\"全局事件总线\",{\"0\":{\"1438\":1}}],[\"全局混入使用全局\",{\"1\":{\"1431\":1}}],[\"全局混入\",{\"1\":{\"1431\":1}}],[\"全局注册一个混入\",{\"1\":{\"1826\":1}}],[\"全局注册\",{\"1\":{\"1416\":2,\"1423\":1}}],[\"全局指令\",{\"1\":{\"1406\":1}}],[\"全局过滤器\",{\"1\":{\"1397\":1}}],[\"全局对象不再是window\",{\"1\":{\"1182\":1}}],[\"全局属性和\",{\"1\":{\"1086\":1}}],[\"全局代码\",{\"1\":{\"1013\":1}}],[\"全局执行上下文的属性和方法\",{\"1\":{\"1012\":1}}],[\"全局环境\",{\"1\":{\"1013\":1}}],[\"全局环境运行函数\",{\"1\":{\"995\":1}}],[\"全局环境中的\",{\"0\":{\"991\":1}}],[\"全局匹配模式\",{\"1\":{\"901\":1}}],[\"全局作用域用\",{\"1\":{\"987\":1}}],[\"全局作用域是指声明的变量可在当前环境的任何地方使用\",{\"1\":{\"948\":1}}],[\"全局作用域和函数作用域\",{\"1\":{\"948\":1,\"958\":1}}],[\"全局作用域中的变量都是全局变量\",{\"1\":{\"937\":1}}],[\"全局作用域在页面打开时创建\",{\"1\":{\"937\":1}}],[\"全局作用域\",{\"0\":{\"785\":1,\"937\":1},\"1\":{\"936\":1,\"1018\":1}}],[\"全局透明度的设置\",{\"0\":{\"742\":1}}],[\"全局函数是\",{\"1\":{\"1086\":1}}],[\"全局函数\",{\"1\":{\"472\":1}}],[\"全局函数模式\",{\"1\":{\"27\":1}}],[\"全局中间件\",{\"1\":{\"311\":1}}],[\"全局变量的生命周期直至浏览器卸载页面才会结束\",{\"1\":{\"1028\":1}}],[\"全局变量的特点在于变量在任何地方都能被访问\",{\"1\":{\"785\":1}}],[\"全局变量和局部变量\",{\"0\":{\"1261\":1},\"1\":{\"1000\":1}}],[\"全局变量\",{\"1\":{\"264\":1,\"1954\":1}}],[\"全局变量污染和依赖混乱\",{\"1\":{\"24\":2}}],[\"全局删除包\",{\"1\":{\"87\":1}}],[\"全局删除\",{\"1\":{\"76\":1}}],[\"全局安装包的位置可以通过\",{\"1\":{\"87\":1}}],[\"全局安装的包能够正常运行\",{\"1\":{\"87\":1}}],[\"全局安装的包不可用\",{\"1\":{\"87\":1}}],[\"全局安装的命令不受工作目录位置影响\",{\"1\":{\"73\":1}}],[\"全局安装完成之后就可以在命令行的任何位置运行\",{\"1\":{\"73\":1}}],[\"全局安装\",{\"0\":{\"73\":1},\"1\":{\"87\":1,\"123\":1,\"340\":1,\"1426\":1}}],[\"全局\",{\"0\":{\"27\":1,\"1518\":1,\"1823\":1},\"1\":{\"262\":1,\"1518\":1}}],[\"全世界的前端开发者在社区中激烈的讨论\",{\"1\":{\"24\":1}}],[\"即父级路由记录\",{\"1\":{\"2065\":1}}],[\"即执行守卫队列中的下一个守卫函数\",{\"1\":{\"2029\":1}}],[\"即在使用\",{\"1\":{\"2031\":1}}],[\"即在进行路由导航时\",{\"1\":{\"2029\":2}}],[\"即在代码字符串的后面追加\",{\"1\":{\"1979\":1}}],[\"即$el\",{\"1\":{\"2002\":1}}],[\"即createapp\",{\"1\":{\"1997\":1}}],[\"即让\",{\"1\":{\"1979\":2}}],[\"即没有缩进\",{\"1\":{\"1979\":1}}],[\"即进入阶段和退出阶段\",{\"1\":{\"1977\":1}}],[\"即找出更新前后顺序没有发生变化的节点\",{\"1\":{\"1969\":1}}],[\"即两者中较短的那一组子节点的长度\",{\"1\":{\"1961\":1}}],[\"即两者皆具有如下特点\",{\"1\":{\"541\":1}}],[\"即子树\",{\"1\":{\"1954\":1}}],[\"即子结点的键值或索引总是小于\",{\"1\":{\"416\":1}}],[\"即后续渲染中的旧\",{\"1\":{\"1944\":1}}],[\"即实现keys方法的代理\",{\"1\":{\"1932\":1}}],[\"即symbol\",{\"1\":{\"1931\":1}}],[\"即原始数据也具备响应式\",{\"1\":{\"1929\":1}}],[\"即允许追踪\",{\"1\":{\"1925\":2}}],[\"即会读取数组的\",{\"1\":{\"1925\":1,\"1993\":1}}],[\"即新值\",{\"1\":{\"1918\":1}}],[\"即触发响应的新值\",{\"1\":{\"1918\":1,\"1993\":1}}],[\"即非只读\",{\"1\":{\"1914\":1,\"1992\":1}}],[\"即非浅响应\",{\"1\":{\"1913\":1,\"1991\":1}}],[\"即非数值\",{\"1\":{\"795\":1}}],[\"即浅响应\",{\"1\":{\"1912\":1}}],[\"即浅拷贝是拷贝一层\",{\"1\":{\"469\":1}}],[\"即指定接收者\",{\"1\":{\"1901\":1}}],[\"即它会直接或间接地影响其他函数的执行\",{\"1\":{\"1885\":1}}],[\"即它的高度取决于子元素的高度\",{\"1\":{\"543\":1}}],[\"即上述渲染器的部分\",{\"1\":{\"1879\":1}}],[\"即上面所说的理想视口\",{\"1\":{\"649\":1}}],[\"即所谓的\",{\"1\":{\"1877\":1}}],[\"即用户自定义的配置对象\",{\"1\":{\"1836\":1}}],[\"即作为vue\",{\"1\":{\"1825\":1}}],[\"即创建一个只包含文本内容的虚拟\",{\"1\":{\"1797\":1}}],[\"即创建一个虚拟\",{\"1\":{\"1797\":1}}],[\"即不能是组件\",{\"1\":{\"1795\":1}}],[\"即不写dispatch\",{\"1\":{\"1451\":1}}],[\"即标签名不能是slot和component\",{\"1\":{\"1795\":1}}],[\"即标签上不能有v\",{\"1\":{\"1795\":1}}],[\"即该文本一开始就是变量\",{\"1\":{\"1793\":1}}],[\"即打补丁\",{\"1\":{\"1789\":1}}],[\"即我们在组件中使用\",{\"1\":{\"2034\":1}}],[\"即我们常在\",{\"1\":{\"1877\":1}}],[\"即我们首先要知道数据什么时候发生变化\",{\"1\":{\"1783\":1}}],[\"即我们自定义的data\",{\"1\":{\"1354\":1}}],[\"即promise\",{\"1\":{\"1779\":1}}],[\"即平均数=总数\",{\"1\":{\"1745\":1}}],[\"即是隔级比重\",{\"1\":{\"1733\":1}}],[\"即是估小了\",{\"1\":{\"1722\":1}}],[\"即是估大了\",{\"1\":{\"1722\":1}}],[\"即现期某一时间段与上年某一时间段相比\",{\"1\":{\"1725\":1}}],[\"即变成第一类考法\",{\"1\":{\"1726\":1}}],[\"即变成\",{\"1\":{\"1722\":1}}],[\"即变量或对象属性\",{\"1\":{\"982\":1}}],[\"即响应必须在请求之后发生\",{\"1\":{\"1649\":1}}],[\"即客户端每隔一段时间就向服务器发送消息\",{\"1\":{\"1649\":2}}],[\"即对公共数据进行读\",{\"1\":{\"1449\":1}}],[\"即对原始值进行哈希签名后\",{\"1\":{\"350\":1}}],[\"即第一步生成的内容添加到vnode\",{\"1\":{\"1407\":1}}],[\"即只有在安全的\",{\"1\":{\"2088\":1}}],[\"即只需要把真实\",{\"1\":{\"1964\":1}}],[\"即只需要get函数时\",{\"1\":{\"1376\":1}}],[\"即只要有此\",{\"1\":{\"362\":1}}],[\"即把\",{\"1\":{\"1340\":1,\"1892\":1}}],[\"即await\",{\"1\":{\"1187\":1}}],[\"即要转换为字符串的表达式\",{\"1\":{\"1797\":1}}],[\"即要显示的文本内容\",{\"1\":{\"1797\":1}}],[\"即要取得的数据的格式\",{\"1\":{\"1161\":2}}],[\"即要应用模式的字符串\",{\"1\":{\"925\":1}}],[\"即事件开始时由最具体的元素\",{\"1\":{\"1139\":1}}],[\"即双斜杠\",{\"1\":{\"1093\":1,\"2051\":1}}],[\"即距离浏览器最顶端\",{\"1\":{\"1087\":1}}],[\"即设置该对象的原型对象\",{\"1\":{\"1073\":1}}],[\"即管道中的函数必须只能有一个参数\",{\"1\":{\"1040\":1}}],[\"即为乘积增长率\",{\"1\":{\"1728\":1}}],[\"即为比值增长率\",{\"1\":{\"1728\":1}}],[\"即为\",{\"1\":{\"1722\":1}}],[\"即为事件捕获\",{\"1\":{\"1140\":1}}],[\"即为原型对象\",{\"1\":{\"1008\":1}}],[\"即为import\",{\"1\":{\"155\":1}}],[\"即称为\",{\"1\":{\"1007\":1}}],[\"即函数执行时所在的的作用域\",{\"1\":{\"995\":1}}],[\"即有相同的地址\",{\"1\":{\"983\":1}}],[\"即数组的值\",{\"1\":{\"945\":1}}],[\"即长属性名和短属性名\",{\"1\":{\"924\":1}}],[\"即尽可能多的进行匹配\",{\"1\":{\"907\":1}}],[\"即常量\",{\"1\":{\"879\":1}}],[\"即直接对变量赋值而无需事先声明\",{\"1\":{\"783\":1}}],[\"即便我们存储的时候值类型不是字符串\",{\"1\":{\"769\":1}}],[\"即抓取对象以后拖到另一个位置\",{\"1\":{\"762\":1}}],[\"即当前路由匹配的路由记录\",{\"1\":{\"2065\":1}}],[\"即当前点为开始点\",{\"1\":{\"711\":1}}],[\"即当输入\",{\"1\":{\"1666\":1}}],[\"即当元素开始重叠\",{\"1\":{\"576\":1}}],[\"即当元素的内容太大而无法适应它的区块格式化上下文时\",{\"1\":{\"557\":1}}],[\"即调整元素和人眼之间的距离\",{\"1\":{\"616\":1}}],[\"即自动高度需要计算浮动元素\",{\"1\":{\"564\":1}}],[\"即与原始数据相加\",{\"1\":{\"464\":1}}],[\"即使操作类型为\",{\"1\":{\"1932\":1}}],[\"即使要通信\",{\"1\":{\"1553\":1}}],[\"即使是间接的\",{\"1\":{\"1320\":1}}],[\"即使是包含相同对象的两个变量也彼此不相等\",{\"1\":{\"983\":1}}],[\"即使用当前位置的动量项进行梯度估计\",{\"1\":{\"1659\":1}}],[\"即使用标签中的dataset属性\",{\"1\":{\"1125\":1}}],[\"即使用户并不一定会用它\",{\"1\":{\"748\":1}}],[\"即使符合条件的元素只有一个\",{\"1\":{\"1112\":1}}],[\"即使调用它们的网页不是当前的标签页\",{\"1\":{\"1105\":1}}],[\"即使对象改变\",{\"1\":{\"984\":1}}],[\"即使对象的引用被删除了也依然如此\",{\"1\":{\"865\":1}}],[\"即使在模式中设置了全局标志g\",{\"1\":{\"925\":1}}],[\"即使只查询到一个结果\",{\"1\":{\"894\":1}}],[\"即使设置全局匹配也没用\",{\"1\":{\"894\":1}}],[\"即使每一项都是数值\",{\"1\":{\"855\":1}}],[\"即使我们关闭浏览器\",{\"1\":{\"769\":1}}],[\"即使没有初始值也会调用\",{\"1\":{\"405\":1}}],[\"即使它们占用不同的内存\",{\"1\":{\"166\":1}}],[\"即抛出异常\",{\"1\":{\"403\":1}}],[\"即将张量表示的数据封装为数据集对象\",{\"1\":{\"1655\":1}}],[\"即将一个大任务分成若干个小任务\",{\"1\":{\"1038\":1}}],[\"即将数据保存在\",{\"1\":{\"768\":1}}],[\"即将zip生成的数据返回\",{\"1\":{\"401\":1}}],[\"即将\",{\"1\":{\"388\":1}}],[\"即认为有此\",{\"1\":{\"362\":1}}],[\"即等到整个页面渲染完\",{\"1\":{\"47\":1}}],[\"即可获取客户端传输的所有明文数据\",{\"1\":{\"2091\":1}}],[\"即可实现子组件value值与父组件updatevalue\",{\"1\":{\"1358\":1}}],[\"即可判断页面卡死\",{\"1\":{\"505\":1}}],[\"即可\",{\"1\":{\"37\":1,\"369\":1,\"1146\":1,\"1201\":1,\"1319\":1,\"1407\":1,\"1444\":1,\"1879\":1,\"1932\":1,\"1951\":1,\"2028\":1,\"2050\":1,\"2061\":1}}],[\"即鼎鼎大名的\",{\"1\":{\"24\":1}}],[\"即\",{\"1\":{\"24\":2,\"129\":1,\"218\":1,\"395\":1,\"408\":1,\"752\":1,\"806\":1,\"879\":1,\"1140\":1,\"1232\":1,\"1423\":1,\"1445\":1,\"1453\":2,\"1468\":1,\"1518\":1,\"1655\":2,\"1746\":1,\"1784\":2,\"1792\":1,\"1866\":1,\"1906\":1,\"1910\":1,\"1911\":1,\"1925\":1,\"1938\":1,\"1954\":1,\"1955\":1,\"1962\":1,\"1975\":1,\"1979\":1}}],[\"只做一次依赖收集\",{\"1\":{\"1849\":1}}],[\"只比较部分增量大小即可\",{\"1\":{\"1750\":1}}],[\"只关注一小部分信息的能力对进化更加有意义\",{\"1\":{\"1678\":1}}],[\"只处理基本数据类型的响应式\",{\"1\":{\"1504\":1}}],[\"只处理对象最外层属性的响应式\",{\"1\":{\"1504\":1,\"1911\":1}}],[\"只处理我们开发的源文件\",{\"1\":{\"150\":1}}],[\"只接收\",{\"1\":{\"1429\":1}}],[\"只供\",{\"0\":{\"1319\":1}}],[\"只写文件名即可\",{\"1\":{\"1315\":1}}],[\"只写两个\",{\"1\":{\"821\":1}}],[\"只转发某些成员\",{\"1\":{\"1311\":1}}],[\"只指定一个事件处理程序\",{\"1\":{\"1158\":1}}],[\"只删除第一个点击事件\",{\"1\":{\"1146\":1}}],[\"只向外暴露一个包含\",{\"1\":{\"1025\":1}}],[\"只设置了\",{\"1\":{\"980\":1}}],[\"只限定\",{\"1\":{\"910\":1}}],[\"只会执行最后一次绑定的事件处理方法\",{\"1\":{\"1214\":1}}],[\"只会找到第一个符合要求的内容\",{\"1\":{\"894\":1}}],[\"只会查找第一个\",{\"1\":{\"894\":1}}],[\"只不过判断是否激活的条件更加的严格\",{\"1\":{\"2064\":1}}],[\"只不过这里命名为了\",{\"1\":{\"2061\":1}}],[\"只不过这个时候会忽略此次声明\",{\"1\":{\"782\":1}}],[\"只不过传入的add\",{\"1\":{\"1368\":1}}],[\"只不过混入了一些特殊的\",{\"1\":{\"1350\":1}}],[\"只不过在\",{\"1\":{\"1313\":1}}],[\"只不过\",{\"1\":{\"1054\":1}}],[\"只不过垃圾收集的时间间隔互不相同\",{\"1\":{\"1029\":1}}],[\"只不过后面的形参所接收到的值会覆盖前面的同名形参\",{\"1\":{\"958\":1}}],[\"只不过会将每次的计算结果放入下一次迭代时进行使用\",{\"1\":{\"946\":1}}],[\"只不过比较麻烦\",{\"1\":{\"932\":1}}],[\"只不过里面的值为\",{\"1\":{\"865\":1}}],[\"只读和浅只读\",{\"0\":{\"1914\":1}}],[\"只读\",{\"1\":{\"750\":6,\"1098\":11,\"1129\":1}}],[\"只读属性\",{\"1\":{\"750\":1,\"1132\":1}}],[\"只留下目标超过源的部分\",{\"1\":{\"743\":1}}],[\"只留下源超过目标的部分\",{\"1\":{\"743\":1}}],[\"只留下源与目标的重叠部分\",{\"1\":{\"743\":2}}],[\"只支持\",{\"1\":{\"921\":2,\"1228\":1,\"1229\":1}}],[\"只支持顺序环视\",{\"1\":{\"921\":1}}],[\"只支持^和$\",{\"1\":{\"921\":1}}],[\"只支持单个\",{\"1\":{\"921\":1}}],[\"只支持普通字符组和排除型字符组\",{\"1\":{\"921\":1}}],[\"只支持正序环视\",{\"1\":{\"918\":1}}],[\"只支持一种原生的图形绘制\",{\"1\":{\"705\":1}}],[\"只支持存字符串数据\",{\"1\":{\"356\":1}}],[\"只认\",{\"1\":{\"684\":1}}],[\"只认识\",{\"1\":{\"156\":1}}],[\"只出现在内容区和内边距\",{\"1\":{\"632\":1}}],[\"只占自身的大小\",{\"1\":{\"540\":1}}],[\"只允许获取\",{\"1\":{\"1836\":1}}],[\"只允许粘贴数字\",{\"1\":{\"1162\":1}}],[\"只允许输入字母和数字时\",{\"1\":{\"904\":1}}],[\"只允许一次由\",{\"1\":{\"408\":1}}],[\"只允许客户端缓存数据\",{\"1\":{\"271\":1}}],[\"只有在值不存在的情况下\",{\"1\":{\"1928\":1}}],[\"只有那些\",{\"1\":{\"1918\":1}}],[\"只有真正读取\",{\"1\":{\"1896\":1}}],[\"只有非\",{\"1\":{\"1894\":1}}],[\"只有依赖属性发生变化时才会更新视图\",{\"1\":{\"1857\":1}}],[\"只有组件\",{\"1\":{\"1835\":2}}],[\"只有遍历完keys\",{\"1\":{\"1769\":1}}],[\"只有一定程度的噪声可能会使参数跳出局部最小值\",{\"1\":{\"1658\":1}}],[\"只有一个形参就不需要用括号括起来\",{\"1\":{\"942\":1}}],[\"只有一个参数\",{\"1\":{\"704\":1}}],[\"只有一个要求\",{\"1\":{\"641\":1}}],[\"只有一个被定义为元组的形参\",{\"1\":{\"402\":1}}],[\"只有对象属性的值为true时\",{\"1\":{\"1385\":1}}],[\"只有通过\",{\"1\":{\"1298\":1}}],[\"只有满足下述标准时方可创建新变量\",{\"1\":{\"1261\":1}}],[\"只有表单元素有\",{\"1\":{\"1231\":1}}],[\"只有当前组件为根组件时进入此分支\",{\"1\":{\"2026\":1}}],[\"只有当旧子节点为一组子节点时\",{\"1\":{\"1951\":1}}],[\"只有当\",{\"1\":{\"1910\":1,\"1990\":1}}],[\"只有当它们不全等\",{\"1\":{\"1909\":1}}],[\"只有当被删除的属性是对象自己的属性并且成功删除时\",{\"1\":{\"1907\":1}}],[\"只有当被其他库占用时\",{\"1\":{\"1198\":1}}],[\"只有当该副作用函数的执行没有过期时\",{\"1\":{\"1897\":1,\"1987\":1}}],[\"只有当格式相符时\",{\"1\":{\"757\":2}}],[\"只有\",{\"1\":{\"1128\":1,\"1161\":1,\"1369\":1,\"1575\":1,\"1896\":1}}],[\"只有与自身或者相互比较时\",{\"1\":{\"976\":1}}],[\"只有var声明的变量才具有这种特性\",{\"1\":{\"939\":1}}],[\"只有^\",{\"1\":{\"903\":1}}],[\"只有初始时同步一次\",{\"1\":{\"683\":1}}],[\"只有这两种免费使用\",{\"1\":{\"623\":1}}],[\"只有重载时运算符操作才会运行\",{\"1\":{\"405\":1}}],[\"只有全局类的工具才适合\",{\"1\":{\"73\":1}}],[\"只需逐个卸载即可\",{\"1\":{\"1951\":1}}],[\"只需解决自己的问题\",{\"1\":{\"1621\":1}}],[\"只需\",{\"1\":{\"1262\":1}}],[\"只需窗口调整完成后\",{\"1\":{\"1035\":1}}],[\"只需用户最后一次输入完\",{\"1\":{\"1035\":1}}],[\"只需使用反斜杠\",{\"1\":{\"790\":1}}],[\"只需要追加与\",{\"1\":{\"1979\":1}}],[\"只需要简单地挂载\",{\"1\":{\"1969\":1}}],[\"只需要完成自更新即可\",{\"1\":{\"1954\":1}}],[\"只需要更新\",{\"1\":{\"1949\":1}}],[\"只需要注意和时间有关的平均数\",{\"1\":{\"1745\":1}}],[\"只需要model\",{\"1\":{\"1669\":1}}],[\"只需要验证当前的请求方法get和当前的请求路径\",{\"1\":{\"1535\":1}}],[\"只需要在两者之间打补丁即可\",{\"1\":{\"1968\":1}}],[\"只需要在副作用函数与数组长度和索引之间建立响应式联系\",{\"1\":{\"1921\":1}}],[\"只需要在响应头中添加\",{\"1\":{\"1612\":1}}],[\"只需要在父组件中注册子组件\",{\"1\":{\"1422\":1}}],[\"只需要在想要的位置直接换行即可\",{\"1\":{\"790\":1}}],[\"只需要写一个属性名即可\",{\"1\":{\"1205\":1}}],[\"只需要将节点对象的事件处理属性赋值为\",{\"1\":{\"1146\":1}}],[\"只需要将\",{\"1\":{\"1123\":1}}],[\"只需要将返回值进行修改即可\",{\"1\":{\"855\":1}}],[\"只需要向clonenode\",{\"1\":{\"1123\":1}}],[\"只需要提供\",{\"1\":{\"854\":1}}],[\"只需要指定\",{\"1\":{\"854\":1}}],[\"只需要传递一个对象过去即可\",{\"1\":{\"833\":1}}],[\"只需要和一个空字符串相加就可以了\",{\"1\":{\"789\":1}}],[\"只需要再使用json\",{\"1\":{\"770\":1}}],[\"只需要设置键值对即可使用\",{\"1\":{\"768\":1}}],[\"只需要连接一次\",{\"1\":{\"191\":1}}],[\"只需填入字典里对应的名称即可\",{\"1\":{\"388\":1}}],[\"只在字符组开始位置表示排除\",{\"1\":{\"903\":1}}],[\"只在字符组中表示范围\",{\"1\":{\"903\":1}}],[\"只在本次程序内有效\",{\"1\":{\"379\":1}}],[\"只在制作阶段使用\",{\"1\":{\"72\":1}}],[\"只提供一种简单的认证\",{\"1\":{\"362\":1}}],[\"只填写了\",{\"1\":{\"282\":1}}],[\"只能使用子组件通过\",{\"1\":{\"2002\":1}}],[\"只能捕获同步的错误\",{\"1\":{\"1777\":1}}],[\"只能拿到一些最基本的响应头\",{\"1\":{\"1613\":1}}],[\"只能传递\",{\"1\":{\"1252\":1}}],[\"只能发生\",{\"1\":{\"1160\":1}}],[\"只能在编译打包阶段运行\",{\"1\":{\"1313\":1}}],[\"只能在主线程更新界面\",{\"1\":{\"1174\":1}}],[\"只能在事件函数内部访问的对象\",{\"1\":{\"1151\":1}}],[\"只能在本机使用的域名\",{\"1\":{\"371\":1}}],[\"只能算作是元素节点的一个附属节点\",{\"1\":{\"1113\":1}}],[\"只能通过对象的隐式原型找到创建它的函数的原型\",{\"1\":{\"1010\":1}}],[\"只能存储字符串看起来限制很大\",{\"1\":{\"770\":1}}],[\"只能暂时保存数据\",{\"1\":{\"768\":1}}],[\"只能包含数字的输入框\",{\"1\":{\"757\":1}}],[\"只能是类属性\",{\"1\":{\"405\":1}}],[\"只能前端接收错误码做处理\",{\"1\":{\"355\":1}}],[\"只能获取路径以及查询字符串\",{\"1\":{\"282\":1}}],[\"只能程序员自己访问\",{\"1\":{\"71\":1}}],[\"只包含核心功能\",{\"1\":{\"1427\":1}}],[\"只包含文档的可见部分\",{\"1\":{\"1153\":2}}],[\"只包含\",{\"1\":{\"282\":1}}],[\"只是传入的成功回调不同\",{\"1\":{\"2029\":1}}],[\"只是得到的仅仅是\",{\"1\":{\"1932\":1}}],[\"只是与之不同的是\",{\"1\":{\"1916\":1}}],[\"只是其中tag变成了组件\",{\"1\":{\"1879\":1}}],[\"只是表达了这次请求的\",{\"1\":{\"1632\":1}}],[\"只是\",{\"1\":{\"1519\":1}}],[\"只是不会在代码中生成占位符\",{\"1\":{\"1299\":1}}],[\"只是静静的躺在你的某个\",{\"1\":{\"1298\":1}}],[\"只是在控制台抛出警告信息\",{\"1\":{\"1253\":1}}],[\"只是在\",{\"1\":{\"1215\":1}}],[\"只是写法上有所不同\",{\"1\":{\"1209\":1}}],[\"只是箭头函数的基本写法\",{\"1\":{\"941\":1}}],[\"只是限定了量词的作用范围\",{\"1\":{\"913\":1}}],[\"只是改为大写\",{\"1\":{\"904\":1}}],[\"只是对应的值为一个函数而已\",{\"1\":{\"828\":1}}],[\"只是被封装在类中\",{\"1\":{\"405\":1}}],[\"只是判断两个对象的内容是否相等\",{\"1\":{\"398\":1}}],[\"只是通过\",{\"1\":{\"356\":1}}],[\"只是没有\",{\"1\":{\"245\":1}}],[\"只是让\",{\"1\":{\"219\":1}}],[\"只要浏览器证书验证过程是正确的\",{\"1\":{\"2091\":1}}],[\"只要浏览器支持\",{\"1\":{\"948\":1}}],[\"只要模板字符串没有被消费尽\",{\"1\":{\"1974\":1}}],[\"只要最终返回的是一组虚拟\",{\"1\":{\"1879\":1}}],[\"只要不影响做题\",{\"1\":{\"1723\":1}}],[\"只要不是简单请求\",{\"1\":{\"1608\":1}}],[\"只要不过期关闭浏览器也会存在\",{\"1\":{\"346\":1}}],[\"只要开发者不改动和新增头部\",{\"1\":{\"1607\":1}}],[\"只要开发人员小心谨慎\",{\"1\":{\"22\":1}}],[\"只要全部满足下列条件\",{\"1\":{\"1607\":1}}],[\"只要服务器明确表示允许\",{\"1\":{\"1605\":1}}],[\"只要服务器给我的响应头中包含了token\",{\"1\":{\"1593\":1}}],[\"只要localstorage中有token\",{\"1\":{\"1593\":1}}],[\"只要发现if\",{\"1\":{\"1537\":1}}],[\"只要缓存有效\",{\"1\":{\"1536\":1}}],[\"只要你是\",{\"1\":{\"1519\":1}}],[\"只要掌握了如何查阅和调用这些方法\",{\"1\":{\"1193\":1}}],[\"只要用户从一个页面切换到另一个页面\",{\"1\":{\"1150\":1}}],[\"只要有消息\",{\"1\":{\"1104\":1}}],[\"只要程序提出要求\",{\"1\":{\"1027\":1}}],[\"只要在副作用函数与数组长度和索引之间建立响应式联系\",{\"1\":{\"1923\":1}}],[\"只要在函数中使用了外部的数据\",{\"1\":{\"1023\":1}}],[\"只要在其父级块级元素的宽度内有足够的空间\",{\"1\":{\"552\":1}}],[\"只要集合存在\",{\"1\":{\"865\":1}}],[\"只要是proxy对象的方法\",{\"1\":{\"1901\":1}}],[\"只要是\",{\"1\":{\"680\":1}}],[\"只要把逗号分隔的不同的数据项使用方括号括起来即可\",{\"1\":{\"390\":1}}],[\"只要项目文件有修改\",{\"1\":{\"159\":1}}],[\"只要能解决上面的两个问题就行了\",{\"1\":{\"37\":1}}],[\"只剩下最后一个问题还在负隅顽抗\",{\"1\":{\"24\":1}}],[\"突然间\",{\"1\":{\"24\":1}}],[\"摩尔定律持续发酵\",{\"1\":{\"24\":1}}],[\"到底是添加新属性还是设置已有属性\",{\"1\":{\"1906\":1}}],[\"到底哪个变量是没有用的\",{\"1\":{\"1028\":1}}],[\"到prop数据的dep\",{\"1\":{\"1841\":1,\"1842\":1}}],[\"到响应式属性的dep\",{\"1\":{\"1841\":1,\"1842\":1}}],[\"到请求头中\",{\"1\":{\"1530\":1}}],[\"到另一个规则集的方式\",{\"1\":{\"1333\":1}}],[\"到一起\",{\"1\":{\"1299\":1}}],[\"到所聚焦元素的左下角\",{\"1\":{\"1163\":1}}],[\"到所有属性都有值\",{\"1\":{\"528\":1}}],[\"到客户端\",{\"1\":{\"767\":1}}],[\"到达的元素称为目标对象以外\",{\"1\":{\"764\":1}}],[\"到达服务端之后\",{\"1\":{\"312\":1}}],[\"到目前为止\",{\"1\":{\"735\":1,\"1029\":1,\"1084\":1}}],[\"到\",{\"1\":{\"227\":1,\"707\":2,\"742\":1,\"911\":1,\"924\":1,\"1141\":1,\"2040\":1}}],[\"到项目中\",{\"1\":{\"30\":1}}],[\"到了http1\",{\"1\":{\"1540\":1}}],[\"到了\",{\"1\":{\"24\":1}}],[\"到后来的几万行\",{\"1\":{\"23\":1}}],[\"0x7d\",{\"1\":{\"1794\":1}}],[\"0x7b\",{\"1\":{\"1794\":1}}],[\"0x7c\",{\"1\":{\"1794\":3}}],[\"0x5d\",{\"1\":{\"1794\":1}}],[\"0x5b\",{\"1\":{\"1794\":1}}],[\"0x5c\",{\"1\":{\"1794\":4}}],[\"0x60\",{\"1\":{\"1794\":2}}],[\"0x29\",{\"1\":{\"1794\":1}}],[\"0x28\",{\"1\":{\"1794\":1}}],[\"0x2f\",{\"1\":{\"1794\":2}}],[\"0x22\",{\"1\":{\"1794\":2}}],[\"0x27\",{\"1\":{\"1794\":2}}],[\"0xfd\",{\"1\":{\"792\":1}}],[\"0等价\",{\"1\":{\"1675\":1}}],[\"0版本的消息头\",{\"1\":{\"1542\":1}}],[\"0版本的规范\",{\"1\":{\"1537\":1}}],[\"0版本中\",{\"1\":{\"1540\":1}}],[\"0以上\",{\"1\":{\"1482\":1}}],[\"0ee\",{\"1\":{\"1328\":1}}],[\"0ff\",{\"1\":{\"1280\":2}}],[\"0f0\",{\"1\":{\"1278\":2,\"1279\":3,\"1280\":2,\"1290\":6,\"1312\":2}}],[\"0o17\",{\"1\":{\"792\":1}}],[\"0b101\",{\"1\":{\"792\":1}}],[\"0px\",{\"1\":{\"613\":2,\"1124\":2}}],[\"004\",{\"1\":{\"1393\":1}}],[\"003\",{\"1\":{\"1393\":1}}],[\"002\",{\"1\":{\"1393\":1}}],[\"0013\",{\"1\":{\"1658\":1}}],[\"001\",{\"1\":{\"1393\":1}}],[\"00f\",{\"1\":{\"1278\":2,\"1279\":3,\"1280\":2,\"1290\":6}}],[\"00\",{\"1\":{\"535\":1,\"772\":1,\"875\":3,\"876\":6,\"877\":6,\"1088\":1,\"1162\":1}}],[\"000z\",{\"1\":{\"876\":3}}],[\"000000\",{\"1\":{\"708\":1}}],[\"000125\",{\"1\":{\"395\":1}}],[\"000\",{\"1\":{\"287\":2,\"304\":2,\"384\":1,\"1260\":1,\"1297\":2,\"1307\":1,\"1312\":1,\"1313\":2,\"1318\":3}}],[\"0参数\",{\"1\":{\"486\":1}}],[\"0开始\",{\"1\":{\"401\":1}}],[\"0700\",{\"1\":{\"875\":1}}],[\"07\",{\"1\":{\"368\":1,\"1088\":1}}],[\"04\",{\"1\":{\"264\":7,\"276\":1,\"277\":1,\"876\":1,\"1534\":4,\"1537\":1}}],[\"0319\",{\"1\":{\"1093\":2,\"2051\":2}}],[\"03\",{\"1\":{\"262\":1,\"263\":4,\"875\":2,\"876\":6,\"877\":9,\"911\":8,\"1162\":1}}],[\"09\",{\"1\":{\"177\":2,\"1160\":1}}],[\"080\",{\"1\":{\"1273\":3}}],[\"08\",{\"1\":{\"176\":2,\"313\":1,\"877\":3,\"1104\":1,\"1105\":1,\"1534\":4,\"1537\":3}}],[\"0291\",{\"1\":{\"1671\":1}}],[\"025z\",{\"1\":{\"876\":1}}],[\"02\",{\"1\":{\"176\":3,\"212\":1,\"764\":1,\"765\":1,\"772\":2,\"773\":1,\"1104\":1,\"1105\":1}}],[\"0+6\",{\"1\":{\"165\":1}}],[\"05\",{\"1\":{\"64\":1,\"237\":1,\"239\":1,\"339\":1,\"876\":1,\"1112\":1}}],[\"010\",{\"1\":{\"958\":3}}],[\"017\",{\"1\":{\"792\":2}}],[\"01\",{\"1\":{\"64\":1,\"264\":6,\"390\":1,\"402\":5,\"403\":1,\"404\":4,\"405\":18,\"408\":4,\"691\":1,\"958\":1,\"1659\":1}}],[\"06\",{\"1\":{\"55\":1,\"62\":1,\"64\":1,\"83\":1,\"911\":3,\"925\":6,\"1264\":1}}],[\"0\",{\"0\":{\"1144\":1,\"1481\":1,\"1489\":1,\"1491\":1},\"1\":{\"23\":1,\"34\":2,\"64\":6,\"134\":2,\"155\":1,\"165\":7,\"191\":2,\"200\":2,\"209\":3,\"212\":2,\"263\":1,\"269\":1,\"274\":2,\"284\":4,\"287\":2,\"301\":2,\"317\":1,\"329\":1,\"345\":1,\"355\":3,\"372\":2,\"385\":2,\"388\":10,\"390\":1,\"395\":1,\"396\":2,\"401\":2,\"408\":1,\"410\":2,\"411\":1,\"412\":1,\"413\":2,\"414\":4,\"416\":5,\"417\":5,\"418\":3,\"419\":7,\"428\":1,\"436\":2,\"438\":2,\"441\":2,\"443\":1,\"451\":1,\"458\":1,\"472\":1,\"478\":1,\"480\":3,\"482\":3,\"486\":3,\"491\":1,\"493\":1,\"494\":1,\"496\":2,\"498\":3,\"499\":4,\"501\":4,\"504\":1,\"524\":16,\"535\":6,\"546\":2,\"555\":29,\"556\":2,\"578\":1,\"580\":7,\"582\":8,\"591\":1,\"592\":4,\"597\":1,\"598\":6,\"602\":1,\"603\":6,\"613\":3,\"641\":1,\"643\":2,\"649\":1,\"650\":1,\"667\":1,\"692\":1,\"696\":1,\"708\":2,\"714\":2,\"720\":3,\"725\":14,\"726\":5,\"727\":5,\"733\":2,\"737\":5,\"740\":11,\"742\":4,\"750\":3,\"764\":3,\"772\":2,\"773\":5,\"790\":1,\"796\":7,\"801\":3,\"806\":2,\"809\":1,\"810\":3,\"813\":4,\"821\":1,\"822\":2,\"838\":1,\"843\":3,\"844\":2,\"846\":4,\"848\":1,\"851\":1,\"854\":2,\"855\":8,\"857\":1,\"874\":3,\"875\":3,\"876\":3,\"877\":14,\"883\":5,\"890\":1,\"891\":1,\"902\":2,\"903\":4,\"904\":3,\"906\":9,\"907\":1,\"908\":3,\"911\":1,\"913\":3,\"914\":4,\"916\":1,\"918\":2,\"921\":1,\"923\":7,\"925\":8,\"932\":2,\"944\":2,\"945\":4,\"946\":1,\"947\":1,\"958\":2,\"970\":3,\"971\":1,\"980\":6,\"981\":1,\"995\":9,\"1015\":3,\"1030\":3,\"1031\":2,\"1038\":2,\"1052\":1,\"1057\":1,\"1063\":2,\"1091\":5,\"1097\":2,\"1098\":6,\"1111\":1,\"1120\":1,\"1146\":1,\"1153\":3,\"1156\":1,\"1157\":1,\"1188\":3,\"1194\":1,\"1198\":3,\"1204\":3,\"1214\":2,\"1259\":2,\"1260\":9,\"1262\":4,\"1264\":3,\"1265\":1,\"1266\":4,\"1267\":2,\"1284\":4,\"1307\":5,\"1328\":1,\"1329\":1,\"1332\":2,\"1338\":1,\"1353\":1,\"1376\":1,\"1397\":1,\"1428\":1,\"1446\":2,\"1451\":1,\"1475\":3,\"1486\":2,\"1487\":1,\"1488\":1,\"1494\":1,\"1496\":1,\"1500\":2,\"1518\":2,\"1519\":2,\"1526\":2,\"1541\":1,\"1543\":5,\"1575\":1,\"1576\":3,\"1577\":2,\"1579\":2,\"1581\":3,\"1582\":3,\"1584\":2,\"1586\":2,\"1587\":2,\"1655\":4,\"1656\":4,\"1658\":3,\"1659\":4,\"1664\":2,\"1665\":1,\"1666\":6,\"1667\":2,\"1671\":9,\"1673\":5,\"1680\":4,\"1712\":1,\"1720\":1,\"1723\":2,\"1768\":1,\"1769\":1,\"1777\":1,\"1778\":4,\"1779\":3,\"1785\":4,\"1786\":1,\"1789\":8,\"1792\":24,\"1793\":3,\"1794\":10,\"1795\":3,\"1796\":2,\"1803\":1,\"1804\":1,\"1805\":1,\"1814\":1,\"1815\":1,\"1816\":1,\"1822\":4,\"1827\":1,\"1865\":1,\"1890\":1,\"1915\":2,\"1923\":1,\"1931\":3,\"1938\":1,\"1953\":1,\"1954\":2,\"1955\":1,\"1961\":1,\"1962\":4,\"1965\":2,\"1966\":3,\"1968\":1,\"1969\":4,\"1974\":2,\"1976\":1,\"1977\":7,\"1978\":2,\"1979\":3,\"1984\":1,\"2012\":1,\"2029\":1,\"2034\":3,\"2044\":2,\"2054\":2,\"2058\":1,\"2061\":7,\"2065\":3,\"2068\":5,\"2073\":1}}],[\"浏览器将忽略这个设置\",{\"1\":{\"2088\":1}}],[\"浏览器将只在请求与当前网站的域名完全匹配时发送\",{\"1\":{\"2088\":1}}],[\"浏览器将不会对该资源做出任何的缓存处理\",{\"1\":{\"1539\":1}}],[\"浏览器搜索栏的\",{\"1\":{\"2058\":1}}],[\"浏览器环境\",{\"1\":{\"1777\":1}}],[\"浏览器受到\",{\"1\":{\"1646\":1}}],[\"浏览器仍然视为跨域被拒绝\",{\"1\":{\"1612\":1}}],[\"浏览器出于多方面的考量\",{\"1\":{\"1603\":1}}],[\"浏览器如何限制异源请求\",{\"0\":{\"1603\":1}}],[\"浏览器并没有把这个能力开放给\",{\"1\":{\"1572\":1}}],[\"浏览器本身就具备网络通信的能力\",{\"1\":{\"1572\":1}}],[\"浏览器通常会使用\",{\"1\":{\"1570\":1}}],[\"浏览器通常会将响应体作为页面进行渲染\",{\"1\":{\"1570\":1}}],[\"浏览器通常会将响应体原封不动的显示到页面上\",{\"1\":{\"1570\":1}}],[\"浏览器通信\",{\"0\":{\"106\":1},\"2\":{\"107\":1,\"1549\":1,\"1565\":1,\"1566\":1}}],[\"浏览器能够自动分析响应头中的content\",{\"1\":{\"1570\":1}}],[\"浏览器能够自动识别响应码\",{\"1\":{\"1570\":1}}],[\"浏览器不仅能发送请求\",{\"1\":{\"1570\":1}}],[\"浏览器不会附带请求体\",{\"1\":{\"1569\":1}}],[\"浏览器不支持keypress事件中的\",{\"1\":{\"1154\":1}}],[\"浏览器不支持不表示日期只表示时间的字符串格式\",{\"1\":{\"875\":1}}],[\"浏览器不支持\",{\"1\":{\"116\":1}}],[\"浏览器都有一个约定\",{\"1\":{\"1569\":1}}],[\"浏览器都会为元素设置一些默认样式\",{\"1\":{\"610\":1}}],[\"浏览器实现计时器时\",{\"1\":{\"1560\":1}}],[\"浏览器还有很多其他的队列\",{\"1\":{\"1560\":1}}],[\"浏览器永不阻塞\",{\"1\":{\"1558\":1}}],[\"浏览器选择异步来解决这个问题\",{\"1\":{\"1558\":1}}],[\"浏览器内部工作极其复杂\",{\"1\":{\"1555\":1}}],[\"浏览器内核模块组成\",{\"0\":{\"1171\":1}}],[\"浏览器有哪些进程和线程\",{\"0\":{\"1555\":1}}],[\"浏览器视角\",{\"0\":{\"1545\":1}}],[\"浏览器记录资源的上一次修改时间是格林威治时间2020\",{\"1\":{\"1534\":1}}],[\"浏览器记录服务器给予的资源编号w\",{\"1\":{\"1534\":1}}],[\"浏览器记录服务器的响应时间是格林威治时间2020\",{\"1\":{\"1534\":1}}],[\"浏览器标记这次缓存的时间是\",{\"1\":{\"1534\":1}}],[\"浏览器标记这次请求的请求方法和请求路径\",{\"1\":{\"1534\":1}}],[\"浏览器把这次请求得到的响应体缓存到本地文件中\",{\"1\":{\"1534\":1}}],[\"浏览器缓存\",{\"0\":{\"1533\":1},\"2\":{\"1547\":1}}],[\"浏览器开始从上到下解析\",{\"1\":{\"1530\":1}}],[\"浏览器开发团队遇到了一个很有意思的问题\",{\"1\":{\"1138\":1}}],[\"浏览器决定要附带哪些\",{\"1\":{\"1530\":1}}],[\"浏览器向服务器发出了一个带缓存的请求\",{\"1\":{\"1537\":1}}],[\"浏览器向服务器发出建立\",{\"1\":{\"1530\":1}}],[\"浏览器向服务器发送请求时\",{\"1\":{\"346\":1}}],[\"浏览器根据响应头的其他内容完成缓存\",{\"1\":{\"1530\":1}}],[\"浏览器根据响应头中的\",{\"1\":{\"1530\":1}}],[\"浏览器根据响应状态码决定如何处理这一次响应\",{\"1\":{\"1530\":1}}],[\"浏览器根据使用的协议版本\",{\"1\":{\"1530\":1}}],[\"浏览器根据\",{\"1\":{\"1530\":1}}],[\"浏览器输入\",{\"0\":{\"1530\":1}}],[\"浏览器渲染原理\",{\"0\":{\"1522\":1},\"2\":{\"1524\":1,\"1532\":1}}],[\"浏览器必须准备好一个微队列\",{\"1\":{\"1181\":1,\"1560\":1}}],[\"浏览器可以代替用户完成\",{\"1\":{\"1568\":1}}],[\"浏览器可以根据实际情况从不同的队列中取出任务执行\",{\"1\":{\"1560\":1}}],[\"浏览器可以根据实际情况从不同的队列中取出执行任务\",{\"1\":{\"1181\":1}}],[\"浏览器可以正常使用setdata\",{\"1\":{\"1161\":2}}],[\"浏览器执行\",{\"0\":{\"1173\":1}}],[\"浏览器进程通知我\",{\"1\":{\"1556\":1}}],[\"浏览器进程内部会启动多个线程处理不同的任务\",{\"1\":{\"1168\":1,\"1555\":1}}],[\"浏览器进程\",{\"1\":{\"1168\":1,\"1555\":1}}],[\"浏览器是一个多进程多线程的应用程序\",{\"1\":{\"1555\":1}}],[\"浏览器是不知道的\",{\"1\":{\"1536\":1}}],[\"浏览器是不会让一个像素只用自己的一半的\",{\"1\":{\"707\":1}}],[\"浏览器是如何渲染页面的\",{\"0\":{\"1526\":1}}],[\"浏览器是如何工作的\",{\"0\":{\"1525\":1}}],[\"浏览器是多进程运行的\",{\"1\":{\"1168\":1}}],[\"浏览器和\",{\"1\":{\"1161\":1}}],[\"浏览器来说\",{\"1\":{\"1161\":1}}],[\"浏览器只有焦点在文本框中才会发生\",{\"1\":{\"1160\":1}}],[\"浏览器只有在文本中选定字符时\",{\"1\":{\"1160\":1}}],[\"浏览器默认自带的头部字段都是满足安全规范的\",{\"1\":{\"1607\":1}}],[\"浏览器默认行为会跳转到百度\",{\"1\":{\"1156\":1}}],[\"浏览器默认样式\",{\"1\":{\"523\":1}}],[\"浏览器跳转到指定页面\",{\"1\":{\"1156\":1}}],[\"浏览器支持\",{\"1\":{\"1128\":1}}],[\"浏览器支持双值语法\",{\"1\":{\"548\":1}}],[\"浏览器提供的操纵\",{\"1\":{\"1109\":1}}],[\"浏览器提供商会按照各自的想法去随意扩展它\",{\"1\":{\"1084\":1}}],[\"浏览器就会返回相应的位置信息\",{\"1\":{\"1099\":1}}],[\"浏览器主语言\",{\"1\":{\"1091\":1}}],[\"浏览器版本\",{\"1\":{\"1091\":1}}],[\"浏览器名称\",{\"1\":{\"1091\":1}}],[\"浏览器类型和版本等信息\",{\"1\":{\"1090\":1}}],[\"浏览器每打开一个窗口\",{\"1\":{\"1086\":1}}],[\"浏览器引入\",{\"0\":{\"1077\":1}}],[\"浏览器为\",{\"1\":{\"995\":2}}],[\"浏览器中把这一能力向\",{\"1\":{\"1572\":1}}],[\"浏览器中使用的方法为detachevent\",{\"1\":{\"1146\":1}}],[\"浏览器中使用的方法为attachevent\",{\"1\":{\"1145\":1}}],[\"浏览器中的全局执行环境中被调用\",{\"1\":{\"952\":1}}],[\"浏览器中\",{\"1\":{\"769\":1,\"952\":1,\"1161\":3}}],[\"浏览器自动设置好请求头\",{\"1\":{\"1530\":1}}],[\"浏览器自动完成\",{\"1\":{\"1530\":1}}],[\"浏览器自动补全协议\",{\"1\":{\"1530\":1}}],[\"浏览器自动管理不同站点的\",{\"1\":{\"767\":1}}],[\"浏览器自动处理\",{\"1\":{\"522\":1}}],[\"浏览器负责发送数据\",{\"1\":{\"767\":1}}],[\"浏览器认的也是\",{\"1\":{\"684\":1}}],[\"浏览器在发送\",{\"1\":{\"1569\":1}}],[\"浏览器在发出请求时\",{\"1\":{\"1569\":1}}],[\"浏览器在发出请求时会判断要不要使用缓存\",{\"1\":{\"1545\":1}}],[\"浏览器在反复权衡下\",{\"1\":{\"1527\":1}}],[\"浏览器在开始解析前\",{\"1\":{\"1526\":1}}],[\"浏览器在显示网页时\",{\"1\":{\"646\":1}}],[\"浏览器在遇到该类型的响应时\",{\"1\":{\"294\":1}}],[\"浏览器的历史记录栈只有一个条目\",{\"1\":{\"2058\":1}}],[\"浏览器的历史记录有两种写入方式\",{\"1\":{\"1463\":1}}],[\"浏览器的通信能力\",{\"0\":{\"1567\":1}}],[\"浏览器的进程模型\",{\"0\":{\"1552\":1}}],[\"浏览器的默认样式\",{\"1\":{\"1526\":1}}],[\"浏览器的\",{\"1\":{\"1028\":1}}],[\"浏览器的关闭并不意味着数据也会随之消失\",{\"1\":{\"768\":1}}],[\"浏览器的可视窗口\",{\"1\":{\"571\":1}}],[\"浏览器的下载行为需要满足一些安全性要求\",{\"1\":{\"496\":1}}],[\"浏览器会明确的提示证书错误\",{\"1\":{\"2091\":1}}],[\"浏览器会尝试自动滚动到上一次所滚动的地方\",{\"1\":{\"2048\":1}}],[\"浏览器会将它视为\",{\"1\":{\"1570\":1}}],[\"浏览器会将它视为样式\",{\"1\":{\"1570\":1}}],[\"浏览器会将页面中所有的标签都转换为一个元素节点\",{\"1\":{\"1112\":1}}],[\"浏览器会获取按钮所在的<form>元素\",{\"1\":{\"1569\":1}}],[\"浏览器会拿到当前页面的地址\",{\"1\":{\"1569\":1}}],[\"浏览器会拿到对应的地址\",{\"1\":{\"1569\":1}}],[\"浏览器会拿到\",{\"1\":{\"1569\":1}}],[\"浏览器会代替用户自动发出\",{\"1\":{\"1569\":1}}],[\"浏览器会根据服务器不同的响应情况\",{\"1\":{\"1541\":1}}],[\"浏览器会根据该类型决定如何处理资源\",{\"1\":{\"294\":1}}],[\"浏览器会按照服务器响应头的要求\",{\"1\":{\"1541\":1}}],[\"浏览器会合并这些操作\",{\"1\":{\"1527\":1}}],[\"浏览器会在运行时下载这个文件\",{\"1\":{\"1313\":1}}],[\"浏览器会为每个标签页开启一个新的渲染进程\",{\"1\":{\"1168\":1,\"1555\":1}}],[\"浏览器会报错\",{\"1\":{\"1161\":2}}],[\"浏览器会失败\",{\"1\":{\"1161\":1}}],[\"浏览器会自动把<\",{\"1\":{\"1792\":1}}],[\"浏览器会自动进行\",{\"1\":{\"1639\":1}}],[\"浏览器会自动将\",{\"1\":{\"1579\":1}}],[\"浏览器会自动解析\",{\"1\":{\"1569\":1}}],[\"浏览器会自动使用该类别下的字体\",{\"1\":{\"621\":1}}],[\"浏览器会自动为元素添加一个上外边距\",{\"1\":{\"565\":1}}],[\"浏览器会先进行\",{\"1\":{\"373\":1}}],[\"浏览器限制单个\",{\"1\":{\"356\":1}}],[\"浏览器一般只允许存放\",{\"1\":{\"350\":1}}],[\"浏览器操作\",{\"0\":{\"348\":1},\"1\":{\"348\":1}}],[\"浏览器也不会以任何形式保存该\",{\"1\":{\"345\":1}}],[\"浏览器查看\",{\"0\":{\"276\":1}}],[\"浏览器请求对应端口\",{\"1\":{\"274\":1}}],[\"浏览器\",{\"0\":{\"1548\":1},\"1\":{\"266\":1,\"702\":1},\"2\":{\"1550\":1}}],[\"浏览器直接显示即可\",{\"1\":{\"219\":1}}],[\"浏览器相关的api\",{\"1\":{\"216\":1}}],[\"浏览器无法看到效果\",{\"1\":{\"1088\":1}}],[\"浏览器无法识别\",{\"1\":{\"155\":1}}],[\"浏览器无法支持模块化\",{\"1\":{\"37\":1}}],[\"浏览器目前仅支持\",{\"1\":{\"116\":1}}],[\"浏览器端通过\",{\"1\":{\"1436\":1}}],[\"浏览器端\",{\"1\":{\"356\":1}}],[\"浏览器端为\",{\"1\":{\"216\":1}}],[\"浏览器端的模块化\",{\"0\":{\"116\":1}}],[\"浏览器端实现模块化的问题\",{\"0\":{\"115\":1}}],[\"浏览器对于带有type=\",{\"1\":{\"47\":1}}],[\"浏览器使用以下方式引入一个\",{\"1\":{\"47\":1}}],[\"浏览器要加载\",{\"1\":{\"37\":1}}],[\"浏览器制霸市场后\",{\"1\":{\"23\":1}}],[\"浏览器解释执行\",{\"1\":{\"23\":1}}],[\"就变得毫无意义\",{\"1\":{\"2091\":1}}],[\"就多了一次遍历而已\",{\"1\":{\"2081\":1}}],[\"就调用前面介绍过的\",{\"1\":{\"2080\":1}}],[\"就为了让当前的这个状态对象的\",{\"1\":{\"2058\":1}}],[\"就非常清晰了\",{\"1\":{\"2058\":1}}],[\"就对\",{\"1\":{\"2044\":1}}],[\"就要再次执行第一个副作用函数了\",{\"1\":{\"1925\":1}}],[\"就要开始下一次的执\",{\"1\":{\"1892\":1}}],[\"就无需追踪了\",{\"1\":{\"1921\":1}}],[\"就比较简单了\",{\"1\":{\"1846\":1}}],[\"就开始执行回调函数队列\",{\"1\":{\"1822\":1}}],[\"就进行常规的循环比对patch\",{\"1\":{\"1789\":1}}],[\"就进入到\",{\"1\":{\"819\":1}}],[\"就把两个节点进行patch更新\",{\"1\":{\"1789\":2}}],[\"就把上边这个玩意先写上\",{\"1\":{\"649\":1}}],[\"就以新的vnode为准\",{\"1\":{\"1789\":1}}],[\"就从旧的oldvnode中删除\",{\"1\":{\"1789\":1}}],[\"就极有可能导致主线程产生阻塞\",{\"1\":{\"1558\":1}}],[\"就和第一次请求服务器时一样\",{\"1\":{\"1535\":1}}],[\"就这样通过响应头传递给客户端了\",{\"1\":{\"1534\":1}}],[\"就视为静态内容了\",{\"1\":{\"1402\":1}}],[\"就行\",{\"1\":{\"1358\":1}}],[\"就行了\",{\"1\":{\"836\":1}}],[\"就算有默认值\",{\"1\":{\"1335\":1}}],[\"就算没有同名\",{\"1\":{\"1310\":1}}],[\"就算没有使用\",{\"1\":{\"1309\":1}}],[\"就停止编译\",{\"1\":{\"1252\":1}}],[\"就停止了\",{\"1\":{\"1141\":1}}],[\"就专为对这些属性进行访问和设置的\",{\"1\":{\"1205\":1}}],[\"就基本掌握了这个库的使用\",{\"1\":{\"1193\":1}}],[\"就取出第一个任务执行\",{\"1\":{\"1180\":1,\"1556\":1}}],[\"就好像这些\",{\"1\":{\"1158\":1}}],[\"就好像是给一个属性赋值一样\",{\"1\":{\"769\":1}}],[\"就表示对应的键被按下了\",{\"1\":{\"1154\":1}}],[\"就删除该类\",{\"1\":{\"1125\":1}}],[\"就添加该类\",{\"1\":{\"1125\":1}}],[\"就能在reflect对象上找到对应的方法\",{\"1\":{\"1901\":1}}],[\"就能够获取到\",{\"1\":{\"2068\":1}}],[\"就能够响应数组\",{\"1\":{\"1923\":1}}],[\"就能够访问指定的响应头了\",{\"1\":{\"1613\":1}}],[\"就能够使用这组\",{\"1\":{\"1099\":1}}],[\"就能完全应付任何事件处理的情况\",{\"1\":{\"1216\":1}}],[\"就能运行了\",{\"1\":{\"995\":1}}],[\"就包含了一个\",{\"1\":{\"1086\":1}}],[\"就可能造成无法获取到最新的布局信息\",{\"1\":{\"1527\":1}}],[\"就可能会用到它们\",{\"1\":{\"1029\":1}}],[\"就可以利用普通中间人攻击的方式\",{\"1\":{\"2091\":1}}],[\"就可以描述出各种类型的真实dom节点\",{\"1\":{\"1788\":1}}],[\"就可以与服务器建立持久的连接\",{\"1\":{\"1649\":1}}],[\"就可以让每个任务有条不紊的\",{\"1\":{\"1556\":1}}],[\"就可以运行程序的代码了\",{\"1\":{\"1554\":1}}],[\"就可以正常使用\",{\"1\":{\"1161\":1}}],[\"就可以管理某一类型的所有事件\",{\"1\":{\"1158\":1}}],[\"就可以取消事件的默认行为\",{\"1\":{\"1156\":1}}],[\"就可以避免让程序不断地去检查事件是否发生\",{\"1\":{\"1137\":1}}],[\"就可以请求其他用户共享他们的位置\",{\"1\":{\"1100\":1}}],[\"就可以采用这种方式来引入\",{\"1\":{\"1079\":1}}],[\"就可以访问并执行该函数\",{\"1\":{\"1012\":1}}],[\"就可以访问到这个变量\",{\"1\":{\"1012\":1}}],[\"就可以看得更清楚\",{\"1\":{\"995\":1}}],[\"就可以看到上面写法的缺陷\",{\"1\":{\"953\":1}}],[\"就可以在字符串中重复迭代\",{\"1\":{\"923\":1}}],[\"就可以在req的对象上添加body\",{\"1\":{\"317\":1}}],[\"就可以创建一个空的\",{\"1\":{\"868\":1}}],[\"就可以创建一个\",{\"1\":{\"860\":1}}],[\"就可以使用游客模式下无法使用的功能\",{\"1\":{\"343\":1}}],[\"就可以极大的复用现有的工程\",{\"1\":{\"222\":1}}],[\"就可以交给构建工具来做\",{\"1\":{\"128\":1}}],[\"就可以成为满足前端开发的需要\",{\"1\":{\"23\":1}}],[\"就将旧的路由记录\",{\"1\":{\"2069\":2}}],[\"就将其代入到响应头发送到服务器\",{\"1\":{\"1593\":1}}],[\"就将其保存在localstorage中\",{\"1\":{\"1593\":1}}],[\"就将这个变量标记为\",{\"1\":{\"1029\":1}}],[\"就将他们交换\",{\"1\":{\"410\":1}}],[\"就叫做内存泄漏\",{\"1\":{\"1027\":1}}],[\"就应该响应下面的消息\",{\"1\":{\"1648\":1}}],[\"就应该能访问的到\",{\"1\":{\"1493\":1}}],[\"就应该被销毁掉\",{\"1\":{\"1023\":1}}],[\"就应该有相应的属性和方法\",{\"1\":{\"922\":1}}],[\"就创建了闭包\",{\"1\":{\"1023\":1}}],[\"就宣布放弃\",{\"1\":{\"1019\":1}}],[\"就意味着设置到原始对象上的也是响应式数据\",{\"1\":{\"1929\":1}}],[\"就意味着\",{\"1\":{\"995\":1}}],[\"就够了\",{\"1\":{\"995\":1}}],[\"就只有层层往下找\",{\"1\":{\"1112\":1}}],[\"就只需要提供另一个参数\",{\"1\":{\"995\":1}}],[\"就只能在当前代码块中使用\",{\"1\":{\"948\":1}}],[\"就指向谁\",{\"1\":{\"990\":1}}],[\"就等于\",{\"1\":{\"980\":1}}],[\"就已经见到过了\",{\"1\":{\"945\":1}}],[\"就已经有了全局的\",{\"1\":{\"895\":1}}],[\"就需要使用非对称加密来保证数据传输的安全性\",{\"1\":{\"2100\":1}}],[\"就需要我们在服务器上面做一些配置\",{\"1\":{\"2050\":1}}],[\"就需要我们传递一个回调函数进去\",{\"1\":{\"944\":1}}],[\"就需要需要前端路由去映射不同的模块\",{\"1\":{\"2048\":1}}],[\"就需要重新计算\",{\"1\":{\"1528\":1}}],[\"就需要分别在data\",{\"1\":{\"1511\":1}}],[\"就需要通过\",{\"1\":{\"1135\":1}}],[\"就需要登录或者注册账号\",{\"1\":{\"343\":1}}],[\"就被称之为回调函数\",{\"1\":{\"943\":1}}],[\"就使用默认值\",{\"1\":{\"934\":1}}],[\"就让我们具体来看一下这种新的数据结构\",{\"1\":{\"858\":1}}],[\"就形成了给人感觉像是数组\",{\"1\":{\"828\":1}}],[\"就返回一个新函数\",{\"1\":{\"995\":1}}],[\"就返回真\",{\"1\":{\"809\":1}}],[\"就返回错误码\",{\"1\":{\"355\":1}}],[\"就不再需要调用\",{\"1\":{\"1949\":1}}],[\"就不再需要触发响应了\",{\"1\":{\"1928\":1}}],[\"就不再是\",{\"1\":{\"1362\":1}}],[\"就不是\",{\"1\":{\"1368\":1}}],[\"就不会打破此条规则\",{\"1\":{\"1607\":1}}],[\"就不会去看``if\",{\"1\":{\"1537\":1}}],[\"就不会看到来自于浏览器的通知\",{\"1\":{\"1104\":1}}],[\"就不会有这个问题\",{\"1\":{\"995\":1}}],[\"就不需要\",{\"1\":{\"942\":1}}],[\"就不需要放到一个块中\",{\"1\":{\"942\":1}}],[\"就不支持file\",{\"1\":{\"771\":1}}],[\"就不能再使用\",{\"1\":{\"650\":1}}],[\"就没有与之对应的\",{\"1\":{\"681\":1}}],[\"就判断页面卡死\",{\"1\":{\"505\":1}}],[\"就直接请求服务器\",{\"1\":{\"1535\":1}}],[\"就直接调用fn\",{\"1\":{\"487\":1}}],[\"就直接编译了babeltest\",{\"1\":{\"148\":1}}],[\"就留下\",{\"1\":{\"402\":1}}],[\"就必须要清楚http中关于缓存的协议\",{\"1\":{\"1533\":1}}],[\"就必须要使用\",{\"1\":{\"392\":1}}],[\"就必须创建一个\",{\"1\":{\"1350\":1}}],[\"就必须供给内存\",{\"1\":{\"1027\":1}}],[\"就必须依赖链路层来保障通讯安全了\",{\"1\":{\"362\":1}}],[\"就在旧的oldvnode中创建\",{\"1\":{\"1789\":1}}],[\"就在哪里确定\",{\"1\":{\"1015\":1}}],[\"就在\",{\"1\":{\"1015\":1}}],[\"就在该字符前面再加一个反斜杠\",{\"1\":{\"384\":1}}],[\"就在他一筹莫展的时候\",{\"1\":{\"24\":1}}],[\"就近\",{\"1\":{\"378\":1}}],[\"就像访问数组一样\",{\"1\":{\"1204\":1}}],[\"就像浏览器的前进和后退按钮一样\",{\"1\":{\"1097\":1}}],[\"就像我们这个可爱的世界一样\",{\"1\":{\"1083\":1}}],[\"就像这样\",{\"1\":{\"364\":1}}],[\"就像是阿喀琉斯之踵\",{\"1\":{\"23\":1}}],[\"就向客户端返回请求的数据\",{\"1\":{\"360\":1}}],[\"就重定向\",{\"1\":{\"355\":1}}],[\"就说明这个cookie已经被篡改过了\",{\"1\":{\"350\":1}}],[\"就写入\",{\"1\":{\"263\":1}}],[\"就成了翻译官\",{\"1\":{\"156\":1}}],[\"就导致了开发者面对不同版本的浏览器要使用不同的语言\",{\"1\":{\"146\":1}}],[\"就提供了一个基于\",{\"1\":{\"143\":1}}],[\"就会变为\",{\"1\":{\"2054\":1}}],[\"就会变化\",{\"1\":{\"2050\":1}}],[\"就会找到parent\",{\"1\":{\"1910\":1}}],[\"就会通知到组件\",{\"1\":{\"1804\":1}}],[\"就会导致主线程长期处于\",{\"1\":{\"1558\":1}}],[\"就会发现路径从\",{\"1\":{\"1543\":1}}],[\"就会发出警告\",{\"1\":{\"1429\":1}}],[\"就会发生变化\",{\"1\":{\"2058\":1}}],[\"就会发生内存泄露\",{\"1\":{\"865\":1}}],[\"就会发生命名冲突\",{\"1\":{\"835\":1}}],[\"就会发生名字冲突\",{\"1\":{\"378\":1}}],[\"就会被调用\",{\"1\":{\"1364\":2,\"2071\":1}}],[\"就会有对应的\",{\"1\":{\"1154\":1}}],[\"就会触发resize事件\",{\"1\":{\"1150\":1}}],[\"就会触发这个事件\",{\"1\":{\"1150\":1}}],[\"就会触发\",{\"1\":{\"1150\":1,\"2061\":1}}],[\"就会触发一个事件\",{\"1\":{\"1135\":1}}],[\"就会触发一个\",{\"1\":{\"770\":1}}],[\"就会不停的重复地触发\",{\"1\":{\"1148\":1}}],[\"就会弹出相应的桌面通知\",{\"1\":{\"1105\":1}}],[\"就会改变\",{\"1\":{\"1053\":1}}],[\"就会造成内存泄露\",{\"1\":{\"1030\":1}}],[\"就会为该环境创建一个执行上下文\",{\"1\":{\"1013\":1}}],[\"就会指向全局对象\",{\"1\":{\"995\":1}}],[\"就会得到一个\",{\"1\":{\"980\":1}}],[\"就会用非数组对象创建所需的数据结构\",{\"1\":{\"859\":1}}],[\"就会缺一块\",{\"1\":{\"650\":1}}],[\"就会无法显示\",{\"1\":{\"648\":1}}],[\"就会默认启动一个进程\",{\"1\":{\"408\":1}}],[\"就会自动销毁\",{\"1\":{\"401\":1}}],[\"就会\",{\"1\":{\"347\":1}}],[\"就会失效\",{\"1\":{\"345\":1}}],[\"就会执行\",{\"1\":{\"273\":1}}],[\"就会报错\",{\"1\":{\"238\":1}}],[\"就会把非\",{\"1\":{\"138\":1}}],[\"就会将之前的\",{\"1\":{\"129\":1}}],[\"就越来越明显\",{\"1\":{\"117\":1}}],[\"就是组件的\",{\"1\":{\"2071\":1}}],[\"就是函数执行后的返回值\",{\"1\":{\"2070\":1}}],[\"就是声明了三个变量\",{\"1\":{\"2061\":1}}],[\"就是为了让用户从\",{\"1\":{\"2058\":1}}],[\"就是创建一个\",{\"1\":{\"2058\":1}}],[\"就是对传入的\",{\"1\":{\"2054\":1}}],[\"就是当你刷新页面的时候\",{\"1\":{\"2050\":1}}],[\"就是当前的路由参数\",{\"1\":{\"2070\":1}}],[\"就是当前正在指向的函数对象\",{\"1\":{\"932\":1}}],[\"就是当前这个包的一个\",{\"1\":{\"66\":1}}],[\"就是上面编码的逆操作\",{\"1\":{\"2045\":1}}],[\"就是单纯的将其他文件的工具方法或者类型导出而已\",{\"1\":{\"2040\":1}}],[\"就是从当前的\",{\"1\":{\"2031\":1}}],[\"就是所谓的\",{\"1\":{\"1923\":1}}],[\"就是能够响应for\",{\"1\":{\"1921\":1}}],[\"就是获取计算属性\",{\"1\":{\"1846\":1}}],[\"就是在调用\",{\"1\":{\"2047\":1}}],[\"就是在创建组件构造函数\",{\"1\":{\"1845\":1}}],[\"就是在使用\",{\"1\":{\"822\":1}}],[\"就是prop默认值是对象类型\",{\"1\":{\"1840\":1}}],[\"就是简单请求\",{\"1\":{\"1607\":1}}],[\"就是服务器的表演时间了\",{\"1\":{\"1537\":1}}],[\"就是把max\",{\"1\":{\"1535\":1}}],[\"就是把一个值转换为\",{\"1\":{\"810\":1}}],[\"就是一块一块的位图\",{\"1\":{\"1526\":1}}],[\"就是一组\",{\"1\":{\"1455\":1}}],[\"就是一个泛型对象\",{\"1\":{\"2058\":1}}],[\"就是一个对象\",{\"1\":{\"1897\":1}}],[\"就是一个与当前副作用函数存在联系的依赖集合\",{\"1\":{\"1890\":1,\"1985\":1}}],[\"就是一个静态方法\",{\"1\":{\"875\":1}}],[\"就是一个多维数组\",{\"1\":{\"848\":1}}],[\"就是被添加的节点\",{\"1\":{\"1209\":1}}],[\"就是要删除的属性名\",{\"1\":{\"1205\":1}}],[\"就是要求数据类型和数值都必须相等\",{\"1\":{\"814\":1}}],[\"就是事件对象\",{\"1\":{\"1151\":1}}],[\"就是这种方法已经过时了\",{\"1\":{\"1143\":1}}],[\"就是和事件绑定在一起的函数\",{\"1\":{\"1142\":1}}],[\"就是说在\",{\"1\":{\"1112\":1}}],[\"就是定时器不断修改\",{\"1\":{\"1104\":1}}],[\"就是作用域链\",{\"1\":{\"1019\":1}}],[\"就是作为\",{\"1\":{\"861\":1}}],[\"就是某些数组方法可以接受一个函数当作参数\",{\"1\":{\"995\":1}}],[\"就是可以像链条一样一直调用方法\",{\"1\":{\"947\":1}}],[\"就是利用了这一特性\",{\"1\":{\"943\":1}}],[\"就是字面的含义\",{\"1\":{\"902\":1}}],[\"就是字符串的内容本身包含单引号或者双引号的话\",{\"1\":{\"789\":1}}],[\"就是求一组数值的最大值和最小值\",{\"1\":{\"881\":1}}],[\"就是将导航守卫函数转为\",{\"1\":{\"2074\":1}}],[\"就是将当前的路由值\",{\"1\":{\"2061\":1}}],[\"就是将\",{\"1\":{\"847\":1,\"1772\":1}}],[\"就是将一个复杂类型的数据分解为一个普通类型数据\",{\"1\":{\"847\":1}}],[\"就是将一些预先设计好的功能或者说\",{\"1\":{\"57\":1}}],[\"就是我们的命名空间\",{\"1\":{\"835\":1}}],[\"就是我们平常所常见的小数\",{\"1\":{\"793\":1}}],[\"就是使用对象字面量来为一组相关函数创建一个命名空间\",{\"1\":{\"835\":1}}],[\"就是取反\",{\"1\":{\"810\":1}}],[\"就是指在\",{\"1\":{\"1572\":1}}],[\"就是指在使用var关键字进行变量声明的时候\",{\"1\":{\"939\":1}}],[\"就是指无论你触发的是什么事件\",{\"1\":{\"1152\":1}}],[\"就是指复制某个节点和其子节点\",{\"1\":{\"1123\":1}}],[\"就是指指克隆某一个节点\",{\"1\":{\"1123\":1}}],[\"就是指触发事件后在规定时间内函数只能执行一次\",{\"1\":{\"1035\":1}}],[\"就是指将简单值赋值给变量\",{\"1\":{\"985\":1}}],[\"就是指将一个函数作为参数传递给另外一个函数\",{\"1\":{\"943\":1}}],[\"就是指函数可以像其他数据类型一样作为函数的参数传入\",{\"1\":{\"943\":1}}],[\"就是指用方括号表示的一组字符\",{\"1\":{\"903\":1}}],[\"就是指从\",{\"1\":{\"874\":1}}],[\"就是指只作用于一个操作数的运算符\",{\"1\":{\"804\":1}}],[\"就是指数据不同的种类\",{\"1\":{\"787\":1}}],[\"就是只程序员强制将一种类型转换为另外一种类型\",{\"1\":{\"801\":1}}],[\"就是没有申明的变量\",{\"1\":{\"798\":1}}],[\"就是tostring\",{\"1\":{\"789\":1}}],[\"就是变量在程序中能够被访问到的区域\",{\"1\":{\"784\":1}}],[\"就是全屏\",{\"1\":{\"650\":1}}],[\"就是布局视口和视觉视口的大小相同\",{\"1\":{\"648\":1}}],[\"就是视觉视口\",{\"1\":{\"648\":1}}],[\"就是轮廓不会影响到可见框的大小\",{\"1\":{\"611\":1}}],[\"就是它的包含块\",{\"1\":{\"570\":1}}],[\"就是重命名了\",{\"1\":{\"254\":1}}],[\"就是通过直接修改节点内部信息来简化节点的操作步骤\",{\"1\":{\"1124\":1}}],[\"就是通过程序从文件中取出其中的数据\",{\"1\":{\"249\":1}}],[\"就是通过一个一个的节点来记录代码的状态的\",{\"1\":{\"10\":1}}],[\"就是用户调用\",{\"1\":{\"2042\":1}}],[\"就是用一个js对象来描述一个dom节点\",{\"1\":{\"1788\":1}}],[\"就是用于引用内存中存储的一个值\",{\"1\":{\"778\":1}}],[\"就是用于解决这样的问题\",{\"1\":{\"146\":1}}],[\"就是用\",{\"1\":{\"222\":1}}],[\"就是基于\",{\"1\":{\"221\":1,\"222\":1}}],[\"就是插件\",{\"1\":{\"156\":1}}],[\"就是\",{\"1\":{\"149\":1,\"310\":1,\"797\":1,\"980\":1,\"996\":1,\"1219\":1,\"1902\":1,\"1910\":1,\"1990\":1,\"2047\":1}}],[\"就是检测系统环境的node\",{\"1\":{\"71\":1}}],[\"就相当于告诉客户端\",{\"1\":{\"1537\":1}}],[\"就相当于一个链接\",{\"1\":{\"1094\":1}}],[\"就相当于\",{\"1\":{\"49\":1}}],[\"就遇到了一些挑战\",{\"1\":{\"37\":1}}],[\"还原为明文数据\",{\"1\":{\"2099\":1}}],[\"还原为之前的值\",{\"1\":{\"1891\":1,\"1893\":1}}],[\"还内置了另一个组件\",{\"1\":{\"2032\":1}}],[\"还包含主要的路由跳转\",{\"1\":{\"2029\":1}}],[\"还包括其他的功能\",{\"1\":{\"1944\":1}}],[\"还包括梯度等额外信息\",{\"1\":{\"1670\":1}}],[\"还包括下划线\",{\"1\":{\"904\":1}}],[\"还没有执行完毕\",{\"1\":{\"1892\":1}}],[\"还没有构建工具出现时\",{\"1\":{\"1543\":1}}],[\"还应该有解析文本的文本解析器以及解析文本中如果包含过滤器的过滤器解析器\",{\"1\":{\"1791\":1}}],[\"还要找\",{\"1\":{\"1243\":1}}],[\"还提供位置坐标的准确度\",{\"1\":{\"1101\":1}}],[\"还提供了使用\",{\"1\":{\"768\":1}}],[\"还将\",{\"1\":{\"995\":1}}],[\"还能够针对服务器的各种响应结果做出不同的自动处理\",{\"1\":{\"1570\":1}}],[\"还能用于生成重复类名\",{\"1\":{\"1332\":1}}],[\"还能对\",{\"1\":{\"918\":1}}],[\"还能保证网站能正常访问\",{\"1\":{\"508\":1}}],[\"还为数组提供了两个位置方法\",{\"1\":{\"856\":1}}],[\"还专门提供了\",{\"1\":{\"846\":1}}],[\"还定义了一个isnan\",{\"1\":{\"795\":1}}],[\"还介绍了分割文件以及监控读取进度等操作\",{\"1\":{\"773\":1}}],[\"还会包含一些文本信息以及在文本信息中包含过滤器\",{\"1\":{\"1791\":1}}],[\"还会保存每个分组匹配的文本\",{\"1\":{\"911\":1}}],[\"还会使画布中的内容等比例缩放\",{\"1\":{\"703\":1}}],[\"还会有自己的属性可供调用者查看\",{\"1\":{\"377\":1}}],[\"还有匿名行盒\",{\"1\":{\"1526\":1}}],[\"还有更多值为假\",{\"1\":{\"1284\":1}}],[\"还有\",{\"1\":{\"1219\":1}}],[\"还有些诸如\",{\"1\":{\"1218\":1}}],[\"还有种更简便的方法转换\",{\"1\":{\"1198\":1}}],[\"还有就是\",{\"1\":{\"1148\":1}}],[\"还有window\",{\"1\":{\"1097\":1}}],[\"还有screenx和screeny\",{\"1\":{\"1087\":1}}],[\"还有诸如foreach\",{\"1\":{\"944\":1}}],[\"还有着特殊的含义\",{\"1\":{\"902\":1}}],[\"还有+=\",{\"1\":{\"805\":1}}],[\"还有两个简写属性margin\",{\"1\":{\"546\":1}}],[\"还有一种情况比较隐蔽\",{\"1\":{\"995\":1}}],[\"还有一点要注意的是\",{\"1\":{\"939\":1}}],[\"还有一点需要注意的是\",{\"1\":{\"933\":1}}],[\"还有一点就是布尔类型的字面值\",{\"1\":{\"796\":1}}],[\"还有一些字符\",{\"1\":{\"902\":1}}],[\"还有一些其他的转换规则如下\",{\"1\":{\"813\":1}}],[\"还有一些状态码\",{\"1\":{\"271\":1}}],[\"还有一个opener属性\",{\"1\":{\"1088\":1}}],[\"还有一个知识点\",{\"1\":{\"789\":1}}],[\"还有一个例子是\",{\"1\":{\"222\":1}}],[\"还比较指针是否相等\",{\"1\":{\"398\":1}}],[\"还需在环境变量里进行配置\",{\"1\":{\"379\":1}}],[\"还需要根据计算出来的\",{\"1\":{\"2068\":1}}],[\"还需要做类似处理的数组方法有\",{\"1\":{\"1924\":1}}],[\"还需要注意的是\",{\"1\":{\"856\":1,\"1086\":1}}],[\"还需要注意\",{\"1\":{\"812\":1}}],[\"还需要注意一点的是\",{\"1\":{\"865\":1}}],[\"还需要注意一点\",{\"1\":{\"798\":1}}],[\"还需要先做的一件事儿就是声明变量\",{\"1\":{\"778\":1}}],[\"还需要查询数据库获取用户信息\",{\"1\":{\"369\":1}}],[\"还需要在项目根目录下面创建\",{\"1\":{\"148\":1}}],[\"还是\",{\"1\":{\"2035\":1,\"2058\":2,\"2074\":1}}],[\"还是调用\",{\"1\":{\"1921\":1}}],[\"还是预检请求\",{\"1\":{\"1612\":1}}],[\"还是一些组件在用\",{\"1\":{\"1435\":1}}],[\"还是要根据具体业务具体分析\",{\"1\":{\"1243\":1}}],[\"还是从原型对象上面继承而来的\",{\"1\":{\"1067\":1}}],[\"还是在计算机领域\",{\"1\":{\"1033\":1}}],[\"还是上面这道题目\",{\"1\":{\"991\":1}}],[\"还是处于函数作用域\",{\"1\":{\"958\":1}}],[\"还是以let或者说const的方式声明的呢\",{\"1\":{\"939\":1}}],[\"还是构造函数方式创建的正则表达式\",{\"1\":{\"901\":1}}],[\"还是构造函数创建的数组\",{\"1\":{\"842\":1}}],[\"还是很合理的\",{\"1\":{\"748\":1}}],[\"还是需要设置路由\",{\"1\":{\"316\":1}}],[\"还是需要安装此插件\",{\"1\":{\"129\":1}}],[\"还是比较简单的\",{\"1\":{\"23\":1}}],[\"还允许有一个默认导出\",{\"1\":{\"51\":1}}],[\"还可以用来描述组件\",{\"1\":{\"1879\":1}}],[\"还可以用在别的场合\",{\"1\":{\"990\":1}}],[\"还可以绑定为一个函数\",{\"1\":{\"1499\":1}}],[\"还可以从页面流向\",{\"1\":{\"1356\":1}}],[\"还可以包含一些插值\",{\"1\":{\"1255\":1}}],[\"还可以把跑步过程对应的坐标显示在地图上\",{\"1\":{\"1100\":1}}],[\"还可以接收更多的参数\",{\"1\":{\"995\":1}}],[\"还可以将数组中的空值\",{\"1\":{\"995\":1}}],[\"还可以将被经过的元素称为过程对象\",{\"1\":{\"764\":1}}],[\"还可以存储许多信息\",{\"1\":{\"768\":1}}],[\"还可以使用linear\",{\"1\":{\"636\":1}}],[\"还可以是json\",{\"1\":{\"270\":1}}],[\"还可以和服务器之间进行交互\",{\"1\":{\"23\":1}}],[\"还可以通过变基来完成分支的合并\",{\"1\":{\"11\":1}}],[\"但若能够更改浏览器的证书验证过程\",{\"1\":{\"2091\":1}}],[\"但发送给客户端普通的\",{\"1\":{\"2091\":1}}],[\"但某些用户安全意识不强\",{\"1\":{\"2091\":1}}],[\"但应该将当前字符缓存到\",{\"1\":{\"1974\":1}}],[\"但仍然需要调用\",{\"1\":{\"1962\":1}}],[\"但仍然需要调用patch函数更新\",{\"1\":{\"1962\":1}}],[\"但无论哪种情况\",{\"1\":{\"1951\":1}}],[\"但无法直接访问\",{\"1\":{\"1318\":1}}],[\"但这里运行就会出错\",{\"1\":{\"1931\":1}}],[\"但这道题我不会\",{\"1\":{\"1635\":1}}],[\"但于此同时还会设置\",{\"1\":{\"1925\":1}}],[\"但既然在语法上是可行的\",{\"1\":{\"1920\":1}}],[\"但问题是该副作用函数正在执行中\",{\"1\":{\"1892\":1}}],[\"但目前的响应系统不支持嵌套\",{\"1\":{\"1891\":1}}],[\"但随之带来的是可维护性的巨大提升\",{\"1\":{\"1872\":1}}],[\"但一般情况下情况会更加复杂\",{\"1\":{\"1969\":1}}],[\"但一定可以感觉到作者的感情色彩\",{\"1\":{\"1686\":1}}],[\"但一旦这些请求完成之后\",{\"1\":{\"1640\":1}}],[\"但毕竟比短轮询好多了\",{\"1\":{\"1646\":1}}],[\"但长轮询仍然存在问题\",{\"1\":{\"1646\":1}}],[\"但了解过去的一些做法\",{\"1\":{\"1644\":1}}],[\"但我没有你要的东西\",{\"1\":{\"1635\":1}}],[\"但你们已经\",{\"1\":{\"1621\":1}}],[\"但直接请求腾讯服务器会造成跨域\",{\"1\":{\"1615\":1}}],[\"但总体的原则非常简单\",{\"1\":{\"1603\":1}}],[\"但同时也暴露了数据\",{\"1\":{\"1569\":1}}],[\"但浏览器必须有一个微队列\",{\"1\":{\"1560\":1}}],[\"但消息队列是有优先级的\",{\"1\":{\"1560\":1}}],[\"但缓存仍然被记录下来\",{\"1\":{\"1541\":1}}],[\"但可能在某些场景可能有用\",{\"1\":{\"1539\":2}}],[\"但可以批量创建多个\",{\"1\":{\"1502\":1}}],[\"但可以继承它的样式\",{\"1\":{\"1309\":1}}],[\"但当值为空字符串时\",{\"1\":{\"1949\":1}}],[\"但当服务器更改了资源后\",{\"1\":{\"1536\":1}}],[\"但当你的样式变得越来越复杂\",{\"1\":{\"1291\":1}}],[\"但变化时只是外层属性变化\",{\"1\":{\"1504\":1}}],[\"但需要将当前字符缓存到\",{\"1\":{\"1974\":2}}],[\"但需要\",{\"1\":{\"1486\":1}}],[\"但app比vm更\",{\"1\":{\"1484\":1}}],[\"但使用数据所遍历出来的结构由\",{\"1\":{\"1446\":1}}],[\"但使用时要加v\",{\"1\":{\"1408\":1}}],[\"但根据数据生成的结构需要组件的使用者来决定\",{\"1\":{\"1446\":1}}],[\"但如今\",{\"1\":{\"1445\":1}}],[\"但如果我们执行了多次\",{\"1\":{\"1925\":1,\"1993\":1}}],[\"但如果服务器觉得缓存仍然有效\",{\"1\":{\"1537\":1}}],[\"但如果和setdada\",{\"1\":{\"1161\":1}}],[\"但如果环视结构出现捕获型括号\",{\"1\":{\"918\":1}}],[\"但也有点区别\",{\"1\":{\"1415\":1}}],[\"但也不能盲目使用\",{\"1\":{\"1237\":1}}],[\"但原生\",{\"1\":{\"1411\":1}}],[\"但效率低\",{\"1\":{\"1394\":1}}],[\"但要求结构不能被\",{\"1\":{\"1388\":1}}],[\"但注意要转为\",{\"1\":{\"1370\":1}}],[\"但后者可以传参\",{\"1\":{\"1368\":1}}],[\"但灵活性比混合低\",{\"1\":{\"1339\":1}}],[\"但其中可优化的点很多\",{\"1\":{\"1974\":1}}],[\"但其中仍然有不少细节值得我们注意\",{\"1\":{\"1538\":1}}],[\"但其实它们也可以嵌套在样式块中或纯\",{\"1\":{\"1314\":1}}],[\"但其参数并不是一个字符串\",{\"1\":{\"875\":1}}],[\"但对于所有的第三方请求\",{\"1\":{\"2088\":1}}],[\"但对于我们理解整体流程来说\",{\"1\":{\"1998\":1}}],[\"但对于\",{\"1\":{\"1932\":1}}],[\"但对\",{\"1\":{\"1319\":1}}],[\"但对其他样式代码和\",{\"1\":{\"1309\":1}}],[\"但对程序的灵活性有较高的要求\",{\"1\":{\"218\":1}}],[\"但作用却完全不一样\",{\"1\":{\"1309\":1}}],[\"但还是有些微小的差别\",{\"1\":{\"1284\":1}}],[\"但还是能通过\",{\"1\":{\"345\":1}}],[\"但与\",{\"1\":{\"1253\":1}}],[\"但与其他语言相比\",{\"1\":{\"921\":1}}],[\"但又不可能在所有子元素甚至孙元素上绑定事件\",{\"1\":{\"1241\":1}}],[\"但性能上也会有所影响\",{\"1\":{\"1238\":1}}],[\"但指定的节点本身不会删除\",{\"1\":{\"1211\":1}}],[\"但却十分有用\",{\"1\":{\"1160\":1}}],[\"但在浏览器实际的实现中与规范有出入\",{\"1\":{\"1777\":1}}],[\"但在早期\",{\"1\":{\"1572\":1}}],[\"但在\",{\"1\":{\"1486\":1}}],[\"但在具体实现在还是有一些差别\",{\"1\":{\"1139\":1}}],[\"但在这些浏览器上你应该要给用户展示些替代内容\",{\"1\":{\"702\":1}}],[\"但有两个被更名\",{\"1\":{\"1500\":1}}],[\"但有意思的是\",{\"1\":{\"1138\":1}}],[\"但有时按照不严谨处理\",{\"1\":{\"1747\":1}}],[\"但有时某些元素的值又不一样\",{\"1\":{\"1295\":1}}],[\"但有时\",{\"1\":{\"337\":1}}],[\"但很快它就遇到一个严重的问题\",{\"1\":{\"1030\":1}}],[\"但简单值不可以\",{\"1\":{\"984\":1}}],[\"但没有赋值时\",{\"1\":{\"980\":1}}],[\"但实际上可能会导致\",{\"1\":{\"2035\":1}}],[\"但实际上循环代理对象时\",{\"1\":{\"1931\":1}}],[\"但实际上是克隆成功了的\",{\"1\":{\"1123\":1}}],[\"但实际上\",{\"1\":{\"916\":1}}],[\"但实际上它们之间还是有几个关键性的区别\",{\"1\":{\"895\":1}}],[\"但由于并不需要捕获文本\",{\"1\":{\"913\":1}}],[\"但二者之间真正的区别在于模版字面量存在变量占位符\",{\"1\":{\"790\":1}}],[\"但数据不可用时触发\",{\"1\":{\"752\":1}}],[\"但并没有与之对应的\",{\"1\":{\"681\":1}}],[\"但从语义的角度上来讲\",{\"1\":{\"666\":1}}],[\"但因为一些客观的原因\",{\"1\":{\"1038\":1}}],[\"但因为\",{\"1\":{\"616\":1}}],[\"但内容区均能显示出来\",{\"1\":{\"582\":1}}],[\"但元素脱离标准流之后不受其约束\",{\"1\":{\"541\":1}}],[\"但必须是最少为1\",{\"1\":{\"418\":1}}],[\"但只有类可以修改类变量\",{\"1\":{\"405\":1}}],[\"但集合和字典不支持如下操作\",{\"1\":{\"389\":1}}],[\"但不推荐这样做\",{\"1\":{\"1429\":1}}],[\"但不确定用不用\",{\"1\":{\"1385\":1}}],[\"但不建议去除命名空间\",{\"1\":{\"1304\":1}}],[\"但不建议添加敏感信息\",{\"1\":{\"366\":1}}],[\"但不能混合使用空格和逗号\",{\"1\":{\"1267\":1}}],[\"但不包括子元素\",{\"1\":{\"1148\":1}}],[\"但不管是什么场合\",{\"1\":{\"990\":1}}],[\"但不和其实例进行交\",{\"1\":{\"405\":1}}],[\"但不会处理具体的任务\",{\"1\":{\"224\":1}}],[\"但\",{\"1\":{\"358\":1,\"681\":1,\"1319\":1,\"1493\":1,\"1498\":1,\"1614\":1,\"1647\":1,\"1673\":1}}],[\"但它们的基本原理都是将任意长度的数据转换为固定长度的输出数据\",{\"1\":{\"2101\":1}}],[\"但它们拥有几何信息\",{\"1\":{\"1526\":1}}],[\"但它需要一个自定义语法\",{\"1\":{\"1519\":1}}],[\"但它并不能完全代替\",{\"1\":{\"1225\":1}}],[\"但它可能嵌套在另一个块级元素里面\",{\"1\":{\"661\":1}}],[\"但它可以包含可变的对象\",{\"1\":{\"391\":1}}],[\"但它提供了一些可以扩展其功能的机制\",{\"1\":{\"122\":1}}],[\"但它深刻的影响到开发进度\",{\"1\":{\"116\":1}}],[\"但此时页面可能并没有加载完成\",{\"1\":{\"1240\":1}}],[\"但此时签名信息并没有发生任何改变\",{\"1\":{\"350\":1}}],[\"但此时\",{\"1\":{\"23\":1}}],[\"但是两者的长度可能是不一致\",{\"1\":{\"2073\":1}}],[\"但是两端存在\",{\"1\":{\"976\":1}}],[\"但是组件实例没有发生变化\",{\"1\":{\"2069\":1}}],[\"但是支持自定义渲染方式\",{\"1\":{\"2064\":1}}],[\"但是得到的却是\",{\"1\":{\"2058\":1}}],[\"但是服务器后端无法找到对应的资源\",{\"1\":{\"2050\":1}}],[\"但是也有一个缺点\",{\"1\":{\"2050\":1}}],[\"但是也是从\",{\"1\":{\"1140\":1}}],[\"但是没有实现\",{\"1\":{\"1931\":1}}],[\"但是数组中还有一些其他方法会修改原始数据\",{\"1\":{\"1925\":1}}],[\"但是此时有一个新的问题出现\",{\"1\":{\"1923\":1}}],[\"但是此时我们不希望出现默认行为\",{\"1\":{\"1121\":1}}],[\"但是具体到某些方法\",{\"1\":{\"1923\":1}}],[\"但是会触发子组件更新\",{\"1\":{\"1842\":1}}],[\"但是会影响盒子的位置\",{\"1\":{\"546\":1}}],[\"但是oldnode中有文本\",{\"1\":{\"1789\":1}}],[\"但是我就是不给你东西\",{\"1\":{\"1635\":1}}],[\"但是我们建议一般还是写上比较好\",{\"1\":{\"1152\":1}}],[\"但是我们向外部返回了\",{\"1\":{\"1023\":1}}],[\"但是我们可以想象一下\",{\"1\":{\"835\":1}}],[\"但是我们可以通过一些方式对其进行模拟\",{\"1\":{\"485\":1}}],[\"但是呢\",{\"1\":{\"1635\":2}}],[\"但是凑巧客户端是一个浏览器\",{\"1\":{\"1534\":1}}],[\"但是出于安全性考虑\",{\"1\":{\"1493\":1}}],[\"但是需要与后端提前协定好可以访问资源的客户端\",{\"1\":{\"1442\":1}}],[\"但是需要注意上面题目的变种\",{\"1\":{\"991\":1}}],[\"但是需要注意的一个问题是\",{\"1\":{\"897\":1}}],[\"但是需要注意的是建立\",{\"1\":{\"861\":1}}],[\"但是需要注意的是\",{\"1\":{\"828\":1}}],[\"但是因为\",{\"1\":{\"1433\":1}}],[\"但是获取不到父元素\",{\"1\":{\"1407\":1}}],[\"但是较为繁琐\",{\"1\":{\"1382\":1}}],[\"但是多了一个model属性\",{\"1\":{\"1358\":1}}],[\"但是使用\",{\"1\":{\"1301\":1}}],[\"但是还有些方法并不会返回当前\",{\"1\":{\"1232\":1}}],[\"但是还是有一个注意点\",{\"1\":{\"792\":1}}],[\"但是要注意其中的回调函数必须和添加该事件时的回调函数相同\",{\"1\":{\"1216\":1}}],[\"但是其中每种情况都有两个一样效果的方法\",{\"1\":{\"1209\":1}}],[\"但是其会脱离文档流\",{\"1\":{\"564\":1}}],[\"但是消息队列是有优先级的\",{\"1\":{\"1181\":1}}],[\"但是想象一下如果这个列表有\",{\"1\":{\"1158\":1}}],[\"但是现在大多数浏览器都实现了该方式\",{\"1\":{\"1156\":1}}],[\"但是现在我们可以使用解构来交换两个数\",{\"1\":{\"847\":1}}],[\"但是事件冒泡并不是说只有缺点没有优点\",{\"1\":{\"1158\":1}}],[\"但是事件冒泡带给我们很不方便的一点在于\",{\"1\":{\"1155\":1}}],[\"但是事件处理会被看成是冒泡阶段的一部分\",{\"1\":{\"1141\":1}}],[\"但是标准未定义滚轮事件具体会引发什么样的行为\",{\"1\":{\"1153\":1}}],[\"但是火狐不支持该属性\",{\"1\":{\"1153\":1}}],[\"但是再进入到子元素时不会再触发\",{\"1\":{\"1148\":1}}],[\"但是演示的全部都是点击事件\",{\"1\":{\"1147\":1}}],[\"但是有损灵活性\",{\"1\":{\"1874\":1}}],[\"但是有些时候\",{\"1\":{\"1156\":1}}],[\"但是有些内容比如\",{\"1\":{\"15\":1}}],[\"但是有一个方法例外\",{\"1\":{\"2047\":1}}],[\"但是有一些细微的不同\",{\"1\":{\"1153\":1}}],[\"但是有一点需要注意\",{\"1\":{\"1143\":1}}],[\"但是只触发一次\",{\"1\":{\"1817\":1}}],[\"但是只支持\",{\"1\":{\"1124\":1}}],[\"但是只要有一个操作数为真\",{\"1\":{\"809\":1}}],[\"但是前面所介绍的方式\",{\"1\":{\"1124\":1}}],[\"但是存在一个问题\",{\"1\":{\"1120\":1}}],[\"但是上面也有讲过\",{\"1\":{\"1104\":1}}],[\"但是上面的代码是在谷歌浏览器里面运行的\",{\"1\":{\"1087\":1}}],[\"但是大部分接口都需要谷歌地图来提供服务支持\",{\"1\":{\"1102\":1}}],[\"但是大多都是由之前介绍过的字符组\",{\"1\":{\"920\":1}}],[\"但是由于\",{\"1\":{\"1087\":1}}],[\"但是创建多个对象时重复代码较多\",{\"1\":{\"1046\":1}}],[\"但是一个常见的错误是\",{\"1\":{\"995\":1}}],[\"但是一般用不到\",{\"1\":{\"238\":1}}],[\"但是返回结果都是数组\",{\"1\":{\"995\":1}}],[\"但是是\",{\"1\":{\"958\":1}}],[\"但是形参的数量不包括剩余参数个数\",{\"1\":{\"951\":1}}],[\"但是它不是特别灵活\",{\"1\":{\"1307\":1}}],[\"但是它不会将代码和当前分支自动合并\",{\"1\":{\"13\":1}}],[\"但是它\",{\"1\":{\"1299\":1}}],[\"但是它并不是节点的替换\",{\"1\":{\"1208\":1}}],[\"但是它也有一个缺点\",{\"1\":{\"1144\":1}}],[\"但是它的外部仍然能输出它的结果\",{\"1\":{\"948\":1}}],[\"但是同样会存在变量提升\",{\"1\":{\"940\":1}}],[\"但是注意提升的只有变量的声明部分\",{\"1\":{\"939\":1}}],[\"但是并不赋值\",{\"1\":{\"931\":1}}],[\"但是并不是太全面\",{\"1\":{\"990\":1}}],[\"但是并不是空的\",{\"1\":{\"865\":1}}],[\"但是并不是数组的伪数组对象\",{\"1\":{\"828\":1}}],[\"但是并不是所有的程序都是使用顺序结构就能够完成的\",{\"1\":{\"817\":1}}],[\"但是不要直接使用它\",{\"1\":{\"1539\":1}}],[\"但是不会推入新的状态\",{\"1\":{\"2050\":1}}],[\"但是不会触发keypress事件\",{\"1\":{\"1154\":1}}],[\"但是不会跳过\",{\"1\":{\"995\":1}}],[\"但是不会给出任何提示\",{\"1\":{\"958\":1}}],[\"但是不会对内容进行捕获\",{\"1\":{\"913\":1}}],[\"但是不具有变量提升\",{\"1\":{\"939\":1}}],[\"但是不包括结束位置的项目\",{\"1\":{\"854\":1}}],[\"但是在一些特殊情况下\",{\"1\":{\"2047\":1}}],[\"但是在一些少数情况下\",{\"1\":{\"1034\":1}}],[\"但是在浏览器中上述代码输出的结果为\",{\"1\":{\"1779\":1}}],[\"但是在另一个文件\",{\"1\":{\"1309\":1}}],[\"但是在导入这些模块时可以不用书写\",{\"1\":{\"1308\":1}}],[\"但是在调用了\",{\"1\":{\"1232\":1}}],[\"但是在引用计数策略下\",{\"1\":{\"1030\":1}}],[\"但是在赋值给\",{\"1\":{\"991\":1}}],[\"但是在严格模式下\",{\"1\":{\"958\":1}}],[\"但是在\",{\"1\":{\"868\":1,\"995\":1,\"1309\":1}}],[\"但是在重新打包之前\",{\"1\":{\"129\":1}}],[\"但是传统上只能用字符串当作键\",{\"1\":{\"867\":1}}],[\"但是该数组依然存在\",{\"1\":{\"865\":1}}],[\"但是无法遍历出用\",{\"1\":{\"830\":1}}],[\"但是无法为不同项目对应不同的\",{\"1\":{\"123\":1}}],[\"但是无论第二个操作数真假\",{\"1\":{\"809\":1}}],[\"但是打印其类型的时候\",{\"1\":{\"798\":1}}],[\"但是通过使用\",{\"1\":{\"770\":1}}],[\"但是经过长期的使用\",{\"1\":{\"767\":1}}],[\"但是调用的时候不需要\",{\"1\":{\"1282\":1}}],[\"但是调用\",{\"1\":{\"711\":1}}],[\"但是增加了一个宽度和线段相同\",{\"1\":{\"708\":1}}],[\"但是html5中的每个元素都具有这个命名空间\",{\"1\":{\"692\":1}}],[\"但是目前来讲大部分浏览器都不会自动对音乐进行播放\",{\"1\":{\"668\":1}}],[\"但是往往都不会有一个好的体验\",{\"1\":{\"649\":1}}],[\"但是如果你通过proxy去获取set\",{\"1\":{\"1927\":1}}],[\"但是如果您是要导入自己写的样式表\",{\"1\":{\"1314\":1}}],[\"但是如果该元素是一棵\",{\"1\":{\"1163\":1}}],[\"但是如果用户没有点击\",{\"1\":{\"1158\":1}}],[\"但是如果是做简单的事件测试\",{\"1\":{\"1143\":1}}],[\"但是如果是\",{\"1\":{\"1086\":1}}],[\"但是如果要匹配多个数字字符\",{\"1\":{\"906\":1}}],[\"但是如果需要使用非数值型索引\",{\"1\":{\"859\":1}}],[\"但是如果对应的值不是一个字符串\",{\"1\":{\"769\":1}}],[\"但是如果网页的宽度超过了\",{\"1\":{\"649\":1}}],[\"但是如果分支已经提交给了远程仓库\",{\"1\":{\"11\":1}}],[\"但是图片大小本身比较大\",{\"1\":{\"622\":1}}],[\"但是实际开发中不建议使用\",{\"1\":{\"524\":1}}],[\"但是这里不是简单的赋值\",{\"1\":{\"2047\":1}}],[\"但是这里在创建这个响应式变量的时候\",{\"1\":{\"2044\":1}}],[\"但是这是没有必要的\",{\"1\":{\"2044\":1}}],[\"但是这两组方法在现代浏览器里面基本上都是被禁用的\",{\"1\":{\"1088\":1}}],[\"但是这个\",{\"1\":{\"2058\":1}}],[\"但是这个节点是一个空白节点\",{\"1\":{\"1112\":1}}],[\"但是这个毫秒数的含义是执行代码前需要等待的毫秒数\",{\"1\":{\"1088\":1}}],[\"但是这个对象的属性和方法太多了\",{\"1\":{\"1084\":1}}],[\"但是这个过程不是实时的\",{\"1\":{\"1028\":1}}],[\"但是这个值又是只读的\",{\"1\":{\"948\":1}}],[\"但是这个变量究竟是以var的形式声明的\",{\"1\":{\"939\":1}}],[\"但是这种做法只进行了一次\",{\"1\":{\"1239\":1}}],[\"但是这种使用方式在严格模式下会报错\",{\"1\":{\"958\":1}}],[\"但是这种变量只能被函数体内的语句使用\",{\"1\":{\"931\":1}}],[\"但是这种方式有个弊端\",{\"1\":{\"1104\":1}}],[\"但是这种方式不太方便\",{\"1\":{\"535\":1}}],[\"但是这种方式存在弊端\",{\"1\":{\"471\":1}}],[\"但是这样很容易造成属性名的冲突\",{\"1\":{\"828\":1}}],[\"但是这些方法并没有包含所有的类型\",{\"1\":{\"1218\":1}}],[\"但是这些\",{\"1\":{\"150\":1,\"694\":1}}],[\"但是这些操作不会出现在任何的分支上\",{\"1\":{\"14\":1}}],[\"但是str\",{\"1\":{\"402\":1}}],[\"但是定义与赋值必须同步进行\",{\"1\":{\"380\":1}}],[\"但是修改了名字\",{\"1\":{\"254\":1}}],[\"但是自己选的路再难走也要走下去\",{\"1\":{\"219\":1}}],[\"但是坑多\",{\"1\":{\"219\":1}}],[\"但是新增了一些\",{\"1\":{\"216\":1}}],[\"但是可以使用exec\",{\"1\":{\"209\":1}}],[\"但是可以比较字符串之间的相等性\",{\"1\":{\"166\":1}}],[\"但是可以更好的适应浏览器环境\",{\"1\":{\"25\":1}}],[\"但是class\",{\"1\":{\"148\":1}}],[\"但是\",{\"1\":{\"82\":1,\"316\":1,\"548\":1,\"783\":1,\"796\":1,\"848\":1,\"867\":1,\"916\":1,\"923\":1,\"980\":2,\"995\":2,\"1078\":1,\"1130\":1,\"1158\":1,\"1204\":1,\"1208\":2,\"1211\":1,\"1224\":1,\"1236\":1,\"1317\":1,\"1318\":1,\"2029\":1,\"2047\":2,\"2049\":1,\"2050\":1,\"2070\":1,\"2088\":1}}],[\"但是变基会使得代码的提交记录更整洁更清晰\",{\"1\":{\"11\":1}}],[\"但是尚未提交到\",{\"1\":{\"7\":1}}],[\"以防止跨站点请求伪造攻击\",{\"1\":{\"2088\":1}}],[\"以字符串\",{\"1\":{\"1954\":1}}],[\"以字符串的形式返回媒体地址\",{\"1\":{\"750\":1}}],[\"以目前的实现\",{\"1\":{\"1931\":1}}],[\"以$\",{\"1\":{\"1804\":1}}],[\"以节省性能\",{\"1\":{\"1789\":1}}],[\"以节省到服务器的往返时间\",{\"1\":{\"1137\":1}}],[\"以拉动为边界\",{\"1\":{\"1750\":1}}],[\"以查看其数据结构\",{\"1\":{\"1674\":1}}],[\"以减轻神经元之间的复杂协同关系\",{\"1\":{\"1664\":1}}],[\"以使输出具有期望的大小\",{\"1\":{\"1663\":1}}],[\"以使其位置不受其他元素的影响\",{\"1\":{\"565\":1}}],[\"以使其可以包含浮动元素\",{\"1\":{\"564\":1}}],[\"以保证不同的标签页之间不相互影响\",{\"1\":{\"1555\":1}}],[\"以保证不同的标签页之间不互相影响\",{\"1\":{\"1168\":1}}],[\"以极高的速度完成光栅化\",{\"1\":{\"1526\":1}}],[\"以了解最新的工具推荐\",{\"1\":{\"1425\":1}}],[\"以ast树的格式存在父节点的chilren数组中\",{\"1\":{\"1352\":1}}],[\"以避免重复刷新\",{\"1\":{\"1954\":1}}],[\"以避免命名冲突\",{\"1\":{\"1313\":1}}],[\"以避免与其他库发生冲突\",{\"1\":{\"1302\":1}}],[\"以避免出现不必要的问题\",{\"1\":{\"995\":1}}],[\"以将\",{\"1\":{\"1262\":1}}],[\"以同样的\",{\"1\":{\"1140\":1}}],[\"以获取用户的准确位置\",{\"1\":{\"1102\":1}}],[\"以备将来收回其内存\",{\"1\":{\"1028\":1}}],[\"以存储它们的值\",{\"1\":{\"1028\":1}}],[\"以数组的\",{\"1\":{\"995\":1}}],[\"以外\",{\"1\":{\"944\":1}}],[\"以外的任意字符\",{\"1\":{\"905\":1}}],[\"以外的数据类型\",{\"1\":{\"789\":1}}],[\"以外的值\",{\"1\":{\"557\":1}}],[\"以外的参数\",{\"1\":{\"405\":1}}],[\"以var的形式进行声明的\",{\"1\":{\"939\":1}}],[\"以竖线|分隔开的多个子表达式也叫选择分支或选择项\",{\"1\":{\"914\":1}}],[\"以分钟为单位\",{\"1\":{\"877\":1}}],[\"以此构造了一个响应式的对象作为当前路由\",{\"1\":{\"2034\":1}}],[\"以此\",{\"1\":{\"2025\":1}}],[\"以此来让组件实例对象可以访问到\",{\"1\":{\"1424\":1}}],[\"以此可以代替以前的math\",{\"1\":{\"803\":1}}],[\"以此类推\",{\"1\":{\"411\":1,\"621\":1,\"1265\":1}}],[\"以便能够渲染出正确的所对应的路由组件\",{\"1\":{\"2068\":1}}],[\"以便在渲染链接的时候添加或者移除活动状态类\",{\"1\":{\"2065\":1}}],[\"以便在渲染链接的时候进行一些特定的处理\",{\"1\":{\"2065\":1}}],[\"以便我们在组件内可以方便地访问路由器和当前路由对象\",{\"1\":{\"2026\":1}}],[\"以便我们指定哪个值位于哪个值的前面\",{\"1\":{\"855\":1}}],[\"以便路由的变化触发页面的重新渲染\",{\"1\":{\"2026\":1}}],[\"以便用户使用\",{\"1\":{\"1897\":1}}],[\"以便于之后用于训练模型\",{\"1\":{\"1655\":1}}],[\"以便于从资源服务器获取资源\",{\"1\":{\"363\":1}}],[\"以便代码阅读\",{\"1\":{\"818\":1}}],[\"以便将其内容读取到内存中\",{\"1\":{\"773\":1}}],[\"以弧度为单位的值\",{\"1\":{\"720\":1}}],[\"以下不属于promisea+规范\",{\"1\":{\"1777\":1}}],[\"以下代码演示了如何使用\",{\"1\":{\"1661\":1}}],[\"以下代码给出了如何使用\",{\"1\":{\"1656\":1,\"1659\":1}}],[\"以下代码展示使用dataloader\",{\"1\":{\"1655\":1}}],[\"以下代码展示了如何使用\",{\"1\":{\"1655\":1}}],[\"以下代码创建了一个\",{\"1\":{\"1655\":1}}],[\"以下是一个不考虑更新节点的简易版本\",{\"1\":{\"1878\":1}}],[\"以下是两者的对比\",{\"1\":{\"1572\":1}}],[\"以下是较常用的方法\",{\"1\":{\"1214\":1}}],[\"以下的浏览器不支持\",{\"1\":{\"1154\":1}}],[\"以下浏览器不支持\",{\"1\":{\"1140\":1}}],[\"以下浏览器返回\",{\"1\":{\"1139\":1}}],[\"以下列\",{\"1\":{\"1139\":1}}],[\"以下格式也支持\",{\"1\":{\"875\":1}}],[\"以下介绍的是\",{\"1\":{\"787\":1}}],[\"以下示例使用\",{\"1\":{\"772\":1}}],[\"以下部分同上\",{\"1\":{\"743\":1}}],[\"以下属性当前的值\",{\"1\":{\"711\":1}}],[\"以下为简单介绍\",{\"1\":{\"668\":1}}],[\"以前我们传递参数时\",{\"1\":{\"833\":1}}],[\"以前的\",{\"1\":{\"692\":1,\"693\":1}}],[\"以前在一起的时候\",{\"1\":{\"219\":1}}],[\"以确保\",{\"1\":{\"649\":1}}],[\"以满足正常在一个移动端窗口的布局\",{\"1\":{\"648\":1}}],[\"以上\",{\"1\":{\"1723\":1}}],[\"以上是现代流行的做法\",{\"1\":{\"1543\":1}}],[\"以上两个验证会导致浏览器产生不同的行为\",{\"1\":{\"1535\":1}}],[\"以上两种渲染模式在渲染方面基本没有明显区别\",{\"1\":{\"691\":1}}],[\"以上的方法实现了显示和隐藏的动画效果\",{\"1\":{\"1224\":1}}],[\"以上的浏览器\",{\"1\":{\"1124\":1}}],[\"以上浏览器不支持\",{\"1\":{\"1156\":1}}],[\"以上代码\",{\"1\":{\"1030\":1}}],[\"以上代码中\",{\"1\":{\"790\":1}}],[\"以上方法都不会改变原数组的值\",{\"1\":{\"945\":1}}],[\"以上均为\",{\"1\":{\"590\":1}}],[\"以上等式必须满足\",{\"1\":{\"553\":1}}],[\"以上所有的百分比都是相对于\",{\"1\":{\"543\":1}}],[\"以英语为例\",{\"1\":{\"552\":1}}],[\"以node作为中间层\",{\"1\":{\"507\":1}}],[\"以对参数进行修改的\",{\"1\":{\"402\":1}}],[\"以右对齐的方式输出\",{\"1\":{\"386\":3}}],[\"以后一直访问的缓存值\",{\"1\":{\"1896\":1}}],[\"以后的内容rest去匹配endtag\",{\"1\":{\"1792\":1}}],[\"以后的内容拿出来赋给rest\",{\"1\":{\"1792\":1}}],[\"以后就不要来烦我了\",{\"1\":{\"1534\":1}}],[\"以后简称\",{\"1\":{\"1423\":2}}],[\"以后数据的改变不会引起v\",{\"1\":{\"1402\":1}}],[\"以后学习到组件时\",{\"1\":{\"1361\":1}}],[\"以后每次运行新函数\",{\"1\":{\"995\":1}}],[\"以后会继续进入后面的\",{\"1\":{\"819\":1}}],[\"以后处理它\",{\"1\":{\"664\":1}}],[\"以后再写移动端的页面\",{\"1\":{\"649\":1}}],[\"以后\",{\"1\":{\"360\":1,\"539\":1,\"995\":1}}],[\"以后下载所有\",{\"1\":{\"68\":1}}],[\"以\",{\"1\":{\"177\":1,\"222\":2,\"340\":1,\"376\":1,\"395\":1,\"514\":1,\"879\":2,\"913\":1,\"1316\":2,\"1485\":1,\"1789\":1,\"1878\":1,\"2034\":1}}],[\"以及新进入的路由记录\",{\"1\":{\"2073\":1}}],[\"以及准备渲染的相应的组件\",{\"1\":{\"2070\":1}}],[\"以及当前路由的信息\",{\"1\":{\"2065\":1}}],[\"以及当前页面的请求方法\",{\"1\":{\"1569\":1}}],[\"以及各种\",{\"1\":{\"2029\":1}}],[\"以及应该如何移动\",{\"1\":{\"1959\":1}}],[\"以及性能上的考虑\",{\"1\":{\"1921\":1}}],[\"以及其他所有不改变原数组的原型方法\",{\"1\":{\"1915\":1}}],[\"以及存储传给子组件的数据\",{\"1\":{\"1834\":1}}],[\"以及把lasttag更新为栈顶元素\",{\"1\":{\"1792\":1}}],[\"以及所有分子小于分母可看作分数的除法\",{\"1\":{\"1721\":1}}],[\"以及要用什么样的\",{\"1\":{\"1626\":1}}],[\"以及每个场景中不同的跨域方式\",{\"1\":{\"1601\":1}}],[\"以及会考虑到旋转\",{\"1\":{\"1526\":1}}],[\"以及它\",{\"1\":{\"1320\":1}}],[\"以及它的用法\",{\"1\":{\"1193\":1}}],[\"以及模块的样式\",{\"1\":{\"1313\":1}}],[\"以及不带引号的字符串\",{\"1\":{\"1265\":1}}],[\"以及前面介绍的那几个显示和隐藏的动画中\",{\"1\":{\"1225\":1}}],[\"以及前端越来越复杂\",{\"1\":{\"219\":1}}],[\"以及下面的子元素进行了完完整整的复制\",{\"1\":{\"1123\":1}}],[\"以及相对应的数字键\",{\"1\":{\"995\":1}}],[\"以及可选的毫秒值\",{\"1\":{\"877\":1}}],[\"以及可选的秒值及毫秒值\",{\"1\":{\"877\":1}}],[\"以及可选的分钟值\",{\"1\":{\"877\":1}}],[\"以及可选的日期值\",{\"1\":{\"877\":1}}],[\"以及可选的月份值和日期值\",{\"1\":{\"877\":1}}],[\"以及entries\",{\"1\":{\"846\":1,\"863\":1}}],[\"以及键和值\",{\"1\":{\"830\":1}}],[\"以及\",{\"1\":{\"240\":1,\"578\":1,\"714\":1,\"716\":1,\"758\":1,\"1086\":1,\"1087\":1,\"1200\":1,\"1530\":1,\"1897\":1,\"1925\":3,\"1993\":1,\"2029\":1,\"2042\":2,\"2047\":1,\"2058\":2,\"2061\":1,\"2064\":1,\"2068\":1,\"2074\":1}}],[\"以及庞大的生态\",{\"1\":{\"217\":1}}],[\"以及处理\",{\"1\":{\"149\":2}}],[\"以及单元测试是否通过\",{\"1\":{\"122\":1}}],[\"以至于目前市面上已有的\",{\"1\":{\"24\":1}}],[\"以更好的体验来改变数据\",{\"1\":{\"23\":1}}],[\"以当前基底开始\",{\"1\":{\"11\":1}}],[\"第1步\",{\"1\":{\"1769\":1}}],[\"第九个匹配的捕获组\",{\"1\":{\"911\":1,\"924\":1}}],[\"第\",{\"1\":{\"764\":2,\"765\":5,\"911\":2,\"1079\":1,\"1105\":1,\"1161\":1,\"1221\":2}}],[\"第四步\",{\"1\":{\"1965\":1}}],[\"第四个值\",{\"1\":{\"613\":1}}],[\"第四阶段\",{\"0\":{\"25\":1}}],[\"第二次构建状态对象和调用\",{\"1\":{\"2058\":1}}],[\"第二次是通过\",{\"1\":{\"2058\":1}}],[\"第二次是\",{\"1\":{\"2058\":1}}],[\"第二次执行调度器先执行过期回调expired\",{\"1\":{\"1987\":1}}],[\"第二步\",{\"1\":{\"1431\":1,\"1951\":1,\"1965\":1}}],[\"第二种是只传入\",{\"1\":{\"2019\":1}}],[\"第二种是长轮询\",{\"1\":{\"1649\":1}}],[\"第二种方式\",{\"1\":{\"1429\":1,\"1437\":1}}],[\"第二种方法\",{\"1\":{\"828\":1}}],[\"第二种写法\",{\"1\":{\"1380\":1,\"1419\":2,\"1420\":1,\"1462\":1}}],[\"第二\",{\"1\":{\"902\":1,\"911\":1,\"924\":1,\"948\":1}}],[\"第二个副作用函数还未执行完毕\",{\"1\":{\"1925\":1}}],[\"第二个副作用函数\",{\"1\":{\"1925\":1}}],[\"第二个以后的参数是插件使用者传递的数据\",{\"1\":{\"1432\":1}}],[\"第二个变量表示\",{\"1\":{\"1290\":1}}],[\"第二个回调等同于\",{\"1\":{\"1217\":1}}],[\"第二个可以传递一个伪元素\",{\"1\":{\"1129\":1}}],[\"第二个是之前旧的值\",{\"1\":{\"2069\":1}}],[\"第二个是数组的索引\",{\"1\":{\"945\":1}}],[\"第二个是延迟\",{\"1\":{\"641\":1}}],[\"第二个参数也是一个字符串字面量\",{\"1\":{\"1975\":2}}],[\"第二个参数是一个对象\",{\"1\":{\"2058\":1}}],[\"第二个参数是一个数组\",{\"1\":{\"1975\":1}}],[\"第二个参数是用来补全的字符串\",{\"1\":{\"893\":1}}],[\"第二个参数表示对应的\",{\"1\":{\"1277\":1}}],[\"第二个参数表示要获取元素的索引\",{\"1\":{\"1268\":1}}],[\"第二个参数为目标元素\",{\"1\":{\"1271\":1}}],[\"第二个参数为要追加的元素\",{\"1\":{\"1270\":1}}],[\"第二个参数则是一个数组\",{\"1\":{\"995\":1}}],[\"第二个参数\",{\"1\":{\"891\":2}}],[\"第二个值表示高度\",{\"1\":{\"633\":1}}],[\"第二个值\",{\"1\":{\"613\":1}}],[\"第二部分我们称其为载荷\",{\"1\":{\"364\":1}}],[\"第二阶段的大事件\",{\"1\":{\"23\":1}}],[\"第二阶段\",{\"0\":{\"23\":1}}],[\"第三个参数是不一样的\",{\"1\":{\"2058\":1}}],[\"第三个值\",{\"1\":{\"613\":1}}],[\"第三步\",{\"1\":{\"1965\":1}}],[\"第三种是传入\",{\"1\":{\"2019\":1}}],[\"第三种写法\",{\"1\":{\"1462\":1}}],[\"第三种方式\",{\"1\":{\"1429\":1}}],[\"第三部分是签证\",{\"1\":{\"364\":1}}],[\"第三方模块\",{\"1\":{\"241\":1,\"377\":1}}],[\"第三方库\",{\"1\":{\"45\":1}}],[\"第三阶段\",{\"0\":{\"24\":1}}],[\"第一句\",{\"1\":{\"2055\":1}}],[\"第一步完成后\",{\"1\":{\"1526\":1}}],[\"第一步\",{\"1\":{\"1426\":1,\"1431\":1,\"1951\":1,\"1965\":1}}],[\"第一种是传入\",{\"1\":{\"2019\":1}}],[\"第一种是\",{\"1\":{\"1877\":1}}],[\"第一种是短轮询\",{\"1\":{\"1649\":1}}],[\"第一种是使用object\",{\"1\":{\"830\":1}}],[\"第一种方式\",{\"1\":{\"1429\":1,\"1437\":1}}],[\"第一种写法\",{\"1\":{\"1380\":1,\"1419\":2,\"1420\":1,\"1462\":1}}],[\"第一\",{\"1\":{\"948\":1}}],[\"第一次构建状态对象和调用\",{\"1\":{\"2058\":1}}],[\"第一次是通过\",{\"1\":{\"2058\":1}}],[\"第一次是\",{\"1\":{\"2058\":1}}],[\"第一次执行调度器注册过期回调\",{\"1\":{\"1987\":1}}],[\"第一次获取计算属性时\",{\"1\":{\"1849\":1}}],[\"第一次的网络请求优先执行\",{\"1\":{\"1181\":1}}],[\"第一次匹配成功后\",{\"1\":{\"919\":1}}],[\"第一次堂堂正正的入主后端\",{\"1\":{\"24\":1}}],[\"第一项是与整个模式匹配的字符串\",{\"1\":{\"911\":1,\"925\":1}}],[\"第一个是当前新的值\",{\"1\":{\"2069\":1}}],[\"第一个是数组的元素值\",{\"1\":{\"945\":1}}],[\"第一个对象里面有一个\",{\"1\":{\"2055\":1}}],[\"第一个副作用函数执行\",{\"1\":{\"1925\":1}}],[\"第一个副作用函数\",{\"1\":{\"1925\":1}}],[\"第一个匹配项的起始位置\",{\"1\":{\"1793\":1}}],[\"第一个变量表示\",{\"1\":{\"1290\":1}}],[\"第一个回调等同于\",{\"1\":{\"1217\":1}}],[\"第一个点击事件已经被移除掉了\",{\"1\":{\"1146\":1}}],[\"第一个为要获取样式的元素\",{\"1\":{\"1129\":1}}],[\"第一个参数刚才所得到的不包含\",{\"1\":{\"2058\":1}}],[\"第一个参数表示\",{\"1\":{\"1277\":1}}],[\"第一个参数表示列表\",{\"1\":{\"1268\":1}}],[\"第一个参数为组件上一次渲染的子树\",{\"1\":{\"1954\":1}}],[\"第一个参数为目标列表\",{\"1\":{\"1270\":1,\"1271\":1}}],[\"第一个参数为待查找的内容\",{\"1\":{\"911\":1}}],[\"第一个参数是字符串字面量\",{\"1\":{\"1975\":1}}],[\"第一个参数是字符串补全生效的最大长度\",{\"1\":{\"893\":1}}],[\"第一个参数是\",{\"1\":{\"995\":1,\"2059\":1}}],[\"第一个参数\",{\"1\":{\"891\":2}}],[\"第一个参数没有任何要求\",{\"1\":{\"405\":1}}],[\"第一个可能的值\",{\"1\":{\"883\":1}}],[\"第一个操作数为假\",{\"1\":{\"808\":1}}],[\"第一个操作数为真\",{\"1\":{\"808\":1}}],[\"第一个无法使用则使用第二个\",{\"1\":{\"621\":1}}],[\"第一个值表示宽度\",{\"1\":{\"633\":1}}],[\"第一个值\",{\"1\":{\"613\":1}}],[\"第一个子元素\",{\"1\":{\"520\":1}}],[\"第一部分我们称它为头部\",{\"1\":{\"364\":1}}],[\"第一阶段发生的大事件\",{\"1\":{\"22\":1}}],[\"第一阶段\",{\"0\":{\"22\":1}}],[\"宣布破产\",{\"1\":{\"22\":1}}],[\"欧洲计算机制造商协会\",{\"1\":{\"22\":1}}],[\"年均增张量\",{\"1\":{\"1747\":1}}],[\"年均增长量表示的是\",{\"1\":{\"1747\":1}}],[\"年均增长量\",{\"0\":{\"1747\":1}}],[\"年均增长率与间隔增长率的一种结合问题\",{\"1\":{\"1748\":1}}],[\"年均增长率表示的是\",{\"1\":{\"1748\":1}}],[\"年均增长率\",{\"0\":{\"1748\":1},\"1\":{\"1737\":1}}],[\"年间的年平均增速\",{\"1\":{\"1748\":1}}],[\"年间增量的绝对平均值\",{\"1\":{\"1747\":1}}],[\"年间几乎毫无变化\",{\"1\":{\"23\":1}}],[\"年没有联系了\",{\"1\":{\"1621\":1}}],[\"年的可乐\",{\"1\":{\"1621\":1}}],[\"年的年数\",{\"1\":{\"877\":1}}],[\"年被正式命名为\",{\"1\":{\"1572\":1}}],[\"年多\",{\"1\":{\"1475\":1}}],[\"年正式成为主流的数据格式\",{\"1\":{\"895\":1}}],[\"年发明的一种轻量级数据存储格式\",{\"1\":{\"895\":1}}],[\"年龄为$\",{\"1\":{\"770\":1}}],[\"年龄为\",{\"1\":{\"769\":2}}],[\"年推出的新的\",{\"1\":{\"84\":1}}],[\"年\",{\"1\":{\"22\":2,\"23\":1,\"24\":5,\"25\":1,\"46\":1,\"223\":1,\"874\":1,\"875\":4,\"876\":1,\"877\":2,\"911\":1,\"980\":1,\"1084\":1,\"1247\":1,\"1475\":1,\"1723\":2,\"1735\":4}}],[\"因整体增量相同\",{\"1\":{\"1750\":1}}],[\"因循\",{\"1\":{\"1705\":1}}],[\"因果错误\",{\"1\":{\"1701\":1}}],[\"因果关系\",{\"1\":{\"1693\":1}}],[\"因子\",{\"1\":{\"1659\":1}}],[\"因容易出错\",{\"1\":{\"1257\":1}}],[\"因而就可以将其占用的内存空间回收回来\",{\"1\":{\"1030\":1}}],[\"因等待另一个操作\",{\"1\":{\"752\":1}}],[\"因此加密的详细内容就需要\",{\"1\":{\"2091\":1}}],[\"因此对于这个\",{\"1\":{\"2050\":1}}],[\"因此这里总结一下\",{\"1\":{\"2070\":1}}],[\"因此这里是一个销毁函数\",{\"1\":{\"2061\":1}}],[\"因此这里我们自然会去追\",{\"1\":{\"2045\":1}}],[\"因此这个函数实际上是标记了一个暂停点\",{\"1\":{\"2061\":1}}],[\"因此这个问题就变成了为什么在\",{\"1\":{\"2058\":1}}],[\"因此这一部分工作往往由后端工程师顺带完成\",{\"1\":{\"22\":1}}],[\"因此router\",{\"1\":{\"2034\":1}}],[\"因此会通知\",{\"1\":{\"2031\":1}}],[\"因此还需要实现一个install函数\",{\"1\":{\"2016\":1}}],[\"因此使用ref\",{\"1\":{\"2002\":1}}],[\"因此只有小红能够解密消息\",{\"1\":{\"2100\":1}}],[\"因此只需要使用\",{\"1\":{\"1978\":1}}],[\"因此只要你有\",{\"1\":{\"1203\":1}}],[\"因此每个转换函数执行完毕后\",{\"1\":{\"1977\":1}}],[\"因此首先需要编写一个深度优先的遍历算法\",{\"1\":{\"1976\":1}}],[\"因此在创建渲染副作用函数时\",{\"1\":{\"1954\":1}}],[\"因此在触发响应时\",{\"1\":{\"1916\":1}}],[\"因此必须通过\",{\"1\":{\"1938\":1}}],[\"因此任何会修改\",{\"1\":{\"1930\":1}}],[\"因此返回\",{\"1\":{\"1923\":1}}],[\"因此不考虑for\",{\"1\":{\"1904\":1}}],[\"因此不会生成到布局树\",{\"1\":{\"1526\":1}}],[\"因此执行\",{\"1\":{\"1902\":1}}],[\"因此需要这么一个判断的代码\",{\"1\":{\"2047\":1}}],[\"因此需要对其进行代理\",{\"1\":{\"1956\":1}}],[\"因此需要对包含此副作用函数的依赖集合进行更新\",{\"1\":{\"1890\":1}}],[\"因此需要特别留意缩进\",{\"1\":{\"790\":1}}],[\"因此其中包含的观点同样属于作者的观点\",{\"1\":{\"1690\":1}}],[\"因此输出张量的形状为\",{\"1\":{\"1663\":1}}],[\"因此输出的是\",{\"1\":{\"992\":1}}],[\"因此默认参数被用到\",{\"1\":{\"1663\":1}}],[\"因此我们以\",{\"1\":{\"1978\":1}}],[\"因此我们需要去检查下一层的路由记录\",{\"1\":{\"2068\":1}}],[\"因此我们需要将\",{\"1\":{\"1977\":1}}],[\"因此我们需要四个索引值\",{\"1\":{\"1965\":1}}],[\"因此我们需要封装一个渲染上下文对象\",{\"1\":{\"1956\":1}}],[\"因此我们需要在最后一个\",{\"1\":{\"1661\":1}}],[\"因此我们只需要处理一些边际情况就可以了\",{\"1\":{\"1925\":1}}],[\"因此我们只能够构造唯一的\",{\"1\":{\"1906\":1}}],[\"因此我们无需再修改代码就可以实现响应\",{\"1\":{\"1921\":1}}],[\"因此我们认为副作用函数与属性\",{\"1\":{\"1902\":1}}],[\"因此我们可以不用每次都重新获取对象然后调用方法\",{\"1\":{\"1232\":1}}],[\"因此是f\",{\"1\":{\"1658\":1}}],[\"因此古董版本的浏览器并不支持\",{\"1\":{\"1647\":1}}],[\"因此限制造成的开发问题\",{\"1\":{\"1599\":1}}],[\"因此又带来了偏差\",{\"1\":{\"1560\":1}}],[\"因此就会发送新的请求来获取新资源了\",{\"1\":{\"1543\":1}}],[\"因此有着和\",{\"1\":{\"1247\":1}}],[\"因此所有在全局作用域中声明的变量以及函数都会成为该对象的属性和方法\",{\"1\":{\"1086\":1}}],[\"因此上面的表达式可以用\",{\"1\":{\"995\":1}}],[\"因此上面的代码仍然会输出\",{\"1\":{\"991\":1}}],[\"因此可以将多次重复的请求默认只获取一次\",{\"1\":{\"1582\":1}}],[\"因此可以用\",{\"1\":{\"995\":1}}],[\"因此可以本地读取文件\",{\"1\":{\"117\":1}}],[\"因此函数内部可以访问到\",{\"1\":{\"948\":1}}],[\"因此当我们对这两个数据类型进行相等测试时\",{\"1\":{\"797\":1}}],[\"因此当运行发生错误的时候\",{\"1\":{\"124\":1}}],[\"因此它是运行在node环境中的\",{\"1\":{\"122\":1}}],[\"因此安装速度更快\",{\"1\":{\"85\":1}}],[\"因此没有别名一说\",{\"1\":{\"52\":1}}],[\"因此无需具名\",{\"1\":{\"51\":1}}],[\"因此\",{\"1\":{\"50\":1,\"51\":1,\"67\":1,\"118\":1,\"128\":1,\"150\":2,\"350\":2,\"768\":1,\"771\":1,\"796\":1,\"868\":1,\"877\":1,\"910\":1,\"918\":1,\"980\":1,\"995\":1,\"1010\":1,\"1033\":1,\"1040\":1,\"1207\":1,\"1232\":2,\"1236\":1,\"1239\":1,\"1541\":1,\"1558\":1,\"1614\":1,\"1658\":1,\"1666\":1,\"1785\":1,\"1792\":1,\"1902\":1,\"1914\":1,\"1921\":1,\"1925\":1,\"2058\":1,\"2065\":1}}],[\"因为能够进入此循环\",{\"1\":{\"2068\":1}}],[\"因为第一次是没有\",{\"1\":{\"2058\":1}}],[\"因为第一种调用方法不利于文件合并\",{\"1\":{\"957\":1}}],[\"因为单页应用的特点就是一个页面\",{\"1\":{\"2051\":1}}],[\"因为只有在vue组件里才可以使用inject\",{\"1\":{\"2019\":1}}],[\"因为只要执行流进入相应的环境\",{\"1\":{\"1029\":1}}],[\"因为所有的状态数据都集中在\",{\"1\":{\"2016\":1}}],[\"因为所有东西都变成全局的\",{\"1\":{\"1313\":1}}],[\"因为此对象中的数据在模板中也需要可以直接进行访问\",{\"1\":{\"2001\":1}}],[\"因为此处无法直接访问\",{\"1\":{\"1493\":1}}],[\"因为可以看出\",{\"1\":{\"1998\":1}}],[\"因为可以利用computed的缓存特性\",{\"1\":{\"1857\":1}}],[\"因为新的虚拟节点子节点的内容可能发生改变\",{\"1\":{\"1962\":1}}],[\"因为其为浅响应\",{\"1\":{\"1955\":1}}],[\"因为其值可以是多种类型\",{\"1\":{\"1949\":1}}],[\"因为其开销比较大并且\",{\"1\":{\"1028\":1}}],[\"因为一个对象能否迭代\",{\"1\":{\"1931\":1}}],[\"因为访问\",{\"1\":{\"1927\":1}}],[\"因为声明式在命令式性能消耗的基础上多出了diff\",{\"1\":{\"1872\":1}}],[\"因为子组件的\",{\"1\":{\"1842\":1}}],[\"因为父组件没有使用这个内部属性\",{\"1\":{\"1842\":1}}],[\"因为initinjections是将当前组件实例用到的inject挂载为其自身属性\",{\"1\":{\"1803\":1}}],[\"因为在实际开发中有些场景是不能提前把路由写死的\",{\"1\":{\"2028\":1}}],[\"因为在\",{\"1\":{\"1927\":1}}],[\"因为在初始化\",{\"1\":{\"1803\":1}}],[\"因为在这三个标签里的内容肯定不会有html标签\",{\"1\":{\"1792\":1}}],[\"因为在这三个标签里的内容肯定不会有\",{\"1\":{\"1792\":1}}],[\"因为在浏览器中参数会暴露在地址栏\",{\"1\":{\"296\":1}}],[\"因为每次内存分配和释放都需要消耗大量的时间和资源\",{\"1\":{\"1666\":1}}],[\"因为每一次的\",{\"1\":{\"1238\":1}}],[\"因为每一个请求都有签名还能防止监听以及重放攻击\",{\"1\":{\"362\":1}}],[\"因为窗口中的\",{\"1\":{\"1663\":1}}],[\"因为两个程序有可能出现在不同的设备上\",{\"1\":{\"1622\":1}}],[\"因为如果当前节点的子节点中有标签带有v\",{\"1\":{\"1795\":1}}],[\"因为如果资源还有效\",{\"1\":{\"1537\":1}}],[\"因为如果显示地写出扩展名\",{\"1\":{\"1315\":1}}],[\"因为有些服务器只认if\",{\"1\":{\"1537\":1}}],[\"因为返回值不再是\",{\"1\":{\"1486\":1}}],[\"因为选择器的优先级相同\",{\"1\":{\"1433\":1}}],[\"因为传递数据时要使用组件标签\",{\"1\":{\"1429\":1}}],[\"因为即便操作数据\",{\"1\":{\"1411\":1}}],[\"因为需要对计算属性依赖的每个属性都进行监听和处理\",{\"1\":{\"1382\":1}}],[\"因为编译器遇到\",{\"1\":{\"1315\":1}}],[\"因为没有使用\",{\"1\":{\"1309\":1}}],[\"因为你要求列表中所有元素都有相同的事件处理\",{\"1\":{\"1241\":1}}],[\"因为整个表格最底层的标签就是\",{\"1\":{\"1219\":1}}],[\"因为通过选择器可能获取多个元素\",{\"1\":{\"1198\":1}}],[\"因为通过symbol\",{\"1\":{\"828\":1}}],[\"因为要处理的问题很多\",{\"1\":{\"1172\":1}}],[\"因为我们是可以提供一个\",{\"1\":{\"2070\":1}}],[\"因为我们的\",{\"1\":{\"1644\":1}}],[\"因为我们事件就是绑定在\",{\"1\":{\"1158\":1}}],[\"因为我们可以定义对象\",{\"1\":{\"984\":1}}],[\"因为默认行为已经被阻止\",{\"1\":{\"1156\":1}}],[\"因为进出子元素可以看作是进入了新的元素\",{\"1\":{\"1148\":1}}],[\"因为进出子元素可以看作是从当前元素出来了\",{\"1\":{\"1148\":1}}],[\"因为后面的事件处理程序把前面的事件处理程序给覆盖掉了\",{\"1\":{\"1144\":1}}],[\"因为添加一个节点就会刷新一次页面\",{\"1\":{\"1120\":1}}],[\"因为object\",{\"1\":{\"1053\":1}}],[\"因为是直接通过\",{\"1\":{\"1928\":1}}],[\"因为是一个新的子类\",{\"1\":{\"1423\":1}}],[\"因为是深拷贝\",{\"1\":{\"1201\":1}}],[\"因为是浅拷贝\",{\"1\":{\"1201\":1}}],[\"因为是普通函数调用\",{\"1\":{\"993\":1}}],[\"因为是内置模块\",{\"1\":{\"377\":1}}],[\"因为复杂值可以包含任何值\",{\"1\":{\"981\":1}}],[\"因为对象可以向下拆分\",{\"1\":{\"981\":1}}],[\"因为修复会破坏现有的代码\",{\"1\":{\"980\":1}}],[\"因为函数在\",{\"1\":{\"926\":1}}],[\"因为这里\",{\"1\":{\"2073\":1}}],[\"因为这部分前后的相对位置不变\",{\"1\":{\"1968\":1}}],[\"因为这可能会让人不知道变量\",{\"1\":{\"1317\":1}}],[\"因为这样p\",{\"1\":{\"1931\":1}}],[\"因为这样\",{\"1\":{\"1309\":1}}],[\"因为这样容易导致命名冲突\",{\"1\":{\"1304\":1}}],[\"因为这样会大大增加回溯的计算量\",{\"1\":{\"914\":1}}],[\"因为这个\",{\"1\":{\"1890\":1}}],[\"因为这个函数的调用者就是\",{\"1\":{\"952\":1}}],[\"因为这个文件夹下放的都是第三方包\",{\"1\":{\"150\":1}}],[\"因为捕获了文本\",{\"1\":{\"911\":1}}],[\"因为还包含了下划线\",{\"1\":{\"904\":1}}],[\"因为格式不一致\",{\"1\":{\"897\":1}}],[\"因为nan===nan为false\",{\"1\":{\"856\":1}}],[\"因为它们都属于根据给定的值返回查找结果的方法\",{\"1\":{\"1924\":1}}],[\"因为它们不会在屏幕上产生任何字符\",{\"1\":{\"1154\":1}}],[\"因为它们并不指向同一个对象\",{\"1\":{\"983\":1}}],[\"因为它包括\",{\"1\":{\"910\":1}}],[\"因为它允许我们在调用函数时不用记住参数的顺序\",{\"1\":{\"833\":1}}],[\"因为它不需要特殊的语法\",{\"1\":{\"790\":1}}],[\"因为数组对象的\",{\"1\":{\"1916\":1}}],[\"因为数组也是一种对象\",{\"1\":{\"830\":1}}],[\"因为数字签名的存在\",{\"1\":{\"363\":1}}],[\"因为不需要将数据从一个位置复制到另一个位置\",{\"1\":{\"1666\":1}}],[\"因为不会产生新的内存分配和释放操作\",{\"1\":{\"1666\":1}}],[\"因为不能让\",{\"1\":{\"1240\":1}}],[\"因为不用每次都去重新计算数组的长度\",{\"1\":{\"822\":1}}],[\"因为不同的浏览器和设备并不全支持相同的\",{\"1\":{\"747\":1}}],[\"因为a是false\",{\"1\":{\"808\":1,\"809\":2}}],[\"因为a是true\",{\"1\":{\"808\":1}}],[\"因为ajax请求是不能重定向的\",{\"1\":{\"355\":1}}],[\"因为会有变量提升等问题\",{\"1\":{\"779\":1}}],[\"因为使用的是简单的文本存储数据\",{\"1\":{\"767\":1}}],[\"因为拖放的整个事件是由不同元素产生的\",{\"1\":{\"764\":1}}],[\"因为主内容区边框和其高度始终相同\",{\"1\":{\"582\":1}}],[\"因为width的吸收能力强\",{\"1\":{\"554\":1}}],[\"因为生成的二维下标数组\",{\"1\":{\"418\":1}}],[\"因为base64是对称解密的\",{\"1\":{\"366\":1}}],[\"因为该部分在客户端可解密\",{\"1\":{\"366\":1}}],[\"因为login就不需要重定向到login了\",{\"1\":{\"355\":1}}],[\"因为存储在客户端\",{\"1\":{\"350\":1}}],[\"因为\",{\"1\":{\"156\":1,\"362\":1,\"369\":1,\"574\":1,\"767\":1,\"789\":1,\"794\":1,\"812\":2,\"877\":1,\"888\":1,\"918\":1,\"943\":1,\"947\":1,\"948\":1,\"1030\":1,\"1084\":1,\"1270\":1,\"1302\":1,\"1356\":1,\"1427\":1,\"1429\":1,\"1529\":1,\"1560\":1,\"1847\":1,\"1923\":1,\"1932\":1,\"2002\":1,\"2044\":1}}],[\"因为前端开发者承担的开发任务相对于后端开发来说\",{\"1\":{\"23\":1}}],[\"因为程序的规模实在太小\",{\"1\":{\"22\":1}}],[\"可访问性相关的属性值\",{\"1\":{\"2064\":1}}],[\"可调度\",{\"1\":{\"1986\":1}}],[\"可复用的情况\",{\"1\":{\"1966\":1}}],[\"可复用的节点\",{\"1\":{\"1959\":1}}],[\"可迭代协议\",{\"1\":{\"1931\":1}}],[\"可嵌套\",{\"0\":{\"1891\":1}}],[\"可维护性\",{\"1\":{\"1872\":1}}],[\"可简化为\",{\"1\":{\"1748\":1}}],[\"可简写为\",{\"1\":{\"1404\":2,\"1421\":1}}],[\"可简写的情况同上\",{\"1\":{\"1380\":1}}],[\"可根据实际情况拆出\",{\"1\":{\"1720\":1}}],[\"可先拆出\",{\"1\":{\"1720\":1}}],[\"可借助选项猜出答案\",{\"1\":{\"1720\":1}}],[\"可快速的冷启动\",{\"1\":{\"1483\":1}}],[\"可前进也可后退\",{\"1\":{\"1464\":1}}],[\"可将两种不同的数据拆分为两个\",{\"1\":{\"1454\":1}}],[\"可将文件分割为字节范围\",{\"1\":{\"771\":1}}],[\"可利用它跳过\",{\"1\":{\"1403\":1}}],[\"可遍历\",{\"1\":{\"1392\":1}}],[\"可理解为把\",{\"1\":{\"1340\":1}}],[\"可理解为复制粘贴\",{\"1\":{\"1333\":1}}],[\"可配置模块成员\",{\"1\":{\"1320\":1}}],[\"可通过\",{\"1\":{\"1299\":1}}],[\"可通过混合宏定义重复使用的代码块\",{\"1\":{\"1299\":1}}],[\"可通过express\",{\"1\":{\"331\":1}}],[\"可靠的事件处理机制\",{\"1\":{\"1195\":1}}],[\"可传递的保存了特定信息的\",{\"1\":{\"998\":1}}],[\"可使用双否定\",{\"1\":{\"810\":1}}],[\"可使用\",{\"1\":{\"771\":1,\"773\":1,\"856\":1}}],[\"可供播放时触发\",{\"1\":{\"752\":1}}],[\"可读写\",{\"1\":{\"750\":3}}],[\"可读写属性\",{\"1\":{\"750\":1}}],[\"可点击\",{\"1\":{\"747\":2}}],[\"可设置\",{\"1\":{\"574\":1}}],[\"可设置为长时间保持\",{\"1\":{\"356\":1}}],[\"可展开任意深度的嵌套数组\",{\"1\":{\"449\":1}}],[\"可实现定时器的循环触发\",{\"1\":{\"408\":1}}],[\"可接收参数的装饰器的定义\",{\"1\":{\"402\":1}}],[\"可变对象内部的\",{\"1\":{\"391\":1}}],[\"可变数据和不可变数据的\",{\"1\":{\"381\":1}}],[\"可变数据\",{\"1\":{\"381\":1}}],[\"可用\",{\"1\":{\"1300\":1}}],[\"可用于\",{\"1\":{\"1926\":1}}],[\"可用于cleartimeout\",{\"1\":{\"1088\":1}}],[\"可用于通过使用\",{\"1\":{\"701\":1}}],[\"可用于基于\",{\"1\":{\"363\":1}}],[\"可用的\",{\"1\":{\"346\":1}}],[\"可选参数\",{\"1\":{\"1793\":1}}],[\"可选参数实现\",{\"0\":{\"488\":1}}],[\"可选择对于问题本身的总结\",{\"1\":{\"1686\":1}}],[\"可选的图片转换\",{\"1\":{\"1655\":1}}],[\"可选的数据结构类型有限\",{\"1\":{\"859\":1}}],[\"可选的值包括\",{\"1\":{\"730\":1}}],[\"可选多项\",{\"1\":{\"756\":1}}],[\"可选值\",{\"1\":{\"560\":1,\"565\":1,\"568\":1,\"613\":1,\"621\":1,\"625\":4,\"641\":1,\"730\":1}}],[\"可选事件\",{\"1\":{\"252\":1}}],[\"可选\",{\"1\":{\"244\":1,\"247\":1,\"252\":1,\"257\":1,\"258\":1,\"259\":1,\"260\":1}}],[\"可下载的所有\",{\"1\":{\"229\":1}}],[\"可能定义有多个then回调\",{\"1\":{\"1777\":1}}],[\"可能有一个失败原因\",{\"1\":{\"1776\":1}}],[\"可能有一个相关数据\",{\"1\":{\"1776\":1}}],[\"可能的方案\",{\"1\":{\"1621\":5}}],[\"可能根本不会缓存任何东西\",{\"1\":{\"1534\":1}}],[\"可能并不会理会服务器的愿望\",{\"1\":{\"1534\":1}}],[\"可能导致延时才处理\",{\"1\":{\"1175\":1}}],[\"可能导致内存泄露\",{\"1\":{\"1025\":1}}],[\"可能会点击继续浏览\",{\"1\":{\"2091\":1}}],[\"可能会隐式地修改\",{\"1\":{\"1916\":1}}],[\"可能会修改\",{\"1\":{\"1836\":1}}],[\"可能会引发的问题\",{\"1\":{\"1394\":1}}],[\"可能会有不一样的运行结果\",{\"1\":{\"956\":1}}],[\"可能会改变对正则表达式的识别\",{\"1\":{\"919\":1}}],[\"可能会想当然地写成\",{\"1\":{\"910\":1}}],[\"可能会出现服务不可用的情况\",{\"1\":{\"225\":1}}],[\"可能值的计算\",{\"1\":{\"883\":1}}],[\"可能值的总数\",{\"1\":{\"883\":1}}],[\"可能出现数组里面无法使用values\",{\"1\":{\"846\":1}}],[\"可能不知不觉就重用了一个变量名\",{\"1\":{\"835\":1}}],[\"可能只有区区几百行的代码\",{\"1\":{\"22\":1}}],[\"可这并不代表模块化不能在浏览器中实现\",{\"1\":{\"37\":1}}],[\"可是服务器上的资源并没有发生变动\",{\"1\":{\"1533\":1}}],[\"可是一旦项目形成规模\",{\"1\":{\"117\":1}}],[\"可是浏览器厂商不愿意提供支持\",{\"1\":{\"37\":1}}],[\"可是这里面存在诸多的困难\",{\"1\":{\"25\":1}}],[\"可是这一过程实在太痛苦\",{\"1\":{\"24\":1}}],[\"可以保证数据传输的安全性和完整性\",{\"1\":{\"2100\":1}}],[\"可以保证组件重复挂载时内部数据的独立\",{\"1\":{\"1361\":1}}],[\"可以确保数据在传输过程中的安全性\",{\"1\":{\"2095\":1}}],[\"可以限制页面中可以加载的资源和可执行的脚本\",{\"1\":{\"2095\":1}}],[\"可以有多种方式\",{\"1\":{\"2091\":1}}],[\"可以有效地减少内存开销\",{\"1\":{\"1666\":1}}],[\"可以恢复到之前的滚动位置\",{\"1\":{\"2061\":1}}],[\"可以解构操作的有两个数据\",{\"1\":{\"2015\":1}}],[\"可以解决网速慢时页面展示出\",{\"1\":{\"1401\":1}}],[\"可以传入\",{\"1\":{\"1953\":1}}],[\"可以传入分隔符作为参数\",{\"1\":{\"854\":1}}],[\"可以定义生命周期的钩子函数\",{\"1\":{\"1953\":1}}],[\"可以访问\",{\"1\":{\"1953\":1}}],[\"可以发现\",{\"1\":{\"1925\":1}}],[\"可以正常触发\",{\"1\":{\"1917\":1}}],[\"可以正常浏览网站上面的文章\",{\"1\":{\"343\":1}}],[\"可以创建一个代理对象\",{\"1\":{\"1901\":1}}],[\"可以创建多个分支\",{\"1\":{\"10\":1}}],[\"可以深度监听对象属性\",{\"1\":{\"1858\":1}}],[\"可以针对任务进行后续处理\",{\"1\":{\"1776\":1}}],[\"可以针对接口或者路由做响应的限流\",{\"1\":{\"507\":1}}],[\"可以近似为\",{\"1\":{\"1748\":1}}],[\"可以大致将其结构分为两种\",{\"1\":{\"1685\":1}}],[\"可以放弃\",{\"1\":{\"1647\":1}}],[\"可以放到服务器环境\",{\"1\":{\"25\":1}}],[\"可以减少浏览器的请求次数\",{\"1\":{\"1640\":1}}],[\"可以无需刷新页面而与服务器端进行通信\",{\"1\":{\"1572\":1}}],[\"可以给予新的版本号\",{\"1\":{\"1543\":1}}],[\"可以给同一个模块中的成员统一添加前缀\",{\"1\":{\"1310\":1}}],[\"可以最大程度的减少网络传输\",{\"1\":{\"1537\":1}}],[\"可以动态更改\",{\"1\":{\"1515\":1}}],[\"可以更好的支持\",{\"1\":{\"1479\":1}}],[\"可以更加方便的操作\",{\"1\":{\"1366\":1}}],[\"可以与全局后置守卫组合使用\",{\"1\":{\"1467\":1}}],[\"可以配置多个代理\",{\"1\":{\"1445\":1}}],[\"可以去定制按键别名\",{\"1\":{\"1370\":1}}],[\"可以去配置自己的值来覆盖默认值\",{\"1\":{\"1306\":1}}],[\"可以自动读取到\",{\"1\":{\"1350\":1}}],[\"可以自定义\",{\"1\":{\"286\":1,\"1655\":1}}],[\"可以以更灵活的方式使用\",{\"1\":{\"1314\":1}}],[\"可以方便地下载\",{\"1\":{\"1656\":1}}],[\"可以方便地使用比较运算符来比较日期值\",{\"1\":{\"877\":1}}],[\"可以方便的生成大量重复却有一点小变化的样式\",{\"1\":{\"1287\":1}}],[\"可以写一些简单的语句\",{\"1\":{\"1368\":1}}],[\"可以写成\",{\"1\":{\"1285\":1}}],[\"可以写为\",{\"1\":{\"913\":1}}],[\"可以省略\",{\"1\":{\"1224\":1}}],[\"可以这样书写\",{\"1\":{\"1311\":1}}],[\"可以这样\",{\"1\":{\"1205\":1}}],[\"可以这么说\",{\"1\":{\"868\":1}}],[\"可以理解为第\",{\"1\":{\"1725\":1}}],[\"可以理解为今年第\",{\"1\":{\"1725\":1}}],[\"可以理解为扩展静态方法\",{\"1\":{\"1201\":1}}],[\"可以理解为该对象的内存地址\",{\"1\":{\"380\":1}}],[\"可以执行函数内代码\",{\"1\":{\"1186\":1}}],[\"可以执行所有书写的\",{\"1\":{\"155\":1}}],[\"可以随时向消息队列添加任务\",{\"1\":{\"1180\":1,\"1556\":1}}],[\"可以随意设置宽高\",{\"1\":{\"541\":1}}],[\"可以增强用户体验\",{\"1\":{\"1160\":1}}],[\"可以返回在键盘事件发生时\",{\"1\":{\"1154\":1}}],[\"可以返回字符串中指定位置的字符\",{\"1\":{\"888\":1}}],[\"可以获取鼠标滚轮滚动的方向\",{\"1\":{\"1153\":1}}],[\"可以获取事件发生时光标相对于当前窗口的垂直坐标信息\",{\"1\":{\"1153\":1}}],[\"可以获取事件发生时光标相对于当前窗口的水平坐标信息\",{\"1\":{\"1153\":1}}],[\"可以继续做其他的任务\",{\"1\":{\"1137\":1}}],[\"可以把这块内存空间简单的理解为进程\",{\"1\":{\"1553\":1}}],[\"可以把\",{\"1\":{\"1431\":1}}],[\"可以把自己直接删除\",{\"1\":{\"1121\":1}}],[\"可以把不同标准书写的语言\",{\"1\":{\"146\":1}}],[\"可以作为其他元素节点对象的方法使用\",{\"1\":{\"1112\":1}}],[\"可以作为每个模块的唯一标识符\",{\"1\":{\"155\":3}}],[\"可以应用于移动设备中的地理定位\",{\"1\":{\"1099\":1}}],[\"可以点击后退返回上一个页面\",{\"1\":{\"1094\":1}}],[\"可以打印出来\",{\"1\":{\"1086\":1}}],[\"可以算是\",{\"1\":{\"1084\":1}}],[\"可以被外部调用但不应被外部赋值\",{\"1\":{\"1836\":1}}],[\"可以被看做是由各种各样的对象所组成的\",{\"1\":{\"1083\":1}}],[\"可以被称之为\",{\"1\":{\"266\":2}}],[\"可以灵活的使用该函数\",{\"1\":{\"1054\":1}}],[\"可以说这是一组方法\",{\"1\":{\"1088\":1}}],[\"可以说成是\",{\"1\":{\"1033\":1}}],[\"可以说只有数组这种数据结构\",{\"1\":{\"859\":1}}],[\"可以反复进行操作\",{\"1\":{\"1002\":1}}],[\"可以改写一些\",{\"1\":{\"995\":1}}],[\"可以编写一个通用函数判断变量类型\",{\"1\":{\"967\":1}}],[\"可以参考\",{\"1\":{\"2053\":1}}],[\"可以参考vnodedata类型中的数据信息\",{\"1\":{\"1788\":1}}],[\"可以参见这篇文档\",{\"1\":{\"1087\":1}}],[\"可以参阅\",{\"1\":{\"958\":1,\"2047\":1,\"2063\":1}}],[\"可以参照\",{\"1\":{\"918\":1}}],[\"可以像参数一样传入和返回\",{\"1\":{\"926\":1}}],[\"可以从exec\",{\"1\":{\"924\":1}}],[\"可以忽略大小写\",{\"1\":{\"919\":1}}],[\"可以用于图像分割\",{\"1\":{\"1667\":1}}],[\"可以用于优化性能\",{\"1\":{\"1402\":1}}],[\"可以用于引用被观察的位置\",{\"1\":{\"1102\":1}}],[\"可以用在\",{\"1\":{\"1225\":1}}],[\"可以用在构造函数之中\",{\"1\":{\"990\":1}}],[\"可以用字符串拼接的方式\",{\"1\":{\"1208\":1}}],[\"可以用字符组\",{\"1\":{\"906\":1}}],[\"可以用一个参数代表要获取的属性名\",{\"1\":{\"1205\":1}}],[\"可以用一个变量保存\",{\"1\":{\"993\":1}}],[\"可以用\",{\"1\":{\"1161\":2,\"1205\":1}}],[\"可以用来动态生成纯\",{\"1\":{\"1317\":1}}],[\"可以用来导入模块中的变量\",{\"1\":{\"1313\":1}}],[\"可以用来查找设备的位置和移动信息\",{\"1\":{\"1102\":1}}],[\"可以用来检查一个字符串是否含有某种子串\",{\"1\":{\"898\":1}}],[\"可以用来连接两个或多个字符串\",{\"1\":{\"889\":1}}],[\"可以用来获取字符串的长度\",{\"1\":{\"886\":1}}],[\"可以用来完成深拷贝\",{\"1\":{\"472\":1}}],[\"可以用来开发客户端软件\",{\"1\":{\"222\":1}}],[\"可以妥善的利用互补属性来得到这一效果\",{\"1\":{\"905\":1}}],[\"可以接收任意类型的请求\",{\"1\":{\"1577\":1}}],[\"可以接收多个数字参数\",{\"1\":{\"876\":1}}],[\"可以接受多个参数\",{\"1\":{\"995\":1}}],[\"可以接受一个正则表达式作为参数\",{\"1\":{\"894\":1}}],[\"可以搜索字符串中是否含有指定内容\",{\"1\":{\"894\":1}}],[\"可以套用下面的公式\",{\"1\":{\"883\":1}}],[\"可以精确到毫秒\",{\"1\":{\"874\":1}}],[\"可以向下面这样书写\",{\"1\":{\"1161\":1}}],[\"可以向\",{\"1\":{\"868\":1}}],[\"可以向任意位置插入任意数量的元素\",{\"1\":{\"854\":1}}],[\"可以调用这个对象的close\",{\"1\":{\"1088\":1}}],[\"可以调用get\",{\"1\":{\"868\":1}}],[\"可以调用set\",{\"1\":{\"868\":1}}],[\"可以删除一个子节点\",{\"0\":{\"1121\":1}}],[\"可以删除任意数量的元素\",{\"1\":{\"854\":1}}],[\"可以删除数组的第一个元素\",{\"1\":{\"853\":1}}],[\"可以实现很多小功能\",{\"1\":{\"995\":1}}],[\"可以实现对数组的\",{\"1\":{\"854\":1}}],[\"可以实现从一个颜色向其他颜色过渡的效果\",{\"1\":{\"636\":1}}],[\"可以简化路由的跳转\",{\"1\":{\"1460\":1}}],[\"可以简化许多\",{\"1\":{\"1208\":1}}],[\"可以简写为\",{\"1\":{\"836\":1,\"1356\":1}}],[\"可以简单理解为就是一堆字符串\",{\"1\":{\"266\":1}}],[\"可以进行异步操作\",{\"1\":{\"1382\":1}}],[\"可以进行简写\",{\"1\":{\"832\":1}}],[\"可以进行如下的设置\",{\"1\":{\"128\":1}}],[\"可以轻易嵌入运算符\",{\"1\":{\"790\":1}}],[\"可以监控读取进度\",{\"1\":{\"771\":1}}],[\"可以监听元素的animationstart和animationnend事件\",{\"1\":{\"644\":1}}],[\"可以监听元素的transitionstart和transitionend事件\",{\"1\":{\"641\":1}}],[\"可以监听这些事件\",{\"1\":{\"156\":1}}],[\"可以永久保存数据\",{\"1\":{\"768\":1}}],[\"可以称为用户和浏览器进行交互的\",{\"1\":{\"768\":1}}],[\"可以让客户端大胆的\",{\"1\":{\"1543\":1}}],[\"可以让一个\",{\"1\":{\"1182\":1}}],[\"可以让我们使用系统通知来显示消息\",{\"1\":{\"1105\":1}}],[\"可以让\",{\"1\":{\"766\":1}}],[\"可以松手释放将源对象放置此处\",{\"1\":{\"763\":1}}],[\"可以在其他文件或者组件里面通过\",{\"1\":{\"2047\":1}}],[\"可以在初始化时执行回调\",{\"1\":{\"1858\":1}}],[\"可以在代码中实现发送请求\",{\"1\":{\"1572\":1}}],[\"可以在浏览器的任务管理器中查看当前的所有进程\",{\"1\":{\"1555\":1}}],[\"可以在请求头中加入cache\",{\"1\":{\"1542\":1}}],[\"可以在编写组件的时候\",{\"1\":{\"1519\":1}}],[\"可以在向混合传参时指定参数名称\",{\"1\":{\"1336\":1}}],[\"可以在执行一个任务的同时\",{\"1\":{\"948\":1}}],[\"可以在\",{\"1\":{\"824\":1}}],[\"可以在这个区域上方悬停\",{\"1\":{\"763\":1}}],[\"可以在某一个样式的后边添加\",{\"1\":{\"524\":1}}],[\"可以查看或者设置\",{\"1\":{\"1093\":1}}],[\"可以查看验证是否通过\",{\"1\":{\"759\":1}}],[\"可以查看全局安装包的位置\",{\"1\":{\"73\":1}}],[\"可以下载整个视频\",{\"1\":{\"748\":1}}],[\"可以指定一个第二参数\",{\"1\":{\"890\":1}}],[\"可以指定模版和自定义生成的文件名\",{\"1\":{\"128\":1}}],[\"可以指向\",{\"1\":{\"664\":1}}],[\"可以平铺的线性渐变\",{\"1\":{\"636\":1}}],[\"可以分析用户提供的内容\",{\"1\":{\"1874\":1}}],[\"可以分为以下\",{\"1\":{\"877\":1}}],[\"可以分为外部表现和内部表现\",{\"1\":{\"548\":1}}],[\"可以分别指定四个角的圆角\",{\"1\":{\"612\":1}}],[\"可以设置回调的执行时机\",{\"1\":{\"1858\":1}}],[\"可以设置异步返回前的中间状态\",{\"1\":{\"1858\":1}}],[\"可以设置m\",{\"1\":{\"919\":1}}],[\"可以设置全局匹配替换全部\",{\"1\":{\"894\":1}}],[\"可以设置第二个值来表明在时间开始还是结束来执行过渡\",{\"1\":{\"641\":1}}],[\"可以设置\",{\"1\":{\"633\":1}}],[\"可以设置字体相关的所有属性\",{\"1\":{\"621\":1}}],[\"可以设置弹性元素所有的三个样式\",{\"1\":{\"592\":1}}],[\"可以设置宽高\",{\"1\":{\"540\":1}}],[\"可以使一个网页适用于所有设备\",{\"1\":{\"651\":1}}],[\"可以使元素具有弹性\",{\"1\":{\"584\":1}}],[\"可以使用散列算法将其转换为多个块\",{\"1\":{\"2101\":1}}],[\"可以使用一些开源的输入验证库\",{\"1\":{\"2095\":1}}],[\"可以使用id选择器将页面中已存在的一个dom元素作为模板\",{\"1\":{\"1805\":1}}],[\"可以使用isfinite\",{\"1\":{\"794\":1}}],[\"可以使用下面公式\",{\"1\":{\"1735\":1}}],[\"可以使用下面的形式\",{\"1\":{\"848\":1}}],[\"可以使用下面的命令\",{\"1\":{\"76\":1}}],[\"可以使用下面的命令的\",{\"1\":{\"75\":1}}],[\"可以使用下面的语法\",{\"1\":{\"52\":1}}],[\"可以使用分层的方式来简化\",{\"1\":{\"1622\":1}}],[\"可以使用分层的思想把问题简单化\",{\"1\":{\"1621\":1}}],[\"可以使用getters加工\",{\"1\":{\"1452\":1}}],[\"可以使用git\",{\"1\":{\"7\":1}}],[\"可以使用once修饰符\",{\"1\":{\"1437\":1}}],[\"可以使用如下的简写形式\",{\"1\":{\"1380\":1}}],[\"可以使用上述\",{\"1\":{\"1376\":1}}],[\"可以使用按键原始的\",{\"1\":{\"1370\":1}}],[\"可以使用以下指定参数名来传参\",{\"1\":{\"1335\":1}}],[\"可以使用布尔值作出很多不同情况下的操作\",{\"1\":{\"1274\":1}}],[\"可以使用剪贴板事件\",{\"1\":{\"1162\":1}}],[\"可以使用任何标记方式\",{\"1\":{\"1029\":1}}],[\"可以使用数组的相关方法\",{\"1\":{\"933\":1}}],[\"可以使用得到的毫秒数除以\",{\"1\":{\"874\":1}}],[\"可以使用push\",{\"1\":{\"853\":1}}],[\"可以使用逗号来跳过不想要解构的元素\",{\"1\":{\"847\":1}}],[\"可以使用for\",{\"1\":{\"830\":1}}],[\"可以使用boolean\",{\"1\":{\"796\":1}}],[\"可以使用string\",{\"1\":{\"789\":1}}],[\"可以使用单引号\",{\"1\":{\"789\":1}}],[\"可以使用客户端逻辑来验证上传内容的\",{\"1\":{\"771\":1}}],[\"可以使用clear\",{\"1\":{\"769\":1,\"862\":1}}],[\"可以使用removeitem\",{\"1\":{\"769\":1}}],[\"可以使用别名执行命令\",{\"1\":{\"77\":1}}],[\"可以使用\",{\"1\":{\"25\":3,\"50\":1,\"262\":1,\"275\":1,\"363\":1,\"651\":1,\"777\":1,\"877\":1,\"1088\":1,\"1196\":1,\"1265\":1,\"1280\":1,\"1302\":2,\"1419\":1,\"1655\":1,\"1936\":1,\"2058\":1}}],[\"可以先在主区域中使用\",{\"1\":{\"580\":1}}],[\"可以同时有多个\",{\"1\":{\"1224\":1}}],[\"可以同时设置过渡相关的所有属性\",{\"1\":{\"641\":1}}],[\"可以同时设置背景图片和背景颜色\",{\"1\":{\"628\":1}}],[\"可以同时设置四个方向的外边距\",{\"1\":{\"546\":1}}],[\"可以同时指定多个字体\",{\"1\":{\"621\":1}}],[\"可以同时指定四个方向的内边距\",{\"1\":{\"545\":1}}],[\"可以马上切换到其它服务器\",{\"1\":{\"508\":1}}],[\"可以抛出一个自定义的异常\",{\"1\":{\"504\":1}}],[\"可以包含多个协程\",{\"1\":{\"408\":1}}],[\"可以是以下选项之一\",{\"1\":{\"2063\":3}}],[\"可以是对象\",{\"1\":{\"1879\":1}}],[\"可以是选择器或实际元素\",{\"1\":{\"1515\":1}}],[\"可以是\",{\"1\":{\"1385\":1}}],[\"可以是一个字符串\",{\"1\":{\"2064\":1}}],[\"可以是一个线上\",{\"1\":{\"1313\":1}}],[\"可以是一个空文件\",{\"1\":{\"376\":1}}],[\"可以是变量甚至是表达式\",{\"1\":{\"819\":1}}],[\"可以是字符串或其他数字\",{\"1\":{\"395\":1}}],[\"可以是空\",{\"1\":{\"270\":1}}],[\"可以修改该文件的权限\",{\"1\":{\"372\":1}}],[\"可以记录会话信息\",{\"1\":{\"362\":1}}],[\"可以避免\",{\"1\":{\"361\":1}}],[\"可以识别用户的身份\",{\"1\":{\"359\":1}}],[\"可以快速的清空数组\",{\"1\":{\"851\":1}}],[\"可以快速搭建\",{\"1\":{\"340\":1}}],[\"可以快速开发项目\",{\"1\":{\"58\":1}}],[\"可以根据卷积转置的计算公式推导来进行理解\",{\"1\":{\"1667\":1}}],[\"可以根据一个\",{\"1\":{\"1112\":1}}],[\"可以根据正则表达式\",{\"1\":{\"894\":1}}],[\"可以根据字符编码去获取字符\",{\"1\":{\"888\":1}}],[\"可以根据mvc的结构对业务代码进行进一步的拆分\",{\"1\":{\"339\":1}}],[\"可以根据自己的喜好来选择\",{\"1\":{\"89\":1}}],[\"可以直接在模板中通过\",{\"1\":{\"1493\":1}}],[\"可以直接代码渲染\",{\"1\":{\"1486\":1}}],[\"可以直接获取到一个元素节点的文本内容\",{\"1\":{\"1124\":1}}],[\"可以直接函数名\",{\"1\":{\"836\":1}}],[\"可以直接简写为\",{\"1\":{\"836\":1}}],[\"可以直接当作循环的次数来使用\",{\"1\":{\"401\":1}}],[\"可以直接输出变量或表达式的值\",{\"1\":{\"327\":1}}],[\"可以直接使用\",{\"1\":{\"62\":1,\"592\":1,\"1129\":1,\"1662\":1}}],[\"可以很方便地在控制台打印出表达式返回的值\",{\"1\":{\"1254\":1}}],[\"可以很方便的使用路由\",{\"1\":{\"304\":1}}],[\"可以很好地解耦开\",{\"1\":{\"218\":1}}],[\"可以选择\",{\"1\":{\"294\":1}}],[\"可以为一个元素添加多个事件处理程序\",{\"1\":{\"1145\":1}}],[\"可以为一个正则表达式设置多个匹配模式\",{\"1\":{\"894\":1}}],[\"可以为其添加属性和方法\",{\"1\":{\"984\":1}}],[\"可以为循环语句创建一个\",{\"1\":{\"824\":1}}],[\"可以为不同的设备\",{\"1\":{\"651\":1}}],[\"可以为师矣\",{\"1\":{\"246\":1}}],[\"可以为提交记录设置标签\",{\"1\":{\"14\":1}}],[\"可以看做是一个小型的\",{\"1\":{\"319\":1}}],[\"可以看官方文档\",{\"1\":{\"241\":1}}],[\"可以看到这两个属性实时变化的一个效果\",{\"1\":{\"1150\":1}}],[\"可以看到这里就访问到了\",{\"1\":{\"1112\":1}}],[\"可以看到这里会报错\",{\"1\":{\"939\":1}}],[\"可以看到绑定在上面的\",{\"1\":{\"1145\":1}}],[\"可以看到我们所写的\",{\"1\":{\"149\":1}}],[\"可以看到我们的\",{\"1\":{\"148\":1}}],[\"可以看到此时并没有将我们的\",{\"1\":{\"148\":1}}],[\"可以看到样式打包成功\",{\"1\":{\"138\":1}}],[\"可以看到\",{\"1\":{\"25\":1,\"769\":1,\"789\":1,\"827\":1,\"828\":2,\"833\":1,\"855\":1,\"865\":1,\"875\":1,\"995\":1,\"996\":1,\"1086\":1,\"1087\":1,\"1123\":2,\"1290\":1,\"1925\":1,\"2060\":1}}],[\"可以暴露\",{\"1\":{\"237\":1}}],[\"可以控制整个计算机\",{\"1\":{\"216\":1}}],[\"可以和构建工具联合使用\",{\"1\":{\"147\":1}}],[\"可以全局使用\",{\"1\":{\"123\":1}}],[\"可以扩展的\",{\"1\":{\"122\":1}}],[\"可以不用写任何一行额外的代码就使用\",{\"1\":{\"122\":1}}],[\"可以\",{\"1\":{\"89\":1,\"177\":1,\"373\":1}}],[\"可以提高优化效果\",{\"1\":{\"1659\":1}}],[\"可以提高浏览器的响应速度\",{\"1\":{\"1038\":1}}],[\"可以提高速度\",{\"1\":{\"82\":1}}],[\"可以提高包的下载速度\",{\"1\":{\"80\":1}}],[\"可以手动创建与修改\",{\"1\":{\"64\":1}}],[\"可以对其中的特定字符进行过滤\",{\"1\":{\"2095\":1}}],[\"可以对成员进行配置\",{\"1\":{\"1312\":1}}],[\"可以对数组和对象进行解构\",{\"1\":{\"847\":1}}],[\"可以对计算机中的磁盘进行操作\",{\"1\":{\"242\":1}}],[\"可以对字段值进行验证\",{\"1\":{\"193\":1}}],[\"可以对\",{\"1\":{\"58\":1,\"494\":1}}],[\"可以通过配置\",{\"1\":{\"2032\":1}}],[\"可以通过vm\",{\"1\":{\"1825\":1}}],[\"可以通过减小学习率或使用其他激活函数来缓解\",{\"1\":{\"1666\":1}}],[\"可以通过nn\",{\"1\":{\"1664\":1}}],[\"可以通过组件的$router属性获取到\",{\"1\":{\"1457\":1}}],[\"可以通过实例\",{\"1\":{\"1186\":1}}],[\"可以通过对象\",{\"1\":{\"1129\":1}}],[\"可以通过元素节点来获取指定的属性节点\",{\"1\":{\"1113\":1}}],[\"可以通过点访问法\",{\"1\":{\"828\":1}}],[\"可以通过图片来引入图标\",{\"1\":{\"622\":1}}],[\"可以通过line\",{\"1\":{\"621\":1}}],[\"可以通过z\",{\"1\":{\"575\":1}}],[\"可以通过clear属性来清除浮动元素对当前元素所产生的影响\",{\"1\":{\"565\":1}}],[\"可以通过一些特殊方式来开启元素的\",{\"1\":{\"564\":1}}],[\"可以通过调整元素的外边距\",{\"1\":{\"539\":1}}],[\"可以通过该文件获取域名的\",{\"1\":{\"373\":1}}],[\"可以通过下面的操作步骤\",{\"1\":{\"236\":1}}],[\"可以通过在响应函数的最后\",{\"1\":{\"1121\":1}}],[\"可以通过在\",{\"1\":{\"142\":1}}],[\"可以通过如下命令配置淘宝镜像\",{\"1\":{\"88\":1}}],[\"可以通过查看包的官方文档来确定安装方式\",{\"1\":{\"73\":1}}],[\"可以通过\",{\"1\":{\"62\":1,\"73\":1,\"88\":1,\"373\":1,\"569\":1,\"1168\":1,\"1309\":1,\"1493\":1,\"1953\":2}}],[\"可以通过关键字as对导入的符号进行重命名\",{\"1\":{\"50\":1}}],[\"可以通过标签快速的识别出不同的开发节点\",{\"1\":{\"14\":1}}],[\"可以认为\",{\"1\":{\"37\":1}}],[\"可以将转换逻辑编\",{\"1\":{\"1977\":1}}],[\"可以将子组件中想要被父组件访问的内容进行暴露就可以了\",{\"1\":{\"1493\":1}}],[\"可以将父组件中定义的插槽内容作为动态的函数参数传递给子组件\",{\"1\":{\"1446\":1,\"1494\":1}}],[\"可以将参数列表传递给\",{\"1\":{\"1273\":1}}],[\"可以将参数封装到一个对象中\",{\"1\":{\"931\":1}}],[\"可以将变量分为全局变量和局部变量\",{\"1\":{\"1261\":1}}],[\"可以将一个类似数组的对象\",{\"1\":{\"995\":1}}],[\"可以将字符串中指定内容替换为新的内容\",{\"1\":{\"894\":1}}],[\"可以将这些语句统一放到代码块中\",{\"1\":{\"818\":1}}],[\"可以将数值指定转换为几进制\",{\"1\":{\"789\":1}}],[\"可以将数据保存在客户端的硬盘或其他存储器\",{\"1\":{\"768\":1}}],[\"可以将图片进行左右的拖动\",{\"1\":{\"765\":1}}],[\"可以将单选按钮设置为默认选中\",{\"1\":{\"670\":1}}],[\"可以将属性值设置为相对于其父元素属性的百分比\",{\"1\":{\"534\":1}}],[\"可以将\",{\"1\":{\"177\":1,\"895\":1,\"1673\":1,\"2088\":1}}],[\"可以将所有类型的文件转换为\",{\"1\":{\"138\":1}}],[\"可以将改变提交到远程仓库\",{\"1\":{\"17\":1}}],[\"可以将自己的静态页面直接部署到\",{\"1\":{\"16\":1}}],[\"可以供用户访问\",{\"1\":{\"16\":1}}],[\"那究竟要不要被处理\",{\"1\":{\"2065\":1}}],[\"那些\",{\"1\":{\"1916\":1}}],[\"那说明index也为0\",{\"1\":{\"1793\":1}}],[\"那必须写set函数去响应修改\",{\"1\":{\"1376\":1}}],[\"那如果不是呢\",{\"1\":{\"1615\":1}}],[\"那如果我不想用\",{\"1\":{\"1198\":1}}],[\"那如何又要安全\",{\"1\":{\"353\":1}}],[\"那什么又是阻止冒泡\",{\"1\":{\"1155\":1}}],[\"那什么时候使用中括号访问方法呢\",{\"1\":{\"828\":1}}],[\"那这两个属性有什么区别呢\",{\"1\":{\"1087\":1}}],[\"那一组表示的是浏览器窗口本身的尺寸\",{\"1\":{\"1087\":1}}],[\"那一组表示的是页面视图区的大小\",{\"1\":{\"1087\":1}}],[\"那岂不是占用内存空间么\",{\"1\":{\"1023\":1}}],[\"那我们就需要添加\",{\"1\":{\"1158\":1}}],[\"那我们就顺便为大家介绍一下伪数组对象的原理\",{\"1\":{\"828\":1}}],[\"那我怎么知道用户按下了哪一个键呢\",{\"1\":{\"1149\":1}}],[\"那我如何才能遍历出一个对象的\",{\"1\":{\"830\":1}}],[\"那就会出现爆栈\",{\"1\":{\"1925\":1,\"1993\":1}}],[\"那就意味着任何方式都无法修改它\",{\"1\":{\"1914\":1}}],[\"那就意味着客户端是可以自我签发jwt了\",{\"1\":{\"367\":1}}],[\"那就继续递归遍历它的子节点\",{\"1\":{\"1795\":1}}],[\"那就把next之后的内容截出来继续下一轮循环匹配\",{\"1\":{\"1792\":1}}],[\"那就把\",{\"1\":{\"1792\":1}}],[\"那就调用文本解析器来解析文本\",{\"1\":{\"1791\":1}}],[\"那就认为是文本节点\",{\"1\":{\"1789\":1}}],[\"那就找一个中间人\",{\"1\":{\"1615\":1}}],[\"那就监视哪个属性\",{\"1\":{\"1498\":1}}],[\"那就代表从指定的起始位置到指定的末尾位置之间的项\",{\"1\":{\"854\":1}}],[\"那就代表起始位置\",{\"1\":{\"854\":1}}],[\"那就是密钥的管理问题\",{\"1\":{\"2099\":1}}],[\"那就是新增\",{\"1\":{\"1917\":1}}],[\"那就是它依然存在每个元素只能绑定一个函数的局限性\",{\"1\":{\"1144\":1}}],[\"那就是如果要添加大量节点的话\",{\"1\":{\"1120\":1}}],[\"那就是当我在使用京东进行购物的时候\",{\"1\":{\"1104\":1}}],[\"那就是sort\",{\"1\":{\"944\":1}}],[\"那就是时间戳\",{\"1\":{\"874\":1}}],[\"那就是\",{\"1\":{\"792\":1,\"2047\":1}}],[\"那就是什么源对象和目标对象\",{\"1\":{\"763\":1}}],[\"那就需要装非常多的插件\",{\"1\":{\"148\":1}}],[\"那个文件夹就是\",{\"1\":{\"289\":1}}],[\"那个时候\",{\"1\":{\"22\":1}}],[\"那你有没有办法使\",{\"1\":{\"87\":1}}],[\"那么表示该路由记录在目标路由中存在\",{\"1\":{\"2073\":1}}],[\"那么说明导航守卫内部没有使用\",{\"1\":{\"2075\":1}}],[\"那么说明该路由记录正在进入\",{\"1\":{\"2073\":1}}],[\"那么说明该路由正在离开\",{\"1\":{\"2073\":1}}],[\"那么说明是第一次\",{\"1\":{\"2058\":1}}],[\"那么深度的默认值为\",{\"1\":{\"2068\":1}}],[\"那么不处理这个事件\",{\"1\":{\"2065\":1}}],[\"那么不同的\",{\"1\":{\"2047\":1}}],[\"那么值设置为\",{\"1\":{\"2061\":1}}],[\"那么从\",{\"1\":{\"2058\":1}}],[\"那么需要单独处理\",{\"1\":{\"2058\":1}}],[\"那么此时是没有任何状态的\",{\"1\":{\"2057\":1}}],[\"那么此时得到的cookie的值为name=s\",{\"1\":{\"350\":1}}],[\"那么你就可以将\",{\"1\":{\"2053\":1}}],[\"那么你需要添加如下的配置\",{\"1\":{\"2050\":1}}],[\"那么你可以添加如下的配置\",{\"1\":{\"2050\":1}}],[\"那么执行了上面的代码之后\",{\"1\":{\"2050\":1}}],[\"那么执行循环体\",{\"1\":{\"821\":1}}],[\"那么用户就可以通过浏览器的前进和后退去控制视图的变化\",{\"1\":{\"2049\":1}}],[\"那么将\",{\"1\":{\"2047\":1}}],[\"那么则返回原本的参数\",{\"1\":{\"2047\":1}}],[\"那么通过阅读\",{\"1\":{\"2045\":1}}],[\"那么通过正则对象的$1\",{\"1\":{\"911\":1}}],[\"那么直接用\",{\"1\":{\"2045\":1}}],[\"那么上面会有一些属性以及方法\",{\"1\":{\"2041\":1}}],[\"那么什么都不需要做\",{\"1\":{\"1951\":1}}],[\"那么什么都不做\",{\"1\":{\"1897\":1}}],[\"那么形参与实参之间没有引用关系\",{\"1\":{\"1935\":1}}],[\"那么也应该将其包装成响应式数据\",{\"1\":{\"1931\":1}}],[\"那么也会将\",{\"1\":{\"828\":1}}],[\"那么返回定义在\",{\"1\":{\"1923\":1,\"1993\":1}}],[\"那么新建一个\",{\"1\":{\"1889\":1}}],[\"那么后面的元素就都缺少闭合标签\",{\"1\":{\"1792\":1}}],[\"那么后代元素触发事件时\",{\"1\":{\"1155\":1}}],[\"那么oldchildren里面剩余的节点都是需要删除的节点\",{\"1\":{\"1789\":1}}],[\"那么newchildren里面剩余的节点都是需要新增的节点\",{\"1\":{\"1789\":1}}],[\"那么传入参数列表中下标为2的就是新增的元素\",{\"1\":{\"1785\":1}}],[\"那么传入参数就是新增的元素\",{\"1\":{\"1785\":1}}],[\"那么在以后的训练过程中该神经元的参数将一直保持不变\",{\"1\":{\"1666\":1}}],[\"那么在使用\",{\"1\":{\"1306\":1}}],[\"那么在使用json\",{\"1\":{\"896\":1}}],[\"那么使用怎样的限制规则是合理的\",{\"1\":{\"1595\":1}}],[\"那么非常简单\",{\"1\":{\"1537\":1}}],[\"那么当父子组件为\",{\"1\":{\"1433\":1}}],[\"那么请复制props的内容到data中一份\",{\"1\":{\"1429\":1}}],[\"那么收集的的就是\",{\"1\":{\"1357\":1}}],[\"那么收集的就是checked\",{\"1\":{\"1357\":2}}],[\"那么页面中用到该数据的地方也会自动更新\",{\"1\":{\"1350\":1}}],[\"那么最好在\",{\"1\":{\"1314\":1}}],[\"那么最终通过\",{\"1\":{\"2058\":2}}],[\"那么最终会找到根元素\",{\"1\":{\"1207\":1}}],[\"那么最终返回\",{\"1\":{\"945\":2}}],[\"那么依然需要使用\",{\"1\":{\"1309\":1}}],[\"那么考虑写一个\",{\"1\":{\"1307\":1}}],[\"那么编译出的\",{\"1\":{\"1299\":1}}],[\"那么占位符和继承的主要区别的\",{\"1\":{\"1299\":1}}],[\"那么建议使用继承\",{\"1\":{\"1299\":1}}],[\"那么事件委托就是一个很好的解决方案\",{\"1\":{\"1241\":1}}],[\"那么一个\",{\"1\":{\"1198\":1}}],[\"那么之前我们用到的\",{\"1\":{\"1198\":1}}],[\"那么手指指向的不是一个圆\",{\"1\":{\"1138\":1}}],[\"那么第一个子元素就应该为\",{\"1\":{\"1112\":1}}],[\"那么它只会返回第一个\",{\"1\":{\"1112\":1}}],[\"那么它的值为\",{\"1\":{\"952\":1}}],[\"那么应用程序还可以显示其对手的位置\",{\"1\":{\"1100\":1}}],[\"那么肯定就有相应的属性和方法\",{\"1\":{\"1087\":1}}],[\"那么首先第一步就是应该了解如何向网页中引入\",{\"1\":{\"1077\":1}}],[\"那么该请求会转发给服务器\",{\"1\":{\"1444\":1}}],[\"那么该对象将不复存在\",{\"1\":{\"1109\":1}}],[\"那么该\",{\"1\":{\"1105\":2}}],[\"那么该块内存会被\",{\"1\":{\"1028\":1}}],[\"那么该值无法参与下一次计算\",{\"1\":{\"794\":1}}],[\"那么多闭包\",{\"1\":{\"1023\":1}}],[\"那么对应的属性值会被新的引用给覆盖\",{\"1\":{\"1015\":1}}],[\"那么为什么\",{\"1\":{\"980\":1}}],[\"那么默认会是\",{\"1\":{\"2053\":1}}],[\"那么默认值为\",{\"1\":{\"2048\":1}}],[\"那么默认值为undefined\",{\"1\":{\"780\":1}}],[\"那么默认将会是在全局环境中声明一个变量\",{\"1\":{\"939\":1}}],[\"那么既然是对象\",{\"1\":{\"922\":1}}],[\"那么如果想要往后面继续书写字符\",{\"1\":{\"918\":1}}],[\"那么必须先写一个\",{\"1\":{\"918\":1}}],[\"那么必须要尽可能的减少线程\",{\"1\":{\"24\":1}}],[\"那么可以这样写\",{\"1\":{\"1295\":1}}],[\"那么可以使用\",{\"1\":{\"912\":1,\"1290\":1}}],[\"那么可以通过指定数组的下标来进行获取\",{\"1\":{\"911\":1}}],[\"那么可替换的就不仅仅是简单的变量名\",{\"1\":{\"790\":1}}],[\"那么怎样才能清空这些没用的数据呢\",{\"1\":{\"865\":1}}],[\"那么我们就维护一个初始化的状态\",{\"1\":{\"2057\":1}}],[\"那么我们就可以让\",{\"1\":{\"2049\":1}}],[\"那么我们就可以创建一个新的通知\",{\"1\":{\"1105\":1}}],[\"那么我们可以很自然的想到\",{\"1\":{\"2042\":1}}],[\"那么我们可以传入一个数组进去\",{\"1\":{\"860\":1}}],[\"那么我们需要封装\",{\"1\":{\"294\":1}}],[\"那么就给一个新数组\",{\"1\":{\"2075\":1}}],[\"那么就直接使用\",{\"1\":{\"2070\":1}}],[\"那么就渲染默认插槽\",{\"1\":{\"2070\":1}}],[\"那么就使用从父级注入的路由对象\",{\"1\":{\"2068\":1}}],[\"那么就通过\",{\"1\":{\"2065\":1}}],[\"那么就做\",{\"1\":{\"2061\":1}}],[\"那么就在页面卸载之前保存当前的滚动位置\",{\"1\":{\"2061\":1}}],[\"那么就不需要做任何的处理\",{\"1\":{\"2061\":1}}],[\"那么就会调用\",{\"1\":{\"2058\":1}}],[\"那么就会被报错\",{\"1\":{\"1927\":1}}],[\"那么就手动的添加一个\",{\"1\":{\"2054\":1}}],[\"那么就能够看到这个对象\",{\"1\":{\"2048\":1}}],[\"那么就是异质对象\",{\"1\":{\"1903\":1}}],[\"那么就从后往前遍历栈\",{\"1\":{\"1792\":1}}],[\"那么就把html字符串当作纯文本对待\",{\"1\":{\"1792\":1}}],[\"那么就要在\",{\"1\":{\"1437\":1}}],[\"那么就只是单纯的函数调用\",{\"1\":{\"876\":1}}],[\"那么就只能在这个局部的作用域里面能访问到\",{\"1\":{\"786\":1}}],[\"那么就可以直接简写\",{\"1\":{\"836\":1}}],[\"那么有必要说一说被用的很多的stoppropagation\",{\"1\":{\"1155\":1}}],[\"那么有必要介绍一下this关键字\",{\"1\":{\"834\":1}}],[\"那么有没有简便点的方法呢\",{\"1\":{\"148\":1}}],[\"那么写法上有一定的区别\",{\"1\":{\"830\":1}}],[\"那么调用时会直接报错\",{\"1\":{\"829\":1}}],[\"那么再次访问值为变为\",{\"1\":{\"829\":1}}],[\"那么这些深层次的嵌套也会变为响应式\",{\"1\":{\"2044\":1}}],[\"那么这里就是对象\",{\"1\":{\"2070\":1}}],[\"那么这里就是执行该函数\",{\"1\":{\"2070\":1}}],[\"那么这里就使用\",{\"1\":{\"2068\":1}}],[\"那么这里就有几种形式\",{\"1\":{\"1316\":1}}],[\"那么这里也需要考虑\",{\"1\":{\"1920\":1}}],[\"那么这段代码就变为了\",{\"1\":{\"2058\":1}}],[\"那么这段代码就不能正确地工作了\",{\"1\":{\"1888\":1}}],[\"那么这段话的内容要么属于线性客观描述某件事情\",{\"1\":{\"1685\":1}}],[\"那么这种写法还是非常方便快捷的\",{\"1\":{\"1143\":1}}],[\"那么这两者之间有什么区别呢\",{\"1\":{\"1112\":1}}],[\"那么这两个方法的区别是什么呢\",{\"1\":{\"1094\":1}}],[\"那么这个组件就会被复用\",{\"1\":{\"2071\":1}}],[\"那么这个组件就是我们要渲染的组件\",{\"1\":{\"2070\":1}}],[\"那么这个对象就是我的\",{\"1\":{\"2070\":1}}],[\"那么这个函数会调用\",{\"1\":{\"2065\":1}}],[\"那么这个函数同样会返回\",{\"1\":{\"2065\":1}}],[\"那么这个函数也会返回\",{\"1\":{\"2065\":2}}],[\"那么这个函数就会返回\",{\"1\":{\"2065\":1}}],[\"那么这个函数被称之为对象的方法\",{\"1\":{\"828\":1}}],[\"那么这个路由的完整路径就会被映射为\",{\"1\":{\"2053\":1}}],[\"那么这个js对象就可以用来描述这个dom节点\",{\"1\":{\"1788\":1}}],[\"那么这个渲染过程是很耗时的\",{\"1\":{\"1239\":1}}],[\"那么这个\",{\"1\":{\"1139\":1,\"2047\":1,\"2061\":2}}],[\"那么这个引用类型值的引用次数减\",{\"1\":{\"1031\":1}}],[\"那么这个时候就会返回一个对象\",{\"1\":{\"876\":1}}],[\"那么这个时候可以使用symbol\",{\"1\":{\"828\":1}}],[\"那么这时尽量不要变基\",{\"1\":{\"11\":1}}],[\"那么正数会被转化为infinity\",{\"1\":{\"794\":1}}],[\"那么会进入到\",{\"1\":{\"2058\":1}}],[\"那么会进行一个数据的覆盖\",{\"1\":{\"782\":1}}],[\"那么会取得其原型\",{\"1\":{\"1910\":1}}],[\"那么会被自动转换为布尔值\",{\"1\":{\"818\":1}}],[\"那么会将字符串先转换为数字\",{\"1\":{\"812\":1}}],[\"那么会声明一个全局变量\",{\"1\":{\"786\":1}}],[\"那么是不可能匹配上的\",{\"1\":{\"918\":1}}],[\"那么是不能够再改变的\",{\"1\":{\"779\":1}}],[\"那么是先自增或自减\",{\"1\":{\"806\":1}}],[\"那么是允许重复声明的\",{\"1\":{\"782\":1}}],[\"那么\",{\"1\":{\"767\":1,\"769\":1,\"830\":1,\"865\":1,\"1124\":1,\"1200\":1,\"1436\":1,\"1498\":1,\"1902\":1,\"1910\":1,\"2058\":1,\"2070\":1}}],[\"那么媒体文件将不会播放\",{\"1\":{\"747\":1}}],[\"那么浏览器会自动创建一个\",{\"1\":{\"669\":1}}],[\"那么显示在可见区域的这个视口\",{\"1\":{\"648\":1}}],[\"那么右侧有一部分区域\",{\"1\":{\"648\":1}}],[\"那么更大的外边距会被保留\",{\"1\":{\"552\":1}}],[\"那么python会自动给生成\",{\"1\":{\"405\":1}}],[\"那么代理某些\",{\"1\":{\"134\":1}}],[\"那么自然也需要像其他语言那样有解决复杂问题的开发框架\",{\"1\":{\"25\":1}}],[\"它考虑了嵌套路由的情况\",{\"1\":{\"2065\":1}}],[\"它支持用户在具有路由功能的应用中\",{\"1\":{\"2032\":1}}],[\"它支持各种模块化标准\",{\"1\":{\"122\":1}}],[\"它实现了\",{\"1\":{\"1931\":1}}],[\"它并不是一个响应式对象\",{\"1\":{\"1911\":1}}],[\"它并不会简单的把缓存删除\",{\"1\":{\"1537\":1}}],[\"它发现\",{\"1\":{\"1902\":1}}],[\"它允许我们拦截并重新定义对一个对象的基本操作\",{\"1\":{\"1901\":1}}],[\"它允许使用资源文件\",{\"1\":{\"142\":1}}],[\"它能够实现对\",{\"1\":{\"1901\":1}}],[\"它能有效的避免回调地狱的产生\",{\"1\":{\"1776\":1}}],[\"它才会进行计算并得到值\",{\"1\":{\"1896\":1}}],[\"它应具有不只是静态文本的子节点\",{\"1\":{\"1795\":1}}],[\"它应该除了有解析常规html的\",{\"1\":{\"1791\":1}}],[\"它包含了和当前\",{\"1\":{\"2053\":1}}],[\"它包含了最重要的部分特征\",{\"1\":{\"1757\":1}}],[\"它包含与组件有关的状态信息\",{\"1\":{\"1954\":1}}],[\"它包含一个线性层\",{\"1\":{\"1673\":1}}],[\"它包含以下几个只读属性\",{\"1\":{\"737\":1}}],[\"它接收两个参数\",{\"1\":{\"1954\":1}}],[\"它接收输入张量并将其作用于\",{\"1\":{\"1666\":1}}],[\"它接受三个参数\",{\"1\":{\"1797\":1}}],[\"它接受一个参数\",{\"1\":{\"1161\":2,\"1797\":2}}],[\"它利用\",{\"1\":{\"1649\":2}}],[\"它表示\",{\"1\":{\"2031\":1}}],[\"它表示没有值\",{\"1\":{\"1275\":1}}],[\"它表达了\",{\"1\":{\"1626\":1}}],[\"它开启一个不会结束的\",{\"1\":{\"1560\":1}}],[\"它决定了这个缓存可以使用多久\",{\"1\":{\"1541\":1}}],[\"它突然想起了一件事\",{\"1\":{\"1535\":1}}],[\"它为以后浏览器要不要去请求服务器提供了各种依据\",{\"1\":{\"1534\":1}}],[\"它为解释器指定了模块的搜索路径\",{\"1\":{\"379\":1}}],[\"它影响的只是渲染流程的最后一个\",{\"1\":{\"1529\":1}}],[\"它内部使用requireinternalslot\",{\"1\":{\"1927\":1}}],[\"它内部会自动通过reactive转为\",{\"1\":{\"1492\":1}}],[\"它内部的元素不会被复制\",{\"1\":{\"1213\":1}}],[\"它负责监听用户的输入事件以更新数据\",{\"1\":{\"1358\":1}}],[\"它扩展了\",{\"1\":{\"1324\":1}}],[\"它甚至可以被继承\",{\"1\":{\"1308\":1}}],[\"它\",{\"1\":{\"1299\":1}}],[\"它返回一个等同于\",{\"1\":{\"1493\":1}}],[\"它返回一个布尔值\",{\"1\":{\"857\":1,\"1677\":1}}],[\"它返回设置完成后的新的\",{\"1\":{\"1279\":1}}],[\"它获取的是字符码\",{\"1\":{\"1219\":1}}],[\"它获取的是键值码\",{\"1\":{\"1219\":1}}],[\"它最终都会冒泡到它的父元素\",{\"1\":{\"1219\":1}}],[\"它有两个参数\",{\"1\":{\"1213\":1}}],[\"它有一个巨大的头\",{\"1\":{\"666\":1}}],[\"它要求被添加的节点在前\",{\"1\":{\"1209\":1}}],[\"它既关心键\",{\"1\":{\"1930\":1}}],[\"它既可以获取呈现在页面上的最终样式\",{\"1\":{\"1206\":1}}],[\"它既是\",{\"1\":{\"1092\":1}}],[\"它还有个别名\",{\"1\":{\"1198\":1}}],[\"它目前已经停止更新\",{\"1\":{\"1196\":1}}],[\"它占有一片独有的内存空间\",{\"1\":{\"1168\":1}}],[\"它排除了最常用的来自于外部样式表的样式\",{\"1\":{\"1127\":1}}],[\"它指向所有以data\",{\"1\":{\"1125\":1}}],[\"它指向函数对象\",{\"1\":{\"1007\":1}}],[\"它也是一个\",{\"1\":{\"1889\":1}}],[\"它也会返回数组\",{\"1\":{\"1112\":1}}],[\"它也能在外部的函数或者全局作用域中使用\",{\"1\":{\"948\":1}}],[\"它适用于整个计算机领域\",{\"1\":{\"1033\":1}}],[\"它就会直接使用缓存\",{\"1\":{\"1536\":1}}],[\"它就会认为这是一条导入纯\",{\"1\":{\"1315\":1}}],[\"它就会释放引用次数是\",{\"1\":{\"1031\":1}}],[\"它就会释放那些引用次数为\",{\"1\":{\"1030\":1}}],[\"它就是一种变量\",{\"1\":{\"931\":1}}],[\"它就是你服务端的私钥\",{\"1\":{\"367\":1}}],[\"它默认指向一个\",{\"1\":{\"1007\":1}}],[\"它将每个层映射到其参数张量\",{\"1\":{\"1673\":1}}],[\"它将原地修改输入张量而不是创建一个新的张量作为输出\",{\"1\":{\"1666\":1}}],[\"它将响应性相关的细节抽象出来\",{\"1\":{\"1485\":1}}],[\"它将影响之前的使用和之后的使用\",{\"1\":{\"1259\":1}}],[\"它将\",{\"1\":{\"995\":1}}],[\"它总是返回一个对象\",{\"1\":{\"990\":1}}],[\"它所生成的变量只能用于\",{\"1\":{\"958\":1}}],[\"它显示了函数的调用者\",{\"1\":{\"952\":1}}],[\"它由浏览器创建我们可以直接使用\",{\"1\":{\"937\":1}}],[\"它代表着一个浏览器窗口的实例\",{\"1\":{\"1086\":1}}],[\"它代表的是浏览器的一个实例\",{\"1\":{\"1083\":1}}],[\"它代表的是一个浏览器的窗口\",{\"1\":{\"937\":1}}],[\"它代表了画布区域的对象数据\",{\"1\":{\"736\":1}}],[\"它里边有一个属性叫做callee\",{\"1\":{\"932\":1}}],[\"它里边封装了数学运算相关的属性和方法\",{\"1\":{\"878\":1}}],[\"它每次也只会返回一个匹配项\",{\"1\":{\"925\":1}}],[\"它匹配的是\",{\"1\":{\"916\":1}}],[\"它匹配若干字符之一\",{\"1\":{\"903\":1}}],[\"它只进不出\",{\"1\":{\"1890\":1}}],[\"它只管根据请求的情况来决定如何响应\",{\"1\":{\"1544\":1}}],[\"它只是在原生\",{\"1\":{\"1194\":1}}],[\"它只用于限定作用范围\",{\"1\":{\"913\":1}}],[\"它只有在第一个运算数为\",{\"1\":{\"397\":2}}],[\"它属于一个工具类不用创建对象\",{\"1\":{\"878\":1}}],[\"它类似于对象\",{\"1\":{\"867\":1}}],[\"它和服务器一直以来都是相亲相爱的小伙伴\",{\"1\":{\"1534\":1}}],[\"它和我们普通对象功能类似\",{\"1\":{\"838\":1}}],[\"它和其他数据类型相加都会被转换为字符串类型\",{\"1\":{\"789\":1}}],[\"它执行的顺序为\",{\"1\":{\"821\":1}}],[\"它用于控制跨站点请求时是否发送\",{\"1\":{\"2088\":1}}],[\"它用到的provide注入的对象在父组件初始化时已经挂载到了vm\",{\"1\":{\"1803\":1}}],[\"它用反引号\",{\"1\":{\"790\":1}}],[\"它用来移动\",{\"1\":{\"720\":1}}],[\"它使用文本来存储信息\",{\"1\":{\"767\":1}}],[\"它可能的引入方式是\",{\"1\":{\"1543\":1}}],[\"它可能会同时触发\",{\"1\":{\"1498\":1}}],[\"它可能会经过很多个元素\",{\"1\":{\"764\":1}}],[\"它可以直接性改变一些默认方法\",{\"1\":{\"1903\":1}}],[\"它可以用作占位符\",{\"1\":{\"1797\":1}}],[\"它可以用于绘制图形\",{\"1\":{\"701\":1}}],[\"它可以通过将负值变为\",{\"1\":{\"1666\":1}}],[\"它可以通过一种极其简单的方式告诉客户端\",{\"1\":{\"1537\":1}}],[\"它可以自适应地考虑更大或更小的输入张量\",{\"1\":{\"1663\":1}}],[\"它可以在输入上执行\",{\"1\":{\"1663\":1}}],[\"它可以被用于在组件的\",{\"1\":{\"1493\":1}}],[\"它可以向用户提供附近不远处某商店运动鞋的打折优惠信息\",{\"1\":{\"1100\":1}}],[\"它可以接受一个正则表达式作为参数\",{\"1\":{\"894\":1}}],[\"它可以作为一个方括号内的逗号分隔值出现\",{\"1\":{\"390\":1}}],[\"它可以存任意数据类型\",{\"1\":{\"356\":1}}],[\"它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源\",{\"1\":{\"122\":1}}],[\"它必须小于最大值\",{\"1\":{\"696\":1}}],[\"它必须比最小值属性大\",{\"1\":{\"696\":1}}],[\"它必须比最小值要大\",{\"1\":{\"696\":1}}],[\"它必须比最大值要小\",{\"1\":{\"696\":1}}],[\"它常被用来包裹一个缩略语或缩写\",{\"1\":{\"665\":1}}],[\"它通过比较当前路由的索引位置和参数对象来确定链接的活动状态\",{\"1\":{\"2065\":1}}],[\"它通过一个开发时态的\",{\"1\":{\"122\":1}}],[\"它通常用于表示一个应用程序的基础\",{\"1\":{\"2053\":1}}],[\"它通常出现在一堆文字之间\",{\"1\":{\"662\":1}}],[\"它不需要移动\",{\"1\":{\"1962\":1}}],[\"它不是一个构造函数\",{\"1\":{\"878\":1}}],[\"它不会导致\",{\"1\":{\"1253\":1}}],[\"它不会阻塞后面代码的执行\",{\"1\":{\"1224\":1}}],[\"它不会修改数组\",{\"1\":{\"857\":1}}],[\"它不会影响到页面的布局\",{\"1\":{\"615\":1}}],[\"它不仅可以实现小的效果\",{\"1\":{\"23\":1}}],[\"它定义了网格的列和行\",{\"1\":{\"605\":1}}],[\"它定义了一个块级别的盒子\",{\"1\":{\"548\":1}}],[\"它主要用来代替浮动来完成页面的布局\",{\"1\":{\"584\":1}}],[\"它主要用在对scroll事件的监听上\",{\"1\":{\"572\":1}}],[\"它规定了该区域内的内容在\",{\"1\":{\"576\":1}}],[\"它规定了在该区域中\",{\"1\":{\"564\":1}}],[\"它们转换后的\",{\"1\":{\"1978\":1}}],[\"它们是两个完全独立的值\",{\"1\":{\"1935\":1}}],[\"它们是在eventsmixin函数中挂载到vue原型上的\",{\"1\":{\"1813\":1}}],[\"它们是在statemixin函数中挂载到vue原型上的\",{\"1\":{\"1809\":1}}],[\"它们通常用于封装通用的逻辑或行为\",{\"1\":{\"1800\":1}}],[\"它们完整的交互过程如下\",{\"1\":{\"1537\":1}}],[\"它们表达了下面的信息\",{\"1\":{\"1537\":1}}],[\"它们只是同一个底层系统所提供的两套不同的接口\",{\"1\":{\"1485\":1}}],[\"它们之间存在以下逻辑\",{\"1\":{\"1776\":1}}],[\"它们之间不能相互穿插\",{\"1\":{\"578\":1}}],[\"它们之前存在一个重要的内置关系\",{\"1\":{\"1424\":1}}],[\"它们告诉\",{\"1\":{\"1308\":1}}],[\"它们对读者来说更清晰\",{\"1\":{\"1286\":1}}],[\"它们接受或返回数字作为索引\",{\"1\":{\"1265\":1}}],[\"它们可能包括任何地方的插值\",{\"1\":{\"1265\":1}}],[\"它们可以将表单元素的值以键值对的形式组装起来\",{\"1\":{\"1231\":1}}],[\"它们并没有同时执行\",{\"1\":{\"1224\":1}}],[\"它们的\",{\"1\":{\"1423\":2}}],[\"它们的动画会同时进行\",{\"1\":{\"1224\":1}}],[\"它们的区别在于\",{\"1\":{\"1205\":1}}],[\"它们都会读取数组的\",{\"1\":{\"1921\":1}}],[\"它们都是在\",{\"1\":{\"1200\":1}}],[\"它们都必须是正值\",{\"1\":{\"720\":1}}],[\"它们有助于查明点击的位置\",{\"1\":{\"1153\":1}}],[\"它们也总是指向同一个对象\",{\"1\":{\"984\":1}}],[\"它们也能匹配字符串内部某一行文本的起始位置和结束位置\",{\"1\":{\"919\":1}}],[\"它们分别匹配字符串的开始位置和结束位置\",{\"1\":{\"917\":1}}],[\"它们和小写的简记符在含义上刚好相反\",{\"1\":{\"904\":1}}],[\"它们除了字面意思外\",{\"1\":{\"902\":1}}],[\"它们就一直存储在集合\",{\"1\":{\"865\":1}}],[\"它们默认都为\",{\"1\":{\"733\":1}}],[\"它们与其他内联元素\",{\"1\":{\"552\":1}}],[\"它们不会另起一行\",{\"1\":{\"552\":1}}],[\"它们会以指定的外边距分隔\",{\"1\":{\"552\":1}}],[\"它是无法观测到的\",{\"1\":{\"1786\":1}}],[\"它是输入序列中的各个位置所对应的实际数值\",{\"1\":{\"1678\":1}}],[\"它是用来表示输入序列中各个位置的特征的向量\",{\"1\":{\"1678\":1}}],[\"它是通过上一步的输出来计算的\",{\"1\":{\"1678\":1}}],[\"它是基于\",{\"1\":{\"1662\":1}}],[\"它是当\",{\"1\":{\"1240\":1}}],[\"它是将\",{\"1\":{\"1217\":1}}],[\"它是下标值\",{\"1\":{\"1199\":1}}],[\"它是顺时针方向的\",{\"1\":{\"720\":1}}],[\"它是一个内部类\",{\"1\":{\"2002\":1}}],[\"它是一个普通对象\",{\"1\":{\"1937\":1}}],[\"它是一个函数\",{\"1\":{\"1897\":1}}],[\"它是一个\",{\"1\":{\"1889\":1}}],[\"它是一个持久连接的协议\",{\"1\":{\"1649\":1}}],[\"它是一个实时的单对象\",{\"1\":{\"1112\":1}}],[\"它是一个有序的值列表\",{\"1\":{\"838\":1}}],[\"它是一个编译器\",{\"1\":{\"146\":1}}],[\"它是一块区域\",{\"1\":{\"576\":1}}],[\"它是\",{\"1\":{\"539\":1,\"895\":1,\"1889\":1}}],[\"它是元素和其他部分组合起来告诉浏览器哪个\",{\"1\":{\"515\":1}}],[\"它会分析该字符\",{\"1\":{\"1880\":1}}],[\"它会被作为\",{\"1\":{\"1824\":1}}],[\"它会被移出正常的文档流\",{\"1\":{\"561\":1}}],[\"它会对输入进行标准化处理\",{\"1\":{\"1665\":1}}],[\"它会自动调整窗口大小和步幅\",{\"1\":{\"1663\":1}}],[\"它会自动启动多个进程\",{\"1\":{\"1555\":1}}],[\"它会自动根据事件类型来获取键值码或字符码\",{\"1\":{\"1219\":1}}],[\"它会从线程池中拿取多个线程来完成分块工作\",{\"1\":{\"1526\":1}}],[\"它会去掉环境中的变量以及被环境中的变量引用的变量的标记\",{\"1\":{\"1029\":1}}],[\"它会在控制台输出表达式返回的值\",{\"1\":{\"1252\":1}}],[\"它会在你运行代码前做一些准备工作\",{\"1\":{\"1013\":1}}],[\"它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上\",{\"1\":{\"345\":1}}],[\"它会先在自身作用域中寻找\",{\"1\":{\"938\":1}}],[\"它会询问你是否要打开文件\",{\"1\":{\"664\":1}}],[\"它会将变量或表达式计算后的值替换进去\",{\"1\":{\"389\":1}}],[\"它会给我们提供一个地址使得我们的页面变成一个真正的网站\",{\"1\":{\"16\":1}}],[\"它没有办法区分多次的请求是否来自于同一个客户端\",{\"1\":{\"343\":1}}],[\"它启动的服务中网站根目录是谁\",{\"1\":{\"289\":1}}],[\"它本质上就是一个单线程\",{\"1\":{\"224\":1}}],[\"它本身仅提供一些分析功能\",{\"1\":{\"146\":1}}],[\"它在某些情况下会修改\",{\"1\":{\"560\":1}}],[\"它在\",{\"1\":{\"222\":1}}],[\"它在传统的开发模式和前后端分离之间无助的徘徊\",{\"1\":{\"23\":1}}],[\"它被广泛地应用在\",{\"1\":{\"217\":1}}],[\"它被用来把结构化的模式应用到一个mongodb集合\",{\"1\":{\"189\":1}}],[\"它需要使用两个不同的密钥\",{\"1\":{\"2100\":1}}],[\"它需要一个标签名作为参数\",{\"1\":{\"1116\":1}}],[\"它需要安装另一个插件才能让\",{\"1\":{\"148\":1}}],[\"它需要在服务器端手写一个高性能的\",{\"1\":{\"24\":1}}],[\"它调用了\",{\"1\":{\"123\":1}}],[\"它提供了一个max\",{\"1\":{\"1539\":1}}],[\"它提供了一个可以准确感知浏览器用户当前位置的方法\",{\"1\":{\"1099\":1}}],[\"它提供了大量的\",{\"1\":{\"1194\":1}}],[\"它提供了两个包\",{\"1\":{\"123\":1}}],[\"它提出了官方的模块化解决方案\",{\"1\":{\"25\":1}}],[\"它把一切视为模块\",{\"1\":{\"122\":1}}],[\"它的触发是在\",{\"1\":{\"2084\":1}}],[\"它的渲染同样依赖\",{\"1\":{\"2031\":1}}],[\"它的主要作用包括\",{\"1\":{\"2016\":1}}],[\"它的状态由如下确定\",{\"1\":{\"1777\":1}}],[\"它的状态如何确定\",{\"1\":{\"1777\":1}}],[\"它的作用是将一个低维的特征图映射到一个高维空间中\",{\"1\":{\"1667\":1}}],[\"它的一阶和二阶导数在\",{\"1\":{\"1658\":1}}],[\"它的一大好处就是使代码更加简洁\",{\"1\":{\"1232\":1}}],[\"它的实现方式有两种\",{\"1\":{\"1572\":1}}],[\"它的文件hash值也会随之而变\",{\"1\":{\"1543\":1}}],[\"它的灵活性也使得组织和重用逻辑的模式变得更加强大\",{\"1\":{\"1485\":1}}],[\"它的用途会更清晰\",{\"1\":{\"1314\":1}}],[\"它的方法中有个参数\",{\"1\":{\"1227\":1}}],[\"它的属性和方法大多数都和原生\",{\"1\":{\"1219\":1}}],[\"它的问题是兼容性\",{\"1\":{\"1214\":1}}],[\"它的优点是新老版本的浏览器都支持\",{\"1\":{\"1214\":1}}],[\"它的定义非常简单\",{\"1\":{\"1033\":1}}],[\"它的值才会被封装\",{\"1\":{\"1231\":1}}],[\"它的值是一个字符串\",{\"1\":{\"1154\":1}}],[\"它的值保存在此内存中\",{\"1\":{\"999\":1}}],[\"它的值就是那个函数\",{\"1\":{\"952\":1}}],[\"它的\",{\"1\":{\"697\":1,\"996\":1,\"1902\":1}}],[\"它的意思是在这个页面上的元素都位于http\",{\"1\":{\"692\":1}}],[\"它的包含块为\",{\"1\":{\"539\":1}}],[\"它的包含块变为距它\",{\"1\":{\"539\":1}}],[\"它的父节点\",{\"1\":{\"416\":1}}],[\"它的效率比浏览器远程传输文件高的多\",{\"1\":{\"117\":1}}],[\"它的执行速度完全可以撑起一个服务器\",{\"1\":{\"24\":1}}],[\"它对输入进行二维平均池化\",{\"1\":{\"1663\":1}}],[\"它对node原生的mongodb模块进行了进一步的优化封装\",{\"1\":{\"189\":1}}],[\"它对\",{\"1\":{\"25\":1,\"1964\":1}}],[\"它解决的问题和\",{\"1\":{\"25\":1}}],[\"它依附于运行环境\",{\"1\":{\"24\":1}}],[\"它基于开源的\",{\"1\":{\"24\":1}}],[\"它天生就是单线程\",{\"1\":{\"24\":1}}],[\"它确定\",{\"1\":{\"24\":1}}],[\"它仅仅用于实现页面中的一些小效果\",{\"1\":{\"22\":1}}],[\"jian\",{\"1\":{\"1453\":3,\"1454\":1}}],[\"jiawait\",{\"1\":{\"1453\":2,\"1454\":1}}],[\"jiaodd\",{\"1\":{\"1453\":2,\"1454\":1}}],[\"jia\",{\"1\":{\"1451\":3,\"1453\":5,\"1454\":1}}],[\"jing\",{\"1\":{\"1201\":3}}],[\"jie\",{\"1\":{\"1093\":1}}],[\"j1h342jg24g234j\",{\"1\":{\"925\":1}}],[\"just\",{\"1\":{\"1786\":1}}],[\"justify\",{\"1\":{\"588\":1,\"599\":1,\"625\":1}}],[\"juejin\",{\"1\":{\"219\":1,\"509\":1,\"510\":1,\"511\":1,\"1015\":1}}],[\"j++\",{\"1\":{\"410\":1,\"411\":1,\"414\":2,\"740\":1,\"1962\":1,\"1968\":3,\"1969\":3}}],[\"j\",{\"1\":{\"410\":8,\"411\":4,\"414\":3,\"415\":10,\"416\":6,\"740\":4,\"794\":2,\"798\":3,\"822\":2,\"828\":2,\"853\":2,\"854\":4,\"883\":5,\"1086\":6,\"1794\":4,\"1962\":6,\"1968\":12,\"1969\":14}}],[\"job\",{\"1\":{\"1488\":4,\"1497\":3,\"1897\":11,\"1954\":5,\"1987\":4}}],[\"john\",{\"1\":{\"366\":1}}],[\"joins\",{\"1\":{\"176\":1}}],[\"join\",{\"1\":{\"155\":2,\"327\":1,\"408\":1,\"501\":1,\"772\":2,\"773\":1,\"854\":4,\"1655\":1,\"1793\":1,\"1915\":1,\"1974\":3}}],[\"jti\",{\"1\":{\"366\":1}}],[\"jwt所面向的用户\",{\"1\":{\"366\":1}}],[\"jwt签发者\",{\"1\":{\"366\":1}}],[\"jwt的签发生成也是在服务器端的\",{\"1\":{\"367\":1}}],[\"jwt的签发时间\",{\"1\":{\"366\":1}}],[\"jwt的第三部分是一个签证信息\",{\"1\":{\"367\":1}}],[\"jwt的唯一身份标识\",{\"1\":{\"366\":1}}],[\"jwt的过期时间\",{\"1\":{\"366\":1}}],[\"jwt的头部承载两部分信息\",{\"1\":{\"365\":1}}],[\"jwt的构成\",{\"0\":{\"364\":1}}],[\"jwt是由三段信息构成的\",{\"1\":{\"364\":1}}],[\"jwt\",{\"0\":{\"363\":1,\"368\":1,\"369\":1},\"1\":{\"363\":4,\"365\":1,\"368\":5,\"369\":3}}],[\"jd\",{\"1\":{\"345\":1}}],[\"jpg`\",{\"1\":{\"727\":1}}],[\"jpg\",{\"1\":{\"294\":1,\"390\":1,\"635\":1,\"666\":2,\"740\":1,\"765\":2,\"1105\":3,\"1150\":1,\"1155\":1,\"1368\":1,\"1570\":1,\"1592\":1,\"1636\":1,\"1833\":1,\"1836\":1,\"1839\":1,\"1862\":1}}],[\"jpg|png|gif|bmp|webp|jpeg\",{\"1\":{\"142\":4}}],[\"jpeg\",{\"1\":{\"294\":2,\"1570\":1,\"1592\":1,\"1636\":1}}],[\"jj\",{\"1\":{\"202\":2}}],[\"jan\",{\"1\":{\"875\":1}}],[\"january\",{\"1\":{\"875\":1}}],[\"jade\",{\"1\":{\"223\":1,\"331\":1}}],[\"jay\",{\"1\":{\"200\":1,\"201\":1}}],[\"java\",{\"0\":{\"2111\":1},\"1\":{\"94\":1,\"218\":2,\"224\":1,\"335\":1,\"980\":2}}],[\"javascript或application\",{\"1\":{\"1570\":1}}],[\"javascript基础\",{\"0\":{\"776\":1}}],[\"javascripts\",{\"1\":{\"332\":1}}],[\"javascript\",{\"0\":{\"1028\":1,\"1077\":1,\"1079\":1,\"1081\":1},\"1\":{\"22\":2,\"23\":1,\"27\":3,\"28\":3,\"29\":2,\"30\":3,\"31\":4,\"84\":1,\"94\":1,\"122\":3,\"138\":2,\"142\":2,\"156\":1,\"158\":1,\"175\":1,\"215\":3,\"216\":3,\"223\":2,\"240\":1,\"245\":2,\"294\":1,\"324\":1,\"485\":1,\"656\":1,\"701\":1,\"746\":1,\"768\":2,\"771\":1,\"772\":1,\"777\":1,\"779\":1,\"781\":2,\"782\":1,\"783\":2,\"785\":1,\"786\":1,\"787\":1,\"789\":1,\"790\":4,\"793\":1,\"794\":3,\"796\":1,\"801\":1,\"808\":1,\"809\":1,\"816\":2,\"822\":1,\"826\":1,\"830\":1,\"843\":2,\"846\":1,\"848\":2,\"856\":1,\"865\":1,\"867\":1,\"895\":4,\"902\":1,\"918\":1,\"921\":2,\"922\":1,\"924\":1,\"925\":1,\"926\":3,\"931\":2,\"943\":1,\"944\":1,\"948\":2,\"956\":5,\"957\":1,\"958\":6,\"959\":3,\"980\":11,\"981\":1,\"995\":3,\"996\":4,\"1013\":1,\"1020\":2,\"1028\":2,\"1029\":1,\"1031\":3,\"1033\":1,\"1034\":1,\"1077\":3,\"1078\":5,\"1079\":4,\"1080\":3,\"1081\":3,\"1088\":1,\"1094\":1,\"1135\":1,\"1137\":3,\"1143\":1,\"1144\":1,\"1147\":2,\"1150\":1,\"1155\":1,\"1158\":1,\"1200\":1,\"1491\":2,\"1519\":1,\"1570\":1,\"1572\":1,\"1636\":2,\"1797\":1,\"1903\":1,\"1935\":1,\"1975\":3,\"1978\":5,\"1979\":1,\"2095\":3},\"2\":{\"961\":1,\"1004\":1,\"1042\":1,\"1075\":1}}],[\"jack\",{\"1\":{\"44\":1,\"836\":1,\"841\":3,\"2019\":2}}],[\"jquery\",{\"0\":{\"44\":1,\"1192\":1,\"1193\":1,\"1194\":1,\"1195\":1,\"1196\":1,\"1197\":1,\"1198\":1,\"1203\":1,\"1204\":1,\"1205\":1,\"1206\":1,\"1208\":1,\"1214\":1,\"1219\":1,\"1226\":1,\"1232\":1,\"1233\":1,\"1238\":1,\"2112\":1},\"1\":{\"30\":3,\"41\":1,\"44\":7,\"45\":2,\"75\":1,\"1025\":1,\"1193\":12,\"1194\":3,\"1195\":4,\"1197\":1,\"1198\":15,\"1199\":4,\"1200\":1,\"1201\":10,\"1202\":3,\"1203\":3,\"1204\":5,\"1205\":2,\"1206\":1,\"1207\":4,\"1208\":2,\"1209\":1,\"1211\":1,\"1212\":1,\"1214\":1,\"1219\":4,\"1220\":1,\"1225\":1,\"1226\":1,\"1232\":11,\"1233\":1,\"1238\":2,\"1240\":1,\"1243\":1},\"2\":{\"1245\":1}}],[\"jsnode\",{\"1\":{\"1978\":11}}],[\"jsast\",{\"1\":{\"1972\":2}}],[\"js实例的构造函数和原型方法\",{\"1\":{\"1782\":1}}],[\"jsdeliver\",{\"1\":{\"1583\":1}}],[\"jsdelivr\",{\"1\":{\"1583\":1}}],[\"js是否有对应的缓存存在即可\",{\"1\":{\"1535\":1}}],[\"js是一个基于\",{\"1\":{\"215\":1}}],[\"js时\",{\"1\":{\"1535\":1}}],[\"js编译器的配置文件\",{\"1\":{\"1427\":1}}],[\"jsconfig\",{\"1\":{\"1427\":1}}],[\"jscoverage\",{\"1\":{\"15\":1}}],[\"jsbasic\",{\"1\":{\"1093\":2,\"2051\":2}}],[\"js进阶\",{\"0\":{\"1005\":1}}],[\"js进行如下常见的配置\",{\"1\":{\"133\":1}}],[\"js结束的文件\",{\"1\":{\"918\":1}}],[\"js的api文档\",{\"1\":{\"241\":1}}],[\"jsp等方式\",{\"1\":{\"219\":1}}],[\"js$\",{\"1\":{\"149\":1,\"150\":2}}],[\"js中\",{\"1\":{\"1454\":1}}],[\"js中追加getters配置\",{\"1\":{\"1452\":1}}],[\"js中创建\",{\"1\":{\"1450\":1}}],[\"js中添加如下配置\",{\"1\":{\"1444\":1}}],[\"js中添加相应的配置信息\",{\"1\":{\"138\":1}}],[\"js中的模块分为三种\",{\"1\":{\"241\":1}}],[\"js中加入字体打包的配置\",{\"1\":{\"143\":1}}],[\"js中引入\",{\"1\":{\"128\":1}}],[\"js作为入口文件分析依赖关系\",{\"1\":{\"124\":1}}],[\"js文件名\",{\"1\":{\"1573\":1}}],[\"js文件中\",{\"1\":{\"124\":1}}],[\"js文件\",{\"1\":{\"59\":1,\"148\":2,\"155\":1,\"288\":1}}],[\"jsonwebtoken\",{\"1\":{\"368\":3}}],[\"jsonplaceholder\",{\"1\":{\"476\":1,\"1181\":1}}],[\"jsonp\",{\"0\":{\"473\":1,\"1614\":1},\"1\":{\"158\":1,\"307\":1,\"474\":1,\"1614\":2,\"1615\":1}}],[\"json中加入如下代码\",{\"1\":{\"71\":1}}],[\"json文件的脚本中修改运行\",{\"1\":{\"124\":1}}],[\"json文件中没有main属性\",{\"1\":{\"59\":1}}],[\"json文件或者是package\",{\"1\":{\"59\":1}}],[\"json文件\",{\"1\":{\"59\":1}}],[\"json\",{\"0\":{\"340\":1,\"471\":1,\"895\":1,\"896\":1,\"897\":1,\"1578\":1},\"1\":{\"34\":1,\"64\":6,\"66\":1,\"72\":2,\"74\":2,\"77\":1,\"89\":1,\"91\":1,\"92\":1,\"133\":1,\"134\":3,\"155\":1,\"156\":3,\"176\":4,\"238\":5,\"270\":1,\"271\":1,\"294\":3,\"307\":4,\"317\":2,\"332\":2,\"340\":9,\"355\":1,\"363\":2,\"368\":1,\"471\":3,\"476\":2,\"770\":7,\"877\":1,\"895\":11,\"896\":2,\"897\":5,\"1105\":2,\"1205\":1,\"1206\":1,\"1207\":1,\"1224\":1,\"1227\":1,\"1231\":1,\"1352\":1,\"1358\":1,\"1427\":3,\"1436\":1,\"1578\":4,\"1587\":1,\"1589\":1,\"1592\":1,\"1609\":3,\"1630\":1,\"1634\":1,\"1793\":2,\"2040\":1,\"2050\":1,\"2061\":1}}],[\"js\",{\"0\":{\"31\":1,\"33\":1,\"36\":1,\"39\":1,\"42\":1,\"44\":1,\"45\":1,\"216\":1,\"217\":1,\"223\":1,\"224\":1,\"225\":1,\"230\":1,\"750\":1,\"751\":1,\"752\":1,\"1002\":1,\"1174\":1,\"1178\":1,\"1240\":1,\"1484\":1,\"1559\":1,\"1903\":1},\"1\":{\"22\":1,\"23\":4,\"24\":6,\"25\":11,\"27\":4,\"28\":4,\"29\":2,\"30\":3,\"31\":5,\"34\":4,\"35\":5,\"36\":1,\"37\":3,\"39\":3,\"40\":5,\"41\":2,\"42\":1,\"43\":3,\"44\":4,\"45\":8,\"61\":1,\"62\":2,\"64\":2,\"71\":5,\"77\":2,\"91\":1,\"116\":2,\"117\":1,\"124\":8,\"128\":2,\"129\":1,\"138\":4,\"142\":4,\"143\":2,\"146\":1,\"148\":5,\"149\":4,\"150\":4,\"155\":8,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"176\":2,\"207\":1,\"212\":8,\"215\":4,\"216\":13,\"217\":2,\"218\":2,\"219\":6,\"220\":4,\"221\":1,\"222\":4,\"223\":5,\"224\":3,\"227\":1,\"228\":3,\"229\":3,\"236\":3,\"238\":6,\"240\":1,\"241\":2,\"242\":2,\"245\":1,\"254\":1,\"255\":1,\"256\":1,\"257\":1,\"258\":1,\"259\":2,\"260\":1,\"262\":1,\"263\":1,\"264\":7,\"271\":1,\"292\":4,\"294\":5,\"295\":1,\"298\":1,\"301\":1,\"321\":2,\"331\":1,\"332\":4,\"340\":1,\"345\":1,\"355\":1,\"583\":1,\"641\":1,\"644\":1,\"675\":4,\"681\":3,\"751\":1,\"777\":3,\"807\":1,\"818\":1,\"846\":1,\"918\":2,\"936\":1,\"937\":1,\"952\":1,\"1010\":2,\"1013\":1,\"1015\":1,\"1018\":1,\"1025\":1,\"1029\":1,\"1063\":1,\"1073\":1,\"1079\":1,\"1093\":2,\"1127\":1,\"1168\":1,\"1172\":2,\"1174\":1,\"1180\":1,\"1182\":4,\"1194\":6,\"1198\":2,\"1199\":1,\"1201\":2,\"1204\":1,\"1205\":1,\"1207\":2,\"1214\":1,\"1219\":2,\"1224\":2,\"1239\":1,\"1240\":3,\"1284\":2,\"1324\":1,\"1350\":1,\"1352\":1,\"1353\":1,\"1427\":9,\"1431\":4,\"1439\":2,\"1445\":1,\"1450\":1,\"1451\":1,\"1454\":2,\"1475\":1,\"1487\":1,\"1526\":6,\"1527\":2,\"1555\":1,\"1556\":3,\"1558\":3,\"1560\":3,\"1570\":2,\"1572\":3,\"1583\":1,\"1595\":1,\"1601\":2,\"1602\":1,\"1613\":2,\"1636\":1,\"1776\":1,\"1790\":1,\"1824\":1,\"1834\":4,\"1835\":1,\"1870\":1,\"1873\":1,\"1877\":1,\"1900\":1,\"1909\":1,\"1910\":1,\"1935\":1,\"1938\":1,\"1972\":1,\"2011\":1,\"2043\":2,\"2048\":1,\"2050\":1,\"2051\":2,\"2053\":2,\"2061\":1}}],[\"默认深度为\",{\"1\":{\"2068\":1}}],[\"默认渲染成带有正确链接的\",{\"1\":{\"2032\":1}}],[\"默认渲染当前路由对应的组件\",{\"1\":{\"2031\":1}}],[\"默认直接访问是关闭的\",{\"1\":{\"1493\":1}}],[\"默认插槽\",{\"1\":{\"1446\":2}}],[\"默认使用\",{\"1\":{\"1434\":1}}],[\"默认使用uid\",{\"1\":{\"355\":1}}],[\"默认此样式全局生效\",{\"1\":{\"1433\":1}}],[\"默认不做响应式处理\",{\"1\":{\"1396\":1}}],[\"默认不监测对象内部值的改变\",{\"1\":{\"1379\":1}}],[\"默认表达式\",{\"1\":{\"1370\":1}}],[\"默认收集的\",{\"1\":{\"1356\":1}}],[\"默认收集的就是\",{\"1\":{\"1356\":1}}],[\"默认会渲染成\",{\"1\":{\"2032\":1}}],[\"默认会为所有成员生成一个以文件名命名的命名空间\",{\"1\":{\"1319\":1}}],[\"默认会形成一个以模块文件名命名的命名空间\",{\"1\":{\"1302\":1}}],[\"默认会将声明变量的部分提升至当前作用域的最顶上\",{\"1\":{\"939\":1}}],[\"默认变量仅需在值后面加上\",{\"1\":{\"1260\":1}}],[\"默认变量\",{\"0\":{\"1260\":1}}],[\"默认返回\",{\"1\":{\"980\":1}}],[\"默认参数\",{\"0\":{\"934\":1}}],[\"默认只会替换第一个\",{\"1\":{\"894\":1}}],[\"默认选中控制\",{\"1\":{\"756\":1}}],[\"默认创建出来的是透明的\",{\"1\":{\"739\":1}}],[\"默认创建的伪元素为行内元素\",{\"1\":{\"566\":1}}],[\"默认边框为\",{\"1\":{\"706\":1}}],[\"默认遇到\",{\"1\":{\"675\":1}}],[\"默认多个连续的空格会合并成一个空格\",{\"1\":{\"658\":1}}],[\"默认样式\",{\"0\":{\"610\":1}}],[\"默认align\",{\"1\":{\"589\":1}}],[\"默认地\",{\"1\":{\"552\":1,\"764\":1,\"919\":3}}],[\"默认情况它总是被浏览器所修改的值\",{\"1\":{\"546\":1}}],[\"默认情况下重新渲染是同步执行的\",{\"1\":{\"1954\":1}}],[\"默认情况下我们的\",{\"1\":{\"894\":1}}],[\"默认情况下元素在\",{\"1\":{\"669\":1}}],[\"默认情况下不会显示\",{\"1\":{\"666\":1}}],[\"默认情况下在\",{\"1\":{\"646\":1}}],[\"默认情况下径向渐变的形状根据元素的形状来计算的\",{\"1\":{\"636\":1}}],[\"默认情况下父元素的高度被内容撑开\",{\"1\":{\"557\":1}}],[\"默认情况下设置margin\",{\"1\":{\"546\":1}}],[\"默认情况下\",{\"1\":{\"15\":1,\"124\":1,\"142\":1,\"356\":1,\"547\":1,\"619\":1,\"649\":2,\"708\":1,\"817\":1,\"907\":1,\"1093\":1,\"1168\":1,\"1311\":1,\"1498\":1,\"1555\":1,\"1612\":1,\"2051\":1,\"2064\":1}}],[\"默认情况下仓库只有一个分支\",{\"1\":{\"10\":1}}],[\"默认宽度和高度都是被内容撑开\",{\"1\":{\"540\":1}}],[\"默认高度是被内容撑开\",{\"1\":{\"540\":1}}],[\"默认总宽度为\",{\"1\":{\"540\":1}}],[\"默认的自定义事件名称为\",{\"1\":{\"1358\":1}}],[\"默认的字体是10px\",{\"1\":{\"730\":1}}],[\"默认的成员方法\",{\"1\":{\"405\":1}}],[\"默认的下载地址在国外\",{\"1\":{\"67\":1}}],[\"默认全局\",{\"1\":{\"402\":1}}],[\"默认\",{\"0\":{\"705\":1},\"1\":{\"350\":1,\"557\":1,\"1059\":3,\"1227\":1}}],[\"默认为空字符串\",{\"1\":{\"1154\":1}}],[\"默认为顺时针\",{\"1\":{\"716\":1}}],[\"默认为16\",{\"1\":{\"534\":1}}],[\"默认为false\",{\"1\":{\"345\":1}}],[\"默认为\",{\"1\":{\"345\":1,\"395\":1,\"591\":2,\"696\":2,\"733\":1,\"1093\":1,\"1213\":2,\"1468\":1,\"1656\":1,\"1659\":1,\"1667\":2,\"1897\":1,\"1913\":1,\"1914\":1,\"1987\":1,\"1991\":1,\"1992\":1,\"2051\":1}}],[\"默认为true\",{\"1\":{\"142\":1}}],[\"默认监听端口为\",{\"1\":{\"340\":1}}],[\"默认监听端口是\",{\"1\":{\"332\":1}}],[\"默认是可以在\",{\"1\":{\"2053\":1}}],[\"默认是下一队列\",{\"1\":{\"1858\":1}}],[\"默认是被销毁掉的\",{\"1\":{\"1457\":1}}],[\"默认是使用的\",{\"1\":{\"944\":1}}],[\"默认是全透明的黑色\",{\"1\":{\"733\":1}}],[\"默认是当前域名\",{\"1\":{\"345\":1}}],[\"默认是普通的\",{\"1\":{\"331\":1}}],[\"默认是\",{\"1\":{\"331\":1,\"345\":1,\"708\":1,\"742\":1}}],[\"默认值处理\",{\"1\":{\"1804\":1}}],[\"默认值为\",{\"1\":{\"1659\":3,\"1665\":2,\"1667\":4,\"1925\":1,\"1969\":1,\"2031\":1}}],[\"默认值为0\",{\"1\":{\"592\":1}}],[\"默认值\",{\"0\":{\"195\":1},\"1\":{\"195\":1,\"547\":1,\"548\":1,\"552\":1,\"557\":1,\"560\":1,\"568\":1,\"586\":1,\"587\":1,\"589\":1,\"621\":1,\"625\":1,\"629\":1,\"631\":1,\"632\":1,\"634\":1,\"641\":1,\"644\":2,\"743\":1,\"1205\":2,\"1429\":1,\"2048\":1}}],[\"默认值是false\",{\"1\":{\"1364\":3}}],[\"默认值是\",{\"1\":{\"64\":1,\"355\":1,\"591\":1,\"708\":2,\"1156\":1}}],[\"默认值是文件夹的名称\",{\"1\":{\"64\":1}}],[\"默认导入\",{\"0\":{\"52\":1}}],[\"默认导入导出\",{\"1\":{\"48\":1}}],[\"默认导出会作为属性\",{\"1\":{\"52\":1}}],[\"默认导出的数据\",{\"1\":{\"51\":2}}],[\"默认导出类似于\",{\"1\":{\"51\":1}}],[\"默认导出\",{\"0\":{\"51\":1}}],[\"默认推不上去\",{\"1\":{\"17\":1}}],[\"添加初始化container等功能\",{\"1\":{\"1998\":1}}],[\"添加新旧值对比\",{\"1\":{\"1990\":1}}],[\"添加新的键值对或修改已存在的键值对\",{\"1\":{\"1279\":1}}],[\"添加新的\",{\"1\":{\"1158\":1}}],[\"添加新的属性\",{\"1\":{\"828\":1}}],[\"添加新的实现功能\",{\"1\":{\"402\":1}}],[\"添加自定义\",{\"1\":{\"1930\":1}}],[\"添加自定义属性标识\",{\"1\":{\"1433\":1}}],[\"添加判断\",{\"1\":{\"1921\":1}}],[\"添加的不都是\",{\"1\":{\"1909\":1}}],[\"添加的节点在后\",{\"1\":{\"1209\":1}}],[\"添加调度器\",{\"1\":{\"1896\":1}}],[\"添加缓存功能\",{\"1\":{\"1896\":1}}],[\"添加副作用函数注册机制\",{\"1\":{\"1888\":1}}],[\"添加vue\",{\"1\":{\"1824\":1}}],[\"添加了\",{\"1\":{\"1784\":1}}],[\"添加任务到微队列的主要方式主要是使用\",{\"1\":{\"1560\":1}}],[\"添加实例方法\",{\"1\":{\"1432\":1}}],[\"添加全局指令\",{\"1\":{\"1432\":1}}],[\"添加全局过滤器\",{\"1\":{\"1432\":1}}],[\"添加事件\",{\"1\":{\"1368\":1}}],[\"添加响应式\",{\"1\":{\"1366\":1,\"1804\":3,\"1836\":1,\"2026\":1}}],[\"添加input\",{\"1\":{\"1358\":1}}],[\"添加prop\",{\"1\":{\"1358\":1}}],[\"添加p元素\",{\"1\":{\"1208\":1}}],[\"添加如下参数\",{\"1\":{\"1579\":1}}],[\"添加如下事件\",{\"1\":{\"1357\":1}}],[\"添加如下两行\",{\"1\":{\"228\":1}}],[\"添加属性\",{\"1\":{\"1232\":1,\"1396\":1,\"2055\":1}}],[\"添加标题元素\",{\"1\":{\"1208\":1}}],[\"添加元素\",{\"1\":{\"1205\":2}}],[\"添加交互队列3\",{\"1\":{\"1181\":1}}],[\"添加交互队列2\",{\"1\":{\"1181\":1}}],[\"添加交互队列1\",{\"1\":{\"1181\":1}}],[\"添加交互队列任务\",{\"1\":{\"1181\":1}}],[\"添加网络队列\",{\"1\":{\"1181\":1}}],[\"添加网络队列任务\",{\"1\":{\"1181\":1}}],[\"添加延时队列\",{\"1\":{\"1181\":1}}],[\"添加延时队列任务\",{\"1\":{\"1181\":1}}],[\"添加到\",{\"1\":{\"1978\":1}}],[\"添加到任务队列\",{\"1\":{\"1954\":1}}],[\"添加到存储副作用函数的桶中\",{\"1\":{\"1886\":1,\"1889\":1}}],[\"添加到依赖属性的dep中\",{\"1\":{\"1849\":1}}],[\"添加到父组件对应内部属性的dep\",{\"1\":{\"1842\":1}}],[\"添加到页面上的事件处理程序数量将直接关系到页面整体的运行性能\",{\"1\":{\"1158\":1}}],[\"添加到文档上面\",{\"1\":{\"1123\":2}}],[\"添加点击事件\",{\"1\":{\"1105\":1}}],[\"添加删除方法\",{\"0\":{\"853\":1}}],[\"添加样式\",{\"1\":{\"1232\":1}}],[\"添加样式和颜色\",{\"0\":{\"708\":1}}],[\"添加样式表引擎\",{\"1\":{\"331\":1}}],[\"添加动态属性\",{\"1\":{\"405\":1}}],[\"添加在请求报文中\",{\"1\":{\"360\":1}}],[\"添加对视图引擎\",{\"1\":{\"331\":1}}],[\"添加对\",{\"1\":{\"331\":4}}],[\"添加之后我们就可以使用npm\",{\"1\":{\"133\":1}}],[\"添加插件\",{\"1\":{\"128\":2}}],[\"添加\",{\"1\":{\"128\":1,\"331\":1,\"1121\":1,\"1428\":1,\"1949\":1,\"2053\":1}}],[\"添加改变到暂存区\",{\"1\":{\"17\":1}}],[\"添加功能\",{\"1\":{\"17\":1}}],[\"常常把这种格式称为\",{\"1\":{\"1249\":1}}],[\"常量的值不能改变\",{\"1\":{\"989\":1}}],[\"常规操作时在\",{\"1\":{\"2011\":1}}],[\"常规元素节点\",{\"1\":{\"1951\":1}}],[\"常规思路\",{\"1\":{\"1949\":1}}],[\"常规对象和异质对象\",{\"1\":{\"1903\":1}}],[\"常规块盒水平居中\",{\"0\":{\"597\":1}}],[\"常规流非定位行盒\",{\"1\":{\"578\":1}}],[\"常规流非定位的块盒\",{\"1\":{\"578\":1}}],[\"常规流块盒的布局\",{\"1\":{\"564\":1}}],[\"常规流布局\",{\"0\":{\"552\":1},\"1\":{\"552\":1}}],[\"常规工作流\",{\"0\":{\"17\":1}}],[\"常见算法\",{\"1\":{\"2099\":1,\"2100\":1,\"2101\":1}}],[\"常见思维陷阱\",{\"0\":{\"1752\":1}}],[\"常见干扰项\",{\"1\":{\"1701\":1}}],[\"常见方法\",{\"0\":{\"1094\":1,\"1097\":1}}],[\"常见方式\",{\"1\":{\"405\":1}}],[\"常见属性\",{\"0\":{\"1087\":1,\"1093\":1,\"1096\":1}}],[\"常见错误\",{\"1\":{\"405\":1}}],[\"常见的分数\",{\"1\":{\"1717\":1}}],[\"常见的值有\",{\"1\":{\"1636\":1}}],[\"常见的状态码有\",{\"1\":{\"1635\":1}}],[\"常见的响应码有\",{\"1\":{\"1635\":1}}],[\"常见的请求方法有\",{\"1\":{\"1632\":1}}],[\"常见的请求头有\",{\"1\":{\"269\":1}}],[\"常见的处理有\",{\"1\":{\"1570\":1}}],[\"常见的包括\",{\"1\":{\"1569\":1}}],[\"常见的还有第三种方式\",{\"1\":{\"1442\":1}}],[\"常见的默认行为有点击链接后\",{\"1\":{\"1156\":1}}],[\"常见的属性有keycode和key属性\",{\"1\":{\"1154\":1}}],[\"常见的有页面加载\",{\"1\":{\"1150\":1}}],[\"常见的键盘事件有\",{\"1\":{\"1149\":1}}],[\"常见的垃圾回收方式\",{\"1\":{\"1031\":1}}],[\"常见的断言还有^和$\",{\"1\":{\"917\":1}}],[\"常见的断言有\",{\"1\":{\"915\":1}}],[\"常见的\",{\"1\":{\"877\":2,\"1093\":1}}],[\"常见的一元运算符还有递增和递减\",{\"1\":{\"806\":1}}],[\"常见的一元运算符有两种\",{\"1\":{\"804\":1}}],[\"常见的算数运算符有加减乘除和取模运算\",{\"1\":{\"803\":1}}],[\"常见的算数运算符有加减乘除和求余运算\",{\"1\":{\"165\":1}}],[\"常见的转换方法如下\",{\"1\":{\"801\":1}}],[\"常见的整体布局\",{\"0\":{\"579\":1}}],[\"常见的会话控制技术\",{\"1\":{\"343\":1}}],[\"常见的类型有\",{\"1\":{\"271\":1}}],[\"常见的关系运算符有小于\",{\"1\":{\"166\":1,\"812\":1}}],[\"常见的构建工具\",{\"0\":{\"119\":1}}],[\"常用来比较的比值包括\",{\"1\":{\"1737\":1}}],[\"常用库\",{\"0\":{\"1650\":1}}],[\"常用于给现有选择器添加伪类\",{\"1\":{\"1332\":1}}],[\"常用方法\",{\"0\":{\"1088\":1}}],[\"常用选择器\",{\"0\":{\"516\":1}}],[\"常用多进程来实现守护服务\",{\"1\":{\"408\":1}}],[\"常用函数和参数如下\",{\"1\":{\"1656\":1}}],[\"常用函数\",{\"1\":{\"408\":1}}],[\"常用语法\",{\"0\":{\"328\":1}}],[\"常用\",{\"0\":{\"1485\":1},\"1\":{\"264\":1,\"564\":1,\"760\":1,\"842\":1,\"1121\":1,\"1368\":1,\"1369\":6,\"1486\":1,\"1675\":1}}],[\"常用基本插件\",{\"0\":{\"127\":1}}],[\"常用命令\",{\"0\":{\"87\":1}}],[\"常用的方法包括\",{\"1\":{\"1737\":1}}],[\"常用的方式\",{\"1\":{\"564\":1}}],[\"常用的小数拆分如下\",{\"1\":{\"1718\":1}}],[\"常用的生命周期钩子\",{\"0\":{\"1410\":1}}],[\"常用的\",{\"1\":{\"1154\":1,\"1737\":1}}],[\"常用的嵌入元素有两种\",{\"1\":{\"671\":1}}],[\"常用的一些语义化标签\",{\"1\":{\"662\":1}}],[\"常用的包管理工具\",{\"0\":{\"60\":1}}],[\"常用的命令\",{\"0\":{\"8\":1}}],[\"六\",{\"0\":{\"17\":1,\"94\":1,\"318\":1,\"370\":1,\"402\":1,\"512\":1,\"579\":1,\"686\":1,\"709\":1,\"826\":1,\"997\":1,\"1032\":1,\"1095\":1,\"1131\":1,\"1159\":1,\"1182\":1,\"1206\":1,\"1283\":1,\"1333\":1,\"1517\":1,\"1675\":1,\"1744\":1,\"1823\":1,\"1851\":1,\"1915\":1,\"2062\":1}}],[\"则拒绝请求\",{\"1\":{\"2088\":2}}],[\"则什么都不做\",{\"1\":{\"1978\":3}}],[\"则递归地调用\",{\"1\":{\"1976\":1}}],[\"则卸载多余的节点\",{\"1\":{\"1969\":1}}],[\"则这些遗留的节点应该被\",{\"1\":{\"1968\":1}}],[\"则这些遗留的节点应该作为新增节点被\",{\"1\":{\"1968\":1}}],[\"则这个值的引用次数减\",{\"1\":{\"1030\":1}}],[\"则这个值的引用次数就是\",{\"1\":{\"1030\":1}}],[\"则记录该节点的位置索引\",{\"1\":{\"1962\":1}}],[\"则尝试从props\",{\"1\":{\"1956\":1}}],[\"则更新当前路由\",{\"1\":{\"2029\":1}}],[\"则更新\",{\"1\":{\"1962\":1}}],[\"则更新子组件的\",{\"1\":{\"1955\":1}}],[\"则更新其对应的值\",{\"1\":{\"1436\":1}}],[\"则作为数据状态赋值给\",{\"1\":{\"1954\":1}}],[\"则刷新之\",{\"1\":{\"1954\":1}}],[\"则遍历它并逐个调用事件处理函数\",{\"1\":{\"1949\":1}}],[\"则遍历每一个子节点\",{\"1\":{\"1948\":1}}],[\"则设置其对应的\",{\"1\":{\"1938\":1}}],[\"则要返回使用\",{\"1\":{\"1929\":1}}],[\"则视作\",{\"1\":{\"1917\":1,\"1993\":1}}],[\"则检测被设置的索引值是否小于数组长度\",{\"1\":{\"1917\":1,\"1993\":1}}],[\"则打印警告信息并返回\",{\"1\":{\"1914\":2}}],[\"则说明有新的节点遗留\",{\"1\":{\"1966\":1}}],[\"则说明有变化\",{\"1\":{\"1955\":2}}],[\"则说明该节点已经被处理过了\",{\"1\":{\"1966\":1}}],[\"则说明该节点对应的真实\",{\"1\":{\"1962\":1}}],[\"则说明需要删除该节点\",{\"1\":{\"1962\":1}}],[\"则说明当前\",{\"1\":{\"1962\":1}}],[\"则说明新旧子节点都是一组子节点\",{\"1\":{\"1951\":1}}],[\"则说明是\",{\"1\":{\"1929\":1}}],[\"则说明是在添加新的属性\",{\"1\":{\"1917\":1}}],[\"则说明是在添加新属性\",{\"1\":{\"1906\":1}}],[\"则说明没有办法再访问这个值了\",{\"1\":{\"1030\":1}}],[\"则意味着\",{\"1\":{\"1896\":1}}],[\"则curly减1\",{\"1\":{\"1794\":3}}],[\"则curly加1\",{\"1\":{\"1794\":3}}],[\"则从原本的html字符串中把条件注释截掉\",{\"1\":{\"1792\":1}}],[\"则继续查找是否存在\",{\"1\":{\"1792\":2}}],[\"则继承父元素的值\",{\"1\":{\"531\":1}}],[\"则有以下五种可能\",{\"1\":{\"1792\":2}}],[\"则有所不同\",{\"1\":{\"1219\":1}}],[\"则移动节点\",{\"1\":{\"1789\":1}}],[\"则用vnode的text替换真实dom的文本\",{\"1\":{\"1789\":1}}],[\"则用数组长度加上该数来确定相应的位置\",{\"1\":{\"854\":1}}],[\"则清空dom中的文本\",{\"1\":{\"1789\":1}}],[\"则清空所有种类的数据\",{\"1\":{\"765\":1}}],[\"则把里面的state存到全局state中去\",{\"1\":{\"2020\":1}}],[\"则把注释截取出来传给options\",{\"1\":{\"1792\":1}}],[\"则把vnode的子节点添加到真实dom中\",{\"1\":{\"1789\":1}}],[\"则把路由收到的所有params参数通过props传给detail组件\",{\"1\":{\"1462\":1}}],[\"则此函数会依次获取this\",{\"1\":{\"1854\":1}}],[\"则此节点为新增节点\",{\"1\":{\"1789\":1}}],[\"则此时该样式会获取到最高的优先级\",{\"1\":{\"524\":1}}],[\"则它的状态和原始promise相同\",{\"1\":{\"1777\":1}}],[\"则resolve\",{\"1\":{\"1777\":1}}],[\"则一定有交集\",{\"1\":{\"1751\":1}}],[\"则一直反复运行代码块\",{\"1\":{\"1286\":1}}],[\"则分数变小\",{\"1\":{\"1734\":1}}],[\"则分数变大\",{\"1\":{\"1734\":1}}],[\"则今年较前年增长\",{\"1\":{\"1728\":1}}],[\"则求出的一份量比实际量要小\",{\"1\":{\"1722\":1}}],[\"则求出的一份量比实际量要大\",{\"1\":{\"1722\":1}}],[\"则基期\",{\"1\":{\"1722\":1}}],[\"则响应\",{\"1\":{\"1646\":1}}],[\"则校验不通过\",{\"1\":{\"1605\":1}}],[\"则校验通过\",{\"1\":{\"1605\":1}}],[\"则为同源请求\",{\"1\":{\"1602\":1}}],[\"则称之为同源\",{\"1\":{\"1600\":1}}],[\"则称为过度约束\",{\"1\":{\"553\":1}}],[\"则取出那些与\",{\"1\":{\"1932\":1}}],[\"则取消该请求\",{\"1\":{\"1582\":1}}],[\"则取两者中绝对值较大的\",{\"1\":{\"558\":1}}],[\"则取两者的和\",{\"1\":{\"558\":1}}],[\"则浏览器将这样的请求视为不同的请求而不会读入缓存\",{\"1\":{\"1579\":1}}],[\"则浏览器会提示用户是否重新提交\",{\"1\":{\"1569\":1}}],[\"则浏览器会自动调整margin\",{\"1\":{\"554\":1}}],[\"则发送的请求中会附带该信息\",{\"1\":{\"1542\":1}}],[\"则表示需要新建\",{\"1\":{\"2019\":1}}],[\"则表示缓存失效\",{\"1\":{\"1535\":1}}],[\"则表示缓存还没有过期\",{\"1\":{\"1535\":1}}],[\"则表明服务\",{\"1\":{\"177\":1}}],[\"则表明成功\",{\"1\":{\"69\":1}}],[\"则进一步请求资源\",{\"1\":{\"1530\":1}}],[\"则进入休眠状态\",{\"1\":{\"1180\":1,\"1556\":1}}],[\"则对其进行包裹\",{\"1\":{\"1931\":1}}],[\"则对响应体的内容进行\",{\"1\":{\"1530\":1}}],[\"则对象中的属性\",{\"1\":{\"1486\":1}}],[\"则还会进行\",{\"1\":{\"1530\":1}}],[\"则直接将旧\",{\"1\":{\"1951\":1}}],[\"则直接将该\",{\"1\":{\"1938\":1}}],[\"则直接使用子节点的\",{\"1\":{\"1978\":1}}],[\"则直接使用\",{\"1\":{\"1929\":1}}],[\"则直接返回该索引位置\",{\"1\":{\"2065\":1}}],[\"则直接返回原始值\",{\"1\":{\"1913\":1,\"1991\":1}}],[\"则直接返回undefined即可\",{\"1\":{\"1769\":1}}],[\"则直接跳过\",{\"1\":{\"1789\":2}}],[\"则直接重新执行回调\",{\"1\":{\"1498\":1}}],[\"则直接合并到结果中\",{\"1\":{\"418\":1}}],[\"则强制开启了深度监视\",{\"1\":{\"1497\":1}}],[\"则地址会被标记为不合法\",{\"1\":{\"1468\":1}}],[\"则靠后的是父组件的样式\",{\"1\":{\"1433\":1}}],[\"则哪个样式生效由\",{\"1\":{\"1433\":1}}],[\"则创建一个\",{\"1\":{\"1978\":1}}],[\"则创建纯静态文本类型的ast节点\",{\"1\":{\"1791\":1}}],[\"则创建动态文本类型的ast节点\",{\"1\":{\"1791\":1}}],[\"则创建\",{\"1\":{\"1394\":1,\"1974\":2}}],[\"则创建文件\",{\"1\":{\"245\":1}}],[\"则v\",{\"1\":{\"1357\":2}}],[\"则完全省略该属性\",{\"1\":{\"1275\":1}}],[\"则完全没有采用这种模型\",{\"1\":{\"224\":1}}],[\"则相反\",{\"1\":{\"1210\":1,\"1640\":1}}],[\"则相当于是重新赋值\",{\"1\":{\"782\":1}}],[\"则和传入基本数据类型的更新流程一致\",{\"1\":{\"1842\":1}}],[\"则和\",{\"1\":{\"1145\":1}}],[\"则获取它的默认值\",{\"1\":{\"1128\":1}}],[\"则只需要更新\",{\"1\":{\"1951\":1}}],[\"则只需要将\",{\"1\":{\"1951\":1}}],[\"则只需要观察一位\",{\"1\":{\"1711\":1}}],[\"则只执行最后一次\",{\"1\":{\"1035\":1}}],[\"则只有\",{\"1\":{\"345\":1}}],[\"则转换后的\",{\"1\":{\"1975\":1}}],[\"则转换为\",{\"1\":{\"812\":1}}],[\"则转化成对应的包装对象\",{\"1\":{\"995\":1}}],[\"则等同于指定全局对象\",{\"1\":{\"995\":1}}],[\"则等同于指向全局对象\",{\"1\":{\"995\":1}}],[\"则等式不满足时\",{\"1\":{\"574\":1}}],[\"则等式会调整其值来使等式成立\",{\"1\":{\"554\":1}}],[\"则无法正确获得oldvalue\",{\"1\":{\"1497\":1}}],[\"则无法通过\",{\"1\":{\"345\":1}}],[\"则无效\",{\"1\":{\"957\":1}}],[\"则整个函数以\",{\"1\":{\"957\":1}}],[\"则整个脚本都将以\",{\"1\":{\"957\":1}}],[\"则整个选择结构匹配失败\",{\"1\":{\"914\":1}}],[\"则不需要更新\",{\"1\":{\"1955\":1}}],[\"则不需要触发响应\",{\"1\":{\"1909\":1}}],[\"则不执行事件处理函数\",{\"1\":{\"1949\":1}}],[\"则不进行追踪\",{\"1\":{\"1921\":1}}],[\"则不触发执行\",{\"1\":{\"1892\":2}}],[\"则不能使用path配置项\",{\"1\":{\"1461\":1}}],[\"则不存在有函数提升的情况\",{\"1\":{\"940\":1}}],[\"则不会发送\",{\"1\":{\"2088\":1}}],[\"则不会有以上的问题\",{\"1\":{\"1313\":1}}],[\"则不会有任何样式生效\",{\"1\":{\"520\":1}}],[\"则不会\",{\"1\":{\"1255\":1,\"1399\":1,\"1400\":1}}],[\"则不会进入第二个数的判断\",{\"1\":{\"809\":1}}],[\"则也会返回\",{\"1\":{\"935\":1}}],[\"则没有对应实参的形参将是\",{\"1\":{\"931\":1}}],[\"则显得有点不太方便\",{\"1\":{\"906\":1}}],[\"则显示正常\",{\"1\":{\"616\":1}}],[\"则自动交换\",{\"1\":{\"891\":1}}],[\"则自动调整\",{\"1\":{\"574\":1}}],[\"则自动调整right值以使等式满足\",{\"1\":{\"574\":1}}],[\"则自动调整宽度\",{\"1\":{\"556\":1}}],[\"则自动调整auto\",{\"1\":{\"555\":2}}],[\"则生成的\",{\"1\":{\"1275\":1}}],[\"则生成这\",{\"1\":{\"883\":2}}],[\"则生成\",{\"1\":{\"883\":1,\"1394\":1}}],[\"则生成一个复数\",{\"1\":{\"395\":1}}],[\"则在\",{\"1\":{\"1438\":1,\"1439\":1}}],[\"则在冒泡阶段处理事件\",{\"1\":{\"1145\":1}}],[\"则在捕获阶段处理事件\",{\"1\":{\"1145\":1}}],[\"则在全局表里面创建一个新的\",{\"1\":{\"828\":1}}],[\"则在主内容区中设置overflow\",{\"1\":{\"580\":1}}],[\"则返回对应的值\",{\"1\":{\"2047\":1}}],[\"则返回它的\",{\"1\":{\"1938\":1}}],[\"则返回结果\",{\"1\":{\"1929\":1}}],[\"则返回如下\",{\"1\":{\"1368\":1}}],[\"则返回该日期对象\",{\"1\":{\"876\":1}}],[\"则返回\",{\"1\":{\"813\":1,\"857\":1,\"876\":1,\"890\":1,\"945\":2,\"1067\":2,\"1677\":1,\"2065\":2}}],[\"则先将其转换为数值\",{\"1\":{\"812\":1}}],[\"则调用\",{\"1\":{\"1914\":1}}],[\"则调用该调度器\",{\"1\":{\"1893\":1,\"1985\":1}}],[\"则调用tostring\",{\"1\":{\"812\":1}}],[\"则调用这个对象的valueof\",{\"1\":{\"812\":1}}],[\"则比较两个字符串对应的字符编码\",{\"1\":{\"812\":1}}],[\"则执行成功回调更新当前路由进行跳转\",{\"1\":{\"2029\":1}}],[\"则执行更新\",{\"1\":{\"1969\":1}}],[\"则执行原本的函数\",{\"1\":{\"1039\":1}}],[\"则执行数值比较\",{\"1\":{\"812\":1}}],[\"则执行语句\",{\"1\":{\"815\":2}}],[\"则执行语句2\",{\"1\":{\"400\":1}}],[\"则执行语句1\",{\"1\":{\"400\":1}}],[\"则是需要程序员手动的管理内存\",{\"1\":{\"865\":1}}],[\"则是先参与运算\",{\"1\":{\"806\":1}}],[\"则是\",{\"1\":{\"681\":1,\"1929\":1}}],[\"则音乐在打开页面时会自动播放\",{\"1\":{\"668\":1}}],[\"则两个时间中第一个是持续时间\",{\"1\":{\"641\":1}}],[\"则使用它的下一个兄弟节点作为锚点元素\",{\"1\":{\"1962\":1}}],[\"则使用传过去的参数\",{\"1\":{\"934\":1}}],[\"则使用\",{\"1\":{\"641\":1,\"1920\":1,\"1993\":1}}],[\"则第二个值默认是\",{\"1\":{\"633\":1}}],[\"则背景图片会自动在元素中\",{\"1\":{\"628\":1}}],[\"则网页的字体一开始不会正确显示\",{\"1\":{\"621\":1}}],[\"则必须要设置网页的视距\",{\"1\":{\"616\":1}}],[\"则必须放在所有捕获异常的语句之后\",{\"1\":{\"403\":1}}],[\"则以该值为准\",{\"1\":{\"591\":1}}],[\"则将变量\",{\"1\":{\"1962\":1}}],[\"则将pos置为0\",{\"1\":{\"1792\":1}}],[\"则将标签推入栈中\",{\"1\":{\"1792\":1}}],[\"则将游标移动到\",{\"1\":{\"1792\":1}}],[\"则将其作为渲染函数\",{\"1\":{\"1954\":1}}],[\"则将其视为合法的\",{\"1\":{\"1954\":1}}],[\"则将其拆成两部分相乘\",{\"1\":{\"1718\":1}}],[\"则将其转为两个整数的\",{\"1\":{\"1717\":1}}],[\"则将其标记为\",{\"1\":{\"1029\":1,\"1031\":1}}],[\"则将多余的数据删除\",{\"1\":{\"1655\":1}}],[\"则将整个表达式视为一个选择结构\",{\"1\":{\"914\":1}}],[\"则将另一个操作数转换为一个数值\",{\"1\":{\"812\":1}}],[\"则将主内容区也开启浮动并设置宽度\",{\"1\":{\"580\":1}}],[\"则将在\",{\"1\":{\"379\":1}}],[\"则优先显示靠下的元素\",{\"1\":{\"575\":1}}],[\"则根元素\",{\"1\":{\"570\":1}}],[\"则开启了元素的绝对定位\",{\"1\":{\"570\":1}}],[\"则新建块元素会存在于其下面\",{\"1\":{\"566\":1}}],[\"则浮动元素无法上移\",{\"1\":{\"561\":1}}],[\"则子元素会从父元素中溢出\",{\"1\":{\"557\":1}}],[\"则百分比设置相对于包含块的高度进行设置\",{\"1\":{\"543\":1}}],[\"则元素会换到第二行继续自左向右排列\",{\"1\":{\"540\":1}}],[\"则越优先显示\",{\"1\":{\"524\":1}}],[\"则上一个下标的内容一样\",{\"1\":{\"458\":1}}],[\"则存入result\",{\"1\":{\"452\":1}}],[\"则实例化该类时就必须输\",{\"1\":{\"405\":1}}],[\"则令\",{\"1\":{\"386\":1}}],[\"则默认传参全局对象\",{\"1\":{\"995\":1}}],[\"则默认使用\",{\"1\":{\"891\":1}}],[\"则默认在左边填充空格\",{\"1\":{\"386\":1}}],[\"则默认加载第三方包中的index\",{\"1\":{\"59\":1}}],[\"则该值的引用次数加\",{\"1\":{\"1030\":1}}],[\"则该数组只包含一项\",{\"1\":{\"925\":1}}],[\"则该参数表示与\",{\"1\":{\"876\":1}}],[\"则该进度条的进度为\",{\"1\":{\"696\":1}}],[\"则该\",{\"1\":{\"345\":1}}],[\"则需要服务器设置本响应头\",{\"1\":{\"1613\":1}}],[\"则需要引入反向引用\",{\"1\":{\"912\":1}}],[\"则需要使用两个张量来描述数据集\",{\"1\":{\"1655\":1}}],[\"则需要使用\",{\"1\":{\"345\":1,\"658\":1,\"1441\":1}}],[\"则需要将库的名字配置为\",{\"1\":{\"16\":1}}],[\"则谁书写在前\",{\"1\":{\"316\":1}}],[\"则就需要路由中间件\",{\"1\":{\"315\":1}}],[\"则其善者而从之\",{\"1\":{\"246\":1}}],[\"则覆盖文件内容\",{\"1\":{\"245\":1}}],[\"则会执行\",{\"1\":{\"2061\":1}}],[\"则会包含相应的路由记录\",{\"1\":{\"2028\":1}}],[\"则会直接读取本地数据\",{\"1\":{\"1656\":1}}],[\"则会直接正常显示\",{\"1\":{\"628\":1}}],[\"则会带有\",{\"1\":{\"1560\":1}}],[\"则会自动调用$mount\",{\"1\":{\"1360\":1}}],[\"则会自动调整\",{\"1\":{\"555\":2}}],[\"则会加载\",{\"1\":{\"1319\":2}}],[\"则会获取到真实的值\",{\"1\":{\"1129\":1}}],[\"则会忽略该变量\",{\"1\":{\"1015\":1}}],[\"则会影响分组\",{\"1\":{\"918\":1}}],[\"则会返回第一次出现的索引\",{\"1\":{\"894\":1}}],[\"则会返回其第一次出现的索引\",{\"1\":{\"890\":1}}],[\"则会将其唤醒以继续循环拿取任务\",{\"1\":{\"1180\":1,\"1556\":1}}],[\"则会将每个字符都拆分为数组中的一个元素\",{\"1\":{\"894\":1}}],[\"则会将两外边距设置为相同值\",{\"1\":{\"556\":1}}],[\"则会截去超出位数的补全字符串\",{\"1\":{\"893\":1}}],[\"则会根据当前的日期时间来创建一个date对象\",{\"1\":{\"876\":1}}],[\"则会解析为本地时间\",{\"1\":{\"875\":1}}],[\"则会解析为\",{\"1\":{\"875\":1}}],[\"则会进入第二个数的判断\",{\"1\":{\"809\":1}}],[\"则会失效\",{\"1\":{\"767\":1}}],[\"则会等分剩余空间\",{\"1\":{\"591\":1}}],[\"则会尝试导入文件夹下的\",{\"1\":{\"238\":1}}],[\"则会\",{\"1\":{\"238\":1,\"1035\":1}}],[\"则会报错\",{\"1\":{\"59\":1,\"933\":1,\"938\":1}}],[\"则输出插入后的文档对象\",{\"1\":{\"191\":1,\"212\":1}}],[\"则可以选择省略\",{\"1\":{\"1655\":1}}],[\"则可以选择创建分支后再操作\",{\"1\":{\"14\":1}}],[\"则可以自定义渲染内容\",{\"1\":{\"1486\":1}}],[\"则可以使用标志\",{\"1\":{\"1261\":1}}],[\"则可以使用target=\",{\"1\":{\"664\":1}}],[\"则可以省略不写\",{\"1\":{\"191\":1}}],[\"则跳到第\",{\"1\":{\"59\":1}}],[\"则\",{\"1\":{\"59\":1,\"159\":1,\"395\":1,\"910\":1,\"1655\":1,\"1777\":1}}],[\"则本地的版本低于远程库\",{\"1\":{\"17\":1}}],[\"访问或设置length的长度\",{\"1\":{\"1993\":1}}],[\"访问它们\",{\"1\":{\"1956\":1}}],[\"访问data和props\",{\"1\":{\"1953\":1}}],[\"访问属性通过前面说的\",{\"1\":{\"1905\":1}}],[\"访问属性obj\",{\"1\":{\"1904\":1}}],[\"访问计算属性\",{\"1\":{\"1825\":1}}],[\"访问this\",{\"1\":{\"1804\":1}}],[\"访问数组的长度\",{\"1\":{\"1915\":1}}],[\"访问数组元素\",{\"0\":{\"844\":1},\"1\":{\"1923\":1}}],[\"访问数据时\",{\"1\":{\"1804\":2}}],[\"访问父组件传递的插槽\",{\"1\":{\"1446\":1,\"1494\":1}}],[\"访问组件中接受的所有props\",{\"1\":{\"1430\":1}}],[\"访问到这里的\",{\"1\":{\"2069\":1}}],[\"访问到\",{\"1\":{\"1309\":1}}],[\"访问某个元素\",{\"0\":{\"1268\":1}}],[\"访问和设置\",{\"1\":{\"1205\":1}}],[\"访问和设置特殊属性的\",{\"1\":{\"1205\":1}}],[\"访问次数\",{\"1\":{\"1158\":1}}],[\"访问一个对象的属性时\",{\"1\":{\"1009\":1}}],[\"访问方式\",{\"0\":{\"982\":1}}],[\"访问特定字符\",{\"0\":{\"888\":1}}],[\"访问法来进行对象方法的调用\",{\"1\":{\"828\":1}}],[\"访问法\",{\"1\":{\"828\":2}}],[\"访问对象的属性的方法有\",{\"1\":{\"828\":1}}],[\"访问对象属性的时候使用点访问法的情况要多一些\",{\"1\":{\"828\":1}}],[\"访问对象属性\",{\"0\":{\"828\":1}}],[\"访问派生类属性时的搜索规则采用基类顺序深度优先\",{\"1\":{\"405\":1}}],[\"访问资源接口\",{\"1\":{\"362\":1}}],[\"访问相册\",{\"1\":{\"343\":1}}],[\"访问网站就是\",{\"1\":{\"296\":1}}],[\"访问\",{\"0\":{\"1277\":1},\"1\":{\"16\":1,\"289\":1,\"295\":1,\"1571\":1,\"1902\":2,\"1929\":1}}],[\"要劫持\",{\"1\":{\"2091\":1}}],[\"要推入的状态对象\",{\"1\":{\"2050\":1}}],[\"要做到视图的变化\",{\"1\":{\"2048\":1}}],[\"要做的事情主要如下\",{\"1\":{\"1015\":2}}],[\"要做的事情就是将数据存储到\",{\"1\":{\"765\":1}}],[\"要处理的参数\",{\"1\":{\"2045\":1}}],[\"要处理这么多的任务\",{\"1\":{\"1556\":1}}],[\"要手动将值矫正为\",{\"1\":{\"1949\":2}}],[\"要挂载元素的属性\",{\"1\":{\"1949\":1}}],[\"要挂载元素的子节点\",{\"1\":{\"1948\":1}}],[\"要对a标签的\",{\"1\":{\"1792\":1}}],[\"要对属性值中的换行符或制表符做兼容处理\",{\"1\":{\"1792\":1}}],[\"要对当前元素生效的关键帧的名字\",{\"1\":{\"644\":1}}],[\"要完成的任务包括\",{\"1\":{\"1791\":1}}],[\"要完成这件事\",{\"1\":{\"1621\":1}}],[\"要\",{\"1\":{\"1718\":1}}],[\"要挑选与之对应的选项\",{\"1\":{\"1702\":1}}],[\"要看具体的服务要求\",{\"1\":{\"1629\":1}}],[\"要验证是否有匹配的缓存非常简单\",{\"1\":{\"1535\":1}}],[\"要回答这些问题\",{\"1\":{\"1533\":1}}],[\"要将响应式对象中的某个属性单独提供给外部使用时\",{\"1\":{\"1502\":1}}],[\"要用ref函数\",{\"1\":{\"1488\":1}}],[\"要基于更新后的新\",{\"1\":{\"1440\":1}}],[\"要绑定多个样式\",{\"1\":{\"1385\":2}}],[\"要动态获取\",{\"1\":{\"1385\":1}}],[\"要通过已有属性计算得来\",{\"1\":{\"1372\":1}}],[\"要使用\",{\"1\":{\"1408\":1}}],[\"要使用的属性不存在\",{\"1\":{\"1372\":1}}],[\"要使用弹性盒\",{\"1\":{\"585\":1}}],[\"要写完整路径\",{\"1\":{\"1458\":1}}],[\"要写\",{\"1\":{\"1350\":1}}],[\"要实现和网页的互动\",{\"1\":{\"1135\":1}}],[\"要实现对源对象的拖动\",{\"1\":{\"764\":1}}],[\"要解决的问题\",{\"1\":{\"1104\":1}}],[\"要加载的\",{\"1\":{\"1088\":3}}],[\"要加载文件\",{\"1\":{\"772\":1}}],[\"要连接的函数数组\",{\"1\":{\"1040\":2}}],[\"要固定的参数\",{\"1\":{\"1039\":1}}],[\"要简单理解栈的存取方式\",{\"1\":{\"980\":1}}],[\"要为这个数组设置默认值的话\",{\"1\":{\"934\":1}}],[\"要显式地将\",{\"1\":{\"923\":1}}],[\"要出现\",{\"1\":{\"913\":2}}],[\"要匹配abcabc这个字符\",{\"1\":{\"913\":1}}],[\"要匹配诸如\",{\"1\":{\"911\":1}}],[\"要返回的字符个数\",{\"1\":{\"891\":2}}],[\"要创建一个集合\",{\"1\":{\"860\":1}}],[\"要创建一个对象\",{\"1\":{\"827\":1}}],[\"要查找的项目和查找的起点位置索引\",{\"1\":{\"856\":1}}],[\"要插入的项目\",{\"1\":{\"854\":1}}],[\"要删除的项目\",{\"1\":{\"854\":1}}],[\"要参数的第一项位置和要删除的项数\",{\"1\":{\"854\":1}}],[\"要么表明作者的某个观点或者主张\",{\"1\":{\"1685\":1}}],[\"要么用箭头函数\",{\"1\":{\"1437\":1}}],[\"要么配置在\",{\"1\":{\"1437\":1}}],[\"要么都不在\",{\"1\":{\"764\":1}}],[\"要么不存在\",{\"1\":{\"1951\":1}}],[\"要么不相邻\",{\"1\":{\"558\":1,\"566\":1}}],[\"要么不用外边距\",{\"1\":{\"558\":1,\"566\":1}}],[\"要嵌到页面的视频的\",{\"1\":{\"748\":1}}],[\"要注意比重和比值考察问法的区别\",{\"1\":{\"1735\":1}}],[\"要注意的是对某个话题定性\",{\"1\":{\"1687\":1}}],[\"要注意受到了授权\",{\"1\":{\"621\":1}}],[\"要注意\",{\"1\":{\"580\":1}}],[\"要设置的属性存在\",{\"1\":{\"1990\":1}}],[\"要设置的属性不存在\",{\"1\":{\"1990\":1}}],[\"要设置两个表示\",{\"1\":{\"980\":1}}],[\"要设置浮动元素的margin\",{\"1\":{\"564\":1}}],[\"要设置边框\",{\"1\":{\"544\":1}}],[\"要组装成数组\",{\"1\":{\"493\":1}}],[\"要头不要尾\",{\"1\":{\"401\":1}}],[\"要想实现响应式\",{\"1\":{\"1783\":1}}],[\"要想实现这个功能\",{\"1\":{\"405\":1}}],[\"要想访问具体某一层的参数\",{\"1\":{\"1669\":1}}],[\"要想调用\",{\"1\":{\"1198\":1}}],[\"要想利用\",{\"1\":{\"1077\":1}}],[\"要想解决这个问题\",{\"1\":{\"916\":1}}],[\"要想确定一个数值是不是有穷的\",{\"1\":{\"794\":1}}],[\"要想在它上面去绘制内容\",{\"1\":{\"704\":1}}],[\"要想设置动画效果\",{\"1\":{\"642\":1}}],[\"要想定义一个空的\",{\"1\":{\"392\":1}}],[\"要想推送成功\",{\"1\":{\"13\":1}}],[\"要替换占位符的内容\",{\"1\":{\"387\":1}}],[\"要在nexttick所指定的回调函数中执行\",{\"1\":{\"1440\":1}}],[\"要在浏览器中显示音频和视频是非常困难的\",{\"1\":{\"746\":1}}],[\"要在浏览器中实现模块化\",{\"1\":{\"37\":1}}],[\"要在字符串前面加一个\",{\"1\":{\"384\":1}}],[\"要指定秘钥\",{\"1\":{\"350\":1}}],[\"要的字段\",{\"1\":{\"209\":1}}],[\"要调用\",{\"1\":{\"156\":1}}],[\"要让\",{\"1\":{\"149\":1}}],[\"要去解析转换\",{\"1\":{\"148\":1}}],[\"要不然就什么都不做\",{\"1\":{\"148\":1}}],[\"要node\",{\"1\":{\"148\":1}}],[\"要开发大型应用\",{\"1\":{\"25\":1}}],[\"要知道\",{\"1\":{\"24\":1}}],[\"要求用户在提交表单前必须输入正确的验证码\",{\"1\":{\"2088\":1}}],[\"要求父先给子一个函数\",{\"1\":{\"1429\":1}}],[\"要求线程池中的线程必须执行\",{\"1\":{\"408\":1}}],[\"要求\",{\"1\":{\"16\":1,\"64\":1,\"1576\":1,\"1577\":1}}],[\"中存在相同的路由记录\",{\"1\":{\"2073\":1}}],[\"中存储的副作用函数收集到\",{\"1\":{\"1888\":1}}],[\"中存储的数据容量有限\",{\"1\":{\"767\":1}}],[\"中维持属性的原始大小写\",{\"1\":{\"2063\":1}}],[\"中维护了一个\",{\"1\":{\"1890\":1}}],[\"中维护\",{\"1\":{\"1889\":1}}],[\"中自动全局挂载\",{\"1\":{\"2063\":1}}],[\"中自动忽略多个空格和换行\",{\"1\":{\"777\":1}}],[\"中非常常见的一种模式\",{\"1\":{\"2043\":1}}],[\"中会调用navigate函数执行路由守卫\",{\"1\":{\"2034\":1}}],[\"中会依次执行路由守卫\",{\"1\":{\"2034\":1}}],[\"中重要的\",{\"1\":{\"2029\":1}}],[\"中重新执行副作用函数\",{\"1\":{\"1897\":1}}],[\"中因为不存在\",{\"1\":{\"2016\":1}}],[\"中实现的那样\",{\"1\":{\"2016\":1}}],[\"中实现集中式状态\",{\"1\":{\"1448\":1}}],[\"中注册的回调函数\",{\"1\":{\"1977\":1}}],[\"中节点的访问\",{\"1\":{\"1976\":1}}],[\"中读取\",{\"1\":{\"1956\":1}}],[\"中读取计算属性的值时\",{\"1\":{\"1896\":1}}],[\"中寻找对应的事件处理函数\",{\"1\":{\"1954\":1}}],[\"中寻找同名的文件夹\",{\"1\":{\"59\":2}}],[\"中调用\",{\"1\":{\"1954\":1}}],[\"中调用$mount时\",{\"1\":{\"1805\":1}}],[\"中部分属性是只读的\",{\"1\":{\"1949\":1}}],[\"中待执行\",{\"1\":{\"1918\":1,\"1993\":1}}],[\"中分为\",{\"1\":{\"1903\":1}}],[\"中以便后续手动调用\",{\"1\":{\"1897\":1}}],[\"中添加\",{\"1\":{\"1894\":1}}],[\"中添加如下代码\",{\"1\":{\"133\":1}}],[\"中同样维护了\",{\"1\":{\"1890\":1}}],[\"中取得\",{\"1\":{\"1889\":2}}],[\"中支持两种方式来描述\",{\"1\":{\"1877\":1}}],[\"中支持的最小值和最大值\",{\"1\":{\"794\":1}}],[\"中传入的options格式如下所示\",{\"1\":{\"1825\":1}}],[\"中传了哪些配置就调用对应的初始化函数进行初始化\",{\"1\":{\"1804\":1}}],[\"中它必须是函数\",{\"1\":{\"1825\":1}}],[\"中不会被渲染成真实的\",{\"1\":{\"1800\":1}}],[\"中不能访问到vue2\",{\"1\":{\"1486\":1}}],[\"中应该表现为一个对象\",{\"1\":{\"1776\":1}}],[\"中较小的比重\",{\"1\":{\"1751\":1}}],[\"中集合\",{\"1\":{\"1733\":1}}],[\"中心理解\",{\"0\":{\"1695\":1},\"1\":{\"1684\":1,\"1697\":1}}],[\"中数据集默认也是以这种方式进行的存储\",{\"1\":{\"1674\":1}}],[\"中数据总数不能被\",{\"1\":{\"1655\":1}}],[\"中加载模型\",{\"1\":{\"1673\":1}}],[\"中用于定义二维卷积层的函数\",{\"1\":{\"1662\":1}}],[\"中用于数据加载的工具类\",{\"1\":{\"1655\":1}}],[\"中对这些\",{\"1\":{\"1518\":1}}],[\"中对属性的一些操作方法\",{\"1\":{\"1205\":1}}],[\"中钩子对应关系如下\",{\"1\":{\"1500\":1}}],[\"中已经取消了这个\",{\"1\":{\"1499\":1}}],[\"中已有的元素名称\",{\"1\":{\"1419\":1}}],[\"中抛出事件\",{\"1\":{\"1493\":1}}],[\"中还有一个插件库使用广泛\",{\"1\":{\"1445\":1}}],[\"中还提供了一个叫做reflect\",{\"1\":{\"830\":1}}],[\"中给\",{\"1\":{\"1437\":1}}],[\"中内容变了\",{\"1\":{\"1394\":1}}],[\"中内容没变\",{\"1\":{\"1394\":1}}],[\"中找到了与新虚拟\",{\"1\":{\"1394\":1}}],[\"中动态配置mood的值\",{\"1\":{\"1385\":1}}],[\"中没有的节点\",{\"1\":{\"1962\":1}}],[\"中没有被转发的成员\",{\"1\":{\"1318\":1}}],[\"中没有真正意义上的函数重载\",{\"1\":{\"485\":1}}],[\"中导入\",{\"0\":{\"1315\":1},\"1\":{\"1315\":1}}],[\"中编写您的样式\",{\"1\":{\"1314\":1}}],[\"中编写事件处理的方法有\",{\"1\":{\"1214\":1}}],[\"中能够访问到\",{\"1\":{\"1313\":1}}],[\"中能够表示的最小数值在绝大多数浏览器中为5e\",{\"1\":{\"794\":1}}],[\"中必须每个文件写一个\",{\"1\":{\"1313\":1}}],[\"中允许写一个\",{\"1\":{\"1313\":1}}],[\"中一个新的配置项\",{\"1\":{\"1486\":1}}],[\"中一样\",{\"1\":{\"1313\":1}}],[\"中一共有\",{\"1\":{\"936\":1}}],[\"中只能导入一个本地存在的\",{\"1\":{\"1313\":1}}],[\"中本身就有\",{\"1\":{\"1313\":1}}],[\"中本来就有的模块\",{\"1\":{\"377\":1}}],[\"中引用的变量也是配置后的变量\",{\"1\":{\"1309\":1}}],[\"中引入这个对象\",{\"1\":{\"2041\":1}}],[\"中引入了新的基本类型symbol和bigint\",{\"1\":{\"965\":1}}],[\"中引入的一种数据结构\",{\"1\":{\"858\":1}}],[\"中引入字体\",{\"1\":{\"143\":1}}],[\"中定义的变量\",{\"1\":{\"1309\":1}}],[\"中定义了一个变量\",{\"1\":{\"1309\":1}}],[\"中定义了一个不带任何数值的参数\",{\"1\":{\"1294\":1}}],[\"中无法访问\",{\"1\":{\"1309\":1}}],[\"中都将产生基类对应的样式代码\",{\"1\":{\"1299\":1}}],[\"中都是真值\",{\"1\":{\"1284\":1}}],[\"中产生任何代码\",{\"1\":{\"1299\":1}}],[\"中除了false和null之外\",{\"1\":{\"1284\":1}}],[\"中将属性转换为小写\",{\"1\":{\"2063\":1}}],[\"中将这两个\",{\"1\":{\"1446\":1,\"1494\":1}}],[\"中将template编译为render函数并挂载到组件实例的$options中\",{\"1\":{\"1354\":1,\"1835\":1}}],[\"中将省略这个空值\",{\"1\":{\"1275\":1}}],[\"中将其取出来\",{\"1\":{\"769\":1}}],[\"中显示\",{\"1\":{\"1255\":1}}],[\"中执行的\",{\"1\":{\"1891\":1}}],[\"中执行\",{\"1\":{\"1240\":1}}],[\"中执行环境\",{\"1\":{\"1013\":1}}],[\"中很多方法都会返回当前\",{\"1\":{\"1232\":1}}],[\"中我们还可以这样写\",{\"1\":{\"1232\":1}}],[\"中操作数据\",{\"1\":{\"1487\":1}}],[\"中操作\",{\"0\":{\"1206\":1},\"1\":{\"1193\":1}}],[\"中操作属性的方法\",{\"0\":{\"1205\":1},\"1\":{\"1193\":1}}],[\"中处理事件监听器或者需要清晰资源的时候\",{\"1\":{\"2043\":1}}],[\"中处理\",{\"1\":{\"1187\":1,\"1802\":1}}],[\"中优先级\",{\"1\":{\"1181\":1}}],[\"中最标准的取消浏览器默认行为的方式\",{\"1\":{\"1156\":1}}],[\"中最常用的垃圾回收方式就是标记清除\",{\"1\":{\"1029\":1}}],[\"中监视scrollleft和scrolltop二值变化情况\",{\"1\":{\"1153\":1}}],[\"中事件的类型是有多种的\",{\"1\":{\"1147\":1}}],[\"中绑定事件的几种形式\",{\"1\":{\"1147\":1}}],[\"中采用相同的处理\",{\"1\":{\"1891\":1}}],[\"中采用一个叫做事件监听器的东西来监听事件是否发生\",{\"1\":{\"1137\":1}}],[\"中采用的是动态内存管理技术\",{\"1\":{\"865\":1}}],[\"中出现的\",{\"1\":{\"1135\":1}}],[\"中声明的请求端口\",{\"1\":{\"1093\":1,\"2051\":1}}],[\"中声明变量的方式有\",{\"1\":{\"779\":1,\"781\":1}}],[\"中主机名之后的部分\",{\"1\":{\"1093\":1,\"2051\":1}}],[\"中包含着它的子节点\",{\"1\":{\"1866\":1}}],[\"中包含了一些常用的数据集\",{\"1\":{\"1656\":1}}],[\"中包含\",{\"1\":{\"1428\":1}}],[\"中包含有\",{\"1\":{\"1093\":1,\"2051\":1}}],[\"中包含一个指向对象\",{\"1\":{\"1030\":1}}],[\"中这个坐标包括了工具栏+菜单栏+地址栏的高度\",{\"1\":{\"1087\":1}}],[\"中这通常是\",{\"1\":{\"520\":1}}],[\"中大致存在如下几个对象\",{\"1\":{\"1083\":1}}],[\"中也包含一个指向对象\",{\"1\":{\"1030\":1}}],[\"中也是一种对象\",{\"1\":{\"922\":1}}],[\"中二进制前三位都为\",{\"1\":{\"980\":1}}],[\"中可用的编译宏命令\",{\"1\":{\"1493\":1}}],[\"中可用的选择器可以参看\",{\"1\":{\"1203\":1}}],[\"中可用的数据或信息的最底层形式或最简单形式\",{\"1\":{\"980\":1}}],[\"中可以继续使用\",{\"1\":{\"1500\":1}}],[\"中可以访问到setup\",{\"1\":{\"1486\":1}}],[\"中可以访问\",{\"1\":{\"1318\":1}}],[\"中可以看到对它的描述\",{\"1\":{\"1232\":1}}],[\"中可以很轻松的查看到本地存储了哪些信息\",{\"1\":{\"769\":1}}],[\"中可以直接使用颜色名来设置各种颜色\",{\"1\":{\"535\":1}}],[\"中可以使用如下的事件\",{\"1\":{\"1105\":1}}],[\"中可以使用\",{\"1\":{\"349\":1,\"355\":1}}],[\"中任意一个字母\",{\"1\":{\"918\":1}}],[\"中所注入的\",{\"1\":{\"2068\":1}}],[\"中所有层次的数据\",{\"1\":{\"1396\":1}}],[\"中所有类型的值都可以转换为布尔类型\",{\"1\":{\"796\":1}}],[\"中所获取到的时间戳的精度要更高一些\",{\"1\":{\"874\":1}}],[\"中新协议\",{\"1\":{\"1647\":1}}],[\"中新加的find和findindex\",{\"1\":{\"856\":1}}],[\"中新增了模板字面量\",{\"1\":{\"790\":1}}],[\"中括号访问法以及\",{\"1\":{\"828\":1}}],[\"中括号访问法\",{\"1\":{\"828\":2,\"831\":1}}],[\"中为我们提供了三种逻辑运算符\",{\"1\":{\"807\":1}}],[\"中每一条语句以\",{\"1\":{\"777\":1}}],[\"中严格区分大小写\",{\"1\":{\"777\":1}}],[\"中在客户端存储简单用户信息的一种方式\",{\"1\":{\"767\":1}}],[\"中在资源的请求头中添加了\",{\"1\":{\"693\":1}}],[\"中提供了大量的方法来简化节点的操作\",{\"1\":{\"1208\":1}}],[\"中提供了八进制数值新的写法\",{\"1\":{\"792\":1}}],[\"中提供了专门用于拖放的\",{\"1\":{\"762\":1}}],[\"中提供了一系列方法\",{\"1\":{\"304\":1}}],[\"中绘制文本\",{\"0\":{\"729\":1}}],[\"中是否存在指定\",{\"1\":{\"1926\":1}}],[\"中是否可用\",{\"1\":{\"1572\":1}}],[\"中是否包含检测点\",{\"1\":{\"745\":1}}],[\"中是不合法的比如background\",{\"1\":{\"1127\":1}}],[\"中是一等公民\",{\"1\":{\"926\":1,\"943\":1}}],[\"中是垂直居中的\",{\"1\":{\"669\":1}}],[\"中是无效\",{\"1\":{\"345\":1}}],[\"中型屏幕\",{\"1\":{\"651\":1}}],[\"中单关键字的预组合的语法\",{\"1\":{\"548\":1}}],[\"中单独配置\",{\"1\":{\"156\":1}}],[\"中那个不需要转义的反斜杠\",{\"1\":{\"384\":1}}],[\"中查找反斜杠\",{\"1\":{\"384\":1}}],[\"中有很多的指令\",{\"1\":{\"1353\":1}}],[\"中有个\",{\"1\":{\"1240\":1}}],[\"中有好几种不同的数据类型\",{\"1\":{\"801\":1}}],[\"中有些时候\",{\"1\":{\"658\":1}}],[\"中有关线程开发的部分\",{\"1\":{\"408\":1}}],[\"中有六个标准的数据类型\",{\"1\":{\"381\":1}}],[\"中有三个重要概念需要掌握\",{\"1\":{\"176\":1}}],[\"中保存着用户信息\",{\"1\":{\"358\":1}}],[\"中手动修改\",{\"1\":{\"345\":1}}],[\"中才有效\",{\"1\":{\"345\":1}}],[\"中间人攻击\",{\"1\":{\"2091\":2}}],[\"中间代码生成\",{\"1\":{\"1972\":1}}],[\"中间的变量exp\",{\"1\":{\"1793\":1}}],[\"中间件的类型\",{\"0\":{\"311\":1}}],[\"中间件的作用\",{\"0\":{\"310\":1},\"1\":{\"310\":1}}],[\"中间件\",{\"0\":{\"308\":1},\"1\":{\"309\":1,\"349\":1}}],[\"中间层方案\",{\"0\":{\"506\":1}}],[\"中间层再访问后台的\",{\"1\":{\"218\":1}}],[\"中间层\",{\"0\":{\"218\":1}}],[\"中小型网站\",{\"1\":{\"291\":1}}],[\"中文本水平垂直居中\",{\"0\":{\"732\":1}}],[\"中文官网版本比较旧\",{\"1\":{\"623\":1}}],[\"中文需解码\",{\"1\":{\"493\":1}}],[\"中文站\",{\"1\":{\"324\":1}}],[\"中文响应不乱码\",{\"1\":{\"307\":1}}],[\"中文叫\",{\"1\":{\"266\":1}}],[\"中文\",{\"1\":{\"241\":1,\"341\":2}}],[\"中著名的\",{\"1\":{\"223\":1}}],[\"中设置状态\",{\"1\":{\"2020\":1}}],[\"中设置字体的编码\",{\"1\":{\"623\":1}}],[\"中设置响应的方式兼容\",{\"1\":{\"307\":1}}],[\"中设置\",{\"1\":{\"157\":1,\"2000\":1}}],[\"中来引入该\",{\"1\":{\"138\":1}}],[\"中清除输出目录开箱可用\",{\"1\":{\"129\":1}}],[\"中安装了包名字是\",{\"1\":{\"66\":1}}],[\"中的敏感信息\",{\"1\":{\"2095\":1}}],[\"中的回调函数\",{\"1\":{\"1977\":1}}],[\"中的位置\",{\"1\":{\"1977\":1,\"2068\":1}}],[\"中的位置索引\",{\"1\":{\"1977\":1}}],[\"中的真实位置索引\",{\"1\":{\"1969\":1}}],[\"中的索引不小于最大索引值\",{\"1\":{\"1962\":1}}],[\"中的索引小于最大索引值lastindex\",{\"1\":{\"1962\":1}}],[\"中的索引小于最大索引值\",{\"1\":{\"1962\":1,\"1969\":1}}],[\"中的值\",{\"1\":{\"1896\":1}}],[\"中的副作用函数取出并执行\",{\"1\":{\"1892\":1}}],[\"中的方案是在\",{\"1\":{\"1890\":1}}],[\"中的逻辑和取出执行的逻辑进行封装\",{\"1\":{\"1889\":1}}],[\"中的逻辑更清楚易懂\",{\"1\":{\"1501\":1}}],[\"中的计时器能做到精确计时吗\",{\"1\":{\"1560\":1}}],[\"中的路径发生变动\",{\"1\":{\"1543\":1}}],[\"中的路径表示\",{\"1\":{\"339\":1}}],[\"中的外部\",{\"1\":{\"1526\":1}}],[\"中的mixin\",{\"1\":{\"1501\":1}}],[\"中的module\",{\"1\":{\"51\":1}}],[\"中的生命周期钩子\",{\"1\":{\"1500\":1}}],[\"中的响应式原理\",{\"0\":{\"1489\":1}}],[\"中的代码处在同一个作用域中\",{\"1\":{\"1486\":1}}],[\"中的代码冗余的情形\",{\"1\":{\"1298\":1}}],[\"中的属性\",{\"1\":{\"1486\":1}}],[\"中的el决定服务哪个容器\",{\"1\":{\"1415\":1}}],[\"中的所有属性\",{\"1\":{\"1350\":1,\"1352\":1,\"1353\":1}}],[\"中的所有样式代码依然会被全部导入\",{\"1\":{\"1318\":1}}],[\"中的所有成员\",{\"1\":{\"1318\":1}}],[\"中的成员\",{\"1\":{\"1318\":1}}],[\"中的用法和在\",{\"1\":{\"1313\":1}}],[\"中的变量\",{\"1\":{\"1309\":1}}],[\"中的变换\",{\"0\":{\"720\":1}}],[\"中的if\",{\"1\":{\"1284\":1}}],[\"中的列表是不可变的\",{\"1\":{\"1272\":1}}],[\"中的列表不需要特殊的方括号\",{\"1\":{\"1267\":1}}],[\"中的写法\",{\"1\":{\"1257\":1}}],[\"中的注释主要有以下两种\",{\"1\":{\"1255\":1}}],[\"中的大多数方法都会返回当前操作的\",{\"1\":{\"1232\":1}}],[\"中的事件可以通过回调函数中的参数来获取\",{\"1\":{\"1219\":1}}],[\"中的文本\",{\"1\":{\"1124\":1}}],[\"中的问号\",{\"1\":{\"1093\":1,\"2051\":1}}],[\"中的函数大多数情况下都是由用户主动调用触发的\",{\"1\":{\"1034\":1}}],[\"中的垃圾回收站机制\",{\"1\":{\"1031\":1}}],[\"中的垃圾回收\",{\"0\":{\"1028\":1}}],[\"中的全局执行环境中被调用\",{\"1\":{\"952\":1}}],[\"中的形参的声明是不需要添加关键字的\",{\"1\":{\"931\":1}}],[\"中的正则表达式功能比较完备\",{\"1\":{\"921\":1}}],[\"中的字符串转为\",{\"1\":{\"895\":1}}],[\"中的空格和换行会自动忽略\",{\"1\":{\"818\":1}}],[\"中的运算符优先级是一套规则\",{\"1\":{\"816\":1}}],[\"中的关键字或保留字\",{\"1\":{\"777\":1}}],[\"中的一个卷积转置层\",{\"1\":{\"1667\":1}}],[\"中的一个批量归一化\",{\"1\":{\"1665\":1}}],[\"中的一个层\",{\"1\":{\"1661\":1}}],[\"中的一个优化器类\",{\"1\":{\"1659\":1}}],[\"中的一个视觉处理库\",{\"1\":{\"1656\":1}}],[\"中的一个数据集类\",{\"1\":{\"1655\":1}}],[\"中的一个新函数\",{\"1\":{\"1487\":1}}],[\"中的一个语法糖\",{\"1\":{\"1358\":1}}],[\"中的一个重点\",{\"1\":{\"926\":1}}],[\"中的一个隐含的属性\",{\"1\":{\"564\":1}}],[\"中的一小部分\",{\"1\":{\"772\":1}}],[\"中的数字有两个组成部分\",{\"1\":{\"1264\":1}}],[\"中的数据代理\",{\"0\":{\"1366\":1}}],[\"中的数据按照如下方式初始化\",{\"1\":{\"1354\":1}}],[\"中的数据发生改变\",{\"1\":{\"1350\":1}}],[\"中的数据\",{\"1\":{\"768\":1,\"1347\":1,\"1366\":1,\"1429\":1,\"1451\":2,\"2088\":1}}],[\"中的数组\",{\"1\":{\"176\":1,\"1199\":1}}],[\"中的像素操作\",{\"0\":{\"735\":1}}],[\"中的像素数目\",{\"1\":{\"720\":1}}],[\"中的元素也是\",{\"1\":{\"1290\":1}}],[\"中的元素\",{\"1\":{\"705\":1}}],[\"中的脚本来绘制图形\",{\"1\":{\"701\":1}}],[\"中的内容\",{\"1\":{\"1874\":1}}],[\"中的内容来识别图片\",{\"1\":{\"666\":1}}],[\"中的内容解包出来\",{\"1\":{\"388\":1}}],[\"中的实体\",{\"1\":{\"658\":1}}],[\"中的又一种布局手段\",{\"1\":{\"584\":1}}],[\"中的<table>元素\",{\"1\":{\"548\":1}}],[\"中的参数默认是从\",{\"1\":{\"401\":1}}],[\"中的模块可以分为内置模块\",{\"1\":{\"377\":1}}],[\"中的模块导入导出分为两种\",{\"1\":{\"48\":1}}],[\"中的接口语法不同\",{\"1\":{\"335\":1}}],[\"中的域名以及协议的内容\",{\"1\":{\"282\":1}}],[\"中的磁盘操作是由其他\",{\"1\":{\"245\":1}}],[\"中的同步和异步的区别\",{\"1\":{\"242\":1}}],[\"中的概念\",{\"1\":{\"176\":1}}],[\"中的对象\",{\"1\":{\"176\":1}}],[\"中的配置\",{\"1\":{\"150\":1}}],[\"中的版本号\",{\"1\":{\"92\":1}}],[\"中的\",{\"0\":{\"1219\":1,\"1290\":1,\"1442\":1},\"1\":{\"52\":1,\"77\":1,\"242\":1,\"282\":1,\"293\":1,\"295\":1,\"319\":1,\"354\":1,\"382\":1,\"494\":1,\"697\":1,\"768\":1,\"945\":1,\"948\":1,\"1023\":1,\"1086\":1,\"1093\":1,\"1186\":1,\"1281\":1,\"1313\":3,\"1317\":1,\"1350\":1,\"1379\":1,\"1626\":1,\"1667\":1,\"1767\":1,\"2002\":1,\"2051\":1,\"2070\":1}}],[\"中的最后一个问题放到了台前\",{\"1\":{\"24\":1}}],[\"中使用vue\",{\"1\":{\"2016\":1}}],[\"中使用的就是这种双端\",{\"1\":{\"1966\":1}}],[\"中使用的协议\",{\"1\":{\"1093\":1,\"2051\":1}}],[\"中使用函数式编程重构\",{\"1\":{\"1954\":1}}],[\"中使用proxy实现\",{\"1\":{\"1886\":1}}],[\"中使用object\",{\"1\":{\"1886\":1,\"1889\":1}}],[\"中使用nn\",{\"1\":{\"1666\":1}}],[\"中使用了\",{\"1\":{\"1318\":2}}],[\"中使用插值\",{\"0\":{\"1317\":1}}],[\"中使用变量\",{\"1\":{\"1309\":1}}],[\"中使用字体\",{\"1\":{\"143\":1}}],[\"中使用旧的\",{\"1\":{\"142\":1}}],[\"中使用\",{\"0\":{\"149\":1},\"1\":{\"44\":1,\"289\":1,\"1309\":3}}],[\"中配置的函数\",{\"1\":{\"1368\":2}}],[\"中配置了\",{\"1\":{\"1360\":1}}],[\"中配置\",{\"1\":{\"44\":1,\"45\":1,\"156\":1}}],[\"中\",{\"1\":{\"16\":2,\"72\":2,\"122\":1,\"138\":2,\"142\":1,\"159\":1,\"177\":2,\"243\":1,\"254\":1,\"255\":1,\"257\":1,\"258\":1,\"259\":1,\"260\":1,\"352\":1,\"377\":1,\"382\":1,\"388\":1,\"402\":1,\"539\":1,\"641\":1,\"644\":1,\"650\":2,\"666\":1,\"669\":1,\"681\":1,\"720\":3,\"745\":1,\"754\":1,\"762\":1,\"769\":1,\"777\":1,\"786\":1,\"787\":1,\"796\":1,\"846\":2,\"875\":1,\"926\":1,\"981\":1,\"995\":1,\"1015\":1,\"1053\":1,\"1093\":1,\"1124\":1,\"1158\":1,\"1161\":2,\"1200\":1,\"1261\":1,\"1264\":1,\"1267\":1,\"1283\":1,\"1297\":1,\"1301\":2,\"1308\":1,\"1314\":1,\"1318\":1,\"1325\":1,\"1341\":1,\"1394\":2,\"1437\":2,\"1446\":1,\"1485\":1,\"1486\":1,\"1494\":1,\"1496\":1,\"1497\":1,\"1499\":1,\"1511\":1,\"1514\":2,\"1533\":1,\"1560\":1,\"1569\":1,\"1673\":1,\"1779\":1,\"1794\":4,\"1802\":1,\"1803\":1,\"1828\":1,\"1838\":1,\"1862\":1,\"1865\":1,\"1888\":1,\"1892\":1,\"1895\":1,\"1896\":1,\"1897\":2,\"1909\":1,\"1917\":1,\"1923\":3,\"1924\":1,\"1927\":1,\"1935\":1,\"1937\":1,\"1954\":3,\"1974\":2,\"1984\":1,\"1993\":2,\"2025\":1,\"2034\":2,\"2041\":1,\"2051\":1,\"2061\":1,\"2068\":2,\"2070\":1,\"2071\":1,\"2088\":1}}],[\"w91\",{\"1\":{\"1155\":1}}],[\"w92\",{\"1\":{\"1155\":1}}],[\"wyc\",{\"1\":{\"1155\":1}}],[\"w281\",{\"1\":{\"1225\":1}}],[\"w282\",{\"1\":{\"1225\":1}}],[\"w287\",{\"1\":{\"1225\":1}}],[\"w288\",{\"1\":{\"1124\":1}}],[\"w251\",{\"1\":{\"1224\":1}}],[\"w206\",{\"1\":{\"1222\":1}}],[\"w264\",{\"1\":{\"1225\":1}}],[\"w265\",{\"1\":{\"1150\":1}}],[\"w261\",{\"1\":{\"1150\":1}}],[\"w262\",{\"1\":{\"1150\":1}}],[\"w228\",{\"1\":{\"1123\":1,\"1223\":1}}],[\"w236\",{\"1\":{\"1225\":1}}],[\"w232\",{\"1\":{\"1123\":1}}],[\"w230\",{\"1\":{\"1120\":1}}],[\"w635\",{\"1\":{\"1207\":1}}],[\"w623\",{\"1\":{\"1152\":1}}],[\"w622\",{\"1\":{\"1152\":1}}],[\"w65\",{\"1\":{\"1112\":1}}],[\"w64\",{\"1\":{\"1112\":1}}],[\"w862\",{\"1\":{\"1162\":1}}],[\"w800\",{\"1\":{\"1091\":1}}],[\"w803\",{\"1\":{\"772\":1}}],[\"w898\",{\"1\":{\"1088\":1}}],[\"w186\",{\"1\":{\"1162\":1}}],[\"w150\",{\"1\":{\"1161\":1}}],[\"w152\",{\"1\":{\"1161\":1}}],[\"w158\",{\"1\":{\"1160\":1,\"1161\":1}}],[\"w134\",{\"1\":{\"1154\":2}}],[\"w139\",{\"1\":{\"1098\":1}}],[\"w179\",{\"1\":{\"1153\":1}}],[\"w140\",{\"1\":{\"1221\":1}}],[\"w141\",{\"1\":{\"1146\":1}}],[\"w144\",{\"1\":{\"1145\":1}}],[\"w111\",{\"1\":{\"1154\":1}}],[\"w1119\",{\"1\":{\"1112\":1}}],[\"w110\",{\"1\":{\"1154\":1}}],[\"w1108\",{\"1\":{\"1088\":1}}],[\"w114\",{\"1\":{\"1112\":1}}],[\"w1278\",{\"1\":{\"773\":1}}],[\"w1279\",{\"1\":{\"772\":1}}],[\"w447\",{\"1\":{\"1123\":1}}],[\"w443\",{\"1\":{\"1087\":1}}],[\"w417\",{\"1\":{\"1105\":1}}],[\"w412\",{\"1\":{\"1088\":1}}],[\"w452\",{\"1\":{\"1084\":1}}],[\"w+\",{\"1\":{\"918\":1,\"2054\":1}}],[\"w的位置\",{\"1\":{\"916\":1}}],[\"w500\",{\"1\":{\"1088\":1}}],[\"w596\",{\"1\":{\"1087\":1,\"1155\":1}}],[\"w536\",{\"1\":{\"895\":1}}],[\"w528\",{\"1\":{\"765\":1}}],[\"w754\",{\"1\":{\"770\":1}}],[\"w782\",{\"1\":{\"769\":1}}],[\"w326\",{\"1\":{\"1219\":1}}],[\"w320\",{\"1\":{\"1105\":1}}],[\"w378\",{\"1\":{\"1201\":1}}],[\"w372\",{\"1\":{\"1201\":1}}],[\"w376\",{\"1\":{\"764\":1,\"1104\":1}}],[\"w349\",{\"1\":{\"1153\":1}}],[\"w341\",{\"1\":{\"1105\":1}}],[\"w368\",{\"1\":{\"1141\":1}}],[\"w362\",{\"1\":{\"1105\":1}}],[\"w301\",{\"1\":{\"1139\":1,\"1140\":1}}],[\"w392\",{\"1\":{\"1088\":1}}],[\"w3\",{\"1\":{\"691\":1,\"692\":2}}],[\"w3c\",{\"1\":{\"691\":1,\"1084\":4,\"1181\":1,\"1560\":4,\"1607\":1}}],[\"weex\",{\"1\":{\"1802\":1}}],[\"week\",{\"1\":{\"757\":1}}],[\"weakmap\",{\"1\":{\"872\":2,\"1889\":2}}],[\"weakset\",{\"1\":{\"865\":5}}],[\"weak\",{\"1\":{\"865\":10}}],[\"welcome\",{\"1\":{\"789\":6,\"1093\":2,\"1460\":2,\"1834\":2,\"1835\":1,\"2051\":2}}],[\"weight和model\",{\"1\":{\"1670\":1}}],[\"weights\",{\"1\":{\"1277\":3,\"1680\":2}}],[\"weight\",{\"1\":{\"621\":1,\"623\":2,\"895\":1,\"1275\":2,\"1290\":4,\"1328\":1,\"1585\":1,\"1659\":3,\"1670\":4,\"1671\":5,\"1680\":1}}],[\"we\",{\"1\":{\"408\":2,\"1804\":1,\"2058\":2,\"2065\":2}}],[\"webappapis\",{\"1\":{\"1560\":1}}],[\"webapi\",{\"1\":{\"1155\":1}}],[\"webstorage\",{\"0\":{\"1436\":1},\"1\":{\"1601\":1}}],[\"websocket协议版本就用13好吗\",{\"1\":{\"1648\":1}}],[\"websocket\",{\"0\":{\"1643\":1,\"1644\":1,\"1647\":1},\"1\":{\"158\":3,\"1644\":2,\"1647\":13,\"1648\":7,\"1649\":11},\"2\":{\"1566\":1,\"1652\":1}}],[\"webm\",{\"1\":{\"747\":2}}],[\"webkitformboundaryraptlntbiqy4x2ho\",{\"1\":{\"1634\":4}}],[\"webkit\",{\"1\":{\"701\":1,\"758\":1,\"1265\":2}}],[\"webp\",{\"1\":{\"666\":1,\"1592\":1}}],[\"webpack的配置对象\",{\"1\":{\"155\":1}}],[\"webpack打包原理\",{\"0\":{\"153\":1}}],[\"webpack4\",{\"1\":{\"142\":1}}],[\"webpack5\",{\"1\":{\"129\":1,\"142\":2}}],[\"webpack来做\",{\"1\":{\"128\":1}}],[\"webpackjs\",{\"1\":{\"122\":1,\"133\":1}}],[\"webpack\",{\"0\":{\"122\":1,\"123\":1,\"154\":1,\"158\":1},\"1\":{\"25\":1,\"119\":1,\"122\":13,\"123\":10,\"124\":9,\"128\":7,\"129\":7,\"133\":9,\"138\":9,\"142\":7,\"146\":1,\"149\":5,\"150\":2,\"154\":4,\"155\":1,\"156\":4,\"157\":3,\"158\":7,\"159\":1,\"221\":1,\"1867\":1},\"2\":{\"121\":1,\"126\":1,\"131\":1,\"136\":1,\"140\":1,\"145\":1,\"152\":1,\"161\":1}}],[\"web\",{\"0\":{\"766\":1,\"768\":1,\"769\":1,\"1182\":1},\"1\":{\"24\":4,\"217\":2,\"218\":1,\"223\":3,\"271\":1,\"291\":3,\"298\":2,\"363\":1,\"368\":1,\"693\":1,\"766\":4,\"768\":5,\"769\":1,\"770\":1,\"895\":1,\"958\":1,\"1084\":2,\"1099\":1,\"1100\":1,\"1102\":1,\"1105\":1,\"1148\":1,\"1174\":1,\"1182\":1,\"1491\":2,\"1572\":1,\"1587\":1,\"1607\":1,\"1998\":1,\"2064\":1,\"2087\":1},\"2\":{\"1184\":1}}],[\"wb+\",{\"1\":{\"404\":1}}],[\"wrapaction\",{\"1\":{\"2020\":2}}],[\"wrapall\",{\"1\":{\"1208\":1,\"1212\":2}}],[\"wrapfilter调用后\",{\"1\":{\"1794\":1}}],[\"wrapfilter调用前\",{\"1\":{\"1794\":1}}],[\"wrapfilter\",{\"1\":{\"1794\":1}}],[\"wrapped\",{\"1\":{\"1352\":1}}],[\"wrapper\",{\"1\":{\"402\":1,\"1936\":7,\"1937\":6}}],[\"wrapinner\",{\"1\":{\"1212\":2}}],[\"wrap\",{\"1\":{\"587\":6,\"1208\":1,\"1212\":2,\"1930\":8,\"1931\":8,\"1932\":4}}],[\"writable\",{\"1\":{\"1059\":2,\"1067\":1,\"1364\":1}}],[\"writing\",{\"1\":{\"546\":1}}],[\"writefile适合于\",{\"1\":{\"247\":1}}],[\"writefile\",{\"0\":{\"244\":1},\"1\":{\"243\":1,\"244\":2,\"245\":1,\"246\":1}}],[\"writefilesync\",{\"0\":{\"245\":1},\"1\":{\"155\":1,\"243\":1,\"245\":2,\"263\":1,\"264\":1}}],[\"write\",{\"1\":{\"155\":1,\"247\":4,\"263\":1,\"286\":6,\"307\":1,\"404\":3}}],[\"w\",{\"1\":{\"389\":3,\"732\":2,\"740\":10,\"891\":4,\"904\":6,\"905\":2,\"914\":1,\"916\":1,\"917\":1,\"923\":1,\"1534\":2,\"1537\":2,\"1659\":1,\"1661\":2}}],[\"wss\",{\"1\":{\"1648\":1}}],[\"ws\",{\"1\":{\"247\":6,\"263\":3,\"1648\":1,\"1650\":1}}],[\"wds\",{\"1\":{\"158\":5}}],[\"want\",{\"1\":{\"2058\":1}}],[\"wang\",{\"1\":{\"202\":1}}],[\"wangwu\",{\"1\":{\"176\":1,\"349\":1}}],[\"walter\",{\"1\":{\"1825\":1}}],[\"walking\",{\"1\":{\"828\":5,\"829\":2,\"830\":9,\"896\":1}}],[\"walk\",{\"1\":{\"828\":6,\"829\":6,\"830\":16,\"896\":1,\"1785\":2}}],[\"wahaha\",{\"1\":{\"1578\":1,\"1584\":1}}],[\"wave\",{\"1\":{\"1328\":1}}],[\"was\",{\"1\":{\"1315\":1,\"1804\":1}}],[\"warning\",{\"1\":{\"1279\":2,\"2040\":1}}],[\"warn\",{\"1\":{\"1251\":1,\"1358\":1,\"1368\":1,\"1430\":1,\"1786\":4,\"1791\":1,\"1792\":4,\"1799\":1,\"1802\":1,\"1803\":2,\"1804\":12,\"1805\":3,\"1914\":2,\"1917\":1,\"1918\":1,\"1956\":1,\"1992\":2,\"1993\":1,\"2047\":2,\"2058\":1}}],[\"warpinner\",{\"1\":{\"1208\":1}}],[\"warranties\",{\"1\":{\"156\":1}}],[\"warranty\",{\"1\":{\"156\":1}}],[\"wayne\",{\"1\":{\"895\":1}}],[\"wait\",{\"1\":{\"408\":1,\"490\":1,\"491\":2}}],[\"waiting\",{\"1\":{\"177\":1,\"752\":1}}],[\"watch的初始化过程最终目的就是给每个watch创建一个\",{\"1\":{\"1852\":1}}],[\"watch中有可能会用到inject的数据\",{\"1\":{\"1803\":1}}],[\"watch中的函数\",{\"1\":{\"1423\":2}}],[\"watcher更新\",{\"1\":{\"1860\":1}}],[\"watcher过程中会获取一次被监听属性的值\",{\"1\":{\"1860\":1}}],[\"watcher过程中并不会执行this\",{\"1\":{\"1847\":1}}],[\"watcher而言\",{\"1\":{\"1854\":1}}],[\"watcher会执行watcher实例的run方法\",{\"1\":{\"1850\":1}}],[\"watcher和render\",{\"1\":{\"1850\":1}}],[\"watcher添加到被监听属性的dep实例中\",{\"1\":{\"1860\":1}}],[\"watcher添加到依赖属性的dep中\",{\"1\":{\"1859\":1}}],[\"watcher添加到此属性的dep\",{\"1\":{\"1854\":1}}],[\"watcher添加到该计算属性所有依赖属性的dep\",{\"1\":{\"1849\":1}}],[\"watcher添加到响应式变量的dep\",{\"1\":{\"1849\":1}}],[\"watcher的update方法通过nexttick放到缓存队列中\",{\"1\":{\"1860\":1}}],[\"watcher的update方法将dirty设为true\",{\"1\":{\"1850\":1}}],[\"watcher的更新\",{\"1\":{\"1859\":2}}],[\"watcher的run方法\",{\"1\":{\"1855\":1}}],[\"watcher的getter属性\",{\"1\":{\"1854\":1}}],[\"watcher的get方法去触发组件更新\",{\"1\":{\"1849\":1}}],[\"watcher的lazy为true\",{\"1\":{\"1847\":1}}],[\"watcher类内部代码\",{\"1\":{\"1847\":1}}],[\"watchers属性\",{\"1\":{\"1804\":1}}],[\"watchers\",{\"1\":{\"1804\":4,\"1807\":3,\"1890\":1}}],[\"watcher\",{\"1\":{\"1784\":8,\"1800\":1,\"1804\":8,\"1806\":2,\"1807\":2,\"1810\":4,\"1821\":2,\"1841\":2,\"1842\":5,\"1845\":1,\"1846\":1,\"1849\":7,\"1850\":1,\"1852\":1,\"1854\":3,\"1855\":3,\"1857\":1,\"1859\":2,\"1860\":1,\"1862\":2,\"1890\":1,\"2000\":1,\"2002\":1,\"2031\":1,\"2034\":1}}],[\"watcheffect配置的回调执行了\",{\"1\":{\"1498\":1}}],[\"watcheffect所指定的回调中用到的数据只要发生变化\",{\"1\":{\"1498\":1}}],[\"watcheffect\",{\"0\":{\"1498\":1},\"1\":{\"1480\":1,\"1498\":5}}],[\"watch能完成的功能\",{\"1\":{\"1382\":1}}],[\"watch都可以完成\",{\"1\":{\"1382\":1}}],[\"watchposition\",{\"1\":{\"1102\":1}}],[\"watch③\",{\"1\":{\"158\":1}}],[\"watch①\",{\"1\":{\"158\":1}}],[\"watch\",{\"0\":{\"1381\":1,\"1497\":1,\"1851\":1,\"1856\":1,\"1858\":1,\"1860\":1,\"1897\":1,\"1987\":1,\"2069\":1},\"1\":{\"157\":2,\"158\":1,\"340\":1,\"1378\":1,\"1379\":2,\"1380\":2,\"1381\":1,\"1382\":1,\"1480\":1,\"1497\":7,\"1498\":2,\"1799\":2,\"1804\":6,\"1836\":1,\"1858\":1,\"1897\":19,\"1987\":2,\"2067\":2,\"2069\":5}}],[\"whatwg\",{\"1\":{\"1560\":1}}],[\"whatsapp等\",{\"1\":{\"222\":1}}],[\"when\",{\"1\":{\"2047\":2}}],[\"whenever\",{\"1\":{\"1803\":1,\"1804\":1}}],[\"wheelevent\",{\"1\":{\"1153\":1}}],[\"wheel是标准的滚轮事件\",{\"1\":{\"1153\":1}}],[\"wheeldelta\",{\"1\":{\"1153\":3}}],[\"whether\",{\"1\":{\"156\":1}}],[\"which\",{\"1\":{\"1219\":2}}],[\"whitespace\",{\"1\":{\"1794\":1}}],[\"white\",{\"1\":{\"625\":1,\"1297\":2,\"1328\":1,\"1825\":1}}],[\"while可以保证\",{\"1\":{\"820\":1}}],[\"while会先执行后判断\",{\"1\":{\"820\":1}}],[\"while\",{\"0\":{\"820\":1},\"1\":{\"401\":1,\"412\":1,\"413\":2,\"415\":3,\"416\":2,\"417\":1,\"419\":1,\"424\":1,\"436\":1,\"438\":2,\"441\":1,\"443\":1,\"452\":1,\"453\":1,\"482\":2,\"820\":3,\"925\":1,\"1181\":1,\"1283\":1,\"1286\":4,\"1559\":1,\"1769\":1,\"1777\":1,\"1789\":1,\"1792\":4,\"1793\":1,\"1800\":1,\"1803\":1,\"1804\":1,\"1807\":1,\"1816\":1,\"1965\":1,\"1966\":1,\"1968\":5,\"1969\":4,\"1974\":4,\"1977\":1,\"2068\":3}}],[\"whom\",{\"1\":{\"156\":1}}],[\"widget\",{\"1\":{\"1265\":2,\"1328\":1,\"1330\":2}}],[\"width=400\",{\"1\":{\"1088\":3}}],[\"width=\",{\"1\":{\"666\":1,\"667\":1,\"668\":1,\"673\":1,\"674\":1}}],[\"width=1200px\",{\"1\":{\"651\":1}}],[\"width=992px\",{\"1\":{\"651\":1}}],[\"width=768px\",{\"1\":{\"651\":2}}],[\"width=device\",{\"1\":{\"287\":2,\"329\":1,\"580\":1,\"649\":1,\"764\":1,\"773\":1}}],[\"width\",{\"1\":{\"287\":2,\"329\":1,\"496\":3,\"540\":1,\"543\":2,\"544\":1,\"545\":1,\"547\":1,\"553\":2,\"554\":1,\"555\":3,\"556\":1,\"573\":1,\"574\":1,\"580\":5,\"582\":4,\"597\":1,\"641\":1,\"649\":2,\"651\":5,\"701\":1,\"703\":3,\"706\":5,\"714\":2,\"722\":2,\"727\":2,\"732\":2,\"737\":1,\"739\":2,\"740\":9,\"748\":1,\"750\":1,\"764\":2,\"765\":1,\"773\":2,\"1087\":6,\"1098\":2,\"1139\":1,\"1140\":1,\"1148\":2,\"1153\":1,\"1155\":4,\"1201\":3,\"1206\":2,\"1207\":4,\"1224\":4,\"1225\":2,\"1232\":2,\"1269\":4,\"1274\":1,\"1284\":4,\"1288\":4,\"1296\":1,\"1327\":3,\"1331\":2,\"1332\":2,\"1334\":4,\"1335\":6,\"1336\":3,\"1341\":2}}],[\"wife\",{\"1\":{\"1201\":8}}],[\"will\",{\"1\":{\"259\":1,\"1105\":4,\"1803\":1,\"1804\":1,\"2065\":1}}],[\"withcredentials\",{\"1\":{\"1612\":1}}],[\"with语句\",{\"1\":{\"404\":1}}],[\"with\",{\"1\":{\"156\":1,\"404\":2,\"405\":1,\"438\":1,\"1260\":1,\"1306\":1,\"1307\":1,\"1309\":1,\"1312\":2,\"1354\":1,\"1674\":1,\"1680\":1,\"1797\":1,\"1799\":1,\"1804\":2,\"1835\":1,\"2058\":2}}],[\"without\",{\"1\":{\"156\":3,\"2058\":1}}],[\"windoworworkerglobalscope\",{\"1\":{\"1587\":1}}],[\"window\",{\"0\":{\"1085\":1,\"1086\":1,\"1240\":1},\"1\":{\"29\":3,\"30\":3,\"264\":1,\"474\":1,\"478\":1,\"479\":1,\"480\":1,\"727\":1,\"732\":1,\"769\":1,\"770\":1,\"772\":4,\"783\":1,\"937\":3,\"938\":1,\"987\":1,\"990\":1,\"991\":6,\"992\":1,\"993\":6,\"995\":6,\"996\":2,\"1012\":1,\"1018\":1,\"1025\":4,\"1034\":3,\"1083\":3,\"1086\":22,\"1087\":8,\"1088\":18,\"1092\":2,\"1094\":1,\"1097\":4,\"1104\":2,\"1105\":4,\"1111\":1,\"1112\":1,\"1129\":1,\"1139\":5,\"1140\":5,\"1141\":1,\"1150\":6,\"1151\":3,\"1154\":4,\"1161\":5,\"1162\":1,\"1182\":1,\"1200\":3,\"1215\":2,\"1240\":1,\"1436\":2,\"1587\":1,\"1601\":2,\"2049\":2,\"2050\":3,\"2057\":2,\"2058\":2,\"2060\":2,\"2061\":7}}],[\"windows\",{\"1\":{\"2\":1,\"94\":1,\"228\":2,\"261\":1,\"372\":1,\"407\":1,\"1088\":1,\"1168\":1}}],[\"woff|woff2|eot|ttf|otf\",{\"1\":{\"143\":1}}],[\"wor\",{\"1\":{\"891\":2}}],[\"word\",{\"1\":{\"491\":2,\"857\":2,\"916\":1,\"958\":1}}],[\"words\",{\"1\":{\"401\":1,\"857\":2}}],[\"worker\",{\"1\":{\"1182\":7,\"1572\":1},\"2\":{\"1184\":1}}],[\"workers=0\",{\"1\":{\"1655\":1}}],[\"workers\",{\"0\":{\"1182\":1},\"1\":{\"1174\":1,\"1182\":1,\"1655\":1}}],[\"work\",{\"1\":{\"408\":2}}],[\"workspace\",{\"1\":{\"15\":1,\"2040\":2}}],[\"world<\",{\"1\":{\"1872\":1}}],[\"world`\",{\"1\":{\"790\":2}}],[\"world\",{\"1\":{\"41\":1,\"329\":1,\"765\":1,\"789\":6,\"790\":2,\"809\":2,\"888\":2,\"889\":7,\"890\":1,\"891\":10,\"917\":2,\"934\":2,\"943\":2,\"958\":1,\"980\":1,\"1015\":2,\"1080\":1,\"1081\":1,\"1356\":1,\"1361\":2,\"1422\":1,\"1486\":1,\"1872\":1,\"1873\":1,\"1886\":1,\"1953\":1,\"2045\":1,\"2101\":2}}],[\"www执行即可\",{\"1\":{\"332\":1}}],[\"www\",{\"1\":{\"39\":1,\"64\":1,\"65\":1,\"91\":1,\"122\":1,\"133\":1,\"146\":1,\"171\":1,\"177\":1,\"189\":1,\"213\":1,\"268\":2,\"292\":5,\"298\":1,\"332\":1,\"338\":1,\"339\":1,\"341\":3,\"345\":2,\"368\":1,\"372\":1,\"389\":2,\"493\":1,\"667\":1,\"691\":1,\"692\":2,\"773\":1,\"918\":1,\"958\":1,\"1093\":9,\"1094\":2,\"1156\":6,\"1205\":1,\"1369\":2,\"1577\":1,\"1607\":1,\"1634\":1,\"1635\":1,\"2050\":4,\"2051\":8}}],[\"owasp\",{\"1\":{\"2095\":1}}],[\"own\",{\"1\":{\"2065\":1}}],[\"ownerarray\",{\"1\":{\"1789\":3}}],[\"ownkeys\",{\"1\":{\"472\":1,\"830\":2,\"1803\":1,\"1906\":6,\"1920\":2,\"1989\":1,\"1993\":2}}],[\"oo\",{\"1\":{\"1053\":4}}],[\"o3\",{\"1\":{\"992\":3}}],[\"o2\",{\"1\":{\"992\":3,\"1055\":3,\"1056\":3}}],[\"o1\",{\"1\":{\"992\":10,\"1055\":2,\"1056\":2}}],[\"o12\",{\"1\":{\"384\":1}}],[\"ogc\",{\"1\":{\"732\":5}}],[\"ogg\",{\"1\":{\"668\":1,\"747\":2}}],[\"ol>li\",{\"1\":{\"663\":1}}],[\"oldname\",{\"1\":{\"2069\":2}}],[\"oldinstance\",{\"1\":{\"2069\":5}}],[\"oldimgdata\",{\"1\":{\"740\":6}}],[\"oldlen\",{\"1\":{\"1961\":7}}],[\"oldlisteners\",{\"1\":{\"1802\":2}}],[\"oldprops\",{\"1\":{\"1951\":5}}],[\"oldpath\",{\"1\":{\"254\":3}}],[\"oldkeytoidx\",{\"1\":{\"1789\":4}}],[\"oldend\",{\"1\":{\"1968\":8,\"1969\":8}}],[\"oldendvnode\",{\"1\":{\"1789\":11,\"1965\":12,\"1966\":5}}],[\"oldendidx\",{\"1\":{\"1789\":11,\"1965\":5,\"1966\":7}}],[\"oldstart\",{\"1\":{\"1969\":2}}],[\"oldstartvnode\",{\"1\":{\"1789\":14,\"1965\":12,\"1966\":8}}],[\"oldstartidx\",{\"1\":{\"1789\":7,\"1965\":3,\"1966\":6}}],[\"oldchildren\",{\"1\":{\"1961\":4,\"1962\":5,\"1965\":8,\"1966\":10,\"1968\":7,\"1969\":8}}],[\"oldchildren中所有未处理节点中的最后一个\",{\"1\":{\"1789\":1}}],[\"oldchildren中所有未处理节点中的第一个\",{\"1\":{\"1789\":1}}],[\"oldchildren结束索引\",{\"1\":{\"1789\":1}}],[\"oldchildren开始索引\",{\"1\":{\"1789\":1}}],[\"oldch\",{\"1\":{\"1789\":22}}],[\"oldval\",{\"1\":{\"1909\":4,\"1910\":4,\"1914\":4,\"1917\":4,\"1918\":4,\"1990\":4,\"1993\":4}}],[\"oldvalue\",{\"1\":{\"770\":2,\"1378\":2,\"1380\":8,\"1497\":13,\"1855\":3,\"1897\":13,\"1929\":8,\"1987\":5}}],[\"oldvnode\",{\"1\":{\"1407\":2,\"1428\":3,\"1789\":17,\"1944\":2,\"1962\":7,\"1968\":8,\"1969\":13}}],[\"olddirs\",{\"1\":{\"1407\":1}}],[\"oldon\",{\"1\":{\"1368\":1,\"1802\":4}}],[\"oldobject\",{\"1\":{\"487\":3}}],[\"old\",{\"1\":{\"834\":1,\"1802\":6}}],[\"old`\",{\"1\":{\"834\":1}}],[\"overload\",{\"1\":{\"2075\":1}}],[\"overline\",{\"1\":{\"625\":1}}],[\"override\",{\"1\":{\"2058\":1}}],[\"overridden\",{\"1\":{\"2053\":1}}],[\"over\",{\"1\":{\"743\":2,\"1645\":4}}],[\"overflow\",{\"1\":{\"557\":2,\"564\":1,\"580\":1,\"582\":1}}],[\"oyy\",{\"1\":{\"384\":1}}],[\"oauth\",{\"1\":{\"362\":1}}],[\"ocsp\",{\"1\":{\"2091\":1}}],[\"octal\",{\"1\":{\"958\":1}}],[\"octet\",{\"1\":{\"294\":1,\"1570\":1}}],[\"oc\",{\"1\":{\"732\":4}}],[\"occupation进行操作即可\",{\"1\":{\"405\":1}}],[\"occupation\",{\"1\":{\"405\":2}}],[\"ocw=12414cce\",{\"1\":{\"345\":1}}],[\"odd\",{\"1\":{\"287\":2,\"520\":1,\"1203\":1}}],[\"odm\",{\"1\":{\"189\":1}}],[\"ok\",{\"1\":{\"271\":2,\"355\":1,\"1088\":1,\"1154\":2,\"1332\":4,\"1575\":1,\"1635\":1,\"1872\":2,\"1890\":3}}],[\"o的模型\",{\"1\":{\"215\":1}}],[\"onvnodeunmounted\",{\"1\":{\"2070\":4}}],[\"oninvalidate的过期回调在watch回调执行时注册\",{\"1\":{\"1897\":1}}],[\"oninvalidate\",{\"1\":{\"1897\":9,\"1987\":5}}],[\"onfulfill\",{\"1\":{\"1779\":1}}],[\"onfulfilled\",{\"1\":{\"1776\":1,\"1777\":4}}],[\"onfinally\",{\"1\":{\"1777\":3}}],[\"onfocus\",{\"1\":{\"1104\":1}}],[\"ontimeout\",{\"1\":{\"1580\":1}}],[\"onrejected\",{\"1\":{\"1776\":1,\"1777\":6}}],[\"onreadystatechange\",{\"1\":{\"1575\":1,\"1576\":1,\"1577\":1,\"1582\":1}}],[\"onre\",{\"1\":{\"1368\":2}}],[\"onresize\",{\"1\":{\"1034\":2,\"1150\":2}}],[\"onmounted\",{\"1\":{\"1499\":4,\"1953\":1,\"1954\":3}}],[\"onmousewheel鼠标滚轮滚动的事件\",{\"1\":{\"1153\":1}}],[\"onmousedown\",{\"1\":{\"1153\":1}}],[\"onmessage\",{\"1\":{\"1182\":2}}],[\"onbeforecut\",{\"1\":{\"1160\":1}}],[\"onbeforecopy\",{\"1\":{\"1160\":1}}],[\"onbeforepaste\",{\"1\":{\"1160\":1}}],[\"onblur\",{\"1\":{\"1104\":1}}],[\"onpaste\",{\"1\":{\"1160\":1,\"1161\":1,\"1162\":2}}],[\"onprogress\",{\"1\":{\"773\":2}}],[\"onkeypress\",{\"1\":{\"1154\":1}}],[\"onkeyup\",{\"1\":{\"1154\":1}}],[\"onkeydown\",{\"1\":{\"1149\":1,\"1154\":1}}],[\"onunload\",{\"1\":{\"1150\":1}}],[\"onshow\",{\"1\":{\"1105\":1}}],[\"onscroll这几个属性在各浏览器中的兼容性问题\",{\"1\":{\"1087\":1}}],[\"onscroll\",{\"1\":{\"1087\":3,\"1150\":1}}],[\"onexit\",{\"1\":{\"1977\":3}}],[\"ones\",{\"1\":{\"1676\":1}}],[\"one\",{\"1\":{\"1087\":5,\"1148\":2,\"1214\":1,\"1216\":2,\"1329\":2,\"1475\":1,\"2058\":1,\"2087\":1}}],[\"onerror\",{\"1\":{\"476\":1,\"773\":2,\"1105\":1,\"1580\":1,\"2041\":1}}],[\"onchange\",{\"1\":{\"1954\":1}}],[\"oncomplete\",{\"1\":{\"2029\":11}}],[\"oncompositionend\",{\"1\":{\"1357\":3}}],[\"oncompositionstart\",{\"1\":{\"1357\":2}}],[\"oncopy\",{\"1\":{\"1160\":1,\"1161\":2,\"1162\":1}}],[\"oncut\",{\"1\":{\"1160\":1,\"1162\":1}}],[\"onclose\",{\"1\":{\"1105\":1}}],[\"onclick=\",{\"1\":{\"1081\":1,\"1088\":1,\"1093\":1,\"1094\":3,\"1096\":1,\"1137\":1,\"1143\":1,\"1155\":4,\"2050\":2}}],[\"onclick\",{\"1\":{\"993\":2,\"1088\":6,\"1105\":1,\"1112\":1,\"1139\":6,\"1140\":1,\"1144\":3,\"1146\":2,\"1151\":3,\"1154\":1,\"1156\":5,\"1157\":1,\"1158\":1,\"1162\":1,\"1181\":4,\"1214\":3,\"1559\":1,\"1576\":1,\"1581\":2,\"1582\":2,\"1877\":1,\"1878\":1,\"1879\":2,\"1880\":1,\"2061\":3,\"2066\":1}}],[\"onceprocessed\",{\"1\":{\"1796\":1}}],[\"once指令\",{\"1\":{\"1788\":1}}],[\"once所在结构的更新\",{\"1\":{\"1402\":1}}],[\"once所在节点在初次动态渲染后\",{\"1\":{\"1402\":1}}],[\"once=\",{\"1\":{\"1369\":1}}],[\"once\",{\"0\":{\"1402\":1},\"1\":{\"191\":4,\"212\":1,\"480\":3,\"1369\":1,\"1404\":1,\"1791\":1,\"1795\":2,\"1796\":1,\"1797\":1,\"1802\":1,\"2029\":1}}],[\"onabort\",{\"1\":{\"773\":2,\"2029\":6}}],[\"ondrop=\",{\"1\":{\"765\":2}}],[\"ondrop\",{\"1\":{\"764\":2,\"765\":1}}],[\"ondragover=\",{\"1\":{\"765\":2}}],[\"ondragover\",{\"1\":{\"764\":2,\"765\":1}}],[\"ondragstart=\",{\"1\":{\"765\":2}}],[\"ondragstart\",{\"1\":{\"764\":1,\"765\":1}}],[\"online\",{\"1\":{\"1091\":1}}],[\"only\",{\"0\":{\"1319\":1},\"1\":{\"651\":1,\"1804\":1}}],[\"onload=\",{\"1\":{\"1150\":1}}],[\"onloadend\",{\"1\":{\"773\":2}}],[\"onloadstart\",{\"1\":{\"773\":2}}],[\"onload\",{\"0\":{\"1240\":1},\"1\":{\"476\":1,\"496\":1,\"727\":2,\"732\":1,\"740\":1,\"773\":4,\"1150\":1,\"1200\":3,\"1215\":4,\"1240\":1}}],[\"on\",{\"0\":{\"1216\":1,\"1242\":1},\"1\":{\"200\":1,\"212\":2,\"252\":2,\"263\":1,\"282\":2,\"283\":2,\"438\":1,\"441\":1,\"443\":1,\"756\":2,\"1214\":1,\"1216\":10,\"1219\":1,\"1231\":1,\"1353\":1,\"1358\":6,\"1368\":4,\"1404\":1,\"1407\":4,\"1437\":1,\"1480\":1,\"1519\":4,\"1680\":2,\"1786\":3,\"1801\":1,\"1802\":13,\"1804\":3,\"1817\":4,\"1827\":1,\"1834\":1,\"1878\":1,\"1954\":2}}],[\"ob\",{\"1\":{\"1777\":2,\"1784\":2,\"1785\":7,\"1786\":13,\"1803\":1,\"1807\":3}}],[\"observable\",{\"0\":{\"1827\":1},\"1\":{\"1827\":2}}],[\"observed\",{\"1\":{\"1799\":1,\"1803\":1}}],[\"observearray\",{\"1\":{\"1785\":3}}],[\"observer\",{\"1\":{\"1396\":2,\"1784\":1,\"1785\":1,\"1807\":1,\"1822\":2,\"1836\":1}}],[\"observe\",{\"1\":{\"1366\":1,\"1777\":1,\"1785\":1,\"1804\":2,\"1822\":1,\"1827\":1,\"1836\":1}}],[\"obs\",{\"1\":{\"1396\":2}}],[\"obj4\",{\"1\":{\"983\":3}}],[\"obj3\",{\"1\":{\"983\":4,\"984\":2}}],[\"objname\",{\"1\":{\"827\":1}}],[\"obj2\",{\"1\":{\"471\":2,\"897\":2,\"982\":2,\"983\":3,\"984\":3,\"1055\":2,\"1057\":2,\"1058\":2,\"1365\":2}}],[\"obj2=json\",{\"1\":{\"471\":1}}],[\"obj1\",{\"1\":{\"471\":1,\"1055\":2}}],[\"obj\",{\"1\":{\"404\":1,\"405\":3,\"421\":3,\"428\":2,\"429\":2,\"430\":4,\"432\":2,\"433\":3,\"469\":4,\"471\":2,\"472\":13,\"482\":4,\"828\":11,\"836\":4,\"897\":2,\"982\":4,\"983\":3,\"984\":7,\"995\":31,\"996\":10,\"1021\":2,\"1028\":3,\"1038\":3,\"1045\":3,\"1046\":1,\"1047\":4,\"1053\":1,\"1054\":2,\"1057\":2,\"1058\":4,\"1059\":6,\"1060\":5,\"1061\":4,\"1066\":3,\"1067\":2,\"1364\":1,\"1365\":3,\"1396\":4,\"1768\":2,\"1785\":4,\"1827\":3,\"1873\":1,\"1886\":1,\"1888\":3,\"1889\":2,\"1890\":5,\"1892\":5,\"1893\":1,\"1894\":1,\"1896\":13,\"1897\":4,\"1902\":6,\"1904\":2,\"1905\":2,\"1906\":4,\"1907\":1,\"1909\":3,\"1910\":5,\"1911\":6,\"1912\":2,\"1913\":6,\"1914\":8,\"1917\":2,\"1918\":2,\"1920\":2,\"1921\":2,\"1923\":13,\"1927\":2,\"1928\":2,\"1937\":13,\"1938\":1,\"1985\":1,\"1986\":4,\"1987\":1,\"1989\":2,\"1990\":2,\"1991\":6,\"1992\":6,\"1993\":4,\"2044\":6}}],[\"objects\",{\"1\":{\"1491\":2,\"2065\":1}}],[\"object2\",{\"1\":{\"1025\":2}}],[\"object>\",{\"1\":{\"672\":1,\"674\":1}}],[\"objecttest\",{\"1\":{\"487\":11}}],[\"objectid\",{\"1\":{\"192\":2}}],[\"object\",{\"0\":{\"672\":1,\"1045\":1,\"1051\":1,\"1052\":1,\"1053\":1,\"1054\":1,\"1055\":1,\"1056\":1,\"1057\":1,\"1058\":1,\"1059\":1,\"1060\":1,\"1109\":1,\"1364\":1,\"1827\":1},\"1\":{\"156\":1,\"247\":1,\"252\":1,\"317\":1,\"405\":1,\"421\":2,\"424\":3,\"436\":1,\"438\":1,\"441\":1,\"443\":1,\"467\":1,\"469\":1,\"472\":1,\"474\":1,\"483\":1,\"487\":5,\"494\":1,\"770\":2,\"787\":1,\"797\":2,\"830\":7,\"842\":2,\"867\":2,\"876\":1,\"895\":1,\"901\":3,\"925\":1,\"966\":1,\"967\":9,\"980\":4,\"995\":2,\"1007\":3,\"1009\":3,\"1015\":1,\"1025\":5,\"1047\":1,\"1053\":2,\"1054\":2,\"1055\":2,\"1056\":2,\"1057\":3,\"1058\":3,\"1059\":2,\"1060\":1,\"1061\":3,\"1063\":2,\"1065\":1,\"1066\":1,\"1067\":1,\"1083\":1,\"1084\":1,\"1358\":1,\"1364\":2,\"1365\":1,\"1396\":2,\"1407\":2,\"1424\":1,\"1430\":1,\"1431\":1,\"1446\":1,\"1490\":1,\"1769\":3,\"1777\":2,\"1785\":3,\"1786\":2,\"1795\":1,\"1799\":1,\"1802\":6,\"1803\":5,\"1804\":10,\"1807\":1,\"1816\":1,\"1822\":2,\"1824\":2,\"1825\":3,\"1826\":2,\"1827\":2,\"1828\":2,\"1836\":2,\"1838\":1,\"1864\":1,\"1879\":1,\"1897\":1,\"1906\":1,\"1907\":1,\"1909\":1,\"1910\":2,\"1912\":1,\"1913\":1,\"1914\":4,\"1917\":1,\"1918\":1,\"1921\":1,\"1923\":2,\"1929\":1,\"1930\":4,\"1931\":2,\"1932\":4,\"1936\":2,\"1937\":2,\"1951\":1,\"1955\":2,\"1990\":2,\"1991\":1,\"1992\":1,\"1993\":2,\"2019\":1,\"2020\":1,\"2021\":2,\"2026\":2,\"2029\":2,\"2047\":5,\"2053\":2,\"2055\":2,\"2064\":1}}],[\"obtaining\",{\"1\":{\"156\":1}}],[\"outside\",{\"1\":{\"1305\":1}}],[\"outerwidth\",{\"1\":{\"1087\":3,\"1206\":1}}],[\"outerheight\",{\"1\":{\"1087\":4,\"1206\":1}}],[\"outer\",{\"1\":{\"824\":1,\"1087\":1}}],[\"outline\",{\"1\":{\"611\":1}}],[\"out\",{\"1\":{\"156\":1,\"641\":2,\"743\":2,\"1661\":3,\"1662\":1,\"1667\":3,\"1674\":1,\"1803\":1}}],[\"outputsourcerange\",{\"1\":{\"1792\":1,\"1805\":1}}],[\"output是经过\",{\"1\":{\"1666\":1}}],[\"output>\",{\"1\":{\"772\":2}}],[\"output\",{\"1\":{\"124\":2,\"129\":1,\"142\":2,\"155\":5,\"159\":1,\"772\":7,\"857\":1,\"1352\":1,\"1392\":2,\"1658\":3,\"1662\":2,\"1663\":10,\"1665\":2,\"1666\":1,\"1667\":5,\"1678\":1}}],[\"of遍历代理对象是行不通的\",{\"1\":{\"1931\":1}}],[\"of是用来遍历可迭代对象的\",{\"1\":{\"1921\":1}}],[\"of是直接迭代数组的值\",{\"1\":{\"846\":1}}],[\"of来遍历映射\",{\"1\":{\"870\":1}}],[\"of来对集合进行遍历\",{\"1\":{\"863\":1}}],[\"off\",{\"0\":{\"1216\":1},\"1\":{\"670\":1,\"1214\":1,\"1216\":2,\"2058\":1}}],[\"offsetwidth\",{\"1\":{\"1087\":1}}],[\"offsetleft\",{\"1\":{\"1087\":3}}],[\"offsety\",{\"1\":{\"764\":1,\"1153\":2}}],[\"offsetx\",{\"1\":{\"764\":1,\"1153\":2}}],[\"offset\",{\"0\":{\"1207\":1},\"1\":{\"569\":1,\"1153\":2,\"1206\":1,\"1207\":1}}],[\"offsettop以及offsetleft这两个属性获取的一定是离该元素最近的定了位的元素的距离\",{\"1\":{\"1087\":1}}],[\"offsettop\",{\"1\":{\"478\":1,\"1087\":3}}],[\"offsetheight\",{\"1\":{\"478\":2,\"1087\":1}}],[\"of\",{\"1\":{\"156\":8,\"259\":1,\"438\":1,\"520\":4,\"830\":3,\"841\":4,\"846\":5,\"863\":4,\"870\":4,\"958\":1,\"1040\":1,\"1120\":4,\"1392\":1,\"1393\":1,\"1646\":4,\"1778\":1,\"1792\":1,\"1794\":1,\"1799\":1,\"1816\":1,\"1904\":1,\"1915\":1,\"1921\":2,\"1926\":1,\"1932\":1,\"1993\":1,\"2061\":1,\"2072\":1,\"2074\":1,\"2075\":1,\"2078\":1,\"2079\":1,\"2080\":1,\"2081\":2,\"2083\":1}}],[\"o\",{\"0\":{\"385\":1},\"1\":{\"143\":1,\"436\":4,\"438\":6,\"441\":5,\"443\":5,\"482\":5,\"849\":1,\"854\":2,\"856\":1,\"958\":1,\"995\":8,\"1797\":1}}],[\"opacity\",{\"1\":{\"1519\":4,\"1526\":1}}],[\"op\",{\"1\":{\"1120\":3}}],[\"opr\",{\"1\":{\"1091\":1}}],[\"opts\",{\"1\":{\"1802\":4,\"1804\":11,\"1864\":9}}],[\"opt\",{\"1\":{\"773\":1}}],[\"optgroup\",{\"1\":{\"756\":1}}],[\"optimize\",{\"1\":{\"1790\":2,\"1799\":1}}],[\"optimizer\",{\"1\":{\"1659\":6,\"1680\":3,\"1790\":1}}],[\"optimization\",{\"1\":{\"1658\":3}}],[\"optim\",{\"1\":{\"1659\":7,\"1680\":1}}],[\"optimum=\",{\"1\":{\"696\":1}}],[\"optimum\",{\"1\":{\"696\":1}}],[\"optional\",{\"1\":{\"1655\":1}}],[\"option\",{\"1\":{\"697\":1,\"756\":1,\"1407\":1,\"1786\":1,\"1796\":1,\"1805\":1}}],[\"option>\",{\"1\":{\"670\":2,\"697\":4}}],[\"optionsorsetup\",{\"1\":{\"2019\":4}}],[\"optionsapi\",{\"1\":{\"1511\":1}}],[\"options\",{\"0\":{\"1511\":1},\"1\":{\"142\":1,\"155\":3,\"156\":1,\"244\":2,\"245\":1,\"246\":2,\"247\":2,\"250\":2,\"251\":2,\"252\":2,\"257\":3,\"258\":3,\"259\":3,\"260\":3,\"331\":1,\"355\":1,\"1205\":1,\"1358\":6,\"1360\":1,\"1407\":4,\"1415\":2,\"1421\":2,\"1423\":4,\"1424\":2,\"1431\":5,\"1432\":1,\"1485\":1,\"1784\":1,\"1790\":5,\"1791\":7,\"1792\":29,\"1796\":1,\"1799\":9,\"1800\":3,\"1802\":4,\"1804\":4,\"1805\":8,\"1810\":7,\"1825\":13,\"1826\":2,\"1828\":6,\"1847\":1,\"1854\":2,\"1864\":7,\"1893\":7,\"1894\":6,\"1895\":4,\"1897\":7,\"1906\":4,\"1946\":1,\"1948\":3,\"1954\":2,\"1984\":4,\"1985\":2,\"1987\":3,\"1998\":1,\"2016\":1,\"2019\":9,\"2020\":1,\"2021\":2,\"2025\":1,\"2027\":4,\"2041\":3,\"2042\":2,\"2047\":1,\"2053\":1,\"2066\":3,\"2069\":1,\"2074\":1}}],[\"opera\",{\"1\":{\"956\":1,\"1029\":1}}],[\"operties\",{\"1\":{\"681\":1}}],[\"opener\",{\"1\":{\"1088\":1}}],[\"open\",{\"1\":{\"133\":1,\"134\":1,\"143\":1,\"191\":1,\"200\":1,\"212\":1,\"404\":2,\"476\":1,\"697\":1,\"1088\":5,\"1575\":1,\"1576\":1,\"1577\":1,\"1579\":1,\"1581\":1,\"1582\":1,\"1601\":1,\"1655\":1,\"1674\":1}}],[\"otherlower\",{\"1\":{\"1040\":1}}],[\"others\",{\"1\":{\"925\":2}}],[\"otherwise\",{\"1\":{\"156\":1}}],[\"otherfun\",{\"1\":{\"29\":5,\"30\":3}}],[\"other\",{\"1\":{\"27\":1,\"28\":1,\"94\":1,\"156\":2,\"384\":1,\"1338\":1}}],[\"oss\",{\"1\":{\"1571\":1}}],[\"os\",{\"1\":{\"15\":1,\"404\":1,\"1091\":2,\"1655\":1}}],[\"orientation\",{\"1\":{\"1316\":1}}],[\"orig\",{\"1\":{\"15\":1}}],[\"originmethod\",{\"1\":{\"1923\":3,\"1924\":3,\"1925\":4,\"1993\":5}}],[\"originalstringifyquery\",{\"1\":{\"2065\":1}}],[\"original\",{\"1\":{\"1785\":2}}],[\"origin来改变它\",{\"1\":{\"619\":1}}],[\"origin\",{\"1\":{\"12\":2,\"17\":4,\"619\":4,\"631\":1,\"635\":1,\"1576\":1,\"1577\":1,\"1578\":1,\"1600\":1,\"1605\":1,\"1612\":1,\"2054\":1,\"2101\":2}}],[\"orange\",{\"1\":{\"535\":1,\"643\":1,\"1340\":2}}],[\"ordereddict\",{\"1\":{\"1671\":1}}],[\"order\",{\"0\":{\"593\":1},\"1\":{\"498\":2,\"593\":1,\"1033\":1}}],[\"or\",{\"0\":{\"1872\":1,\"1874\":1},\"1\":{\"15\":1,\"17\":1,\"156\":9,\"388\":1,\"397\":2,\"402\":1,\"436\":1,\"438\":1,\"441\":1,\"443\":1,\"664\":1,\"914\":1,\"924\":1,\"991\":2,\"1252\":1,\"1259\":4,\"1262\":4,\"1265\":1,\"1274\":2,\"1307\":1,\"1357\":2,\"1575\":5,\"1680\":2,\"1786\":4,\"1795\":2,\"1796\":1,\"1804\":2,\"1805\":2,\"1949\":1,\"1990\":1,\"2029\":1,\"2058\":1}}],[\"orgin要在clip的前边\",{\"1\":{\"635\":1}}],[\"org\",{\"1\":{\"2\":1,\"94\":2,\"227\":1,\"271\":1,\"691\":1,\"692\":2,\"958\":1,\"1105\":1,\"1426\":1,\"1482\":1,\"1483\":1,\"1485\":1,\"1491\":2,\"1560\":1,\"1587\":1,\"1591\":2,\"1607\":1,\"1804\":1,\"2041\":1,\"2047\":1}}],[\"~~\",{\"1\":{\"176\":1}}],[\"~\",{\"1\":{\"15\":1,\"399\":1,\"518\":2,\"816\":1}}],[\"vei\",{\"1\":{\"1949\":3}}],[\"vertical\",{\"1\":{\"546\":1,\"625\":1,\"669\":1}}],[\"verticalexample\",{\"1\":{\"546\":1}}],[\"verify\",{\"1\":{\"368\":2}}],[\"version标记\",{\"1\":{\"1649\":1}}],[\"versions\",{\"1\":{\"259\":1}}],[\"version\",{\"1\":{\"34\":1,\"64\":3,\"228\":1,\"229\":1,\"331\":1,\"1482\":1,\"1648\":1}}],[\"v2\",{\"1\":{\"1804\":1}}],[\"vndoe\",{\"1\":{\"1789\":1}}],[\"vnodeprops\",{\"1\":{\"2070\":1}}],[\"vnodejsast\",{\"1\":{\"1978\":3}}],[\"vnode存在\",{\"1\":{\"1944\":1}}],[\"vnodetomove\",{\"1\":{\"1789\":5,\"1966\":3}}],[\"vnode的text属性与oldvnode的text属性是否相同\",{\"1\":{\"1789\":1}}],[\"vnode的子节点与oldvnode的子节点是否都存在\",{\"1\":{\"1789\":1}}],[\"vnode与oldvnode是否都是静态节点\",{\"1\":{\"1789\":1}}],[\"vnode与oldvnode是否完全一样\",{\"1\":{\"1789\":1}}],[\"vnode为一个对象\",{\"1\":{\"1789\":1}}],[\"vnode类中包含了描述一个真实dom节点所需要的一系列属性\",{\"1\":{\"1788\":1}}],[\"vnodecomponentoptions\",{\"1\":{\"1788\":1,\"1802\":5,\"1864\":5}}],[\"vnode对应的组件实例或dom元素\",{\"1\":{\"1428\":1}}],[\"vnodewithdata\",{\"1\":{\"1428\":5}}],[\"vnodedata\",{\"1\":{\"1358\":1,\"1788\":1,\"1802\":1}}],[\"vnode\",{\"0\":{\"1833\":1,\"1834\":1,\"1835\":1},\"1\":{\"483\":14,\"1358\":5,\"1392\":1,\"1407\":2,\"1423\":5,\"1428\":13,\"1446\":9,\"1494\":5,\"1782\":1,\"1788\":2,\"1789\":49,\"1797\":4,\"1802\":6,\"1806\":1,\"1807\":1,\"1825\":2,\"1834\":8,\"1835\":4,\"1838\":2,\"1841\":2,\"1842\":2,\"1862\":12,\"1865\":2,\"1866\":4,\"1878\":10,\"1879\":11,\"1944\":22,\"1948\":12,\"1949\":1,\"1950\":3,\"1951\":7,\"1954\":8,\"1956\":1,\"1962\":6,\"1965\":1,\"1966\":1,\"1997\":10,\"1998\":2,\"2000\":2,\"2001\":2,\"2002\":8,\"2003\":1,\"2070\":4}}],[\"v=1\",{\"1\":{\"1543\":3}}],[\"v3\",{\"1\":{\"1475\":1,\"1483\":1,\"1485\":1}}],[\"vc\",{\"1\":{\"1423\":1}}],[\"vmcount\",{\"1\":{\"1784\":1,\"1785\":1,\"1786\":2,\"1807\":1}}],[\"vm\",{\"0\":{\"1349\":1,\"1810\":1,\"1814\":1,\"1815\":1,\"1816\":1,\"1817\":1,\"1821\":1,\"1822\":1},\"1\":{\"1354\":4,\"1360\":3,\"1366\":5,\"1368\":4,\"1376\":1,\"1380\":2,\"1383\":2,\"1396\":8,\"1413\":1,\"1415\":2,\"1423\":1,\"1427\":1,\"1428\":2,\"1430\":4,\"1446\":7,\"1450\":1,\"1494\":2,\"1784\":1,\"1799\":30,\"1800\":17,\"1802\":12,\"1803\":14,\"1804\":62,\"1806\":16,\"1807\":22,\"1809\":1,\"1810\":4,\"1813\":2,\"1814\":4,\"1815\":5,\"1816\":9,\"1817\":5,\"1818\":2,\"1821\":3,\"1834\":2,\"1836\":8,\"1838\":2,\"1854\":2,\"1855\":3,\"1861\":2,\"1862\":11,\"1864\":4,\"1865\":2,\"2031\":7}}],[\"void>\",{\"1\":{\"2060\":1,\"2061\":1}}],[\"void\",{\"1\":{\"1358\":2,\"1788\":1,\"1791\":1,\"1793\":1,\"1796\":1,\"1802\":2,\"2043\":1,\"2058\":2,\"2061\":2,\"2084\":3}}],[\"vo\",{\"1\":{\"1015\":2}}],[\"volumechange\",{\"1\":{\"752\":1}}],[\"volume\",{\"1\":{\"750\":3,\"752\":1}}],[\"vh\",{\"1\":{\"534\":1}}],[\"vw\",{\"1\":{\"534\":1,\"650\":2}}],[\"vscode\",{\"1\":{\"289\":1,\"1324\":1,\"2040\":1}}],[\"vs\",{\"1\":{\"222\":1,\"223\":1,\"1519\":1}}],[\"v\",{\"0\":{\"1348\":1,\"1355\":1,\"1356\":1,\"1388\":1,\"1389\":1,\"1399\":1,\"1400\":1,\"1401\":1,\"1402\":1,\"1403\":1},\"1\":{\"62\":1,\"331\":1,\"384\":1,\"995\":2,\"1058\":2,\"1186\":2,\"1187\":2,\"1352\":1,\"1353\":5,\"1356\":5,\"1357\":8,\"1358\":6,\"1388\":5,\"1389\":1,\"1392\":5,\"1393\":2,\"1397\":1,\"1399\":1,\"1400\":3,\"1401\":3,\"1402\":1,\"1404\":13,\"1407\":4,\"1429\":1,\"1433\":7,\"1437\":1,\"1441\":9,\"1446\":3,\"1480\":1,\"1507\":1,\"1515\":1,\"1516\":2,\"1519\":11,\"1772\":2,\"1791\":3,\"1795\":9,\"1796\":2,\"1797\":7,\"1801\":1,\"1802\":1,\"1890\":1,\"1930\":4,\"1936\":3,\"1937\":3,\"1938\":3,\"1956\":3,\"2020\":3,\"2045\":3}}],[\"vant\",{\"1\":{\"1470\":1}}],[\"val\",{\"1\":{\"1059\":4,\"1205\":4,\"1396\":2,\"1785\":1,\"1786\":10,\"1930\":8,\"1931\":9,\"1932\":8,\"1936\":2,\"1937\":2,\"2012\":2,\"2019\":2,\"2031\":5}}],[\"validdivisioncharre\",{\"1\":{\"1794\":1}}],[\"valid\",{\"1\":{\"759\":1,\"948\":4,\"2075\":9}}],[\"validity\",{\"1\":{\"759\":1}}],[\"validatecomponentname\",{\"1\":{\"1825\":1,\"1828\":1}}],[\"validateprop\",{\"1\":{\"1804\":1,\"1838\":1}}],[\"validate实际上是一个函数\",{\"1\":{\"198\":1}}],[\"validate\",{\"1\":{\"198\":1}}],[\"valuecontainer\",{\"1\":{\"2058\":1}}],[\"valuecontainer<t>\",{\"1\":{\"2058\":1}}],[\"valuecontainer<stateentry>\",{\"1\":{\"2057\":1,\"2058\":1,\"2060\":1}}],[\"valuecontainer<historylocation>\",{\"1\":{\"2057\":1,\"2058\":1,\"2060\":1,\"2061\":1}}],[\"value为其索引\",{\"1\":{\"1969\":1}}],[\"value++\",{\"1\":{\"1943\":1}}],[\"value3\",{\"1\":{\"1932\":1}}],[\"value中\",{\"1\":{\"1849\":1}}],[\"value值的形式\",{\"1\":{\"1803\":1}}],[\"value时\",{\"1\":{\"1786\":1}}],[\"value或删除一对已有的key\",{\"1\":{\"1786\":1}}],[\"value都会通过props传给detail组件\",{\"1\":{\"1462\":1}}],[\"value的组合最终都会通过props传给detail组件\",{\"1\":{\"1462\":1}}],[\"valuearray\",{\"1\":{\"925\":3}}],[\"valueof\",{\"1\":{\"877\":4,\"925\":6,\"978\":1}}],[\"value我们可以查看到\",{\"1\":{\"794\":1}}],[\"value和number\",{\"1\":{\"794\":1}}],[\"valuemissing\",{\"1\":{\"760\":1}}],[\"valuenow=\",{\"1\":{\"681\":1}}],[\"value=\",{\"1\":{\"670\":6,\"672\":1,\"674\":1,\"681\":1,\"696\":3,\"697\":4,\"1160\":2,\"1161\":3,\"1162\":1,\"1356\":1,\"1357\":5,\"1358\":2}}],[\"valuesiterationmethod\",{\"1\":{\"1932\":2}}],[\"values\",{\"0\":{\"1061\":1,\"1932\":1},\"1\":{\"393\":1,\"830\":3,\"846\":3,\"863\":3,\"870\":2,\"871\":1,\"1061\":1,\"1921\":1,\"1926\":3,\"1932\":5}}],[\"value\",{\"1\":{\"35\":2,\"155\":4,\"237\":3,\"405\":1,\"438\":1,\"493\":5,\"494\":4,\"670\":3,\"681\":1,\"696\":3,\"730\":3,\"742\":1,\"756\":3,\"794\":2,\"830\":1,\"865\":2,\"985\":3,\"1059\":1,\"1060\":2,\"1067\":1,\"1160\":2,\"1161\":3,\"1186\":3,\"1187\":4,\"1205\":3,\"1261\":8,\"1276\":2,\"1353\":5,\"1356\":3,\"1357\":8,\"1358\":17,\"1364\":4,\"1365\":2,\"1368\":6,\"1370\":4,\"1376\":2,\"1396\":2,\"1397\":4,\"1407\":11,\"1430\":1,\"1436\":2,\"1451\":6,\"1455\":3,\"1487\":2,\"1491\":2,\"1492\":3,\"1493\":2,\"1496\":2,\"1498\":1,\"1499\":2,\"1502\":1,\"1507\":3,\"1584\":2,\"1678\":2,\"1772\":3,\"1777\":11,\"1784\":5,\"1785\":16,\"1786\":4,\"1792\":4,\"1797\":1,\"1802\":2,\"1803\":1,\"1804\":7,\"1810\":1,\"1838\":2,\"1847\":1,\"1849\":1,\"1855\":9,\"1896\":23,\"1897\":9,\"1926\":8,\"1929\":16,\"1930\":1,\"1931\":20,\"1932\":8,\"1936\":5,\"1937\":5,\"1938\":20,\"1943\":2,\"1948\":1,\"1949\":8,\"1975\":5,\"1978\":2,\"1979\":2,\"1986\":7,\"2001\":1,\"2002\":1,\"2019\":3,\"2020\":1,\"2034\":5,\"2035\":7,\"2044\":3,\"2045\":4,\"2047\":8,\"2053\":2,\"2055\":4,\"2057\":3,\"2058\":17,\"2061\":12,\"2065\":7,\"2066\":1,\"2068\":6,\"2069\":6,\"2070\":2}}],[\"variavleobject\",{\"1\":{\"1015\":3}}],[\"variables\",{\"1\":{\"1300\":3,\"1308\":1,\"1328\":2}}],[\"variableobject\",{\"1\":{\"1015\":3}}],[\"variable\",{\"1\":{\"779\":1,\"1015\":1,\"1273\":2}}],[\"various\",{\"1\":{\"377\":1,\"772\":1}}],[\"var\",{\"0\":{\"781\":1,\"986\":1,\"987\":1},\"1\":{\"35\":1,\"37\":5,\"44\":1,\"49\":6,\"52\":1,\"59\":1,\"71\":1,\"155\":1,\"350\":1,\"449\":2,\"453\":1,\"466\":1,\"486\":3,\"487\":2,\"488\":1,\"685\":2,\"704\":4,\"713\":2,\"725\":1,\"726\":1,\"732\":3,\"777\":1,\"779\":1,\"781\":1,\"782\":4,\"786\":3,\"821\":1,\"840\":1,\"842\":1,\"900\":1,\"901\":1,\"928\":1,\"929\":1,\"938\":1,\"939\":1,\"940\":1,\"948\":8,\"958\":9,\"978\":2,\"980\":5,\"981\":5,\"982\":4,\"983\":8,\"984\":5,\"985\":4,\"987\":1,\"991\":1,\"992\":1,\"995\":30,\"996\":4,\"1012\":4,\"1015\":6,\"1021\":4,\"1023\":2,\"1025\":7,\"1028\":4,\"1029\":2,\"1030\":6,\"1045\":1,\"1046\":1,\"1047\":4,\"1048\":2,\"1049\":2,\"1061\":1,\"1069\":1,\"1070\":1,\"1071\":1,\"1072\":1,\"1086\":5,\"1111\":5,\"1124\":1,\"1161\":2,\"1162\":1,\"1182\":3,\"1329\":6,\"1559\":3,\"1612\":1,\"1825\":1}}],[\"v8引擎对象存储的优化\",{\"0\":{\"1563\":1}}],[\"v8引擎\",{\"2\":{\"1550\":1}}],[\"v8\",{\"1\":{\"24\":7,\"215\":1}}],[\"vip\",{\"1\":{\"1181\":1,\"1584\":1,\"1585\":1,\"1586\":1}}],[\"viper\",{\"1\":{\"747\":3}}],[\"villain\",{\"1\":{\"895\":1}}],[\"visual\",{\"1\":{\"648\":2}}],[\"visible\",{\"0\":{\"1132\":1},\"1\":{\"548\":1,\"557\":2,\"1203\":1}}],[\"visibilitychange\",{\"1\":{\"1132\":3}}],[\"visibility\",{\"1\":{\"548\":2,\"617\":1}}],[\"visited\",{\"1\":{\"520\":1}}],[\"viewcomponent\",{\"1\":{\"2070\":5}}],[\"viewref\",{\"1\":{\"2068\":1,\"2069\":3,\"2070\":1}}],[\"viewdepthkey\",{\"1\":{\"2068\":2}}],[\"view组件\",{\"1\":{\"2031\":1}}],[\"view>在渲染的时候\",{\"1\":{\"2031\":1}}],[\"view>\",{\"1\":{\"1456\":1,\"1465\":2,\"2026\":1,\"2031\":9,\"2034\":1,\"2068\":2}}],[\"view><\",{\"1\":{\"1456\":1,\"1465\":2,\"2068\":2}}],[\"viewmodel\",{\"0\":{\"1349\":1}}],[\"viewheight\",{\"1\":{\"478\":2}}],[\"views\",{\"1\":{\"329\":3,\"332\":3,\"2025\":2,\"2041\":1}}],[\"view\",{\"0\":{\"1348\":1,\"2031\":1},\"1\":{\"329\":1,\"331\":3,\"1669\":1,\"2031\":2,\"2034\":2,\"2068\":12}}],[\"viewport\",{\"0\":{\"647\":1},\"1\":{\"287\":2,\"329\":1,\"580\":1,\"648\":3,\"649\":1,\"764\":1,\"773\":1}}],[\"videoheight\",{\"1\":{\"750\":1}}],[\"videowidth\",{\"1\":{\"750\":1}}],[\"video>\",{\"1\":{\"747\":1}}],[\"video\",{\"0\":{\"748\":1},\"1\":{\"293\":1,\"294\":1,\"747\":2}}],[\"vitejs\",{\"1\":{\"1483\":1,\"2053\":1}}],[\"vite\",{\"0\":{\"1483\":1},\"1\":{\"119\":1,\"1425\":1,\"1483\":5,\"2008\":1,\"2053\":3}}],[\"vi\",{\"1\":{\"15\":1}}],[\"vue生态\",{\"2\":{\"2023\":1,\"2037\":1,\"2086\":1}}],[\"vue+typescript\",{\"1\":{\"2008\":1}}],[\"vue实例\",{\"1\":{\"1834\":2}}],[\"vue实例就进入了销毁阶段\",{\"1\":{\"1807\":1}}],[\"vue文件内部的模板会在构建时预编译成渲染函数\",{\"1\":{\"1805\":1}}],[\"vue源码构建有两种版本\",{\"1\":{\"1805\":1}}],[\"vue在模板编译后\",{\"1\":{\"1789\":1}}],[\"vue增加了两个全局\",{\"1\":{\"1786\":1}}],[\"vue2中使用的是dep\",{\"1\":{\"1888\":1}}],[\"vue2源码\",{\"0\":{\"1831\":1}}],[\"vue2源码理解\",{\"0\":{\"1782\":1}}],[\"vue2\",{\"0\":{\"1490\":1,\"2119\":1},\"1\":{\"1485\":2,\"1486\":2,\"1496\":1,\"1497\":1,\"1499\":1,\"1500\":3,\"1501\":1,\"1514\":1,\"1519\":1,\"1886\":1,\"1889\":1,\"1890\":1,\"1891\":1,\"1954\":1,\"1966\":1,\"2000\":1,\"2002\":2,\"2003\":1,\"2016\":2,\"2063\":4}}],[\"vue2基础\",{\"0\":{\"1344\":1}}],[\"vue为undefined\",{\"1\":{\"1484\":1}}],[\"vuejs\",{\"1\":{\"1475\":1,\"1482\":1,\"1483\":1,\"1485\":1,\"1804\":1,\"2040\":1,\"2041\":1,\"2047\":1,\"2065\":1}}],[\"vuerouter\",{\"0\":{\"2027\":1},\"1\":{\"1456\":3,\"2025\":3,\"2026\":4,\"2027\":2,\"2028\":1}}],[\"vue3+vite\",{\"0\":{\"2008\":1}}],[\"vue3挂载流程\",{\"0\":{\"1996\":1}}],[\"vue3响应式总结\",{\"0\":{\"1982\":1}}],[\"vue3和vue2的不同点较多\",{\"1\":{\"1485\":1}}],[\"vue3基础\",{\"0\":{\"1474\":1}}],[\"vue3\",{\"0\":{\"1475\":1,\"1476\":1,\"1481\":1,\"1484\":1,\"1489\":1,\"1491\":1,\"1870\":1,\"1876\":1,\"2120\":1},\"1\":{\"1446\":1,\"1479\":1,\"1485\":1,\"1486\":1,\"1487\":1,\"1494\":1,\"1499\":1,\"1500\":3,\"1514\":1,\"1518\":1,\"1519\":1,\"1877\":1,\"1886\":1,\"1936\":1,\"1937\":1,\"1954\":1,\"2002\":1,\"2008\":1,\"2016\":2,\"2035\":2,\"2047\":1,\"2062\":1,\"2063\":5}}],[\"vue1\",{\"1\":{\"1445\":1}}],[\"vue会将\",{\"1\":{\"1433\":1}}],[\"vue的全局配置文件\",{\"1\":{\"1427\":1}}],[\"vue的时候传入components选项\",{\"1\":{\"1416\":1}}],[\"vuecomponent的实例对象\",{\"1\":{\"1423\":1}}],[\"vuecomponent\",{\"0\":{\"1423\":1},\"1\":{\"1423\":2,\"1424\":2,\"1825\":2}}],[\"vue时就传入要监测的数据\",{\"1\":{\"1396\":1}}],[\"vue时候配置\",{\"1\":{\"1360\":1}}],[\"vuex\",{\"0\":{\"1450\":1},\"1\":{\"25\":1,\"1450\":4,\"1451\":6,\"1452\":1,\"1454\":1,\"2006\":2,\"2016\":1}}],[\"vue\",{\"0\":{\"1345\":1,\"1350\":1,\"1351\":1,\"1366\":1,\"1396\":1,\"1409\":1,\"1411\":1,\"1425\":1,\"1441\":1,\"1442\":1,\"1443\":1,\"1469\":1,\"1482\":1,\"1824\":1,\"1825\":1,\"1826\":1,\"1827\":1,\"1871\":1,\"2024\":1,\"2038\":1,\"2114\":1,\"2121\":1},\"1\":{\"12\":1,\"25\":1,\"219\":1,\"1348\":1,\"1349\":2,\"1350\":6,\"1352\":1,\"1353\":3,\"1354\":1,\"1356\":1,\"1357\":1,\"1358\":2,\"1360\":1,\"1362\":2,\"1368\":2,\"1370\":2,\"1379\":1,\"1383\":2,\"1388\":1,\"1392\":1,\"1393\":1,\"1394\":2,\"1396\":6,\"1397\":4,\"1401\":1,\"1406\":4,\"1407\":4,\"1411\":2,\"1415\":2,\"1416\":2,\"1419\":1,\"1421\":1,\"1422\":2,\"1423\":5,\"1424\":3,\"1425\":2,\"1426\":3,\"1427\":16,\"1429\":2,\"1430\":1,\"1431\":3,\"1432\":9,\"1433\":1,\"1438\":2,\"1439\":1,\"1445\":2,\"1448\":3,\"1450\":4,\"1451\":3,\"1456\":3,\"1467\":1,\"1475\":2,\"1482\":9,\"1484\":4,\"1485\":2,\"1486\":1,\"1493\":3,\"1496\":1,\"1498\":2,\"1499\":4,\"1507\":1,\"1516\":2,\"1518\":12,\"1782\":3,\"1784\":1,\"1785\":1,\"1786\":9,\"1789\":1,\"1792\":1,\"1799\":5,\"1800\":2,\"1804\":2,\"1805\":3,\"1806\":1,\"1807\":4,\"1808\":1,\"1810\":1,\"1814\":1,\"1815\":1,\"1816\":1,\"1817\":1,\"1821\":2,\"1824\":6,\"1825\":5,\"1826\":2,\"1827\":3,\"1828\":3,\"1834\":5,\"1835\":2,\"1836\":3,\"1838\":1,\"1840\":4,\"1845\":1,\"1862\":1,\"1863\":1,\"1864\":1,\"1867\":3,\"1870\":1,\"1872\":1,\"1874\":1,\"1877\":2,\"1900\":1,\"1935\":1,\"1936\":2,\"1938\":1,\"1972\":1,\"1974\":2,\"1975\":2,\"1979\":1,\"1997\":1,\"1998\":2,\"2003\":1,\"2010\":2,\"2016\":6,\"2019\":1,\"2024\":1,\"2025\":8,\"2026\":10,\"2029\":5,\"2031\":6,\"2032\":1,\"2034\":3,\"2035\":1,\"2038\":1,\"2040\":4,\"2041\":2,\"2044\":1,\"2047\":21,\"2061\":1,\"2063\":7,\"2065\":2,\"2068\":1,\"2069\":2,\"2070\":4,\"2071\":1},\"2\":{\"1473\":1,\"1521\":1,\"1830\":1,\"1869\":1,\"1883\":1,\"1899\":1,\"1934\":1,\"1940\":1,\"1958\":1,\"1971\":1,\"1981\":1,\"1995\":1,\"2005\":1}}],[\"lcoation\",{\"1\":{\"2058\":1}}],[\"lr=lr\",{\"1\":{\"1680\":1}}],[\"lr=0\",{\"1\":{\"1659\":1}}],[\"lr\",{\"1\":{\"1659\":3,\"1680\":1}}],[\"l表示renderlist\",{\"1\":{\"1392\":1}}],[\"llo\",{\"1\":{\"891\":12}}],[\"ln2\",{\"1\":{\"879\":1}}],[\"ln10\",{\"1\":{\"879\":1}}],[\"lucy\",{\"1\":{\"779\":2,\"828\":2,\"848\":3,\"849\":2,\"863\":7}}],[\"lt\",{\"1\":{\"658\":1,\"1203\":1}}],[\"l\",{\"1\":{\"535\":1,\"849\":2,\"854\":3,\"856\":4,\"889\":1,\"890\":2,\"1392\":1,\"1680\":6,\"1785\":4,\"1792\":3,\"1795\":8,\"1797\":1,\"1814\":2,\"1815\":2,\"1816\":2}}],[\"l→e→g→b\",{\"1\":{\"402\":1}}],[\"lax\",{\"1\":{\"2088\":3}}],[\"landscape\",{\"1\":{\"1316\":2}}],[\"lang\",{\"0\":{\"1434\":1}}],[\"lang=\",{\"1\":{\"287\":2,\"329\":1,\"580\":1,\"657\":1,\"692\":1,\"770\":2,\"1139\":1,\"1140\":1}}],[\"language\",{\"1\":{\"269\":1,\"1091\":1,\"1613\":1}}],[\"large\",{\"1\":{\"1275\":1}}],[\"layer\",{\"1\":{\"1661\":1,\"1662\":2,\"1663\":6,\"1670\":7,\"1671\":5,\"2091\":2}}],[\"layery\",{\"1\":{\"1153\":1}}],[\"layerx\",{\"1\":{\"1153\":1}}],[\"layout\",{\"1\":{\"648\":4,\"1527\":2}}],[\"latest\",{\"1\":{\"1483\":1,\"2008\":1}}],[\"later\",{\"1\":{\"1105\":4}}],[\"latitude\",{\"1\":{\"1101\":1,\"1102\":2}}],[\"lazy<any>\",{\"1\":{\"2072\":2,\"2076\":1}}],[\"lazy为true\",{\"1\":{\"1847\":1}}],[\"lazy\",{\"1\":{\"908\":1,\"1356\":1,\"1357\":1,\"1784\":2,\"1804\":1,\"1847\":4,\"1894\":5,\"1895\":1,\"1896\":5,\"1897\":5,\"1984\":2,\"1986\":2,\"1987\":1}}],[\"lazyload\",{\"1\":{\"478\":2}}],[\"labels\",{\"1\":{\"1655\":2,\"1659\":2}}],[\"label>\",{\"1\":{\"1231\":3}}],[\"label\",{\"1\":{\"756\":1,\"824\":3,\"1655\":2}}],[\"lastfilterindex\",{\"1\":{\"1794\":5}}],[\"lasttag表示当前html字符串没有父节点\",{\"1\":{\"1792\":1}}],[\"lasttag\",{\"1\":{\"1792\":9}}],[\"last=false\",{\"1\":{\"1655\":1}}],[\"lastname\",{\"1\":{\"1376\":3,\"1496\":3,\"1825\":2}}],[\"lastchild\",{\"1\":{\"1112\":1}}],[\"lastparen\",{\"1\":{\"924\":2}}],[\"lastmatch\",{\"1\":{\"924\":2}}],[\"lastmodifieddate\",{\"1\":{\"772\":6}}],[\"lastindex表示下一次开始搜索的索引值\",{\"1\":{\"1793\":1}}],[\"lastindex\",{\"1\":{\"923\":8,\"925\":2,\"1793\":7,\"1962\":5}}],[\"lastindexof\",{\"1\":{\"856\":1,\"890\":2,\"1924\":1,\"1993\":2}}],[\"last\",{\"1\":{\"520\":2,\"933\":1,\"1203\":1,\"1204\":1,\"1534\":2,\"1613\":1,\"1655\":2,\"1792\":3,\"1807\":1}}],[\"lambda\",{\"1\":{\"402\":5}}],[\"ljust\",{\"1\":{\"386\":1}}],[\"legend=\",{\"1\":{\"1680\":1}}],[\"legb\",{\"1\":{\"402\":1}}],[\"level\",{\"1\":{\"1586\":1}}],[\"leavingrecords\",{\"1\":{\"2072\":3,\"2073\":5,\"2074\":3,\"2078\":2}}],[\"leaveguards\",{\"1\":{\"2069\":5,\"2072\":1,\"2078\":2}}],[\"leave\",{\"1\":{\"1441\":5,\"1519\":4}}],[\"leaner\",{\"1\":{\"1324\":1}}],[\"leak\",{\"1\":{\"1027\":1}}],[\"learning\",{\"1\":{\"666\":1}}],[\"leon\",{\"1\":{\"422\":7}}],[\"leftcontext\",{\"1\":{\"924\":2}}],[\"left越大元素越靠右\",{\"1\":{\"569\":1}}],[\"left\",{\"1\":{\"414\":8,\"545\":1,\"546\":1,\"553\":6,\"554\":1,\"555\":1,\"560\":1,\"565\":1,\"569\":1,\"573\":4,\"574\":3,\"580\":10,\"582\":8,\"598\":2,\"602\":1,\"619\":1,\"625\":1,\"630\":1,\"636\":2,\"641\":1,\"643\":2,\"730\":2,\"764\":3,\"765\":1,\"1087\":6,\"1098\":1,\"1148\":1,\"1153\":1,\"1155\":2,\"1207\":3,\"1252\":2,\"1259\":1,\"1262\":2,\"1284\":3,\"1296\":2,\"1370\":1}}],[\"lenght\",{\"1\":{\"418\":1,\"1917\":1}}],[\"length是一个属性值\",{\"1\":{\"1927\":1}}],[\"length+1\",{\"1\":{\"1925\":1,\"1993\":1}}],[\"lengtheffects\",{\"1\":{\"1917\":3,\"1993\":3}}],[\"length的区别\",{\"1\":{\"951\":1}}],[\"length与arguments\",{\"1\":{\"951\":1}}],[\"length可以用来获取实参的长度\",{\"1\":{\"932\":1}}],[\"length属性相关联的副作用函数\",{\"1\":{\"1917\":1,\"1993\":1}}],[\"length属性\",{\"1\":{\"886\":1}}],[\"length>>>0\",{\"1\":{\"443\":1}}],[\"length\",{\"0\":{\"1916\":1,\"1918\":1},\"1\":{\"252\":1,\"271\":1,\"410\":3,\"411\":3,\"412\":2,\"413\":3,\"414\":5,\"415\":1,\"416\":1,\"417\":1,\"418\":1,\"419\":1,\"436\":3,\"438\":5,\"441\":4,\"452\":1,\"458\":2,\"463\":2,\"472\":1,\"478\":1,\"482\":2,\"486\":1,\"487\":2,\"498\":1,\"499\":4,\"772\":2,\"773\":1,\"790\":2,\"822\":2,\"835\":1,\"841\":2,\"846\":1,\"851\":3,\"857\":1,\"875\":2,\"932\":1,\"951\":5,\"995\":4,\"1015\":3,\"1038\":3,\"1039\":2,\"1096\":2,\"1120\":1,\"1194\":1,\"1202\":1,\"1446\":2,\"1769\":4,\"1777\":1,\"1785\":3,\"1786\":2,\"1789\":6,\"1792\":17,\"1793\":3,\"1794\":2,\"1795\":6,\"1796\":1,\"1803\":1,\"1804\":2,\"1807\":1,\"1814\":1,\"1815\":2,\"1816\":3,\"1822\":2,\"1890\":2,\"1891\":1,\"1893\":1,\"1894\":1,\"1895\":1,\"1906\":1,\"1915\":2,\"1916\":4,\"1917\":5,\"1918\":6,\"1920\":2,\"1925\":11,\"1955\":3,\"1961\":2,\"1962\":3,\"1965\":2,\"1966\":2,\"1968\":3,\"1969\":6,\"1974\":5,\"1976\":1,\"1977\":7,\"1978\":1,\"1979\":2,\"1984\":3,\"1993\":12,\"2029\":1,\"2048\":1,\"2058\":5,\"2065\":9,\"2073\":2,\"2075\":2}}],[\"len\",{\"1\":{\"414\":5,\"416\":8,\"443\":3,\"478\":2,\"482\":2,\"486\":7,\"1038\":1,\"1655\":4,\"1680\":1,\"2073\":2}}],[\"leehom\",{\"1\":{\"202\":1}}],[\"less|stylus|compass|sass\",{\"1\":{\"331\":1}}],[\"less\",{\"0\":{\"1323\":1},\"1\":{\"72\":1,\"87\":1,\"1324\":4,\"1328\":1,\"1331\":1,\"1341\":2,\"1434\":1}}],[\"lessnpm\",{\"1\":{\"72\":1}}],[\"let或者const不存在变量提升\",{\"1\":{\"939\":1}}],[\"letter\",{\"1\":{\"521\":1}}],[\"let\",{\"0\":{\"986\":1,\"988\":1},\"1\":{\"27\":3,\"28\":2,\"29\":1,\"30\":1,\"35\":4,\"41\":2,\"134\":2,\"191\":2,\"212\":2,\"239\":4,\"247\":1,\"251\":2,\"252\":1,\"258\":1,\"260\":1,\"262\":1,\"263\":3,\"264\":1,\"283\":1,\"284\":5,\"285\":1,\"287\":1,\"294\":7,\"313\":1,\"327\":2,\"329\":1,\"368\":1,\"410\":2,\"411\":3,\"412\":3,\"413\":4,\"414\":5,\"415\":1,\"416\":4,\"417\":2,\"418\":3,\"419\":5,\"424\":1,\"436\":1,\"438\":2,\"439\":2,\"441\":2,\"443\":1,\"456\":2,\"460\":1,\"461\":1,\"469\":1,\"472\":2,\"474\":1,\"478\":1,\"480\":2,\"482\":6,\"491\":1,\"493\":1,\"494\":1,\"496\":3,\"498\":1,\"499\":3,\"504\":1,\"727\":3,\"740\":14,\"765\":9,\"769\":4,\"770\":3,\"772\":5,\"773\":1,\"777\":1,\"779\":3,\"780\":3,\"781\":1,\"785\":1,\"786\":3,\"789\":17,\"790\":4,\"792\":8,\"793\":2,\"794\":4,\"795\":1,\"796\":1,\"797\":1,\"798\":1,\"805\":1,\"806\":13,\"808\":4,\"809\":4,\"810\":1,\"822\":4,\"827\":3,\"828\":23,\"829\":1,\"830\":25,\"831\":2,\"832\":12,\"833\":3,\"834\":1,\"835\":3,\"836\":10,\"841\":2,\"842\":2,\"843\":4,\"844\":3,\"845\":1,\"846\":14,\"847\":5,\"848\":8,\"849\":7,\"851\":3,\"853\":5,\"854\":21,\"855\":5,\"856\":3,\"860\":2,\"861\":5,\"862\":4,\"863\":9,\"864\":7,\"865\":9,\"868\":4,\"869\":2,\"870\":8,\"871\":4,\"872\":1,\"874\":2,\"876\":5,\"877\":3,\"881\":2,\"882\":1,\"883\":2,\"888\":2,\"889\":7,\"890\":1,\"891\":10,\"892\":1,\"895\":1,\"896\":4,\"897\":4,\"901\":2,\"907\":2,\"908\":2,\"911\":8,\"912\":6,\"916\":2,\"917\":4,\"918\":21,\"923\":3,\"924\":4,\"925\":22,\"931\":1,\"932\":1,\"934\":2,\"935\":2,\"939\":3,\"940\":1,\"941\":6,\"943\":4,\"944\":2,\"945\":10,\"946\":6,\"947\":2,\"948\":2,\"950\":1,\"951\":1,\"952\":4,\"953\":8,\"958\":1,\"967\":1,\"989\":1,\"993\":1,\"1015\":1,\"1035\":1,\"1036\":1,\"1038\":4,\"1040\":1,\"1053\":5,\"1055\":3,\"1056\":2,\"1057\":4,\"1058\":4,\"1059\":1,\"1060\":2,\"1063\":4,\"1064\":2,\"1065\":2,\"1066\":2,\"1067\":2,\"1086\":3,\"1088\":10,\"1091\":1,\"1093\":1,\"1094\":3,\"1096\":1,\"1102\":2,\"1104\":2,\"1105\":2,\"1112\":8,\"1120\":4,\"1123\":4,\"1124\":1,\"1137\":1,\"1143\":1,\"1144\":2,\"1145\":1,\"1146\":4,\"1148\":1,\"1152\":3,\"1154\":2,\"1155\":4,\"1156\":5,\"1158\":2,\"1161\":2,\"1186\":1,\"1187\":1,\"1188\":1,\"1194\":2,\"1199\":1,\"1201\":7,\"1204\":1,\"1205\":2,\"1208\":6,\"1214\":1,\"1216\":1,\"1238\":1,\"1239\":5,\"1354\":1,\"1364\":2,\"1365\":2,\"1396\":2,\"1446\":1,\"1486\":2,\"1488\":1,\"1493\":4,\"1496\":2,\"1507\":3,\"1508\":1,\"1578\":2,\"1581\":1,\"1582\":2,\"1769\":2,\"1772\":1,\"1777\":1,\"1778\":4,\"1779\":1,\"1785\":4,\"1789\":11,\"1792\":9,\"1793\":2,\"1794\":11,\"1795\":4,\"1796\":2,\"1799\":1,\"1800\":1,\"1802\":1,\"1803\":2,\"1804\":3,\"1805\":1,\"1806\":1,\"1807\":1,\"1814\":1,\"1815\":2,\"1816\":3,\"1822\":4,\"1888\":1,\"1889\":4,\"1890\":5,\"1891\":1,\"1896\":6,\"1897\":9,\"1923\":1,\"1924\":1,\"1925\":4,\"1949\":1,\"1954\":3,\"1955\":1,\"1961\":3,\"1962\":6,\"1965\":8,\"1966\":10,\"1968\":5,\"1969\":12,\"1974\":1,\"1976\":1,\"1977\":7,\"1979\":1,\"1984\":3,\"1985\":2,\"1986\":2,\"1987\":4,\"1993\":3,\"2016\":1,\"2019\":2,\"2020\":2,\"2021\":1,\"2029\":1,\"2031\":1,\"2034\":1,\"2041\":1,\"2043\":1,\"2047\":1,\"2058\":2,\"2060\":3,\"2061\":5,\"2068\":2,\"2072\":2,\"2073\":1,\"2074\":1,\"2075\":1}}],[\"ls\",{\"1\":{\"69\":1}}],[\"lorem\",{\"1\":{\"2101\":1}}],[\"loss\",{\"1\":{\"1659\":3,\"1680\":4}}],[\"long\",{\"0\":{\"1646\":1}}],[\"longitude\",{\"1\":{\"1101\":1,\"1102\":2}}],[\"looseindexof\",{\"1\":{\"1797\":1}}],[\"looseequal\",{\"1\":{\"1797\":1}}],[\"lookup\",{\"1\":{\"1825\":1}}],[\"look\",{\"1\":{\"1023\":3}}],[\"loop的机制\",{\"1\":{\"491\":1}}],[\"loopcount\",{\"1\":{\"480\":2}}],[\"loop\",{\"1\":{\"408\":3,\"480\":3,\"668\":1,\"748\":1,\"749\":1,\"1784\":1}}],[\"lowercasedtagname\",{\"1\":{\"1792\":5}}],[\"lowercasedtag\",{\"1\":{\"1792\":2}}],[\"low=\",{\"1\":{\"696\":2}}],[\"low\",{\"1\":{\"696\":2}}],[\"loaded\",{\"1\":{\"1150\":1}}],[\"loadedmetadata\",{\"1\":{\"752\":1}}],[\"loadeddata\",{\"1\":{\"752\":1}}],[\"loader或vueify时\",{\"1\":{\"1805\":1}}],[\"loader\",{\"0\":{\"137\":1,\"138\":1,\"150\":1,\"156\":1},\"1\":{\"138\":17,\"142\":20,\"149\":5,\"150\":4,\"154\":2,\"156\":5,\"159\":1,\"377\":1,\"1427\":1,\"1434\":1,\"1655\":4,\"1659\":1,\"1867\":2}}],[\"load\",{\"0\":{\"1230\":1},\"1\":{\"404\":2,\"479\":1,\"751\":2,\"1226\":1,\"1230\":1,\"1530\":1,\"1673\":6,\"1674\":1}}],[\"loadstart\",{\"1\":{\"752\":1}}],[\"loads\",{\"1\":{\"404\":1}}],[\"love\",{\"1\":{\"264\":1,\"286\":1}}],[\"locator\",{\"1\":{\"1626\":1}}],[\"locationquery\",{\"1\":{\"2065\":1}}],[\"locationasobject\",{\"1\":{\"2041\":1,\"2046\":1}}],[\"location调用的是同一个对象\",{\"1\":{\"1092\":1}}],[\"location和document\",{\"1\":{\"1092\":1}}],[\"location\",{\"0\":{\"1092\":1,\"2051\":1},\"1\":{\"1083\":1,\"1092\":3,\"1093\":4,\"1094\":9,\"2029\":7,\"2034\":4,\"2040\":1,\"2044\":4,\"2047\":16,\"2049\":1,\"2050\":2,\"2051\":2,\"2053\":6,\"2055\":6,\"2057\":5,\"2058\":27,\"2059\":1,\"2061\":6}}],[\"localhost\",{\"1\":{\"1444\":1,\"1445\":5,\"1592\":1,\"1600\":2,\"2030\":2}}],[\"localvalue\",{\"1\":{\"1358\":1}}],[\"localstate\",{\"1\":{\"2021\":2}}],[\"localstorage\",{\"1\":{\"360\":1,\"768\":5,\"769\":14,\"770\":9,\"1436\":2,\"1467\":2,\"2088\":2}}],[\"locals=none\",{\"1\":{\"402\":1}}],[\"local\",{\"1\":{\"390\":1,\"402\":5,\"403\":1,\"404\":4,\"405\":18,\"408\":4,\"634\":1,\"757\":1}}],[\"localrequire\",{\"1\":{\"155\":2}}],[\"lock\",{\"1\":{\"66\":1,\"74\":1,\"89\":2,\"408\":3,\"1370\":1,\"1427\":1,\"2040\":1}}],[\"lodash\",{\"0\":{\"2117\":1},\"1\":{\"59\":1,\"1767\":1},\"2\":{\"1771\":1}}],[\"logged\",{\"1\":{\"2065\":1}}],[\"logicalydpi\",{\"1\":{\"1098\":1}}],[\"logicalxdpi\",{\"1\":{\"1098\":1}}],[\"loginpwd=123123\",{\"1\":{\"1634\":1}}],[\"loginpwd\",{\"1\":{\"1630\":1,\"1634\":3}}],[\"loginid=admin\",{\"1\":{\"1634\":1}}],[\"loginid\",{\"1\":{\"1630\":1,\"1634\":2}}],[\"login\",{\"1\":{\"91\":1,\"285\":2,\"304\":1,\"317\":1,\"355\":3,\"1630\":1}}],[\"log10e\",{\"1\":{\"879\":1}}],[\"log2e\",{\"1\":{\"879\":1}}],[\"logout\",{\"1\":{\"355\":1}}],[\"logo\",{\"1\":{\"268\":2,\"292\":2,\"1331\":2,\"1427\":1}}],[\"log\",{\"1\":{\"15\":1,\"27\":3,\"28\":4,\"29\":4,\"30\":3,\"35\":5,\"71\":2,\"124\":3,\"134\":1,\"148\":2,\"149\":2,\"156\":2,\"191\":4,\"200\":3,\"201\":2,\"203\":4,\"205\":2,\"206\":4,\"207\":4,\"209\":1,\"210\":1,\"211\":1,\"212\":5,\"236\":1,\"239\":1,\"244\":1,\"245\":2,\"246\":1,\"250\":2,\"252\":3,\"254\":1,\"255\":3,\"257\":2,\"258\":2,\"259\":5,\"260\":1,\"262\":1,\"264\":11,\"273\":1,\"282\":5,\"283\":2,\"284\":8,\"285\":1,\"287\":2,\"294\":2,\"301\":1,\"304\":1,\"305\":8,\"313\":1,\"314\":2,\"316\":1,\"317\":3,\"321\":1,\"327\":1,\"329\":1,\"349\":2,\"350\":2,\"355\":2,\"368\":2,\"422\":4,\"429\":1,\"433\":2,\"439\":2,\"449\":3,\"471\":1,\"476\":1,\"482\":1,\"486\":6,\"487\":4,\"488\":4,\"498\":1,\"501\":1,\"685\":2,\"769\":6,\"770\":5,\"772\":1,\"777\":1,\"779\":1,\"780\":1,\"782\":2,\"783\":3,\"786\":7,\"789\":18,\"790\":8,\"792\":2,\"793\":1,\"794\":6,\"795\":8,\"796\":5,\"797\":2,\"798\":4,\"803\":6,\"805\":5,\"806\":7,\"808\":9,\"809\":11,\"810\":10,\"812\":8,\"814\":2,\"822\":2,\"828\":24,\"829\":3,\"830\":22,\"831\":2,\"832\":16,\"833\":3,\"834\":2,\"835\":2,\"836\":4,\"842\":2,\"843\":1,\"844\":2,\"845\":1,\"846\":7,\"847\":7,\"848\":4,\"849\":3,\"851\":3,\"853\":6,\"854\":19,\"855\":6,\"856\":7,\"857\":2,\"860\":2,\"861\":8,\"862\":6,\"863\":5,\"864\":5,\"865\":4,\"868\":4,\"869\":6,\"870\":4,\"871\":5,\"874\":2,\"875\":9,\"876\":8,\"877\":13,\"879\":1,\"881\":2,\"882\":3,\"883\":5,\"884\":1,\"888\":5,\"889\":10,\"890\":2,\"891\":13,\"892\":2,\"896\":3,\"897\":2,\"901\":2,\"903\":6,\"905\":3,\"907\":1,\"908\":1,\"910\":2,\"911\":15,\"912\":7,\"913\":10,\"914\":4,\"916\":2,\"917\":3,\"918\":19,\"919\":6,\"920\":6,\"923\":17,\"924\":14,\"925\":23,\"928\":1,\"931\":1,\"932\":1,\"933\":7,\"934\":3,\"935\":2,\"939\":5,\"940\":6,\"941\":2,\"943\":3,\"944\":2,\"945\":6,\"946\":5,\"947\":1,\"948\":8,\"950\":4,\"951\":5,\"952\":3,\"953\":6,\"957\":3,\"958\":9,\"967\":7,\"978\":1,\"980\":5,\"982\":3,\"983\":10,\"984\":3,\"985\":2,\"991\":6,\"992\":5,\"993\":7,\"995\":9,\"996\":6,\"1012\":2,\"1015\":6,\"1021\":4,\"1023\":1,\"1025\":1,\"1039\":4,\"1040\":2,\"1053\":1,\"1054\":1,\"1055\":1,\"1056\":1,\"1057\":2,\"1058\":2,\"1059\":3,\"1060\":2,\"1063\":8,\"1064\":4,\"1065\":4,\"1066\":3,\"1067\":4,\"1086\":4,\"1087\":22,\"1088\":4,\"1091\":5,\"1092\":1,\"1093\":1,\"1096\":1,\"1098\":3,\"1102\":2,\"1105\":1,\"1112\":7,\"1124\":2,\"1144\":3,\"1145\":2,\"1146\":3,\"1148\":1,\"1149\":1,\"1150\":5,\"1151\":2,\"1152\":5,\"1153\":5,\"1154\":8,\"1155\":4,\"1181\":11,\"1182\":3,\"1186\":5,\"1188\":8,\"1199\":2,\"1201\":12,\"1204\":3,\"1207\":2,\"1214\":4,\"1216\":1,\"1219\":1,\"1224\":1,\"1225\":2,\"1231\":2,\"1361\":1,\"1364\":2,\"1376\":1,\"1378\":1,\"1379\":2,\"1380\":4,\"1396\":1,\"1407\":1,\"1445\":2,\"1451\":2,\"1467\":3,\"1486\":3,\"1497\":6,\"1498\":1,\"1573\":1,\"1584\":1,\"1586\":4,\"1587\":1,\"1778\":2,\"1779\":8,\"1893\":1,\"1894\":1,\"1896\":1,\"1897\":1,\"1902\":1,\"1910\":1,\"1911\":1,\"1923\":2,\"1927\":1,\"1929\":1,\"1953\":2,\"2012\":2,\"2016\":1,\"2019\":2,\"2028\":1,\"2043\":1,\"2045\":1,\"2047\":1,\"2050\":1,\"2058\":4,\"2101\":1}}],[\"life\",{\"0\":{\"2105\":1}}],[\"like\",{\"1\":{\"2065\":1}}],[\"literals\",{\"1\":{\"958\":1}}],[\"li>\",{\"1\":{\"772\":2,\"993\":6,\"1112\":9,\"1120\":3,\"1123\":6,\"1124\":4,\"1152\":6,\"1158\":18,\"1194\":4,\"1392\":1,\"1393\":1,\"1446\":1}}],[\"lighten\",{\"1\":{\"1337\":1}}],[\"light\",{\"1\":{\"1259\":2,\"1337\":2}}],[\"lightgrey\",{\"1\":{\"582\":2}}],[\"lightgreen\",{\"1\":{\"582\":2}}],[\"lightblue\",{\"1\":{\"582\":2}}],[\"li=\",{\"1\":{\"390\":1}}],[\"li\",{\"1\":{\"390\":1,\"480\":4,\"623\":1,\"1112\":2,\"1124\":4,\"1152\":1,\"1158\":11,\"1194\":2,\"1332\":9}}],[\"live\",{\"0\":{\"1242\":1},\"1\":{\"289\":1,\"1216\":3,\"1242\":1}}],[\"lineto\",{\"1\":{\"711\":1,\"717\":1}}],[\"linecap\",{\"1\":{\"708\":2,\"711\":1}}],[\"linejoin\",{\"1\":{\"708\":1,\"711\":1}}],[\"linewidth\",{\"1\":{\"708\":2,\"711\":1}}],[\"linear\",{\"1\":{\"636\":5,\"641\":1,\"644\":1,\"1661\":1,\"1666\":1,\"1669\":2,\"1670\":1,\"1671\":1,\"1673\":3,\"1680\":1}}],[\"lineline\",{\"1\":{\"384\":1}}],[\"line\",{\"1\":{\"384\":6,\"404\":2,\"521\":1,\"601\":1,\"621\":1,\"625\":1,\"916\":3,\"1255\":1,\"1260\":1,\"1313\":1,\"1328\":1,\"1428\":1}}],[\"line3\",{\"1\":{\"383\":1,\"1268\":2}}],[\"line2\",{\"1\":{\"383\":2,\"1268\":1,\"1270\":2}}],[\"line1\",{\"1\":{\"383\":2,\"1268\":1,\"1270\":2}}],[\"line1line2\",{\"1\":{\"383\":1}}],[\"linkexactactiveclass\",{\"1\":{\"2066\":1}}],[\"linkactiveclass\",{\"1\":{\"2066\":1}}],[\"link>\",{\"1\":{\"1456\":1,\"1458\":1,\"1459\":2,\"1460\":3,\"1461\":2,\"1463\":1,\"1464\":1,\"2026\":1,\"2032\":2,\"2062\":3}}],[\"link>标签实现路由切换\",{\"1\":{\"1456\":1}}],[\"link\",{\"0\":{\"2032\":1},\"1\":{\"293\":1,\"295\":1,\"520\":1,\"1456\":1,\"1458\":1,\"1459\":2,\"1460\":3,\"1461\":2,\"1463\":1,\"2030\":1,\"2062\":4,\"2065\":1,\"2066\":9}}],[\"linux\",{\"1\":{\"261\":1,\"264\":1}}],[\"lin\",{\"1\":{\"202\":2}}],[\"lis\",{\"1\":{\"1194\":3,\"1969\":1}}],[\"lisi\",{\"1\":{\"176\":1}}],[\"list和datalist\",{\"1\":{\"758\":1}}],[\"list=\",{\"1\":{\"697\":1}}],[\"list2\",{\"1\":{\"393\":1}}],[\"list的只读版\",{\"1\":{\"391\":1}}],[\"listening\",{\"1\":{\"2041\":2,\"2047\":1}}],[\"listen即将传入的函数保存到history\",{\"1\":{\"2029\":1}}],[\"listeners\",{\"1\":{\"1358\":1,\"1802\":12,\"1834\":1,\"1864\":1,\"2034\":1,\"2060\":1,\"2061\":12}}],[\"listener\",{\"1\":{\"995\":3,\"2034\":3,\"2061\":6}}],[\"listen\",{\"1\":{\"273\":1,\"275\":1,\"282\":1,\"283\":1,\"284\":2,\"285\":1,\"287\":2,\"294\":2,\"301\":1,\"304\":1,\"305\":1,\"316\":1,\"321\":1,\"329\":1,\"349\":1,\"350\":1,\"355\":1,\"1573\":1,\"2029\":1,\"2060\":2,\"2061\":2}}],[\"list\",{\"0\":{\"390\":1,\"1288\":1,\"1290\":2},\"1\":{\"3\":1,\"69\":1,\"88\":1,\"229\":2,\"380\":1,\"381\":2,\"388\":2,\"391\":1,\"393\":1,\"402\":1,\"408\":1,\"697\":1,\"758\":1,\"765\":1,\"772\":4,\"773\":3,\"993\":2,\"1152\":2,\"1158\":5,\"1216\":2,\"1235\":1,\"1267\":1,\"1268\":4,\"1270\":4,\"1271\":5,\"1272\":2,\"1276\":2,\"1281\":1,\"1283\":1,\"1287\":1,\"1290\":8,\"1353\":2,\"1358\":1,\"1368\":1,\"1407\":1,\"1454\":1,\"2043\":1,\"2049\":1,\"2079\":1,\"2083\":1,\"2084\":1}}],[\"liability\",{\"1\":{\"156\":1}}],[\"liable\",{\"1\":{\"156\":1}}],[\"limit\",{\"1\":{\"211\":2,\"857\":1}}],[\"limited\",{\"1\":{\"156\":1}}],[\"limitation\",{\"1\":{\"156\":1}}],[\"licensewebpackplugin\",{\"1\":{\"156\":3}}],[\"licenses\",{\"1\":{\"64\":1}}],[\"license\",{\"1\":{\"64\":2,\"156\":2,\"2040\":1}}],[\"library\",{\"1\":{\"1260\":2,\"1307\":4}}],[\"libs\",{\"1\":{\"39\":1,\"40\":1,\"43\":1,\"44\":2,\"45\":5}}],[\"lib\",{\"1\":{\"15\":1,\"379\":2,\"2065\":1}}],[\"lilichao\",{\"1\":{\"12\":1}}],[\"pnpm\",{\"1\":{\"2040\":3}}],[\"png\",{\"1\":{\"292\":2,\"294\":3,\"418\":1,\"419\":1,\"496\":1,\"628\":1,\"666\":1,\"765\":1,\"1328\":1,\"1332\":4,\"1427\":1,\"1592\":1}}],[\"pendinglocation\",{\"1\":{\"2041\":1,\"2047\":2}}],[\"pending\",{\"1\":{\"1777\":5,\"1822\":4,\"2029\":3}}],[\"perf\",{\"1\":{\"1799\":2}}],[\"performance\",{\"1\":{\"1799\":2,\"1805\":2,\"1949\":1}}],[\"perform\",{\"1\":{\"1560\":1}}],[\"permanently\",{\"1\":{\"1635\":1}}],[\"permit\",{\"1\":{\"156\":1}}],[\"permission\",{\"1\":{\"156\":2,\"1105\":6}}],[\"perspective\",{\"1\":{\"616\":3}}],[\"person的job变化了\",{\"1\":{\"1497\":3}}],[\"person变化了\",{\"1\":{\"1497\":1}}],[\"personabout\",{\"1\":{\"1454\":6}}],[\"person2\",{\"1\":{\"897\":2}}],[\"persons\",{\"1\":{\"156\":1,\"1392\":1,\"1393\":2,\"1395\":1}}],[\"person\",{\"1\":{\"49\":1,\"156\":1,\"327\":4,\"402\":2,\"422\":5,\"828\":14,\"829\":8,\"830\":45,\"834\":4,\"896\":4,\"897\":2,\"967\":2,\"1048\":3,\"1049\":4,\"1364\":2,\"1436\":1,\"1454\":3,\"1488\":8,\"1496\":6,\"1497\":5,\"1498\":1,\"1502\":2,\"1505\":2}}],[\"pth\",{\"1\":{\"1673\":3}}],[\"ptext\",{\"1\":{\"1208\":2}}],[\"p=0\",{\"1\":{\"1664\":1}}],[\"pd\",{\"1\":{\"1655\":2}}],[\"pwd\",{\"1\":{\"1231\":1}}],[\"p3\",{\"1\":{\"719\":1}}],[\"p0\",{\"1\":{\"718\":1,\"719\":1}}],[\"p2的resolve\",{\"1\":{\"1779\":1}}],[\"p2\",{\"1\":{\"718\":1,\"719\":1,\"1048\":1,\"1049\":1,\"1395\":3,\"1779\":1,\"1929\":9}}],[\"px\",{\"1\":{\"621\":2,\"650\":1,\"764\":2,\"1224\":2,\"1264\":1}}],[\"p><p>template<\",{\"1\":{\"1974\":1}}],[\"p><\",{\"1\":{\"1797\":1,\"1974\":1}}],[\"p>浏览器则自动将其补全为<p><\",{\"1\":{\"1792\":1}}],[\"p>`\",{\"1\":{\"1239\":2}}],[\"p>\",{\"1\":{\"519\":4,\"520\":5,\"533\":1,\"582\":8,\"657\":1,\"665\":1,\"697\":3,\"747\":2,\"1112\":9,\"1120\":2,\"1123\":4,\"1124\":2,\"1150\":6,\"1153\":1,\"1162\":2,\"1198\":1,\"1205\":2,\"1208\":2,\"1216\":3,\"1232\":1,\"1792\":1,\"1825\":1,\"1954\":1,\"2035\":2}}],[\"p1\",{\"1\":{\"517\":1,\"718\":1,\"719\":1,\"1047\":1,\"1048\":1,\"1049\":1,\"1395\":3,\"1929\":4}}],[\"p\",{\"1\":{\"514\":2,\"516\":1,\"518\":2,\"519\":11,\"520\":2,\"546\":2,\"582\":2,\"621\":1,\"623\":1,\"624\":1,\"661\":1,\"666\":1,\"918\":1,\"958\":2,\"1112\":5,\"1120\":2,\"1125\":1,\"1199\":1,\"1204\":2,\"1208\":5,\"1211\":1,\"1216\":2,\"1234\":2,\"1235\":1,\"1239\":1,\"1255\":1,\"1261\":1,\"1332\":9,\"1392\":3,\"1393\":6,\"1395\":2,\"1664\":2,\"1777\":3,\"1792\":2,\"1794\":5,\"1797\":3,\"1822\":2,\"1897\":4,\"1902\":11,\"1905\":1,\"1906\":2,\"1907\":1,\"1909\":1,\"1927\":6,\"1931\":4,\"1932\":2,\"1954\":3,\"1964\":2,\"1974\":14,\"1975\":4,\"1979\":2,\"1987\":2}}],[\"pk\",{\"1\":{\"443\":4}}],[\"piniasymbol\",{\"1\":{\"2016\":5,\"2019\":3}}],[\"piniastore\",{\"1\":{\"2016\":11,\"2019\":5,\"2020\":3,\"2021\":5}}],[\"pinia对象\",{\"1\":{\"2015\":1}}],[\"pinia\",{\"0\":{\"2006\":1,\"2007\":1,\"2009\":1,\"2011\":1,\"2013\":1},\"1\":{\"2008\":1,\"2009\":2,\"2010\":3,\"2011\":1,\"2012\":1,\"2015\":2,\"2016\":3,\"2020\":1}}],[\"pin\",{\"1\":{\"1655\":2}}],[\"pink\",{\"1\":{\"520\":2,\"582\":2,\"725\":1,\"726\":1,\"853\":2,\"1087\":3,\"1139\":1,\"1140\":1,\"1155\":2,\"1276\":1}}],[\"pil\",{\"1\":{\"1655\":1}}],[\"piece\",{\"1\":{\"1475\":1}}],[\"pid\",{\"1\":{\"1439\":2}}],[\"pixeldepth\",{\"1\":{\"1098\":1}}],[\"pickle\",{\"1\":{\"1674\":4}}],[\"pickle函数\",{\"1\":{\"404\":1}}],[\"picture\",{\"1\":{\"740\":4}}],[\"pi\",{\"1\":{\"716\":1,\"879\":4}}],[\"pivot\",{\"1\":{\"415\":5}}],[\"pipe\",{\"1\":{\"263\":1,\"1040\":3}}],[\"pip\",{\"1\":{\"94\":1,\"377\":1}}],[\"pytorch\",{\"1\":{\"1655\":3,\"1656\":1,\"1659\":1,\"1661\":1,\"1662\":2,\"1663\":2,\"1665\":1,\"1666\":1,\"1667\":2,\"1673\":3,\"1677\":1},\"2\":{\"1682\":1}}],[\"pytorch基础\",{\"0\":{\"1653\":1}}],[\"pythom35\",{\"1\":{\"379\":1}}],[\"python3\",{\"1\":{\"381\":1,\"389\":1}}],[\"python内部会根据所赋变量的类型来创建该变量\",{\"1\":{\"380\":1}}],[\"pythonpath\",{\"1\":{\"379\":1}}],[\"python学习笔记\",{\"0\":{\"374\":1}}],[\"python\",{\"1\":{\"94\":1,\"376\":2,\"377\":3,\"379\":1,\"381\":1,\"382\":2,\"390\":1,\"392\":1,\"402\":2,\"404\":2,\"408\":1,\"1673\":3,\"1674\":1}}],[\"py\",{\"1\":{\"376\":3,\"379\":1,\"1674\":1}}],[\"please\",{\"1\":{\"1088\":1}}],[\"platformmustuseprop\",{\"1\":{\"1353\":1}}],[\"platform\",{\"1\":{\"1091\":1}}],[\"plain\",{\"1\":{\"765\":3,\"1570\":1,\"1607\":1,\"1636\":1,\"1796\":1,\"1797\":2}}],[\"placeholder可以选中\",{\"1\":{\"758\":1}}],[\"placeholder\",{\"1\":{\"758\":2,\"1298\":1,\"1299\":1}}],[\"placeholder=\",{\"1\":{\"697\":1,\"1393\":1}}],[\"playground\",{\"1\":{\"2040\":1}}],[\"playing\",{\"1\":{\"752\":1}}],[\"playbackrate\",{\"1\":{\"750\":1}}],[\"play\",{\"1\":{\"644\":1,\"751\":1,\"752\":3,\"1132\":1}}],[\"playload\",{\"0\":{\"366\":1}}],[\"plus5\",{\"1\":{\"995\":3}}],[\"plus\",{\"1\":{\"650\":1}}],[\"plugins\",{\"0\":{\"1432\":1},\"1\":{\"128\":4,\"129\":2,\"148\":2,\"156\":1,\"2047\":1}}],[\"plugin插件\",{\"1\":{\"128\":1,\"129\":2}}],[\"plugin\",{\"0\":{\"156\":1},\"1\":{\"128\":4,\"129\":4,\"148\":2,\"156\":4,\"1824\":9}}],[\"pm2\",{\"1\":{\"223\":1}}],[\"pc\",{\"0\":{\"222\":1,\"1471\":1},\"1\":{\"222\":2,\"610\":1,\"646\":1,\"648\":1,\"649\":2}}],[\"phone\",{\"1\":{\"200\":1,\"1205\":4,\"1231\":1}}],[\"phonemodel\",{\"1\":{\"200\":2}}],[\"phoneschema\",{\"1\":{\"200\":2}}],[\"php\",{\"1\":{\"94\":1,\"996\":4}}],[\"pragma\",{\"0\":{\"1542\":1},\"1\":{\"1613\":1}}],[\"pr\",{\"1\":{\"681\":1,\"1475\":1}}],[\"prettierrc\",{\"1\":{\"2040\":1}}],[\"prettierignore\",{\"1\":{\"2040\":1}}],[\"pretty\",{\"1\":{\"1799\":1}}],[\"pre指令\",{\"1\":{\"1795\":1}}],[\"preprocess\",{\"0\":{\"2113\":1}}],[\"prepare\",{\"1\":{\"2061\":1}}],[\"prepatch\",{\"1\":{\"1789\":1}}],[\"prependmodifier\",{\"1\":{\"1797\":1}}],[\"prependto\",{\"1\":{\"1208\":1,\"1209\":1}}],[\"prepend\",{\"1\":{\"1208\":1,\"1209\":1,\"2058\":1}}],[\"preflight\",{\"0\":{\"1608\":1}}],[\"pressed\",{\"1\":{\"1154\":1}}],[\"preserve\",{\"1\":{\"2063\":1}}],[\"present\",{\"1\":{\"156\":1,\"857\":2}}],[\"presets\",{\"1\":{\"148\":1,\"149\":1,\"155\":1}}],[\"preset\",{\"1\":{\"148\":6,\"149\":2,\"155\":1}}],[\"prevtree\",{\"1\":{\"2002\":3}}],[\"prevprops\",{\"1\":{\"1955\":3}}],[\"prevvalue\",{\"1\":{\"1949\":3}}],[\"prevvnode\",{\"1\":{\"1862\":2,\"1962\":10}}],[\"prevent=\",{\"1\":{\"1369\":1}}],[\"prevent\",{\"1\":{\"1369\":2,\"1370\":1,\"1407\":2}}],[\"preventdefault\",{\"1\":{\"764\":2,\"765\":5,\"772\":2,\"1156\":7,\"1219\":1,\"1231\":1,\"1370\":1,\"2050\":1,\"2065\":3}}],[\"prevuntil\",{\"1\":{\"1204\":1}}],[\"prevall\",{\"1\":{\"1204\":1,\"1232\":1}}],[\"prev\",{\"1\":{\"1204\":1,\"1232\":1,\"1794\":7,\"2029\":2}}],[\"previouselementsibling\",{\"1\":{\"1112\":2}}],[\"previoussibling\",{\"1\":{\"1112\":1}}],[\"preload\",{\"1\":{\"748\":1,\"749\":1}}],[\"pre\",{\"0\":{\"1403\":1},\"1\":{\"439\":3,\"625\":1,\"946\":8,\"1273\":4,\"1404\":1,\"1446\":1,\"1494\":1,\"1795\":1}}],[\"preindex\",{\"1\":{\"412\":7,\"413\":7}}],[\"primitivevalue\",{\"1\":{\"995\":1}}],[\"primitive\",{\"1\":{\"980\":1,\"1786\":2}}],[\"primary\",{\"1\":{\"176\":2}}],[\"print\",{\"1\":{\"377\":5,\"379\":1,\"382\":3,\"384\":3,\"386\":2,\"387\":1,\"388\":6,\"389\":3,\"395\":13,\"396\":7,\"398\":9,\"402\":1,\"403\":4,\"404\":1,\"651\":1,\"995\":15,\"1655\":1,\"1662\":1,\"1663\":4,\"1665\":2,\"1667\":1,\"1669\":1,\"1670\":1,\"1671\":1,\"1674\":1,\"1680\":3}}],[\"privateb\",{\"1\":{\"1015\":3}}],[\"private\",{\"1\":{\"271\":1,\"958\":1,\"1305\":1,\"1539\":1}}],[\"price=2000\",{\"1\":{\"270\":1}}],[\"price\",{\"1\":{\"191\":2,\"200\":3,\"205\":1,\"206\":2,\"212\":2,\"270\":1,\"466\":3,\"790\":2,\"1047\":3,\"1057\":1,\"1070\":3,\"1071\":3,\"1072\":3,\"1508\":1}}],[\"profile\",{\"1\":{\"1825\":3,\"2028\":4,\"2047\":2}}],[\"proxied\",{\"1\":{\"1804\":1}}],[\"proxytouse\",{\"1\":{\"2002\":6}}],[\"proxyrefs\",{\"1\":{\"1938\":6,\"1997\":1,\"2001\":1}}],[\"proxy是异质对象\",{\"1\":{\"1903\":1}}],[\"proxy\",{\"0\":{\"1901\":1,\"1903\":1},\"1\":{\"134\":2,\"1354\":1,\"1444\":1,\"1445\":1,\"1478\":1,\"1488\":3,\"1491\":6,\"1492\":1,\"1804\":4,\"1836\":1,\"1838\":1,\"1886\":1,\"1888\":2,\"1889\":2,\"1896\":1,\"1897\":1,\"1901\":1,\"1902\":1,\"1905\":1,\"1906\":2,\"1907\":1,\"1909\":3,\"1910\":1,\"1912\":1,\"1913\":1,\"1914\":2,\"1917\":2,\"1918\":1,\"1920\":1,\"1921\":1,\"1923\":4,\"1927\":3,\"1928\":1,\"1936\":2,\"1938\":2,\"1956\":1,\"1985\":1,\"1990\":1,\"1991\":1,\"1992\":1,\"1993\":2,\"1997\":3,\"2001\":2,\"2002\":2}}],[\"probability\",{\"1\":{\"1664\":1}}],[\"product\",{\"1\":{\"1091\":1}}],[\"productiontip\",{\"1\":{\"1427\":1,\"1518\":1}}],[\"production生成文件的方式\",{\"1\":{\"124\":1}}],[\"production\",{\"1\":{\"71\":1,\"124\":1,\"129\":1,\"1786\":4,\"1789\":3,\"1792\":3,\"1799\":4,\"1802\":1,\"1803\":2,\"1804\":8,\"1805\":6,\"1825\":1,\"1828\":1,\"2027\":1}}],[\"prom\",{\"1\":{\"1778\":2}}],[\"prompt\",{\"1\":{\"1088\":2,\"1150\":1}}],[\"promise<any>\",{\"1\":{\"2072\":1,\"2076\":1}}],[\"promise<void>\",{\"1\":{\"2075\":3}}],[\"promise<void>>\",{\"1\":{\"2074\":1}}],[\"promise<void\",{\"1\":{\"2065\":2}}],[\"promisea+规范的复现\",{\"1\":{\"1779\":1}}],[\"promises\",{\"1\":{\"1778\":3}}],[\"promise执行回调\",{\"1\":{\"1777\":1}}],[\"promise实例完成状态的时机在内部函数中指定\",{\"1\":{\"1777\":1}}],[\"promise\",{\"0\":{\"1776\":1,\"1777\":1,\"1778\":1,\"2118\":1},\"1\":{\"474\":1,\"476\":1,\"491\":1,\"498\":1,\"499\":2,\"1105\":4,\"1187\":4,\"1188\":2,\"1189\":1,\"1232\":1,\"1383\":1,\"1486\":2,\"1560\":2,\"1572\":1,\"1772\":2,\"1776\":2,\"1777\":1,\"1778\":4,\"1779\":12,\"1822\":6,\"1897\":2,\"1954\":2,\"1987\":1,\"2065\":2,\"2072\":3,\"2074\":3,\"2075\":4,\"2076\":5,\"2079\":1,\"2080\":1,\"2081\":1,\"2083\":1},\"2\":{\"1781\":1}}],[\"pro\",{\"1\":{\"1030\":2}}],[\"protected\",{\"1\":{\"958\":1}}],[\"protoaugment\",{\"1\":{\"1785\":1}}],[\"proto\",{\"1\":{\"1007\":2,\"1008\":2,\"1009\":2,\"1055\":1,\"1063\":8,\"1064\":1,\"1066\":1,\"1073\":2,\"1424\":1,\"1910\":3}}],[\"prototype之间\",{\"1\":{\"1785\":2}}],[\"prototype\",{\"0\":{\"446\":1,\"1063\":1},\"1\":{\"317\":1,\"421\":1,\"422\":2,\"424\":3,\"428\":1,\"430\":1,\"432\":1,\"436\":1,\"438\":1,\"441\":1,\"443\":1,\"446\":1,\"451\":1,\"466\":5,\"467\":3,\"469\":2,\"486\":1,\"967\":2,\"995\":26,\"1007\":1,\"1008\":4,\"1049\":1,\"1063\":5,\"1064\":1,\"1066\":1,\"1069\":3,\"1071\":3,\"1072\":5,\"1073\":1,\"1201\":2,\"1424\":5,\"1430\":1,\"1432\":2,\"1438\":1,\"1518\":1,\"1785\":1,\"1786\":1,\"1799\":1,\"1804\":1,\"1805\":2,\"1806\":1,\"1807\":1,\"1808\":1,\"1810\":1,\"1814\":1,\"1815\":1,\"1816\":1,\"1817\":1,\"1821\":1,\"1825\":3,\"1836\":1,\"1838\":1,\"1906\":1,\"1907\":1,\"1909\":1,\"1910\":1,\"1914\":2,\"1917\":1,\"1918\":1,\"1923\":1,\"1924\":1,\"1925\":2,\"1930\":1,\"1932\":1,\"1990\":2,\"1993\":3,\"2026\":2}}],[\"protocols\",{\"1\":{\"1648\":1,\"1649\":1}}],[\"protocol\",{\"1\":{\"266\":1,\"1093\":4,\"1627\":1,\"2051\":3,\"2091\":1}}],[\"progress\",{\"1\":{\"696\":2,\"752\":1}}],[\"program\",{\"1\":{\"177\":1,\"261\":1,\"335\":1}}],[\"propclass\",{\"1\":{\"2066\":3}}],[\"proptype<routerlinkprops\",{\"1\":{\"2064\":1}}],[\"proptype<routelocationraw>\",{\"1\":{\"2064\":1}}],[\"prop时\",{\"1\":{\"1937\":1}}],[\"propkeys\",{\"1\":{\"1804\":1,\"1864\":2}}],[\"propkeys数组即可得到所有props的key\",{\"1\":{\"1804\":1}}],[\"propkeys的指针\",{\"1\":{\"1804\":1}}],[\"prop和el\",{\"1\":{\"1353\":1}}],[\"propsclass\",{\"1\":{\"2066\":1}}],[\"props或instance\",{\"1\":{\"2001\":1}}],[\"propsoption\",{\"1\":{\"1954\":2}}],[\"propsoptions\",{\"1\":{\"1804\":3,\"1838\":1}}],[\"props数据中\",{\"1\":{\"1954\":1}}],[\"props不同\",{\"1\":{\"1845\":1}}],[\"propsdef\",{\"1\":{\"1838\":3}}],[\"propsdata\",{\"1\":{\"1358\":1,\"1802\":3,\"1804\":3,\"1834\":1,\"1838\":1,\"1864\":3,\"1954\":4}}],[\"props和methods重名\",{\"1\":{\"1804\":1}}],[\"props`\",{\"1\":{\"1804\":1,\"1838\":1}}],[\"props中的key是否重复\",{\"1\":{\"1845\":1}}],[\"props中\",{\"1\":{\"1804\":1}}],[\"props的指针\",{\"1\":{\"1804\":1}}],[\"props值为函数\",{\"1\":{\"1462\":1}}],[\"props值为布尔值\",{\"1\":{\"1462\":1}}],[\"props值为对象\",{\"1\":{\"1462\":1}}],[\"props是只读的\",{\"1\":{\"1429\":1}}],[\"props传过来的若是对象类型的值\",{\"1\":{\"1429\":1}}],[\"props\",{\"0\":{\"1429\":1,\"1462\":1,\"1837\":1,\"1839\":1,\"1840\":1,\"2064\":1},\"1\":{\"1054\":2,\"1353\":3,\"1358\":3,\"1429\":5,\"1430\":2,\"1446\":2,\"1462\":4,\"1493\":6,\"1494\":1,\"1499\":1,\"1508\":1,\"1799\":1,\"1803\":1,\"1804\":24,\"1825\":2,\"1834\":2,\"1836\":2,\"1838\":2,\"1841\":1,\"1864\":1,\"1878\":3,\"1879\":2,\"1948\":3,\"1949\":1,\"1951\":3,\"1953\":6,\"1954\":22,\"1955\":17,\"1956\":9,\"1997\":2,\"2001\":5,\"2002\":2,\"2028\":1,\"2031\":1,\"2062\":2,\"2064\":3,\"2065\":6,\"2066\":6,\"2067\":2,\"2068\":5,\"2069\":3,\"2070\":18}}],[\"properties\",{\"1\":{\"681\":6,\"1786\":2,\"1949\":2}}],[\"propertiess\",{\"1\":{\"681\":1}}],[\"propertyname\",{\"1\":{\"1396\":2,\"1786\":2}}],[\"property\",{\"0\":{\"681\":1,\"683\":1},\"1\":{\"405\":1,\"641\":1,\"681\":2,\"682\":2,\"683\":5,\"684\":2,\"1328\":3,\"1364\":1,\"1786\":2,\"1804\":8,\"1949\":1}}],[\"prop\",{\"1\":{\"469\":4,\"686\":1,\"756\":1,\"1205\":7,\"1353\":2,\"1358\":4,\"1491\":6,\"1508\":1,\"1804\":8,\"1840\":3,\"1864\":4,\"1937\":2,\"1938\":1,\"1956\":1,\"1989\":2,\"2020\":7,\"2032\":2}}],[\"providekey\",{\"1\":{\"1803\":3}}],[\"provide\",{\"0\":{\"1508\":1},\"1\":{\"1480\":1,\"1508\":3,\"1799\":2,\"1803\":8,\"2016\":2,\"2047\":8,\"2068\":4}}],[\"provides\",{\"1\":{\"377\":1}}],[\"providedefault\",{\"1\":{\"1803\":4}}],[\"provided\",{\"1\":{\"156\":1,\"1792\":1,\"1803\":6}}],[\"processcomponent\",{\"1\":{\"1997\":1}}],[\"process\",{\"1\":{\"71\":4,\"1777\":3,\"1786\":4,\"1789\":3,\"1792\":3,\"1799\":4,\"1802\":1,\"1803\":2,\"1804\":8,\"1805\":6,\"1825\":1,\"1828\":1,\"2027\":1}}],[\"project\",{\"1\":{\"15\":2,\"200\":1,\"355\":1,\"1482\":1,\"1594\":4}}],[\"pool\",{\"1\":{\"1663\":2}}],[\"pooling\",{\"1\":{\"1663\":4}}],[\"point\",{\"1\":{\"1658\":1,\"1825\":1,\"2065\":1}}],[\"pointer\",{\"1\":{\"940\":1,\"1015\":4}}],[\"policy\",{\"1\":{\"2095\":1}}],[\"policies\",{\"1\":{\"93\":1}}],[\"polling\",{\"0\":{\"1645\":1,\"1646\":1}}],[\"pos<0\",{\"1\":{\"1792\":1}}],[\"pos>=0\",{\"1\":{\"1792\":1}}],[\"pos\",{\"1\":{\"1792\":12,\"1969\":9}}],[\"posix\",{\"1\":{\"921\":1}}],[\"position的后边\",{\"1\":{\"635\":1}}],[\"position从内边距处开始计算\",{\"1\":{\"631\":1}}],[\"position\",{\"0\":{\"567\":1,\"1207\":1},\"1\":{\"568\":1,\"572\":1,\"578\":1,\"580\":2,\"582\":3,\"598\":1,\"602\":1,\"603\":1,\"630\":1,\"725\":2,\"764\":1,\"897\":1,\"1087\":5,\"1102\":13,\"1153\":1,\"1155\":2,\"1206\":1,\"1207\":5,\"1259\":1,\"1262\":2,\"1296\":1,\"2034\":2,\"2058\":9,\"2061\":5}}],[\"postpatch\",{\"1\":{\"1789\":1}}],[\"post表达了客户端想要提交一些东西\",{\"1\":{\"1632\":1}}],[\"postmessage\",{\"1\":{\"1182\":2}}],[\"postman\",{\"1\":{\"341\":2}}],[\"poster属性\",{\"1\":{\"749\":1}}],[\"poster\",{\"1\":{\"748\":1,\"750\":1}}],[\"posts\",{\"1\":{\"476\":1,\"2028\":4}}],[\"post请求\",{\"1\":{\"270\":1}}],[\"post\",{\"0\":{\"295\":1,\"1229\":1,\"1577\":1,\"1585\":1},\"1\":{\"219\":1,\"268\":1,\"295\":3,\"296\":5,\"304\":2,\"317\":1,\"339\":1,\"1226\":1,\"1229\":2,\"1498\":3,\"1569\":5,\"1575\":1,\"1577\":2,\"1585\":2,\"1586\":1,\"1587\":1,\"1592\":1,\"1607\":1,\"1609\":2,\"1630\":1,\"1632\":1,\"1897\":3,\"1987\":1,\"2069\":2,\"2088\":3}}],[\"postcss\",{\"1\":{\"146\":1}}],[\"popstatelistener\",{\"1\":{\"2060\":1,\"2061\":1}}],[\"popstatehandler\",{\"1\":{\"2034\":1,\"2060\":2,\"2061\":12}}],[\"popstate\",{\"1\":{\"2034\":2,\"2050\":5,\"2060\":3,\"2061\":13}}],[\"poptarget\",{\"1\":{\"1804\":1}}],[\"pop\",{\"1\":{\"452\":1,\"853\":2,\"995\":3,\"1396\":1,\"1785\":1,\"1891\":1,\"1893\":1,\"1894\":1,\"1895\":1,\"1915\":1,\"1925\":4,\"1974\":1,\"1984\":1,\"1993\":3,\"2034\":1,\"2061\":2}}],[\"power\",{\"1\":{\"884\":2,\"1125\":3}}],[\"pow\",{\"1\":{\"395\":1,\"419\":1,\"794\":3,\"803\":1,\"884\":1}}],[\"portions\",{\"1\":{\"156\":1}}],[\"port\",{\"1\":{\"133\":1,\"134\":1,\"1093\":3,\"1626\":1,\"1633\":1,\"2051\":2}}],[\"pandas\",{\"1\":{\"1655\":2}}],[\"paste\",{\"1\":{\"1160\":2,\"1161\":2}}],[\"passive\",{\"1\":{\"1369\":1,\"1802\":1,\"2060\":1,\"2061\":1}}],[\"pass\",{\"1\":{\"401\":1,\"1655\":1}}],[\"password=111\",{\"1\":{\"283\":1}}],[\"password\",{\"1\":{\"212\":1,\"670\":2,\"756\":1,\"758\":1,\"1203\":1,\"1231\":1,\"1585\":1,\"1586\":1}}],[\"pauselisteners\",{\"1\":{\"2053\":1,\"2055\":1,\"2060\":2,\"2061\":2}}],[\"pausestate\",{\"1\":{\"2034\":3,\"2060\":1,\"2061\":11}}],[\"pauseundefined\",{\"1\":{\"1186\":1}}],[\"pause\",{\"1\":{\"751\":1,\"752\":1,\"1132\":1,\"1186\":1}}],[\"paused\",{\"1\":{\"644\":1,\"750\":1}}],[\"padend\",{\"1\":{\"893\":3}}],[\"padstart\",{\"1\":{\"501\":1,\"893\":4}}],[\"padding=0\",{\"1\":{\"1667\":2}}],[\"padding=1\",{\"1\":{\"1661\":2,\"1662\":1,\"1667\":2,\"1669\":1}}],[\"paddingtop5\",{\"1\":{\"1298\":4}}],[\"padding\",{\"0\":{\"545\":1},\"1\":{\"287\":2,\"540\":2,\"542\":1,\"545\":5,\"553\":4,\"573\":2,\"574\":1,\"580\":2,\"582\":1,\"602\":1,\"631\":1,\"632\":1,\"1087\":1,\"1124\":1,\"1259\":5,\"1297\":2,\"1298\":3,\"1663\":1,\"1667\":2}}],[\"payload\",{\"1\":{\"364\":1,\"367\":1,\"369\":1,\"1954\":3}}],[\"page=3\",{\"1\":{\"2061\":1}}],[\"page=2\",{\"1\":{\"2061\":1}}],[\"page=1\",{\"1\":{\"2061\":1}}],[\"page<\",{\"1\":{\"2050\":2,\"2068\":1}}],[\"page2\",{\"1\":{\"2049\":2}}],[\"page1\",{\"1\":{\"2049\":2,\"2050\":7}}],[\"pagey\",{\"1\":{\"1153\":2,\"1219\":1}}],[\"pageyoffset\",{\"1\":{\"1087\":1}}],[\"pagex\",{\"1\":{\"1153\":2,\"1219\":1}}],[\"pagexoffset和pageyoffset属性相等于scrollx和scrolly属性\",{\"1\":{\"1087\":1}}],[\"page\",{\"0\":{\"1132\":1},\"1\":{\"257\":1,\"259\":1,\"657\":2,\"1153\":2,\"2050\":3,\"2058\":13,\"2061\":3,\"2064\":1}}],[\"pages\",{\"1\":{\"16\":1}}],[\"paren++\",{\"1\":{\"1794\":1}}],[\"paren\",{\"1\":{\"1794\":3}}],[\"parentrecordpath\",{\"1\":{\"2065\":4}}],[\"parentcomponent\",{\"1\":{\"2000\":2}}],[\"parentlisteners\",{\"1\":{\"1802\":2,\"1864\":2}}],[\"parentelm\",{\"1\":{\"1789\":12}}],[\"parentvnode组件渲染\",{\"1\":{\"1834\":1}}],[\"parentvnode组件实例的$vnode属性指向组件的占位符\",{\"1\":{\"1834\":1}}],[\"parentvnode\",{\"1\":{\"1446\":3,\"1802\":1,\"1825\":1,\"1834\":2,\"1864\":6,\"2031\":1}}],[\"parentdata\",{\"1\":{\"1430\":2}}],[\"parentsuntil\",{\"1\":{\"1204\":1}}],[\"parents\",{\"1\":{\"1204\":1,\"1232\":1}}],[\"parentnode\",{\"1\":{\"1112\":1,\"1121\":1,\"1407\":1,\"1789\":1,\"1950\":1}}],[\"parent\",{\"1\":{\"466\":6,\"467\":3,\"582\":4,\"1069\":3,\"1070\":3,\"1071\":4,\"1072\":6,\"1203\":1,\"1204\":1,\"1232\":1,\"1601\":1,\"1788\":1,\"1789\":3,\"1791\":2,\"1797\":1,\"1800\":11,\"1802\":1,\"1804\":1,\"1807\":5,\"1825\":1,\"1834\":1,\"1835\":3,\"1864\":3,\"1910\":5,\"1946\":3,\"1950\":3,\"1974\":4,\"1977\":7,\"2028\":3,\"2031\":1}}],[\"partition\",{\"1\":{\"415\":1}}],[\"partial<stateentry>\",{\"1\":{\"2058\":1}}],[\"partials\",{\"1\":{\"1308\":1}}],[\"partial\",{\"1\":{\"402\":2}}],[\"particular\",{\"1\":{\"156\":1}}],[\"paramvalue\",{\"1\":{\"2045\":2}}],[\"parameters访问的是所有层的参数\",{\"1\":{\"1669\":1}}],[\"parameters\",{\"1\":{\"1659\":2,\"1669\":5,\"1680\":1}}],[\"parameter\",{\"1\":{\"933\":2,\"958\":1}}],[\"param用来为指定资源进行传参\",{\"1\":{\"672\":1}}],[\"params\",{\"0\":{\"1461\":1,\"2045\":1},\"1\":{\"306\":1,\"474\":4,\"1461\":3,\"1464\":2,\"1584\":1,\"1585\":1,\"1586\":1,\"1659\":3,\"1671\":3,\"1673\":3,\"1802\":3,\"1975\":1,\"1978\":1,\"1979\":1,\"2028\":1,\"2041\":1,\"2044\":2,\"2045\":8,\"2047\":2,\"2062\":1,\"2065\":4,\"2070\":2}}],[\"param\",{\"1\":{\"212\":2,\"1039\":2,\"1040\":2,\"1669\":2,\"1792\":1}}],[\"parmas\",{\"1\":{\"156\":2}}],[\"parsequery\",{\"1\":{\"2041\":1}}],[\"parsefilters\",{\"1\":{\"1793\":1,\"1794\":1}}],[\"parsefloat\",{\"1\":{\"801\":1}}],[\"parsestarttag\",{\"1\":{\"1792\":2}}],[\"parseendtag\",{\"1\":{\"1792\":6}}],[\"parsetext\",{\"1\":{\"1791\":1,\"1793\":1}}],[\"parsehtml\",{\"1\":{\"1791\":1,\"1792\":1}}],[\"parseint\",{\"1\":{\"501\":1,\"801\":1}}],[\"parseparem\",{\"1\":{\"493\":2}}],[\"parse\",{\"1\":{\"155\":1,\"264\":3,\"282\":2,\"284\":2,\"471\":2,\"482\":2,\"770\":2,\"875\":6,\"897\":3,\"1436\":1,\"1578\":1,\"1790\":2,\"1791\":1,\"1792\":2,\"1972\":1,\"1974\":2}}],[\"parser\",{\"1\":{\"155\":9,\"349\":4,\"350\":2}}],[\"pattern2\",{\"1\":{\"925\":9}}],[\"pattern1\",{\"1\":{\"925\":9}}],[\"patternmismatch\",{\"1\":{\"760\":1}}],[\"pattern=\",{\"1\":{\"758\":1}}],[\"pattern\",{\"1\":{\"758\":1,\"760\":1,\"898\":1,\"924\":4,\"925\":12}}],[\"pathfromhash\",{\"1\":{\"2058\":5}}],[\"pathparseroptions\",{\"1\":{\"2042\":1}}],[\"pathmap\",{\"1\":{\"2028\":5}}],[\"pathlist\",{\"1\":{\"2028\":5}}],[\"pathchchildren\",{\"1\":{\"1951\":1}}],[\"path是必填的\",{\"1\":{\"1626\":1}}],[\"pathname\",{\"1\":{\"282\":1,\"284\":3,\"1093\":3,\"2050\":1,\"2051\":2,\"2058\":15}}],[\"path模块\",{\"0\":{\"264\":1}}],[\"pathrewrite\",{\"1\":{\"134\":1,\"1445\":2}}],[\"path\",{\"1\":{\"87\":1,\"124\":5,\"142\":4,\"150\":2,\"155\":10,\"177\":1,\"239\":1,\"247\":2,\"250\":2,\"251\":2,\"252\":2,\"255\":3,\"257\":3,\"258\":3,\"259\":5,\"260\":3,\"264\":31,\"304\":1,\"305\":1,\"329\":3,\"345\":1,\"350\":1,\"379\":10,\"1456\":2,\"1458\":4,\"1459\":1,\"1460\":3,\"1461\":3,\"1462\":1,\"1569\":2,\"1626\":1,\"1648\":2,\"1649\":1,\"1655\":3,\"1769\":2,\"1897\":1,\"1987\":1,\"2025\":2,\"2028\":15,\"2029\":2,\"2035\":4,\"2041\":2,\"2042\":1,\"2044\":2,\"2047\":3,\"2050\":1,\"2054\":2,\"2058\":7,\"2065\":2,\"2075\":1}}],[\"paths\",{\"1\":{\"42\":1,\"44\":1,\"45\":1}}],[\"patch组件内实际的内容\",{\"1\":{\"2002\":1}}],[\"patched\",{\"1\":{\"1969\":3}}],[\"patchelement\",{\"1\":{\"1951\":4}}],[\"patchkeyedchildren\",{\"1\":{\"1965\":1,\"1966\":1,\"1968\":1,\"1969\":1}}],[\"patchcomponent\",{\"0\":{\"1955\":1},\"1\":{\"1951\":1,\"1955\":1}}],[\"patchchildren\",{\"1\":{\"1951\":3}}],[\"patchprops\",{\"1\":{\"1948\":2,\"1949\":2,\"1951\":2}}],[\"patchvnode\",{\"1\":{\"1789\":6}}],[\"patch\",{\"0\":{\"1862\":1,\"1951\":1},\"1\":{\"15\":1,\"339\":1,\"1368\":2,\"1423\":1,\"1789\":3,\"1806\":1,\"1807\":1,\"1834\":2,\"1862\":4,\"1944\":4,\"1948\":3,\"1951\":3,\"1954\":4,\"1961\":2,\"1962\":4,\"1965\":5,\"1966\":3,\"1968\":4,\"1969\":5,\"1997\":1,\"2002\":3,\"2003\":1}}],[\"packages\",{\"1\":{\"94\":2,\"379\":1,\"2040\":2,\"2041\":1}}],[\"package\",{\"1\":{\"34\":1,\"57\":1,\"61\":1,\"64\":7,\"66\":1,\"72\":2,\"74\":2,\"77\":1,\"89\":1,\"91\":1,\"92\":1,\"133\":1,\"238\":2,\"307\":1,\"332\":2,\"377\":1,\"958\":1,\"1427\":2,\"2040\":1}}],[\"pure\",{\"1\":{\"2062\":2,\"2067\":1}}],[\"purpose\",{\"1\":{\"156\":1}}],[\"pubsub\",{\"0\":{\"1439\":1},\"1\":{\"1439\":6}}],[\"publicinstanceproxyhandlers\",{\"1\":{\"1997\":1,\"2001\":1}}],[\"public\",{\"1\":{\"294\":3,\"316\":1,\"332\":3,\"691\":1,\"958\":3,\"1427\":1,\"1539\":2,\"2050\":1}}],[\"publish\",{\"1\":{\"91\":1,\"92\":1,\"156\":1,\"1439\":1}}],[\"pug\",{\"1\":{\"329\":1,\"331\":2}}],[\"putimagedata\",{\"1\":{\"738\":2,\"740\":1}}],[\"put\",{\"1\":{\"268\":1,\"339\":1,\"1632\":1}}],[\"pull\",{\"1\":{\"13\":1,\"17\":3}}],[\"pushwithredirect\",{\"1\":{\"2041\":1,\"2046\":1}}],[\"pushhash\",{\"1\":{\"2029\":1,\"2030\":1}}],[\"pushstate\",{\"1\":{\"2027\":1,\"2030\":2,\"2048\":1,\"2050\":6,\"2058\":6,\"2061\":5}}],[\"push的执行流程\",{\"1\":{\"1925\":1}}],[\"pushtarget\",{\"1\":{\"1804\":1}}],[\"pushfilter\",{\"1\":{\"1794\":3}}],[\"push是追加历史记录\",{\"1\":{\"1463\":1}}],[\"push默认是推不上去\",{\"1\":{\"13\":1}}],[\"push\",{\"1\":{\"12\":4,\"13\":3,\"14\":3,\"17\":3,\"155\":2,\"417\":1,\"418\":1,\"419\":2,\"441\":1,\"451\":2,\"452\":1,\"456\":1,\"458\":1,\"464\":1,\"472\":1,\"493\":1,\"498\":1,\"772\":2,\"853\":3,\"925\":2,\"933\":1,\"995\":3,\"1396\":1,\"1428\":1,\"1464\":1,\"1777\":1,\"1785\":3,\"1792\":2,\"1793\":7,\"1794\":1,\"1800\":1,\"1804\":1,\"1814\":1,\"1822\":1,\"1824\":1,\"1890\":1,\"1891\":1,\"1893\":1,\"1894\":1,\"1895\":1,\"1915\":1,\"1925\":14,\"1954\":1,\"1974\":12,\"1977\":1,\"1978\":2,\"1979\":20,\"1984\":1,\"1985\":1,\"1993\":5,\"2029\":4,\"2030\":2,\"2032\":2,\"2034\":1,\"2035\":1,\"2041\":3,\"2043\":1,\"2046\":1,\"2047\":5,\"2053\":1,\"2057\":3,\"2058\":14,\"2061\":2,\"2064\":1,\"2065\":2,\"2071\":1,\"2072\":2,\"2073\":3,\"2074\":3,\"2075\":1,\"2078\":1,\"2079\":2,\"2080\":2,\"2081\":3,\"2082\":1,\"2083\":2}}],[\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\",{\"1\":{\"2101\":1}}],[\"bg\",{\"1\":{\"1742\":1}}],[\"b×c\",{\"1\":{\"1728\":1}}],[\"bn\",{\"1\":{\"1665\":2}}],[\"bname\",{\"1\":{\"832\":2}}],[\"bmp\",{\"1\":{\"1592\":1}}],[\"b37399aa\",{\"1\":{\"1266\":2}}],[\"bj\",{\"1\":{\"1121\":2}}],[\"btns\",{\"1\":{\"1581\":3,\"1582\":3}}],[\"btn\",{\"1\":{\"1088\":8,\"1112\":2,\"1151\":3,\"1214\":7,\"1216\":1,\"1218\":1,\"1259\":1,\"1559\":2,\"1576\":2}}],[\"btn4\",{\"1\":{\"1088\":2}}],[\"btn3\",{\"1\":{\"1088\":2,\"2061\":2}}],[\"btn2\",{\"1\":{\"1088\":2,\"2061\":2}}],[\"btn1\",{\"1\":{\"1088\":2,\"2061\":2}}],[\"b++\",{\"1\":{\"978\":1}}],[\"by\",{\"1\":{\"958\":1,\"2058\":1}}],[\"byted\",{\"1\":{\"1768\":2}}],[\"bytes\",{\"1\":{\"1674\":1}}],[\"byte\",{\"1\":{\"165\":1}}],[\"bc\",{\"1\":{\"918\":1,\"925\":8,\"1745\":2}}],[\"b很少使用\",{\"1\":{\"916\":1}}],[\"b对应的还有\",{\"1\":{\"916\":1}}],[\"b匹配的是一边是单词字符\",{\"1\":{\"916\":1}}],[\"b>\",{\"1\":{\"912\":1}}],[\"bfa\",{\"1\":{\"627\":1,\"635\":1,\"636\":1,\"651\":1,\"1334\":2}}],[\"bfc\",{\"0\":{\"564\":1},\"1\":{\"548\":2,\"564\":12,\"580\":1},\"2\":{\"607\":1}}],[\"bff\",{\"0\":{\"218\":1},\"1\":{\"218\":7}}],[\"blur\",{\"1\":{\"1214\":1}}],[\"blue\",{\"1\":{\"535\":1,\"623\":1,\"810\":1,\"853\":3,\"854\":6,\"1207\":2,\"1278\":2,\"1279\":3,\"1280\":2,\"1332\":2,\"1339\":2}}],[\"blank\",{\"1\":{\"664\":1,\"2065\":3}}],[\"black\",{\"1\":{\"580\":10,\"1284\":2,\"1307\":3,\"1331\":2}}],[\"blowfish\",{\"1\":{\"2099\":1}}],[\"blob|file\",{\"1\":{\"773\":4}}],[\"blob\",{\"1\":{\"771\":1,\"772\":1,\"773\":4}}],[\"blockquote\",{\"1\":{\"662\":1}}],[\"block和margin\",{\"1\":{\"546\":1}}],[\"block\",{\"0\":{\"564\":1},\"1\":{\"540\":2,\"546\":3,\"548\":6,\"552\":1,\"566\":1,\"570\":1,\"578\":1,\"661\":1,\"948\":2,\"1337\":2,\"1388\":3,\"1795\":5}}],[\"blogpost\",{\"1\":{\"1493\":1}}],[\"blog\",{\"1\":{\"64\":1,\"219\":1,\"339\":1,\"368\":1,\"958\":1,\"1087\":1}}],[\"bbc\",{\"1\":{\"918\":1}}],[\"bbb\",{\"1\":{\"911\":1}}],[\"bb\",{\"1\":{\"384\":3,\"1053\":1}}],[\"bb=\",{\"1\":{\"384\":1}}],[\"b=a+x=a\",{\"1\":{\"1753\":1}}],[\"b=100\",{\"1\":{\"1587\":1}}],[\"b=2\",{\"1\":{\"494\":1,\"1792\":1}}],[\"b=200\",{\"1\":{\"268\":2,\"284\":1,\"345\":1,\"1576\":2,\"1577\":1}}],[\"b=5\",{\"1\":{\"398\":1}}],[\"b=3\",{\"1\":{\"396\":7}}],[\"b=\",{\"1\":{\"383\":1,\"395\":1}}],[\"bigsum\",{\"1\":{\"1452\":2,\"1453\":5,\"1454\":2}}],[\"big\",{\"1\":{\"1289\":2,\"1290\":6,\"1407\":2}}],[\"bigint\",{\"1\":{\"787\":1,\"1935\":1}}],[\"bis\",{\"1\":{\"916\":1}}],[\"bill\",{\"1\":{\"779\":2,\"828\":2,\"833\":3,\"848\":2,\"849\":2,\"863\":7}}],[\"bilibili\",{\"1\":{\"191\":1,\"212\":1,\"345\":1}}],[\"bidelman\",{\"1\":{\"773\":1}}],[\"bird\",{\"1\":{\"727\":8}}],[\"birthtime\",{\"1\":{\"260\":1}}],[\"bias直接获取某一层的权重和偏置\",{\"1\":{\"1670\":1}}],[\"bias=true\",{\"1\":{\"1667\":1}}],[\"bias\",{\"1\":{\"417\":4,\"1667\":1,\"1670\":3,\"1671\":4}}],[\"binddynamickeys\",{\"1\":{\"1797\":1}}],[\"bindobjectlisteners\",{\"1\":{\"1797\":1}}],[\"bindobjectprops\",{\"1\":{\"1797\":1}}],[\"bind举例\",{\"1\":{\"1353\":1}}],[\"binding\",{\"1\":{\"1352\":2,\"1406\":4,\"1407\":7,\"1793\":3}}],[\"bind基本都能实现这一功能\",{\"1\":{\"995\":1}}],[\"bindthis\",{\"1\":{\"428\":4}}],[\"bind\",{\"0\":{\"426\":1,\"1355\":1},\"1\":{\"433\":1,\"990\":1,\"995\":37,\"996\":1,\"1216\":2,\"1353\":3,\"1397\":1,\"1404\":1,\"1406\":1,\"1407\":7,\"1804\":1,\"1828\":1,\"1861\":1,\"1927\":2,\"1928\":1,\"2045\":3,\"2053\":1,\"2055\":1,\"2065\":2,\"2072\":1}}],[\"bin\",{\"1\":{\"148\":1,\"177\":2,\"261\":1,\"332\":2}}],[\"bin来查看\",{\"1\":{\"87\":1}}],[\"bin下\",{\"1\":{\"66\":1}}],[\"b1\",{\"1\":{\"165\":1,\"517\":1}}],[\"being\",{\"1\":{\"1799\":1,\"1803\":1,\"1804\":1}}],[\"because\",{\"1\":{\"1352\":1,\"1803\":1,\"2075\":1}}],[\"beginning\",{\"1\":{\"2058\":1}}],[\"begin\",{\"1\":{\"1181\":3}}],[\"beginpath\",{\"1\":{\"711\":4,\"713\":2,\"745\":1}}],[\"been\",{\"1\":{\"924\":6,\"1804\":2}}],[\"beep\",{\"1\":{\"912\":1}}],[\"bevel\",{\"1\":{\"708\":1}}],[\"beziercurveto\",{\"1\":{\"719\":1}}],[\"bezier\",{\"1\":{\"641\":2}}],[\"bell\",{\"1\":{\"623\":2}}],[\"between\",{\"1\":{\"588\":1,\"590\":1}}],[\"beforeguards\",{\"1\":{\"2041\":2,\"2043\":4,\"2079\":1}}],[\"beforeresolveguards\",{\"1\":{\"2041\":2,\"2043\":1,\"2083\":1}}],[\"beforeresolve\",{\"0\":{\"2083\":1},\"1\":{\"2029\":1,\"2041\":1,\"2071\":2,\"2083\":1}}],[\"beforerouterenter\",{\"0\":{\"2082\":1}}],[\"beforerouteupdate\",{\"0\":{\"2080\":1},\"1\":{\"2029\":2,\"2071\":3,\"2074\":1,\"2080\":2}}],[\"beforerouteleave\",{\"0\":{\"2078\":1},\"1\":{\"1467\":1,\"2029\":1,\"2071\":3,\"2072\":1,\"2074\":2,\"2078\":2}}],[\"beforerouteenter\",{\"1\":{\"1467\":1,\"2029\":3,\"2069\":4,\"2071\":2,\"2074\":2,\"2082\":2}}],[\"beforehooks\",{\"1\":{\"2029\":1}}],[\"beforeunloadlistener\",{\"1\":{\"2060\":2,\"2061\":4}}],[\"beforeunload\",{\"1\":{\"2060\":3,\"2061\":3}}],[\"beforeunmount\",{\"1\":{\"1500\":2}}],[\"beforeupdated\",{\"1\":{\"2002\":1}}],[\"beforeupdate\",{\"1\":{\"1806\":1,\"1954\":4}}],[\"beforeupdate===>onbeforeupdate\",{\"1\":{\"1500\":1}}],[\"beforemount\",{\"1\":{\"1500\":1,\"1806\":1,\"1954\":4}}],[\"beforeenter\",{\"0\":{\"2081\":1},\"1\":{\"1467\":2,\"2028\":1,\"2029\":2,\"2071\":2,\"2081\":8}}],[\"beforeeach\",{\"0\":{\"2079\":1},\"1\":{\"1467\":2,\"2029\":1,\"2041\":2,\"2043\":3,\"2071\":2,\"2079\":1}}],[\"beforedestroy改名为\",{\"1\":{\"1500\":1}}],[\"beforedestroy\",{\"1\":{\"1410\":1,\"1807\":1}}],[\"beforepaste\",{\"1\":{\"1160\":1}}],[\"beforecreate===>setup\",{\"1\":{\"1500\":1}}],[\"beforecreate\",{\"1\":{\"1438\":1,\"1799\":1,\"1953\":2,\"1954\":4,\"2016\":1,\"2026\":2,\"2031\":3,\"2071\":1}}],[\"beforecut\",{\"1\":{\"1160\":1}}],[\"beforecopy\",{\"1\":{\"1160\":1}}],[\"before\",{\"1\":{\"521\":2,\"566\":1,\"623\":2,\"1208\":1,\"1209\":1,\"1784\":1,\"1806\":1}}],[\"be\",{\"1\":{\"156\":2,\"259\":1,\"421\":1,\"428\":1,\"933\":1,\"1305\":1,\"1778\":1,\"1799\":1,\"1803\":1,\"1804\":4,\"2031\":1,\"2058\":1}}],[\"br>标签解析为正常的\",{\"1\":{\"1792\":1}}],[\"br\",{\"1\":{\"1729\":1,\"1792\":1}}],[\"brass\",{\"1\":{\"1329\":2}}],[\"brands\",{\"1\":{\"623\":2}}],[\"brand\",{\"1\":{\"200\":3}}],[\"branch\",{\"1\":{\"10\":3,\"12\":2,\"17\":1}}],[\"bruce\",{\"1\":{\"895\":1}}],[\"browserlanguage\",{\"1\":{\"1091\":1}}],[\"browser\",{\"1\":{\"772\":1,\"1083\":1}}],[\"browserify\",{\"1\":{\"119\":1}}],[\"break用于跳出某一个\",{\"1\":{\"819\":1}}],[\"break停止\",{\"1\":{\"401\":1}}],[\"break\",{\"0\":{\"823\":1,\"824\":1},\"1\":{\"401\":1,\"416\":1,\"819\":4,\"824\":6,\"1785\":2,\"1792\":3,\"1794\":10,\"1803\":1,\"1816\":1,\"1962\":1,\"1974\":9,\"1979\":5,\"2027\":3,\"2049\":2,\"2050\":2}}],[\"brew\",{\"1\":{\"94\":1}}],[\"bus\",{\"1\":{\"1310\":5}}],[\"bubbling\",{\"1\":{\"1139\":1}}],[\"bubblesort\",{\"1\":{\"410\":1}}],[\"bucketindex\",{\"1\":{\"418\":2,\"419\":2}}],[\"bucketcount\",{\"1\":{\"418\":2}}],[\"buckets\",{\"1\":{\"418\":3,\"419\":3}}],[\"bucketsize\",{\"1\":{\"418\":5}}],[\"bucketsort\",{\"1\":{\"418\":2}}],[\"bucket\",{\"1\":{\"417\":3,\"1886\":3,\"1888\":2,\"1889\":7,\"1890\":3,\"1892\":1,\"1893\":1,\"1906\":2,\"1985\":3}}],[\"builtins\",{\"1\":{\"402\":1}}],[\"builtinimporter\",{\"1\":{\"377\":1}}],[\"buildstate\",{\"1\":{\"2058\":5}}],[\"buildregex\",{\"1\":{\"1793\":1}}],[\"buildheap\",{\"1\":{\"416\":3}}],[\"build\",{\"1\":{\"71\":1,\"148\":5,\"155\":3}}],[\"bufferdepth\",{\"1\":{\"1098\":1}}],[\"buffered\",{\"1\":{\"752\":1}}],[\"buffer\",{\"1\":{\"192\":2,\"251\":1}}],[\"butt\",{\"1\":{\"708\":2}}],[\"button1\",{\"1\":{\"1332\":1}}],[\"buttonsecond\",{\"1\":{\"1297\":3}}],[\"buttonprimary\",{\"1\":{\"1297\":3}}],[\"button>\",{\"1\":{\"670\":3,\"1081\":1,\"1088\":7,\"1093\":1,\"1094\":3,\"1096\":1,\"1112\":1,\"1137\":1,\"1139\":1,\"1140\":1,\"1143\":1,\"1144\":2,\"1145\":1,\"1146\":2,\"1152\":3,\"1157\":3,\"1162\":1,\"1368\":1,\"1369\":2,\"1415\":1,\"1486\":1,\"1515\":1,\"1518\":1,\"1559\":1,\"1569\":1,\"2061\":3}}],[\"button\",{\"1\":{\"670\":2,\"756\":2,\"1081\":1,\"1137\":1,\"1145\":1,\"1153\":3,\"1203\":1,\"1259\":1,\"1293\":1,\"1295\":2,\"1297\":4,\"1298\":3,\"1306\":2,\"1332\":3,\"1559\":1,\"1576\":1,\"1581\":1,\"1582\":1,\"1827\":1,\"2065\":4}}],[\"but\",{\"1\":{\"156\":1,\"1789\":1,\"1804\":1,\"2058\":1,\"2065\":1}}],[\"bundle\",{\"1\":{\"138\":1,\"142\":1,\"155\":2,\"158\":1}}],[\"bundler\",{\"1\":{\"122\":1}}],[\"bug\",{\"1\":{\"17\":1,\"261\":1,\"262\":1,\"980\":2,\"1242\":1,\"1272\":1}}],[\"bounce\",{\"1\":{\"1441\":1}}],[\"boundary=\",{\"1\":{\"1634\":1}}],[\"boundary\",{\"1\":{\"916\":1,\"1634\":1}}],[\"boundedsemaphore\",{\"1\":{\"408\":1}}],[\"bob\",{\"1\":{\"1048\":1,\"1049\":1,\"2045\":2,\"2099\":4}}],[\"bol\",{\"1\":{\"980\":2}}],[\"bold\",{\"1\":{\"621\":2,\"1265\":5,\"1275\":4,\"1277\":2,\"1328\":1}}],[\"both\",{\"1\":{\"565\":1,\"566\":2,\"644\":2,\"2075\":1}}],[\"bottom值越大\",{\"1\":{\"569\":1}}],[\"bottom\",{\"1\":{\"545\":1,\"546\":1,\"569\":1,\"574\":3,\"582\":2,\"603\":2,\"619\":1,\"625\":1,\"630\":1,\"636\":2,\"730\":1,\"732\":1,\"1259\":2,\"1262\":2,\"1284\":1}}],[\"box2\",{\"1\":{\"565\":3}}],[\"box1\",{\"1\":{\"565\":3,\"566\":1,\"1127\":2,\"1129\":1}}],[\"box\",{\"0\":{\"542\":1},\"1\":{\"516\":1,\"518\":1,\"547\":2,\"569\":1,\"582\":3,\"613\":2,\"631\":4,\"632\":4,\"635\":2,\"704\":1,\"812\":1,\"1139\":7,\"1140\":7,\"1153\":2,\"1257\":2,\"1260\":2,\"1294\":1,\"1307\":6}}],[\"border=\",{\"1\":{\"287\":2,\"1219\":1}}],[\"border\",{\"0\":{\"544\":1},\"1\":{\"287\":2,\"540\":2,\"542\":1,\"544\":4,\"547\":1,\"553\":4,\"573\":2,\"574\":1,\"580\":10,\"582\":3,\"611\":1,\"612\":4,\"631\":2,\"632\":1,\"635\":1,\"669\":2,\"765\":1,\"773\":1,\"1087\":1,\"1148\":2,\"1153\":1,\"1206\":1,\"1257\":3,\"1260\":2,\"1267\":8,\"1274\":1,\"1284\":11,\"1292\":3,\"1293\":3,\"1294\":4,\"1295\":5,\"1297\":2,\"1307\":4,\"1310\":1,\"1312\":2,\"1313\":2,\"1332\":3,\"1335\":11,\"1336\":3}}],[\"bom\",{\"0\":{\"1076\":1,\"1082\":1,\"1083\":1,\"1084\":1},\"1\":{\"216\":2,\"1083\":3,\"1084\":6,\"1086\":1},\"2\":{\"1107\":1}}],[\"bool\",{\"1\":{\"382\":2,\"1665\":2}}],[\"boolean\",{\"0\":{\"796\":1},\"1\":{\"192\":1,\"787\":1,\"796\":4,\"801\":3,\"810\":1,\"965\":1,\"967\":1,\"972\":1,\"977\":1,\"980\":1,\"1088\":1,\"1151\":1,\"1265\":2,\"1274\":1,\"1428\":1,\"1515\":1,\"1795\":2,\"1805\":1,\"1935\":1,\"1949\":1,\"2058\":6,\"2064\":2,\"2075\":2}}],[\"bootcss\",{\"1\":{\"324\":1,\"1207\":2,\"1219\":1}}],[\"bootstrap\",{\"1\":{\"45\":1}}],[\"books\",{\"1\":{\"212\":1}}],[\"bookschema\",{\"1\":{\"191\":2,\"212\":2}}],[\"book\",{\"1\":{\"191\":1}}],[\"bookmodel\",{\"1\":{\"191\":2,\"205\":1,\"206\":2,\"207\":2,\"212\":7}}],[\"body>\",{\"1\":{\"287\":2,\"329\":1,\"580\":4,\"657\":1,\"764\":1,\"765\":1,\"769\":6,\"770\":2,\"772\":3,\"773\":1,\"952\":1,\"1078\":1,\"1079\":1,\"1080\":1,\"1081\":1,\"1086\":3,\"1087\":7,\"1088\":13,\"1091\":2,\"1092\":1,\"1093\":2,\"1094\":3,\"1096\":1,\"1098\":1,\"1102\":1,\"1104\":1,\"1105\":4,\"1112\":4,\"1120\":1,\"1123\":2,\"1124\":1,\"1137\":1,\"1139\":2,\"1140\":2,\"1143\":1,\"1144\":2,\"1145\":1,\"1146\":2,\"1148\":1,\"1149\":1,\"1150\":6,\"1152\":3,\"1153\":2,\"1154\":6,\"1155\":2,\"1156\":5,\"1157\":3,\"1158\":3,\"1160\":2,\"1161\":3,\"1162\":2,\"1201\":2,\"1207\":2,\"1219\":1,\"1954\":1,\"2061\":1}}],[\"body\",{\"1\":{\"30\":1,\"41\":1,\"44\":1,\"138\":1,\"283\":3,\"317\":5,\"474\":1,\"478\":1,\"582\":2,\"616\":2,\"651\":1,\"1087\":2,\"1105\":3,\"1111\":4,\"1112\":3,\"1120\":1,\"1123\":2,\"1139\":4,\"1140\":3,\"1141\":1,\"1150\":8,\"1153\":1,\"1198\":1,\"1248\":3,\"1249\":2,\"1250\":1,\"1259\":2,\"1260\":2,\"1328\":1,\"1575\":2,\"1587\":1,\"1609\":2,\"1805\":1,\"1888\":1,\"1890\":1,\"1954\":4,\"1975\":1,\"1978\":1,\"1979\":1}}],[\"bower\",{\"1\":{\"15\":1}}],[\"bad\",{\"1\":{\"1635\":1}}],[\"banner\",{\"1\":{\"1328\":1,\"1341\":2}}],[\"baby\",{\"1\":{\"925\":7}}],[\"babelrc\",{\"1\":{\"148\":1,\"149\":1}}],[\"babel的配置文件\",{\"1\":{\"148\":1}}],[\"babeltest\",{\"1\":{\"148\":3}}],[\"babeljs\",{\"1\":{\"146\":1}}],[\"babel\",{\"0\":{\"146\":1,\"147\":1,\"150\":1},\"1\":{\"146\":4,\"147\":7,\"148\":17,\"149\":17,\"150\":6,\"155\":4,\"1427\":2}}],[\"batches\",{\"1\":{\"1674\":1,\"1680\":4}}],[\"batchnorm2d\",{\"1\":{\"1665\":4}}],[\"batchnorm2d是\",{\"1\":{\"1665\":1}}],[\"batchnorm\",{\"0\":{\"1665\":1}}],[\"batch\",{\"1\":{\"1655\":8,\"1662\":3,\"1663\":1,\"1665\":3,\"1667\":1,\"1674\":1}}],[\"bat\",{\"1\":{\"925\":9}}],[\"batgirl\",{\"1\":{\"895\":1}}],[\"batman\",{\"1\":{\"895\":2}}],[\"bath\",{\"1\":{\"143\":1}}],[\"bage\",{\"1\":{\"832\":2}}],[\"ball\",{\"1\":{\"644\":1}}],[\"basic\",{\"1\":{\"1385\":3}}],[\"basis的简写\",{\"1\":{\"592\":1}}],[\"basis\",{\"1\":{\"591\":2}}],[\"baseel\",{\"1\":{\"2054\":3}}],[\"based\",{\"1\":{\"1804\":1}}],[\"basecreaterenderer\",{\"1\":{\"1944\":1,\"1997\":1,\"1998\":1}}],[\"basecompile\",{\"1\":{\"1790\":1}}],[\"basector\",{\"1\":{\"1423\":1}}],[\"basevalueexpression\",{\"1\":{\"1358\":1}}],[\"baseline\",{\"1\":{\"589\":1,\"625\":1}}],[\"base64后的\",{\"1\":{\"367\":2}}],[\"base64\",{\"1\":{\"345\":1,\"666\":1}}],[\"base\",{\"0\":{\"2054\":1},\"1\":{\"264\":1,\"395\":3,\"1306\":2,\"1338\":3,\"1423\":1,\"1828\":1,\"2027\":3,\"2034\":2,\"2041\":1,\"2052\":2,\"2053\":14,\"2054\":22,\"2055\":4,\"2057\":3,\"2058\":36,\"2059\":2,\"2060\":1,\"2061\":6}}],[\"basename\",{\"1\":{\"264\":3}}],[\"baseurl\",{\"1\":{\"42\":1,\"45\":1,\"1584\":1,\"1586\":1}}],[\"ba\",{\"1\":{\"493\":1}}],[\"baidu\",{\"1\":{\"268\":2,\"345\":1,\"372\":1,\"1093\":1,\"1094\":2,\"1156\":6,\"1205\":1}}],[\"backward\",{\"1\":{\"1659\":1,\"1680\":1}}],[\"backwards\",{\"1\":{\"644\":2}}],[\"backinup\",{\"1\":{\"1441\":1}}],[\"back\",{\"1\":{\"912\":1,\"1097\":2,\"1464\":1,\"2034\":1,\"2041\":1,\"2049\":1,\"2055\":1,\"2058\":10,\"2061\":3}}],[\"backface\",{\"1\":{\"617\":1}}],[\"backspace\",{\"1\":{\"384\":1}}],[\"backend\",{\"1\":{\"218\":1}}],[\"backgroundmusic\",{\"1\":{\"1132\":2}}],[\"backgroundcolor\",{\"1\":{\"287\":2,\"1127\":1,\"1129\":1}}],[\"background\",{\"1\":{\"30\":1,\"41\":1,\"44\":1,\"138\":1,\"287\":4,\"520\":2,\"546\":2,\"582\":7,\"627\":1,\"628\":1,\"629\":1,\"630\":1,\"631\":2,\"632\":1,\"633\":1,\"634\":1,\"635\":4,\"636\":3,\"643\":2,\"651\":1,\"764\":1,\"1087\":5,\"1127\":1,\"1139\":1,\"1140\":1,\"1155\":4,\"1201\":2,\"1207\":4,\"1232\":2,\"1248\":3,\"1259\":2,\"1262\":2,\"1276\":1,\"1282\":1,\"1297\":4,\"1306\":2,\"1309\":2,\"1310\":1,\"1312\":2,\"1318\":4,\"1328\":2,\"1330\":2,\"1332\":4,\"1334\":2,\"1338\":1,\"1339\":2}}],[\"bar\",{\"1\":{\"27\":2,\"28\":4,\"29\":3,\"30\":2,\"35\":3,\"672\":1,\"674\":1,\"991\":5,\"1015\":5,\"1891\":1,\"1896\":2,\"1902\":10,\"1910\":6,\"1911\":6,\"1937\":1}}],[\"bak\",{\"1\":{\"15\":1}}],[\"b\",{\"1\":{\"17\":1,\"49\":2,\"66\":3,\"286\":1,\"382\":3,\"383\":1,\"384\":2,\"395\":9,\"396\":12,\"397\":3,\"398\":2,\"401\":2,\"433\":2,\"466\":1,\"472\":4,\"482\":2,\"494\":1,\"737\":1,\"789\":10,\"792\":5,\"793\":2,\"806\":8,\"808\":4,\"809\":4,\"812\":1,\"832\":6,\"835\":2,\"847\":9,\"848\":6,\"849\":4,\"855\":9,\"902\":4,\"910\":1,\"911\":1,\"916\":3,\"918\":6,\"919\":2,\"923\":1,\"933\":8,\"934\":2,\"944\":5,\"947\":2,\"948\":13,\"951\":4,\"958\":6,\"978\":1,\"983\":2,\"985\":4,\"995\":7,\"1015\":4,\"1023\":1,\"1028\":2,\"1029\":2,\"1030\":9,\"1053\":4,\"1054\":1,\"1063\":3,\"1064\":1,\"1065\":1,\"1071\":1,\"1072\":1,\"1149\":1,\"1188\":2,\"1201\":19,\"1267\":2,\"1301\":2,\"1309\":12,\"1310\":3,\"1312\":5,\"1313\":6,\"1318\":8,\"1340\":3,\"1379\":1,\"1386\":2,\"1394\":8,\"1437\":3,\"1488\":2,\"1493\":2,\"1499\":3,\"1586\":1,\"1609\":2,\"1613\":1,\"1722\":1,\"1723\":1,\"1725\":1,\"1727\":1,\"1728\":3,\"1737\":3,\"1738\":2,\"1741\":2,\"1742\":1,\"1745\":4,\"1746\":3,\"1751\":4,\"1752\":2,\"1753\":4,\"1769\":3,\"1788\":2,\"1792\":2,\"1797\":1,\"1854\":3,\"1865\":2,\"1897\":3,\"2065\":2}}],[\"eps\",{\"1\":{\"1665\":2}}],[\"epochs\",{\"1\":{\"1680\":4}}],[\"epoch\",{\"1\":{\"1655\":1,\"1680\":4}}],[\"e=500\",{\"1\":{\"1587\":1}}],[\"etag\",{\"1\":{\"1534\":2}}],[\"etc\",{\"1\":{\"372\":1}}],[\"effet\",{\"1\":{\"1984\":1}}],[\"effectively\",{\"1\":{\"2065\":1}}],[\"effectfn\",{\"1\":{\"1890\":22,\"1891\":6,\"1892\":7,\"1893\":16,\"1894\":8,\"1895\":9,\"1896\":9,\"1897\":9,\"1906\":22,\"1917\":3,\"1918\":3,\"1930\":3,\"1932\":3,\"1984\":17,\"1985\":8,\"1986\":2,\"1987\":3,\"1990\":3,\"1993\":6}}],[\"effectstack\",{\"1\":{\"1891\":6,\"1893\":4,\"1894\":4,\"1895\":4,\"1984\":6}}],[\"effectstorun\",{\"1\":{\"1890\":2,\"1892\":3,\"1893\":3,\"1906\":10,\"1917\":2,\"1918\":2,\"1930\":1,\"1932\":1,\"1985\":3,\"1990\":1,\"1993\":4}}],[\"effects\",{\"1\":{\"1889\":9,\"1890\":6,\"1892\":5,\"1893\":3,\"1906\":6,\"1918\":2,\"1985\":3,\"1993\":2}}],[\"effect\",{\"0\":{\"1891\":1},\"1\":{\"1886\":2,\"1888\":6,\"1890\":2,\"1891\":8,\"1893\":4,\"1894\":3,\"1895\":2,\"1896\":6,\"1897\":9,\"1902\":2,\"1910\":1,\"1911\":1,\"1925\":2,\"1929\":1,\"1943\":1,\"1954\":1,\"1984\":1,\"1986\":1,\"1987\":1,\"1997\":1,\"2002\":4,\"2020\":1}}],[\"effectallowed\",{\"1\":{\"765\":1}}],[\"efefef\",{\"1\":{\"1330\":3}}],[\"eq\",{\"1\":{\"1203\":1,\"1204\":7}}],[\"equiv=\",{\"1\":{\"287\":2,\"329\":1,\"693\":1,\"764\":1,\"773\":1}}],[\"eight\",{\"1\":{\"1148\":2}}],[\"erina\",{\"1\":{\"2062\":1}}],[\"eric\",{\"1\":{\"773\":1}}],[\"er\",{\"1\":{\"906\":1}}],[\"errmsg\",{\"1\":{\"1592\":2}}],[\"errcode\",{\"1\":{\"1592\":2}}],[\"errortypes\",{\"1\":{\"2075\":2}}],[\"errorlisteners\",{\"1\":{\"2041\":1}}],[\"errors\",{\"1\":{\"2040\":1,\"2065\":1}}],[\"errorcbs\",{\"1\":{\"2029\":1}}],[\"error=>\",{\"1\":{\"1445\":1}}],[\"error\",{\"1\":{\"35\":1,\"64\":2,\"191\":1,\"212\":7,\"250\":2,\"271\":1,\"275\":1,\"332\":1,\"476\":4,\"499\":2,\"504\":4,\"750\":1,\"752\":3,\"1105\":1,\"1214\":1,\"1251\":1,\"1252\":2,\"1253\":2,\"1284\":1,\"1305\":1,\"1353\":2,\"1394\":1,\"1445\":1,\"1635\":1,\"1777\":5,\"1954\":3,\"1956\":2,\"2047\":2,\"2058\":2,\"2075\":6,\"2084\":1}}],[\"err\",{\"1\":{\"15\":1,\"191\":3,\"200\":5,\"201\":6,\"202\":6,\"203\":12,\"205\":2,\"206\":4,\"207\":4,\"209\":3,\"210\":3,\"211\":3,\"212\":3,\"244\":3,\"246\":3,\"250\":4,\"254\":3,\"255\":5,\"257\":6,\"258\":3,\"259\":9,\"260\":3,\"294\":2,\"368\":2,\"1778\":2,\"2029\":1,\"2047\":4,\"2058\":3,\"2072\":1,\"2075\":2}}],[\"easy\",{\"1\":{\"1324\":1}}],[\"ease\",{\"1\":{\"641\":4}}],[\"each\",{\"0\":{\"1199\":1},\"1\":{\"1199\":4,\"1269\":2,\"1273\":1,\"1278\":2,\"1283\":1,\"1286\":1,\"1287\":2,\"1288\":1,\"1289\":2,\"1290\":8}}],[\"eat\",{\"1\":{\"1023\":5,\"1357\":1}}],[\"eaddrinuse\",{\"1\":{\"275\":1}}],[\"e66465\",{\"1\":{\"636\":1}}],[\"eg\",{\"1\":{\"535\":1,\"544\":1,\"661\":1,\"662\":1,\"890\":1,\"1370\":1}}],[\"egg\",{\"1\":{\"223\":3}}],[\"e4\",{\"1\":{\"493\":1}}],[\"e5\",{\"1\":{\"493\":1}}],[\"eduardo\",{\"1\":{\"2012\":1}}],[\"edge\",{\"1\":{\"1822\":1}}],[\"ed\",{\"1\":{\"487\":2}}],[\"editor\",{\"1\":{\"15\":1}}],[\"eyj0exaioijkv1qilcjhbgcioijiuzi1nij9\",{\"1\":{\"365\":1}}],[\"eyjzdwiioiixmjm0nty3odkwiiwibmftzsi6ikpvag4grg9liiwiywrtaw4ionrydwv9\",{\"1\":{\"364\":1,\"366\":1,\"367\":1}}],[\"eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9\",{\"1\":{\"364\":1,\"367\":1}}],[\"ejs|hbs|hjs|jade|pug|twig|vash\",{\"1\":{\"331\":1}}],[\"ejs文件\",{\"1\":{\"329\":1}}],[\"ejs解析模板返回结构\",{\"1\":{\"327\":1}}],[\"ejs\",{\"0\":{\"322\":1,\"324\":1,\"325\":1,\"328\":1},\"1\":{\"324\":3,\"326\":1,\"327\":3,\"329\":2,\"331\":2,\"332\":2}}],[\"e\",{\"1\":{\"245\":2,\"331\":1,\"332\":1,\"384\":1,\"403\":2,\"493\":3,\"494\":3,\"764\":5,\"765\":18,\"770\":6,\"773\":2,\"789\":2,\"849\":1,\"854\":1,\"856\":1,\"879\":4,\"884\":1,\"888\":1,\"1160\":8,\"1161\":15,\"1162\":7,\"1187\":4,\"1219\":3,\"1231\":2,\"1357\":9,\"1379\":1,\"1388\":1,\"1772\":4,\"1785\":7,\"1796\":1,\"1797\":4,\"1804\":2,\"1815\":2,\"1822\":2,\"1855\":2,\"1949\":5,\"2029\":5,\"2050\":4,\"2065\":18}}],[\"every\",{\"1\":{\"857\":3,\"944\":1,\"945\":2,\"1795\":1,\"1915\":1}}],[\"evenly\",{\"1\":{\"588\":1}}],[\"even\",{\"1\":{\"287\":2,\"520\":1,\"857\":2,\"1203\":1}}],[\"event中对应事件名的回调函数并执行\",{\"1\":{\"1815\":1}}],[\"events属性上查找事件名对应的回调\",{\"1\":{\"1368\":1}}],[\"events属性中\",{\"1\":{\"1368\":1}}],[\"events属性\",{\"1\":{\"1368\":1}}],[\"events\",{\"1\":{\"1368\":7,\"1801\":1,\"1802\":4,\"1813\":1,\"1814\":3,\"1815\":1,\"1816\":4}}],[\"event2\",{\"1\":{\"1214\":1}}],[\"event12\",{\"1\":{\"1214\":1}}],[\"event1\",{\"1\":{\"1214\":2}}],[\"eventphase\",{\"1\":{\"1157\":3}}],[\"eventname\",{\"1\":{\"1151\":1,\"1954\":2}}],[\"event\",{\"0\":{\"1163\":1,\"1219\":1},\"1\":{\"156\":1,\"408\":2,\"764\":3,\"765\":9,\"993\":3,\"1139\":1,\"1140\":1,\"1151\":13,\"1152\":8,\"1153\":26,\"1154\":6,\"1155\":2,\"1156\":11,\"1157\":3,\"1158\":2,\"1160\":2,\"1161\":4,\"1162\":2,\"1182\":4,\"1219\":10,\"1357\":2,\"1358\":5,\"1369\":1,\"1572\":1,\"1784\":1,\"1802\":19,\"1814\":6,\"1815\":3,\"1816\":7,\"1817\":3,\"1954\":4,\"2050\":4,\"2061\":2}}],[\"evt\",{\"1\":{\"772\":10,\"773\":2}}],[\"ev\",{\"1\":{\"765\":2}}],[\"evan\",{\"1\":{\"156\":1}}],[\"evaluate\",{\"1\":{\"1680\":1,\"1804\":1,\"1849\":1}}],[\"eval\",{\"1\":{\"155\":1,\"402\":3,\"936\":1,\"958\":6,\"1013\":1,\"1677\":1}}],[\"emptied\",{\"1\":{\"752\":1}}],[\"emptyobject\",{\"1\":{\"1430\":1}}],[\"empty\",{\"1\":{\"438\":1,\"843\":1,\"845\":1,\"1208\":1,\"1211\":3,\"1805\":1}}],[\"embed\",{\"0\":{\"673\":1}}],[\"embedding\",{\"1\":{\"666\":1}}],[\"em会根据字体大小的改变而改变\",{\"1\":{\"534\":1}}],[\"em是相对于元素的字体大小\",{\"1\":{\"534\":1}}],[\"em\",{\"1\":{\"534\":1,\"621\":2,\"662\":1}}],[\"emits\",{\"1\":{\"1519\":1}}],[\"emit\",{\"1\":{\"156\":1,\"1493\":5,\"1499\":1,\"1953\":3,\"1954\":4,\"2001\":1}}],[\"email\",{\"1\":{\"3\":2,\"349\":1,\"355\":1,\"757\":3,\"758\":1,\"1231\":2}}],[\"encryption\",{\"1\":{\"2099\":1}}],[\"encodeuricomponent\",{\"1\":{\"2095\":1}}],[\"encodedquery\",{\"1\":{\"2065\":1}}],[\"encoded\",{\"1\":{\"2065\":1}}],[\"encodeparam\",{\"1\":{\"2045\":2}}],[\"encodeparams\",{\"1\":{\"2041\":1,\"2045\":1}}],[\"encoding=\",{\"1\":{\"1674\":1}}],[\"encoding\",{\"1\":{\"269\":1,\"773\":1,\"2040\":1}}],[\"enable\",{\"1\":{\"1825\":1}}],[\"enabled\",{\"1\":{\"493\":2,\"1677\":1}}],[\"enough\",{\"1\":{\"1803\":1}}],[\"enqueue\",{\"1\":{\"1779\":1}}],[\"enlarge\",{\"1\":{\"1493\":2}}],[\"ensureslash\",{\"1\":{\"2030\":2}}],[\"ensureurl\",{\"1\":{\"2029\":3}}],[\"ensurerenderer确保渲染器只会进行一次初始化\",{\"1\":{\"1998\":1}}],[\"ensurerenderer\",{\"1\":{\"1944\":1,\"1997\":1,\"1998\":2}}],[\"ensure\",{\"1\":{\"408\":1}}],[\"entend\",{\"1\":{\"1298\":1}}],[\"entercallbackarray\",{\"1\":{\"2075\":5}}],[\"entercallbacks\",{\"1\":{\"2069\":2,\"2075\":5,\"2082\":1}}],[\"enteringrecords\",{\"1\":{\"2072\":1,\"2073\":5,\"2074\":2,\"2081\":2,\"2082\":1}}],[\"enterguards\",{\"1\":{\"2029\":2}}],[\"enter\",{\"1\":{\"404\":1,\"405\":1,\"1370\":1,\"1441\":5,\"1519\":4}}],[\"entries返回值是一个带有next方法的对象\",{\"1\":{\"1931\":1}}],[\"entries\",{\"0\":{\"1058\":1,\"1061\":1},\"1\":{\"830\":3,\"846\":2,\"863\":2,\"870\":2,\"871\":1,\"1058\":2,\"1061\":1,\"1926\":2,\"1931\":2,\"1932\":3,\"2058\":1}}],[\"entry\",{\"1\":{\"124\":2,\"142\":1,\"154\":1,\"155\":5,\"158\":1,\"159\":1}}],[\"engine\",{\"1\":{\"329\":1}}],[\"endtaglength\",{\"1\":{\"1792\":3}}],[\"endtag\",{\"1\":{\"1792\":4,\"1799\":4}}],[\"endtagmatch\",{\"1\":{\"1792\":4}}],[\"endif\",{\"1\":{\"1792\":2}}],[\"endswith\",{\"1\":{\"889\":2}}],[\"ended\",{\"1\":{\"750\":1,\"752\":1}}],[\"endangle\",{\"1\":{\"716\":3}}],[\"end=\",{\"1\":{\"386\":1}}],[\"end\",{\"1\":{\"247\":1,\"252\":2,\"273\":1,\"282\":2,\"283\":3,\"284\":2,\"285\":3,\"286\":7,\"287\":3,\"294\":6,\"301\":1,\"307\":2,\"350\":1,\"415\":4,\"588\":1,\"589\":1,\"1188\":2,\"1204\":2,\"1232\":5,\"1285\":2,\"1353\":3,\"1368\":1,\"1791\":3,\"1792\":30,\"1794\":1,\"1799\":1,\"1805\":2}}],[\"en\",{\"1\":{\"227\":1,\"287\":2,\"329\":1,\"580\":1,\"657\":1,\"691\":1,\"692\":1,\"770\":2,\"1139\":1,\"1140\":1,\"1607\":1}}],[\"enumerable\",{\"1\":{\"1059\":1,\"1060\":1,\"1067\":1,\"1364\":1,\"1804\":1,\"2047\":5,\"2053\":2,\"2055\":2}}],[\"enumerateobjectproperties\",{\"1\":{\"1906\":1}}],[\"enumerate的第一个返回值在循环里同时也起到计数的作\",{\"1\":{\"401\":1}}],[\"enumerate\",{\"1\":{\"401\":1,\"408\":1,\"1655\":2,\"1680\":1}}],[\"enum\",{\"1\":{\"196\":1}}],[\"env可以让你使用最新的\",{\"1\":{\"148\":1}}],[\"envelope\",{\"1\":{\"143\":1}}],[\"env=test\",{\"1\":{\"71\":1}}],[\"env=production\",{\"1\":{\"71\":1}}],[\"env=development\",{\"1\":{\"71\":1}}],[\"env值\",{\"1\":{\"71\":1}}],[\"env\",{\"1\":{\"71\":13,\"148\":3,\"149\":2,\"155\":1,\"1786\":8,\"1789\":6,\"1792\":6,\"1799\":8,\"1802\":2,\"1803\":4,\"1804\":16,\"1805\":12,\"1825\":2,\"1828\":2,\"2027\":2,\"2041\":1,\"2052\":2,\"2053\":2}}],[\"elit\",{\"1\":{\"2101\":1}}],[\"elite\",{\"1\":{\"857\":1}}],[\"elgamal\",{\"1\":{\"2100\":1}}],[\"elclass\",{\"1\":{\"2066\":2}}],[\"elm\",{\"1\":{\"1423\":1,\"1428\":1,\"1788\":3,\"1789\":28,\"1834\":1,\"1835\":3,\"1862\":1}}],[\"el不要写\",{\"1\":{\"1415\":1}}],[\"el用于指定当前vue实例为哪个容器服务\",{\"1\":{\"1349\":1}}],[\"el\",{\"0\":{\"1359\":1,\"1360\":1},\"1\":{\"680\":2,\"681\":7,\"1349\":1,\"1353\":12,\"1356\":1,\"1357\":7,\"1358\":5,\"1360\":5,\"1368\":6,\"1388\":8,\"1392\":6,\"1393\":1,\"1397\":1,\"1407\":3,\"1416\":1,\"1428\":6,\"1450\":1,\"1499\":3,\"1518\":2,\"1789\":3,\"1796\":27,\"1799\":3,\"1802\":2,\"1805\":10,\"1806\":8,\"1878\":6,\"1946\":4,\"1948\":9,\"1949\":17,\"1950\":2,\"1951\":15,\"1962\":3,\"1965\":6,\"1966\":5,\"1968\":1,\"1969\":4,\"2002\":6,\"2025\":1}}],[\"ellipse\",{\"1\":{\"636\":1}}],[\"ele\",{\"1\":{\"483\":4,\"857\":4,\"863\":2}}],[\"elementnode\",{\"1\":{\"1974\":3}}],[\"elementstack\",{\"1\":{\"1974\":6}}],[\"elements\",{\"1\":{\"1204\":5,\"1805\":1,\"1975\":1,\"1978\":2,\"1979\":1}}],[\"element\",{\"0\":{\"1112\":1},\"1\":{\"457\":2,\"857\":2,\"995\":4,\"1112\":11,\"1113\":1,\"1114\":1,\"1118\":1,\"1125\":10,\"1393\":2,\"1406\":4,\"1407\":8,\"1471\":1,\"1789\":2,\"1796\":1,\"1805\":2,\"1974\":5,\"1978\":1,\"2002\":1}}],[\"electron\",{\"0\":{\"222\":1},\"1\":{\"25\":1,\"222\":6}}],[\"else等指令时\",{\"1\":{\"1795\":1}}],[\"elseif\",{\"1\":{\"1388\":1}}],[\"else一起使用\",{\"1\":{\"1388\":1}}],[\"else=\",{\"1\":{\"1388\":1}}],[\"else大差不差\",{\"1\":{\"1284\":1}}],[\"else语句必须放在所有的except语句后面\",{\"1\":{\"403\":1}}],[\"else\",{\"1\":{\"71\":2,\"285\":2,\"294\":4,\"355\":2,\"401\":2,\"414\":3,\"416\":1,\"432\":1,\"451\":1,\"452\":1,\"463\":1,\"472\":3,\"476\":2,\"486\":2,\"493\":2,\"494\":1,\"772\":1,\"818\":3,\"855\":4,\"945\":4,\"953\":3,\"1039\":1,\"1091\":5,\"1104\":2,\"1132\":1,\"1156\":1,\"1259\":1,\"1283\":1,\"1284\":4,\"1353\":1,\"1358\":1,\"1388\":3,\"1404\":2,\"1407\":1,\"1428\":4,\"1467\":5,\"1575\":1,\"1576\":1,\"1675\":1,\"1777\":5,\"1785\":2,\"1789\":17,\"1792\":4,\"1794\":7,\"1795\":4,\"1796\":7,\"1799\":3,\"1802\":2,\"1803\":3,\"1804\":8,\"1805\":3,\"1814\":1,\"1822\":4,\"1824\":1,\"1828\":1,\"1855\":1,\"1862\":1,\"1878\":1,\"1879\":1,\"1893\":1,\"1897\":8,\"1906\":2,\"1929\":2,\"1944\":2,\"1948\":1,\"1949\":6,\"1951\":12,\"1954\":5,\"1956\":6,\"1961\":1,\"1962\":2,\"1965\":3,\"1966\":8,\"1968\":1,\"1969\":7,\"1974\":5,\"1985\":1,\"1987\":3,\"2001\":1,\"2002\":1,\"2016\":1,\"2019\":2,\"2026\":1,\"2029\":6,\"2034\":1,\"2054\":1,\"2058\":1,\"2061\":2,\"2073\":1,\"2074\":2,\"2075\":3,\"2081\":1}}],[\"ecc\",{\"1\":{\"2100\":1}}],[\"echo\",{\"1\":{\"64\":2}}],[\"ecmascript5\",{\"1\":{\"875\":1,\"877\":1}}],[\"ecmascript\",{\"1\":{\"216\":4,\"240\":1,\"790\":2,\"792\":1,\"794\":2,\"795\":1,\"796\":1,\"803\":1,\"828\":4,\"830\":1,\"846\":1,\"847\":1,\"849\":1,\"858\":1,\"859\":1,\"866\":1,\"867\":1,\"874\":1,\"895\":1,\"911\":1,\"924\":1,\"933\":1,\"934\":1,\"941\":2,\"948\":1,\"1086\":2}}],[\"ecma\",{\"1\":{\"22\":1,\"25\":1,\"46\":1,\"1903\":1,\"1905\":1,\"1906\":1,\"1910\":1,\"1927\":1}}],[\"esapi\",{\"1\":{\"2095\":1}}],[\"essential\",{\"1\":{\"1903\":1}}],[\"esc\",{\"1\":{\"1370\":1}}],[\"escape\",{\"1\":{\"773\":1,\"2095\":1}}],[\"es7\",{\"1\":{\"1053\":1}}],[\"es2015\",{\"1\":{\"148\":5}}],[\"esmodule\",{\"1\":{\"142\":1,\"155\":1}}],[\"esm\",{\"2\":{\"54\":1}}],[\"es6的set去重\",{\"0\":{\"455\":1}}],[\"es6模板字符串的问题\",{\"1\":{\"156\":1}}],[\"es6\",{\"0\":{\"46\":1,\"449\":1},\"1\":{\"25\":2,\"46\":3,\"47\":1,\"48\":1,\"116\":1,\"122\":2,\"148\":1,\"856\":1,\"965\":1,\"1018\":2,\"1054\":1,\"1488\":1}}],[\"es\",{\"1\":{\"24\":1,\"146\":1,\"148\":8,\"149\":14,\"777\":1}}],[\"es5\",{\"1\":{\"23\":1,\"148\":1,\"956\":1}}],[\"es4\",{\"1\":{\"23\":1}}],[\"esproj\",{\"1\":{\"15\":1}}],[\"exam\",{\"0\":{\"2116\":1}}],[\"examples\",{\"1\":{\"1680\":1}}],[\"example\",{\"1\":{\"17\":2,\"1792\":2,\"2049\":2,\"2051\":7,\"2058\":3}}],[\"exact\",{\"1\":{\"2066\":1}}],[\"exactactiveclass\",{\"1\":{\"2032\":1,\"2064\":2,\"2066\":1}}],[\"existionproxy\",{\"1\":{\"1923\":3}}],[\"existing\",{\"1\":{\"1358\":6,\"1804\":1}}],[\"exitfns\",{\"1\":{\"1977\":6}}],[\"exit\",{\"1\":{\"64\":2,\"404\":1,\"405\":1}}],[\"exuberant\",{\"1\":{\"857\":2}}],[\"exe\",{\"1\":{\"407\":1}}],[\"executor\",{\"1\":{\"1777\":2}}],[\"executioncontextobj\",{\"1\":{\"1015\":1}}],[\"execution\",{\"1\":{\"504\":1}}],[\"exec\",{\"1\":{\"209\":2,\"210\":1,\"211\":1,\"402\":3,\"907\":1,\"908\":1,\"911\":2,\"913\":3,\"914\":4,\"916\":2,\"918\":2,\"923\":7,\"925\":9,\"1793\":1}}],[\"exceeded\",{\"1\":{\"504\":1}}],[\"except\",{\"1\":{\"403\":3}}],[\"exception\",{\"1\":{\"403\":2,\"405\":1}}],[\"exc\",{\"1\":{\"403\":3}}],[\"exclude<routeparamvalueraw\",{\"1\":{\"2045\":1}}],[\"exclude\",{\"1\":{\"150\":2}}],[\"extract\",{\"1\":{\"2073\":1}}],[\"extractcomponentsguards\",{\"0\":{\"2074\":1},\"1\":{\"2072\":1,\"2074\":3,\"2078\":1,\"2080\":2,\"2082\":1}}],[\"extractchangingrecords\",{\"0\":{\"2073\":1},\"1\":{\"2072\":1,\"2073\":3}}],[\"extractenterguards\",{\"1\":{\"2029\":1}}],[\"extractupdatehooks\",{\"1\":{\"2029\":1}}],[\"extractleaveguards\",{\"1\":{\"2029\":1}}],[\"extra\",{\"1\":{\"1277\":1}}],[\"extend调用的参数\",{\"1\":{\"1825\":1}}],[\"extendoptions\",{\"1\":{\"1431\":1,\"1825\":9}}],[\"extend生成的\",{\"1\":{\"1423\":1}}],[\"extends\",{\"1\":{\"1262\":1,\"2058\":2}}],[\"extend\",{\"0\":{\"1201\":1,\"1297\":1,\"1340\":1,\"1825\":1},\"1\":{\"1201\":14,\"1297\":3,\"1298\":8,\"1299\":3,\"1308\":1,\"1309\":2,\"1313\":1,\"1315\":2,\"1339\":1,\"1340\":2,\"1415\":2,\"1421\":1,\"1422\":2,\"1423\":4,\"1424\":1,\"1431\":1,\"1804\":1,\"1825\":6,\"1828\":1,\"1845\":1}}],[\"extend将列表中的每个元素加入到a后面\",{\"1\":{\"390\":1}}],[\"extended\",{\"1\":{\"317\":1}}],[\"extensions\",{\"1\":{\"15\":1,\"294\":1}}],[\"extname\",{\"1\":{\"264\":2}}],[\"ext\",{\"1\":{\"142\":4,\"143\":1,\"264\":1}}],[\"expired\",{\"1\":{\"1897\":4,\"1987\":4}}],[\"expiresin\",{\"1\":{\"368\":1}}],[\"expires\",{\"0\":{\"1540\":1},\"1\":{\"345\":2,\"1540\":1,\"1613\":1}}],[\"exp是否在\",{\"1\":{\"1794\":4}}],[\"expecthtml\",{\"1\":{\"1791\":2,\"1792\":3}}],[\"expected\",{\"1\":{\"857\":1}}],[\"exporfn就是被监听的属性名\",{\"1\":{\"1854\":1}}],[\"exporfn\",{\"1\":{\"1784\":1,\"1804\":2,\"1810\":3,\"1854\":2}}],[\"export\",{\"1\":{\"49\":10,\"51\":2,\"124\":3,\"155\":2,\"1358\":1,\"1428\":1,\"1431\":1,\"1446\":1,\"1450\":1,\"1451\":1,\"1452\":1,\"1456\":1,\"1462\":1,\"1507\":1,\"1519\":1,\"1785\":1,\"1786\":2,\"1788\":1,\"1790\":1,\"1791\":1,\"1792\":1,\"1793\":1,\"1794\":1,\"1796\":2,\"1797\":1,\"1799\":1,\"1800\":1,\"1802\":4,\"1803\":3,\"1804\":3,\"1806\":1,\"1822\":1,\"1824\":1,\"1828\":1,\"1864\":1,\"1877\":1,\"1880\":2,\"1937\":1,\"1998\":2,\"2012\":1,\"2015\":5,\"2016\":3,\"2018\":1,\"2019\":4,\"2040\":1,\"2041\":2,\"2042\":2,\"2043\":1,\"2044\":1,\"2045\":1,\"2047\":4,\"2053\":1,\"2054\":2,\"2058\":6,\"2061\":1,\"2062\":3,\"2065\":1,\"2067\":1,\"2074\":1,\"2075\":3}}],[\"exports的值作为require函数的返回结果\",{\"1\":{\"37\":1}}],[\"exports的引用\",{\"1\":{\"37\":1}}],[\"exports是module\",{\"1\":{\"37\":1}}],[\"exports\",{\"1\":{\"35\":6,\"37\":11,\"45\":3,\"49\":1,\"51\":1,\"91\":1,\"124\":1,\"129\":1,\"142\":1,\"155\":7,\"156\":2,\"212\":3,\"236\":1,\"237\":8,\"239\":9,\"240\":2,\"321\":1,\"1445\":1}}],[\"exposed中\",{\"1\":{\"2001\":1}}],[\"expose\",{\"1\":{\"1493\":4,\"1613\":2,\"1799\":1,\"1953\":2,\"2001\":2,\"2002\":1}}],[\"explorer\",{\"1\":{\"956\":1,\"1088\":1,\"1124\":2,\"1135\":1,\"1138\":3,\"1139\":2,\"1140\":1,\"1145\":1,\"1146\":1,\"1151\":2,\"1154\":1,\"1156\":6,\"1157\":1,\"1160\":1,\"1161\":8}}],[\"exp\",{\"1\":{\"366\":1,\"368\":1,\"884\":1,\"1388\":5,\"1793\":4,\"1794\":9}}],[\"express脚手架\",{\"0\":{\"330\":1}}],[\"express框架\",{\"1\":{\"313\":1}}],[\"expressjs\",{\"1\":{\"298\":1}}],[\"expression\",{\"1\":{\"29\":1,\"402\":1,\"898\":1,\"941\":1,\"1352\":4,\"1357\":1,\"1358\":3,\"1407\":1,\"1793\":2,\"1794\":10,\"1796\":1,\"1797\":1,\"1855\":1}}],[\"express\",{\"0\":{\"220\":1,\"297\":1,\"298\":1,\"299\":1,\"300\":1,\"301\":1,\"302\":1,\"307\":1,\"308\":1,\"1573\":1},\"1\":{\"25\":1,\"68\":1,\"156\":1,\"223\":2,\"298\":2,\"300\":2,\"301\":5,\"304\":5,\"305\":6,\"307\":3,\"314\":1,\"316\":5,\"317\":6,\"319\":1,\"321\":7,\"329\":4,\"331\":2,\"332\":1,\"349\":4,\"350\":3,\"355\":8,\"1573\":5,\"2050\":1}}],[\"来保护消息的机密性\",{\"1\":{\"2099\":1}}],[\"来保存和读取模型的参数\",{\"1\":{\"1673\":1}}],[\"来手动指定一个路由对象\",{\"1\":{\"2068\":1}}],[\"来阻止事件的默认行为\",{\"1\":{\"2065\":1}}],[\"来阻止冒泡的方式\",{\"1\":{\"1155\":1}}],[\"来修改的\",{\"1\":{\"2058\":2}}],[\"来修改\",{\"1\":{\"2058\":2}}],[\"来修改此模板字符串\",{\"1\":{\"142\":1}}],[\"来\",{\"1\":{\"2058\":1}}],[\"来决定调用\",{\"1\":{\"2058\":1}}],[\"来通过另外一种方式实现这个单页应用\",{\"1\":{\"2050\":1}}],[\"来更改路由线路后\",{\"1\":{\"2031\":1}}],[\"来更新\",{\"1\":{\"1964\":1}}],[\"来更新模型的参数\",{\"1\":{\"1659\":1}}],[\"来注册整个\",{\"1\":{\"2047\":1}}],[\"来注册这些插件\",{\"1\":{\"2026\":1}}],[\"来注入你的样式\",{\"1\":{\"1307\":1}}],[\"来读取数据值\",{\"1\":{\"1929\":1}}],[\"来读取文件夹\",{\"1\":{\"258\":1}}],[\"来拦截\",{\"1\":{\"1906\":1}}],[\"来使回调函数开始执行一次\",{\"1\":{\"1897\":1}}],[\"来使另一个文件中的\",{\"1\":{\"1309\":1}}],[\"来收集依赖\",{\"1\":{\"1785\":1}}],[\"来增强线性神经网络的非线性性\",{\"1\":{\"1666\":1}}],[\"来清空历史梯度\",{\"1\":{\"1659\":1}}],[\"来下载和加载\",{\"1\":{\"1656\":1}}],[\"来模拟后台服务端\",{\"1\":{\"1573\":1}}],[\"来模拟真实环境\",{\"1\":{\"133\":1}}],[\"来总结一下以上内容\",{\"1\":{\"1543\":1}}],[\"来确认资源是否被更改\",{\"1\":{\"1541\":1}}],[\"来自客户端的缓存指令\",{\"0\":{\"1535\":1},\"1\":{\"1539\":1}}],[\"来自服务器的缓存指令\",{\"0\":{\"1534\":1},\"1\":{\"1537\":2}}],[\"来自动赋值\",{\"1\":{\"980\":1}}],[\"来定义组件\",{\"1\":{\"1519\":1}}],[\"来定义的属性\",{\"1\":{\"830\":1}}],[\"来存放该元素的引用\",{\"1\":{\"1499\":1}}],[\"来访问这些注册的值\",{\"1\":{\"2047\":1}}],[\"来访问到注入的\",{\"1\":{\"2016\":1}}],[\"来访问到对象的属性\",{\"1\":{\"828\":1}}],[\"来访问\",{\"1\":{\"1493\":1}}],[\"来大幅度地简化代码\",{\"1\":{\"1486\":1}}],[\"来分割\",{\"1\":{\"1485\":1}}],[\"来导入\",{\"1\":{\"1319\":1}}],[\"来将张量展平为一个向量\",{\"1\":{\"1661\":1}}],[\"来将\",{\"1\":{\"1314\":1}}],[\"来将打开的链接传到iframe中\",{\"1\":{\"664\":1}}],[\"来代替\",{\"1\":{\"1313\":1}}],[\"来引入变量\",{\"1\":{\"1309\":1}}],[\"来加载模块中的成员\",{\"1\":{\"1302\":1}}],[\"来继承已存在的类样式块\",{\"1\":{\"1297\":1}}],[\"来调用声明好的混合宏\",{\"1\":{\"1293\":1}}],[\"来替代\",{\"0\":{\"1242\":1}}],[\"来替代它\",{\"1\":{\"1216\":1}}],[\"来替换所有这些\",{\"1\":{\"142\":1}}],[\"来赋值\",{\"1\":{\"1186\":1}}],[\"来兼容两种不同的浏览器\",{\"1\":{\"1161\":1}}],[\"来绑定滚动事件\",{\"1\":{\"1153\":1}}],[\"来绑定事件时的写法就要稍作改变\",{\"1\":{\"1146\":1}}],[\"来说\",{\"1\":{\"1468\":1}}],[\"来说是非常有用的\",{\"1\":{\"1267\":1}}],[\"来说明事件冒泡\",{\"1\":{\"1139\":1}}],[\"来说的\",{\"1\":{\"381\":1}}],[\"来取消默认行为\",{\"1\":{\"1121\":1}}],[\"来创建一个字符串字面量节点作为第一个参数\",{\"1\":{\"1978\":1}}],[\"来创建\",{\"1\":{\"1836\":1,\"2048\":1}}],[\"来创建基于\",{\"1\":{\"1425\":1}}],[\"来创建新的通知\",{\"1\":{\"1105\":1}}],[\"来创建文件夹\",{\"1\":{\"257\":1}}],[\"来实现响应式\",{\"1\":{\"1492\":1}}],[\"来实现\",{\"1\":{\"1224\":1,\"1358\":1}}],[\"来实现呢\",{\"1\":{\"1198\":1}}],[\"来实现用户通知\",{\"0\":{\"1105\":1}}],[\"来实现的\",{\"1\":{\"221\":1}}],[\"来作为参数\",{\"1\":{\"1102\":1}}],[\"来作为对象的属性\",{\"1\":{\"828\":1}}],[\"来获取只属于对象自身拥有的键\",{\"1\":{\"1906\":1}}],[\"来获取滚动的方向\",{\"1\":{\"1153\":1}}],[\"来获取到一个网页中所有样式表的引用\",{\"0\":{\"1130\":1}}],[\"来获取到的节点集合\",{\"1\":{\"1112\":1}}],[\"来获取位置信息\",{\"1\":{\"1102\":1}}],[\"来获取当前位置的信息\",{\"1\":{\"1099\":1}}],[\"来获取请求体数据\",{\"1\":{\"317\":1}}],[\"来查看文档具体的冒泡顺序\",{\"1\":{\"1139\":1}}],[\"来查看效果\",{\"1\":{\"1088\":1}}],[\"来查看资源的详细信息\",{\"1\":{\"260\":1}}],[\"来找到自己的原型对象\",{\"1\":{\"1063\":1}}],[\"来证明箭头函数的\",{\"1\":{\"996\":1}}],[\"来跳过\",{\"1\":{\"912\":1}}],[\"来遍历数组\",{\"1\":{\"846\":3}}],[\"来返回一个对象所有的\",{\"1\":{\"830\":1}}],[\"来看下面的例子\",{\"1\":{\"808\":1,\"809\":1,\"828\":1,\"834\":1}}],[\"来看一下它是如何传递数据的\",{\"1\":{\"765\":1}}],[\"来看一个具体的示例\",{\"1\":{\"138\":1}}],[\"来判断该标签是否是自闭合标签\",{\"1\":{\"1792\":1}}],[\"来判断一个参数是否不是数值\",{\"1\":{\"795\":1}}],[\"来判定一个值是真值还是假值\",{\"1\":{\"810\":1}}],[\"来判定\",{\"1\":{\"71\":1}}],[\"来界定\",{\"1\":{\"790\":1}}],[\"来添加相应的节点\",{\"1\":{\"765\":1}}],[\"来为表单分组\",{\"1\":{\"756\":1}}],[\"来进行不同视图之间的跳转\",{\"1\":{\"2049\":1}}],[\"来进行解析以外\",{\"1\":{\"2065\":1}}],[\"来进行解析\",{\"1\":{\"1867\":1}}],[\"来进行标准化处理\",{\"1\":{\"1665\":1}}],[\"来进行事件的删除\",{\"1\":{\"1146\":1}}],[\"来进行浏览器的检测\",{\"1\":{\"1091\":1}}],[\"来进行幂运算\",{\"1\":{\"941\":1}}],[\"来进行\",{\"1\":{\"895\":1,\"2058\":1}}],[\"来进行转换\",{\"1\":{\"864\":1}}],[\"来进行分组\",{\"1\":{\"756\":1}}],[\"来进行布局了\",{\"1\":{\"650\":1}}],[\"来控制多媒体的播放\",{\"1\":{\"746\":1}}],[\"来生成\",{\"1\":{\"716\":1}}],[\"来完成同样的工作\",{\"1\":{\"681\":1}}],[\"来完成构建过程\",{\"1\":{\"123\":1}}],[\"来改变\",{\"1\":{\"649\":1}}],[\"来改变元素的形状或位置\",{\"1\":{\"615\":1}}],[\"来观察\",{\"1\":{\"649\":1}}],[\"来指定使用的语言\",{\"1\":{\"1434\":1}}],[\"来指定时序函数\",{\"1\":{\"641\":1}}],[\"来指定背景图片的位置\",{\"1\":{\"630\":1}}],[\"来开启\",{\"1\":{\"580\":1}}],[\"来开发接口\",{\"1\":{\"220\":1}}],[\"来排布它的内容\",{\"1\":{\"548\":1}}],[\"来设置变量\",{\"1\":{\"1307\":1}}],[\"来设置元素的文本内容\",{\"1\":{\"681\":1}}],[\"来设置元素的位置\",{\"1\":{\"569\":1}}],[\"来设置\",{\"1\":{\"669\":1}}],[\"来设置盒子尺寸的计算方式\",{\"1\":{\"547\":1}}],[\"来设置那些需要\",{\"1\":{\"15\":1}}],[\"来计算的\",{\"1\":{\"534\":1}}],[\"来执行本进程中的内容\",{\"1\":{\"408\":1}}],[\"来连接下一行\",{\"1\":{\"383\":1}}],[\"来表示页面头部\",{\"1\":{\"694\":1}}],[\"来表示\",{\"1\":{\"383\":1}}],[\"来表明响应体的\",{\"1\":{\"294\":1}}],[\"来操作\",{\"1\":{\"368\":1}}],[\"来在服务器端保存一些状态\",{\"1\":{\"362\":1}}],[\"来标准化\",{\"1\":{\"1665\":1}}],[\"来标记页脚内容\",{\"1\":{\"694\":1}}],[\"来标记访问者的身份\",{\"1\":{\"343\":1}}],[\"来标识当前的循环\",{\"1\":{\"824\":1}}],[\"来标识\",{\"1\":{\"192\":1}}],[\"来方便给客户端响应数据\",{\"1\":{\"307\":1}}],[\"来方便获取请求报文中的数据\",{\"1\":{\"305\":1}}],[\"来删除文件夹\",{\"1\":{\"259\":1}}],[\"来删除文件\",{\"1\":{\"255\":1}}],[\"来移动或重命名\",{\"1\":{\"254\":1}}],[\"来影响打包结果\",{\"1\":{\"156\":1}}],[\"来解决该问题\",{\"1\":{\"343\":1}}],[\"来解决我们上面提出的问题\",{\"1\":{\"148\":1}}],[\"来解决\",{\"1\":{\"142\":1}}],[\"来帮助我们提升效率\",{\"1\":{\"128\":1}}],[\"来精确控制\",{\"1\":{\"124\":1}}],[\"来处理导航\",{\"1\":{\"2065\":1}}],[\"来处理\",{\"1\":{\"122\":1,\"1216\":1,\"2002\":1,\"2045\":2}}],[\"来安装\",{\"1\":{\"81\":1}}],[\"来合并分支外\",{\"1\":{\"11\":1}}],[\"目的是为了解决\",{\"1\":{\"1485\":1}}],[\"目的是简化\",{\"1\":{\"1194\":1}}],[\"目的\",{\"1\":{\"1366\":1,\"1383\":1,\"1454\":1}}],[\"目标路由\",{\"1\":{\"2074\":1}}],[\"目标路由地址\",{\"1\":{\"2064\":1}}],[\"目标代码生成等步骤\",{\"1\":{\"1972\":1}}],[\"目标代码\",{\"1\":{\"1972\":1}}],[\"目标选择器未找到\",{\"1\":{\"1315\":2}}],[\"目标对象\",{\"1\":{\"763\":1,\"764\":1}}],[\"目标的那一部分\",{\"1\":{\"743\":1}}],[\"目标在上面\",{\"1\":{\"743\":1}}],[\"目标\",{\"1\":{\"155\":1,\"743\":1}}],[\"目标模块的代码在这里\",{\"1\":{\"37\":1}}],[\"目录下面\",{\"1\":{\"2053\":1}}],[\"目录下面的\",{\"1\":{\"2042\":1,\"2043\":1}}],[\"目录结构\",{\"0\":{\"1427\":1},\"1\":{\"1782\":1}}],[\"目录配置到环境变量\",{\"1\":{\"177\":1}}],[\"目录作为工作目录\",{\"1\":{\"177\":1}}],[\"目录中新建\",{\"1\":{\"149\":1}}],[\"目录中创建babeltest\",{\"1\":{\"148\":1}}],[\"目录中的内容\",{\"1\":{\"15\":1}}],[\"目录删除掉\",{\"1\":{\"129\":1}}],[\"目录用来存放源文件\",{\"1\":{\"124\":1}}],[\"目录\",{\"1\":{\"59\":1,\"128\":1,\"129\":2,\"149\":1,\"177\":1}}],[\"目前比较流行的单页方式有两种\",{\"1\":{\"2048\":1}}],[\"目前通过阅读\",{\"1\":{\"2042\":1}}],[\"目前渲染函数还不需要参数\",{\"1\":{\"1975\":1}}],[\"目前的很多服务器\",{\"1\":{\"1537\":1}}],[\"目前哪种写法都可以\",{\"1\":{\"1361\":1}}],[\"目前仍然可用\",{\"1\":{\"1216\":1}}],[\"目前最新版本为\",{\"1\":{\"1196\":1}}],[\"目前没有应用于\",{\"1\":{\"1098\":1}}],[\"目前还没有相应的规范\",{\"1\":{\"1084\":1}}],[\"目前还有很多厂商致力于将\",{\"1\":{\"25\":1}}],[\"目前遇到的问题是打包\",{\"1\":{\"133\":1}}],[\"目前分为两类\",{\"1\":{\"72\":1}}],[\"目前\",{\"1\":{\"47\":1,\"1084\":1,\"2061\":1}}],[\"目前我们所知的作用域大概有\",{\"1\":{\"948\":1}}],[\"目前我们常用的库有两个\",{\"1\":{\"12\":1}}],[\"目前我们对于\",{\"1\":{\"12\":1}}],[\"会向外部返回一个对象\",{\"1\":{\"2060\":1}}],[\"会向浏览器推送更新\",{\"1\":{\"158\":1}}],[\"会暴露给外部的方法\",{\"1\":{\"2060\":3}}],[\"会节约不必要的性能开销\",{\"1\":{\"2044\":1}}],[\"会拿到这个对象\",{\"1\":{\"2042\":1}}],[\"会更改\",{\"1\":{\"2033\":1}}],[\"会更改且不会引起页面刷新\",{\"1\":{\"2029\":1}}],[\"会进行重定向\",{\"1\":{\"2075\":1}}],[\"会进行一个循环\",{\"1\":{\"2031\":1}}],[\"会进入第二个操作数的判断\",{\"1\":{\"808\":1}}],[\"会对其调用情况做出判断和处理\",{\"1\":{\"2029\":1}}],[\"会对响应体内容进行独立存储\",{\"1\":{\"294\":1}}],[\"会存储到\",{\"1\":{\"1974\":1}}],[\"会打破单项数据流\",{\"1\":{\"1956\":1}}],[\"会打印出用户按下的哪一个键\",{\"1\":{\"1154\":1}}],[\"会与响应式数据建立响应联系\",{\"1\":{\"1943\":1}}],[\"会导致副作用函数重新应该执行\",{\"1\":{\"1932\":1}}],[\"会导致副作用函数重新执行两次\",{\"1\":{\"1910\":1}}],[\"会导致多个副作用函数之间循环调用\",{\"1\":{\"1925\":1}}],[\"会隐式修改数组长度的原型方法\",{\"1\":{\"1925\":1}}],[\"会隐式地修改length值\",{\"1\":{\"1917\":1}}],[\"会收到一条警告信息\",{\"1\":{\"1914\":1}}],[\"会沿着原型链依次向上查找\",{\"1\":{\"1910\":1}}],[\"会读取\",{\"1\":{\"1902\":1,\"1925\":1}}],[\"会马上执行watch的回调\",{\"1\":{\"1860\":1}}],[\"会马上执行一次回调\",{\"1\":{\"1860\":1}}],[\"会给这个默认值创建observer实例\",{\"1\":{\"1840\":1}}],[\"会给服务带来很大压力\",{\"1\":{\"508\":1}}],[\"会为每个watch创建一个user\",{\"1\":{\"1860\":1}}],[\"会为每个计算属性创建一个computed\",{\"1\":{\"1859\":1}}],[\"会为子组件创建组件占位符\",{\"1\":{\"1838\":1}}],[\"会为当前节点添加自定义事件和回调\",{\"1\":{\"1358\":1}}],[\"会处理这个\",{\"1\":{\"1802\":1}}],[\"会多一个循环的过程和一些特殊情况处理\",{\"1\":{\"1789\":1}}],[\"会立即执行同步任务队列中的回调\",{\"1\":{\"1784\":1}}],[\"会立即终止离他最近的那个循环语句\",{\"1\":{\"824\":1}}],[\"会取出prop\",{\"1\":{\"1784\":1}}],[\"会取最后一次的值\",{\"1\":{\"1329\":1}}],[\"会使用到三个重要的概念\",{\"1\":{\"1678\":1}}],[\"会使得\",{\"1\":{\"752\":1}}],[\"会省略内存分配和释放\",{\"1\":{\"1666\":1}}],[\"会经历两个阶段\",{\"1\":{\"1647\":1}}],[\"会经常使用\",{\"1\":{\"1200\":1}}],[\"会频繁打开关闭连接\",{\"1\":{\"1645\":1}}],[\"会带来一些问题\",{\"1\":{\"1644\":1}}],[\"会遇到一些无法立即处理的任务\",{\"1\":{\"1558\":1}}],[\"会确定是否使用\",{\"1\":{\"1530\":1}}],[\"会引发\",{\"1\":{\"1527\":1,\"1528\":1}}],[\"会得到一棵带有样式的\",{\"1\":{\"1526\":1}}],[\"会得到\",{\"1\":{\"1526\":1}}],[\"会得到不同的结果\",{\"1\":{\"995\":1}}],[\"会阻塞\",{\"1\":{\"1526\":1}}],[\"会停止解析\",{\"1\":{\"1526\":1}}],[\"会启动一个预解析的线程\",{\"1\":{\"1526\":1}}],[\"会把响应式数据的第一层属性值转换为\",{\"1\":{\"1938\":1}}],[\"会把\",{\"1\":{\"1802\":1}}],[\"会把键值对添加到存储中\",{\"1\":{\"1436\":1}}],[\"会把它存储起来\",{\"1\":{\"360\":1}}],[\"会告诉vue从此选择器开始为子组件的内容\",{\"1\":{\"1433\":1}}],[\"会转为\",{\"1\":{\"1433\":1}}],[\"会加快编译\",{\"1\":{\"1403\":1}}],[\"会删掉v\",{\"1\":{\"1401\":1}}],[\"会产生大量无意义的请求\",{\"1\":{\"1645\":1}}],[\"会产生一个渲染任务\",{\"1\":{\"1526\":1}}],[\"会产生错误\",{\"1\":{\"1394\":1}}],[\"会产生没有必要的真实\",{\"1\":{\"1394\":1}}],[\"会产生多个对应的样式代码\",{\"1\":{\"1299\":1}}],[\"会根据传入的位置和路径计算出新的位置并匹配到相应的路由\",{\"1\":{\"2028\":1}}],[\"会根据\",{\"1\":{\"1394\":1}}],[\"会根据上述信息调用start钩子函数生成对应的\",{\"1\":{\"1353\":1}}],[\"会按照如下的顺序进行\",{\"1\":{\"1394\":1}}],[\"会按照普通的指令进行处理\",{\"1\":{\"1357\":1}}],[\"会按照比例进行分配\",{\"1\":{\"591\":1}}],[\"会出错\",{\"1\":{\"1335\":1}}],[\"会出现提示\",{\"1\":{\"757\":2}}],[\"会出现一些\",{\"1\":{\"261\":1}}],[\"会反复输出到\",{\"1\":{\"1301\":1}}],[\"会不会导致动画混乱呢\",{\"1\":{\"1224\":1}}],[\"会涉及到复杂的字符串操作\",{\"1\":{\"1208\":1}}],[\"会开启一个渲染主线程\",{\"1\":{\"1168\":1,\"1555\":1}}],[\"会开辟一块内存存放对象\",{\"1\":{\"1028\":1}}],[\"会延迟整个页面的交互就绪时间\",{\"1\":{\"1158\":1}}],[\"会触发\",{\"1\":{\"1892\":1,\"2049\":1,\"2050\":1}}],[\"会触发依赖属性的setter方法通知所有watcher更新\",{\"1\":{\"1850\":1}}],[\"会触发下载功能\",{\"1\":{\"1570\":1}}],[\"会触发浏览器下载功能\",{\"1\":{\"1570\":1}}],[\"会触发create和update钩子函数\",{\"1\":{\"1368\":1}}],[\"会触发keydown和keyup事件\",{\"1\":{\"1154\":1}}],[\"会触发所绑定的事件\",{\"1\":{\"1149\":1}}],[\"会有一个button属性被填入到\",{\"1\":{\"1153\":1}}],[\"会有一些与鼠标事件相关的属性被填入到\",{\"1\":{\"1153\":1}}],[\"会有两种模式\",{\"1\":{\"343\":1}}],[\"会监听点击事件或者其它可以通过\",{\"1\":{\"2032\":1}}],[\"会监视\",{\"1\":{\"1396\":1}}],[\"会监视项目中所有内容\",{\"1\":{\"15\":1}}],[\"会监控垂直方向的滚动条变化\",{\"1\":{\"1150\":1}}],[\"会监控横向滚动条的变化\",{\"1\":{\"1150\":1}}],[\"会重新获取被监听属性的属性值\",{\"1\":{\"1860\":1}}],[\"会重新计算computed的值\",{\"1\":{\"1859\":1}}],[\"会重新生成列表\",{\"1\":{\"390\":1}}],[\"会重复编译多次\",{\"1\":{\"1313\":1}}],[\"会重复触发此事件\",{\"1\":{\"1149\":1}}],[\"会执行这里的\",{\"1\":{\"2069\":1}}],[\"会执行\",{\"1\":{\"2031\":1}}],[\"会执行真正的事件处理函数\",{\"1\":{\"1949\":1}}],[\"会执行test\",{\"1\":{\"1137\":1}}],[\"会执行相应的\",{\"1\":{\"1081\":1}}],[\"会获取\",{\"1\":{\"1124\":2}}],[\"会弹出当前所使用的浏览器\",{\"1\":{\"1091\":1}}],[\"会先执行重写的方法\",{\"1\":{\"2047\":1}}],[\"会先在自身属性中查找\",{\"1\":{\"1009\":1}}],[\"会先将字符串转换为数字\",{\"1\":{\"813\":1}}],[\"会指向最后调用它的对象\",{\"1\":{\"992\":1}}],[\"会创建一个辅助的特定对象\",{\"1\":{\"948\":1}}],[\"会创建一个新的区块格式化上下文\",{\"1\":{\"557\":1}}],[\"会造成结果错误\",{\"1\":{\"995\":1}}],[\"会造成\",{\"1\":{\"925\":1}}],[\"会直接忽略掉对象里面的方法\",{\"1\":{\"896\":1}}],[\"会忽略所有传递进去的参数\",{\"1\":{\"876\":1}}],[\"会忽略undefined\",{\"1\":{\"471\":1}}],[\"会发出很多的网络请求\",{\"1\":{\"1602\":1}}],[\"会发生两次\",{\"1\":{\"1964\":1}}],[\"会发生什么呢\",{\"1\":{\"1559\":1}}],[\"会发生隐性转换\",{\"1\":{\"801\":1}}],[\"会发现服务器会返回\",{\"1\":{\"2050\":1}}],[\"会发现资源仍然可用\",{\"1\":{\"1536\":1}}],[\"会发现出现打包失败\",{\"1\":{\"138\":1}}],[\"会尝试将这个值转换为数值\",{\"1\":{\"795\":1}}],[\"会返回一个unwatch函数\",{\"1\":{\"1858\":1}}],[\"会返回一个对象\",{\"1\":{\"1493\":1}}],[\"会返回一个当前的日期和时间的字符串表示\",{\"1\":{\"876\":1}}],[\"会返回\",{\"1\":{\"794\":1,\"797\":1}}],[\"会返回选定的\",{\"1\":{\"772\":1}}],[\"会访问本地变量name\",{\"1\":{\"790\":1}}],[\"会话时间\",{\"1\":{\"768\":1}}],[\"会话控制\",{\"0\":{\"342\":1},\"1\":{\"343\":1,\"346\":1,\"372\":1}}],[\"会由每个对服务器的请求来传递\",{\"1\":{\"767\":1}}],[\"会被存储在一个名为\",{\"1\":{\"2048\":1}}],[\"会被编译成一个对象\",{\"1\":{\"1954\":1}}],[\"会被编译成后代选择器\",{\"1\":{\"1332\":1}}],[\"会被这个内部属性的\",{\"1\":{\"1842\":1}}],[\"会被推入异步任务队列中\",{\"1\":{\"1784\":1}}],[\"会被绑定到该对象上\",{\"1\":{\"990\":1,\"996\":1}}],[\"会被绑定到指定参数的对象上\",{\"1\":{\"990\":1,\"996\":1}}],[\"会被绑定到新创建的对象上\",{\"1\":{\"990\":1,\"996\":1}}],[\"会被绑定到\",{\"1\":{\"990\":1,\"996\":1}}],[\"会被忽略\",{\"1\":{\"708\":1}}],[\"会被转化为property\",{\"1\":{\"680\":1}}],[\"会初始化宽度为\",{\"1\":{\"703\":1}}],[\"会包含一组\",{\"1\":{\"697\":1}}],[\"会同步给\",{\"1\":{\"683\":1}}],[\"会显示在搜索引擎的搜索的结果中\",{\"1\":{\"659\":1}}],[\"会影响到具体的变形行为\",{\"1\":{\"619\":1}}],[\"会影响传输效率\",{\"1\":{\"356\":1}}],[\"会自动附带一些请求头\",{\"1\":{\"1569\":1}}],[\"会自动根据缓存指令进行处理\",{\"1\":{\"1545\":1}}],[\"会自动暴露给模板\",{\"1\":{\"1493\":1}}],[\"会自动成为\",{\"1\":{\"1112\":1}}],[\"会自动从内存中删除不再被程序需要的东西\",{\"1\":{\"865\":1}}],[\"会自动转换为字符串\",{\"1\":{\"801\":1}}],[\"会自动弹出数字键盘\",{\"1\":{\"757\":1}}],[\"会自动调整这两个值\",{\"1\":{\"574\":1}}],[\"会自动将声明是没有进行初始化的变量设为\",{\"1\":{\"980\":1}}],[\"会自动将\",{\"1\":{\"346\":1}}],[\"会调用\",{\"1\":{\"2071\":1}}],[\"会调用全局后置守卫\",{\"1\":{\"2071\":1}}],[\"会调用浏览器原生的\",{\"1\":{\"2030\":1}}],[\"会调用render函数生成最新的vnode\",{\"1\":{\"1806\":1}}],[\"会调用createcomponent函数创建占位符\",{\"1\":{\"1802\":1}}],[\"会调用createcomponent去创建组件\",{\"1\":{\"1358\":1}}],[\"会调用end钩子函数\",{\"1\":{\"1801\":1}}],[\"会调用一个回调函数\",{\"1\":{\"1102\":1}}],[\"会调用一系列的中间件\",{\"1\":{\"309\":1}}],[\"会调整自身width和margin来避开浮动元素\",{\"1\":{\"564\":1}}],[\"会优先进行调整\",{\"1\":{\"554\":1}}],[\"会\",{\"1\":{\"540\":1}}],[\"会alert4次\",{\"1\":{\"490\":1}}],[\"会生成浮点数结果\",{\"1\":{\"395\":1}}],[\"会生出不同的\",{\"1\":{\"159\":1}}],[\"会在当前的历史条目发生变化的时候触发\",{\"1\":{\"2061\":1}}],[\"会在每次组件更新时都被调用\",{\"1\":{\"1499\":1}}],[\"会在控制台抛出错误信息\",{\"1\":{\"1252\":1}}],[\"会在滚轮滚动时触发\",{\"1\":{\"1153\":1}}],[\"会在文档上触发\",{\"1\":{\"1132\":1}}],[\"会在本地作用域以外按照优先级\",{\"1\":{\"402\":1}}],[\"会在小数点后面补\",{\"1\":{\"385\":1}}],[\"会在浏览器关闭的时候\",{\"1\":{\"349\":1}}],[\"会在特定的时间点广播出特定的事件\",{\"1\":{\"154\":1}}],[\"会询问是否允许授予权限\",{\"1\":{\"343\":1}}],[\"会去找views目录下的home\",{\"1\":{\"329\":1}}],[\"会等待\",{\"1\":{\"245\":1}}],[\"会以\",{\"1\":{\"238\":1}}],[\"会比较他们的长度和内容\",{\"1\":{\"166\":1}}],[\"会浪费太多的时间\",{\"1\":{\"150\":1}}],[\"会很有用\",{\"1\":{\"134\":1}}],[\"会通过算法校验每个安装包的完整性\",{\"1\":{\"85\":1}}],[\"会将\",{\"1\":{\"1824\":1,\"1834\":1,\"1836\":1,\"1842\":1}}],[\"会将input事件改成change事件\",{\"1\":{\"1356\":1}}],[\"会将一个模块中所有成员都转发\",{\"1\":{\"1311\":1}}],[\"会将调用相同基类的代码合并在一起\",{\"1\":{\"1299\":1}}],[\"会将使用继承的代码块\",{\"1\":{\"1299\":1}}],[\"会将整个\",{\"1\":{\"1124\":1}}],[\"会将所有的实参放入到一个数组里面\",{\"1\":{\"933\":1}}],[\"会将所有基本导出和默认导出聚合到一个对象中\",{\"1\":{\"52\":1}}],[\"会将匹配到的内容封装到一个数组中返回\",{\"1\":{\"894\":1}}],[\"会将其他元素从当前盒子周围\",{\"1\":{\"540\":2}}],[\"会将其转换为布尔值然后再运算\",{\"1\":{\"400\":1,\"815\":1}}],[\"会将数据默认保存在这个文件夹\",{\"1\":{\"177\":1}}],[\"会将它的\",{\"1\":{\"66\":1}}],[\"会认为导入的模块来自于\",{\"1\":{\"59\":1}}],[\"会报错\",{\"1\":{\"50\":1,\"1309\":1}}],[\"会提前加载\",{\"1\":{\"50\":1}}],[\"会做以下两件事情\",{\"1\":{\"37\":1}}],[\"会首先找到两条分支的最近的共同祖先\",{\"1\":{\"11\":1}}],[\"分开存储有助于解耦逻辑\",{\"1\":{\"2016\":1}}],[\"分工明确\",{\"1\":{\"2016\":1}}],[\"分阶段实现\",{\"0\":{\"1974\":1}}],[\"分析推理\",{\"0\":{\"1763\":1},\"1\":{\"1763\":1}}],[\"分析出所有的依赖关系\",{\"1\":{\"122\":1}}],[\"分母\",{\"1\":{\"1752\":1}}],[\"分母大\",{\"1\":{\"1743\":1}}],[\"分母之比\",{\"1\":{\"1742\":1}}],[\"分子增速小于分母\",{\"1\":{\"1734\":1}}],[\"分子增速大于分母\",{\"1\":{\"1734\":1}}],[\"分子分母相差不大\",{\"1\":{\"1720\":1}}],[\"分完\",{\"1\":{\"1723\":1}}],[\"分段法\",{\"0\":{\"1715\":1}}],[\"分块完成后\",{\"1\":{\"1526\":1}}],[\"分块\",{\"1\":{\"1526\":1}}],[\"分层的意义\",{\"0\":{\"1621\":1}}],[\"分层的好处在于\",{\"1\":{\"1526\":1}}],[\"分层模型\",{\"0\":{\"1620\":1},\"2\":{\"1642\":1}}],[\"分层\",{\"1\":{\"1526\":2}}],[\"分发自定义事件的函数\",{\"1\":{\"1493\":1}}],[\"分享\",{\"1\":{\"1468\":1}}],[\"分享文章\",{\"1\":{\"343\":1}}],[\"分为前置和后置守卫\",{\"1\":{\"1467\":1}}],[\"分为两类\",{\"1\":{\"925\":1}}],[\"分隔开即可\",{\"1\":{\"1313\":1}}],[\"分隔开\",{\"1\":{\"1311\":1}}],[\"分隔两边的任意一个表达式\",{\"1\":{\"902\":1}}],[\"分线程中的全局对象不再是\",{\"1\":{\"1182\":1}}],[\"分线程向主线程返回数据\",{\"1\":{\"1182\":1}}],[\"分线程接收到主线程发送的数据\",{\"1\":{\"1182\":1}}],[\"分线程\",{\"0\":{\"1173\":1},\"1\":{\"1182\":1}}],[\"分时函数常常在处理非常大的数据集合\",{\"1\":{\"1038\":1}}],[\"分时函数\",{\"0\":{\"1038\":1}}],[\"分配小内存空间\",{\"1\":{\"1002\":1}}],[\"分\",{\"1\":{\"874\":1,\"875\":2,\"876\":1,\"1101\":1,\"1686\":1}}],[\"分别负责\",{\"1\":{\"2045\":1}}],[\"分别指向新旧两组子节点的端点\",{\"1\":{\"1965\":1}}],[\"分别指代服务端渲染和客户端渲染\",{\"1\":{\"1640\":1}}],[\"分别用来存放指令\",{\"1\":{\"1828\":1}}],[\"分别用于模型的训练和测试\",{\"1\":{\"1656\":1}}],[\"分别用于存储第一\",{\"1\":{\"911\":1,\"924\":1}}],[\"分别用于找出可迭代对象的键\",{\"1\":{\"830\":1}}],[\"分别表示基期\",{\"1\":{\"1725\":1}}],[\"分别执行以下操作\",{\"1\":{\"1665\":1}}],[\"分别代表基期\",{\"1\":{\"1722\":1}}],[\"分别代表输入数据和标签\",{\"1\":{\"1655\":1}}],[\"分别代表第\",{\"1\":{\"911\":1}}],[\"分别为push和replace\",{\"1\":{\"1463\":1}}],[\"分别为keydown\",{\"1\":{\"1149\":1}}],[\"分别对应$prop和$attrs\",{\"1\":{\"1353\":1}}],[\"分别对应多行模式\",{\"1\":{\"919\":1}}],[\"分别叫做\",{\"1\":{\"1028\":1}}],[\"分别是vm\",{\"1\":{\"1809\":1,\"1813\":1,\"1818\":1}}],[\"分别是标签名\",{\"1\":{\"1797\":1}}],[\"分别是screenleft和screentop\",{\"1\":{\"1087\":1}}],[\"分别是前一项值\",{\"1\":{\"946\":1}}],[\"分别是test\",{\"1\":{\"925\":1}}],[\"分别是分组和引用\",{\"1\":{\"909\":1}}],[\"分别是date\",{\"1\":{\"875\":1}}],[\"分别是concat\",{\"1\":{\"854\":1}}],[\"分别是keys\",{\"1\":{\"846\":1}}],[\"分别是拖拽和释放\",{\"1\":{\"762\":1}}],[\"分别是横轴和纵轴的缩放因子\",{\"1\":{\"720\":1}}],[\"分别是\",{\"1\":{\"708\":1,\"1205\":1,\"1526\":1,\"2088\":1}}],[\"分组\",{\"0\":{\"910\":1},\"1\":{\"756\":2}}],[\"分组选择器是单独计算的\",{\"1\":{\"524\":1}}],[\"分割线上方为\",{\"1\":{\"662\":1}}],[\"分步执行过渡效果\",{\"1\":{\"641\":1}}],[\"分类\",{\"0\":{\"514\":1,\"964\":1,\"1018\":1},\"1\":{\"1446\":1,\"1467\":1}}],[\"分流\",{\"1\":{\"508\":1}}],[\"分治法+空间换时间\",{\"1\":{\"418\":1}}],[\"分治\",{\"1\":{\"413\":1,\"414\":1,\"415\":1}}],[\"分模块开发就无从实现\",{\"1\":{\"24\":1}}],[\"分离头指针的状态下也可以操作代码\",{\"1\":{\"14\":1}}],[\"分支与分支之间相互独立\",{\"1\":{\"10\":1}}],[\"分支\",{\"0\":{\"9\":1}}],[\"h4>\",{\"1\":{\"1446\":1,\"1493\":1}}],[\"h表示createelement函数\",{\"1\":{\"1427\":1}}],[\"hyphenate\",{\"1\":{\"1804\":1}}],[\"hyphenatedkey\",{\"1\":{\"1804\":4}}],[\"hyper\",{\"1\":{\"1627\":1}}],[\"hypertext\",{\"1\":{\"266\":1,\"2091\":1}}],[\"hydrate是服务端渲染使用的变量这里不用管\",{\"1\":{\"1998\":1}}],[\"hydrate\",{\"1\":{\"1789\":1,\"1998\":2}}],[\"hydrating\",{\"1\":{\"1423\":2,\"1805\":2,\"1806\":5,\"1862\":1}}],[\"h2都不行\",{\"1\":{\"1419\":1}}],[\"h2\",{\"1\":{\"1419\":1}}],[\"h2>\",{\"1\":{\"329\":1,\"1392\":1,\"1393\":1,\"1401\":1,\"1415\":2,\"2013\":3,\"2050\":3}}],[\"hh\",{\"1\":{\"1397\":1}}],[\"hhh\",{\"1\":{\"1186\":2}}],[\"h3\",{\"1\":{\"1275\":4}}],[\"h3>\",{\"1\":{\"1210\":2,\"1507\":1,\"1515\":1,\"1516\":2}}],[\"histroy\",{\"1\":{\"2048\":1}}],[\"historylocation\",{\"1\":{\"2057\":2,\"2058\":15,\"2060\":1,\"2061\":6}}],[\"historylisteners\",{\"1\":{\"2053\":3,\"2055\":4,\"2059\":1,\"2061\":1}}],[\"historynavigation\",{\"1\":{\"2053\":7,\"2055\":10,\"2059\":4}}],[\"historystatearray\",{\"1\":{\"2058\":3}}],[\"historystatevalue\",{\"1\":{\"2058\":4}}],[\"historystate\",{\"1\":{\"2034\":2,\"2053\":1,\"2057\":5,\"2058\":16,\"2060\":1,\"2061\":5}}],[\"history\",{\"0\":{\"1095\":1,\"2029\":1,\"2048\":1},\"1\":{\"1083\":1,\"1095\":3,\"1096\":2,\"1097\":10,\"1139\":1,\"1140\":1,\"1468\":4,\"2025\":1,\"2026\":3,\"2027\":5,\"2029\":8,\"2030\":1,\"2031\":1,\"2032\":1,\"2034\":1,\"2040\":1,\"2041\":1,\"2042\":1,\"2047\":1,\"2048\":5,\"2049\":2,\"2050\":8,\"2052\":3,\"2053\":1,\"2055\":2,\"2057\":3,\"2058\":12,\"2061\":11}}],[\"hide\",{\"0\":{\"1221\":1},\"1\":{\"1220\":1,\"1221\":2,\"1311\":1,\"1388\":2}}],[\"hidden将超出部分隐藏\",{\"1\":{\"582\":1}}],[\"hidden\",{\"1\":{\"548\":3,\"557\":2,\"564\":1,\"580\":2,\"582\":1,\"617\":1,\"1132\":2,\"1203\":2}}],[\"hidden=\",{\"1\":{\"143\":4}}],[\"higher\",{\"1\":{\"1033\":1}}],[\"high=\",{\"1\":{\"696\":2}}],[\"high\",{\"1\":{\"696\":2,\"1125\":1}}],[\"h6元素或hgroup\",{\"1\":{\"694\":1}}],[\"hsla\",{\"1\":{\"535\":1,\"1266\":2}}],[\"hsl\",{\"1\":{\"535\":1,\"1266\":2}}],[\"hs256\",{\"1\":{\"365\":1}}],[\"h1~h6\",{\"1\":{\"661\":1}}],[\"h1\",{\"1\":{\"516\":1,\"517\":1,\"1198\":1,\"1208\":5,\"1210\":2,\"1232\":4,\"1235\":1,\"1486\":1,\"1559\":3,\"1835\":1,\"1877\":1,\"1954\":1}}],[\"h1>`\",{\"1\":{\"1422\":1,\"1943\":1}}],[\"h1>就是添加的节点\",{\"1\":{\"1209\":1}}],[\"h1><p>文本段落<\",{\"1\":{\"1208\":2}}],[\"h1>\",{\"1\":{\"285\":1,\"294\":2,\"304\":1,\"1198\":3,\"1209\":2,\"1216\":1,\"1232\":3,\"1237\":1,\"1348\":1,\"1428\":1,\"1441\":3,\"1559\":1,\"1835\":1,\"1877\":1,\"1954\":1,\"2050\":1,\"2068\":1}}],[\"hmac\",{\"1\":{\"363\":1,\"365\":1}}],[\"hm=112411213\",{\"1\":{\"345\":1}}],[\"hmr\",{\"1\":{\"158\":1,\"1483\":1}}],[\"had\",{\"1\":{\"1929\":6}}],[\"hadkey\",{\"1\":{\"1907\":2,\"1914\":2,\"1928\":4,\"1990\":2}}],[\"hat\",{\"1\":{\"1680\":3}}],[\"happy\",{\"1\":{\"1537\":1}}],[\"haml\",{\"1\":{\"1247\":1}}],[\"have\",{\"1\":{\"1105\":4,\"1807\":1,\"2058\":1,\"2065\":2}}],[\"handlescroll\",{\"1\":{\"2029\":2,\"2034\":1,\"2041\":1,\"2046\":1}}],[\"handlesetupresult实现的功能是根据\",{\"1\":{\"2001\":1}}],[\"handlesetupresult\",{\"1\":{\"1997\":1,\"2001\":1}}],[\"handlestarttag\",{\"1\":{\"1792\":2}}],[\"handleerror\",{\"1\":{\"1804\":1,\"1815\":1,\"1822\":1,\"1855\":1}}],[\"handlenativeclickevent\",{\"1\":{\"1519\":1}}],[\"handlecomponentevent\",{\"1\":{\"1519\":1}}],[\"handleclick\",{\"1\":{\"1353\":2,\"1368\":2,\"1407\":3}}],[\"handlers\",{\"1\":{\"2043\":10}}],[\"handleredirectrecord\",{\"1\":{\"2041\":1,\"2046\":1}}],[\"handleroutingevent\",{\"1\":{\"2034\":1}}],[\"handlerouteentered\",{\"1\":{\"2029\":1}}],[\"handler\",{\"1\":{\"1370\":4,\"1378\":2,\"1379\":2,\"1380\":2,\"1777\":4,\"1802\":2,\"1804\":15,\"1815\":1,\"1816\":1,\"1877\":2,\"1880\":4,\"1954\":3,\"2032\":1,\"2043\":3,\"2069\":6}}],[\"handlercode\",{\"1\":{\"1370\":3}}],[\"handleinput\",{\"1\":{\"1368\":2}}],[\"handledragover\",{\"1\":{\"772\":2}}],[\"handlefileselect\",{\"1\":{\"772\":4,\"773\":2}}],[\"handlebars\",{\"1\":{\"331\":1}}],[\"handling\",{\"1\":{\"752\":1}}],[\"haha\",{\"1\":{\"670\":1}}],[\"habit\",{\"1\":{\"422\":2}}],[\"hasroute\",{\"1\":{\"2041\":2,\"2046\":1,\"2047\":1}}],[\"haspropschanged\",{\"1\":{\"1955\":3}}],[\"hasproperty\",{\"1\":{\"1905\":2}}],[\"hasproto\",{\"1\":{\"1785\":1}}],[\"hassymbol\",{\"1\":{\"1803\":1}}],[\"hasbindings\",{\"1\":{\"1795\":1}}],[\"hasown\",{\"1\":{\"1786\":1,\"1803\":1,\"1804\":3}}],[\"hasownproperty\",{\"0\":{\"1067\":1},\"1\":{\"443\":1,\"469\":1,\"474\":1,\"995\":8,\"1067\":4,\"1906\":1,\"1907\":1,\"1909\":1,\"1910\":1,\"1914\":2,\"1917\":1,\"1918\":1,\"1923\":1,\"1990\":2,\"1993\":2}}],[\"haskey\",{\"1\":{\"1274\":1}}],[\"hasclass\",{\"1\":{\"1204\":1}}],[\"has\",{\"1\":{\"520\":1,\"862\":2,\"865\":1,\"869\":2,\"924\":6,\"1203\":1,\"1204\":1,\"1792\":1,\"1804\":4,\"1897\":1,\"1905\":3,\"1926\":2,\"1928\":2,\"1929\":3,\"1962\":2,\"1989\":1,\"2019\":1}}],[\"hasattr\",{\"1\":{\"405\":1}}],[\"hashindex\",{\"1\":{\"2058\":3}}],[\"hashpos\",{\"1\":{\"2058\":4}}],[\"hashchange\",{\"1\":{\"2049\":2}}],[\"hashhistory\",{\"1\":{\"2027\":1,\"2030\":1}}],[\"hashookevent\",{\"1\":{\"1802\":1}}],[\"hash\",{\"0\":{\"1543\":1,\"2049\":1},\"1\":{\"142\":3,\"143\":1,\"158\":3,\"159\":3,\"494\":1,\"867\":2,\"1093\":3,\"1468\":7,\"2027\":2,\"2028\":1,\"2029\":1,\"2030\":1,\"2044\":1,\"2048\":1,\"2049\":9,\"2050\":1,\"2051\":2,\"2058\":15,\"2065\":3}}],[\"hbs\",{\"1\":{\"331\":1}}],[\"h\",{\"1\":{\"331\":3,\"535\":1,\"740\":2,\"849\":1,\"854\":1,\"856\":1,\"888\":1,\"889\":1,\"890\":1,\"1427\":2,\"1450\":2,\"1486\":1,\"1661\":2,\"1827\":2,\"1877\":3,\"1880\":1,\"1975\":11,\"1978\":4,\"1979\":3,\"2025\":2,\"2031\":1,\"2066\":1,\"2070\":1,\"2100\":1}}],[\"h查看命令行的指令含义\",{\"1\":{\"331\":1}}],[\"href属性值中的换行符或制表符做兼容处理\",{\"1\":{\"1792\":1}}],[\"href=\",{\"1\":{\"533\":1,\"623\":1,\"659\":1,\"664\":2,\"747\":2,\"1080\":1,\"1112\":3,\"1120\":1,\"1123\":2,\"1156\":6,\"1353\":2,\"1369\":2,\"1543\":2,\"2050\":2}}],[\"href\",{\"0\":{\"1080\":1},\"1\":{\"293\":2,\"496\":1,\"1093\":4,\"1094\":1,\"1205\":2,\"1569\":1,\"1792\":1,\"2032\":2,\"2051\":1,\"2054\":1,\"2065\":3,\"2066\":3}}],[\"h5笔记\",{\"0\":{\"689\":1}}],[\"h5\",{\"0\":{\"1182\":1},\"1\":{\"292\":1,\"662\":1,\"666\":1,\"668\":1,\"1174\":1,\"1182\":1}}],[\"hook\",{\"0\":{\"1501\":1},\"1\":{\"1501\":2,\"1789\":3,\"1807\":1,\"1834\":1,\"1954\":2,\"2002\":2,\"2029\":6}}],[\"hooks\",{\"1\":{\"156\":1}}],[\"hold\",{\"1\":{\"1154\":1,\"1646\":1}}],[\"holders\",{\"1\":{\"156\":1}}],[\"hort\",{\"1\":{\"924\":1}}],[\"horizontal\",{\"1\":{\"552\":1}}],[\"hours\",{\"1\":{\"875\":1,\"877\":2}}],[\"hobby\",{\"1\":{\"830\":4,\"1357\":3,\"1488\":2}}],[\"hover\",{\"0\":{\"1217\":1},\"1\":{\"520\":1,\"1214\":1,\"1217\":1,\"1265\":2,\"1332\":3,\"1340\":3}}],[\"hogan\",{\"1\":{\"331\":2}}],[\"homeview\",{\"1\":{\"2041\":1,\"2042\":1}}],[\"homerouter\",{\"1\":{\"321\":4}}],[\"home\",{\"1\":{\"301\":2,\"304\":1,\"307\":1,\"329\":3,\"355\":1,\"1456\":4,\"1458\":3,\"1459\":2,\"1461\":3,\"2025\":5,\"2041\":1,\"2042\":1,\"2050\":1,\"2053\":2,\"2058\":24}}],[\"homebrew\",{\"1\":{\"94\":1}}],[\"host标注了url地址中的domain\",{\"1\":{\"1633\":1}}],[\"hostname\",{\"1\":{\"1093\":2,\"2051\":1}}],[\"hosts\",{\"1\":{\"372\":1,\"373\":1}}],[\"host\",{\"1\":{\"269\":1,\"305\":1,\"1093\":3,\"1630\":1,\"1633\":1,\"2051\":2,\"2058\":1}}],[\"hot\",{\"1\":{\"210\":1}}],[\"how\",{\"1\":{\"64\":1}}],[\"heisenberg\",{\"1\":{\"1825\":1}}],[\"height=400\",{\"1\":{\"1088\":3}}],[\"height=\",{\"1\":{\"666\":1,\"667\":1,\"668\":1,\"673\":1,\"674\":1}}],[\"height来设置行高\",{\"1\":{\"621\":1}}],[\"height指的是内容区\",{\"1\":{\"547\":1}}],[\"height的百分比设置\",{\"1\":{\"543\":1}}],[\"height两个属性来设置\",{\"1\":{\"543\":1}}],[\"height\",{\"1\":{\"496\":3,\"543\":1,\"547\":1,\"574\":1,\"582\":1,\"589\":1,\"601\":2,\"621\":1,\"641\":1,\"651\":1,\"701\":1,\"703\":3,\"706\":5,\"714\":2,\"722\":2,\"727\":2,\"732\":1,\"737\":1,\"739\":2,\"740\":8,\"748\":1,\"749\":1,\"750\":1,\"764\":1,\"765\":1,\"895\":1,\"1087\":7,\"1098\":2,\"1139\":1,\"1140\":1,\"1148\":2,\"1150\":1,\"1153\":2,\"1155\":4,\"1206\":2,\"1207\":4,\"1224\":4,\"1225\":2,\"1232\":2,\"1260\":1,\"1269\":4,\"1274\":1,\"1284\":2,\"1288\":4,\"1296\":1,\"1327\":3,\"1328\":1,\"1334\":4,\"1341\":2,\"1585\":1}}],[\"hey\",{\"1\":{\"1648\":1}}],[\"herolist\",{\"1\":{\"1589\":1}}],[\"hero\",{\"1\":{\"895\":1}}],[\"here\",{\"1\":{\"957\":1,\"1804\":1}}],[\"here<\",{\"1\":{\"772\":1}}],[\"hereby\",{\"1\":{\"156\":1}}],[\"he\",{\"1\":{\"854\":1}}],[\"heapsort\",{\"1\":{\"416\":1}}],[\"head之一\",{\"1\":{\"1607\":1}}],[\"heading\",{\"1\":{\"1102\":1}}],[\"header>\",{\"1\":{\"662\":1,\"694\":1,\"1954\":2}}],[\"header分别进行base64编码拼接后签名\",{\"1\":{\"368\":1}}],[\"header\",{\"0\":{\"365\":1},\"1\":{\"360\":1,\"364\":1,\"367\":1,\"694\":1,\"1203\":1,\"1331\":4,\"1332\":3,\"1341\":2,\"1446\":1,\"1954\":5}}],[\"headers头让服务器把允许浏览器访问的头放入白名单\",{\"1\":{\"1613\":1}}],[\"headers\",{\"1\":{\"282\":3,\"305\":1,\"1577\":1,\"1578\":1,\"1584\":1,\"1585\":1,\"1586\":2,\"1587\":1,\"1609\":2,\"1613\":1}}],[\"head>\",{\"1\":{\"287\":2,\"329\":1,\"580\":4,\"657\":2,\"764\":1,\"765\":1,\"770\":2,\"773\":1,\"1078\":1,\"1087\":4,\"1139\":1,\"1140\":1,\"1148\":1,\"1153\":1,\"1155\":2}}],[\"head\",{\"0\":{\"693\":1},\"1\":{\"14\":1}}],[\"helvetica\",{\"1\":{\"1249\":2,\"1250\":1,\"1255\":1,\"1265\":4,\"1267\":1,\"1275\":3}}],[\"hellworld\",{\"1\":{\"490\":2}}],[\"hello>\",{\"1\":{\"1422\":1}}],[\"hellohellohello\",{\"1\":{\"889\":1}}],[\"helloworld>\",{\"1\":{\"1358\":2}}],[\"helloworld\",{\"1\":{\"490\":1,\"777\":1,\"1427\":1,\"1834\":2}}],[\"hello\",{\"1\":{\"41\":1,\"148\":2,\"149\":2,\"155\":7,\"273\":1,\"283\":1,\"301\":1,\"329\":1,\"388\":2,\"389\":2,\"392\":1,\"393\":1,\"670\":1,\"765\":1,\"789\":6,\"790\":3,\"795\":1,\"796\":1,\"801\":2,\"806\":1,\"808\":3,\"809\":6,\"810\":1,\"812\":2,\"843\":1,\"849\":1,\"854\":1,\"875\":2,\"876\":1,\"888\":3,\"889\":9,\"890\":1,\"891\":4,\"892\":4,\"917\":2,\"928\":1,\"934\":3,\"935\":1,\"940\":5,\"941\":2,\"943\":2,\"950\":2,\"958\":1,\"980\":1,\"982\":2,\"1015\":6,\"1080\":1,\"1081\":1,\"1088\":1,\"1158\":1,\"1416\":2,\"1422\":3,\"1441\":1,\"1446\":1,\"1460\":4,\"1486\":1,\"1507\":2,\"1573\":1,\"1576\":1,\"1577\":1,\"1791\":1,\"1797\":3,\"1834\":2,\"1835\":3,\"1840\":1,\"1872\":1,\"1873\":1,\"1879\":2,\"1886\":1,\"1953\":2,\"2043\":1,\"2045\":2,\"2101\":2}}],[\"help\",{\"1\":{\"331\":1,\"380\":1}}],[\"hgroup元素代表\",{\"1\":{\"694\":1}}],[\"hgroup>\",{\"1\":{\"694\":1}}],[\"hg\",{\"1\":{\"15\":1}}],[\"htm1\",{\"1\":{\"577\":1}}],[\"html字符串还剩下\",{\"1\":{\"1792\":1}}],[\"html字符串没有任何变化\",{\"1\":{\"1792\":1}}],[\"html的源为http\",{\"1\":{\"1600\":1}}],[\"html的路由\",{\"1\":{\"316\":1}}],[\"htmlelement\",{\"1\":{\"1515\":1}}],[\"htmlevents\",{\"1\":{\"1357\":1}}],[\"html存在安全性问题\",{\"1\":{\"1400\":1}}],[\"html可以识别\",{\"1\":{\"1400\":1}}],[\"html会替换掉节点中所有的内容\",{\"1\":{\"1400\":1}}],[\"htmlcollection\",{\"1\":{\"1112\":6}}],[\"html代码\",{\"1\":{\"1078\":1,\"1079\":1,\"1080\":1,\"1081\":1}}],[\"html4\",{\"1\":{\"691\":2}}],[\"html5history\",{\"1\":{\"2027\":1}}],[\"html5rocks\",{\"1\":{\"773\":1}}],[\"html5\",{\"0\":{\"690\":1,\"747\":1,\"756\":1,\"2050\":1},\"1\":{\"691\":1,\"693\":1,\"694\":1,\"701\":1,\"747\":4,\"754\":2,\"1084\":1,\"1647\":2,\"1649\":1,\"2048\":1,\"2050\":3,\"2052\":1}}],[\"html初级笔记\",{\"0\":{\"654\":1}}],[\"html文件\",{\"1\":{\"288\":1,\"316\":1}}],[\"html>\",{\"1\":{\"287\":4,\"329\":2,\"580\":5,\"657\":4,\"691\":1,\"692\":2,\"770\":4,\"1139\":2,\"1140\":2,\"1792\":2}}],[\"htmlwebpackplugin\",{\"1\":{\"128\":3}}],[\"html\",{\"0\":{\"657\":1,\"762\":1,\"1078\":1,\"1115\":1,\"1143\":1,\"1400\":1,\"1792\":1,\"2110\":1},\"1\":{\"15\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"40\":1,\"64\":1,\"122\":1,\"128\":10,\"138\":1,\"143\":2,\"219\":2,\"264\":9,\"268\":2,\"271\":2,\"275\":1,\"285\":1,\"286\":1,\"287\":6,\"289\":1,\"292\":1,\"294\":5,\"306\":1,\"307\":1,\"316\":2,\"327\":2,\"328\":1,\"339\":1,\"368\":1,\"515\":1,\"520\":1,\"534\":1,\"539\":1,\"548\":1,\"570\":1,\"616\":1,\"650\":2,\"656\":1,\"658\":2,\"664\":2,\"666\":2,\"670\":1,\"680\":3,\"681\":8,\"691\":2,\"693\":2,\"694\":1,\"702\":1,\"703\":1,\"705\":1,\"746\":2,\"762\":2,\"763\":1,\"764\":1,\"765\":2,\"766\":1,\"767\":1,\"768\":1,\"769\":12,\"770\":4,\"771\":1,\"912\":1,\"918\":1,\"958\":1,\"1078\":2,\"1088\":5,\"1093\":8,\"1094\":1,\"1099\":3,\"1100\":2,\"1101\":2,\"1102\":1,\"1109\":2,\"1111\":1,\"1112\":1,\"1124\":1,\"1125\":1,\"1137\":1,\"1139\":4,\"1140\":3,\"1141\":1,\"1143\":3,\"1144\":2,\"1150\":1,\"1168\":1,\"1172\":1,\"1198\":3,\"1205\":4,\"1232\":4,\"1237\":1,\"1238\":1,\"1247\":2,\"1299\":1,\"1350\":1,\"1400\":4,\"1404\":3,\"1419\":1,\"1427\":1,\"1428\":1,\"1435\":1,\"1446\":1,\"1482\":1,\"1483\":1,\"1485\":1,\"1515\":1,\"1526\":9,\"1530\":3,\"1543\":1,\"1555\":1,\"1556\":1,\"1560\":2,\"1569\":1,\"1570\":2,\"1571\":1,\"1636\":2,\"1640\":1,\"1791\":4,\"1792\":35,\"1804\":1,\"1949\":1,\"1974\":2,\"2041\":1,\"2047\":1,\"2048\":1,\"2050\":5,\"2051\":7,\"2053\":1,\"2095\":1},\"2\":{\"677\":1,\"775\":1}}],[\"http请求方法\",{\"1\":{\"1575\":1,\"1576\":1}}],[\"http2\",{\"1\":{\"1530\":1}}],[\"httponly\",{\"1\":{\"345\":2,\"350\":2,\"355\":1,\"2095\":2}}],[\"httpversion\",{\"1\":{\"282\":2,\"305\":1}}],[\"http协议中很多时候都是客户端或服务器告诉另一端详细的信息\",{\"1\":{\"1539\":2}}],[\"http协议\",{\"1\":{\"276\":1,\"277\":1}}],[\"http协议版本号\",{\"1\":{\"268\":1,\"271\":1}}],[\"http模块\",{\"0\":{\"265\":1}}],[\"http\",{\"0\":{\"269\":1,\"270\":1,\"276\":1,\"282\":1,\"283\":1,\"284\":1,\"1627\":1},\"1\":{\"39\":1,\"64\":1,\"134\":2,\"189\":1,\"266\":1,\"268\":2,\"271\":3,\"272\":1,\"273\":7,\"274\":1,\"275\":2,\"282\":7,\"283\":5,\"284\":10,\"285\":4,\"287\":11,\"289\":1,\"291\":1,\"292\":5,\"294\":3,\"296\":1,\"298\":1,\"301\":1,\"305\":2,\"307\":3,\"329\":1,\"339\":2,\"343\":1,\"345\":1,\"346\":1,\"358\":3,\"360\":1,\"493\":1,\"494\":1,\"691\":1,\"692\":1,\"693\":1,\"764\":1,\"773\":1,\"906\":1,\"958\":1,\"1093\":7,\"1094\":2,\"1156\":6,\"1316\":2,\"1317\":2,\"1369\":2,\"1444\":1,\"1445\":3,\"1468\":1,\"1530\":1,\"1568\":1,\"1569\":1,\"1575\":1,\"1576\":1,\"1577\":1,\"1579\":2,\"1581\":1,\"1582\":1,\"1584\":1,\"1586\":1,\"1587\":1,\"1592\":1,\"1593\":1,\"1600\":1,\"1607\":1,\"1627\":2,\"1628\":1,\"1629\":1,\"1630\":3,\"1632\":2,\"1639\":1,\"1644\":1,\"1646\":4,\"1647\":5,\"1648\":2,\"1649\":6,\"2030\":2,\"2051\":6,\"2088\":1,\"2091\":6}}],[\"https\",{\"0\":{\"2091\":1},\"1\":{\"2\":1,\"12\":2,\"17\":1,\"39\":1,\"65\":1,\"68\":2,\"69\":1,\"84\":1,\"88\":1,\"91\":1,\"93\":1,\"94\":4,\"122\":1,\"133\":1,\"146\":1,\"171\":1,\"177\":1,\"213\":2,\"219\":2,\"228\":2,\"241\":1,\"268\":1,\"269\":1,\"271\":1,\"275\":1,\"298\":1,\"324\":2,\"338\":2,\"339\":1,\"340\":1,\"341\":3,\"345\":2,\"368\":2,\"476\":1,\"624\":1,\"666\":1,\"667\":1,\"773\":1,\"906\":2,\"918\":1,\"958\":1,\"1087\":1,\"1105\":1,\"1181\":1,\"1205\":1,\"1207\":2,\"1219\":1,\"1316\":1,\"1426\":1,\"1475\":1,\"1482\":1,\"1483\":2,\"1485\":1,\"1491\":2,\"1530\":1,\"1560\":1,\"1571\":1,\"1583\":2,\"1587\":1,\"1589\":1,\"1591\":2,\"1594\":4,\"1600\":1,\"1607\":1,\"1609\":4,\"1804\":1,\"2040\":1,\"2041\":1,\"2047\":1,\"2053\":1,\"2058\":3,\"2065\":1,\"2088\":1,\"2091\":17,\"2095\":2},\"2\":{\"2093\":1}}],[\"标记静态根节点\",{\"1\":{\"1795\":1}}],[\"标记静态节点\",{\"1\":{\"1795\":1}}],[\"标记已经转为响应式\",{\"1\":{\"1785\":1}}],[\"标记此数据已经转为响应式\",{\"1\":{\"1784\":1}}],[\"标记一个对象\",{\"1\":{\"1506\":1}}],[\"标记为\",{\"1\":{\"1261\":1}}],[\"标记混杂在一起\",{\"1\":{\"1143\":1}}],[\"标记的\",{\"0\":{\"1080\":1}}],[\"标记\",{\"1\":{\"1031\":1,\"2064\":1}}],[\"标记清除方式\",{\"1\":{\"1031\":1}}],[\"标记清除\",{\"0\":{\"1029\":1},\"1\":{\"1031\":1}}],[\"标记清除较为常用\",{\"1\":{\"1028\":1}}],[\"标记清除和引用计数\",{\"1\":{\"1028\":1}}],[\"标记标签\",{\"0\":{\"699\":1}}],[\"标志是否为自闭合标签\",{\"1\":{\"1792\":1}}],[\"标志使用了默认值\",{\"1\":{\"1306\":1}}],[\"标志\",{\"1\":{\"923\":2,\"1896\":1}}],[\"标注量词作用的元素\",{\"1\":{\"902\":1}}],[\"标识当前从何处开始解析模板字符串\",{\"1\":{\"1792\":1}}],[\"标识变量的值\",{\"1\":{\"1582\":1}}],[\"标识变量\",{\"1\":{\"1582\":1}}],[\"标识符本身也是一个节点\",{\"1\":{\"1975\":1}}],[\"标识符一般都采用驼峰命名法\",{\"1\":{\"777\":1}}],[\"标识符不能是\",{\"1\":{\"777\":1}}],[\"标识符不能以数字开头\",{\"1\":{\"777\":1}}],[\"标识符中可以含有字母\",{\"1\":{\"777\":1}}],[\"标识符\",{\"1\":{\"777\":1,\"924\":1,\"1265\":1}}],[\"标识自己身份\",{\"1\":{\"3\":1}}],[\"标题填入\",{\"0\":{\"1696\":1},\"1\":{\"1684\":1}}],[\"标题\",{\"1\":{\"661\":1,\"697\":1,\"1208\":1}}],[\"标准化\",{\"0\":{\"2054\":1}}],[\"标准化参数\",{\"1\":{\"2045\":2}}],[\"标准以及\",{\"1\":{\"1151\":1}}],[\"标准规定事件流包括三个阶段\",{\"1\":{\"1141\":1}}],[\"标准采用捕获\",{\"1\":{\"1141\":1}}],[\"标准制定以前\",{\"1\":{\"859\":1}}],[\"标准流\",{\"0\":{\"539\":1},\"1\":{\"539\":1}}],[\"标准库的安装目录\",{\"1\":{\"379\":1}}],[\"标准中注册的声明\",{\"1\":{\"366\":2}}],[\"标准\",{\"1\":{\"358\":2}}],[\"标准并不相同\",{\"1\":{\"146\":1}}],[\"标准吗\",{\"1\":{\"25\":1}}],[\"标签之后所对应的事件处理函数\",{\"1\":{\"2065\":1}}],[\"标签进行了判断\",{\"1\":{\"2054\":1}}],[\"标签非常相似的树型结构\",{\"1\":{\"1974\":1}}],[\"标签开始状态\",{\"1\":{\"1974\":2}}],[\"标签里的内容就是模板内容\",{\"1\":{\"1880\":1}}],[\"标签里面的文本\",{\"1\":{\"1124\":1}}],[\"标签数据的预处理函数\",{\"1\":{\"1656\":1}}],[\"标签在模板中的结束位置\",{\"1\":{\"1353\":1}}],[\"标签在模板中的起始位置\",{\"1\":{\"1353\":1}}],[\"标签起始部分的结束位置\",{\"1\":{\"1353\":2}}],[\"标签体内容\",{\"1\":{\"1353\":1}}],[\"标签增加到\",{\"1\":{\"1198\":1}}],[\"标签对象转换为\",{\"1\":{\"1198\":1}}],[\"标签是严格模式\",{\"1\":{\"957\":1}}],[\"标签内容\",{\"1\":{\"912\":1}}],[\"标签legend\",{\"1\":{\"756\":1}}],[\"标签fieldset\",{\"1\":{\"756\":1}}],[\"标签上并添加\",{\"1\":{\"2032\":1}}],[\"标签上获取的是真实\",{\"1\":{\"1428\":1}}],[\"标签上\",{\"1\":{\"756\":1}}],[\"标签上添加的\",{\"1\":{\"616\":1}}],[\"标签为lable\",{\"1\":{\"756\":1}}],[\"标签为button\",{\"1\":{\"756\":1}}],[\"标签为textarea\",{\"1\":{\"756\":1}}],[\"标签为select\",{\"1\":{\"756\":1}}],[\"标签为input\",{\"1\":{\"756\":1}}],[\"标签拥有的特性\",{\"1\":{\"749\":1}}],[\"标签支持所有\",{\"1\":{\"749\":1}}],[\"标签与\",{\"1\":{\"749\":1}}],[\"标签只有两个属性\",{\"1\":{\"703\":1}}],[\"标签的时候\",{\"1\":{\"2050\":1}}],[\"标签的文本内容\",{\"1\":{\"1156\":1}}],[\"标签的文本内容会变为\",{\"1\":{\"1156\":1}}],[\"标签的开始标签和结束标签是对应着的\",{\"1\":{\"912\":1}}],[\"标签的\",{\"1\":{\"758\":1}}],[\"标签的使用方式几乎完全相同\",{\"1\":{\"749\":1}}],[\"标签的属性\",{\"0\":{\"748\":1,\"749\":1}}],[\"标签的两个属性<canvas>\",{\"1\":{\"703\":1}}],[\"标签的预定义和自定义属性我们统称为\",{\"1\":{\"680\":1}}],[\"标签属性的属性值\",{\"1\":{\"1792\":1}}],[\"标签属性的属性名\",{\"1\":{\"1792\":1}}],[\"标签属性\",{\"0\":{\"703\":1},\"1\":{\"1353\":1}}],[\"标签会暂停解析\",{\"1\":{\"675\":1}}],[\"标签下添加一个\",{\"1\":{\"666\":1}}],[\"标签中书写的内容\",{\"1\":{\"1877\":1}}],[\"标签中出现的属性\",{\"1\":{\"680\":1}}],[\"标签中从而转为超链接\",{\"1\":{\"664\":1}}],[\"标签中设置字体大小font\",{\"1\":{\"650\":1}}],[\"标签中的\",{\"1\":{\"295\":2,\"675\":1,\"937\":1}}],[\"标签引入图片\",{\"1\":{\"295\":1}}],[\"标签引入\",{\"1\":{\"295\":2}}],[\"标签元素相关的api\",{\"1\":{\"216\":1}}],[\"标签名称状态\",{\"1\":{\"1974\":1}}],[\"标签名必须是平台保留标签\",{\"1\":{\"1795\":1}}],[\"标签名\",{\"1\":{\"14\":3,\"516\":1,\"1353\":2}}],[\"标签\",{\"0\":{\"14\":1,\"675\":1,\"747\":1},\"1\":{\"293\":5,\"328\":2,\"516\":1,\"519\":5,\"666\":1,\"756\":1,\"1124\":1,\"1792\":1,\"1795\":1,\"2032\":3,\"2035\":1}}],[\"从组件上面去提取\",{\"1\":{\"2082\":1}}],[\"从原生locaton\",{\"1\":{\"2058\":2}}],[\"从原生的\",{\"1\":{\"2057\":1}}],[\"从原理角度对比\",{\"1\":{\"1492\":1}}],[\"从代码中可以看出当我们编写守卫函数时调用next\",{\"1\":{\"2029\":1}}],[\"从第一个\",{\"1\":{\"1974\":1}}],[\"从第一个版本开始时的一个\",{\"1\":{\"980\":1}}],[\"从用户使用的角度来说\",{\"1\":{\"1953\":1}}],[\"从集合中删除给定的值\",{\"1\":{\"1926\":1}}],[\"从依赖集合中移除\",{\"1\":{\"1890\":1,\"1984\":1}}],[\"从桶中取得\",{\"1\":{\"1889\":1}}],[\"从官方文档给出的生命周期流程图中可以看到\",{\"1\":{\"1806\":1,\"1807\":1}}],[\"从标签栈中匹配正确的标签\",{\"1\":{\"1792\":1}}],[\"从<div之后到开始标签的结束符号\",{\"1\":{\"1792\":1}}],[\"从高位算起\",{\"1\":{\"1712\":1}}],[\"从选项确定阅读顺序\",{\"1\":{\"1699\":1}}],[\"从文章整体来讲肯定还是要有其存在的作用\",{\"1\":{\"1685\":1}}],[\"从文档中可以看出\",{\"1\":{\"1203\":1}}],[\"从协议上赋予了服务器主动推送消息的能力\",{\"1\":{\"1647\":1}}],[\"从网络中\",{\"1\":{\"1626\":1}}],[\"从常理出发\",{\"1\":{\"1621\":1}}],[\"从古至今\",{\"1\":{\"1569\":1}}],[\"从使用角度对比\",{\"1\":{\"1492\":1}}],[\"从定义数据角度对比\",{\"1\":{\"1492\":1}}],[\"从绑定事件开始\",{\"1\":{\"1435\":1}}],[\"从其他\",{\"1\":{\"1300\":1}}],[\"从其他的镜像源下载\",{\"1\":{\"67\":1}}],[\"从外形上来判断他和\",{\"1\":{\"1250\":1}}],[\"从效果上可以看出\",{\"1\":{\"1224\":1}}],[\"从下到上隐藏的效果\",{\"1\":{\"1222\":1}}],[\"从下标为3的元素之前开始插入\",{\"1\":{\"854\":2}}],[\"从下标为3的元素开始删除\",{\"1\":{\"854\":1}}],[\"从大到小隐藏的效果\",{\"1\":{\"1221\":1}}],[\"从小到大显示出来的效果\",{\"1\":{\"1221\":1}}],[\"从结果可以看出\",{\"1\":{\"1219\":1}}],[\"从它的\",{\"1\":{\"1194\":1}}],[\"从当前元素出来时触发\",{\"1\":{\"1148\":1}}],[\"从某个元素出来时触发\",{\"1\":{\"1148\":1}}],[\"从逻辑上讲\",{\"1\":{\"1029\":1}}],[\"从逻辑角度来看\",{\"1\":{\"797\":1}}],[\"从上述代码可以看出原始的\",{\"1\":{\"2000\":1}}],[\"从上图可以看出\",{\"1\":{\"1647\":1}}],[\"从上面代码可以看到\",{\"1\":{\"995\":1}}],[\"从上面的介绍我们可以看出\",{\"1\":{\"768\":1}}],[\"从上到下显示出来的效果\",{\"1\":{\"1222\":1}}],[\"从上到下\",{\"1\":{\"920\":1}}],[\"从例子可以看出\",{\"1\":{\"918\":1}}],[\"从左到右\",{\"1\":{\"918\":1}}],[\"从左到右的第\",{\"1\":{\"911\":1}}],[\"从左向右找第一个大于等于基准的数\",{\"1\":{\"415\":1}}],[\"从一个字符串中将符合条件的内容提取出来\",{\"1\":{\"894\":1}}],[\"从map映射中移除指定键名及其对应的值\",{\"1\":{\"869\":1}}],[\"从右往左的队列\",{\"1\":{\"853\":1}}],[\"从右向左找第一个小于基准的数\",{\"1\":{\"415\":1}}],[\"从$\",{\"1\":{\"770\":1}}],[\"从进入网站到关闭浏览器所经过的这段时间\",{\"1\":{\"768\":1}}],[\"从中发现了\",{\"1\":{\"694\":1}}],[\"从后到前的排列顺序\",{\"1\":{\"578\":1}}],[\"从所有属性都没有值\",{\"1\":{\"528\":1}}],[\"从最低位开始取每个位组成radix数组\",{\"1\":{\"419\":1}}],[\"从最初的几百行\",{\"1\":{\"23\":1}}],[\"从数列中挑出一个元素\",{\"1\":{\"415\":1}}],[\"从而确保数据没有被篡改或伪造\",{\"1\":{\"2100\":1}}],[\"从而确定其类型\",{\"1\":{\"1010\":1}}],[\"从而确定统计次数数组的大小\",{\"1\":{\"417\":1}}],[\"从而防止恶意脚本的注入\",{\"1\":{\"2095\":1}}],[\"从而防止攻击者通过网络中的中间人攻击来窃取数据或者注入恶意代码\",{\"1\":{\"2095\":1}}],[\"从而防止攻击者通过注入恶意脚本代码来攻击网站\",{\"1\":{\"2095\":1}}],[\"从而防止攻击者通过\",{\"1\":{\"2095\":1}}],[\"从而防止攻击者构造伪造的表单进行攻击\",{\"1\":{\"2088\":1}}],[\"从而增加了中间人攻击的风险\",{\"1\":{\"2091\":1}}],[\"从而获取原始消息\",{\"1\":{\"2100\":1}}],[\"从而获取客户端和服务器之间传递的信息\",{\"1\":{\"2091\":1}}],[\"从而获取最新的计算属性的值\",{\"1\":{\"1859\":1}}],[\"从而窃取你的资金\",{\"1\":{\"2087\":1}}],[\"从而清除对已卸载的组件的引用\",{\"1\":{\"2070\":1}}],[\"从而进行一个初始化\",{\"1\":{\"2058\":1}}],[\"从而根据\",{\"1\":{\"2049\":1}}],[\"从而通知\",{\"1\":{\"2034\":1}}],[\"从而作为下一次路由切换的依据\",{\"1\":{\"2033\":1}}],[\"从而访问\",{\"1\":{\"2031\":1}}],[\"从而给\",{\"1\":{\"2031\":1}}],[\"从而初始化应用的路由状态\",{\"1\":{\"2026\":1}}],[\"从而创建了\",{\"1\":{\"1998\":1}}],[\"从而自动调用渲染器完成页面的渲染和更新\",{\"1\":{\"1943\":1}}],[\"从而修复问题\",{\"1\":{\"1927\":1}}],[\"从而与\",{\"1\":{\"1925\":1}}],[\"从而也得到一个代理对象\",{\"1\":{\"1923\":1}}],[\"从而达到攻击目的\",{\"1\":{\"2091\":1}}],[\"从而达到依赖收集的效果\",{\"1\":{\"1902\":1}}],[\"从而达到尽可能少的操作真实dom的目的\",{\"1\":{\"1789\":1}}],[\"从而建立联系\",{\"1\":{\"1897\":1}}],[\"从而触发子组件的更新\",{\"1\":{\"1955\":1}}],[\"从而触发回调执行\",{\"1\":{\"1897\":1}}],[\"从而触发被监听属性的getter方法\",{\"1\":{\"1854\":1,\"1860\":1}}],[\"从而触发函数内数据的getter方法\",{\"1\":{\"1806\":1}}],[\"从而更新计算属性的返回值并返回\",{\"1\":{\"1850\":1}}],[\"从而重新执行组件的render函数\",{\"1\":{\"1850\":1}}],[\"从而被prop数据的setter捕获\",{\"1\":{\"1841\":1}}],[\"从而不处理这个事件\",{\"1\":{\"2065\":1}}],[\"从而不存在模板编译阶段\",{\"1\":{\"1805\":1}}],[\"从而不需要按顺序传入\",{\"1\":{\"1336\":1}}],[\"从而降低内存开销\",{\"1\":{\"1804\":1}}],[\"从而简化计算\",{\"1\":{\"1722\":1}}],[\"从而提高序列的表示能力\",{\"1\":{\"1678\":1}}],[\"从而提升效率\",{\"1\":{\"1526\":1}}],[\"从而实现特征图的上采样\",{\"1\":{\"1667\":1}}],[\"从而实现批量加载数据\",{\"1\":{\"1655\":1}}],[\"从而实现了截取函数功能\",{\"1\":{\"402\":1}}],[\"从而主动断开和服务器的连接\",{\"1\":{\"1646\":1}}],[\"从而最大限度的保证了单线程的流畅运行\",{\"1\":{\"1558\":1}}],[\"从而导致梯度消失或爆炸的问题\",{\"1\":{\"1666\":1}}],[\"从而导致消息队列中的很多其他任务无法得到执行\",{\"1\":{\"1558\":1}}],[\"从而导致浏览器\",{\"1\":{\"1558\":1}}],[\"从而对初学者而言更为友好\",{\"1\":{\"1485\":1}}],[\"从而令我们使用这些数据时不需要重复的this\",{\"1\":{\"1453\":1}}],[\"从而保证在对当前访问的节点进行转换之前\",{\"1\":{\"1977\":1}}],[\"从而保证用户只在点击\",{\"1\":{\"1158\":1}}],[\"从而保证了全局的命名空间不会被很多变量名污染\",{\"1\":{\"948\":1}}],[\"从而可以得出新子节点在旧子节点中的位置索引\",{\"1\":{\"1969\":1}}],[\"从而可以根据用户的按键触发不同的行为\",{\"1\":{\"1149\":1}}],[\"从而可能会引起内存泄漏\",{\"1\":{\"865\":1}}],[\"从而形成一种交互\",{\"1\":{\"1135\":1}}],[\"从而使得页面遭到破坏\",{\"1\":{\"2094\":1}}],[\"从而使用它的各种方法来实现效果\",{\"1\":{\"1198\":1}}],[\"从而使代码隐式地脱离\",{\"1\":{\"956\":1}}],[\"从而使其能够被添加到依赖图中\",{\"1\":{\"138\":1}}],[\"从而证明了不具有变量提升的特性\",{\"1\":{\"939\":1}}],[\"从而造成\",{\"1\":{\"767\":1}}],[\"从而在过渡开始和过渡结束时做一些别的事情\",{\"1\":{\"641\":1,\"644\":1}}],[\"从而避免了层层传递值\",{\"1\":{\"2047\":1}}],[\"从而避免重复创建\",{\"1\":{\"1923\":1}}],[\"从而避免\",{\"1\":{\"1232\":1}}],[\"从而避免被浮动元素所覆盖\",{\"1\":{\"580\":1}}],[\"从而避免覆盖掉类变量\",{\"1\":{\"405\":1}}],[\"从而避免敏感信息被嗅探\",{\"1\":{\"368\":1}}],[\"从而回避重放攻击\",{\"1\":{\"366\":1}}],[\"从而减轻服务器的压力\",{\"1\":{\"360\":1}}],[\"从前端技术进化到体验科技\",{\"1\":{\"218\":1}}],[\"从入口文件出发\",{\"1\":{\"154\":1}}],[\"从配置文件和\",{\"1\":{\"154\":1}}],[\"从启动到结束会依次执行以下流程\",{\"1\":{\"154\":1}}],[\"从\",{\"1\":{\"78\":1,\"644\":4,\"716\":1,\"746\":1,\"765\":1,\"771\":1,\"803\":1,\"828\":1,\"838\":1,\"895\":1,\"923\":1,\"934\":1,\"941\":1,\"1141\":1,\"1196\":1,\"1232\":1,\"1368\":1,\"1711\":1,\"1752\":1,\"1889\":2,\"1974\":2,\"1979\":1,\"2065\":1}}],[\"从此以后\",{\"1\":{\"25\":1}}],[\"从此\",{\"1\":{\"24\":1}}],[\"从服务器上拉取代码并自动合并\",{\"1\":{\"13\":1}}],[\"从远程库下载代码\",{\"1\":{\"13\":1}}],[\"并告诉服务器自身支持的加密算法以及密钥长度等信息\",{\"1\":{\"2091\":2}}],[\"并诱导你点击链接\",{\"1\":{\"2087\":1}}],[\"并使用\",{\"1\":{\"2000\":1}}],[\"并使得渲染函数能够通过\",{\"1\":{\"1956\":1}}],[\"并作为函数的返回值返回\",{\"1\":{\"1974\":1}}],[\"并作为渲染器选项传递\",{\"1\":{\"1949\":1}}],[\"并让\",{\"1\":{\"1969\":1}}],[\"并指向下一个位置\",{\"1\":{\"1965\":1}}],[\"并指定操作类型为\",{\"1\":{\"1928\":1}}],[\"并指定输出长度\",{\"1\":{\"387\":1}}],[\"并定义到组件实例上\",{\"1\":{\"1954\":1}}],[\"并开始刷新队列\",{\"1\":{\"1954\":1}}],[\"并从配置中接受\",{\"1\":{\"1953\":1}}],[\"并从当前作用域往外寻找变量\",{\"1\":{\"1329\":1}}],[\"并调用\",{\"1\":{\"1948\":1,\"1954\":1}}],[\"并调用原型的\",{\"1\":{\"1910\":1}}],[\"并传递给事件处理函数两个参数\",{\"1\":{\"1953\":1}}],[\"并传递\",{\"1\":{\"1930\":1}}],[\"并更新router\",{\"1\":{\"2034\":1}}],[\"并更新\",{\"1\":{\"1924\":1,\"1993\":1}}],[\"并建立响应联系\",{\"1\":{\"1920\":1,\"1993\":1}}],[\"并执行相应的导航守卫\",{\"1\":{\"2029\":2}}],[\"并执行挂载\",{\"1\":{\"2003\":1}}],[\"并执行\",{\"1\":{\"1910\":1,\"2034\":1,\"2061\":1}}],[\"并执行子组件的挂载\",{\"1\":{\"1862\":1}}],[\"并强制指定一种继承关系\",{\"1\":{\"1910\":1}}],[\"并强制按照选项来组织代码\",{\"1\":{\"1485\":1}}],[\"并递归地调用\",{\"1\":{\"1897\":1}}],[\"并始终让\",{\"1\":{\"1891\":1}}],[\"并与\",{\"1\":{\"1889\":2}}],[\"并对每一个键值对调用\",{\"1\":{\"1926\":1}}],[\"并对每一个元素调用\",{\"1\":{\"1926\":1}}],[\"并对子组件执行上述流程\",{\"1\":{\"1862\":1}}],[\"并对其依赖项跟踪和更新触发进行显式控制\",{\"1\":{\"1507\":1}}],[\"并判断新旧值是否相等\",{\"1\":{\"1860\":1}}],[\"并为所有计算属性添加存取描述符\",{\"1\":{\"1859\":1}}],[\"并获取最新值\",{\"1\":{\"1855\":1}}],[\"并给computed的每个key创建一个computed\",{\"1\":{\"1846\":1}}],[\"并设置初始的路由状态\",{\"1\":{\"2026\":1}}],[\"并设置存取描述符\",{\"1\":{\"1845\":1,\"1846\":1}}],[\"并设置各种相关信息\",{\"1\":{\"1541\":1}}],[\"并存储在组件占位符\",{\"1\":{\"1838\":1}}],[\"并存储了\",{\"1\":{\"770\":1}}],[\"并挂载到一个元素上\",{\"1\":{\"1825\":1}}],[\"并用服务器的公钥加密密钥\",{\"1\":{\"2091\":2}}],[\"并用其替换\",{\"1\":{\"1806\":1}}],[\"并用得到的结果根据前面的规则执行比较\",{\"1\":{\"812\":1}}],[\"并可以通过继承或混入来复用确定父子关系\",{\"1\":{\"1800\":1}}],[\"并可以随意的修改\",{\"1\":{\"353\":1}}],[\"并进行相应的\",{\"1\":{\"1801\":1}}],[\"并进行相应的树管理\",{\"1\":{\"1791\":1}}],[\"并进行错误上报\",{\"1\":{\"505\":1}}],[\"并打上标记\",{\"1\":{\"1790\":2}}],[\"并打印数据和标签\",{\"1\":{\"1655\":1}}],[\"并转换为数组\",{\"1\":{\"1769\":1}}],[\"并依靠map方法\",{\"1\":{\"1769\":1}}],[\"并列关系\",{\"1\":{\"1693\":1}}],[\"并列结构\",{\"0\":{\"1692\":1},\"1\":{\"1685\":1}}],[\"并非所有情况下我们都希望深响应\",{\"1\":{\"1912\":1}}],[\"并非所有刺激的影响都是相等的\",{\"1\":{\"1678\":1}}],[\"并非官方标准\",{\"1\":{\"37\":1}}],[\"并支持在\",{\"1\":{\"1673\":1}}],[\"并支持负索引\",{\"1\":{\"856\":1}}],[\"并根据具体情况判断是否需要开启\",{\"1\":{\"1666\":1}}],[\"并根据指定的输出大小调整窗口大小和步幅\",{\"1\":{\"1663\":1}}],[\"并注明了获取服务的\",{\"1\":{\"1626\":1}}],[\"并发出一个get请求\",{\"1\":{\"1569\":2}}],[\"并发控制\",{\"0\":{\"497\":1}}],[\"并按下了回车\",{\"1\":{\"1569\":1}}],[\"并按下回车键后\",{\"1\":{\"1530\":1}}],[\"并按照升序排序\",{\"1\":{\"1054\":1}}],[\"并配置好default\",{\"1\":{\"1516\":1}}],[\"并配置\",{\"1\":{\"1441\":1}}],[\"并编译\",{\"0\":{\"1315\":1}}],[\"并最终将其完全从语言中移除\",{\"1\":{\"1313\":1}}],[\"并引入普通样式代码\",{\"1\":{\"1309\":1}}],[\"并引用该变量\",{\"1\":{\"402\":1}}],[\"并抛出错误信息\",{\"1\":{\"1252\":1}}],[\"并把当前\",{\"1\":{\"2030\":1}}],[\"并把\",{\"1\":{\"1930\":2}}],[\"并把原型上那次副作用函数的重新执行屏蔽\",{\"1\":{\"1910\":1}}],[\"并把返回值存储到effectfn\",{\"1\":{\"1897\":1}}],[\"并把返回的内容插入到指定的标签中\",{\"1\":{\"1230\":1}}],[\"并把activeeffect\",{\"1\":{\"1891\":1,\"1893\":1}}],[\"并把该键名从存储中删除\",{\"1\":{\"1436\":1}}],[\"并把这个\",{\"1\":{\"360\":1}}],[\"并清空队列\",{\"1\":{\"1225\":1}}],[\"并通过移动平均的方式整合到全局均值和方差中\",{\"1\":{\"1665\":1}}],[\"并通过可学习的缩放和偏移参数\",{\"1\":{\"1665\":1}}],[\"并通过\",{\"1\":{\"1492\":1}}],[\"并通过轮询等其他方式去获取消息并推送给用户\",{\"1\":{\"1104\":1}}],[\"并通过将\",{\"1\":{\"773\":1}}],[\"并提供其他一些元数据\",{\"1\":{\"1101\":1}}],[\"并提供了验证和类型转换等功能\",{\"1\":{\"189\":1}}],[\"并提供了更多的功能\",{\"1\":{\"189\":1}}],[\"并防止出现卡顿\",{\"1\":{\"1038\":1}}],[\"并在来自第三方网站的\",{\"1\":{\"2088\":1}}],[\"并在其中嵌入一个针对银行应用程序的攻击脚本\",{\"1\":{\"2087\":1}}],[\"并在其变化时重新渲染组件\",{\"1\":{\"1953\":2}}],[\"并在执行\",{\"1\":{\"2003\":1}}],[\"并在适当的时间点触发相应的钩子函数\",{\"1\":{\"1953\":1}}],[\"并在每个池化区域内找到最大值\",{\"1\":{\"1663\":1}}],[\"并在父组件的模板中使用组件标签\",{\"1\":{\"1422\":1}}],[\"并在变量名前面加上$\",{\"0\":{\"1238\":1}}],[\"并在这个内部函数中访问\",{\"1\":{\"1023\":1}}],[\"并在函数调用时被赋值\",{\"1\":{\"931\":1}}],[\"并赋值\",{\"1\":{\"1015\":3}}],[\"并赋值为构造函数的\",{\"1\":{\"1008\":1}}],[\"并赋值给\",{\"1\":{\"790\":1}}],[\"并得到结果\",{\"1\":{\"918\":1}}],[\"并返回其索引位置\",{\"1\":{\"2065\":1}}],[\"并返回为其创建的响应式数据\",{\"1\":{\"1909\":1}}],[\"并返回已修改的输入张量\",{\"1\":{\"1666\":1}}],[\"并返回合并后的新\",{\"1\":{\"1280\":1}}],[\"并返回一个函数\",{\"1\":{\"1854\":1}}],[\"并返回一个在末尾追加了新元素的的新的列表\",{\"1\":{\"1270\":1}}],[\"并返回一个布尔值\",{\"1\":{\"924\":1}}],[\"并返回了\",{\"1\":{\"1053\":1}}],[\"并返回新的数组长度\",{\"1\":{\"853\":1}}],[\"并返回\",{\"1\":{\"853\":1}}],[\"并返回执行结果\",{\"1\":{\"400\":2,\"815\":2}}],[\"并利用clear属性使其免受另一子元素的浮动影响\",{\"1\":{\"566\":1}}],[\"并集选择器\",{\"1\":{\"517\":1}}],[\"并取得位数\",{\"1\":{\"419\":1}}],[\"并同时满足堆积的性质\",{\"1\":{\"416\":1}}],[\"并\",{\"1\":{\"392\":1,\"1705\":1}}],[\"并安装依赖\",{\"1\":{\"332\":1}}],[\"并实现人机交互\",{\"1\":{\"218\":1}}],[\"并将密文发送给\",{\"1\":{\"2099\":1}}],[\"并将转账请求发送到服务器进行处理\",{\"1\":{\"2087\":1}}],[\"并将它们串联起来形成一个\",{\"1\":{\"2076\":1}}],[\"并将对应的组件和路由信息作为插槽的参数\",{\"1\":{\"2070\":1}}],[\"并将模板切割为\",{\"1\":{\"1974\":1}}],[\"并将该实例设置为\",{\"1\":{\"1954\":1}}],[\"并将该层应用于一个张量\",{\"1\":{\"1663\":1}}],[\"并将得到的值缓存到\",{\"1\":{\"1896\":1}}],[\"并将副作用函数作为参数传递\",{\"1\":{\"1893\":1,\"1985\":1}}],[\"并将dirty置为false\",{\"1\":{\"1859\":1}}],[\"并将新旧值作为参数传入\",{\"1\":{\"1855\":1}}],[\"并将新的节点返回\",{\"1\":{\"1117\":1}}],[\"并将计算属性复制给watcher实例的getter属性\",{\"1\":{\"1845\":1}}],[\"并将所有结果组合成一个张量\",{\"1\":{\"1663\":1}}],[\"并将全局代码解析执行完成后\",{\"1\":{\"1526\":1}}],[\"并将从多个函数中得到的状态组合起来处理复杂问题\",{\"1\":{\"1485\":1}}],[\"并将来自多个样式表的\",{\"1\":{\"1300\":1}}],[\"并将创建好的对象作为返回值返回\",{\"1\":{\"1116\":1}}],[\"并将被删除的元素作为返回值返回\",{\"1\":{\"853\":1}}],[\"并将\",{\"1\":{\"853\":1,\"1358\":1,\"2088\":1}}],[\"并将其赋值给\",{\"1\":{\"2075\":1}}],[\"并将其实例传入\",{\"1\":{\"2025\":1}}],[\"并将其作为锚点\",{\"1\":{\"1962\":1}}],[\"并将其作为参数\",{\"1\":{\"1791\":1}}],[\"并将其插入到父元素中或相邻元素前后\",{\"1\":{\"1862\":1}}],[\"并将其应用于一个输入张量\",{\"1\":{\"1663\":1}}],[\"并将其应用到一个大小为\",{\"1\":{\"1662\":1}}],[\"并将其传递给渲染主线程的消息队列\",{\"1\":{\"1526\":1}}],[\"并将其值插入到字符串中\",{\"1\":{\"790\":1}}],[\"并将其结果输出为字符串的一部分\",{\"1\":{\"790\":1}}],[\"并将其字符串表示形式发送为响应正文\",{\"1\":{\"307\":1}}],[\"并将属性名都转化成了\",{\"1\":{\"282\":1}}],[\"并将打包后的代码通过简单的\",{\"1\":{\"158\":1}}],[\"并将执行后module\",{\"1\":{\"37\":1}}],[\"并带上重新构建后的\",{\"1\":{\"158\":1}}],[\"并不与某个分数完全相等\",{\"1\":{\"1722\":1}}],[\"并不会触发这个事件\",{\"1\":{\"2061\":1}}],[\"并不会改变其执行时的\",{\"1\":{\"1927\":1}}],[\"并不会检测到这个\",{\"1\":{\"1840\":1}}],[\"并不会刷新页面\",{\"1\":{\"1572\":1}}],[\"并不会截断字符串\",{\"1\":{\"386\":1}}],[\"并不需要显式地导入\",{\"1\":{\"1493\":1}}],[\"并不需要我们再次用\",{\"1\":{\"150\":1}}],[\"并不需要我们再去处理一遍\",{\"1\":{\"150\":1}}],[\"并不希望浏览器自作聪明\",{\"1\":{\"1155\":1}}],[\"并不存在\",{\"1\":{\"924\":1}}],[\"并不消耗正则的匹配字符\",{\"1\":{\"918\":1}}],[\"并不能触发响应\",{\"1\":{\"1911\":1}}],[\"并不能保存世界上所有的数值\",{\"1\":{\"794\":1}}],[\"并不能通过tostring\",{\"1\":{\"789\":1}}],[\"并不矛盾\",{\"1\":{\"362\":1}}],[\"并不是移动虚拟节点本身\",{\"1\":{\"1962\":1}}],[\"并不是保留字\",{\"1\":{\"995\":1}}],[\"并不是以对象的形式\",{\"1\":{\"992\":1}}],[\"并不是所有的标识符都被解析为不带引号的字符串\",{\"1\":{\"1265\":1}}],[\"并不是所有的样式都会被继承\",{\"1\":{\"527\":1}}],[\"并不是所有\",{\"1\":{\"681\":1}}],[\"并不是\",{\"1\":{\"669\":1,\"1033\":1}}],[\"并不是传统意义上的服务端渲染\",{\"1\":{\"219\":1}}],[\"并不是指对象\",{\"1\":{\"49\":1}}],[\"并没有\",{\"1\":{\"1614\":1}}],[\"并没有改变原本的数据\",{\"1\":{\"1397\":1}}],[\"并没有被删除掉\",{\"1\":{\"1086\":1}}],[\"并没有被编译\",{\"1\":{\"148\":1}}],[\"并没有复制该对象\",{\"1\":{\"984\":1}}],[\"并没有什么联系\",{\"1\":{\"666\":1}}],[\"并没有真正写入到文件\",{\"1\":{\"404\":1}}],[\"并没有把\",{\"1\":{\"149\":1}}],[\"并再次启动处理\",{\"1\":{\"142\":1}}],[\"并添加track函数\",{\"1\":{\"1931\":1}}],[\"并添加到\",{\"1\":{\"129\":1,\"1974\":2}}],[\"并添加\",{\"1\":{\"128\":1}}],[\"并创建文件\",{\"1\":{\"91\":1}}],[\"并读取文件内容\",{\"1\":{\"37\":1}}],[\"并附带\",{\"1\":{\"24\":1}}],[\"并且要想办法让用户信任这个证书\",{\"1\":{\"2091\":1}}],[\"并且要求表格有\",{\"1\":{\"287\":1}}],[\"并且设置了相关的\",{\"1\":{\"2070\":1}}],[\"并且新的路由记录\",{\"1\":{\"2069\":1}}],[\"并且旧的路由记录和新的路由记录是不相同\",{\"1\":{\"2069\":1}}],[\"并且已经阻止了默认行为\",{\"1\":{\"2065\":1}}],[\"并且参数对象相等\",{\"1\":{\"2065\":1}}],[\"并且根据一些条件来确定当前路由的位置\",{\"1\":{\"2065\":1}}],[\"并且当前路由不是父级路由的路径的最后一个子路由\",{\"1\":{\"2065\":1}}],[\"并且当会话结束后数据也随之销毁\",{\"1\":{\"768\":1}}],[\"并且向外部返回\",{\"1\":{\"2061\":1}}],[\"并且该\",{\"1\":{\"1953\":1}}],[\"并且该样式没有顺序要求\",{\"1\":{\"635\":1}}],[\"并且值为\",{\"1\":{\"1936\":1}}],[\"并且值变了\",{\"1\":{\"1929\":1}}],[\"并且是\",{\"1\":{\"1932\":1}}],[\"并且是基于异步的\",{\"1\":{\"24\":1}}],[\"并且目标对象是\",{\"1\":{\"1930\":1}}],[\"并且目标对象是数组时\",{\"1\":{\"1917\":1,\"1993\":1}}],[\"并且修改了数组的\",{\"1\":{\"1918\":1}}],[\"并且依赖于其它数据时\",{\"1\":{\"1857\":1}}],[\"并且dirty也为true\",{\"1\":{\"1847\":1}}],[\"并且开发环境下会判断computed中的key和data\",{\"1\":{\"1845\":1}}],[\"并且子组件使用了这个内部属性\",{\"1\":{\"1842\":1}}],[\"并且支持promise\",{\"1\":{\"1822\":1}}],[\"并且支持写入二进制\",{\"1\":{\"404\":1}}],[\"并且符合标签属性的特征\",{\"1\":{\"1792\":1}}],[\"并且可以进行数据增强和多线程加载等操作\",{\"1\":{\"1655\":1}}],[\"并且可以引用它\",{\"1\":{\"138\":1}}],[\"并且优先处理靠近视口区域的块\",{\"1\":{\"1526\":1}}],[\"并且会在发生变更时触发相应的更新\",{\"1\":{\"1827\":1}}],[\"并且会配合着组件一起使用\",{\"1\":{\"1350\":1}}],[\"并且会对内容进行捕获\",{\"1\":{\"913\":1}}],[\"并且在获取数组元素时得到的值也是代理对象\",{\"1\":{\"1923\":1}}],[\"并且在options属性中添加了directives\",{\"1\":{\"1828\":1}}],[\"并且在开发环境下校验name字段是否合法\",{\"1\":{\"1825\":1}}],[\"并且在写入\",{\"1\":{\"1313\":1}}],[\"并且在每次匹配成功之后重新设定lastindex\",{\"1\":{\"923\":1}}],[\"并且使其\",{\"1\":{\"1300\":1}}],[\"并且使用\",{\"1\":{\"635\":1}}],[\"并且此代码块已在\",{\"1\":{\"1299\":1}}],[\"并且编译出来会将选择器合并\",{\"1\":{\"1297\":1}}],[\"并且通常编译速度也更快\",{\"1\":{\"1286\":1}}],[\"并且通过一对<script>标签来引入代码\",{\"1\":{\"1078\":1}}],[\"并且作用在同一个标签上\",{\"1\":{\"1224\":1}}],[\"并且一次只会执行一个动画\",{\"1\":{\"1224\":1}}],[\"并且如果我们之后再为这个\",{\"1\":{\"1158\":1}}],[\"并且返回目标对象\",{\"1\":{\"1053\":1}}],[\"并且所有指向该对象的变量都会获得更新\",{\"1\":{\"984\":1}}],[\"并且外部的值也没有发生更改\",{\"1\":{\"948\":1}}],[\"并且块与块之间不会互相影响\",{\"1\":{\"948\":1}}],[\"并且这些守卫回调不是简单的放进去\",{\"1\":{\"2072\":1}}],[\"并且这些方法都可以接收两个参数\",{\"1\":{\"945\":1}}],[\"并且这一次变化是会被记录到\",{\"1\":{\"2058\":1}}],[\"并且这个方法会被合并到\",{\"1\":{\"2055\":1}}],[\"并且这个\",{\"1\":{\"980\":1}}],[\"并且这个变量名与属性名一直\",{\"1\":{\"836\":1}}],[\"并且让代码更加容易阅读\",{\"1\":{\"926\":1}}],[\"并且就像自包含了一个微型程序的代码块\",{\"1\":{\"926\":1}}],[\"并且被当作函数调用时\",{\"1\":{\"876\":1}}],[\"并且只有所有的操作数都是真值时\",{\"1\":{\"808\":1}}],[\"并且只有一个维护者\",{\"1\":{\"93\":1}}],[\"并且只在被存储的条目改变时触发\",{\"1\":{\"770\":1}}],[\"并且只是正常渲染\",{\"1\":{\"702\":1}}],[\"并且不包含恶意脚本代码\",{\"1\":{\"2095\":1}}],[\"并且不会和服务器之间进行通信\",{\"1\":{\"2050\":1}}],[\"并且不会启动新的格式化上下文\",{\"1\":{\"557\":1}}],[\"并且不都是\",{\"1\":{\"1909\":1}}],[\"并且不需要导入\",{\"1\":{\"1493\":1}}],[\"并且不主动改变\",{\"1\":{\"1358\":1}}],[\"并且不能超过\",{\"1\":{\"696\":1}}],[\"并且将每个类的相关样式保存在单独的样式表里面才是更好的做法\",{\"1\":{\"1130\":1}}],[\"并且将\",{\"1\":{\"669\":1}}],[\"并且将它们提取出来存储到一个临时文件中\",{\"1\":{\"11\":1}}],[\"并且提供缩写的解释\",{\"1\":{\"665\":1}}],[\"并且非常的不灵活\",{\"1\":{\"622\":1}}],[\"并且为相同的样式设置不同的值时\",{\"1\":{\"522\":1}}],[\"并且过期时间也会同步刷新\",{\"1\":{\"355\":1}}],[\"并且决定是否调用next方法\",{\"1\":{\"309\":1}}],[\"并且兼容原生\",{\"1\":{\"305\":1,\"307\":1}}],[\"并且插件可以调用\",{\"1\":{\"154\":1}}],[\"并且配置资源体积限制实现\",{\"1\":{\"142\":1}}],[\"并且最终添加到\",{\"1\":{\"138\":1}}],[\"并且希望在同域名下发送\",{\"1\":{\"134\":1}}],[\"并且\",{\"1\":{\"133\":1,\"218\":1,\"391\":1,\"1145\":1,\"1313\":1,\"1923\":1,\"1993\":1,\"2034\":1}}],[\"并且还存在兼容性问题\",{\"1\":{\"116\":1}}],[\"并且每周小于\",{\"1\":{\"93\":1}}],[\"并且找到里面的main属性对应的入口模块\",{\"1\":{\"59\":1}}],[\"并和当前分支关联\",{\"1\":{\"13\":1}}],[\"using\",{\"1\":{\"2065\":1}}],[\"us\",{\"1\":{\"1607\":1}}],[\"usage\",{\"1\":{\"1328\":2}}],[\"useerdetails\",{\"1\":{\"2071\":1}}],[\"uselinkoptions\",{\"1\":{\"2065\":1}}],[\"uselink\",{\"0\":{\"2065\":1},\"1\":{\"2062\":1,\"2065\":2,\"2066\":2}}],[\"usehistorylisteners\",{\"0\":{\"2059\":1},\"1\":{\"2053\":1,\"2055\":3,\"2059\":2,\"2060\":2}}],[\"usehistorystatenavigation\",{\"0\":{\"2056\":1},\"1\":{\"2053\":1,\"2055\":3,\"2057\":1,\"2058\":1}}],[\"usecallback\",{\"1\":{\"2043\":1}}],[\"usecallbacks<t>\",{\"1\":{\"2043\":1}}],[\"usecallbacks<navigationhookafter>\",{\"1\":{\"2043\":1}}],[\"usecallbacks<navigationguardwiththis<undefined>>\",{\"1\":{\"2043\":2}}],[\"usecallbacks\",{\"1\":{\"2043\":2,\"2061\":1}}],[\"useapi\",{\"1\":{\"2040\":1,\"2047\":1}}],[\"useattrs\",{\"1\":{\"1493\":3}}],[\"use注册插件时\",{\"1\":{\"2016\":1}}],[\"use进行注册\",{\"1\":{\"2016\":1}}],[\"usestore\",{\"1\":{\"2012\":1,\"2013\":2,\"2015\":2,\"2018\":2,\"2019\":5}}],[\"useslots\",{\"1\":{\"1493\":3}}],[\"use除插件名外的其他参数将作为插件运行的参数\",{\"1\":{\"1824\":1}}],[\"use全局api\",{\"1\":{\"1824\":1}}],[\"used\",{\"1\":{\"865\":2,\"1804\":1}}],[\"usevirtuallist\",{\"1\":{\"512\":1}}],[\"use\",{\"0\":{\"1824\":1,\"2010\":1},\"1\":{\"35\":1,\"69\":1,\"91\":1,\"138\":3,\"142\":2,\"149\":1,\"150\":1,\"155\":2,\"156\":2,\"179\":2,\"229\":1,\"259\":1,\"275\":1,\"313\":3,\"314\":3,\"316\":1,\"317\":2,\"321\":1,\"349\":1,\"350\":3,\"355\":3,\"955\":1,\"957\":8,\"958\":8,\"959\":2,\"991\":2,\"995\":1,\"1260\":1,\"1265\":2,\"1268\":1,\"1270\":1,\"1271\":1,\"1272\":1,\"1273\":1,\"1274\":1,\"1275\":2,\"1277\":1,\"1279\":1,\"1280\":1,\"1284\":1,\"1300\":2,\"1301\":8,\"1302\":5,\"1303\":2,\"1304\":2,\"1305\":1,\"1306\":2,\"1307\":2,\"1308\":2,\"1309\":12,\"1310\":1,\"1312\":1,\"1313\":2,\"1318\":2,\"1319\":9,\"1320\":1,\"1432\":1,\"1450\":1,\"1451\":1,\"1456\":1,\"1518\":2,\"1804\":1,\"1824\":1,\"1825\":2,\"2010\":1,\"2025\":1,\"2026\":2,\"2041\":1,\"2047\":3,\"2065\":1}}],[\"userouter\",{\"1\":{\"2047\":2}}],[\"useroute\",{\"1\":{\"2034\":1,\"2047\":2}}],[\"userposts\",{\"1\":{\"2028\":2}}],[\"userprofile\",{\"1\":{\"2028\":2}}],[\"userpass\",{\"1\":{\"317\":2}}],[\"userdef\",{\"1\":{\"1804\":12}}],[\"user1对你说\",{\"1\":{\"1645\":1,\"1646\":2}}],[\"userinfo\",{\"1\":{\"1357\":5}}],[\"userid=\",{\"1\":{\"402\":1}}],[\"userlanguage\",{\"1\":{\"1091\":1}}],[\"useragent\",{\"1\":{\"1091\":2}}],[\"usernickname\",{\"1\":{\"1040\":1}}],[\"username=111\",{\"1\":{\"283\":1}}],[\"username\",{\"1\":{\"45\":4,\"49\":3,\"50\":1,\"197\":1,\"317\":2,\"349\":2,\"355\":4,\"368\":2,\"670\":1,\"836\":7,\"1493\":3,\"1585\":1,\"1586\":1,\"2062\":1}}],[\"user=anonymous\",{\"1\":{\"493\":1}}],[\"userstore\",{\"1\":{\"2015\":4}}],[\"users\",{\"1\":{\"176\":1,\"332\":1,\"390\":1,\"402\":5,\"403\":1,\"404\":4,\"405\":18,\"408\":4,\"1093\":1}}],[\"user\",{\"1\":{\"3\":2,\"134\":1,\"143\":1,\"212\":1,\"261\":1,\"269\":1,\"355\":1,\"362\":2,\"402\":1,\"493\":1,\"1040\":1,\"1091\":1,\"1319\":3,\"1320\":2,\"1358\":2,\"1568\":1,\"1630\":1,\"1784\":1,\"1810\":1,\"1852\":1,\"1854\":1,\"1855\":1,\"2028\":14,\"2047\":5,\"2058\":1,\"2062\":1,\"2065\":2,\"2071\":3}}],[\"u00a0\",{\"1\":{\"904\":2}}],[\"u0020\",{\"1\":{\"904\":2}}],[\"u000b\",{\"1\":{\"904\":2}}],[\"u012036171\",{\"1\":{\"219\":1}}],[\"util\",{\"1\":{\"2026\":1,\"2031\":1}}],[\"utils\",{\"1\":{\"1655\":6,\"2040\":1,\"2043\":1,\"2045\":1,\"2063\":1}}],[\"utc\",{\"1\":{\"875\":14,\"876\":1,\"877\":20}}],[\"utf\",{\"1\":{\"155\":2,\"251\":1,\"287\":2,\"329\":1,\"580\":1,\"657\":1,\"659\":1,\"693\":1,\"764\":1,\"765\":1,\"770\":2,\"773\":2,\"1078\":1,\"1087\":4,\"1139\":1,\"1140\":1,\"1148\":1,\"1153\":1,\"1155\":2}}],[\"udnefined\",{\"1\":{\"828\":1}}],[\"uid\",{\"1\":{\"1799\":4}}],[\"ui设计师\",{\"1\":{\"1488\":1}}],[\"uint8clampedarray\",{\"1\":{\"737\":1}}],[\"ui\",{\"0\":{\"1469\":1,\"1470\":1,\"1471\":1,\"1877\":1},\"1\":{\"697\":1,\"1182\":1,\"1470\":2,\"1471\":2,\"1877\":2}}],[\"ul>\",{\"1\":{\"993\":1,\"1112\":3,\"1120\":1,\"1123\":2,\"1124\":1,\"1152\":1,\"1158\":3,\"1194\":1,\"1392\":1,\"1393\":1,\"1446\":1}}],[\"ul>`\",{\"1\":{\"772\":2}}],[\"ul>li\",{\"1\":{\"663\":1}}],[\"ul\",{\"1\":{\"480\":3,\"1112\":3,\"1123\":8,\"1152\":2,\"1158\":4,\"1332\":9,\"1339\":3}}],[\"ua\",{\"1\":{\"287\":2,\"329\":1,\"764\":1,\"773\":1}}],[\"updatingrecords\",{\"1\":{\"2072\":1,\"2073\":5,\"2074\":2,\"2080\":2}}],[\"updateguards\",{\"1\":{\"2069\":5,\"2080\":2}}],[\"updateroute\",{\"1\":{\"2029\":2}}],[\"update的阶段会将生成的新的vnode挂载到vm\",{\"1\":{\"1862\":1}}],[\"update函数内执行patch函数创建节点并插入到\",{\"1\":{\"1862\":1}}],[\"update函数\",{\"1\":{\"1862\":1}}],[\"update方法\",{\"1\":{\"1855\":1}}],[\"update中会调用vm\",{\"1\":{\"1806\":1}}],[\"updatecomponentprerender\",{\"1\":{\"2002\":1}}],[\"updatecomponent\",{\"1\":{\"1806\":3}}],[\"updatecomponentlisteners\",{\"1\":{\"1802\":2}}],[\"updatechildren\",{\"1\":{\"1789\":2}}],[\"updated\",{\"1\":{\"1500\":1,\"1954\":4,\"2002\":1,\"2029\":2}}],[\"updatelisteners\",{\"1\":{\"1368\":1,\"1802\":2}}],[\"updatevalue\",{\"1\":{\"1358\":2}}],[\"updateinterval\",{\"1\":{\"1098\":1}}],[\"updatemany\",{\"1\":{\"202\":1}}],[\"updateone\",{\"1\":{\"202\":1}}],[\"update\",{\"1\":{\"181\":2,\"199\":1,\"339\":1,\"1358\":2,\"1406\":1,\"1407\":4,\"1428\":1,\"1789\":3,\"1806\":1,\"1821\":1,\"1828\":1,\"1997\":2,\"2002\":2}}],[\"upfront\",{\"1\":{\"1786\":1}}],[\"upload\",{\"1\":{\"1592\":1}}],[\"up\",{\"1\":{\"1284\":1,\"1370\":1,\"1792\":1,\"2061\":1}}],[\"upgrade\",{\"1\":{\"269\":1,\"1648\":4}}],[\"uft\",{\"1\":{\"250\":1}}],[\"u2029\",{\"1\":{\"156\":2,\"902\":1,\"904\":2,\"905\":1}}],[\"u2028\",{\"1\":{\"156\":2,\"902\":1,\"904\":2,\"905\":1}}],[\"uri\",{\"1\":{\"142\":3,\"744\":1,\"765\":1}}],[\"url参数\",{\"1\":{\"1586\":1}}],[\"urls\",{\"1\":{\"499\":6}}],[\"url拆解问题\",{\"0\":{\"492\":1}}],[\"urlencoded\",{\"1\":{\"317\":1,\"1577\":1,\"1607\":1,\"1634\":1}}],[\"url==\",{\"1\":{\"285\":1}}],[\"url的路径\",{\"0\":{\"284\":1}}],[\"url\",{\"0\":{\"1530\":1,\"1626\":1,\"1639\":1},\"1\":{\"134\":1,\"142\":5,\"268\":1,\"282\":12,\"284\":19,\"285\":2,\"290\":1,\"291\":4,\"292\":4,\"293\":1,\"294\":6,\"295\":1,\"296\":2,\"305\":1,\"306\":1,\"338\":1,\"339\":2,\"355\":2,\"389\":2,\"474\":1,\"476\":2,\"493\":4,\"494\":3,\"499\":2,\"621\":1,\"628\":1,\"635\":1,\"664\":2,\"672\":1,\"748\":2,\"757\":3,\"758\":1,\"765\":2,\"770\":2,\"773\":1,\"1088\":3,\"1093\":19,\"1094\":3,\"1095\":2,\"1096\":1,\"1097\":2,\"1161\":2,\"1227\":1,\"1228\":1,\"1229\":1,\"1230\":1,\"1259\":1,\"1262\":2,\"1313\":1,\"1316\":2,\"1317\":2,\"1328\":1,\"1332\":4,\"1468\":1,\"1530\":2,\"1569\":2,\"1575\":1,\"1576\":3,\"1579\":1,\"1584\":1,\"1585\":1,\"1586\":2,\"1600\":1,\"1612\":1,\"1626\":2,\"1639\":1,\"2026\":3,\"2029\":3,\"2030\":4,\"2033\":1,\"2034\":1,\"2041\":1,\"2048\":3,\"2049\":1,\"2050\":11,\"2051\":8,\"2052\":2,\"2053\":5,\"2054\":1,\"2058\":17,\"2061\":6}}],[\"ubuntu\",{\"1\":{\"94\":2}}],[\"unref\",{\"1\":{\"2047\":4,\"2065\":4,\"2068\":1}}],[\"unregistration\",{\"1\":{\"2031\":1}}],[\"unmountapp\",{\"1\":{\"2047\":6}}],[\"unmount\",{\"1\":{\"1944\":2,\"1950\":1,\"1951\":4,\"1961\":1,\"1962\":2,\"1966\":1,\"1968\":1,\"1969\":3,\"2047\":8}}],[\"unmounted\",{\"1\":{\"1500\":2,\"2071\":1}}],[\"unwatchfn\",{\"1\":{\"1810\":1}}],[\"unwrap\",{\"1\":{\"1208\":1,\"1212\":2}}],[\"unsubscribe\",{\"1\":{\"1439\":1}}],[\"unshift\",{\"1\":{\"452\":1,\"853\":1,\"1396\":1,\"1785\":3,\"1824\":1,\"1915\":1,\"1925\":4,\"1993\":3}}],[\"unaryslash\",{\"1\":{\"1353\":1,\"1792\":4}}],[\"unary\",{\"1\":{\"1353\":2,\"1791\":1,\"1792\":4}}],[\"unknown\",{\"1\":{\"1284\":1,\"2034\":1,\"2061\":2}}],[\"unquote\",{\"1\":{\"1265\":2}}],[\"unqualified\",{\"1\":{\"958\":1}}],[\"unload\",{\"1\":{\"1214\":1}}],[\"unlinksync\",{\"1\":{\"255\":3}}],[\"unlink\",{\"1\":{\"255\":3}}],[\"uncaught\",{\"1\":{\"995\":1,\"2065\":1}}],[\"undifined\",{\"1\":{\"980\":1}}],[\"undeifned\",{\"1\":{\"996\":1}}],[\"undefind\",{\"1\":{\"995\":2}}],[\"undefined>\",{\"1\":{\"2068\":1}}],[\"undefined的时候\",{\"1\":{\"980\":1}}],[\"undefined类型就只有一个值\",{\"1\":{\"798\":1}}],[\"undefined\",{\"0\":{\"798\":1},\"1\":{\"29\":1,\"244\":1,\"245\":1,\"246\":1,\"250\":1,\"436\":3,\"438\":4,\"441\":2,\"443\":2,\"471\":1,\"487\":1,\"493\":1,\"780\":1,\"787\":1,\"789\":5,\"796\":1,\"797\":2,\"798\":7,\"801\":2,\"810\":1,\"813\":3,\"828\":2,\"829\":2,\"832\":3,\"856\":1,\"911\":1,\"913\":2,\"924\":3,\"925\":2,\"931\":1,\"935\":2,\"939\":1,\"940\":1,\"945\":1,\"958\":3,\"965\":2,\"970\":1,\"971\":1,\"972\":2,\"976\":1,\"980\":13,\"984\":1,\"987\":1,\"990\":1,\"991\":4,\"992\":4,\"995\":11,\"996\":4,\"1012\":1,\"1015\":6,\"1086\":2,\"1161\":2,\"1186\":2,\"1187\":1,\"1358\":3,\"1423\":1,\"1428\":1,\"1446\":1,\"1769\":3,\"1772\":1,\"1777\":2,\"1786\":2,\"1788\":7,\"1789\":1,\"1792\":8,\"1793\":1,\"1794\":2,\"1796\":1,\"1797\":1,\"1802\":4,\"1806\":1,\"1822\":4,\"1834\":4,\"1835\":8,\"1847\":1,\"1931\":1,\"1935\":1,\"1966\":2,\"1969\":1,\"2028\":7,\"2031\":1,\"2044\":2,\"2045\":2,\"2058\":1,\"2065\":8,\"2066\":2,\"2068\":1}}],[\"undef\",{\"1\":{\"980\":2}}],[\"underline\",{\"1\":{\"625\":1}}],[\"unexpected\",{\"1\":{\"897\":1,\"931\":1,\"958\":1,\"2047\":2}}],[\"until\",{\"1\":{\"408\":1}}],[\"uniform\",{\"1\":{\"1626\":1,\"1680\":1}}],[\"units\",{\"1\":{\"1338\":1,\"1666\":1}}],[\"unicode\",{\"1\":{\"345\":1,\"384\":1,\"888\":1,\"921\":2}}],[\"uninstall\",{\"1\":{\"229\":1}}],[\"unique\",{\"1\":{\"197\":1,\"198\":1,\"455\":1,\"456\":2,\"457\":1,\"458\":1}}],[\"uniqcnpm\",{\"1\":{\"82\":3}}],[\"uniq\",{\"1\":{\"66\":4,\"72\":2,\"76\":2,\"82\":1,\"87\":2}}],[\"unpublish\",{\"1\":{\"93\":2}}],[\"u\",{\"1\":{\"12\":2,\"13\":1,\"173\":1,\"384\":1,\"1797\":1}}],[\"的升级版\",{\"1\":{\"2091\":1}}],[\"的升级请求\",{\"1\":{\"1647\":1}}],[\"的场景\",{\"1\":{\"2088\":1}}],[\"的场景小结\",{\"0\":{\"293\":1}}],[\"的当前项目\",{\"1\":{\"2073\":1}}],[\"的当前值\",{\"1\":{\"760\":1}}],[\"的长度为\",{\"1\":{\"2073\":2}}],[\"的虚拟\",{\"1\":{\"2070\":1}}],[\"的钩子函数\",{\"1\":{\"2070\":1}}],[\"的更新守卫是否为空\",{\"1\":{\"2069\":1}}],[\"的离开守卫是否为空\",{\"1\":{\"2069\":1}}],[\"的条件是当前深度所对应的路由记录存在并且匹配上的路由没有\",{\"1\":{\"2068\":1}}],[\"的深度\",{\"1\":{\"2068\":1}}],[\"的匹配路由数组\",{\"1\":{\"2065\":1}}],[\"的依赖注入功能拿到对应的\",{\"1\":{\"2065\":1}}],[\"的依赖声明安装项目依赖\",{\"1\":{\"74\":1}}],[\"的混合模式\",{\"1\":{\"2063\":1}}],[\"的别名类型\",{\"1\":{\"2061\":1}}],[\"的拼接\",{\"1\":{\"2058\":1}}],[\"的路由的时候\",{\"1\":{\"2053\":1}}],[\"的辅助函数\",{\"1\":{\"2047\":1}}],[\"的列表\",{\"1\":{\"2043\":1}}],[\"的列表函数只能返回一个新的列表\",{\"1\":{\"1272\":1}}],[\"的源码\",{\"1\":{\"2040\":1,\"2045\":1}}],[\"的源码位于\",{\"1\":{\"2040\":1}}],[\"的源码中\",{\"1\":{\"1560\":1}}],[\"的父节点向上找\",{\"1\":{\"2031\":1}}],[\"的概念\",{\"1\":{\"2031\":1}}],[\"的概念为中心\",{\"1\":{\"1485\":1}}],[\"的成功回调来完成此部分的功能\",{\"1\":{\"2029\":1}}],[\"的切换\",{\"1\":{\"2028\":1}}],[\"的静态方法\",{\"1\":{\"2026\":1}}],[\"的静态页面\",{\"0\":{\"16\":1}}],[\"的第四个参数表示此\",{\"1\":{\"2020\":1}}],[\"的第一步就是判断新旧节点是否相同\",{\"1\":{\"1394\":1}}],[\"的第一个字符不为\",{\"1\":{\"2054\":1}}],[\"的第一个对象的引用\",{\"1\":{\"1112\":1}}],[\"的第一个参数\",{\"1\":{\"1039\":1}}],[\"的第一个参数是\",{\"1\":{\"995\":1}}],[\"的重写主要用于添加一些平台相关的额外功能\",{\"1\":{\"1998\":1}}],[\"的转换\",{\"0\":{\"1978\":1}}],[\"的转移\",{\"0\":{\"1518\":1}}],[\"的每一个节点\",{\"1\":{\"1976\":1}}],[\"的逻辑根节点\",{\"1\":{\"1974\":1}}],[\"的算法\",{\"1\":{\"1966\":1}}],[\"的非理想情况\",{\"0\":{\"1966\":1}}],[\"的理想情况\",{\"0\":{\"1965\":1}}],[\"的移动操作并不是最优的\",{\"1\":{\"1964\":1}}],[\"的移动来完成子节点的更新\",{\"1\":{\"1962\":1}}],[\"的后面\",{\"1\":{\"1962\":1}}],[\"的下一个兄弟节点\",{\"1\":{\"1962\":1}}],[\"的前一个\",{\"1\":{\"1962\":2}}],[\"的前面只能出现\",{\"1\":{\"1301\":1}}],[\"的顺序就是更新后真实\",{\"1\":{\"1962\":1}}],[\"的顺序逐级去寻找声明的变量\",{\"1\":{\"402\":1}}],[\"的拦截函数\",{\"1\":{\"1938\":1}}],[\"的是代理对象\",{\"1\":{\"1923\":1}}],[\"的边界考虑\",{\"0\":{\"1923\":1}}],[\"的索引对数组进行操作时视为add\",{\"1\":{\"1917\":1}}],[\"的索引同样从\",{\"1\":{\"1267\":1}}],[\"的判断是因为在\",{\"1\":{\"1909\":1}}],[\"的抽象方法得到的\",{\"1\":{\"1905\":1}}],[\"的代理目标必须是非原始值\",{\"1\":{\"1936\":1}}],[\"的代理对象时才触发更新\",{\"1\":{\"1910\":1,\"1990\":1}}],[\"的代理对象\",{\"1\":{\"1910\":2,\"1929\":1,\"1990\":1}}],[\"的代理\",{\"1\":{\"1901\":2}}],[\"的代码管理风格\",{\"1\":{\"2040\":1}}],[\"的代码应该这样写\",{\"1\":{\"1194\":1}}],[\"的代码而出现的\",{\"1\":{\"1194\":1}}],[\"的代码操作\",{\"0\":{\"349\":1,\"355\":1}}],[\"的代码\",{\"1\":{\"148\":1,\"158\":1}}],[\"的硬编码问题\",{\"1\":{\"1897\":1}}],[\"的嵌套\",{\"1\":{\"1891\":1}}],[\"的读取操作\",{\"1\":{\"1888\":1}}],[\"的工具函数\",{\"1\":{\"1877\":1}}],[\"的工作是在预解析线程中进行的\",{\"1\":{\"1526\":1}}],[\"的工作流程\",{\"0\":{\"360\":1}}],[\"的描述\",{\"1\":{\"1873\":1}}],[\"的笔记\",{\"1\":{\"1870\":1,\"1900\":1,\"1935\":1}}],[\"的compomnentinstance\",{\"1\":{\"1866\":1}}],[\"的init钩子函数\",{\"1\":{\"1862\":1}}],[\"的初始化时执行了下述代码\",{\"1\":{\"2029\":1}}],[\"的初始化用于初始化路由器实例\",{\"1\":{\"2026\":1}}],[\"的初始化\",{\"0\":{\"1839\":1,\"1845\":1,\"1846\":1},\"1\":{\"2026\":1}}],[\"的初始值\",{\"1\":{\"681\":1,\"1949\":1}}],[\"的parent属性指向组件的占位符\",{\"1\":{\"1834\":1}}],[\"的elm上\",{\"1\":{\"1862\":1}}],[\"的elm\",{\"1\":{\"1834\":1}}],[\"的exec\",{\"1\":{\"923\":2}}],[\"的不同时机触发\",{\"1\":{\"1834\":1}}],[\"的不可预测性\",{\"1\":{\"362\":1}}],[\"的监控\",{\"1\":{\"1806\":1}}],[\"的整体结构就是一个标准的\",{\"1\":{\"2062\":1}}],[\"的整体流程很简单\",{\"1\":{\"1804\":1}}],[\"的整数\",{\"1\":{\"388\":1}}],[\"的唯一标识\",{\"1\":{\"1784\":1}}],[\"的任务\",{\"1\":{\"1779\":1}}],[\"的占比范围\",{\"1\":{\"1751\":1}}],[\"的盐水\",{\"1\":{\"1742\":2}}],[\"的过程叫作编译\",{\"1\":{\"1972\":1}}],[\"的过程中\",{\"1\":{\"1791\":1,\"1802\":1}}],[\"的过程\",{\"1\":{\"1737\":1,\"1974\":1}}],[\"的过期时间的\",{\"1\":{\"355\":1}}],[\"的倍数关系比较明显\",{\"1\":{\"1737\":1}}],[\"的选择\",{\"0\":{\"1873\":1}}],[\"的选择器\",{\"1\":{\"1299\":1}}],[\"的选择器学起来应该说非常容易\",{\"1\":{\"1203\":1}}],[\"的选择器是相同的\",{\"1\":{\"1203\":1}}],[\"的选项\",{\"1\":{\"1711\":2}}],[\"的答案\",{\"1\":{\"1696\":1}}],[\"的输入特征图\",{\"1\":{\"1667\":1}}],[\"的输出张量形状为\",{\"1\":{\"1663\":1}}],[\"的导数会变成\",{\"1\":{\"1666\":1}}],[\"的运作方式与训练模式不同\",{\"1\":{\"1665\":1}}],[\"的运行阻塞了\",{\"1\":{\"1240\":1}}],[\"的运行流程\",{\"0\":{\"347\":1}}],[\"的运行流程是一个串行的过程\",{\"1\":{\"154\":1}}],[\"的运行结果\",{\"1\":{\"154\":1}}],[\"的均值和方差\",{\"1\":{\"1665\":2}}],[\"的卷积层\",{\"1\":{\"1662\":1}}],[\"的二维张量\",{\"1\":{\"1661\":1}}],[\"的二进制全部为\",{\"1\":{\"980\":1}}],[\"的四维张量展平为一个大小为\",{\"1\":{\"1661\":1}}],[\"的梯度接近零\",{\"1\":{\"1658\":1}}],[\"的固定内存上\",{\"1\":{\"1655\":1}}],[\"的张量上\",{\"1\":{\"1662\":1}}],[\"的张量\",{\"1\":{\"1655\":2,\"1662\":1}}],[\"的握手被翻译成\",{\"1\":{\"1647\":1}}],[\"的把消息告诉客户端\",{\"1\":{\"1644\":1}}],[\"的消息格式是一种纯文本的格式\",{\"1\":{\"1629\":1}}],[\"的跨域请求并不会附带\",{\"1\":{\"1612\":1}}],[\"的简单使用\",{\"0\":{\"1573\":1}}],[\"的简写属性\",{\"1\":{\"587\":1}}],[\"的携带\",{\"1\":{\"1572\":1}}],[\"的各种差异\",{\"1\":{\"1569\":1}}],[\"的各种方法\",{\"1\":{\"1198\":1}}],[\"的计算属性\",{\"1\":{\"2068\":1}}],[\"的计算时间换取\",{\"1\":{\"360\":1}}],[\"的计时器最终调用的是操作系统的函数\",{\"1\":{\"1560\":1}}],[\"的状态对象\",{\"1\":{\"2058\":1}}],[\"的状态数据集中在一个地方\",{\"1\":{\"2016\":1}}],[\"的状态数据\",{\"1\":{\"2016\":1}}],[\"的状态\",{\"1\":{\"1558\":1,\"1666\":1}}],[\"的设计\",{\"1\":{\"1949\":1}}],[\"的设计思路\",{\"0\":{\"1876\":1}}],[\"的设计中\",{\"1\":{\"1836\":1}}],[\"的设计者\",{\"1\":{\"980\":1}}],[\"的设置\",{\"1\":{\"1530\":1}}],[\"的变化\",{\"0\":{\"1918\":1},\"1\":{\"1529\":1}}],[\"的变化几乎不会影响渲染主线程\",{\"1\":{\"1529\":1}}],[\"的变量和之前声明的变量\",{\"1\":{\"1313\":1}}],[\"的变量\",{\"1\":{\"1309\":1,\"1310\":1}}],[\"的效率高\",{\"0\":{\"1529\":1}}],[\"的效果\",{\"1\":{\"617\":1}}],[\"的本质就是重新根据分层信息计算了绘制指令\",{\"1\":{\"1528\":1}}],[\"的本质就是重新计算\",{\"1\":{\"1527\":1}}],[\"的项目\",{\"1\":{\"1519\":1}}],[\"的项目组成一个数组\",{\"1\":{\"945\":1}}],[\"的假设\",{\"1\":{\"1519\":1}}],[\"的子组件中的任何东西\",{\"1\":{\"1499\":1}}],[\"的子元素\",{\"1\":{\"669\":1}}],[\"的组件\",{\"1\":{\"2070\":1}}],[\"的组件可以在\",{\"1\":{\"2063\":1}}],[\"的组件会重新渲染\",{\"1\":{\"2044\":1}}],[\"的组件实例共享模式\",{\"1\":{\"2016\":1}}],[\"的组件实例\",{\"1\":{\"1862\":1}}],[\"的组件数量\",{\"1\":{\"1784\":1}}],[\"的组件是默认私有的\",{\"1\":{\"1499\":1}}],[\"的组成分为\",{\"1\":{\"216\":1}}],[\"的组成分为三个部分\",{\"1\":{\"216\":1}}],[\"的组成\",{\"0\":{\"216\":1}}],[\"的套路是\",{\"1\":{\"1498\":2}}],[\"的两个注意点\",{\"0\":{\"1493\":1}}],[\"的两种写法\",{\"0\":{\"1359\":1}}],[\"的两种使用情况\",{\"1\":{\"286\":1}}],[\"的get与set来实现响应式\",{\"1\":{\"1492\":1}}],[\"的get与set完成的\",{\"1\":{\"1487\":1}}],[\"的响应原理\",{\"0\":{\"1859\":1,\"1860\":1}}],[\"的响应缓存起来\",{\"1\":{\"1579\":1}}],[\"的响应式系统会对各个属性进行细粒度的依赖追踪\",{\"1\":{\"2035\":1}}],[\"的响应式系统会自动追踪\",{\"1\":{\"2016\":1}}],[\"的响应式系统只会追踪和响应通过\",{\"1\":{\"1840\":1}}],[\"的响应式系统有更深的理解才能高效使用\",{\"1\":{\"1485\":1}}],[\"的响应式\",{\"0\":{\"1490\":1,\"1491\":1},\"1\":{\"1864\":1}}],[\"的响应方法\",{\"1\":{\"307\":1}}],[\"的修饰符\",{\"1\":{\"1480\":1,\"1519\":1}}],[\"的修改\",{\"1\":{\"379\":1,\"683\":1,\"2058\":1}}],[\"的函数\",{\"1\":{\"1446\":1,\"1453\":2,\"1494\":1,\"1865\":1,\"1954\":1,\"2001\":1}}],[\"的插件进行观察\",{\"1\":{\"1439\":1}}],[\"的结果是一个普通对象\",{\"1\":{\"1911\":1}}],[\"的结果应该被视为\",{\"1\":{\"1897\":1}}],[\"的结果依然是null\",{\"1\":{\"1436\":1}}],[\"的结构\",{\"1\":{\"1889\":1}}],[\"的结合使用\",{\"1\":{\"286\":1}}],[\"的构造函数\",{\"1\":{\"1432\":1,\"1834\":1}}],[\"的替代者\",{\"1\":{\"1428\":1}}],[\"的管理\",{\"1\":{\"1415\":1}}],[\"的生命周期\",{\"0\":{\"1409\":1}}],[\"的节点是全新的节点\",{\"1\":{\"1969\":1}}],[\"的节点或者是\",{\"1\":{\"1795\":1}}],[\"的节点\",{\"1\":{\"1403\":1}}],[\"的根数据对象\",{\"1\":{\"1396\":1}}],[\"的差异\",{\"1\":{\"1394\":1}}],[\"的差别在于\",{\"1\":{\"995\":1}}],[\"的类型为\",{\"1\":{\"1953\":1}}],[\"的类型是\",{\"1\":{\"1921\":1}}],[\"的类型\",{\"1\":{\"1392\":1}}],[\"的回调函数中的\",{\"1\":{\"2069\":1}}],[\"的回调函数\",{\"1\":{\"1383\":1,\"2029\":1}}],[\"的回调函数等\",{\"1\":{\"1383\":1}}],[\"的语句前面\",{\"1\":{\"1320\":1}}],[\"的语法书写和\",{\"1\":{\"1247\":1}}],[\"的语法和行为\",{\"1\":{\"958\":1}}],[\"的语法就装了两个插件\",{\"1\":{\"148\":1}}],[\"的语法\",{\"1\":{\"148\":1,\"216\":1,\"2063\":1}}],[\"的语法转换为\",{\"1\":{\"148\":1}}],[\"的兼容\",{\"1\":{\"1319\":1}}],[\"的兼容性较好\",{\"1\":{\"1124\":1}}],[\"的确切位置包含了导入的文件中的所有样式代码\",{\"1\":{\"1313\":1}}],[\"的特性和语法\",{\"1\":{\"2063\":2}}],[\"的特性如果不是合法的\",{\"1\":{\"1308\":1}}],[\"的特点\",{\"0\":{\"224\":1,\"346\":1,\"361\":1,\"1195\":1},\"1\":{\"122\":1}}],[\"的继承来调用已存在的基类\",{\"1\":{\"1299\":1}}],[\"的强大\",{\"1\":{\"1298\":1}}],[\"的定义方式和\",{\"1\":{\"1282\":1}}],[\"的定位子元素\",{\"1\":{\"578\":1}}],[\"的默认变量一般是用来设置默认值\",{\"1\":{\"1260\":1}}],[\"的格式只能使用\",{\"1\":{\"1250\":1}}],[\"的格式一模一样\",{\"1\":{\"897\":1}}],[\"的新项目\",{\"1\":{\"1425\":1}}],[\"的新语法规则\",{\"1\":{\"1250\":1}}],[\"的新语法格式\",{\"1\":{\"1250\":1}}],[\"的新版本过渡\",{\"1\":{\"958\":1}}],[\"的写法额外\",{\"1\":{\"1779\":1}}],[\"的写法会在编译出来的\",{\"1\":{\"1255\":1}}],[\"的写法\",{\"1\":{\"1248\":3,\"2035\":1}}],[\"的书写规范\",{\"1\":{\"1248\":1}}],[\"的性能最优\",{\"1\":{\"1949\":1}}],[\"的性能消耗\",{\"1\":{\"1872\":1,\"1873\":1}}],[\"的性能问题\",{\"1\":{\"1243\":1}}],[\"的性能和效率非常高\",{\"1\":{\"224\":1}}],[\"的渲染方式\",{\"1\":{\"2064\":1}}],[\"的渲染从其入口函数\",{\"1\":{\"1997\":1}}],[\"的渲染\",{\"1\":{\"1240\":1,\"2031\":1,\"2034\":1}}],[\"的渲染区域\",{\"1\":{\"564\":1}}],[\"的次数\",{\"0\":{\"1239\":1}}],[\"的链式调用\",{\"0\":{\"1232\":1}}],[\"的链式操作\",{\"1\":{\"1193\":1}}],[\"的异步\",{\"1\":{\"1558\":1}}],[\"的异步实际上是单线程非阻塞式的\",{\"1\":{\"1224\":1}}],[\"的异步操作时提到过\",{\"1\":{\"1224\":1}}],[\"的异步模式\",{\"1\":{\"1180\":1}}],[\"的缩写形式\",{\"1\":{\"1198\":1}}],[\"的缩写不同\",{\"1\":{\"875\":1}}],[\"的开发\",{\"1\":{\"1194\":1}}],[\"的开放标准\",{\"1\":{\"363\":1}}],[\"的筛选方法\",{\"0\":{\"1204\":1},\"1\":{\"1193\":1}}],[\"的实现是一个类\",{\"1\":{\"2027\":1}}],[\"的实现本质上就是利用了\",{\"1\":{\"1897\":1}}],[\"的实现方式十分相似\",{\"1\":{\"1667\":1}}],[\"的实现\",{\"0\":{\"1574\":1,\"1583\":1,\"1587\":1,\"1895\":1,\"1896\":1,\"1897\":1}}],[\"的实现和\",{\"1\":{\"1478\":1}}],[\"的实现中\",{\"1\":{\"1181\":1,\"1560\":1,\"1779\":1}}],[\"的实例\",{\"1\":{\"1009\":1,\"2063\":2}}],[\"的实例对象\",{\"1\":{\"1007\":1,\"1423\":1,\"1488\":1}}],[\"的实例可以真正地自由修改类变量\",{\"1\":{\"405\":1}}],[\"的最新解释\",{\"1\":{\"1560\":1}}],[\"的最初语法格式\",{\"1\":{\"1249\":1}}],[\"的最初版本是这样区分的\",{\"1\":{\"980\":1}}],[\"的最初版本没有包括错误处理机制\",{\"1\":{\"980\":1}}],[\"的最核心方法\",{\"1\":{\"1198\":1}}],[\"的最小的调度单元\",{\"1\":{\"1169\":1}}],[\"的垂直坐标\",{\"1\":{\"1153\":1}}],[\"的水平坐标\",{\"1\":{\"1153\":1}}],[\"的地方时\",{\"1\":{\"1152\":1}}],[\"的所有组件都通过使用app\",{\"1\":{\"2016\":1}}],[\"的所有参数\",{\"1\":{\"1273\":1}}],[\"的所有对象\",{\"1\":{\"1141\":1}}],[\"的所有语法在\",{\"1\":{\"216\":1}}],[\"的记录\",{\"0\":{\"1131\":1,\"1163\":1}}],[\"的增长率\",{\"1\":{\"1728\":2}}],[\"的增删改的相关操作\",{\"0\":{\"1124\":1}}],[\"的增删改\",{\"0\":{\"1115\":1}}],[\"的增量更新\",{\"1\":{\"158\":1}}],[\"的使用缓存了\",{\"1\":{\"1537\":1}}],[\"的使用\",{\"0\":{\"1452\":1},\"1\":{\"1193\":1}}],[\"的使用方法也非常简单\",{\"1\":{\"1099\":1}}],[\"的使用率还是高于\",{\"1\":{\"82\":1}}],[\"的href属性\",{\"1\":{\"1093\":1}}],[\"的查询部分\",{\"1\":{\"1093\":1}}],[\"的锚部分\",{\"1\":{\"1093\":1}}],[\"的自然语言设置\",{\"1\":{\"1091\":1}}],[\"的自然对数\",{\"1\":{\"879\":2,\"884\":1}}],[\"的布尔值\",{\"1\":{\"1091\":1}}],[\"的用户会无法正常运行\",{\"1\":{\"1319\":1}}],[\"的用户认证是一种\",{\"1\":{\"360\":1}}],[\"的用法完全一样\",{\"1\":{\"1205\":1}}],[\"的用法\",{\"1\":{\"1088\":1,\"1205\":1,\"2069\":1}}],[\"的位置一样\",{\"1\":{\"1313\":1}}],[\"的位置\",{\"1\":{\"1088\":1}}],[\"的位置来进行样式改变\",{\"1\":{\"1034\":1}}],[\"的属性添加到vm实例上\",{\"1\":{\"1803\":1}}],[\"的属性和方法\",{\"1\":{\"1354\":1}}],[\"的属性\",{\"1\":{\"1201\":1,\"1493\":2,\"1925\":1,\"2088\":1}}],[\"的属性则可以使用delete操作符来进行删除\",{\"1\":{\"1086\":1}}],[\"的属性值为非布尔类型的\",{\"1\":{\"682\":1}}],[\"的属性值为布尔类型的\",{\"1\":{\"682\":1}}],[\"的属性值\",{\"1\":{\"530\":1,\"1916\":1}}],[\"的主机名\",{\"1\":{\"1093\":1}}],[\"的主机名和端口\",{\"1\":{\"1093\":1}}],[\"的主要方面纳入了\",{\"1\":{\"1084\":1}}],[\"的主线程只有一个\",{\"1\":{\"224\":1}}],[\"的关系是\",{\"1\":{\"1647\":1}}],[\"的关系\",{\"0\":{\"1084\":1,\"1424\":1}}],[\"的核心代码\",{\"1\":{\"2068\":1}}],[\"的核心实现位于\",{\"1\":{\"2067\":1}}],[\"的核心思想是直接在函数作用域内定义响应式状态变量\",{\"1\":{\"1485\":1}}],[\"的核心方法可以参看\",{\"1\":{\"1197\":1}}],[\"的核心方法\",{\"1\":{\"1193\":1}}],[\"的核心对象\",{\"1\":{\"1086\":1}}],[\"的核心对象就是是\",{\"1\":{\"1083\":1}}],[\"的核心就是客户端从服务端拉取更新后的文件\",{\"1\":{\"158\":1}}],[\"的上下文\",{\"1\":{\"1073\":1}}],[\"的上下文对象调用已经介绍得比较清楚了\",{\"1\":{\"992\":1}}],[\"的枚举顺序\",{\"0\":{\"1054\":1}}],[\"的就回收内存\",{\"1\":{\"1031\":1}}],[\"的指针\",{\"1\":{\"1030\":1}}],[\"的指向才是\",{\"1\":{\"1383\":2}}],[\"的指向是\",{\"1\":{\"1368\":1}}],[\"的指向是由外层\",{\"1\":{\"990\":1,\"996\":1}}],[\"的指向对象\",{\"1\":{\"1015\":1}}],[\"的指向受函数运行环境的影响\",{\"1\":{\"995\":1}}],[\"的指向规律有如下几条\",{\"1\":{\"990\":1,\"996\":1}}],[\"的指向\",{\"0\":{\"990\":1},\"1\":{\"990\":1,\"993\":1,\"995\":2,\"996\":2,\"1383\":1,\"2047\":1}}],[\"的隐式原型\",{\"1\":{\"1009\":1}}],[\"的隐式关系\",{\"1\":{\"237\":1}}],[\"的调用形式也可以被改写\",{\"1\":{\"995\":1}}],[\"的全局\",{\"1\":{\"2026\":1}}],[\"的全局对象\",{\"1\":{\"1587\":1}}],[\"的全局环境下执行的\",{\"1\":{\"991\":1}}],[\"的全部权利\",{\"1\":{\"362\":1}}],[\"的意思\",{\"1\":{\"980\":1,\"2073\":1}}],[\"的意思是解包参数列表\",{\"1\":{\"388\":1}}],[\"的标准\",{\"1\":{\"1560\":1}}],[\"的标签张量\",{\"1\":{\"1655\":1}}],[\"的标签会有多个\",{\"1\":{\"1236\":1}}],[\"的标签中\",{\"1\":{\"1198\":1,\"1239\":1}}],[\"的标志\",{\"1\":{\"957\":1}}],[\"的标题\",{\"1\":{\"694\":1}}],[\"的目的\",{\"1\":{\"956\":1,\"995\":1}}],[\"的lastindex置为\",{\"1\":{\"923\":1}}],[\"的正则表达式所不支持的特性\",{\"1\":{\"921\":1}}],[\"的正则语法\",{\"1\":{\"207\":1}}],[\"的正切值\",{\"1\":{\"884\":1}}],[\"的正弦值\",{\"1\":{\"884\":1}}],[\"的余弦值\",{\"1\":{\"884\":1}}],[\"的反正切值\",{\"1\":{\"884\":2}}],[\"的反正弦值\",{\"1\":{\"884\":1}}],[\"的反余弦值\",{\"1\":{\"884\":1}}],[\"的绝对值\",{\"1\":{\"884\":1}}],[\"的平方根的倒数\",{\"1\":{\"879\":1}}],[\"的平方根\",{\"1\":{\"879\":2,\"884\":1}}],[\"的参数含义介绍如下\",{\"1\":{\"1667\":1}}],[\"的参数只有\",{\"1\":{\"1205\":1}}],[\"的参数\",{\"1\":{\"877\":1}}],[\"的对比并更新\",{\"1\":{\"1806\":1}}],[\"的对策时\",{\"1\":{\"1686\":1}}],[\"的对数\",{\"1\":{\"879\":1}}],[\"的对应\",{\"1\":{\"867\":2}}],[\"的对象里面\",{\"1\":{\"2048\":1,\"2053\":1}}],[\"的对象写法\",{\"1\":{\"1461\":1}}],[\"的对象\",{\"1\":{\"841\":1,\"867\":1,\"879\":1,\"980\":1,\"1084\":1,\"1486\":1}}],[\"的范围不仅仅局限于字符串\",{\"1\":{\"867\":1}}],[\"的引用次数不为\",{\"1\":{\"1030\":1}}],[\"的引用次数都是\",{\"1\":{\"1030\":1}}],[\"的引用\",{\"1\":{\"865\":1,\"1030\":1,\"1951\":1}}],[\"的行为同样属于此项\",{\"1\":{\"1687\":1}}],[\"的行为\",{\"1\":{\"841\":1}}],[\"的键值对\",{\"1\":{\"1283\":1,\"1926\":2}}],[\"的键码分别是\",{\"1\":{\"1154\":1}}],[\"的键\",{\"1\":{\"828\":1}}],[\"的键是什么\",{\"1\":{\"828\":1}}],[\"的话会被判断为\",{\"1\":{\"980\":1}}],[\"的话\",{\"1\":{\"819\":1,\"2002\":1,\"2044\":1,\"2050\":1}}],[\"的规范应该尽量使用data\",{\"1\":{\"1125\":1}}],[\"的规范中\",{\"1\":{\"1084\":1}}],[\"的规定\",{\"1\":{\"794\":1}}],[\"的规则返回\",{\"1\":{\"760\":1}}],[\"的数组\",{\"1\":{\"2072\":1}}],[\"的数组里面所存放的数据的数据类型可以是任意类型\",{\"1\":{\"848\":1}}],[\"的数量变了\",{\"1\":{\"1955\":1}}],[\"的数量\",{\"1\":{\"1096\":1,\"2048\":1}}],[\"的数量有限\",{\"1\":{\"767\":1}}],[\"的数据张量\",{\"1\":{\"1655\":1}}],[\"的数据集对象\",{\"1\":{\"1655\":1}}],[\"的数据类型分成原始类型\",{\"1\":{\"980\":1}}],[\"的数据存储\",{\"1\":{\"768\":1}}],[\"的数值范围\",{\"1\":{\"794\":1}}],[\"的安全基础是\",{\"1\":{\"2091\":1}}],[\"的安全性很差\",{\"1\":{\"767\":1}}],[\"的安装\",{\"0\":{\"62\":1,\"123\":1,\"147\":1}}],[\"的缺点也渐渐暴露了出来\",{\"1\":{\"767\":1}}],[\"的事件\",{\"1\":{\"2049\":1}}],[\"的事件循环\",{\"1\":{\"1560\":1}}],[\"的事件处理\",{\"0\":{\"1214\":1},\"1\":{\"1193\":1}}],[\"的事件处理器中\",{\"1\":{\"765\":1}}],[\"的事件对象中实现了这种取消默认行为的方式\",{\"1\":{\"1156\":1}}],[\"的事件对象\",{\"1\":{\"1151\":1}}],[\"的事件流叫做事件冒泡\",{\"1\":{\"1139\":1}}],[\"的事件流是事件捕获流\",{\"1\":{\"1138\":1}}],[\"的事件流是事件冒泡流\",{\"1\":{\"1138\":1}}],[\"的事件模型有很多相似之处\",{\"1\":{\"771\":1}}],[\"的事件监听器\",{\"1\":{\"770\":1}}],[\"的事情\",{\"1\":{\"665\":1}}],[\"的拖放之前\",{\"1\":{\"763\":1}}],[\"的音量相对值\",{\"1\":{\"750\":1}}],[\"的那一部分\",{\"1\":{\"743\":1}}],[\"的右边\",{\"1\":{\"730\":1}}],[\"的左边\",{\"1\":{\"730\":1}}],[\"的圆\",{\"1\":{\"726\":2}}],[\"的返回值不是函数\",{\"1\":{\"1954\":1}}],[\"的返回值是null\",{\"1\":{\"1436\":1}}],[\"的返回值是一个普通的对象\",{\"1\":{\"1186\":1}}],[\"的返回值\",{\"1\":{\"725\":1,\"1895\":2,\"1984\":1}}],[\"的像素数目减少\",{\"1\":{\"720\":1}}],[\"的像素面积变大\",{\"1\":{\"720\":1}}],[\"的原型\",{\"1\":{\"1910\":1}}],[\"的原型对象添加$router和$route属性\",{\"1\":{\"2026\":1}}],[\"的原型对象\",{\"1\":{\"1785\":1}}],[\"的原型对象是原型链尽头\",{\"1\":{\"1009\":1}}],[\"的原则\",{\"1\":{\"1539\":2}}],[\"的原理\",{\"0\":{\"1394\":1}}],[\"的原始路径与\",{\"1\":{\"2065\":1}}],[\"的原始值\",{\"1\":{\"980\":1}}],[\"的原始字符串输出\",{\"1\":{\"384\":1}}],[\"的原因\",{\"1\":{\"797\":1,\"1612\":1,\"2030\":1}}],[\"的原点\",{\"1\":{\"720\":1}}],[\"的原点到一个不同的位置\",{\"1\":{\"720\":1}}],[\"的矩形\",{\"1\":{\"714\":1}}],[\"的坐标\",{\"1\":{\"706\":1}}],[\"的页面\",{\"1\":{\"1647\":1}}],[\"的页脚\",{\"1\":{\"694\":1}}],[\"的页眉\",{\"1\":{\"694\":1}}],[\"的东西\",{\"1\":{\"692\":1}}],[\"的同步关系\",{\"0\":{\"683\":1}}],[\"的名字不总是一\",{\"1\":{\"681\":1}}],[\"的名称及相对应的值\",{\"1\":{\"345\":1}}],[\"的单元格内元素垂直居中可以利用vertical\",{\"1\":{\"669\":1}}],[\"的视口称之为布局视口\",{\"1\":{\"648\":1}}],[\"的样式名中含有\",{\"1\":{\"1127\":1}}],[\"的样式\",{\"1\":{\"609\":1,\"1309\":1,\"1433\":1}}],[\"的堆叠上下文\",{\"1\":{\"578\":1}}],[\"的浮动\",{\"1\":{\"565\":1}}],[\"的浮点数\",{\"1\":{\"388\":1}}],[\"的情况下\",{\"1\":{\"683\":2,\"1627\":1,\"2027\":1,\"2069\":1}}],[\"的情况\",{\"1\":{\"554\":1,\"795\":1,\"971\":2,\"1712\":1,\"1929\":1}}],[\"的文本\",{\"1\":{\"1576\":1}}],[\"的文本内容被安排在同一行\",{\"1\":{\"552\":1}}],[\"的文档处理方法\",{\"0\":{\"1208\":1},\"1\":{\"1193\":1}}],[\"的文件\",{\"1\":{\"1320\":1}}],[\"的文件中\",{\"1\":{\"1309\":1,\"1673\":1}}],[\"的文件结构可以分为\",{\"1\":{\"376\":1}}],[\"的文件暂存\",{\"1\":{\"7\":1}}],[\"的块流动方向\",{\"1\":{\"552\":1}}],[\"的双值语法兼容性还存在问题\",{\"1\":{\"548\":1}}],[\"的大小\",{\"1\":{\"547\":2,\"1662\":1,\"1723\":1}}],[\"的基础概念和知识在它们之间都是通用的\",{\"1\":{\"1485\":1}}],[\"的基础中\",{\"1\":{\"1442\":1}}],[\"的基础\",{\"1\":{\"1203\":1}}],[\"的基础上加入\",{\"1\":{\"2091\":1}}],[\"的基础上通过传输加密和身份认证保证了传输过程的安全性\",{\"1\":{\"2091\":1}}],[\"的基础上实现的\",{\"1\":{\"1485\":1}}],[\"的基础上进行了一层封装\",{\"1\":{\"1194\":1}}],[\"的基础上增加了一个\",{\"1\":{\"535\":1}}],[\"的基本原理可以参考vue\",{\"1\":{\"2038\":1}}],[\"的基本原理参考\",{\"1\":{\"2006\":1}}],[\"的基本理念是\",{\"1\":{\"1605\":1}}],[\"的基本使用\",{\"0\":{\"1186\":1}}],[\"的基本用法\",{\"0\":{\"700\":1}}],[\"的基本语法分为两部分\",{\"1\":{\"514\":1}}],[\"的基本流程\",{\"1\":{\"239\":1}}],[\"的字符串中第一个字符的索引为\",{\"1\":{\"1265\":1}}],[\"的字符串\",{\"1\":{\"1161\":1,\"2058\":1}}],[\"的字体大小\",{\"1\":{\"650\":1}}],[\"的字体大小来计算\",{\"1\":{\"534\":1}}],[\"的字库\",{\"1\":{\"143\":1}}],[\"的元素行\",{\"1\":{\"2053\":1}}],[\"的元素才需要触发响应\",{\"1\":{\"1918\":1}}],[\"的元素值为\",{\"1\":{\"846\":5}}],[\"的元素值为$\",{\"1\":{\"846\":1}}],[\"的元素可以包含浮动的子元素\",{\"1\":{\"564\":1}}],[\"的元素子元素和父元素外边距不会重叠\",{\"1\":{\"564\":1}}],[\"的元素不会被浮动元素所覆盖\",{\"1\":{\"564\":1}}],[\"的元素不可改变\",{\"1\":{\"391\":1}}],[\"的元素\",{\"1\":{\"520\":1,\"564\":1,\"1112\":1,\"1290\":1,\"1927\":1}}],[\"的方法会被调用\",{\"1\":{\"2072\":1}}],[\"的方法十分简单\",{\"1\":{\"2028\":1}}],[\"的方法所定义的默认行为\",{\"1\":{\"1903\":1}}],[\"的方法来获取元素节点\",{\"1\":{\"1112\":1}}],[\"的方法直接当作回调函数\",{\"1\":{\"995\":1}}],[\"的方法\",{\"0\":{\"1206\":1},\"1\":{\"487\":3,\"704\":1,\"1129\":1,\"1193\":1,\"1199\":1,\"1226\":1,\"1232\":1,\"1358\":1,\"2061\":1}}],[\"的方式校验证书是否被吊销\",{\"1\":{\"2091\":1}}],[\"的方式来注册的\",{\"1\":{\"2069\":1}}],[\"的方式来搭建的\",{\"1\":{\"2040\":1}}],[\"的方式来声明变量\",{\"1\":{\"948\":1}}],[\"的方式开始比对节点\",{\"1\":{\"1789\":1}}],[\"的方式\",{\"1\":{\"405\":2,\"1645\":1,\"2058\":2}}],[\"的方式导入模块\",{\"1\":{\"46\":1}}],[\"的个数相同\",{\"1\":{\"487\":1}}],[\"的10个桶中\",{\"1\":{\"419\":1}}],[\"的装饰器便可以适用于各种不同参数的函数\",{\"1\":{\"402\":1}}],[\"的解释器\",{\"1\":{\"402\":1}}],[\"的处理就是处理一种类型的导航守卫\",{\"1\":{\"2072\":1}}],[\"的处理\",{\"1\":{\"402\":1,\"1949\":1,\"2045\":1}}],[\"的优势\",{\"0\":{\"1510\":1,\"1512\":1},\"1\":{\"1501\":1}}],[\"的优势相吻合\",{\"1\":{\"218\":1}}],[\"的优点\",{\"1\":{\"959\":1,\"1105\":1,\"1572\":1}}],[\"的优先级比较高\",{\"1\":{\"750\":1}}],[\"的优先级比其他类型的运算符现低\",{\"1\":{\"397\":1}}],[\"的共轭复数\",{\"1\":{\"395\":1}}],[\"的六个标准数据类型中\",{\"1\":{\"381\":1}}],[\"的映射关系\",{\"1\":{\"373\":1,\"2028\":1}}],[\"的公\",{\"1\":{\"363\":1}}],[\"的声明一般被用来在身份提供者和服务提供者间传递被认证的\",{\"1\":{\"363\":1}}],[\"的身份验证\",{\"1\":{\"363\":1}}],[\"的存储空间\",{\"1\":{\"360\":1}}],[\"的认证方式\",{\"1\":{\"360\":1}}],[\"的作用如下\",{\"1\":{\"1109\":1}}],[\"的作用域中运行函数\",{\"1\":{\"995\":1}}],[\"的作用是将输入张量在每个池化窗口内取最大值\",{\"1\":{\"1663\":1}}],[\"的作用是将字符串靠右对齐\",{\"1\":{\"386\":1}}],[\"的作用是转发模块成员\",{\"1\":{\"1309\":1}}],[\"的作用是设置与之对应的\",{\"1\":{\"681\":1,\"1949\":1}}],[\"的作用就是选中页面中所有的\",{\"1\":{\"514\":1}}],[\"的作用就是将\",{\"1\":{\"149\":1}}],[\"的作用\",{\"0\":{\"359\":1},\"1\":{\"547\":1,\"1394\":1}}],[\"的中间件\",{\"1\":{\"355\":1}}],[\"的体积\",{\"1\":{\"350\":1}}],[\"的清除\",{\"1\":{\"349\":1}}],[\"的操作还可以提高计算性能\",{\"1\":{\"1666\":1}}],[\"的操作都会返回\",{\"1\":{\"795\":1}}],[\"的操作\",{\"1\":{\"348\":1}}],[\"的信息\",{\"1\":{\"345\":1,\"1862\":1}}],[\"的支持不是很好\",{\"1\":{\"350\":1}}],[\"的支持\",{\"1\":{\"331\":2}}],[\"的模式\",{\"1\":{\"2058\":1}}],[\"的模板编译为children\",{\"1\":{\"1954\":1}}],[\"的模板字面量使得多行字符串更加容易创建\",{\"1\":{\"790\":1}}],[\"的模板引擎\",{\"1\":{\"324\":1}}],[\"的模块化\",{\"0\":{\"1300\":1}}],[\"的模块化标准\",{\"1\":{\"116\":1}}],[\"的模块时\",{\"1\":{\"379\":1}}],[\"的协议\",{\"1\":{\"291\":1,\"1647\":1}}],[\"的协议拼接形成完整\",{\"1\":{\"291\":1}}],[\"的内容不是在纯文本标签里\",{\"1\":{\"1792\":1}}],[\"的内容\",{\"1\":{\"284\":1,\"768\":1,\"2049\":2}}],[\"的内置模块和常见api\",{\"1\":{\"241\":1}}],[\"的请求\",{\"1\":{\"2091\":1}}],[\"的请求和响应中\",{\"1\":{\"1639\":1}}],[\"的请求进行配置\",{\"1\":{\"1227\":1}}],[\"的请求头也是可以的\",{\"1\":{\"346\":1}}],[\"的请求头\",{\"1\":{\"282\":1}}],[\"的请求体\",{\"0\":{\"270\":1}}],[\"的请求行\",{\"0\":{\"268\":1}}],[\"的能力\",{\"1\":{\"256\":1}}],[\"的值赋给它\",{\"1\":{\"2047\":1}}],[\"的值设为\",{\"1\":{\"1962\":1}}],[\"的值而不用\",{\"1\":{\"1938\":1}}],[\"的值时应该能够触发响应\",{\"1\":{\"1902\":1}}],[\"的值时\",{\"1\":{\"1890\":1,\"1896\":1,\"1943\":1}}],[\"的值依次取出来\",{\"1\":{\"1290\":1}}],[\"的值是\",{\"1\":{\"1953\":1}}],[\"的值是选项对象\",{\"1\":{\"1951\":1}}],[\"的值是相应键的名\",{\"1\":{\"1154\":1}}],[\"的值是通过加密\",{\"1\":{\"350\":1}}],[\"的值就是相应的文本字符\",{\"1\":{\"1154\":1}}],[\"的值所占的内存\",{\"1\":{\"1031\":1}}],[\"的值所占用的内存\",{\"1\":{\"1030\":1}}],[\"的值需要一层一层向上寻找\",{\"1\":{\"1019\":1}}],[\"的值最好不是对象\",{\"1\":{\"980\":1}}],[\"的值呢\",{\"1\":{\"980\":1}}],[\"的值为新的子组件\",{\"1\":{\"2002\":1}}],[\"的值为任务返回的值\",{\"1\":{\"1189\":1}}],[\"的值为\",{\"1\":{\"730\":1,\"996\":2,\"1105\":3,\"1612\":1,\"1890\":1,\"1956\":2,\"2002\":1}}],[\"的值为模块本身的名字\",{\"1\":{\"377\":1}}],[\"的值之间是有关联的\",{\"1\":{\"681\":1}}],[\"的值与键盘上一个特定的键对应\",{\"1\":{\"1154\":1}}],[\"的值与\",{\"1\":{\"681\":1}}],[\"的值只能够是字符串\",{\"1\":{\"680\":1}}],[\"的值默认是\",{\"1\":{\"574\":1}}],[\"的值以使等式满足\",{\"1\":{\"574\":1}}],[\"的值在打印输出之后就不在了\",{\"1\":{\"402\":1}}],[\"的值会变为\",{\"1\":{\"377\":1}}],[\"的值确定用\",{\"1\":{\"354\":1}}],[\"的值通过响应头返回给浏览器\",{\"1\":{\"354\":1}}],[\"的值\",{\"0\":{\"1277\":1},\"1\":{\"237\":1,\"239\":2,\"574\":1,\"730\":1,\"769\":2,\"770\":1,\"879\":2,\"980\":1,\"1104\":2,\"1360\":1,\"1892\":3,\"1895\":1,\"1910\":1,\"1911\":1,\"1925\":1,\"1949\":1,\"1954\":1,\"1962\":1,\"2001\":1,\"2047\":1,\"2064\":1}}],[\"的值的话\",{\"1\":{\"50\":1}}],[\"的形式是多样的\",{\"1\":{\"2070\":1}}],[\"的形式调用的\",{\"1\":{\"992\":1}}],[\"的形式表示\",{\"1\":{\"913\":1}}],[\"的形式的参数设置\",{\"1\":{\"877\":1}}],[\"的形式暴露数据\",{\"1\":{\"237\":1}}],[\"的形式定义\",{\"1\":{\"64\":1}}],[\"的教程参考nvm\",{\"1\":{\"228\":1}}],[\"的版本为\",{\"1\":{\"2038\":1}}],[\"的版本较早\",{\"1\":{\"1216\":1}}],[\"的版本\",{\"0\":{\"1196\":1},\"1\":{\"228\":1}}],[\"的版本会有很大区别\",{\"1\":{\"142\":1}}],[\"的官网下载安装包\",{\"1\":{\"227\":1}}],[\"的背后还有一个线程池\",{\"1\":{\"224\":1}}],[\"的网站视觉\",{\"1\":{\"222\":1}}],[\"的兴起\",{\"1\":{\"219\":1}}],[\"的人\",{\"1\":{\"219\":1}}],[\"的接受程度最高\",{\"1\":{\"217\":1}}],[\"的应用程序中使用\",{\"1\":{\"2063\":1}}],[\"的应用场景\",{\"0\":{\"1100\":1}}],[\"的应用\",{\"0\":{\"217\":1},\"1\":{\"1195\":1}}],[\"的应用软件\",{\"1\":{\"58\":1}}],[\"的图书\",{\"1\":{\"205\":1,\"207\":1}}],[\"的热更新原理\",{\"0\":{\"158\":1}}],[\"的功能\",{\"1\":{\"156\":1,\"264\":1}}],[\"的区别在于\",{\"1\":{\"1666\":1}}],[\"的区别在于它只会来到当前动画的最终状态\",{\"1\":{\"1225\":1}}],[\"的区别主要有如下几点\",{\"1\":{\"356\":1}}],[\"的区别\",{\"0\":{\"156\":1,\"356\":1,\"362\":1,\"369\":1,\"986\":1,\"1847\":1,\"1856\":1},\"1\":{\"993\":1,\"1148\":1,\"1215\":1,\"1216\":1,\"1219\":1,\"1285\":1,\"1381\":1,\"1427\":1,\"1835\":1}}],[\"的时候如果不传入\",{\"1\":{\"2031\":1}}],[\"的时候会实例化一个路由器对象\",{\"1\":{\"2027\":1}}],[\"的时候获取值\",{\"1\":{\"2002\":1}}],[\"的时候禁止追踪\",{\"1\":{\"1925\":1}}],[\"的时候再判断一些\",{\"1\":{\"1921\":1}}],[\"的时候才触发响应\",{\"1\":{\"1909\":1}}],[\"的时候才触发事件\",{\"1\":{\"1158\":1}}],[\"的时候能在回调函数的参数中拿到新旧值的原因\",{\"1\":{\"1855\":1}}],[\"的时候有介绍过\",{\"1\":{\"1105\":1}}],[\"的时候没有传递任何参数\",{\"1\":{\"828\":1}}],[\"的时候\",{\"1\":{\"150\":1,\"248\":1,\"828\":1,\"1152\":1,\"1894\":1,\"1927\":1,\"1993\":1,\"2026\":1,\"2030\":2,\"2058\":2,\"2071\":1}}],[\"的预设\",{\"1\":{\"149\":1}}],[\"的力量\",{\"1\":{\"149\":1}}],[\"的做法和\",{\"1\":{\"146\":1}}],[\"的一边\",{\"1\":{\"1743\":1}}],[\"的一些特点\",{\"1\":{\"781\":1}}],[\"的一些方法\",{\"0\":{\"685\":1},\"1\":{\"1206\":1}}],[\"的一些扩展功能\",{\"1\":{\"128\":1}}],[\"的一个简单使用案例\",{\"1\":{\"2061\":1}}],[\"的一个别名\",{\"1\":{\"2058\":1}}],[\"的一个分支\",{\"1\":{\"1084\":1}}],[\"的一个属性\",{\"1\":{\"996\":1}}],[\"的一个描述\",{\"1\":{\"828\":1}}],[\"的一个子集\",{\"1\":{\"681\":1}}],[\"的一个依赖包\",{\"1\":{\"66\":1}}],[\"的一种技术\",{\"1\":{\"323\":1}}],[\"的执行就是在\",{\"1\":{\"2084\":1}}],[\"的执行流程\",{\"1\":{\"1993\":1}}],[\"的执行结果存储到\",{\"1\":{\"1895\":1,\"1984\":1}}],[\"的执行分为\",{\"1\":{\"1020\":1}}],[\"的执行命令\",{\"1\":{\"124\":1}}],[\"的执行速度推上了一个新的台阶\",{\"1\":{\"24\":1}}],[\"的打包能力\",{\"1\":{\"138\":1}}],[\"的打包\",{\"1\":{\"124\":1}}],[\"的配置中\",{\"1\":{\"138\":1}}],[\"的配置文件\",{\"1\":{\"124\":1,\"1427\":1}}],[\"的配置项\",{\"1\":{\"88\":1,\"1953\":1}}],[\"的侧重点不一样\",{\"1\":{\"117\":1}}],[\"的锁文件为\",{\"1\":{\"89\":2}}],[\"的环境\",{\"1\":{\"71\":2,\"1028\":2}}],[\"的镜像地址\",{\"1\":{\"69\":1}}],[\"的包管理工具\",{\"1\":{\"61\":1,\"215\":1}}],[\"的<script>\",{\"1\":{\"47\":1}}],[\"的库文件导入到项目\",{\"1\":{\"44\":1}}],[\"的框架\",{\"0\":{\"44\":1,\"45\":1},\"1\":{\"215\":1}}],[\"的\",{\"0\":{\"37\":1,\"1051\":1,\"1226\":1,\"1360\":1,\"1361\":1,\"1463\":1,\"1484\":1},\"1\":{\"138\":1,\"155\":1,\"156\":1,\"158\":1,\"159\":1,\"219\":1,\"222\":1,\"223\":1,\"238\":1,\"271\":1,\"295\":1,\"360\":1,\"395\":1,\"519\":2,\"533\":1,\"707\":1,\"752\":1,\"754\":1,\"756\":1,\"765\":1,\"766\":1,\"768\":1,\"794\":2,\"884\":2,\"932\":1,\"993\":1,\"995\":2,\"1029\":1,\"1093\":4,\"1105\":1,\"1193\":1,\"1194\":1,\"1198\":2,\"1219\":1,\"1265\":1,\"1290\":2,\"1300\":1,\"1313\":1,\"1317\":1,\"1324\":1,\"1394\":1,\"1488\":1,\"1493\":1,\"1507\":1,\"1663\":1,\"1674\":1,\"1746\":1,\"1779\":2,\"1784\":1,\"1789\":1,\"1791\":2,\"1795\":1,\"1802\":1,\"1864\":2,\"1888\":1,\"1896\":1,\"1897\":1,\"1902\":1,\"1903\":1,\"1929\":1,\"1931\":1,\"1938\":1,\"1948\":1,\"1951\":3,\"1953\":1,\"1954\":1,\"1974\":1,\"2028\":1,\"2030\":1,\"2032\":2,\"2043\":1,\"2047\":1,\"2049\":1,\"2050\":1,\"2051\":4,\"2058\":1,\"2065\":1,\"2073\":2}}],[\"的无穷潜力\",{\"1\":{\"25\":1}}],[\"的市场逐步被\",{\"1\":{\"24\":1}}],[\"的诞生\",{\"1\":{\"24\":1}}],[\"的问题\",{\"0\":{\"31\":1},\"1\":{\"24\":1,\"1401\":1,\"1468\":1,\"1485\":1,\"1703\":1}}],[\"的速度太慢\",{\"1\":{\"23\":1}}],[\"的出现就是为了解决这个问题\",{\"1\":{\"1649\":1}}],[\"的出现打开了前端开发者的思路\",{\"1\":{\"25\":1}}],[\"的出现\",{\"1\":{\"23\":1,\"146\":1,\"1232\":1}}],[\"的竞争中失利\",{\"1\":{\"22\":1}}],[\"的服务器通常由公司搭建内部使用或是购买一些公共的私有\",{\"1\":{\"12\":1}}],[\"不考虑\",{\"0\":{\"1961\":1}}],[\"不考虑模块缓存\",{\"1\":{\"37\":1}}],[\"不具有响应能力\",{\"1\":{\"1937\":1}}],[\"不调用\",{\"1\":{\"1914\":1}}],[\"不调用的时候是不会在\",{\"1\":{\"1299\":1}}],[\"不然下一次会得到错误的旧值\",{\"1\":{\"1897\":1}}],[\"不影响垃圾回收器的工作\",{\"1\":{\"1889\":1}}],[\"不光可以用来描述真实\",{\"1\":{\"1879\":1}}],[\"不让外部直接操作\",{\"1\":{\"1836\":1}}],[\"不让函数的执行和函数名紧紧关联在一起\",{\"1\":{\"953\":1}}],[\"不传参\",{\"1\":{\"1816\":1}}],[\"不传参移除所有事件\",{\"1\":{\"1816\":1}}],[\"不传值时默认展开一维\",{\"1\":{\"451\":1}}],[\"不处理slot函数内部的组件\",{\"1\":{\"1795\":1}}],[\"不符合开始标签的结束特征\",{\"1\":{\"1792\":1}}],[\"不符合自定义验证返回\",{\"1\":{\"760\":1}}],[\"不绝如缕\",{\"1\":{\"1705\":1}}],[\"不缺引出话题\",{\"1\":{\"1697\":1}}],[\"不断更新\",{\"1\":{\"1572\":1}}],[\"不友好\",{\"1\":{\"1572\":1}}],[\"不应该使用\",{\"1\":{\"1569\":1}}],[\"不应该共享给其它网站或者第三方\",{\"1\":{\"362\":1}}],[\"不作考虑\",{\"1\":{\"1560\":1}}],[\"不希望数据被修改时\",{\"1\":{\"1505\":1}}],[\"不进行对象的响应式处理\",{\"1\":{\"1504\":1}}],[\"不写<template>标签的时候\",{\"1\":{\"1486\":1}}],[\"不写统一为\",{\"1\":{\"756\":2}}],[\"不美观\",{\"1\":{\"1468\":1}}],[\"不被销毁\",{\"1\":{\"1465\":1}}],[\"不借助<router\",{\"1\":{\"1464\":1}}],[\"不适合频繁改变其参数和行为\",{\"1\":{\"2002\":1}}],[\"不适合大量数据的存储\",{\"1\":{\"767\":1}}],[\"不适用于query参数\",{\"1\":{\"1462\":1}}],[\"不添加scoped\",{\"1\":{\"1433\":1}}],[\"不解析\",{\"1\":{\"1404\":1}}],[\"不展示的\",{\"1\":{\"1388\":1,\"1389\":1}}],[\"不改变\",{\"1\":{\"1383\":1}}],[\"不改变原始类\",{\"1\":{\"405\":1}}],[\"不用于网络传输\",{\"1\":{\"2100\":1}}],[\"不用移动\",{\"1\":{\"1965\":2}}],[\"不用借位\",{\"1\":{\"1715\":1}}],[\"不用指明监视哪个属性\",{\"1\":{\"1498\":1}}],[\"不用使用脚手架时\",{\"1\":{\"1420\":1}}],[\"不用在模板中添加过多代码\",{\"1\":{\"1374\":1}}],[\"不用重复的\",{\"1\":{\"1366\":1}}],[\"不编译\",{\"0\":{\"1316\":1}}],[\"不允许任何特殊的\",{\"1\":{\"1308\":1}}],[\"不允许修改模块中变量的值\",{\"1\":{\"50\":1}}],[\"不足之处在于如果基类并不存在于\",{\"1\":{\"1299\":1}}],[\"不足之处在于编译出来的\",{\"1\":{\"1299\":1}}],[\"不足的糟糕局面\",{\"1\":{\"23\":1}}],[\"不区分整数和小数\",{\"1\":{\"1264\":1}}],[\"不区分大小模式和全局模式三种\",{\"1\":{\"919\":1}}],[\"不区分大小写\",{\"1\":{\"295\":2}}],[\"不带参数的混合宏\",{\"1\":{\"1292\":1}}],[\"不带引号的字符串就是写\",{\"1\":{\"1265\":1}}],[\"不带有大括号\",{\"1\":{\"1248\":1}}],[\"不带大括号\",{\"1\":{\"1247\":1}}],[\"不带时效性\",{\"1\":{\"349\":1}}],[\"不清空队列\",{\"1\":{\"1225\":2}}],[\"不显示当前动画的最终状态\",{\"1\":{\"1225\":2}}],[\"不一定在同一进程中\",{\"0\":{\"1173\":1}}],[\"不一定等于\",{\"1\":{\"796\":1}}],[\"不相等\",{\"1\":{\"1052\":1}}],[\"不随着它的上下文环境一起销毁\",{\"1\":{\"1024\":1}}],[\"不分顺序\",{\"1\":{\"1015\":1}}],[\"不满足\",{\"1\":{\"1007\":1}}],[\"不满足条件返回空数组\",{\"1\":{\"854\":1}}],[\"不理解它的含义\",{\"1\":{\"990\":1}}],[\"不初始化值默认为\",{\"1\":{\"987\":1}}],[\"不严谨之处\",{\"1\":{\"956\":1,\"959\":1}}],[\"不定参数都是放在形式参数的最后面\",{\"1\":{\"933\":1}}],[\"不定参数是从\",{\"1\":{\"933\":1}}],[\"不定参数\",{\"0\":{\"933\":1}}],[\"不论正则表达式的创建方式是哪种\",{\"1\":{\"925\":1}}],[\"不论是初次播放\",{\"1\":{\"752\":1}}],[\"不良的选择结构\",{\"1\":{\"914\":1}}],[\"不包含子组件中定义的\",{\"1\":{\"1834\":1}}],[\"不包含变量的纯文本节点\",{\"1\":{\"1795\":1}}],[\"不包含窗口本身的控件以及滚动条\",{\"1\":{\"1153\":2}}],[\"不包含\",{\"1\":{\"891\":3,\"2058\":1}}],[\"不包括图片\",{\"1\":{\"1215\":1}}],[\"不包括结束位置\",{\"1\":{\"891\":1}}],[\"不包括\",{\"1\":{\"891\":1,\"1149\":1}}],[\"不使用其他参数\",{\"1\":{\"1663\":1}}],[\"不使用\",{\"1\":{\"876\":1,\"938\":1}}],[\"不在第一个位置\",{\"1\":{\"1792\":2}}],[\"不在是描述信息\",{\"1\":{\"828\":1}}],[\"不在cookie中存取敏感信息\",{\"1\":{\"353\":1}}],[\"不成立该循环就结束\",{\"1\":{\"821\":1}}],[\"不全等\",{\"1\":{\"816\":1}}],[\"不全等是\",{\"1\":{\"814\":1}}],[\"不管下面进入\",{\"1\":{\"2074\":1}}],[\"不管调用哪个\",{\"1\":{\"2058\":1}}],[\"不管调用与否\",{\"1\":{\"1299\":1}}],[\"不管调用与不调用\",{\"1\":{\"1299\":1}}],[\"不管你传入的是什么牛鬼蛇神\",{\"1\":{\"2054\":1}}],[\"不管参与运算的变量是多少进制\",{\"1\":{\"792\":1}}],[\"不管是成功还是失败\",{\"1\":{\"773\":1}}],[\"不含时区\",{\"1\":{\"757\":2}}],[\"不支持嵌套的原因是使用变量\",{\"1\":{\"1891\":1}}],[\"不支持异步\",{\"1\":{\"1857\":1}}],[\"不支持往回看\",{\"1\":{\"918\":1}}],[\"不支持<canvas>的浏览器会显示代替内容\",{\"1\":{\"702\":1}}],[\"不支持\",{\"1\":{\"702\":1,\"765\":1,\"1087\":4,\"1098\":12,\"2063\":2}}],[\"不确定\",{\"1\":{\"696\":1}}],[\"不换行\",{\"1\":{\"625\":1}}],[\"不加为怪异模式\",{\"1\":{\"691\":1}}],[\"不加粗\",{\"1\":{\"621\":1}}],[\"不加条件查询\",{\"1\":{\"203\":1}}],[\"不占据页面位置\",{\"1\":{\"548\":1}}],[\"不再赘述\",{\"1\":{\"1539\":1}}],[\"不再发出请求\",{\"1\":{\"1530\":1}}],[\"不再等待整个应用编译完成\",{\"1\":{\"1483\":1}}],[\"不再使用类的写法\",{\"1\":{\"1890\":1}}],[\"不再使用宏队列的说法\",{\"1\":{\"1181\":1,\"1560\":1}}],[\"不再使用的变量也就是生命周期结束的变量\",{\"1\":{\"1028\":1}}],[\"不再用到的内存\",{\"1\":{\"1027\":1}}],[\"不再能够生成全局变量了\",{\"1\":{\"958\":1}}],[\"不再需要自己手动标明\",{\"1\":{\"693\":1}}],[\"不再占据文档流中的位置\",{\"1\":{\"561\":1}}],[\"不再给父元素汇报宽高数据\",{\"1\":{\"541\":1}}],[\"不再是必须附属于浏览器的\",{\"1\":{\"24\":1}}],[\"不常用\",{\"0\":{\"1047\":1},\"1\":{\"535\":1,\"760\":1}}],[\"不利于维护和扩展\",{\"1\":{\"486\":1}}],[\"不行\",{\"1\":{\"402\":1,\"1560\":1}}],[\"不指定形参的实\",{\"1\":{\"402\":1}}],[\"不等于比较\",{\"1\":{\"398\":1}}],[\"不等于\",{\"1\":{\"398\":1,\"403\":1,\"816\":1}}],[\"不重复\",{\"1\":{\"392\":1}}],[\"不仅写法有区别\",{\"1\":{\"1142\":1}}],[\"不仅外部样式表的样式获取不到\",{\"1\":{\"1127\":1}}],[\"不仅所有单词\",{\"1\":{\"916\":1}}],[\"不仅可以用于数据提取\",{\"1\":{\"911\":1}}],[\"不仅包括字母\",{\"1\":{\"904\":1}}],[\"不仅有相同的值\",{\"1\":{\"382\":1}}],[\"不仅限于\",{\"1\":{\"223\":1}}],[\"不需要切换状态\",{\"1\":{\"1974\":1}}],[\"不需要进行移动\",{\"1\":{\"1968\":1}}],[\"不需要\",{\"1\":{\"1487\":1,\"1492\":1}}],[\"不需要写扩展名\",{\"1\":{\"1308\":1}}],[\"不需要在编译阶段处理它\",{\"1\":{\"1315\":1}}],[\"不需要在函数实例上使用\",{\"1\":{\"995\":1}}],[\"不需要在页面上再显示指出\",{\"1\":{\"692\":1}}],[\"不需要再区分块和行内了\",{\"1\":{\"541\":1}}],[\"不需要查询或者减少查询数据库\",{\"1\":{\"369\":1}}],[\"不需要添加\",{\"1\":{\"87\":1}}],[\"不可以加括号\",{\"1\":{\"1376\":1}}],[\"不可以使用\",{\"1\":{\"904\":1}}],[\"不可以转移到其它\",{\"1\":{\"362\":1}}],[\"不可变性\",{\"0\":{\"1281\":1}}],[\"不可变性有助于在各个地方共用一个列表时\",{\"1\":{\"1272\":1}}],[\"不可变集合\",{\"1\":{\"392\":1}}],[\"不可变数据\",{\"1\":{\"381\":1}}],[\"不可修改\",{\"1\":{\"50\":1}}],[\"不属于\",{\"1\":{\"358\":1}}],[\"不共享\",{\"1\":{\"349\":1}}],[\"不输出内容\",{\"1\":{\"328\":1}}],[\"不执行导航操作\",{\"1\":{\"2065\":1}}],[\"不执行\",{\"1\":{\"328\":1}}],[\"不推荐在应用代码中使用\",{\"1\":{\"1826\":1}}],[\"不推荐使用\",{\"1\":{\"1112\":1}}],[\"不推荐\",{\"1\":{\"259\":1,\"564\":2,\"1370\":1}}],[\"不存在或者新的路由记录\",{\"1\":{\"2069\":1}}],[\"不存在或者\",{\"1\":{\"2065\":1}}],[\"不存在时返回\",{\"1\":{\"1277\":1}}],[\"不存在变量提升\",{\"1\":{\"988\":1}}],[\"不存在有键\",{\"1\":{\"828\":1}}],[\"不存在\",{\"1\":{\"238\":1,\"1794\":1,\"1889\":1,\"1929\":1,\"1944\":1,\"1951\":1,\"1956\":2,\"1962\":1,\"2061\":1,\"2068\":1,\"2069\":1}}],[\"不要写代码\",{\"1\":{\"1595\":1}}],[\"不要考虑任何缓存\",{\"1\":{\"1542\":1}}],[\"不要对这个资源做任何的缓存\",{\"1\":{\"1539\":1}}],[\"不要用\",{\"1\":{\"1408\":1}}],[\"不要用箭头函数\",{\"1\":{\"1368\":1}}],[\"不要显示地写出扩展名\",{\"1\":{\"1315\":1}}],[\"不要为了某些骇客行为而声明新变量\",{\"1\":{\"1261\":1}}],[\"不要使用闭合的形式\",{\"1\":{\"701\":1}}],[\"不要存储敏感数据\",{\"1\":{\"350\":1}}],[\"不要的字段\",{\"1\":{\"209\":1}}],[\"不要混着用\",{\"1\":{\"89\":1}}],[\"不会载入新的文档\",{\"1\":{\"2051\":1}}],[\"不会引起和服务器之间的交互\",{\"1\":{\"2049\":1}}],[\"不会引起页面更新\",{\"1\":{\"1506\":1}}],[\"不会触发重新渲染\",{\"1\":{\"1937\":1}}],[\"不会触发父组件更新\",{\"1\":{\"1842\":1}}],[\"不会进行追踪和更新\",{\"1\":{\"1840\":1}}],[\"不会进入第二个操作数的判断\",{\"1\":{\"808\":1}}],[\"不会响应\",{\"1\":{\"1646\":2}}],[\"不会被保存到浏览器的历史记录中\",{\"1\":{\"1569\":1}}],[\"不会附带请求体\",{\"1\":{\"1569\":1}}],[\"不会阻塞\",{\"1\":{\"1526\":1}}],[\"不会阻塞主线程\",{\"1\":{\"1187\":1,\"1189\":1}}],[\"不会报错\",{\"1\":{\"1429\":1}}],[\"不会自动合并\",{\"1\":{\"1299\":1}}],[\"不会自动调用\",{\"1\":{\"711\":1}}],[\"不会产生任何代码\",{\"1\":{\"1298\":1}}],[\"不会修改原\",{\"1\":{\"1279\":1}}],[\"不会再同时触发绑定在父元素上面的事件\",{\"1\":{\"1155\":1}}],[\"不会再变化\",{\"1\":{\"1017\":1}}],[\"不会有任何内存占用的情况\",{\"1\":{\"1023\":1}}],[\"不会包括剩余参数的个数\",{\"1\":{\"951\":1}}],[\"不会把自己的\",{\"1\":{\"942\":1}}],[\"不会把主服务器暴露在外面\",{\"1\":{\"218\":1}}],[\"不会因为参数个数的不同而影响\",{\"1\":{\"841\":1}}],[\"不会同步给\",{\"1\":{\"683\":1}}],[\"不会随元素移动\",{\"1\":{\"634\":1}}],[\"不会从父元素中移出\",{\"1\":{\"561\":1}}],[\"不会\",{\"1\":{\"540\":1,\"1124\":2,\"1319\":1}}],[\"不会独占页面的一行\",{\"1\":{\"540\":2}}],[\"不会等到继承\",{\"1\":{\"533\":1}}],[\"不会等待\",{\"1\":{\"245\":1}}],[\"不会存储会话信息\",{\"1\":{\"362\":1}}],[\"不会添加该代码\",{\"1\":{\"191\":1}}],[\"不会造成堵塞浏览器\",{\"1\":{\"47\":1}}],[\"不变\",{\"1\":{\"159\":1,\"2058\":1}}],[\"不过对于开发单页应用来讲\",{\"1\":{\"2051\":1}}],[\"不过对于箭头函数来讲\",{\"1\":{\"996\":1}}],[\"不过可以通过简单的配置就可以实现附带\",{\"1\":{\"1612\":1}}],[\"不过可以分为先声明再赋值和声明时直接赋值\",{\"1\":{\"843\":1}}],[\"不过他并不是一无事处\",{\"1\":{\"1299\":1}}],[\"不过也可用\",{\"1\":{\"1216\":1}}],[\"不过要注意的是\",{\"1\":{\"1207\":1}}],[\"不过总结下来就\",{\"1\":{\"1195\":1}}],[\"不过根据操作系统的不同而有所不同\",{\"1\":{\"1105\":1}}],[\"不过所有浏览器都支持该对象\",{\"1\":{\"1098\":1}}],[\"不过返回的是一个对象\",{\"1\":{\"876\":1}}],[\"不过弱集合也拥有has\",{\"1\":{\"865\":1}}],[\"不过抓取元数据\",{\"1\":{\"748\":1}}],[\"不过模块可以暴露内部数据以便其他模块使用\",{\"1\":{\"232\":1}}],[\"不过这种方式其实还是不安全\",{\"1\":{\"2088\":1}}],[\"不过这个\",{\"1\":{\"2061\":1}}],[\"不过这个包指的是\",{\"1\":{\"94\":1}}],[\"不过这里如果是其他对象\",{\"1\":{\"995\":1}}],[\"不过这里涉及到了回调函数的知识\",{\"1\":{\"846\":1}}],[\"不过这些命令在后续用的比较少\",{\"1\":{\"178\":1}}],[\"不过\",{\"1\":{\"77\":1,\"746\":1,\"1161\":2,\"1196\":1,\"1224\":1}}],[\"不过不影响正常使用\",{\"1\":{\"62\":1}}],[\"不是同一个记录\",{\"1\":{\"2069\":1}}],[\"不是\",{\"1\":{\"1931\":1}}],[\"不是自闭合标签\",{\"1\":{\"1353\":1}}],[\"不是这些语言之一\",{\"1\":{\"1284\":1}}],[\"不是用来替代原生\",{\"1\":{\"1194\":1}}],[\"不是每个浏览器都支持这个新特性\",{\"1\":{\"1182\":1}}],[\"不是在运行时\",{\"1\":{\"1020\":1}}],[\"不是数字就是\",{\"1\":{\"970\":1}}],[\"不是能够参与计算的数值\",{\"1\":{\"794\":1}}],[\"不是一种可靠的防御方式\",{\"1\":{\"2088\":1}}],[\"不是一种持久化的本地存储\",{\"1\":{\"768\":1}}],[\"不是一门语言\",{\"1\":{\"215\":1}}],[\"不是必需的\",{\"1\":{\"711\":1}}],[\"不是不能改变其数据\",{\"1\":{\"381\":1}}],[\"不是接口\",{\"1\":{\"355\":1}}],[\"不是绝对的安全\",{\"1\":{\"345\":1}}],[\"不是所有的包都适合全局安装\",{\"1\":{\"73\":1}}],[\"不是修改的模块内部的data\",{\"1\":{\"29\":1}}],[\"不同时才触发响应\",{\"1\":{\"1990\":1}}],[\"不同\",{\"1\":{\"1985\":1}}],[\"不同状态之间的迁移\",{\"1\":{\"1974\":1}}],[\"不同则更新子节点\",{\"1\":{\"1789\":1}}],[\"不同任务队列有不同的优先级\",{\"1\":{\"1560\":1}}],[\"不同类型的任务可以分属于不同的队列\",{\"1\":{\"1560\":1}}],[\"不同类型的任务可以分属不同的队列\",{\"1\":{\"1181\":1}}],[\"不同浏览器可能还不一样\",{\"1\":{\"1436\":1}}],[\"不同浏览器中的\",{\"1\":{\"349\":1}}],[\"不同之处在于相同代码块并没有在基类中存在\",{\"1\":{\"1299\":1}}],[\"不同之处在于\",{\"1\":{\"1282\":1,\"1313\":1}}],[\"不同于大多数语言索引从\",{\"1\":{\"1265\":1}}],[\"不同作用域定义同名的变量不会发生冲突\",{\"1\":{\"1019\":1}}],[\"不同作用域下同名变量不会有冲突\",{\"1\":{\"1016\":1}}],[\"不同屏幕的像素大小不同\",{\"1\":{\"534\":1}}],[\"不同的任务可以属于不同的队列\",{\"1\":{\"1560\":1}}],[\"不同的浏览器\",{\"1\":{\"1087\":1}}],[\"不同的对象可以触发不同的拖放事件\",{\"1\":{\"764\":1}}],[\"不同的是可以优先找到词语所在的句子定性\",{\"1\":{\"1700\":1}}],[\"不同的是可以优先\",{\"1\":{\"1698\":1}}],[\"不同的是\",{\"1\":{\"1253\":1}}],[\"不同的是它会将符合条件的元素封装到一个数组中返回\",{\"1\":{\"1112\":1}}],[\"不同的是这个方法\",{\"1\":{\"891\":1}}],[\"不同的是indexof是从前往后找\",{\"1\":{\"890\":1}}],[\"不同的是普通对象是使用字符串作为属性名\",{\"1\":{\"838\":1}}],[\"不同的是while是先判断后执行\",{\"1\":{\"820\":1}}],[\"不同的是过渡需要在某个属性发生变化时才会触发\",{\"1\":{\"642\":1}}],[\"不同的是粘滞定位可以在元素到达某个位置时\",{\"1\":{\"572\":1}}],[\"不同的是cookie保存在\",{\"1\":{\"352\":1}}],[\"不同的\",{\"1\":{\"159\":1,\"564\":1,\"1156\":1}}],[\"不同版本的浏览器能识别的\",{\"1\":{\"146\":1}}],[\"不同系统环境\",{\"1\":{\"71\":1}}],[\"不同点在于远程的仓库可以被多人同时访问使用\",{\"1\":{\"12\":1}}],[\"不能重名\",{\"1\":{\"1804\":1}}],[\"不能是内置组件\",{\"1\":{\"1795\":1}}],[\"不能是一个\",{\"1\":{\"1486\":1}}],[\"不能回退\",{\"1\":{\"1572\":1}}],[\"不能灵活的控制请求是否走代理\",{\"1\":{\"1444\":1}}],[\"不能配置多个代理\",{\"1\":{\"1444\":1}}],[\"不能给\",{\"1\":{\"1396\":1}}],[\"不能省略\",{\"1\":{\"1311\":1}}],[\"不能访问模块\",{\"1\":{\"1309\":1}}],[\"不能访问模块内部数据\",{\"1\":{\"29\":1}}],[\"不能传变量参数\",{\"1\":{\"1299\":1}}],[\"不能用于声明新变量\",{\"1\":{\"1261\":1}}],[\"不能跨域加载\",{\"1\":{\"1182\":1}}],[\"不能写成下面这样\",{\"1\":{\"995\":1}}],[\"不能留到以后赋值\",{\"1\":{\"989\":1}}],[\"不能通过\",{\"1\":{\"980\":1}}],[\"不能够通过代码去修改的\",{\"1\":{\"2048\":1}}],[\"不能够再进行拆分\",{\"1\":{\"980\":1}}],[\"不能够添加相同的元素\",{\"1\":{\"861\":1}}],[\"不能接受负值作为参数\",{\"1\":{\"891\":1}}],[\"不能设置\",{\"1\":{\"877\":1}}],[\"不能在\",{\"1\":{\"824\":1}}],[\"不能为空\",{\"1\":{\"758\":1}}],[\"不能为负\",{\"1\":{\"545\":1}}],[\"不能直接fill\",{\"1\":{\"418\":1}}],[\"不能对参数修改\",{\"1\":{\"402\":1}}],[\"不能说的秘密\",{\"1\":{\"340\":1}}],[\"不能使用v\",{\"1\":{\"1795\":1}}],[\"不能使用动态绑定语法\",{\"1\":{\"1795\":1}}],[\"不能使用\",{\"1\":{\"237\":1}}],[\"不能使用中文\",{\"1\":{\"64\":1}}],[\"不能\",{\"1\":{\"205\":1,\"820\":1}}],[\"不安全\",{\"1\":{\"28\":1}}],[\"不就是最好的实现\",{\"1\":{\"24\":1}}],[\"不取消操作\",{\"1\":{\"8\":1}}],[\"这行代码会检查虚拟节点所关联的组件实例是否已经被卸载\",{\"1\":{\"2070\":1}}],[\"这行代码就是从匹配的路由记录中获取\",{\"1\":{\"2070\":1}}],[\"这行代码起到了两个作用\",{\"1\":{\"649\":1}}],[\"这表示这个事件已经被其他的事件处理器处理过\",{\"1\":{\"2065\":1}}],[\"这句代码表示从原生\",{\"1\":{\"2058\":1}}],[\"这么几个成员\",{\"1\":{\"2057\":1}}],[\"这边都进行一个统一处理\",{\"1\":{\"2054\":1}}],[\"这边首先创建了一个对象\",{\"1\":{\"2047\":1}}],[\"这包括了当前页面以及之前访问过的页面的记录\",{\"1\":{\"2048\":1}}],[\"这导致无法对任务去重\",{\"1\":{\"1954\":1}}],[\"这对于\",{\"1\":{\"1932\":1}}],[\"这对使用\",{\"1\":{\"1267\":1}}],[\"这显然是不合理的\",{\"1\":{\"1929\":1}}],[\"这组\",{\"1\":{\"1879\":1}}],[\"这说明我们\",{\"1\":{\"1902\":1}}],[\"这说明\",{\"1\":{\"1802\":1}}],[\"这说明正则表达式在\",{\"1\":{\"922\":1}}],[\"这套规范最早诞生于前端社区\",{\"1\":{\"1776\":1}}],[\"这部分的选择主要基于两个方面\",{\"1\":{\"1872\":1}}],[\"这部分主要的作用是为了引出作者的观点\",{\"1\":{\"1691\":1}}],[\"这部分主要的作用是从两方面说明观点的正确性\",{\"1\":{\"1690\":1}}],[\"这部分主要的作用是范围性的总结\",{\"1\":{\"1689\":1}}],[\"这部分主要的作用是增加观点的可信度\",{\"1\":{\"1688\":1}}],[\"这部分主要的作用是确定讨论的\",{\"1\":{\"1687\":1}}],[\"这部分内容涉及到大量\",{\"1\":{\"1193\":1}}],[\"这将更新模型的参数\",{\"1\":{\"1673\":1}}],[\"这在处理大量数据时\",{\"1\":{\"1666\":1}}],[\"这在有很多形参的时候显得非常有用\",{\"1\":{\"833\":1}}],[\"这段时间内如果有数据立刻响应请求\",{\"1\":{\"1646\":1}}],[\"这段代码是获取一个回调函数的数组\",{\"1\":{\"2075\":1}}],[\"这段代码所做的事情就是根据当前路由和目标路由的差异\",{\"1\":{\"2073\":1}}],[\"这段代码的主要目的就是处理不同类型的\",{\"1\":{\"2070\":1}}],[\"这段代码的目的就是为了在进入新的路由之前\",{\"1\":{\"2069\":1}}],[\"这段代码的作用是为\",{\"1\":{\"2065\":1}}],[\"这段代码的意思\",{\"1\":{\"71\":1}}],[\"这段代码只会在第一次初始化的时候执行\",{\"1\":{\"2047\":1}}],[\"这段代码定义了一个\",{\"1\":{\"1663\":2}}],[\"这段代码没有被\",{\"1\":{\"1298\":1}}],[\"这段代码在循环时并没有进行\",{\"1\":{\"1239\":1}}],[\"这段代码实现了将\",{\"1\":{\"1239\":1}}],[\"这段代码会请求权限\",{\"1\":{\"1105\":1}}],[\"这段代码会将\",{\"1\":{\"770\":1}}],[\"这项技术在\",{\"1\":{\"1572\":1}}],[\"这不仅有学习成本\",{\"1\":{\"1519\":1}}],[\"这不是一个实时集合\",{\"1\":{\"1112\":1}}],[\"这通常与基于类的心智模型更为一致\",{\"1\":{\"1485\":1}}],[\"这通常是屏幕角落的一个弹出消息\",{\"1\":{\"1105\":1}}],[\"这用来表示是在导入纯\",{\"1\":{\"1315\":1}}],[\"这与旧的\",{\"1\":{\"1302\":1}}],[\"这意味着\",{\"1\":{\"1666\":1,\"1930\":1,\"1935\":1}}],[\"这意味着父组件对子组件的每一个属性和方法都有完全的访问权\",{\"1\":{\"1499\":1}}],[\"这意味着列表值的内容永远不会改变\",{\"1\":{\"1272\":1}}],[\"这意味着如果你尝试在侦听器回调中访问所属组件的\",{\"1\":{\"1498\":1}}],[\"这意味着如果更改其值\",{\"1\":{\"1259\":1}}],[\"这意味着如果使用一个变量然后更改其值\",{\"1\":{\"1259\":1}}],[\"这意味着我们可以将函数的调用书写到函数的声明之前\",{\"1\":{\"940\":1}}],[\"这类\",{\"1\":{\"1921\":1}}],[\"这类拥有\",{\"1\":{\"1232\":1}}],[\"这类的样式是不能做动画的\",{\"1\":{\"1224\":1}}],[\"这类服务的特点是不需要太强的服务器运算能力\",{\"1\":{\"218\":1}}],[\"这几个方法都可以实现事件处理\",{\"1\":{\"1216\":1}}],[\"这几个事件属性看似类似\",{\"1\":{\"1153\":1}}],[\"这节课咱们来看看\",{\"1\":{\"1205\":1}}],[\"这章我们将来学习什么是\",{\"1\":{\"1193\":1}}],[\"这常成为对事件冒泡不熟悉程序员的棘手问题\",{\"1\":{\"1155\":1}}],[\"这必然增大程序开销\",{\"1\":{\"1155\":1}}],[\"这其实是一个临时变量\",{\"1\":{\"2068\":1}}],[\"这其实就是后面我们会介绍到的异步\",{\"1\":{\"1137\":1}}],[\"这其实也是因为历史原因\",{\"1\":{\"980\":1}}],[\"这其实也是最早使用var来声明变量所遗留下来的一个问题\",{\"1\":{\"786\":1}}],[\"这两句代码就是通过\",{\"1\":{\"2065\":1}}],[\"这两句非常简单\",{\"1\":{\"2047\":1}}],[\"这两种的逻辑相同都是通过addeventlistener绑定给真实元素的\",{\"1\":{\"1368\":1}}],[\"这两种事件接口皆非标准\",{\"1\":{\"1153\":1}}],[\"这两组属性都是表示窗口相对于屏幕左边和上边的位置\",{\"1\":{\"1087\":1}}],[\"这两个对象分别会被合并到\",{\"1\":{\"2055\":1}}],[\"这两个问题可以合并为一个问题\",{\"1\":{\"1537\":1}}],[\"这两个属性在没有事件委托的情况下是没有区别的\",{\"1\":{\"1219\":1}}],[\"这两个属性\",{\"1\":{\"1112\":1}}],[\"这两个阶段所做的事并不一样\",{\"1\":{\"1020\":1}}],[\"这两个值\",{\"1\":{\"2061\":1}}],[\"这两个值都表示\",{\"1\":{\"980\":1}}],[\"这两个值与数字值不是一回事\",{\"1\":{\"796\":1}}],[\"这两个方法是会随着返回的对象暴露出去的\",{\"1\":{\"2058\":1}}],[\"这两个方法分别会返回一个对象\",{\"1\":{\"2055\":1}}],[\"这两个方法的效果都是一样的\",{\"1\":{\"1200\":1}}],[\"这两个方法效果看上去是差不多的\",{\"1\":{\"1094\":1}}],[\"这两个方法也可以算是一组方法\",{\"1\":{\"1088\":1}}],[\"这两个方法\",{\"1\":{\"1088\":1,\"1929\":1,\"2047\":1}}],[\"这两个方法都接受两个参数\",{\"1\":{\"946\":1}}],[\"这两个方法都接收两个参数\",{\"1\":{\"856\":1}}],[\"这两个方法很简单\",{\"1\":{\"881\":1}}],[\"这两个方法进行查找时使用的是\",{\"1\":{\"856\":1}}],[\"这两个语句功能类似\",{\"1\":{\"820\":1}}],[\"这两个参数用来控制\",{\"1\":{\"722\":1}}],[\"这两个特点\",{\"1\":{\"218\":1}}],[\"这条链向上查找\",{\"1\":{\"1009\":1}}],[\"这条语句表示排除\",{\"1\":{\"150\":1}}],[\"这属于语法错误\",{\"1\":{\"958\":1}}],[\"这三行代码是使用到了\",{\"1\":{\"2047\":1}}],[\"这三个函数中的this均指向window\",{\"1\":{\"1407\":1}}],[\"这三个方法都只返回其字面量形式\",{\"1\":{\"925\":1}}],[\"这三种样式都可以用来指定四个方向的边框\",{\"1\":{\"544\":1}}],[\"这给它的使用带来了很大的限制\",{\"1\":{\"867\":1}}],[\"这使得在父组件和子组件之间创建紧密耦合的实现细节变得很容易\",{\"1\":{\"1499\":1}}],[\"这使得嵌套的\",{\"1\":{\"1314\":1}}],[\"这使得很难预测哪些样式将被继承\",{\"1\":{\"1313\":1}}],[\"这使得弱集合看上去像是空的\",{\"1\":{\"865\":1}}],[\"这使得访问包装类的属性等\",{\"1\":{\"405\":1}}],[\"这也就是\",{\"1\":{\"2042\":1}}],[\"这也就是我们为什么可以使用this\",{\"1\":{\"1804\":1}}],[\"这也很正常\",{\"1\":{\"1158\":1}}],[\"这也是为什么我们在写模板的时候可以使用这两个标签\",{\"1\":{\"2026\":1}}],[\"这也是为什么在外面调用这个匿名函数时\",{\"1\":{\"1023\":1}}],[\"这也是\",{\"1\":{\"1722\":1}}],[\"这也是编码的一个技巧\",{\"1\":{\"1238\":1}}],[\"这也是面试时经常会被问到的一个问题\",{\"1\":{\"980\":1}}],[\"这也是一直以来被使用得最多的方式\",{\"1\":{\"846\":1}}],[\"这也正是用typeof操作符检测\",{\"1\":{\"797\":1}}],[\"这看起来不太可能\",{\"1\":{\"835\":1}}],[\"这可以看作是增强版的字符串\",{\"1\":{\"790\":1}}],[\"这可能是因为下载已完成或因为其他原因暂停\",{\"1\":{\"752\":1}}],[\"这可能会导致\",{\"1\":{\"142\":1}}],[\"这就为我们通过这种方式来实现单页应用创建了良好的条件\",{\"1\":{\"2050\":1}}],[\"这就确保了无论是\",{\"1\":{\"2035\":1}}],[\"这就要求父节点的转换操作必须等待其所有子节点全部转换完毕后再执行\",{\"1\":{\"1977\":1}}],[\"这就催生了\",{\"1\":{\"1912\":1}}],[\"这就让proxy对象可以方便地调用对应的reflect方法\",{\"1\":{\"1901\":1}}],[\"这就导致了服务器无法\",{\"1\":{\"1644\":1}}],[\"这就形成了一个分层结构\",{\"1\":{\"1621\":1}}],[\"这就会导致身份信息丢失的问题\",{\"1\":{\"1593\":1}}],[\"这就回到了上一节\",{\"1\":{\"1537\":1}}],[\"这就需要为模块成员取更长的名字以免命名冲突\",{\"1\":{\"1319\":1}}],[\"这就需要通过调用\",{\"1\":{\"764\":1}}],[\"这就意味着通过选择器来获取节点时\",{\"1\":{\"1234\":1}}],[\"这就相当于破坏了之前的\",{\"1\":{\"1232\":1}}],[\"这就说明了多个动画会依次排队执行的情况\",{\"1\":{\"1224\":1}}],[\"这就起到了将\",{\"1\":{\"995\":1}}],[\"这就是深度的作用\",{\"1\":{\"2068\":1}}],[\"这就是为什么不推荐使用\",{\"1\":{\"1612\":1}}],[\"这就是transform效率高的本质原因\",{\"1\":{\"1526\":1}}],[\"这就是\",{\"1\":{\"1104\":1,\"1194\":1,\"1526\":2,\"1789\":1}}],[\"这就是复杂值有时被称为引用值的原因\",{\"1\":{\"984\":1}}],[\"这就是负载均衡的优势\",{\"1\":{\"508\":1}}],[\"这就是session\",{\"1\":{\"352\":1}}],[\"这就是现代模块实现的基石\",{\"1\":{\"30\":1}}],[\"这非常简单\",{\"1\":{\"702\":1}}],[\"这块区域由某个元素创建\",{\"1\":{\"576\":1}}],[\"这七个值中有三个值可以设置为\",{\"1\":{\"554\":1}}],[\"这被称为外边距折叠\",{\"1\":{\"552\":1}}],[\"这\",{\"1\":{\"384\":1,\"765\":1,\"903\":1,\"910\":1,\"925\":3,\"1105\":1,\"1207\":1,\"1747\":1,\"1804\":1}}],[\"这时我们使用容器元素的\",{\"1\":{\"1962\":1}}],[\"这时我们就需要一个远程的\",{\"1\":{\"12\":1}}],[\"这时便会用到解构赋值\",{\"1\":{\"1937\":1}}],[\"这时存在一个问题就是读取\",{\"1\":{\"1896\":1}}],[\"这时垃圾回收器会完成回收任务\",{\"1\":{\"1889\":1}}],[\"这时优化可能会停止\",{\"1\":{\"1658\":1}}],[\"这时就需要使用\",{\"1\":{\"1661\":1}}],[\"这时就需要进行反转义\",{\"1\":{\"384\":1}}],[\"这时就轮到克隆节点登场了\",{\"1\":{\"1123\":1}}],[\"这时<ul>下面的第一个子元素就变为了第一个<li>元素\",{\"1\":{\"1112\":1}}],[\"这时候浏览器可能就会吃不消而造成卡顿现象\",{\"1\":{\"1034\":1}}],[\"这时如果直接把\",{\"1\":{\"995\":1}}],[\"这时\",{\"1\":{\"991\":1}}],[\"这时虽然不存在函数提升\",{\"1\":{\"940\":1}}],[\"这时变量的值与一个普通的字符串无异\",{\"1\":{\"790\":1}}],[\"这时实际盒子的高度很小\",{\"1\":{\"582\":1}}],[\"这时高度的百分比设置无效\",{\"1\":{\"543\":1}}],[\"这一行首先需要确认如下几个条件\",{\"1\":{\"2069\":1}}],[\"这一行代码的效果是\",{\"1\":{\"2065\":1}}],[\"这一行被注释掉了\",{\"1\":{\"1325\":1}}],[\"这一段代码主要目的是为了获取一些路由信息\",{\"1\":{\"2070\":1}}],[\"这一段代码\",{\"1\":{\"2062\":1}}],[\"这一块代码就是在重写\",{\"1\":{\"2047\":1}}],[\"这一句其实就是将\",{\"1\":{\"2047\":1}}],[\"这一类方法有个共同特点就是不会改变原数据\",{\"1\":{\"1923\":1}}],[\"这一类的插件才能够实现\",{\"1\":{\"746\":1}}],[\"这一次使用的就是\",{\"1\":{\"2058\":1}}],[\"这一次请求\",{\"1\":{\"1648\":1}}],[\"这一次的记录非常重要\",{\"1\":{\"1534\":1}}],[\"这一次我们来给系统通知一个延迟\",{\"1\":{\"1105\":1}}],[\"这一步完成后\",{\"1\":{\"1526\":1}}],[\"这一点恰好与\",{\"1\":{\"1928\":1}}],[\"这一点需要特别注意\",{\"1\":{\"957\":1}}],[\"这一点同样与\",{\"1\":{\"868\":1}}],[\"这一小节我们就一起来看一下有关事件对象的相关知识\",{\"1\":{\"1151\":1}}],[\"这一小节\",{\"1\":{\"866\":1,\"1087\":1}}],[\"这一个个的小点就是像素\",{\"1\":{\"646\":1}}],[\"这一条也是为了能够先缩小查询的范围\",{\"1\":{\"1235\":1}}],[\"这一条\",{\"1\":{\"355\":1}}],[\"这一部分非模块化标准\",{\"1\":{\"47\":1}}],[\"这是全局前置守卫\",{\"1\":{\"2079\":1}}],[\"这是我们想要观察的数据源\",{\"1\":{\"2069\":1}}],[\"这是我的第一个函数\",{\"1\":{\"928\":1}}],[\"这是在引入\",{\"1\":{\"1658\":1}}],[\"这是在浏览器中处理事件最原始的方法\",{\"1\":{\"1143\":1}}],[\"这是小批量随机梯度下降的有利特性之一\",{\"1\":{\"1658\":1}}],[\"这是http1\",{\"1\":{\"1542\":1}}],[\"这是由于\",{\"1\":{\"1232\":1}}],[\"这是由于历史原因所遗留下来的问题\",{\"1\":{\"980\":1}}],[\"这是最常用的方法\",{\"1\":{\"1227\":1}}],[\"这是循环\",{\"1\":{\"1199\":1}}],[\"这是通过\",{\"1\":{\"1198\":1}}],[\"这是为了照顾其兼容性\",{\"1\":{\"1156\":1}}],[\"这是使用\",{\"1\":{\"1063\":1}}],[\"这是正常模式\",{\"1\":{\"957\":2}}],[\"这是严格模式\",{\"1\":{\"957\":3}}],[\"这是只是作为了解即可\",{\"1\":{\"876\":1}}],[\"这是一种存储键值对列表很方便的方法\",{\"1\":{\"866\":1}}],[\"这是一个可选参数\",{\"1\":{\"2069\":1}}],[\"这是一个布尔值\",{\"1\":{\"2064\":1}}],[\"这是一个非常常见的环境变量\",{\"1\":{\"2053\":1}}],[\"这是一个非常复杂的问题\",{\"1\":{\"1622\":1}}],[\"这是一个抽象类\",{\"1\":{\"1655\":1}}],[\"这是一个测试\",{\"1\":{\"1112\":1}}],[\"这是一个实时集合\",{\"1\":{\"1112\":1}}],[\"这是一个名字\",{\"1\":{\"828\":3}}],[\"这是一个全局变量\",{\"1\":{\"785\":1}}],[\"这是一个较长的\",{\"1\":{\"777\":1}}],[\"这是一个单行注释\",{\"1\":{\"777\":1}}],[\"这是很重要的一个特性\",{\"1\":{\"861\":1}}],[\"这是这种数据结构最大的一个特点\",{\"1\":{\"859\":1}}],[\"这是程序里面使用最为广泛的一种类型\",{\"1\":{\"789\":1}}],[\"这是两者之间的重要区别\",{\"1\":{\"768\":1}}],[\"这是拖放这个行为发生时的两种状态\",{\"1\":{\"762\":1}}],[\"这是\",{\"1\":{\"692\":1,\"785\":1,\"1209\":1,\"1212\":1,\"1655\":2,\"2044\":1,\"2076\":1}}],[\"这是因为在很多浏览器中\",{\"1\":{\"2065\":1}}],[\"这是因为在实例化\",{\"1\":{\"2030\":1}}],[\"这是因为在只包含运行时版本中\",{\"1\":{\"1805\":1}}],[\"这是因为它运行在浏览器的渲染主线程中\",{\"1\":{\"1558\":1}}],[\"这是因为下载和解析\",{\"1\":{\"1526\":1}}],[\"这是因为通过\",{\"1\":{\"1234\":1}}],[\"这是因为使用var来声明变量会伴随着一些问题\",{\"1\":{\"781\":1}}],[\"这是因为\",{\"1\":{\"224\":1,\"1196\":1,\"1526\":1,\"2065\":1}}],[\"这是module\",{\"1\":{\"124\":3}}],[\"这篇文章中点出了\",{\"1\":{\"218\":1}}],[\"这步是可以修改输出内容的最后机会\",{\"1\":{\"154\":1}}],[\"这个回调就是用户传递给\",{\"1\":{\"2075\":1}}],[\"这个回调函数会在当前副作用函数过期时执行\",{\"1\":{\"1897\":1}}],[\"这个队列里面会存放要处理的守卫回调\",{\"1\":{\"2072\":1}}],[\"这个虚拟\",{\"1\":{\"2070\":1}}],[\"这个组件实例可以通过\",{\"1\":{\"2070\":1}}],[\"这个组件是如何使用的\",{\"1\":{\"2062\":1}}],[\"这个选项表示\",{\"1\":{\"2069\":1}}],[\"这个也是激活状态下所对应的样式类\",{\"1\":{\"2064\":1}}],[\"这个和我们之前解析的\",{\"1\":{\"2061\":1}}],[\"这个暂停点表示在当前的这个路由位置的时候\",{\"1\":{\"2061\":1}}],[\"这个参数表示我们希望跳转到的新的路由\",{\"1\":{\"2058\":1}}],[\"这个参数是导航守卫队列\",{\"1\":{\"2076\":1}}],[\"这个参数是\",{\"1\":{\"1161\":1}}],[\"这个参数是一种\",{\"1\":{\"1161\":1}}],[\"这个条目表示的路由是\",{\"1\":{\"2058\":1}}],[\"这个字符串始终是去除了\",{\"1\":{\"2058\":1}}],[\"这个字符串使用和\",{\"1\":{\"730\":1}}],[\"这个可以说是整个\",{\"1\":{\"2055\":1}}],[\"这个状态对象的值可以由\",{\"1\":{\"2048\":1}}],[\"这个常量对象\",{\"1\":{\"2047\":1}}],[\"这个常量的类型是一致的\",{\"1\":{\"2047\":1}}],[\"这个类型也是一个函数\",{\"1\":{\"2061\":1}}],[\"这个类型\",{\"1\":{\"2047\":1}}],[\"这个类型的值只有两个\",{\"1\":{\"796\":1}}],[\"这个核心方法的整体结构搞清楚\",{\"1\":{\"2041\":1}}],[\"这个核心方法的参数有很多\",{\"1\":{\"1198\":1}}],[\"这个对\",{\"1\":{\"2028\":1}}],[\"这个对象上面的属性\",{\"1\":{\"2059\":1}}],[\"这个对象的类型为\",{\"1\":{\"2058\":1}}],[\"这个对象里面会包含部分方法内部所定义的方法\",{\"1\":{\"2042\":1}}],[\"这个对象有\",{\"1\":{\"1161\":1}}],[\"这个对象有点特别\",{\"1\":{\"1092\":1}}],[\"这个对象是事件对象的属性\",{\"1\":{\"1161\":1}}],[\"这个对象是\",{\"1\":{\"1161\":1}}],[\"这个对象是该构造函数实例化出来的对象的原型对象\",{\"1\":{\"1063\":1}}],[\"这个对象中包含引用的变量属性\",{\"1\":{\"1023\":1}}],[\"这个对象\",{\"1\":{\"834\":1,\"996\":1}}],[\"这个对象添加了一个新的属性叫做\",{\"1\":{\"2047\":1}}],[\"这个对象添加了一个\",{\"1\":{\"828\":1}}],[\"这个对象添加相应的属性\",{\"1\":{\"827\":1}}],[\"这个对象存储为以\",{\"1\":{\"770\":1}}],[\"这个内部槽\",{\"1\":{\"1927\":1}}],[\"这个抽象方法\",{\"1\":{\"1906\":1}}],[\"这个示例中\",{\"1\":{\"1662\":1}}],[\"这个操作只会在第一次挂载\",{\"1\":{\"2047\":1}}],[\"这个操作明显不与任何具体的键进行绑定\",{\"1\":{\"1906\":1}}],[\"这个操作的目的是对不同的输入位置赋予不同的权重\",{\"1\":{\"1678\":1}}],[\"这个操作在神经网络中经常用到\",{\"1\":{\"1661\":1}}],[\"这个操作也会比较麻烦\",{\"1\":{\"1208\":1}}],[\"这个问题可以使用token令牌解决\",{\"1\":{\"1593\":1}}],[\"这个问题我们必须要进行处理\",{\"1\":{\"562\":1}}],[\"这个问题我们称之为\",{\"1\":{\"562\":1}}],[\"这个约定深刻的影响着后续的前后端各种应用\",{\"1\":{\"1569\":1}}],[\"这个美好的缓存愿望\",{\"1\":{\"1534\":1}}],[\"这个资源的上一次修改时间是格林威治时间2020\",{\"1\":{\"1534\":1,\"1537\":1}}],[\"这个资源的编号是w\",{\"1\":{\"1534\":1,\"1537\":1}}],[\"这个资源可能是一张图片\",{\"1\":{\"671\":1}}],[\"这个响应头表达了下面的信息\",{\"1\":{\"1534\":1}}],[\"这个全局\",{\"1\":{\"1519\":1}}],[\"这个文件中可以使用\",{\"1\":{\"1309\":1}}],[\"这个文件夹\",{\"1\":{\"150\":1}}],[\"这个注释任何情况下都会出现在css的编译结果中\",{\"1\":{\"1255\":1}}],[\"这个注释会在除压缩模式外的css的编译结果中出现\",{\"1\":{\"1255\":1}}],[\"这个注释不会在css的编译结果中出现\",{\"1\":{\"1255\":1}}],[\"这个指定内容是用字符串构成\",{\"1\":{\"1208\":1}}],[\"这个视口是指当前页面的可见区域\",{\"1\":{\"1207\":1}}],[\"这个还要注意一点\",{\"1\":{\"1204\":1}}],[\"这个工作量还是很恐怖的\",{\"1\":{\"1158\":1}}],[\"这个工具能够让开发者专心的在开发时态写代码\",{\"1\":{\"118\":1}}],[\"这个是超链接的默认行为\",{\"1\":{\"1121\":1}}],[\"这个就是\",{\"1\":{\"1084\":1}}],[\"这个新的函数是g\",{\"1\":{\"1039\":1}}],[\"这个这个问题的解决方案之一就是使用数组分块技术\",{\"1\":{\"1038\":1}}],[\"这个引用类型值的引用次数加\",{\"1\":{\"1031\":1}}],[\"这个引用类型值的引用次数就是\",{\"1\":{\"1031\":1}}],[\"这个引用指向堆区实际存在的数据\",{\"1\":{\"985\":1}}],[\"这个局部变量\",{\"1\":{\"1023\":1}}],[\"这个没有问题\",{\"1\":{\"995\":1}}],[\"这个函数是对外暴露的\",{\"1\":{\"2002\":1}}],[\"这个函数不会立即执行\",{\"1\":{\"1894\":1}}],[\"这个函数会赋值给user\",{\"1\":{\"1854\":1}}],[\"这个函数有一个必须的参数输出大小\",{\"1\":{\"1663\":1}}],[\"这个函数\",{\"1\":{\"1519\":1}}],[\"这个函数只要再接受一个参数\",{\"1\":{\"995\":1}}],[\"这个函数接收\",{\"1\":{\"883\":1}}],[\"这个地方一定要注意它和\",{\"1\":{\"993\":1}}],[\"这个阶乘函数的函数体\",{\"1\":{\"953\":2}}],[\"这个例子中\",{\"1\":{\"948\":1}}],[\"这个伪数组对象将包含调用函数时传递的所有的实际参数\",{\"1\":{\"932\":1}}],[\"这个我们在前面已经介绍过了\",{\"1\":{\"931\":1}}],[\"这个我们称之为对象的嵌套\",{\"1\":{\"831\":1}}],[\"这个元素就是括号里的表达式\",{\"1\":{\"910\":1}}],[\"这个变量所对应的类型就是\",{\"1\":{\"2061\":1}}],[\"这个变量就像是一个列表\",{\"1\":{\"1273\":1}}],[\"这个变量也可能会带来意料之外的匹配结果\",{\"1\":{\"923\":1}}],[\"这个变量由于没有设置默认值\",{\"1\":{\"832\":1}}],[\"这个变量的值就是\",{\"1\":{\"798\":1}}],[\"这个值是和\",{\"1\":{\"2064\":1}}],[\"这个值来源于\",{\"1\":{\"2058\":1}}],[\"这个值对于浏览器而言没有什么意义\",{\"1\":{\"1539\":2}}],[\"这个值\",{\"1\":{\"832\":1}}],[\"这个for\",{\"1\":{\"830\":1}}],[\"这个数组是每次调用函数后的运行结果\",{\"1\":{\"945\":1}}],[\"这个数组里面的值分解给了\",{\"1\":{\"847\":1}}],[\"这个数值用于表示\",{\"1\":{\"795\":1}}],[\"这个数据源可以是一个字符串\",{\"1\":{\"2069\":1}}],[\"这个数据有着原始数据属性值的一份精确拷贝\",{\"1\":{\"469\":1}}],[\"这个数据应该只保存在站方\",{\"1\":{\"362\":1}}],[\"这个虽然没什么好说的\",{\"1\":{\"792\":1}}],[\"这个事件应该被处理\",{\"1\":{\"2065\":1}}],[\"这个事件对象上面会有一个\",{\"1\":{\"2061\":1}}],[\"这个事件对应\",{\"1\":{\"752\":1}}],[\"这个事件是在文档完全被卸载后触发\",{\"1\":{\"1150\":1}}],[\"这个事件一般绑定在\",{\"1\":{\"1150\":1}}],[\"这个事件监听器类似于一个通知\",{\"1\":{\"1137\":1}}],[\"这个事件触发的频率非常之高\",{\"1\":{\"1034\":1}}],[\"这个事件只在同一域下的任何窗口或者标签上触发\",{\"1\":{\"770\":1}}],[\"这个方法一看就知道是根据目标路由来做信息解析\",{\"1\":{\"2065\":1}}],[\"这个方法本身所做的事情也非常的简单\",{\"1\":{\"2061\":1}}],[\"这个方法内部的整体结构\",{\"1\":{\"2060\":1}}],[\"这个方法也就清晰\",{\"1\":{\"2058\":1}}],[\"这个方法可以用来加载其他子页面\",{\"1\":{\"1230\":1}}],[\"这个方法的作用是从\",{\"1\":{\"2061\":1}}],[\"这个方法的作用是向指定路径发送请求\",{\"1\":{\"1230\":1}}],[\"这个方法的作用是当\",{\"1\":{\"1215\":1}}],[\"这个方法能够构建一个\",{\"1\":{\"1198\":1}}],[\"这个方法接收一个\",{\"1\":{\"2057\":1,\"2061\":1}}],[\"这个方法接收\",{\"1\":{\"1145\":1,\"2050\":1}}],[\"这个方法返回一个\",{\"1\":{\"1102\":1}}],[\"这个方法是将添加进去的守卫回调删除\",{\"1\":{\"2043\":1}}],[\"这个方法是\",{\"1\":{\"1129\":1}}],[\"这个方法是替换当前窗口页面\",{\"1\":{\"1094\":1}}],[\"这个方法是用来获得渲染上下文和它的绘画功能\",{\"1\":{\"704\":1}}],[\"这个方法起作用的前提是\",{\"1\":{\"995\":1}}],[\"这个方法会暴露给外部\",{\"1\":{\"2061\":1}}],[\"这个方法会返回一个\",{\"1\":{\"1105\":1}}],[\"这个方法会返回一个数组\",{\"1\":{\"945\":1}}],[\"这个方法会通过绘制一条从当前点到开始点的直线来闭合图形\",{\"1\":{\"711\":1}}],[\"这个方法即使不指定全局匹配\",{\"1\":{\"894\":1}}],[\"这个方法\",{\"1\":{\"876\":1,\"1140\":1}}],[\"这个方法非常的厉害\",{\"1\":{\"854\":1}}],[\"这个方法多了\",{\"1\":{\"722\":1}}],[\"这个方法只接受一个参数\",{\"1\":{\"720\":1}}],[\"这个属性表示当前历史记录条目的\",{\"1\":{\"2048\":1}}],[\"这个属性是一个只读属性\",{\"1\":{\"2048\":1}}],[\"这个属性是一个原生对象\",{\"1\":{\"769\":1}}],[\"这个属性火狐中不支持\",{\"1\":{\"1153\":1}}],[\"这个属性有一个方法getcurrentposition\",{\"1\":{\"1102\":1}}],[\"这个属性对应一个函数对象\",{\"1\":{\"932\":1}}],[\"这个属性\",{\"1\":{\"769\":1,\"829\":1}}],[\"这个属性影响到\",{\"1\":{\"742\":1}}],[\"这个属性设置当前绘线的粗细\",{\"1\":{\"708\":1}}],[\"这个属性用来指示最优\",{\"1\":{\"696\":1}}],[\"这个头信息将唯一确定某个资源的本质是什么\",{\"1\":{\"693\":1}}],[\"这个单位永远相当于视口宽度进行计算\",{\"1\":{\"650\":1}}],[\"这个像素值就是根据最佳像素比进行设置的\",{\"1\":{\"649\":1}}],[\"这个默认\",{\"1\":{\"648\":1}}],[\"这个样式可以同时解决高度塌陷和外边距重叠的问题\",{\"1\":{\"566\":1}}],[\"这个计算过程\",{\"1\":{\"528\":1}}],[\"这个称为分区\",{\"1\":{\"415\":1}}],[\"这个过程首先是子组件通过\",{\"1\":{\"1358\":1}}],[\"这个过程一般是一个post请求\",{\"1\":{\"368\":1}}],[\"这个过期时间必须要大于签发时间\",{\"1\":{\"366\":1}}],[\"这个部分需要base64加密后的header和base64加密后的payload使用\",{\"1\":{\"367\":1}}],[\"这个签证信息由三部分组成\",{\"1\":{\"367\":1}}],[\"这个名字像是特指飞机上承载的货品\",{\"1\":{\"366\":1}}],[\"这个时候也存在一个问题\",{\"1\":{\"1158\":1}}],[\"这个时候就可以使用arguments对象的callee属性来降低这种关联\",{\"1\":{\"953\":1}}],[\"这个时候就需要重新打包\",{\"1\":{\"129\":1}}],[\"这个时候我们就可以利用事件代理来帮助我们解决这个问题\",{\"1\":{\"1158\":1}}],[\"这个时候我们就可以使用\",{\"1\":{\"1098\":1}}],[\"这个时候我们就可以使用反向引用\",{\"1\":{\"912\":1}}],[\"这个时候我们可以使用弱集合来避免这种状况\",{\"1\":{\"865\":1}}],[\"这个时候形式有点类似于date\",{\"1\":{\"876\":1}}],[\"这个时候可能有人会问了\",{\"1\":{\"830\":1}}],[\"这个时候可能会因为不知道原来的对象里面包含哪些属性名\",{\"1\":{\"828\":1}}],[\"这个时候中括号就要比点要灵活许多\",{\"1\":{\"828\":1}}],[\"这个时候\",{\"1\":{\"353\":1,\"1120\":1}}],[\"这个请求头的名字也叫\",{\"1\":{\"346\":1}}],[\"这个请求是属于浏览器自动发送的请求\",{\"1\":{\"282\":1}}],[\"这个\",{\"1\":{\"345\":1,\"1102\":1,\"1125\":1,\"1198\":1,\"1199\":1,\"1232\":1,\"2040\":1,\"2044\":1,\"2047\":1,\"2058\":2,\"2061\":1,\"2062\":1,\"2065\":1,\"2070\":1,\"2072\":1}}],[\"这个令牌用来表明你的身份\",{\"1\":{\"343\":1}}],[\"这个协议详细规定了\",{\"1\":{\"266\":1}}],[\"这个原因和前面我们遇到的一样\",{\"1\":{\"148\":1}}],[\"这个插件时\",{\"1\":{\"129\":1}}],[\"这会将第一次网络请求的结果抛弃\",{\"1\":{\"1987\":1}}],[\"这会将此watcher赋值给vm\",{\"1\":{\"1806\":1}}],[\"这会在副作用函数与响应式数据之间建立响应联系\",{\"1\":{\"1902\":1}}],[\"这会让服务器长时间的占用资源却没什么实际的事情可做\",{\"1\":{\"1646\":1}}],[\"这会增加编译时间并产生臃肿的代码输出\",{\"1\":{\"1313\":1}}],[\"这会导致child\",{\"1\":{\"1910\":1}}],[\"这会导致\",{\"1\":{\"1239\":1,\"1910\":1}}],[\"这会产生一些问题\",{\"1\":{\"995\":1}}],[\"这会重写父表单的\",{\"1\":{\"761\":1}}],[\"这会影响最终生成文件的内容格式\",{\"1\":{\"124\":1}}],[\"这会极大的降低运行性能\",{\"1\":{\"37\":1}}],[\"这里接收一个参数\",{\"1\":{\"2076\":1}}],[\"这里调用了导航守卫\",{\"1\":{\"2075\":1}}],[\"这里调用了一个\",{\"1\":{\"2058\":1}}],[\"这里对应了一个方法\",{\"1\":{\"2074\":1}}],[\"这里取最大值\",{\"1\":{\"2073\":1}}],[\"这里渲染的组件肯定是相同的\",{\"1\":{\"2071\":1}}],[\"这里前面三个值是对应的路由信息\",{\"1\":{\"2070\":1}}],[\"这里表示当监视的数据发生变化的时候\",{\"1\":{\"2069\":1}}],[\"这里还提供了\",{\"1\":{\"2068\":1}}],[\"这里还要介绍两个静态方法\",{\"1\":{\"875\":1}}],[\"这里又是一个计算属性\",{\"1\":{\"2068\":1}}],[\"这里获取到的就是之前在\",{\"1\":{\"2068\":1}}],[\"这里获取的坐标值有好几组\",{\"1\":{\"1153\":1}}],[\"这里是在去\",{\"1\":{\"2073\":1}}],[\"这里是在计算具体要挂上去的样式类\",{\"1\":{\"2066\":1}}],[\"这里是jwt\",{\"1\":{\"365\":1}}],[\"这里定义了一个\",{\"1\":{\"2070\":1}}],[\"这里定义了一个名为\",{\"1\":{\"2068\":1}}],[\"这里定义了一个变量\",{\"1\":{\"2047\":1,\"2068\":1}}],[\"这里定义了\",{\"1\":{\"2061\":1}}],[\"这里默认传递了\",{\"1\":{\"2058\":1}}],[\"这里实际上也是用到了闭包\",{\"1\":{\"2057\":1}}],[\"这里添加了两个属性\",{\"1\":{\"2055\":1}}],[\"这里重写了\",{\"1\":{\"2047\":1}}],[\"这里针对路由对象\",{\"1\":{\"2047\":1}}],[\"这里和\",{\"1\":{\"2047\":1}}],[\"这里解释一下为什么要做这么一个判断\",{\"1\":{\"2047\":1}}],[\"这里整个\",{\"1\":{\"2047\":1}}],[\"这里使用到了\",{\"1\":{\"2047\":1}}],[\"这里使用animate\",{\"1\":{\"1441\":1}}],[\"这里三个函数都用到了\",{\"1\":{\"2045\":1}}],[\"这里其实这三行是三个函数\",{\"1\":{\"2045\":1}}],[\"这里其实就用到了闭包\",{\"1\":{\"2042\":1}}],[\"这里不存在响应式\",{\"1\":{\"2044\":1}}],[\"这里不再需要\",{\"1\":{\"1928\":1}}],[\"这里不再赘述\",{\"1\":{\"1667\":1}}],[\"这里不再做一一演示\",{\"1\":{\"884\":1}}],[\"这里首先\",{\"1\":{\"2044\":1}}],[\"这里声明了一个名为\",{\"1\":{\"2072\":1}}],[\"这里声明了一个\",{\"1\":{\"2043\":1}}],[\"这里会调用render方法\",{\"1\":{\"1998\":1}}],[\"这里递归地调用了\",{\"1\":{\"1979\":1}}],[\"这里只是查看\",{\"1\":{\"1974\":1}}],[\"这里大体的思路是\",{\"1\":{\"1969\":1}}],[\"这里大家可以通过下面两段代码自行进行对比\",{\"1\":{\"1154\":1}}],[\"这里涉及核心的diff\",{\"1\":{\"1951\":1}}],[\"这里存在一个问题\",{\"1\":{\"1929\":1}}],[\"这里指代理对象\",{\"1\":{\"1927\":1}}],[\"这里指传入参数的数量大于等于函数的数量\",{\"1\":{\"463\":1}}],[\"这里同样没有使用\",{\"1\":{\"1902\":1}}],[\"这里判断了该标签是否为自闭合标签\",{\"1\":{\"1792\":1}}],[\"这里仅讲解面试中会问到的握手协议\",{\"1\":{\"1648\":1}}],[\"这里推荐一个非常直观的工具\",{\"1\":{\"1630\":1}}],[\"这里说的\",{\"1\":{\"1249\":1}}],[\"这里相同是指引用的同一个函数\",{\"1\":{\"1216\":1}}],[\"这里由于我滚动了页面\",{\"1\":{\"1153\":1}}],[\"这里分别做一些解释\",{\"1\":{\"1153\":1}}],[\"这里要从组件提取\",{\"1\":{\"2080\":1}}],[\"这里要注意的是\",{\"1\":{\"1929\":1}}],[\"这里要重点提一下事件处理函数里面的this值\",{\"1\":{\"1152\":1}}],[\"这里要介绍的回调\",{\"1\":{\"943\":1}}],[\"这里要介绍到的是\",{\"1\":{\"781\":1}}],[\"这里已经将\",{\"1\":{\"1123\":1}}],[\"这里问题就出现了\",{\"1\":{\"1028\":1}}],[\"这里将\",{\"1\":{\"992\":1}}],[\"这里主要讲讲其中比较常用的一些方法\",{\"1\":{\"1203\":1}}],[\"这里主要讲讲其中比较关键的一些方法\",{\"1\":{\"1197\":1}}],[\"这里主要讲一下为什么第三个是\",{\"1\":{\"992\":1}}],[\"这里主要介绍一下href属性\",{\"1\":{\"1093\":1}}],[\"这里主要就是要介绍length这个属性\",{\"1\":{\"851\":1}}],[\"这里注意\",{\"1\":{\"980\":1}}],[\"这里面包含了一些细节\",{\"1\":{\"1626\":1}}],[\"这里面的文档树加载完不代表全部文件加载完\",{\"1\":{\"1200\":1}}],[\"这里面\",{\"1\":{\"980\":1}}],[\"这里面用得稍微多一点的就是\",{\"1\":{\"879\":1}}],[\"这里就应该以\",{\"1\":{\"2073\":1}}],[\"这里就是根据前面计算出来的深度\",{\"1\":{\"2068\":1}}],[\"这里就是在使用\",{\"1\":{\"2047\":1}}],[\"这里就会进入到\",{\"1\":{\"2068\":1}}],[\"这里就清空暂停状态\",{\"1\":{\"2061\":1}}],[\"这里就涉及到一个缓存策略的问题\",{\"1\":{\"1533\":1}}],[\"这里就和函数名紧紧的关联了起来\",{\"1\":{\"953\":2}}],[\"这里就不再做演示了\",{\"1\":{\"946\":1}}],[\"这里书写正则表达式的时候必须要写上模式修正符g\",{\"1\":{\"911\":1}}],[\"这里所观察的数据就是\",{\"1\":{\"2069\":1}}],[\"这里所介绍的for\",{\"1\":{\"846\":1}}],[\"这里所谓的一等公民\",{\"1\":{\"943\":1}}],[\"这里所谓的\",{\"1\":{\"224\":1}}],[\"这里先放一放\",{\"1\":{\"2055\":1}}],[\"这里先介绍几种常见的数组遍历方式\",{\"1\":{\"846\":1}}],[\"这里先不必太纠结\",{\"1\":{\"73\":1}}],[\"这里来看一下对象的解构\",{\"1\":{\"832\":1}}],[\"这里介绍两种方式\",{\"1\":{\"830\":1}}],[\"这里两个\",{\"1\":{\"828\":1}}],[\"这里便产生的属性冲突\",{\"1\":{\"828\":1}}],[\"这里有一点需要注意\",{\"1\":{\"1803\":1}}],[\"这里有一个小技巧\",{\"1\":{\"822\":1}}],[\"这里有\",{\"1\":{\"1209\":1}}],[\"这里有必要说一下获取事件对象的方式\",{\"1\":{\"1151\":1}}],[\"这里有个小问题就是\",{\"1\":{\"87\":1}}],[\"这里需要注意一个问题\",{\"1\":{\"789\":1}}],[\"这里\",{\"1\":{\"769\":1,\"830\":1,\"847\":1,\"848\":1,\"943\":1,\"1105\":1,\"2062\":1,\"2063\":1,\"2068\":1}}],[\"这里可以是一张图片\",{\"1\":{\"763\":1}}],[\"这里我们重点是看\",{\"1\":{\"2067\":1}}],[\"这里我们只关注最终返回的值\",{\"1\":{\"2065\":1}}],[\"这里我们会传递一个\",{\"1\":{\"2062\":1}}],[\"这里我们首先回忆一下\",{\"1\":{\"2043\":1}}],[\"这里我们暂时不考虑模板存在多个根节点的情况\",{\"1\":{\"1978\":1}}],[\"这里我们要反序执行\",{\"1\":{\"1977\":1}}],[\"这里我们通过原始数据\",{\"1\":{\"1929\":2}}],[\"这里我们通过访问window\",{\"1\":{\"1086\":1}}],[\"这里我们没有使用\",{\"1\":{\"1902\":1}}],[\"这里我们来看一个示例如下\",{\"1\":{\"1155\":1}}],[\"这里我们来看一个具体的例子\",{\"1\":{\"1124\":1}}],[\"这里我们演示一个\",{\"1\":{\"1149\":1}}],[\"这里我们为\",{\"1\":{\"1145\":1}}],[\"这里我们就可以通过\",{\"1\":{\"2068\":1}}],[\"这里我们就给\",{\"1\":{\"1137\":1}}],[\"这里我们就演示一个点击事件的效果\",{\"1\":{\"1105\":1}}],[\"这里我们一起来复习一下\",{\"1\":{\"944\":1}}],[\"这里我们使用了正则表达式的另外一个常用的实例方法exec\",{\"1\":{\"907\":1}}],[\"这里我们删除了对数组的引用\",{\"1\":{\"865\":1}}],[\"这里我们可以来看一下\",{\"1\":{\"2075\":1}}],[\"这里我们可以来证明这一点\",{\"1\":{\"939\":1}}],[\"这里我们可以稍微研究一下类型的值\",{\"1\":{\"2058\":1}}],[\"这里我们可以将回调函数的参数打印出来看一下\",{\"1\":{\"946\":1}}],[\"这里我们可以将属性名称之为键\",{\"1\":{\"827\":1}}],[\"这里我们可以用它来快速的展开一个数组\",{\"1\":{\"849\":1}}],[\"这里我们先来看一下数组的解构\",{\"1\":{\"847\":1}}],[\"这里我们的\",{\"1\":{\"835\":1}}],[\"这里我们调用了\",{\"1\":{\"834\":1}}],[\"这里我们介绍一个全局作用域\",{\"1\":{\"784\":1}}],[\"这里我们介绍一下\",{\"1\":{\"239\":1}}],[\"这里我们需要打开服务器进行演示\",{\"1\":{\"770\":1}}],[\"这里我们需要安装\",{\"1\":{\"149\":1}}],[\"这里我们设置的数据类型为\",{\"1\":{\"765\":1}}],[\"这里的感叹号是\",{\"1\":{\"2068\":1}}],[\"这里的三句代码\",{\"1\":{\"2061\":1}}],[\"这里的变化不会导致组件重新渲染\",{\"1\":{\"2044\":1}}],[\"这里的变量并不是该函数的名字\",{\"1\":{\"929\":1}}],[\"这里的回调即我们定义守卫时所用的next\",{\"1\":{\"2029\":1}}],[\"这里的this为响应式数据value\",{\"1\":{\"1785\":1}}],[\"这里的textalign=\",{\"1\":{\"730\":1}}],[\"这里的总分结构并不是说每一段都是先阐述观点再进行论证\",{\"1\":{\"1685\":1}}],[\"这里的vue\",{\"1\":{\"1425\":1}}],[\"这里的name指的是变量而不是简单的字符串\",{\"1\":{\"1356\":1}}],[\"这里的结果和上面不一样\",{\"1\":{\"996\":1}}],[\"这里的前一项值指的是上一次迭代时的计算结果\",{\"1\":{\"946\":1}}],[\"这里的不定参数就是一个真正的数组\",{\"1\":{\"933\":1}}],[\"这里的对象名就充当了命名空间的角色\",{\"1\":{\"835\":1}}],[\"这里的描述信息是可选的\",{\"1\":{\"828\":1}}],[\"这里的比较主要是按照\",{\"1\":{\"812\":1}}],[\"这里的接口指的是\",{\"1\":{\"335\":1}}],[\"这里的\",{\"1\":{\"219\":1,\"362\":1,\"991\":1,\"2047\":1,\"2068\":1}}],[\"这里列出两个图形化工具\",{\"1\":{\"213\":1}}],[\"这里包括我们安装的很多第三方包\",{\"1\":{\"150\":1}}],[\"这种设置通常用于需要在不同域名之间共享\",{\"1\":{\"2088\":1}}],[\"这种设置可以提供最高级别的安全性\",{\"1\":{\"2088\":1}}],[\"这种类型的守卫回调是属于组件级别的\",{\"1\":{\"2080\":1}}],[\"这种节点叫做静态节点\",{\"1\":{\"1795\":1}}],[\"这种文件直接使用文本打开会显示乱码\",{\"1\":{\"1674\":1}}],[\"这种对实时性有要求的页面\",{\"1\":{\"1644\":1}}],[\"这种说法目前已无法满足复杂的浏览器环境\",{\"1\":{\"1560\":1}}],[\"这种语法格式对于前端人员都不太容易接受\",{\"1\":{\"1249\":1}}],[\"这种做法还有一个好处是不会再出现全局命名空间被污染的情况\",{\"1\":{\"1240\":1}}],[\"这种做法在异步操作中也经常使用\",{\"1\":{\"1232\":1}}],[\"这种写法就是链式操作\",{\"1\":{\"1232\":1}}],[\"这种形式更加自由\",{\"1\":{\"1485\":1}}],[\"这种形式封装\",{\"1\":{\"1227\":1}}],[\"这种形式的占位符\",{\"1\":{\"385\":1}}],[\"这种名称在\",{\"1\":{\"1127\":1}}],[\"这种逐个添加的方法会显得效率很低\",{\"1\":{\"1120\":1}}],[\"这种方案的缺陷是非常明显的\",{\"1\":{\"1645\":1}}],[\"这种方法就称为\",{\"1\":{\"1232\":1}}],[\"这种方法比使用重新赋值的效率要高些\",{\"1\":{\"851\":1}}],[\"这种方式一般容易被用户发现\",{\"1\":{\"2091\":1}}],[\"这种方式可以让\",{\"1\":{\"2016\":1}}],[\"这种方式\",{\"1\":{\"1877\":1}}],[\"这种方式的提交现在越来越少见了\",{\"1\":{\"1569\":1}}],[\"这种方式的消息推送是基于页面存活的\",{\"1\":{\"1104\":1}}],[\"这种方式虽然相比\",{\"1\":{\"1144\":1}}],[\"这种方式是首先取到要为其绑定事件的元素节点对象\",{\"1\":{\"1144\":1}}],[\"这种方式实现的通知非常依赖当前页面的张开\",{\"1\":{\"1104\":1}}],[\"这种方式适用于当我们的\",{\"1\":{\"1079\":1}}],[\"这种继承也被称之为\",{\"1\":{\"1071\":1}}],[\"这种一层一层的关系\",{\"1\":{\"1019\":1}}],[\"这种情况会导致死循环\",{\"1\":{\"2075\":1}}],[\"这种情况会极大的降低服务器压力\",{\"1\":{\"1536\":1}}],[\"这种情况下会尝试找它子元素的\",{\"1\":{\"2032\":1}}],[\"这种情况下引用中获得的值是组件实例\",{\"1\":{\"1499\":1}}],[\"这种情况的发生通常与学习率过高有关\",{\"1\":{\"1666\":1}}],[\"这种情况是可以处理的\",{\"1\":{\"1646\":1}}],[\"这种情况\",{\"1\":{\"1536\":1}}],[\"这种情况没有什么好讨论的\",{\"1\":{\"1535\":1}}],[\"这种情况相对简单\",{\"1\":{\"991\":1}}],[\"这种情况我们将其称之为顺序结构\",{\"1\":{\"817\":1}}],[\"这种模式非常的常见\",{\"1\":{\"2043\":1}}],[\"这种模式使得\",{\"1\":{\"959\":1}}],[\"这种模式的好处很明显\",{\"1\":{\"218\":1}}],[\"这种函数叫做立即执行函数\",{\"1\":{\"948\":1}}],[\"这种结构被称为断言\",{\"1\":{\"915\":1}}],[\"这种功能叫捕获分组\",{\"1\":{\"911\":1}}],[\"这种像链条一样的方法调用方式被称为链式调用\",{\"1\":{\"861\":1}}],[\"这种问题就变得更加有可能\",{\"1\":{\"835\":1}}],[\"这种技术被称之为命名参数\",{\"1\":{\"833\":1}}],[\"这种行为符合预期\",{\"1\":{\"548\":2}}],[\"这种前端技术栈开来发跨平台的桌面gui应用程序\",{\"1\":{\"222\":1}}],[\"这种比较我们成为\",{\"1\":{\"166\":1}}],[\"这种差异在小项目中表现的并不明显\",{\"1\":{\"117\":1}}],[\"这种使用命令行的\",{\"1\":{\"71\":1}}],[\"这种状态我们称为分离头指针\",{\"1\":{\"14\":1}}],[\"这门语言终于有了和其他语言较量的资本\",{\"1\":{\"25\":1}}],[\"这些提取出来的路由记录会用于后续的操作\",{\"1\":{\"2073\":1}}],[\"这些特定的操作是定义在\",{\"1\":{\"2069\":1}}],[\"这些所注册的回调函数会保存在\",{\"1\":{\"2069\":1}}],[\"这些回调函数往往是为了执行一些副作用\",{\"1\":{\"2061\":1}}],[\"这些回调函数会在路由发生变化的时候被调用\",{\"1\":{\"2061\":1}}],[\"这些子节点在每次渲染时都只渲染一个\",{\"1\":{\"1795\":1}}],[\"这些子路径都是在一个列表中\",{\"1\":{\"711\":1}}],[\"这些感官输入远远超过了大脑能够完全处理的程度\",{\"1\":{\"1678\":1}}],[\"这些层的输出都是四维张量\",{\"1\":{\"1661\":1}}],[\"这些成员并不能在当前文件内访问\",{\"1\":{\"1309\":1}}],[\"这些被称为部分\",{\"1\":{\"1308\":1}}],[\"这些数字指的是字符串中的字符\",{\"1\":{\"1265\":1}}],[\"这些数据集通常是用于测试和比较不同模型的性能\",{\"1\":{\"1656\":1}}],[\"这些数据只有在同一个会话中的页面才能访问\",{\"1\":{\"768\":1}}],[\"这些数据会被删除\",{\"1\":{\"768\":1}}],[\"这些动画效果可以用\",{\"1\":{\"1224\":1}}],[\"这些筛选方法基本都是这样使用\",{\"1\":{\"1204\":1}}],[\"这些方法有一些是内部方法\",{\"1\":{\"2046\":1}}],[\"这些方法的内部\",{\"1\":{\"2042\":1}}],[\"这些方法里面有供内部使用的方法\",{\"1\":{\"2041\":1}}],[\"这些方法大部分都是不会更改数组本身的\",{\"1\":{\"1925\":1}}],[\"这些方法大概可分为这几类\",{\"1\":{\"1208\":1}}],[\"这些方法既解决了兼容性问题\",{\"1\":{\"1214\":1}}],[\"这些方法都很常用\",{\"1\":{\"1205\":1}}],[\"这些方法实际上都是为了简化原生\",{\"1\":{\"1194\":1}}],[\"这些方法会在下面一起列出\",{\"1\":{\"877\":1}}],[\"这些坐标随后可以与其他应用程序或者\",{\"1\":{\"1102\":1}}],[\"这些对象在浏览器中得以存在\",{\"1\":{\"1084\":1}}],[\"这些函数在处理多个对象时更具有灵活性\",{\"1\":{\"1673\":1}}],[\"这些函数将整个模型保存到文件中\",{\"1\":{\"1673\":1}}],[\"这些函数会严重地影响页面性能\",{\"1\":{\"1038\":1}}],[\"这些函数内部的\",{\"1\":{\"995\":1}}],[\"这些值本身很简单\",{\"1\":{\"980\":1}}],[\"这些属性都是只读属性\",{\"1\":{\"1087\":1}}],[\"这些属性基于所执行的最近一次正则表达式操作而变化\",{\"1\":{\"924\":1}}],[\"这些属性会被自动填充\",{\"1\":{\"911\":1,\"924\":1,\"925\":1}}],[\"这些元数据包括海拔\",{\"1\":{\"1101\":1}}],[\"这些元字符\",{\"1\":{\"920\":1}}],[\"这些元素表示其表单控件的可选值\",{\"1\":{\"697\":1}}],[\"这些字符就是元字符\",{\"1\":{\"902\":1}}],[\"这些键一般由字符串构成\",{\"1\":{\"826\":1}}],[\"这些\",{\"1\":{\"771\":1,\"1095\":1}}],[\"这些信息不会出现在实际的内容中\",{\"1\":{\"657\":1}}],[\"这些样式的存在会影响到页面的布局\",{\"1\":{\"610\":1}}],[\"这些有效信息包含三个部分\",{\"1\":{\"366\":1}}],[\"这些传递的信息是可信的\",{\"1\":{\"363\":1}}],[\"这些都是以\",{\"1\":{\"716\":1}}],[\"这些都是可选的\",{\"1\":{\"703\":1}}],[\"这些都是\",{\"1\":{\"240\":1,\"1195\":1}}],[\"这些仅仅是前端工程化的一个缩影\",{\"1\":{\"116\":1}}],[\"这些问题也经常被看作是\",{\"1\":{\"781\":1}}],[\"这些问题包括\",{\"1\":{\"116\":1,\"1533\":1}}],[\"这些问题可以通过现代模块化编码和项目构建来解决\",{\"1\":{\"31\":1}}],[\"这些问题都严重的制约了前端程序的规模进一步扩大\",{\"1\":{\"23\":1}}],[\"这些行为\",{\"1\":{\"25\":1}}],[\"这样之后就可以通过\",{\"1\":{\"2069\":1}}],[\"这样子才会触发响应式\",{\"1\":{\"2044\":1}}],[\"这样分工明确\",{\"1\":{\"2016\":1}}],[\"这样才有机会对特定节点进行修改\",{\"1\":{\"1976\":1}}],[\"这样才能保证其子节点全部被处理完毕\",{\"1\":{\"1978\":1}}],[\"这样才能保持局部有序\",{\"1\":{\"419\":1}}],[\"这样才能继续在后面书写字符\",{\"1\":{\"918\":1}}],[\"这样才能够进行全局匹配\",{\"1\":{\"911\":1}}],[\"这样才能让\",{\"1\":{\"148\":1}}],[\"这样当更新发生时就不会再次进行挂载操作\",{\"1\":{\"1954\":1}}],[\"这样当更新事件的时候\",{\"1\":{\"1949\":1}}],[\"这样当项目比较复杂\",{\"1\":{\"11\":1}}],[\"这样即避免了错误\",{\"1\":{\"1923\":1}}],[\"这样即可对所有的\",{\"1\":{\"1158\":1}}],[\"这样父子组件的\",{\"1\":{\"1862\":1}}],[\"这样使用这些方法时会优先使用改写之后的\",{\"1\":{\"1785\":1}}],[\"这样占用的资源最少\",{\"1\":{\"1649\":1}}],[\"这样做的目的是再次获取计算属性时直接返回缓存值\",{\"1\":{\"1859\":1}}],[\"这样做的好处是\",{\"1\":{\"1543\":1}}],[\"这样做的本质是在\",{\"1\":{\"995\":1}}],[\"这样代码会更加简便和整洁\",{\"1\":{\"1485\":1}}],[\"这样编译出来的代码相对于混合宏来说要干净易读\",{\"1\":{\"1299\":1}}],[\"这样也能使得异步操作更为简洁\",{\"1\":{\"1232\":1}}],[\"这样设置之后\",{\"1\":{\"1125\":1}}],[\"这样方便我们获取对象\",{\"1\":{\"1109\":1}}],[\"这样会导致无限递归地调用自己\",{\"1\":{\"1892\":1}}],[\"这样会导致无法取消绑定\",{\"1\":{\"995\":1}}],[\"这样会导致编译出现错误\",{\"1\":{\"1310\":1}}],[\"这样会改变<a>标签默认的超链接特性\",{\"1\":{\"1080\":1}}],[\"这样无论\",{\"1\":{\"995\":1}}],[\"这样其实会产生很多隐藏问题\",{\"1\":{\"958\":1}}],[\"这样它们被单击的时候就弹出一些文字\",{\"1\":{\"1158\":1}}],[\"这样它们之间就是一个或的关系\",{\"1\":{\"651\":1}}],[\"这样它就有块级作用域\",{\"1\":{\"948\":1}}],[\"这样如果在调用函数时没有传递相应的实际参数\",{\"1\":{\"934\":1}}],[\"这样的回调函数\",{\"1\":{\"2061\":1}}],[\"这样的编译器宏不需要导入\",{\"1\":{\"1499\":1}}],[\"这样的代码不够简洁\",{\"1\":{\"1232\":1}}],[\"这样的处理确实也有太麻烦了\",{\"1\":{\"1112\":1}}],[\"这样的节点叫做空白节点\",{\"1\":{\"1112\":1}}],[\"这样的\",{\"1\":{\"1093\":1,\"2051\":1}}],[\"这样的说法没有太大的问题\",{\"1\":{\"990\":1}}],[\"这样的日期字符串\",{\"1\":{\"911\":1}}],[\"这样的话垃圾回收就不会不会回收这个数组\",{\"1\":{\"865\":1}}],[\"这样的工具\",{\"1\":{\"118\":1}}],[\"这样就可以自动对任务进行去重\",{\"1\":{\"1954\":1}}],[\"这样就可以达到\",{\"1\":{\"1144\":1}}],[\"这样就实现了深响应\",{\"1\":{\"1930\":1}}],[\"这样就实现了替换功能\",{\"1\":{\"854\":1}}],[\"这样就得到了一个指令需要的所有数据\",{\"1\":{\"1407\":1}}],[\"这样就能保持对\",{\"1\":{\"1319\":1}}],[\"这样就会匹配到所有的内容\",{\"1\":{\"894\":1}}],[\"这样就不用担心和其他人的变量或者函数名发生命名冲突\",{\"1\":{\"835\":1}}],[\"这样就不用必须按照定义时形参的顺序来传值\",{\"1\":{\"833\":1}}],[\"这样就不会抛出错误了\",{\"1\":{\"795\":1}}],[\"这样在createrenderer函数的内部可以通过解构获取传入的操作\",{\"1\":{\"1946\":1}}],[\"这样在计时时间少于\",{\"1\":{\"1560\":1}}],[\"这样在调用这些函数的时候需要先写上对象名\",{\"1\":{\"835\":1}}],[\"这样在最后的\",{\"1\":{\"158\":1}}],[\"这样\",{\"1\":{\"824\":1,\"828\":1,\"923\":1,\"1030\":1,\"1309\":1,\"1383\":2,\"1526\":1,\"1613\":1,\"1655\":1,\"1804\":1,\"1888\":1}}],[\"这样背景颜色将会成为图片的\",{\"1\":{\"628\":1}}],[\"这样我们就能手动执行该副作用函数\",{\"1\":{\"1894\":1}}],[\"这样我们就可以通过vm\",{\"1\":{\"1354\":1}}],[\"这样我们就可以通过使用字体的形式来使用图标\",{\"1\":{\"622\":1}}],[\"这样我们就可以实现链式调用\",{\"1\":{\"947\":1}}],[\"这样我们就可以创建一个空的对象\",{\"1\":{\"827\":1}}],[\"这样我们以后只需要写成功或失败连接后的回调逻辑即可\",{\"1\":{\"212\":1}}],[\"这样高度就不会塌陷\",{\"1\":{\"566\":1}}],[\"这样只需设置一次即可让所有的元素都具有该样式\",{\"1\":{\"527\":1}}],[\"这样只有直接运行此文件时才会执行单元测试代码\",{\"1\":{\"377\":1}}],[\"这样一趟循环可以将最大的元素移动到最右端\",{\"1\":{\"410\":1}}],[\"这样一来\",{\"1\":{\"118\":1,\"1537\":3,\"1543\":2,\"1556\":1,\"1558\":1,\"1612\":2}}],[\"这样一来将会使得我们代码的提交记录变得极为混乱\",{\"1\":{\"11\":1}}],[\"这样得到\",{\"1\":{\"402\":1}}],[\"这样两个个反斜杠字符\",{\"1\":{\"384\":1}}],[\"这样消耗的内存最少\",{\"1\":{\"263\":1}}],[\"这样可以保证内部没有使用\",{\"1\":{\"2075\":1}}],[\"这样可以保证该标签节点的子节点全部被处理完毕\",{\"1\":{\"1978\":1}}],[\"这样可以利用\",{\"1\":{\"1784\":1}}],[\"这样可以使结构更加清晰明了\",{\"1\":{\"1454\":1}}],[\"这样可以使我们的页面变得更加的有意思\",{\"1\":{\"1135\":1}}],[\"这样可以使子元素跟随父元素的改变而改变\",{\"1\":{\"534\":1}}],[\"这样可以更快的加载出页面效果\",{\"1\":{\"1078\":1}}],[\"这样可以大大提升程序的效率\",{\"1\":{\"822\":1}}],[\"这样可以避免相对路径产生的\",{\"1\":{\"262\":1}}],[\"这样可以减少大量的业务沟通成本\",{\"1\":{\"218\":1}}],[\"这样客户端就可以再借助这些信息继续向\",{\"1\":{\"158\":1}}],[\"这样显得非常麻烦\",{\"1\":{\"148\":1}}],[\"所传入的第三个参数\",{\"1\":{\"2075\":1}}],[\"所注入的深度\",{\"1\":{\"2068\":1}}],[\"所拼接的这个\",{\"1\":{\"2058\":1}}],[\"所创建的\",{\"1\":{\"2055\":1}}],[\"所实现的一个简单单页应用\",{\"1\":{\"2050\":1}}],[\"所返回的值又和\",{\"1\":{\"2047\":1}}],[\"所对应的\",{\"1\":{\"2073\":1}}],[\"所对应的更新守卫\",{\"1\":{\"2069\":1}}],[\"所对应的离开守卫\",{\"1\":{\"2069\":1}}],[\"所对应的数组里面\",{\"1\":{\"129\":1}}],[\"所对应真实\",{\"1\":{\"1962\":1}}],[\"所描述的内容相同\",{\"1\":{\"1951\":1}}],[\"所求的量之比为\",{\"1\":{\"1742\":1}}],[\"所属组件的\",{\"1\":{\"1498\":1}}],[\"所属域名\",{\"1\":{\"345\":1}}],[\"所被\",{\"1\":{\"1383\":1}}],[\"所触发的事件类型是什么等\",{\"1\":{\"1151\":1}}],[\"所表示的值略微有差异\",{\"1\":{\"1087\":1}}],[\"所声明的变量不会成为\",{\"1\":{\"1086\":1}}],[\"所声明的变量\",{\"1\":{\"1086\":1}}],[\"所声明的变量会成为全局对象\",{\"1\":{\"996\":1}}],[\"所指向\",{\"1\":{\"1028\":1}}],[\"所要指向的那个对象\",{\"1\":{\"995\":1}}],[\"所在的位置\",{\"1\":{\"918\":1}}],[\"所支持的元字符如下表\",{\"1\":{\"902\":1}}],[\"所列出的get\",{\"1\":{\"877\":1}}],[\"所发表的博文\",{\"1\":{\"773\":1}}],[\"所用模块\",{\"1\":{\"408\":1}}],[\"所包含的目录\",{\"1\":{\"379\":1}}],[\"所谓嵌套路由\",{\"1\":{\"2068\":1}}],[\"所谓单页应用\",{\"1\":{\"2048\":1}}],[\"所谓虚拟\",{\"1\":{\"1788\":1}}],[\"所谓带缓存的请求\",{\"1\":{\"1537\":1}}],[\"所谓客户端缓存\",{\"1\":{\"1533\":1}}],[\"所谓通用的事件对象属性\",{\"1\":{\"1152\":1}}],[\"所谓字符键\",{\"1\":{\"1149\":1}}],[\"所谓深克隆\",{\"1\":{\"1123\":1}}],[\"所谓浅克隆\",{\"1\":{\"1123\":1}}],[\"所谓链式调用\",{\"1\":{\"947\":1}}],[\"所谓回调函数\",{\"1\":{\"943\":1}}],[\"所谓箭头函数\",{\"1\":{\"941\":1}}],[\"所谓函数提升\",{\"1\":{\"940\":1}}],[\"所谓时间戳\",{\"1\":{\"874\":1}}],[\"所谓解构\",{\"1\":{\"847\":1}}],[\"所谓流程控制\",{\"1\":{\"817\":1}}],[\"所谓全等\",{\"1\":{\"814\":1}}],[\"所谓非\",{\"1\":{\"810\":1}}],[\"所谓一元运算符\",{\"1\":{\"804\":1}}],[\"所谓显性转换\",{\"1\":{\"801\":1}}],[\"所谓实数\",{\"1\":{\"793\":1}}],[\"所谓数据类型\",{\"1\":{\"787\":1}}],[\"所谓作用域\",{\"1\":{\"784\":1}}],[\"所谓变量提升\",{\"1\":{\"939\":1}}],[\"所谓变量\",{\"1\":{\"778\":1}}],[\"所谓拖放\",{\"1\":{\"762\":1}}],[\"所谓视觉类样式\",{\"1\":{\"609\":1}}],[\"所谓伸缩\",{\"1\":{\"591\":1}}],[\"所谓本地域名就是\",{\"1\":{\"371\":1}}],[\"所谓\",{\"1\":{\"362\":1,\"1083\":1,\"1897\":1}}],[\"所谓会话控制就是\",{\"1\":{\"343\":1}}],[\"所谓的\",{\"1\":{\"223\":1}}],[\"所以先从组件上面去提取对应守卫回调\",{\"1\":{\"2080\":1}}],[\"所以最后有一句\",{\"1\":{\"2047\":1}}],[\"所以最终在浏览器里运行的代码就是\",{\"1\":{\"1880\":1}}],[\"所以最终会返回\",{\"1\":{\"992\":1}}],[\"所以需要根据不同的类型来处理\",{\"1\":{\"2070\":1}}],[\"所以需要把这一块进行一个处理\",{\"1\":{\"2058\":1}}],[\"所以需要新的全局挂载方式\",{\"1\":{\"2016\":1}}],[\"所以需要将模板\",{\"1\":{\"1975\":1}}],[\"所以需要自动脱\",{\"1\":{\"1938\":1}}],[\"所以暂时只需要attrs\",{\"1\":{\"1954\":1}}],[\"所以此时value\",{\"1\":{\"1929\":1}}],[\"所以此时可以使用\",{\"1\":{\"129\":1}}],[\"所以修改\",{\"1\":{\"1927\":1}}],[\"所以抛出了这个错误\",{\"1\":{\"1927\":1}}],[\"所以拿原始对象\",{\"1\":{\"1923\":1}}],[\"所以只需要包裹\",{\"1\":{\"1932\":1}}],[\"所以只需要在该属性与副作用函数之间建立联系即可\",{\"1\":{\"1906\":1}}],[\"所以只是在一定程度上可以防止\",{\"1\":{\"345\":1}}],[\"所以请求\",{\"1\":{\"1897\":1}}],[\"所以直接把\",{\"1\":{\"1897\":1}}],[\"所以以后再修改\",{\"1\":{\"1890\":1}}],[\"所以也是当\",{\"1\":{\"1866\":1}}],[\"所以其余没有被渲染的肯定不在node\",{\"1\":{\"1795\":1}}],[\"所以其内部的内容全部当做纯文本处理\",{\"1\":{\"1792\":1}}],[\"所以解析器不可能只有一个\",{\"1\":{\"1791\":1}}],[\"所以vnode节点之间的patch和vnode子节点之间的patch是存在区别的\",{\"1\":{\"1789\":1}}],[\"所以浏览器采用异步的方式来避免\",{\"1\":{\"1558\":1}}],[\"所以一个进程中可以包含多个线程\",{\"1\":{\"1554\":1}}],[\"所以一般传递一个空字符串或者\",{\"1\":{\"2050\":1}}],[\"所以一般这种消息传递发生于\",{\"1\":{\"1429\":1}}],[\"所以一般情况下我们使用\",{\"1\":{\"548\":1}}],[\"所以deep配置有效\",{\"1\":{\"1497\":1}}],[\"所以上图中也包含了静态插槽\",{\"1\":{\"1446\":1,\"1494\":1}}],[\"所以就算在第一次\",{\"1\":{\"1320\":1}}],[\"所以就把别人的对象所具有的属性给覆盖掉了\",{\"1\":{\"828\":1}}],[\"所以通过\",{\"1\":{\"1836\":1}}],[\"所以通过递归遍历数组元素\",{\"1\":{\"1785\":1}}],[\"所以通过该滚轮事件获知文档内容滚动方向的方法并不可靠\",{\"1\":{\"1153\":1}}],[\"所以通常应该将新创建的\",{\"1\":{\"1281\":1}}],[\"所以所有的\",{\"1\":{\"1281\":1}}],[\"所以它不会修改原始列表\",{\"1\":{\"1270\":1}}],[\"所以它可以避开同源策略\",{\"1\":{\"360\":1}}],[\"所以例如\",{\"1\":{\"1264\":1}}],[\"所以使用set修改值时同样应该触发副作用函数重新执行\",{\"1\":{\"1930\":1}}],[\"所以使用数组进行存储\",{\"1\":{\"1777\":1}}],[\"所以使用\",{\"1\":{\"1236\":1}}],[\"所以无论点击哪个\",{\"1\":{\"1219\":1}}],[\"所以无论第二个操作数真假\",{\"1\":{\"809\":1}}],[\"所以我就不给你结果了\",{\"1\":{\"1635\":1}}],[\"所以我触发事件的标签就是\",{\"1\":{\"1219\":1}}],[\"所以我们一般会去监听这个事件\",{\"1\":{\"2049\":1}}],[\"所以我们还要追加\",{\"1\":{\"1979\":1}}],[\"所以我们还要把node\",{\"1\":{\"1795\":1}}],[\"所以我们必须在设置元素的\",{\"1\":{\"1949\":1}}],[\"所以我们在模板中可以直接访问\",{\"1\":{\"1938\":1}}],[\"所以我们如果使用上面方式\",{\"1\":{\"1938\":1}}],[\"所以我们使用\",{\"1\":{\"1906\":1}}],[\"所以我们使用几个不同格式的文件来兼容不同的浏览器\",{\"1\":{\"747\":1}}],[\"所以我们直接使用数组下标arr\",{\"1\":{\"1786\":1}}],[\"所以我们称之为\",{\"1\":{\"1568\":1}}],[\"所以我们需要看一下这个\",{\"1\":{\"2061\":1}}],[\"所以我们需要两个索引\",{\"1\":{\"1968\":1}}],[\"所以我们需要获取\",{\"1\":{\"1962\":1}}],[\"所以我们需要一个副作用函数栈\",{\"1\":{\"1891\":1}}],[\"所以我们需要这么一种策略\",{\"1\":{\"1104\":1}}],[\"所以我们需要通过\",{\"1\":{\"343\":1}}],[\"所以我们之前一直使用的数组中的很多方法\",{\"1\":{\"1033\":1}}],[\"所以我们这里只选择个别方法进行演示\",{\"1\":{\"877\":1}}],[\"所以我们能连续调用add\",{\"1\":{\"861\":1}}],[\"所以我们可以直接再次调用\",{\"1\":{\"947\":1}}],[\"所以我们可以模拟出多维数组\",{\"1\":{\"848\":1}}],[\"所以我们可以使用for\",{\"1\":{\"830\":1}}],[\"所以我们可以利用浮动来设置文字环绕图片的效果\",{\"1\":{\"561\":1}}],[\"所以我们不需要进行处理\",{\"1\":{\"558\":1}}],[\"所以我们安装相应的插件\",{\"1\":{\"148\":1}}],[\"所以说\",{\"1\":{\"1200\":1}}],[\"所以说函数是\",{\"1\":{\"926\":1}}],[\"所以实际的执行顺序为\",{\"1\":{\"1187\":1}}],[\"所以主线程必须要根据某种方法进行任务调度\",{\"1\":{\"1172\":1}}],[\"所以必须确保密钥不被泄露或被未经授权的人使用\",{\"1\":{\"2099\":1}}],[\"所以必须要写返回值\",{\"1\":{\"1498\":1}}],[\"所以必须通过方括号语法来访问它们\",{\"1\":{\"924\":1}}],[\"所以必要的时候\",{\"1\":{\"1158\":1}}],[\"所以必要时\",{\"1\":{\"1155\":1}}],[\"所以滚动的部分也会被记入其中\",{\"1\":{\"1153\":1}}],[\"所以都显示出\",{\"1\":{\"1152\":1}}],[\"所以即便回调函数中没有书写以\",{\"1\":{\"1152\":1}}],[\"所以即使调用它们的网页不是当前的标签页\",{\"1\":{\"1105\":1}}],[\"所以即使在if块中用\",{\"1\":{\"948\":1}}],[\"所以更多时候是利用百度地图提供的\",{\"1\":{\"1102\":1}}],[\"所以更好的做法是\",{\"1\":{\"957\":1}}],[\"所以是不需要编译的\",{\"1\":{\"1805\":1}}],[\"所以是没有后退返回上一页的\",{\"1\":{\"1094\":1}}],[\"所以是undefined\",{\"1\":{\"1086\":1}}],[\"所以该属性通常是空白的\",{\"1\":{\"1093\":1,\"2051\":1}}],[\"所以该块内存并不会被释放\",{\"1\":{\"1028\":1}}],[\"所以基本效果出不来\",{\"1\":{\"1088\":1}}],[\"所以基本大部分的\",{\"1\":{\"649\":1}}],[\"所以垃圾收集器必须跟踪到底哪个变量没用\",{\"1\":{\"1028\":1}}],[\"所以垃圾回收器会按照固定的时间间隔周期性的执行\",{\"1\":{\"1028\":1}}],[\"所以闭包依然存在\",{\"1\":{\"1023\":1}}],[\"所以闭包在创建代码时就产生了\",{\"1\":{\"1023\":1}}],[\"所以函数对象也有\",{\"1\":{\"1009\":1}}],[\"所以打印出来的是\",{\"1\":{\"1087\":1}}],[\"所以打印出\",{\"1\":{\"992\":1}}],[\"所以打印的结果还是这个函数\",{\"1\":{\"948\":1}}],[\"所以复杂值的数据都是存储于堆区里面\",{\"1\":{\"981\":1}}],[\"所以执行\",{\"1\":{\"980\":1}}],[\"所以整个代码会进入到严格模式执行\",{\"1\":{\"957\":1}}],[\"所以对他的赋值并不生效\",{\"1\":{\"948\":1}}],[\"所以要排除计算属性\",{\"1\":{\"2020\":1}}],[\"所以要理解\",{\"1\":{\"1606\":1}}],[\"所以要去继承这个文件中的选择器是无法找到目标选择器的\",{\"1\":{\"1315\":1}}],[\"所以要不要放入闭包取决于该变量有没有被引用\",{\"1\":{\"1023\":1}}],[\"所以要注意\",{\"1\":{\"931\":1}}],[\"所以要求导出内容必须跟上\",{\"1\":{\"49\":1}}],[\"所以用同一个\",{\"1\":{\"925\":1}}],[\"所以优先级比量词高\",{\"1\":{\"920\":1}}],[\"所以应该写为\",{\"1\":{\"913\":1}}],[\"所以应该使用\",{\"1\":{\"904\":1}}],[\"所以会使用\",{\"1\":{\"2002\":1}}],[\"所以会执行parsepath方法\",{\"1\":{\"1854\":1}}],[\"所以会生成到布局树中\",{\"1\":{\"1526\":1}}],[\"所以会忽略所有的文本节点和空白节点\",{\"1\":{\"1112\":1}}],[\"所以会报错\",{\"1\":{\"897\":1,\"2050\":1}}],[\"所以会判断第2个数\",{\"1\":{\"808\":1,\"809\":2}}],[\"所以弱集合无法添加基本数据类型\",{\"1\":{\"865\":1}}],[\"所以这里暂时存一份\",{\"1\":{\"2047\":1}}],[\"所以这里使用\",{\"1\":{\"2044\":1}}],[\"所以这里是一个空数组\",{\"1\":{\"1975\":1}}],[\"所以这里无法显示出其效果\",{\"1\":{\"1150\":1}}],[\"所以这里的\",{\"1\":{\"996\":1}}],[\"所以这里大家先了解一下这种遍历的方式即可\",{\"1\":{\"846\":1}}],[\"所以这种情况下我们不需要事件冒泡\",{\"1\":{\"1155\":1}}],[\"所以这种数据结构里面不能包含重复的值\",{\"1\":{\"858\":1}}],[\"所以这种方式可以为元素开启一个新的\",{\"1\":{\"548\":1}}],[\"所以这两种方法无法用来查找数组中是否存在nan\",{\"1\":{\"856\":1}}],[\"所以this\",{\"1\":{\"834\":1}}],[\"所以值为\",{\"1\":{\"832\":1}}],[\"所以仅靠缩进无法表示彼此间的联系\",{\"1\":{\"818\":1}}],[\"所以不需要使用\",{\"1\":{\"2065\":1}}],[\"所以不需要切换状态\",{\"1\":{\"1974\":1}}],[\"所以不用写返回值\",{\"1\":{\"1498\":1}}],[\"所以不能使用template配置项\",{\"1\":{\"1427\":1}}],[\"所以不能访问对象里面的值列表\",{\"1\":{\"865\":1}}],[\"所以不做讲解\",{\"1\":{\"1257\":1}}],[\"所以不一定会触发\",{\"1\":{\"1153\":1}}],[\"所以不停的刷新页面可以勉强在控制台中看到打印的语句\",{\"1\":{\"1150\":1}}],[\"所以不会再次在子组件添加拦截\",{\"1\":{\"1840\":1}}],[\"所以不会被垃圾回收器回收内存\",{\"1\":{\"1030\":1}}],[\"所以不会判断第2个数\",{\"1\":{\"808\":1}}],[\"所以不影响传输效率\",{\"1\":{\"356\":1}}],[\"所以没有代理对象这层\",{\"1\":{\"1889\":1}}],[\"所以没有时间的限制\",{\"1\":{\"769\":1}}],[\"所以没有这些限制\",{\"1\":{\"356\":1}}],[\"所以为了实现原始值的响应式我们可以使用一个非原始值\",{\"1\":{\"1936\":1}}],[\"所以为上面返回值添加可迭代协议\",{\"1\":{\"1931\":1}}],[\"所以为\",{\"1\":{\"765\":1}}],[\"所以你不需要调用\",{\"1\":{\"711\":1}}],[\"所以同样的\",{\"1\":{\"650\":1}}],[\"所以同样的200px在不同的设备下显示效果并不相同\",{\"1\":{\"534\":1}}],[\"所以手机端浏览器会默认对页面进行缩放以显示到用\",{\"1\":{\"648\":1}}],[\"所以如果有插槽的情况\",{\"1\":{\"2070\":1}}],[\"所以如果我们要让一个非字符串的变量转换为字符串的话\",{\"1\":{\"789\":1}}],[\"所以如果不指定\",{\"1\":{\"574\":1}}],[\"所以如果你已经安装了\",{\"1\":{\"62\":1}}],[\"所以固定定位的大部分特点都和绝对定位一样\",{\"1\":{\"571\":1}}],[\"所以父元素会将其包裹\",{\"1\":{\"566\":1}}],[\"所以当属性修改触发回调执行后才注册了过期回调\",{\"1\":{\"1897\":1}}],[\"所以当函数对象成为垃圾对象时\",{\"1\":{\"1023\":1}}],[\"所以当数据类型不同时\",{\"1\":{\"819\":1}}],[\"所以当你滚动该元素时\",{\"1\":{\"634\":1}}],[\"所以当想设置此元素的边距时\",{\"1\":{\"564\":1}}],[\"所以当命名行的工作目录与文件所在目录不一致时\",{\"1\":{\"261\":1}}],[\"所以默认情况下如果我们设置的\",{\"1\":{\"546\":1}}],[\"所以在调用\",{\"1\":{\"1954\":1}}],[\"所以在一个严谨的实现中\",{\"1\":{\"1929\":1}}],[\"所以在副作用函数中访问\",{\"1\":{\"1911\":1}}],[\"所以在性能上会差一些\",{\"1\":{\"1872\":1}}],[\"所以在创建computed\",{\"1\":{\"1847\":1}}],[\"所以在进程开启后会自动创建一个线程来运行代码\",{\"1\":{\"1554\":1}}],[\"所以在模板中使用的未知变量名会按照作用域访问到this\",{\"1\":{\"1354\":1}}],[\"所以在\",{\"1\":{\"1313\":1}}],[\"所以在使用了\",{\"1\":{\"1309\":1}}],[\"所以在使用图标时\",{\"1\":{\"622\":1}}],[\"所以在编写样式表时选择非常简单的名称\",{\"1\":{\"1302\":1}}],[\"所以在分线程中不可能更新界面\",{\"1\":{\"1182\":1}}],[\"所以在封装\",{\"1\":{\"995\":1}}],[\"所以在更换字符串时\",{\"1\":{\"923\":1}}],[\"所以在移动端开发时\",{\"1\":{\"650\":1}}],[\"所以在计算盒子大小时\",{\"1\":{\"545\":1}}],[\"所以在第一步时就直接确定了值\",{\"1\":{\"533\":1}}],[\"所以长度多出来的部分舍弃\",{\"1\":{\"401\":1}}],[\"所以输出为空\",{\"1\":{\"377\":1}}],[\"所以简单来说\",{\"1\":{\"362\":1,\"2091\":1}}],[\"所以安全性\",{\"1\":{\"356\":1}}],[\"所以移动端常用的是\",{\"1\":{\"350\":1}}],[\"所以将其添加到更新的数组里面\",{\"1\":{\"2073\":1}}],[\"所以将computed定义在了构造函数的原型对象上\",{\"1\":{\"1845\":1}}],[\"所以将\",{\"1\":{\"346\":1}}],[\"所以有时也称之为\",{\"1\":{\"335\":1}}],[\"所以可以很容易地实现状态的快照和恢复功能\",{\"1\":{\"2016\":1}}],[\"所以可以很快的提供实时刷新功能\",{\"1\":{\"133\":1}}],[\"所以可以用来判断整个字符串能否由表达式匹配\",{\"1\":{\"917\":1}}],[\"所以可以用与集合类似的方式进行遍历\",{\"1\":{\"870\":1}}],[\"所以可以通过\",{\"1\":{\"300\":1}}],[\"所以把后台开发的一部分工作量\",{\"1\":{\"220\":1}}],[\"所以大家了解即可\",{\"1\":{\"178\":1}}],[\"所以接下来我们安装相应的编译箭头函数的插件\",{\"1\":{\"148\":1}}],[\"所以再次使用时无需重复下载\",{\"1\":{\"85\":1}}],[\"所以文件夹名称也不能使用中文和大写\",{\"1\":{\"64\":1}}],[\"所以\",{\"1\":{\"58\":1,\"71\":2,\"72\":1,\"82\":1,\"156\":1,\"367\":1,\"694\":1,\"764\":1,\"767\":1,\"827\":1,\"834\":1,\"843\":1,\"953\":1,\"980\":1,\"992\":1,\"993\":1,\"995\":3,\"996\":3,\"1084\":1,\"1102\":1,\"1112\":1,\"1137\":1,\"1193\":1,\"1201\":2,\"1225\":1,\"1272\":1,\"1313\":1,\"1407\":1,\"1526\":1,\"1527\":1,\"1528\":1,\"1529\":1,\"1605\":1,\"1903\":1,\"2091\":1}}],[\"所以注意不要再分离头指针的状态下来操作仓库\",{\"1\":{\"14\":1}}],[\"所有状态机的数据state函数返回\",{\"1\":{\"2015\":1}}],[\"所有对数组元素或属性的\",{\"1\":{\"1915\":1}}],[\"所有对日期和时间的访问都需要通过方法\",{\"1\":{\"877\":1}}],[\"所有设置到props变量中的属性都会保存到vm\",{\"1\":{\"1804\":1}}],[\"所有设备\",{\"1\":{\"651\":1}}],[\"所有属性匹配完之后\",{\"1\":{\"1792\":1}}],[\"所有响应头\",{\"1\":{\"1575\":1}}],[\"所有人看到的都是一样的\",{\"1\":{\"1539\":1}}],[\"所有不被\",{\"1\":{\"1383\":1}}],[\"所有的方法都围绕着vm\",{\"1\":{\"1813\":1}}],[\"所有的原生浏览器事件处理是在当前父组件环境中处理的\",{\"1\":{\"1802\":1}}],[\"所有的异步场景\",{\"1\":{\"1776\":1}}],[\"所有的async函数都可以写成上面的第二种形式\",{\"1\":{\"1772\":1}}],[\"所有的\",{\"1\":{\"1227\":1,\"1446\":1,\"1494\":1,\"1865\":1,\"2048\":1}}],[\"所有的子路径\",{\"1\":{\"711\":1}}],[\"所有文件\",{\"1\":{\"1200\":1}}],[\"所有现代浏览器都支持事件冒泡\",{\"1\":{\"1139\":1}}],[\"所有未定义直接赋值的变量自动声明为拥有全局作用域\",{\"1\":{\"1018\":1}}],[\"所有函数都是\",{\"1\":{\"1009\":1}}],[\"所有函数都有一个特别的属性\",{\"1\":{\"1007\":1}}],[\"所有实例对象都有一个特别的属性\",{\"1\":{\"1007\":1}}],[\"所有\",{\"0\":{\"971\":1},\"1\":{\"1018\":1,\"1276\":1,\"1308\":1}}],[\"所有之前的表单控件都保持不变\",{\"1\":{\"754\":1}}],[\"所有没有闭合的形状都会自动闭合\",{\"1\":{\"711\":1}}],[\"所有其他的图形的绘制都至少需要生成一条路径\",{\"1\":{\"705\":1}}],[\"所有背景相关的样式都可以通过该样式来设置\",{\"1\":{\"635\":1}}],[\"所有数字放入桶中后\",{\"1\":{\"419\":1}}],[\"所有元素比基准值大的摆在基准的后面\",{\"1\":{\"415\":1}}],[\"所有元素比基准值小的摆放在基准前面\",{\"1\":{\"415\":1}}],[\"所有浏览器都要兼容\",{\"1\":{\"117\":1}}],[\"所有路径必须以\",{\"1\":{\"46\":1}}],[\"所有操作都是在本地进行的\",{\"1\":{\"12\":1}}],[\"所管理的函数\",{\"1\":{\"1368\":1,\"1383\":1}}],[\"所管理\",{\"1\":{\"7\":2,\"15\":1}}],[\"五年计划\",{\"1\":{\"1747\":1}}],[\"五层\",{\"0\":{\"1624\":1}}],[\"五层网络模型\",{\"0\":{\"1622\":1}}],[\"五月天\",{\"1\":{\"340\":1}}],[\"五\",{\"0\":{\"12\":1,\"46\":1,\"90\":1,\"225\":1,\"240\":1,\"308\":1,\"363\":1,\"401\":1,\"511\":1,\"576\":1,\"685\":1,\"705\":1,\"817\":1,\"990\":1,\"1026\":1,\"1092\":1,\"1126\":1,\"1158\":1,\"1176\":1,\"1205\":1,\"1263\":1,\"1332\":1,\"1513\":1,\"1530\":1,\"1672\":1,\"1739\":1,\"1808\":1,\"1843\":1,\"1897\":1,\"1914\":1,\"2033\":1,\"2059\":1}}],[\"对称加密也有一个缺点\",{\"1\":{\"2099\":1}}],[\"对称加密的优点是加密和解密速度非常快\",{\"1\":{\"2099\":1}}],[\"对称加密是将明文数据使用密钥进行加密\",{\"1\":{\"2099\":1}}],[\"对称加密是使用相同的密钥来加密和解密数据\",{\"1\":{\"2099\":1}}],[\"对称加密\",{\"0\":{\"2099\":1}}],[\"对节点的访问分为两个阶段\",{\"1\":{\"1977\":1}}],[\"对事件的处理\",{\"1\":{\"1949\":1}}],[\"对事件处理程序过多问题的解决方案就是事件委托\",{\"1\":{\"1158\":1}}],[\"对形参的修改不会影响实参\",{\"1\":{\"1935\":1}}],[\"对形状\",{\"1\":{\"720\":1}}],[\"对值进行包装\",{\"1\":{\"1914\":1}}],[\"对definition处理之后保存在this\",{\"1\":{\"1828\":1}}],[\"对它有依赖\",{\"1\":{\"2031\":1}}],[\"对它的优化成本将大于优化后带来的收益\",{\"1\":{\"1795\":1}}],[\"对它们进行处理\",{\"1\":{\"138\":1}}],[\"对path逐个处理\",{\"1\":{\"1769\":1}}],[\"对话题的契合\",{\"1\":{\"1702\":1}}],[\"对策\",{\"1\":{\"1686\":1}}],[\"对最相关和最重要的部分给予更大的关注和权重\",{\"1\":{\"1678\":1}}],[\"对接收到的每个\",{\"1\":{\"1665\":1}}],[\"对高度和宽度的零填充数量\",{\"1\":{\"1663\":1}}],[\"对预检请求的验证\",{\"0\":{\"1611\":1}}],[\"对简单请求的验证\",{\"0\":{\"1610\":1}}],[\"对不同种类的请求它的规则有所区别\",{\"1\":{\"1606\":1}}],[\"对不起\",{\"1\":{\"668\":1}}],[\"对标签发出的跨域请求轻微限制\",{\"1\":{\"1603\":1}}],[\"对对象进行字符串转换\",{\"1\":{\"1578\":1}}],[\"对这个普通对象的所有操作\",{\"1\":{\"1506\":1}}],[\"对这两个子序列分别采用归并排序\",{\"1\":{\"414\":1}}],[\"对源对象的属性进行操作\",{\"1\":{\"1491\":1}}],[\"对源代码作了一些修改\",{\"1\":{\"24\":1}}],[\"对数组类型的判断\",{\"1\":{\"1917\":1}}],[\"对数组元素或属性的\",{\"1\":{\"1915\":1}}],[\"对数组新增元素添加侦测\",{\"1\":{\"1785\":1}}],[\"对数组的变更方法进行了包裹\",{\"1\":{\"1490\":1}}],[\"对数据进行编码\",{\"1\":{\"2095\":1}}],[\"对数据进行\",{\"1\":{\"173\":1}}],[\"对属性的读取\",{\"1\":{\"1490\":1}}],[\"对属性的顺序\",{\"1\":{\"1054\":1}}],[\"对路由进行权限控制\",{\"1\":{\"1467\":1}}],[\"对路由进行模块化\",{\"1\":{\"320\":1}}],[\"对其进行了覆盖\",{\"1\":{\"1433\":1}}],[\"对其他类型的资源进行转译的预处理工作\",{\"1\":{\"156\":1}}],[\"对要显示的数据进行特定格式化后再显示\",{\"1\":{\"1397\":1}}],[\"对比系统时间\",{\"1\":{\"2091\":1}}],[\"对比\",{\"0\":{\"1492\":1},\"1\":{\"1872\":1}}],[\"对比规则\",{\"1\":{\"1394\":1}}],[\"对比当前分支相对于祖先的历史提交\",{\"1\":{\"11\":1}}],[\"对上面方法的简化\",{\"1\":{\"1228\":1,\"1229\":1}}],[\"对元素进行缩放的函数\",{\"1\":{\"618\":1}}],[\"对默认样式进行了统一\",{\"1\":{\"610\":1}}],[\"对页面的布局就变成将不同的盒子摆放到不同的位置\",{\"1\":{\"542\":1}}],[\"对仍然没有值的属性\",{\"1\":{\"531\":1,\"532\":1}}],[\"对样式表有冲突的声名使用层叠规则\",{\"1\":{\"530\":1}}],[\"对执行语句进行阻塞\",{\"1\":{\"491\":1}}],[\"对每个进制位上的数进行排序\",{\"1\":{\"419\":1}}],[\"对每组使用直接插入排序算法进行处理\",{\"1\":{\"413\":1}}],[\"对radix进行计数排序\",{\"1\":{\"419\":1}}],[\"对进制位上的数字进行比较\",{\"1\":{\"419\":1}}],[\"对协程封装\",{\"1\":{\"408\":1}}],[\"对父类的方法调用会自动传入\",{\"1\":{\"405\":1}}],[\"对原始数据的代理\",{\"1\":{\"1886\":1}}],[\"对原始函数进行封装\",{\"1\":{\"402\":1}}],[\"对原函数的二次封装\",{\"1\":{\"402\":1}}],[\"对齐方式\",{\"1\":{\"388\":2}}],[\"对会话进行控制\",{\"1\":{\"343\":1}}],[\"对应正确的目标路由\",{\"1\":{\"2058\":1}}],[\"对应源码如下\",{\"1\":{\"2058\":1}}],[\"对应了如下的值\",{\"1\":{\"2047\":1}}],[\"对应真实\",{\"1\":{\"1962\":2}}],[\"对应于卷积操作中的下采样\",{\"1\":{\"1667\":1}}],[\"对应于\",{\"1\":{\"1347\":1,\"1348\":1,\"1349\":1}}],[\"对应地\",{\"1\":{\"913\":1}}],[\"对应两个词\",{\"1\":{\"762\":1}}],[\"对应示例\",{\"1\":{\"519\":1}}],[\"对应操作变为将储存的所有参数相加\",{\"1\":{\"464\":1}}],[\"对应的执行代码如下\",{\"1\":{\"2079\":1}}],[\"对应的深度为\",{\"1\":{\"2068\":1}}],[\"对应的是\",{\"1\":{\"2061\":1}}],[\"对应的键值\",{\"1\":{\"2052\":1}}],[\"对应的代码片段如下\",{\"1\":{\"2078\":1}}],[\"对应的代码如下\",{\"1\":{\"2044\":1}}],[\"对应的代码实现如下\",{\"1\":{\"1965\":1}}],[\"对应的源码说明如下\",{\"1\":{\"2065\":1}}],[\"对应的源码文件是\",{\"1\":{\"2062\":1}}],[\"对应的源码如下\",{\"1\":{\"2055\":1}}],[\"对应的源码\",{\"1\":{\"2040\":1}}],[\"对应的模板部分只会重新渲染需要更新的部分\",{\"1\":{\"2035\":1}}],[\"对应的拦截函数\",{\"1\":{\"1989\":1}}],[\"对应的字符串即可\",{\"1\":{\"1979\":1}}],[\"对应的真实\",{\"1\":{\"1962\":2}}],[\"对应的值我哦\",{\"1\":{\"2055\":1}}],[\"对应的值为\",{\"1\":{\"2055\":1}}],[\"对应的值有两个\",{\"1\":{\"2048\":1}}],[\"对应的值发生改变的话\",{\"1\":{\"2047\":1}}],[\"对应的值\",{\"1\":{\"1926\":1,\"2047\":1,\"2058\":2}}],[\"对应的回调是\",{\"1\":{\"2061\":1}}],[\"对应的回调是函数\",{\"1\":{\"1777\":1}}],[\"对应的回调不是函数\",{\"1\":{\"1777\":1}}],[\"对应的scroll滚动事件就会被触发\",{\"1\":{\"1150\":1}}],[\"对应的事件处理函数要执行的操作如下\",{\"1\":{\"765\":1}}],[\"对应的\",{\"1\":{\"681\":1,\"1436\":1,\"2055\":1,\"2058\":3,\"2073\":1}}],[\"对应的操作\",{\"1\":{\"463\":1}}],[\"对应的参数\",{\"1\":{\"405\":1}}],[\"对应\",{\"1\":{\"339\":2,\"681\":2,\"1357\":1,\"1938\":1}}],[\"对应目录\",{\"1\":{\"124\":1}}],[\"对文本框中的内容进行复制时\",{\"1\":{\"1161\":2}}],[\"对文件进行反序列化\",{\"1\":{\"1674\":1}}],[\"对文件调用reader\",{\"1\":{\"773\":1}}],[\"对文件变化的一个监控\",{\"1\":{\"158\":1}}],[\"对文档操作的封装对象\",{\"1\":{\"191\":1,\"212\":1}}],[\"对模块进行翻译\",{\"1\":{\"154\":1}}],[\"对象生成后\",{\"1\":{\"2071\":1}}],[\"对象就有\",{\"1\":{\"2055\":1}}],[\"对象就是一个复杂值\",{\"1\":{\"981\":1}}],[\"对象也是浏览器环境中的一个原生对象\",{\"1\":{\"2051\":1}}],[\"对象也可以作为函数的形式参数\",{\"1\":{\"833\":1}}],[\"对象打交道\",{\"1\":{\"2048\":1}}],[\"对象赋值给\",{\"1\":{\"2047\":1}}],[\"对象内部所定义的方法\",{\"1\":{\"2047\":1}}],[\"对象暴露出去给开发者使用的方法\",{\"1\":{\"2046\":1}}],[\"对象负责处理路由的导航\",{\"1\":{\"2029\":1}}],[\"对象主要为后续路由的跳转提供支持\",{\"1\":{\"2028\":1}}],[\"对象主要是用于处理和时间相关的操作\",{\"1\":{\"873\":1}}],[\"对象或者是一个函数\",{\"1\":{\"2070\":1}}],[\"对象或者将\",{\"1\":{\"895\":1}}],[\"对象或函数\",{\"1\":{\"2019\":1}}],[\"对象里\",{\"1\":{\"2016\":1}}],[\"对象里面解构出来一些值\",{\"1\":{\"2058\":2}}],[\"对象里面解构出\",{\"1\":{\"2057\":1}}],[\"对象里面\",{\"1\":{\"1153\":2,\"2055\":1}}],[\"对象里面提供了moveto\",{\"1\":{\"1088\":1}}],[\"对象里面还有诸如下表中所示的其他方法\",{\"1\":{\"884\":1}}],[\"对象里面是不能够存放相同的元素的\",{\"1\":{\"864\":1}}],[\"对象里面的某一个元素\",{\"1\":{\"862\":1}}],[\"对象作为\",{\"1\":{\"1954\":1}}],[\"对象作为函数参数\",{\"0\":{\"833\":1}}],[\"对象键值对数量的操作都应该触发副作用函数重新执行\",{\"1\":{\"1930\":1}}],[\"对象默认不包含可迭代协议\",{\"1\":{\"1904\":1}}],[\"对象必要的内部方法\",{\"1\":{\"1903\":1}}],[\"对象必须有两个方法\",{\"1\":{\"404\":1}}],[\"对象和\",{\"0\":{\"1903\":1}}],[\"对象和数组不一样\",{\"1\":{\"770\":1}}],[\"对象传递给其他\",{\"1\":{\"1673\":1}}],[\"对象绑定事件\",{\"1\":{\"1575\":1}}],[\"对象绑定了\",{\"1\":{\"1034\":1}}],[\"对象类型\",{\"1\":{\"1490\":1}}],[\"对象类型的数据\",{\"1\":{\"1487\":1}}],[\"对象写法\",{\"1\":{\"1453\":2,\"1804\":1}}],[\"对象写法适用于\",{\"1\":{\"1385\":1}}],[\"对象来维护所有\",{\"1\":{\"2016\":1}}],[\"对象来描述\",{\"1\":{\"1877\":1}}],[\"对象来代理\",{\"1\":{\"1366\":1}}],[\"对象来进行数据传递的拖动\",{\"1\":{\"765\":1}}],[\"对象式\",{\"1\":{\"1361\":1}}],[\"对象缓存起来使用\",{\"0\":{\"1238\":1}}],[\"对象已经是\",{\"1\":{\"1232\":1}}],[\"对象不需要考虑浏览器兼容性问题\",{\"1\":{\"1219\":1}}],[\"对象不能有重名的属性\",{\"1\":{\"958\":1}}],[\"对象了\",{\"1\":{\"1204\":1}}],[\"对象扩展多个方法\",{\"1\":{\"1201\":1}}],[\"对象扩展一个方法\",{\"1\":{\"1201\":1}}],[\"对象呢\",{\"1\":{\"1198\":1}}],[\"对象又能否转换为\",{\"1\":{\"1198\":1}}],[\"对象方式多种多样\",{\"1\":{\"1198\":1}}],[\"对象方法\",{\"0\":{\"1161\":1}}],[\"对象会自动被传入到所绑定的回调函数里面\",{\"1\":{\"1152\":1}}],[\"对象结束\",{\"1\":{\"1141\":1}}],[\"对象结构\",{\"1\":{\"867\":1}}],[\"对象开始\",{\"1\":{\"1141\":1}}],[\"对象开始捕获\",{\"1\":{\"1140\":1}}],[\"对象首先接收到\",{\"1\":{\"1140\":1}}],[\"对象表示将网页中的每一个部分都转换为了一个对象\",{\"1\":{\"1109\":1}}],[\"对象还有很多其他的属性可选\",{\"1\":{\"1105\":1}}],[\"对象还有一个watchposition\",{\"1\":{\"1102\":1}}],[\"对象还有计算测量精度的属性\",{\"1\":{\"1102\":1}}],[\"对象还有几个其他的属性\",{\"1\":{\"1102\":1}}],[\"对象有一个\",{\"1\":{\"1102\":1}}],[\"对象给指定的回调函数\",{\"1\":{\"1102\":1}}],[\"对象使得脚本程序可以模拟浏览器工具栏的前进和后退按钮\",{\"1\":{\"1095\":1}}],[\"对象用来管理当前窗口最近访问过的\",{\"1\":{\"1095\":1}}],[\"对象用来保存这个时间段内所有要保存的数据\",{\"1\":{\"768\":1}}],[\"对象提供了当前窗口中加载的文档的有关信息\",{\"1\":{\"1092\":1}}],[\"对象提供了一系列\",{\"1\":{\"877\":2}}],[\"对象所包含的属性大致如下表\",{\"1\":{\"1091\":1}}],[\"对象属性如下表\",{\"1\":{\"1098\":1}}],[\"对象属性\",{\"0\":{\"1091\":1}}],[\"对象属性的顺序可以随意\",{\"1\":{\"833\":1}}],[\"对象为我们提供了便利\",{\"1\":{\"1090\":1}}],[\"对象包含浏览器和运行浏览器的操作系统的大量信息\",{\"1\":{\"1090\":1}}],[\"对象介绍\",{\"0\":{\"1090\":1}}],[\"对象扮演着在\",{\"1\":{\"1086\":1}}],[\"对象基本介绍\",{\"0\":{\"1086\":1}}],[\"对象同时也是最顶层的对象\",{\"1\":{\"1083\":1}}],[\"对象与原型的相关方法\",{\"0\":{\"1050\":1}}],[\"对象与二进制\",{\"1\":{\"404\":1}}],[\"对象与二\",{\"1\":{\"404\":1}}],[\"对象字面量模式\",{\"0\":{\"1046\":1}}],[\"对象字面量和\",{\"1\":{\"895\":1}}],[\"对象进阶理解\",{\"0\":{\"1043\":1}}],[\"对象实例了\",{\"1\":{\"995\":1}}],[\"对象上新建一个\",{\"1\":{\"2016\":1}}],[\"对象上定义一个不可枚举的属性\",{\"1\":{\"1936\":1}}],[\"对象上面去拿\",{\"1\":{\"2058\":1}}],[\"对象上面\",{\"1\":{\"1150\":1}}],[\"对象上执行\",{\"1\":{\"995\":1}}],[\"对象上有与之同名的\",{\"1\":{\"681\":1}}],[\"对象下的方法\",{\"1\":{\"1928\":1}}],[\"对象下\",{\"1\":{\"987\":1}}],[\"对象没有任何引用了\",{\"1\":{\"1889\":1}}],[\"对象没有一个具体的类型\",{\"1\":{\"1047\":1}}],[\"对象没有赋值的属性\",{\"1\":{\"980\":1}}],[\"对象没有可以直接读写的属性\",{\"1\":{\"877\":1}}],[\"对象继承了\",{\"1\":{\"925\":1}}],[\"对象通用方法\",{\"1\":{\"925\":1}}],[\"对象时\",{\"1\":{\"897\":1}}],[\"对象时传入数组\",{\"1\":{\"861\":1}}],[\"对象时传入数组与调用add\",{\"1\":{\"861\":1}}],[\"对象转换为原生对象\",{\"1\":{\"1198\":1}}],[\"对象转换为字符串\",{\"1\":{\"895\":1}}],[\"对象转成数组\",{\"1\":{\"995\":1}}],[\"对象转为字符串\",{\"0\":{\"896\":1}}],[\"对象以及双引号引起来的字符串\",{\"1\":{\"895\":1}}],[\"对象简谱\",{\"1\":{\"895\":1}}],[\"对象常见的方法如下表\",{\"1\":{\"1097\":1}}],[\"对象常见的属性如下表\",{\"1\":{\"879\":1}}],[\"对象常见属性如下表\",{\"1\":{\"1096\":1}}],[\"对象常用属性和方法\",{\"0\":{\"830\":1}}],[\"对象返回一个字符串\",{\"1\":{\"877\":1}}],[\"对象一共有\",{\"1\":{\"877\":1}}],[\"对象之前\",{\"1\":{\"874\":1}}],[\"对象是整个\",{\"1\":{\"1086\":1}}],[\"对象是从外部库引入的一个对象\",{\"1\":{\"828\":1}}],[\"对象是由一个一个键值对组成的\",{\"1\":{\"827\":1}}],[\"对象创建\",{\"1\":{\"816\":1}}],[\"对象调用其中某一种读取方法后\",{\"1\":{\"773\":1}}],[\"对象形式\",{\"1\":{\"1453\":3,\"2019\":1}}],[\"对象形式的\",{\"1\":{\"773\":1}}],[\"对象形式返回所有的查询字符串\",{\"1\":{\"305\":1}}],[\"对象的时候执行\",{\"1\":{\"2047\":1}}],[\"对象的时间部分的字符串\",{\"1\":{\"877\":1}}],[\"对象的\",{\"1\":{\"2043\":1,\"2058\":1}}],[\"对象的同名方法\",{\"1\":{\"2042\":1}}],[\"对象的变化\",{\"1\":{\"2016\":1}}],[\"对象的变量和其他变量区分开来\",{\"1\":{\"1238\":1}}],[\"对象的代理\",{\"1\":{\"2001\":1}}],[\"对象的代理操作\",{\"1\":{\"1889\":1}}],[\"对象的每个属性添加getter\",{\"1\":{\"1784\":1}}],[\"对象的响应式\",{\"0\":{\"1784\":1}}],[\"对象的简写形式\",{\"1\":{\"1450\":1}}],[\"对象的标识\",{\"1\":{\"1394\":1}}],[\"对象的标准的日期时间字符串格式的字符串\",{\"1\":{\"877\":1}}],[\"对象的长度\",{\"1\":{\"1202\":2}}],[\"对象的requestpermission\",{\"1\":{\"1105\":1}}],[\"对象的一个属性\",{\"1\":{\"1102\":1,\"1151\":1}}],[\"对象的一个元素\",{\"1\":{\"861\":2}}],[\"对象的公开标准\",{\"1\":{\"1098\":1}}],[\"对象的open\",{\"1\":{\"1088\":1}}],[\"对象的方法从而控制浏览器前进或者后退\",{\"1\":{\"2048\":1}}],[\"对象的方法\",{\"1\":{\"1086\":1,\"1199\":1}}],[\"对象的方法保存\",{\"1\":{\"937\":1}}],[\"对象的角色\",{\"1\":{\"1086\":1}}],[\"对象的内容\",{\"1\":{\"1053\":1}}],[\"对象的隐式原型的值为其对应构造函数的显式原型的值\",{\"1\":{\"1008\":1}}],[\"对象的函数\",{\"1\":{\"953\":1}}],[\"对象的属性存在的\",{\"1\":{\"1111\":1}}],[\"对象的属性如下表\",{\"1\":{\"1093\":1}}],[\"对象的属性真的就是一模一样么\",{\"1\":{\"1086\":1}}],[\"对象的属性\",{\"1\":{\"1086\":2,\"1092\":2,\"1112\":1,\"1161\":1}}],[\"对象的属性拥有全局作用域\",{\"1\":{\"1018\":1}}],[\"对象的属性保存\",{\"1\":{\"937\":1}}],[\"对象的属性名都只能是字符串\",{\"1\":{\"828\":1}}],[\"对象的lastindex属性的变化\",{\"1\":{\"925\":1}}],[\"对象的正则匹配方法只有两个\",{\"1\":{\"925\":1}}],[\"对象的tostring\",{\"1\":{\"925\":1}}],[\"对象的实例方法共\",{\"1\":{\"925\":1}}],[\"对象的实例方法个数太多\",{\"1\":{\"877\":1}}],[\"对象的值不会被改变\",{\"1\":{\"1201\":1}}],[\"对象的值也会被改变\",{\"1\":{\"1201\":1}}],[\"对象的值\",{\"1\":{\"877\":1}}],[\"对象的日期部分的字符串\",{\"1\":{\"877\":1}}],[\"对象的大多数方法分为两种形式\",{\"1\":{\"877\":1}}],[\"对象的intro\",{\"1\":{\"834\":1}}],[\"对象的解构\",{\"0\":{\"832\":1}}],[\"对象的解构赋值\",{\"1\":{\"285\":1}}],[\"对象的任何属性都可以通过delete运算符来从对象中删除\",{\"1\":{\"829\":1}}],[\"对象的列表作为\",{\"1\":{\"772\":1}}],[\"对象的类数组序列\",{\"1\":{\"771\":1}}],[\"对象即可\",{\"1\":{\"770\":1,\"1954\":1}}],[\"对象真实的像素数据\",{\"1\":{\"737\":1}}],[\"对象中获取\",{\"1\":{\"2065\":1}}],[\"对象中取出工具函数\",{\"1\":{\"1979\":1}}],[\"对象中定义的属性值的类型并不总是与\",{\"1\":{\"1949\":1}}],[\"对象中后追加的属性\",{\"1\":{\"1396\":1}}],[\"对象中所有属性添加到\",{\"1\":{\"1366\":1}}],[\"对象中属性的操作\",{\"1\":{\"1366\":1}}],[\"对象中删除\",{\"1\":{\"1211\":1}}],[\"对象中的函数取出并挂载到instance\",{\"1\":{\"2001\":1}}],[\"对象中的数据会暴露到渲染函数中\",{\"1\":{\"1953\":1}}],[\"对象中的属性\",{\"1\":{\"1486\":1}}],[\"对象中的属性有时也称之为\",{\"1\":{\"176\":1}}],[\"对象中的下标值\",{\"1\":{\"1202\":1}}],[\"对象中封装了当前元素对应的样式\",{\"1\":{\"1129\":1}}],[\"对象中常见的方法如下表\",{\"1\":{\"1094\":1}}],[\"对象中常见的方法有哪些\",{\"1\":{\"1088\":1}}],[\"对象中常见的属性有哪些\",{\"1\":{\"1087\":1}}],[\"对象中作为该对象的一个方法\",{\"1\":{\"991\":1}}],[\"对象中就会有\",{\"1\":{\"769\":1}}],[\"对象中\",{\"1\":{\"765\":1,\"768\":1,\"861\":1}}],[\"对象中读取数据\",{\"1\":{\"765\":1}}],[\"对象中存放的数据\",{\"1\":{\"765\":1}}],[\"对象中存入数据\",{\"1\":{\"765\":1}}],[\"对象中存储着\",{\"1\":{\"737\":1}}],[\"对象操纵像素数据\",{\"1\":{\"735\":1}}],[\"对象添加处理\",{\"1\":{\"487\":3}}],[\"对象取出每个迭代的元素\",{\"1\":{\"401\":1}}],[\"对象被转化为元组或列表后\",{\"1\":{\"401\":1}}],[\"对象身上添加路由\",{\"1\":{\"321\":1}}],[\"对象可以通过app\",{\"1\":{\"2016\":1}}],[\"对象可以设置响应报文\",{\"1\":{\"273\":1}}],[\"对象可以获得请求报文的数据\",{\"1\":{\"273\":1}}],[\"对象保存在内存中\",{\"1\":{\"158\":1}}],[\"对象\",{\"0\":{\"737\":1,\"739\":1,\"765\":1,\"826\":1,\"873\":1,\"885\":1,\"897\":1,\"966\":1,\"973\":1,\"1085\":1,\"1089\":1,\"1092\":1,\"1095\":1,\"1098\":1,\"1219\":1,\"2028\":1,\"2029\":1,\"2047\":1,\"2051\":1},\"1\":{\"154\":1,\"191\":1,\"192\":2,\"238\":1,\"284\":2,\"319\":1,\"402\":1,\"722\":1,\"731\":1,\"736\":1,\"759\":1,\"765\":1,\"770\":1,\"772\":4,\"773\":2,\"860\":1,\"861\":1,\"868\":1,\"895\":2,\"938\":1,\"991\":1,\"995\":5,\"996\":1,\"1000\":1,\"1002\":1,\"1015\":3,\"1053\":1,\"1073\":1,\"1083\":1,\"1086\":2,\"1098\":1,\"1105\":1,\"1109\":1,\"1112\":2,\"1139\":1,\"1141\":2,\"1154\":1,\"1187\":1,\"1189\":1,\"1198\":8,\"1199\":2,\"1204\":5,\"1205\":1,\"1206\":1,\"1207\":1,\"1224\":1,\"1227\":1,\"1232\":7,\"1385\":1,\"1392\":1,\"1404\":1,\"1432\":1,\"1487\":2,\"1488\":1,\"1492\":2,\"1502\":2,\"1509\":1,\"1575\":1,\"1655\":5,\"1757\":1,\"1776\":1,\"1783\":1,\"1786\":3,\"1873\":1,\"1877\":1,\"1928\":3,\"1929\":2,\"1930\":3,\"1977\":1,\"1998\":1,\"2001\":1,\"2015\":1,\"2016\":3,\"2018\":1,\"2019\":1,\"2042\":1,\"2047\":7,\"2048\":1,\"2055\":1,\"2058\":2,\"2061\":1,\"2065\":1}}],[\"对\",{\"0\":{\"1115\":1},\"1\":{\"59\":1,\"355\":1,\"379\":1,\"681\":1,\"773\":1,\"865\":1,\"1124\":1,\"1194\":1,\"1201\":1,\"1448\":1,\"1599\":1,\"1603\":1,\"1665\":1,\"1752\":1,\"1889\":1,\"1949\":1,\"1968\":1,\"2058\":1,\"2101\":2}}],[\"对于密码\",{\"1\":{\"2101\":1}}],[\"对于用户提交的数据\",{\"1\":{\"2095\":1}}],[\"对于用户输入的数据进行过滤和校验\",{\"1\":{\"2095\":1}}],[\"对于字符串字面量\",{\"1\":{\"1979\":1}}],[\"对于数组元素的查找\",{\"1\":{\"1922\":1}}],[\"对于索引大于或等于新的\",{\"1\":{\"1918\":1,\"1993\":1}}],[\"对于for\",{\"1\":{\"1906\":1}}],[\"对于编译器来说\",{\"1\":{\"1880\":1}}],[\"对于user\",{\"1\":{\"1854\":1,\"1855\":1}}],[\"对于根实例computed的初始化\",{\"1\":{\"1846\":1}}],[\"对于组件computed的初始化\",{\"1\":{\"1845\":1}}],[\"对于直接传递的固定值\",{\"1\":{\"1840\":1}}],[\"对于对象来说\",{\"1\":{\"1786\":1}}],[\"对于估算出的一份量\",{\"1\":{\"1722\":1}}],[\"对于并列结构段落的选项判断\",{\"1\":{\"1692\":1}}],[\"对于那些消息量少的场景\",{\"1\":{\"1647\":1}}],[\"对于附带身份凭证的请求\",{\"1\":{\"1612\":1}}],[\"对于不同的跨域场景\",{\"1\":{\"1601\":1}}],[\"对于不再有用的变量打上标记\",{\"1\":{\"1028\":1}}],[\"对于前端开发者\",{\"1\":{\"1568\":1}}],[\"对于前端来说\",{\"1\":{\"218\":1}}],[\"对于有面向对象语言背景的用户来说\",{\"1\":{\"1485\":1}}],[\"对于一个附带身份凭证的请求\",{\"1\":{\"1612\":1}}],[\"对于一个\",{\"1\":{\"1468\":1}}],[\"对于一些受保护的文档来说是一种选择\",{\"1\":{\"1162\":1}}],[\"对于一些自定义属性\",{\"1\":{\"1125\":1}}],[\"对于纯\",{\"1\":{\"1317\":1}}],[\"对于确定第三方样式表的作用域非常有用\",{\"1\":{\"1314\":1}}],[\"对于将\",{\"1\":{\"1314\":1}}],[\"对于第\",{\"1\":{\"1161\":1}}],[\"对于其他浏览器来说\",{\"1\":{\"1161\":1}}],[\"对于其他元素\",{\"1\":{\"548\":1}}],[\"对于\",{\"1\":{\"1161\":1,\"1926\":1,\"1949\":1,\"1998\":1}}],[\"对于滚动事件的优化处理还将涉及到节流的概念\",{\"1\":{\"1153\":1}}],[\"对于持续运行的服务进程\",{\"1\":{\"1027\":1}}],[\"对于复杂值\",{\"1\":{\"984\":1}}],[\"对于exec\",{\"1\":{\"925\":1}}],[\"对于开启了定位的元素\",{\"1\":{\"575\":1}}],[\"对于开发是有利的\",{\"1\":{\"558\":1}}],[\"对于开发者而言\",{\"1\":{\"216\":1}}],[\"对于<table>\",{\"1\":{\"548\":1}}],[\"对于未排序的数据\",{\"1\":{\"412\":1}}],[\"对于未知的资源类型\",{\"1\":{\"294\":1}}],[\"对于满足部分共性的对象\",{\"1\":{\"405\":1}}],[\"对于全部都遵守的共性\",{\"1\":{\"405\":1}}],[\"对于自己创建的模块\",{\"1\":{\"238\":1}}],[\"对于后台和运维来说\",{\"1\":{\"218\":1}}],[\"对于陌生的项目\",{\"1\":{\"77\":1}}],[\"对于基本导出\",{\"1\":{\"50\":1}}],[\"对于合并分支来说最终的结果是一样的\",{\"1\":{\"11\":1}}],[\"iloc\",{\"1\":{\"1655\":2}}],[\"iview\",{\"1\":{\"1471\":1}}],[\"ig\",{\"1\":{\"894\":1}}],[\"ignorecase\",{\"1\":{\"923\":2}}],[\"ignore\",{\"1\":{\"15\":2,\"919\":1,\"1799\":3,\"1802\":1,\"1803\":1,\"1804\":1,\"1805\":4}}],[\"ii\",{\"1\":{\"670\":1}}],[\"iife\",{\"0\":{\"29\":1,\"30\":1},\"1\":{\"29\":2,\"30\":1,\"155\":1,\"948\":4}}],[\"itr\",{\"1\":{\"1931\":7,\"1932\":5}}],[\"it\",{\"1\":{\"1786\":2,\"1804\":1,\"2053\":1,\"2058\":1,\"2065\":1}}],[\"its\",{\"1\":{\"1786\":2}}],[\"iter\",{\"1\":{\"1680\":5}}],[\"iterateeffects\",{\"1\":{\"1906\":6,\"1930\":3,\"1932\":3,\"1990\":3}}],[\"iterate\",{\"1\":{\"1906\":9,\"1920\":1,\"1928\":1,\"1930\":7,\"1931\":2,\"1932\":7,\"1989\":1,\"1990\":2,\"1993\":1}}],[\"iterator\",{\"1\":{\"1778\":1,\"1921\":2,\"1931\":11,\"1932\":3,\"2029\":3}}],[\"iterator1\",{\"1\":{\"1392\":2}}],[\"iterationmethod\",{\"1\":{\"1931\":5,\"1932\":3}}],[\"iteration\",{\"1\":{\"644\":1}}],[\"iterable\",{\"1\":{\"841\":1,\"1778\":1}}],[\"item>\",{\"1\":{\"845\":1}}],[\"items>\",{\"1\":{\"843\":1}}],[\"items的设置\",{\"1\":{\"590\":1}}],[\"items\",{\"1\":{\"589\":1,\"604\":1,\"790\":2,\"1392\":2,\"1785\":3}}],[\"item\",{\"1\":{\"155\":4,\"263\":3,\"287\":4,\"401\":3,\"417\":10,\"451\":4,\"453\":2,\"456\":6,\"464\":2,\"846\":2,\"853\":2,\"945\":10,\"947\":2,\"1392\":10,\"1769\":2}}],[\"italic\",{\"1\":{\"621\":2}}],[\"i++\",{\"1\":{\"410\":1,\"411\":1,\"412\":1,\"413\":1,\"414\":2,\"415\":2,\"419\":1,\"478\":1,\"480\":1,\"491\":1,\"498\":1,\"499\":1,\"740\":1,\"772\":2,\"773\":1,\"821\":1,\"822\":2,\"846\":1,\"932\":1,\"1038\":1,\"1088\":1,\"1120\":1,\"1188\":1,\"1194\":1,\"1239\":2,\"1778\":1,\"1785\":3,\"1792\":1,\"1794\":2,\"1795\":4,\"1796\":1,\"1803\":1,\"1804\":1,\"1814\":1,\"1815\":1,\"1816\":1,\"1822\":1,\"1890\":1,\"1955\":1,\"1961\":3,\"1962\":2,\"1966\":2,\"1969\":2,\"1976\":1,\"1977\":6,\"1979\":1,\"1984\":1,\"2073\":1}}],[\"iat\",{\"1\":{\"366\":1,\"368\":1}}],[\"icons\",{\"1\":{\"1259\":1,\"1262\":2}}],[\"icon图标以及内容\",{\"1\":{\"1105\":1}}],[\"icon\",{\"1\":{\"623\":1,\"765\":3,\"1105\":4,\"1259\":1,\"1262\":4,\"1269\":4,\"1278\":4,\"1288\":4}}],[\"iconfont\",{\"0\":{\"622\":1,\"624\":1}}],[\"ico\",{\"1\":{\"282\":1,\"1427\":1}}],[\"ipsum\",{\"1\":{\"1112\":9,\"1120\":2,\"1123\":4,\"1150\":4,\"1153\":1,\"2101\":1}}],[\"iphone6\",{\"1\":{\"650\":1}}],[\"ipaddress\",{\"1\":{\"501\":2}}],[\"ipbinary\",{\"1\":{\"501\":2}}],[\"iptobinary\",{\"1\":{\"501\":3}}],[\"ip是否处于cidr范围\",{\"0\":{\"500\":1}}],[\"ipconfig\",{\"1\":{\"373\":1}}],[\"ip\",{\"1\":{\"282\":1,\"373\":4,\"501\":4,\"1530\":1}}],[\"ip的应用层通信协议\",{\"1\":{\"266\":1}}],[\"i>\",{\"1\":{\"143\":4,\"623\":2}}],[\"id不存在则添加的是options数据\",{\"1\":{\"2019\":1}}],[\"idoroptions\",{\"1\":{\"2019\":4}}],[\"id+setup\",{\"1\":{\"2019\":1}}],[\"id+options\",{\"1\":{\"2019\":1}}],[\"idtotemplate\",{\"1\":{\"1805\":1}}],[\"id选择器\",{\"1\":{\"1805\":1}}],[\"identifier\",{\"1\":{\"931\":1,\"958\":1,\"1975\":4,\"1978\":3}}],[\"ide\",{\"1\":{\"649\":1}}],[\"ideal\",{\"1\":{\"648\":1}}],[\"idea\",{\"1\":{\"15\":1,\"2099\":1}}],[\"idxinold\",{\"1\":{\"1789\":5,\"1966\":4}}],[\"idx\",{\"1\":{\"487\":2,\"857\":2,\"1655\":1}}],[\"idcard\",{\"1\":{\"338\":1}}],[\"id号比3大的所有的记录\",{\"1\":{\"205\":1}}],[\"id字段设置为主键\",{\"1\":{\"176\":1}}],[\"id\",{\"0\":{\"1234\":1,\"1236\":1},\"1\":{\"176\":6,\"181\":1,\"192\":1,\"201\":1,\"203\":1,\"205\":1,\"209\":2,\"306\":3,\"340\":3,\"354\":2,\"356\":1,\"380\":1,\"382\":4,\"493\":1,\"516\":3,\"524\":2,\"664\":1,\"680\":1,\"681\":1,\"694\":1,\"697\":1,\"756\":1,\"758\":1,\"765\":3,\"993\":6,\"1088\":6,\"1102\":5,\"1112\":2,\"1181\":6,\"1198\":3,\"1205\":1,\"1232\":1,\"1234\":2,\"1236\":2,\"1239\":1,\"1392\":2,\"1393\":4,\"1394\":1,\"1407\":3,\"1423\":1,\"1428\":1,\"1459\":4,\"1460\":1,\"1461\":3,\"1462\":5,\"1464\":2,\"1515\":1,\"1584\":1,\"1585\":1,\"1784\":1,\"1788\":1,\"1797\":3,\"1828\":5,\"1834\":1,\"1975\":1,\"1978\":1,\"1979\":3,\"2019\":11,\"2020\":2,\"2021\":5,\"2028\":11,\"2045\":6,\"2047\":2,\"2071\":1}}],[\"id=$\",{\"1\":{\"1459\":1}}],[\"id=456\",{\"1\":{\"493\":1}}],[\"id=123\",{\"1\":{\"493\":1}}],[\"id=371522199111299668\",{\"1\":{\"338\":1}}],[\"id=\",{\"1\":{\"143\":1,\"657\":2,\"681\":1,\"685\":2,\"694\":1,\"697\":1,\"764\":1,\"765\":4,\"772\":4,\"773\":2,\"993\":2,\"1087\":6,\"1088\":7,\"1112\":10,\"1120\":3,\"1123\":6,\"1124\":1,\"1139\":2,\"1140\":2,\"1144\":2,\"1145\":1,\"1146\":2,\"1148\":9,\"1150\":1,\"1152\":4,\"1153\":2,\"1154\":2,\"1156\":5,\"1157\":3,\"1158\":3,\"1160\":2,\"1161\":3,\"1162\":2,\"1207\":2,\"1216\":1,\"1219\":1,\"1231\":1,\"1348\":1,\"1393\":1,\"1401\":1,\"1788\":1,\"1792\":2,\"1797\":1,\"1834\":1,\"2047\":2,\"2050\":2,\"2061\":3}}],[\"i\",{\"0\":{\"385\":1},\"1\":{\"66\":3,\"68\":1,\"69\":1,\"71\":1,\"72\":4,\"73\":1,\"74\":2,\"75\":2,\"82\":5,\"86\":1,\"123\":1,\"128\":1,\"133\":1,\"138\":1,\"142\":4,\"143\":1,\"147\":1,\"148\":2,\"190\":1,\"215\":1,\"286\":1,\"300\":1,\"326\":1,\"331\":1,\"332\":1,\"340\":1,\"349\":1,\"355\":1,\"389\":1,\"408\":1,\"410\":3,\"411\":6,\"412\":4,\"413\":4,\"414\":3,\"415\":11,\"416\":10,\"419\":3,\"422\":2,\"439\":2,\"472\":3,\"478\":5,\"480\":2,\"491\":2,\"498\":2,\"499\":5,\"670\":1,\"740\":4,\"772\":12,\"773\":5,\"777\":2,\"786\":13,\"789\":6,\"794\":6,\"796\":3,\"797\":2,\"798\":3,\"810\":2,\"821\":3,\"822\":6,\"828\":7,\"829\":2,\"830\":19,\"834\":2,\"844\":2,\"846\":15,\"853\":2,\"854\":10,\"863\":8,\"870\":8,\"883\":6,\"888\":1,\"896\":1,\"901\":3,\"911\":5,\"919\":3,\"921\":1,\"923\":1,\"931\":2,\"932\":3,\"935\":2,\"939\":12,\"943\":2,\"945\":10,\"946\":6,\"953\":12,\"958\":7,\"995\":2,\"996\":7,\"1015\":3,\"1038\":2,\"1086\":6,\"1088\":14,\"1112\":6,\"1120\":3,\"1188\":2,\"1194\":3,\"1199\":2,\"1239\":6,\"1353\":2,\"1358\":1,\"1368\":1,\"1407\":1,\"1434\":1,\"1439\":1,\"1456\":1,\"1482\":1,\"1483\":1,\"1583\":1,\"1591\":1,\"1675\":1,\"1680\":4,\"1778\":2,\"1785\":9,\"1789\":20,\"1792\":15,\"1794\":15,\"1795\":12,\"1796\":3,\"1797\":1,\"1803\":3,\"1804\":6,\"1807\":3,\"1814\":3,\"1815\":3,\"1816\":7,\"1822\":3,\"1862\":2,\"1890\":3,\"1955\":3,\"1961\":10,\"1962\":8,\"1966\":6,\"1969\":19,\"1976\":3,\"1977\":23,\"1979\":4,\"1984\":3,\"2028\":1,\"2031\":7,\"2043\":3,\"2065\":1,\"2073\":4,\"2101\":1}}],[\"iframe\",{\"1\":{\"1601\":1}}],[\"iframe>\",{\"1\":{\"667\":1}}],[\"if的时\",{\"1\":{\"1390\":1}}],[\"if的值\",{\"1\":{\"1388\":1}}],[\"ifprocessed\",{\"1\":{\"1388\":1,\"1796\":1}}],[\"ifconditions循环一遍\",{\"1\":{\"1795\":1}}],[\"ifconditions\",{\"1\":{\"1388\":1,\"1795\":7}}],[\"if可以和v\",{\"1\":{\"1388\":1}}],[\"if=\",{\"1\":{\"1388\":2,\"1515\":1}}],[\"if\",{\"0\":{\"1388\":1},\"1\":{\"37\":1,\"71\":3,\"155\":1,\"191\":1,\"200\":1,\"201\":2,\"202\":2,\"203\":4,\"205\":1,\"206\":2,\"207\":2,\"209\":1,\"210\":1,\"211\":1,\"212\":2,\"239\":1,\"244\":1,\"246\":1,\"250\":2,\"254\":1,\"255\":2,\"257\":2,\"258\":1,\"259\":3,\"260\":1,\"263\":1,\"285\":2,\"294\":4,\"355\":3,\"368\":1,\"377\":1,\"401\":3,\"402\":1,\"410\":2,\"411\":2,\"412\":1,\"413\":1,\"414\":4,\"415\":4,\"416\":3,\"417\":3,\"418\":2,\"419\":1,\"421\":1,\"424\":3,\"428\":2,\"430\":1,\"432\":2,\"436\":3,\"438\":5,\"441\":3,\"443\":3,\"451\":1,\"452\":1,\"456\":2,\"458\":1,\"461\":1,\"463\":1,\"469\":1,\"472\":4,\"474\":1,\"476\":2,\"478\":1,\"479\":1,\"480\":1,\"482\":4,\"483\":3,\"486\":3,\"487\":2,\"488\":4,\"493\":2,\"494\":1,\"498\":1,\"499\":3,\"704\":1,\"713\":1,\"727\":1,\"740\":1,\"772\":1,\"773\":1,\"797\":1,\"818\":5,\"824\":1,\"855\":4,\"883\":1,\"924\":2,\"925\":1,\"945\":4,\"948\":2,\"953\":3,\"967\":1,\"1036\":1,\"1038\":1,\"1039\":1,\"1088\":1,\"1091\":5,\"1104\":2,\"1105\":6,\"1132\":1,\"1153\":1,\"1154\":2,\"1156\":1,\"1158\":1,\"1162\":1,\"1187\":1,\"1252\":1,\"1259\":1,\"1274\":5,\"1282\":1,\"1283\":1,\"1284\":5,\"1307\":3,\"1353\":3,\"1357\":1,\"1358\":3,\"1360\":1,\"1368\":4,\"1370\":2,\"1388\":4,\"1392\":1,\"1395\":1,\"1404\":2,\"1407\":3,\"1423\":2,\"1428\":10,\"1446\":1,\"1467\":5,\"1537\":6,\"1575\":2,\"1576\":2,\"1577\":2,\"1582\":2,\"1655\":1,\"1675\":1,\"1680\":2,\"1769\":1,\"1772\":1,\"1777\":10,\"1778\":3,\"1785\":7,\"1786\":10,\"1789\":37,\"1790\":1,\"1791\":1,\"1792\":44,\"1793\":3,\"1794\":16,\"1795\":17,\"1796\":8,\"1799\":8,\"1800\":1,\"1802\":10,\"1803\":9,\"1804\":33,\"1805\":16,\"1806\":3,\"1807\":6,\"1810\":2,\"1814\":1,\"1815\":1,\"1816\":6,\"1821\":1,\"1822\":8,\"1824\":3,\"1825\":5,\"1828\":4,\"1849\":3,\"1855\":3,\"1862\":1,\"1864\":1,\"1878\":3,\"1879\":2,\"1888\":1,\"1889\":8,\"1890\":5,\"1892\":2,\"1893\":3,\"1894\":1,\"1895\":1,\"1896\":4,\"1897\":11,\"1906\":9,\"1907\":1,\"1909\":1,\"1910\":3,\"1912\":2,\"1913\":3,\"1914\":13,\"1917\":5,\"1918\":6,\"1921\":4,\"1923\":8,\"1924\":1,\"1925\":1,\"1927\":3,\"1928\":4,\"1929\":5,\"1930\":2,\"1932\":2,\"1938\":1,\"1944\":3,\"1948\":4,\"1949\":10,\"1950\":1,\"1951\":19,\"1954\":7,\"1955\":4,\"1956\":8,\"1961\":2,\"1962\":6,\"1965\":4,\"1966\":9,\"1968\":2,\"1969\":8,\"1974\":11,\"1976\":1,\"1977\":7,\"1978\":3,\"1979\":1,\"1984\":1,\"1985\":6,\"1986\":2,\"1987\":5,\"1990\":6,\"1991\":3,\"1992\":4,\"1993\":15,\"2001\":1,\"2002\":2,\"2016\":1,\"2019\":3,\"2020\":3,\"2026\":1,\"2027\":1,\"2029\":10,\"2031\":3,\"2034\":4,\"2043\":1,\"2047\":7,\"2053\":1,\"2054\":4,\"2055\":2,\"2057\":1,\"2058\":10,\"2061\":8,\"2065\":10,\"2069\":5,\"2070\":3,\"2073\":4,\"2074\":3,\"2075\":7,\"2081\":2}}],[\"in操作符\",{\"1\":{\"1906\":1}}],[\"inbrowser\",{\"1\":{\"1806\":1}}],[\"inactive\",{\"1\":{\"1800\":1}}],[\"inargs\",{\"1\":{\"463\":2,\"464\":2,\"1039\":2}}],[\"inregex\",{\"1\":{\"1794\":4}}],[\"inplace\",{\"1\":{\"1666\":2}}],[\"inplace=true\",{\"1\":{\"1666\":3}}],[\"input标签的el\",{\"1\":{\"1948\":1}}],[\"inputs\",{\"1\":{\"1655\":2,\"1659\":2}}],[\"input=\",{\"1\":{\"1358\":2}}],[\"input表示应用正则表达式的字符串\",{\"1\":{\"925\":1}}],[\"input字符串中lastmatch之后的文本\",{\"1\":{\"924\":1}}],[\"input字符串中lastmatch之前的文本\",{\"1\":{\"924\":1}}],[\"input>\",{\"1\":{\"697\":1}}],[\"input\",{\"1\":{\"681\":2,\"697\":1,\"756\":1,\"758\":2,\"907\":1,\"908\":1,\"911\":1,\"913\":3,\"914\":3,\"916\":2,\"918\":2,\"923\":5,\"924\":2,\"925\":5,\"1034\":1,\"1088\":1,\"1201\":3,\"1203\":1,\"1218\":1,\"1352\":1,\"1356\":1,\"1357\":3,\"1358\":5,\"1368\":1,\"1392\":2,\"1499\":3,\"1663\":10,\"1665\":4,\"1666\":1,\"1792\":5,\"1793\":1,\"1794\":1,\"1948\":1}}],[\"input的其他属性\",{\"1\":{\"670\":1}}],[\"indent\",{\"1\":{\"1979\":3}}],[\"indexeddb等等\",{\"1\":{\"1601\":1}}],[\"indexarray\",{\"1\":{\"925\":3}}],[\"index表示匹配项在字符串的位置\",{\"1\":{\"925\":1}}],[\"index和input\",{\"1\":{\"925\":1}}],[\"index需要一个整数作为参数\",{\"1\":{\"575\":1}}],[\"index属性来指定元素的层级\",{\"1\":{\"575\":1}}],[\"indexof\",{\"1\":{\"457\":1,\"856\":4,\"890\":3,\"1358\":1,\"1393\":1,\"1395\":1,\"1428\":1,\"1792\":4,\"1824\":1,\"1924\":2,\"1993\":2,\"2043\":1,\"2058\":2,\"2061\":1}}],[\"index++\",{\"1\":{\"414\":1,\"499\":1,\"1769\":1}}],[\"index函数\",{\"1\":{\"389\":1}}],[\"index\",{\"0\":{\"2012\":1},\"1\":{\"40\":1,\"64\":2,\"71\":4,\"77\":1,\"91\":1,\"124\":3,\"128\":2,\"138\":5,\"142\":2,\"143\":4,\"149\":1,\"155\":1,\"176\":2,\"212\":2,\"236\":1,\"238\":2,\"264\":9,\"268\":2,\"294\":2,\"316\":2,\"332\":2,\"414\":6,\"417\":2,\"457\":2,\"499\":4,\"577\":1,\"578\":3,\"727\":3,\"907\":1,\"908\":1,\"911\":1,\"913\":3,\"914\":3,\"916\":2,\"918\":2,\"923\":5,\"925\":6,\"946\":4,\"1093\":2,\"1202\":1,\"1265\":2,\"1271\":4,\"1275\":1,\"1301\":1,\"1302\":1,\"1305\":1,\"1306\":1,\"1307\":1,\"1308\":2,\"1309\":4,\"1310\":2,\"1312\":1,\"1313\":1,\"1314\":3,\"1315\":5,\"1318\":5,\"1392\":6,\"1393\":4,\"1394\":1,\"1396\":2,\"1427\":1,\"1450\":1,\"1535\":2,\"1571\":1,\"1600\":1,\"1655\":3,\"1769\":4,\"1778\":2,\"1786\":2,\"1789\":2,\"1790\":1,\"1792\":23,\"1793\":7,\"1917\":1,\"2029\":6,\"2040\":3,\"2042\":1,\"2045\":1,\"2047\":1,\"2049\":1,\"2050\":4,\"2051\":2,\"2061\":3,\"2065\":5,\"2075\":2}}],[\"indouble\",{\"1\":{\"1794\":4}}],[\"indices\",{\"1\":{\"1663\":1}}],[\"injecteddepth\",{\"1\":{\"2068\":2}}],[\"injectedroute\",{\"1\":{\"2068\":3}}],[\"injected\",{\"1\":{\"1803\":1}}],[\"injectionsymbols\",{\"1\":{\"2040\":1}}],[\"injections\",{\"1\":{\"1799\":1}}],[\"inject\",{\"0\":{\"1508\":1,\"1803\":1},\"1\":{\"1480\":1,\"1508\":3,\"1799\":1,\"1803\":14,\"2016\":2,\"2019\":2,\"2047\":7,\"2065\":4,\"2066\":1,\"2068\":2}}],[\"innertext和textcontent方法的区别\",{\"1\":{\"1124\":1}}],[\"innertext用于获取元素节点的文本值\",{\"1\":{\"1124\":1}}],[\"innertext\",{\"1\":{\"1120\":1,\"1124\":4,\"1157\":3,\"1205\":2,\"1407\":1,\"1872\":1,\"1888\":1,\"1890\":1}}],[\"inner\",{\"1\":{\"1087\":1}}],[\"innerheight\",{\"1\":{\"1087\":4,\"1206\":1}}],[\"innerheight以及outerwidth\",{\"1\":{\"1087\":1}}],[\"innerhtml的时候为true\",{\"1\":{\"1788\":1}}],[\"innerhtml则用于用户元素节点下面的所有东西\",{\"1\":{\"1124\":1}}],[\"innerhtml\",{\"0\":{\"1124\":1},\"1\":{\"480\":1,\"772\":2,\"773\":2,\"1088\":1,\"1124\":3,\"1139\":5,\"1140\":5,\"1156\":2,\"1198\":3,\"1205\":2,\"1208\":5,\"1576\":1,\"1577\":1,\"1578\":2,\"1805\":1,\"2050\":3}}],[\"innerwidth\",{\"1\":{\"1087\":5,\"1206\":1}}],[\"increment\",{\"1\":{\"1453\":2,\"1454\":1,\"1486\":2,\"1493\":3,\"2019\":2}}],[\"incrementwait\",{\"1\":{\"1453\":3,\"1454\":1}}],[\"incrementodd\",{\"1\":{\"1453\":3,\"1454\":1}}],[\"incompatible\",{\"1\":{\"1338\":1}}],[\"inc\",{\"1\":{\"995\":10}}],[\"include属性中包含的是组件的名字\",{\"1\":{\"1465\":1}}],[\"include=\",{\"1\":{\"1465\":2}}],[\"include\",{\"1\":{\"1252\":1,\"1259\":1,\"1262\":1,\"1273\":1,\"1274\":2,\"1282\":1,\"1284\":1,\"1293\":2,\"1294\":1,\"1295\":2,\"1296\":1,\"1299\":1,\"1302\":2,\"1303\":1,\"1304\":1,\"1305\":1,\"1306\":1,\"1307\":2,\"1314\":1,\"1317\":1,\"1612\":1}}],[\"includesparams\",{\"1\":{\"2065\":2}}],[\"includes等方法查找是否存在某属性时\",{\"1\":{\"1922\":1}}],[\"includes\",{\"0\":{\"1923\":1},\"1\":{\"355\":2,\"456\":1,\"856\":4,\"889\":3,\"1915\":1,\"1923\":9,\"1924\":2,\"1993\":2,\"2058\":1}}],[\"included\",{\"1\":{\"156\":1}}],[\"including\",{\"1\":{\"156\":2}}],[\"in是迭代数组的键\",{\"1\":{\"846\":1}}],[\"in主要迭代的是数组的键\",{\"1\":{\"846\":1}}],[\"in虽然说可以遍历出一个对象的所有的属性和方法\",{\"1\":{\"830\":1}}],[\"in来循环遍历一个对象的所有属性\",{\"1\":{\"830\":1}}],[\"in来取出数组的键\",{\"1\":{\"830\":1}}],[\"in我们在前面讲解遍历数组的时候已经见到过了\",{\"1\":{\"830\":1}}],[\"invoker\",{\"1\":{\"1949\":18}}],[\"invokers\",{\"1\":{\"1949\":2}}],[\"invoked\",{\"1\":{\"29\":1}}],[\"invalid\",{\"1\":{\"759\":1,\"865\":2,\"876\":2,\"1805\":1}}],[\"inheritattrs\",{\"1\":{\"2067\":1}}],[\"inherit\",{\"1\":{\"466\":2,\"532\":1,\"1072\":2}}],[\"infinite\",{\"1\":{\"644\":2}}],[\"infinity\",{\"1\":{\"449\":2,\"708\":1,\"794\":5,\"810\":1}}],[\"information\",{\"1\":{\"2061\":1}}],[\"info\",{\"1\":{\"155\":2,\"403\":2,\"770\":3,\"836\":4,\"958\":2}}],[\"insingle\",{\"1\":{\"1794\":4}}],[\"inset\",{\"1\":{\"613\":1}}],[\"insecure\",{\"1\":{\"269\":1}}],[\"insertmatcher\",{\"1\":{\"2042\":1}}],[\"insertmany\",{\"1\":{\"200\":1}}],[\"insertedvnodequeue\",{\"1\":{\"1789\":16}}],[\"inserted\",{\"1\":{\"1406\":1,\"1407\":2,\"1518\":1,\"1785\":5}}],[\"insertafter\",{\"1\":{\"1208\":1,\"1209\":1}}],[\"insertbefore\",{\"1\":{\"1119\":2,\"1208\":1,\"1209\":1,\"1789\":3,\"1946\":1}}],[\"insertsort\",{\"1\":{\"412\":1}}],[\"insert\",{\"1\":{\"181\":1,\"390\":1,\"1789\":3,\"1946\":2,\"1948\":2,\"1951\":1,\"1962\":2,\"1965\":2,\"1966\":1,\"1969\":1}}],[\"instantiation\",{\"1\":{\"1799\":1,\"1804\":1}}],[\"instances\",{\"1\":{\"2028\":1,\"2031\":3,\"2069\":3,\"2070\":1,\"2074\":1,\"2075\":1}}],[\"instanceof\",{\"0\":{\"1065\":1},\"1\":{\"428\":1,\"472\":2,\"816\":1,\"966\":2,\"967\":1,\"1065\":4,\"1777\":1,\"1799\":1,\"2075\":1}}],[\"instance\",{\"1\":{\"424\":3,\"1786\":2,\"1804\":3,\"1954\":15,\"1955\":2,\"1956\":1,\"1997\":16,\"2000\":5,\"2001\":16,\"2002\":16,\"2019\":2,\"2069\":10}}],[\"installedapps\",{\"1\":{\"2047\":6}}],[\"installedplugins\",{\"1\":{\"1824\":5}}],[\"installrenderhelpers\",{\"1\":{\"1797\":1}}],[\"installation\",{\"1\":{\"1483\":1}}],[\"install的第一个参数是\",{\"1\":{\"1432\":1}}],[\"install\",{\"1\":{\"66\":3,\"74\":1,\"81\":1,\"129\":1,\"143\":1,\"148\":1,\"149\":1,\"229\":1,\"1426\":1,\"1432\":1,\"1441\":1,\"1824\":6,\"2009\":1,\"2016\":4,\"2026\":5,\"2041\":2,\"2047\":8}}],[\"instead\",{\"1\":{\"259\":1,\"1804\":1,\"1805\":1}}],[\"intemplatestring\",{\"1\":{\"1794\":4}}],[\"interaction3\",{\"1\":{\"1181\":2}}],[\"interaction2\",{\"1\":{\"1181\":4}}],[\"interaction\",{\"1\":{\"1181\":3}}],[\"interval\",{\"1\":{\"408\":2,\"1038\":2}}],[\"interfaces\",{\"1\":{\"2041\":1}}],[\"interface\",{\"1\":{\"335\":1,\"958\":1,\"1515\":1,\"1594\":4,\"2058\":3,\"2061\":1}}],[\"internet\",{\"1\":{\"294\":1,\"956\":1,\"1088\":1,\"1124\":2,\"1135\":1,\"1138\":3,\"1139\":2,\"1140\":1,\"1145\":1,\"1146\":1,\"1151\":2,\"1154\":1,\"1156\":6,\"1157\":1,\"1160\":1,\"1161\":8}}],[\"internalcomponentoptions\",{\"1\":{\"1825\":1}}],[\"internal\",{\"1\":{\"271\":1,\"1635\":1,\"1799\":2,\"1804\":1,\"1903\":1}}],[\"intro\",{\"1\":{\"834\":4,\"1658\":3}}],[\"introduction\",{\"1\":{\"773\":1,\"1485\":1,\"2047\":1}}],[\"int\",{\"1\":{\"165\":5,\"380\":1,\"382\":2,\"395\":2,\"402\":1}}],[\"in\",{\"1\":{\"155\":1,\"156\":6,\"259\":1,\"275\":1,\"392\":1,\"401\":3,\"402\":1,\"404\":1,\"436\":1,\"438\":2,\"441\":1,\"469\":1,\"474\":1,\"493\":1,\"641\":2,\"666\":1,\"743\":2,\"772\":1,\"830\":10,\"846\":2,\"865\":2,\"897\":1,\"958\":3,\"1055\":1,\"1060\":1,\"1269\":2,\"1273\":1,\"1278\":1,\"1287\":1,\"1288\":1,\"1289\":2,\"1290\":4,\"1352\":1,\"1370\":1,\"1392\":3,\"1446\":2,\"1655\":2,\"1659\":1,\"1661\":3,\"1662\":1,\"1667\":3,\"1669\":1,\"1680\":2,\"1786\":3,\"1802\":2,\"1803\":2,\"1804\":11,\"1878\":1,\"1897\":2,\"1904\":2,\"1905\":2,\"1915\":1,\"1920\":1,\"1937\":2,\"1948\":2,\"1951\":3,\"1954\":2,\"1955\":3,\"1956\":6,\"1989\":2,\"1993\":1,\"2020\":1,\"2045\":1,\"2047\":3,\"2074\":1}}],[\"inlinetemplate\",{\"1\":{\"1796\":1}}],[\"inline\",{\"1\":{\"142\":1,\"540\":4,\"546\":4,\"548\":11,\"552\":1,\"578\":1,\"585\":1,\"1339\":3,\"1341\":2,\"1795\":1}}],[\"initslots\",{\"1\":{\"1997\":1,\"2001\":1}}],[\"initstate\",{\"1\":{\"1799\":1,\"1804\":1}}],[\"inituse\",{\"1\":{\"1824\":1}}],[\"initwatch\",{\"1\":{\"1804\":3}}],[\"initcomputed将组件定义的计算属性挂载到组件构造函数的\",{\"1\":{\"1825\":1}}],[\"initcomputed\",{\"1\":{\"1804\":3,\"1825\":1,\"1845\":1}}],[\"initdata\",{\"1\":{\"1804\":3}}],[\"initmethods时直接遍历所有定义的\",{\"1\":{\"1861\":1}}],[\"initmethods\",{\"1\":{\"1804\":3}}],[\"initmixin\",{\"1\":{\"1799\":1}}],[\"init`\",{\"1\":{\"1799\":1}}],[\"initprops\",{\"1\":{\"1804\":3,\"1825\":1,\"1839\":1,\"1997\":1,\"2001\":1}}],[\"initprovide\",{\"1\":{\"1799\":1,\"1803\":1}}],[\"initproxy\",{\"1\":{\"1799\":1}}],[\"initlifecycle\",{\"1\":{\"1799\":1,\"1800\":1}}],[\"initinjections\",{\"1\":{\"1799\":1,\"1803\":1}}],[\"initinternalcomponent内部\",{\"1\":{\"1802\":1}}],[\"initinternalcomponent\",{\"1\":{\"1799\":1,\"1802\":1,\"1864\":2}}],[\"initialdepth++\",{\"1\":{\"2068\":1}}],[\"initialdepth\",{\"1\":{\"2068\":3}}],[\"initialvnode\",{\"1\":{\"2000\":4,\"2002\":2}}],[\"initialvalue\",{\"1\":{\"438\":2}}],[\"initial\",{\"1\":{\"287\":2,\"329\":1,\"402\":1,\"438\":1,\"532\":1,\"580\":1,\"592\":2,\"649\":1,\"764\":1,\"773\":1,\"1974\":5}}],[\"initvalue\",{\"1\":{\"1487\":1}}],[\"initrender\",{\"1\":{\"1446\":1,\"1799\":1,\"1864\":2}}],[\"initevents\",{\"1\":{\"1799\":1,\"1802\":2}}],[\"initevent\",{\"1\":{\"1357\":1,\"1802\":1}}],[\"init\",{\"1\":{\"6\":1,\"64\":4,\"82\":2,\"87\":2,\"300\":1,\"376\":2,\"405\":3,\"1423\":1,\"1424\":1,\"1655\":2,\"1669\":2,\"1670\":2,\"1671\":2,\"1673\":2,\"1680\":3,\"1799\":2,\"1802\":2,\"1825\":1,\"1836\":1,\"1862\":1,\"2026\":2}}],[\"isexactactive\",{\"1\":{\"2065\":5,\"2066\":3}}],[\"iserror\",{\"1\":{\"1353\":2,\"2029\":1}}],[\"isbrowser\",{\"1\":{\"2047\":2,\"2054\":1}}],[\"isbeingdestroyed\",{\"1\":{\"1800\":1,\"1807\":3}}],[\"isbuiltintag\",{\"1\":{\"1795\":1}}],[\"ismounted\",{\"1\":{\"1800\":1,\"1806\":2,\"1954\":5,\"2002\":2}}],[\"ismethodpath\",{\"1\":{\"1370\":1}}],[\"istanbul\",{\"1\":{\"1799\":3,\"1802\":1,\"1803\":1,\"1804\":1,\"1805\":4}}],[\"istrue\",{\"1\":{\"1394\":1,\"1789\":6,\"1802\":1}}],[\"isnative\",{\"1\":{\"1822\":3}}],[\"isnan\",{\"1\":{\"795\":6}}],[\"isnonphrasingtag\",{\"1\":{\"1792\":1}}],[\"isoptionsstore\",{\"1\":{\"2020\":2}}],[\"isonce\",{\"1\":{\"1788\":1,\"1789\":1}}],[\"isobject\",{\"1\":{\"421\":2,\"1423\":1,\"1855\":1}}],[\"isroutelocation\",{\"1\":{\"2075\":1}}],[\"isroutecomponent\",{\"1\":{\"2074\":1}}],[\"isroot\",{\"1\":{\"1804\":3}}],[\"isrootinsert\",{\"1\":{\"1788\":1}}],[\"isreserved\",{\"1\":{\"1804\":2}}],[\"isreservedattr\",{\"1\":{\"1804\":1}}],[\"isreservedattribute\",{\"1\":{\"1804\":1}}],[\"isrenderwatcher为\",{\"1\":{\"1806\":1}}],[\"isrenderwatcher\",{\"1\":{\"1784\":1,\"1806\":1}}],[\"isready\",{\"1\":{\"2041\":2,\"2046\":1}}],[\"isreadonly\",{\"1\":{\"1509\":1,\"1914\":8,\"1917\":2,\"1918\":2,\"1920\":1,\"1921\":3,\"1923\":4,\"1927\":1,\"1928\":1,\"1992\":6,\"1993\":4}}],[\"isreactive\",{\"1\":{\"1509\":1,\"2019\":1,\"2020\":1}}],[\"isref\",{\"1\":{\"1509\":1,\"1936\":3,\"1937\":3,\"1938\":3,\"2019\":1,\"2020\":2}}],[\"isremoval\",{\"1\":{\"1428\":2}}],[\"isvue\",{\"1\":{\"1786\":2,\"1799\":1}}],[\"isvalidarrayindex\",{\"1\":{\"1786\":2}}],[\"isusingmicrotask\",{\"1\":{\"1822\":2}}],[\"isunmounted\",{\"1\":{\"2070\":1}}],[\"isunarytag\",{\"1\":{\"1791\":2,\"1792\":3}}],[\"isundef\",{\"1\":{\"1394\":1,\"1786\":2,\"1789\":6,\"1802\":4}}],[\"isupdatingchildcomponent\",{\"1\":{\"1430\":1,\"1804\":1}}],[\"ishot被修改了\",{\"1\":{\"1378\":1,\"1380\":4}}],[\"ishot\",{\"1\":{\"1378\":1,\"1380\":4}}],[\"isdestroyed\",{\"1\":{\"1800\":1,\"1807\":1}}],[\"isdef\",{\"1\":{\"1358\":2,\"1394\":2,\"1428\":1,\"1789\":21,\"2026\":1,\"2031\":4}}],[\"isdirectchildoftemplatefor\",{\"1\":{\"1795\":1}}],[\"isdirectory\",{\"1\":{\"260\":1}}],[\"isdynamic\",{\"1\":{\"1353\":2,\"1368\":3,\"1407\":1}}],[\"isplatformreservedtag\",{\"1\":{\"1795\":2}}],[\"isplaintextelement\",{\"1\":{\"1792\":2}}],[\"isplainobject\",{\"1\":{\"1423\":1,\"1802\":1,\"1804\":2,\"1810\":1,\"1828\":1}}],[\"ispatchable\",{\"1\":{\"1789\":1}}],[\"isprimitive\",{\"1\":{\"1786\":2,\"1789\":1}}],[\"ispromiselike\",{\"1\":{\"1777\":1}}],[\"ispromsiselike\",{\"1\":{\"1777\":2}}],[\"isproxy\",{\"1\":{\"1509\":1}}],[\"isprototypeof\",{\"1\":{\"1066\":3}}],[\"ispointinpath\",{\"1\":{\"745\":1}}],[\"isie\",{\"1\":{\"1822\":1}}],[\"isios\",{\"1\":{\"1822\":1}}],[\"isinfor\",{\"1\":{\"1795\":4}}],[\"isinstance\",{\"1\":{\"402\":2,\"405\":2}}],[\"isipincidrrange\",{\"1\":{\"501\":2}}],[\"isflushing\",{\"1\":{\"1954\":4}}],[\"isfunctioninvocation\",{\"1\":{\"1370\":1}}],[\"isfunctionexpression\",{\"1\":{\"1370\":1}}],[\"isfuntion\",{\"1\":{\"421\":2}}],[\"isfinite\",{\"1\":{\"794\":2}}],[\"isfile\",{\"1\":{\"260\":1}}],[\"isalpha\",{\"1\":{\"1974\":7}}],[\"isalive\",{\"1\":{\"408\":1}}],[\"isauth\",{\"1\":{\"1467\":2}}],[\"isasyncplaceholder\",{\"1\":{\"1394\":1,\"1788\":1,\"1789\":2}}],[\"isactive\",{\"1\":{\"1353\":2,\"2065\":5,\"2066\":2}}],[\"isarray\",{\"1\":{\"450\":1,\"451\":1,\"452\":1,\"453\":1,\"472\":1,\"493\":1,\"967\":1,\"1358\":1,\"1428\":2,\"1446\":1,\"1785\":3,\"1786\":2,\"1789\":1,\"1804\":1,\"1814\":1,\"1816\":1,\"1878\":1,\"1917\":2,\"1918\":2,\"1920\":1,\"1923\":1,\"1948\":1,\"1949\":1,\"1951\":4,\"1993\":5,\"2045\":1,\"2081\":1}}],[\"isadmin\",{\"1\":{\"402\":1,\"2012\":1}}],[\"issameroutelocationparams\",{\"1\":{\"2065\":2}}],[\"issamerouterecord\",{\"1\":{\"2065\":3,\"2069\":1,\"2073\":2}}],[\"issuecomment\",{\"1\":{\"2065\":1}}],[\"issues\",{\"1\":{\"2065\":1}}],[\"issubclass\",{\"1\":{\"405\":2}}],[\"isserverrendering\",{\"1\":{\"1804\":2}}],[\"issending\",{\"1\":{\"1582\":4}}],[\"isssr\",{\"1\":{\"1804\":2}}],[\"isstatickey\",{\"1\":{\"1795\":1}}],[\"isstatic\",{\"1\":{\"1788\":1,\"1789\":2,\"1795\":2}}],[\"isshallow\",{\"1\":{\"1913\":3,\"1914\":4,\"1917\":1,\"1918\":1,\"1920\":1,\"1921\":2,\"1923\":2,\"1927\":1,\"1928\":1,\"1991\":3,\"1992\":1,\"1993\":2}}],[\"isshow\",{\"1\":{\"1388\":4,\"1441\":3,\"1515\":2}}],[\"isshine\",{\"1\":{\"1104\":4}}],[\"iss\",{\"1\":{\"366\":1}}],[\"iscomputed\",{\"1\":{\"2020\":2}}],[\"iscomponent\",{\"1\":{\"1799\":1,\"1802\":1,\"1825\":1}}],[\"iscomment\",{\"1\":{\"1394\":2,\"1788\":1,\"1789\":2,\"1791\":1}}],[\"iscloned\",{\"1\":{\"1788\":1,\"1789\":1}}],[\"isc\",{\"1\":{\"64\":3}}],[\"is\",{\"0\":{\"1052\":1},\"1\":{\"29\":1,\"156\":4,\"388\":3,\"398\":6,\"428\":1,\"430\":1,\"432\":1,\"436\":2,\"438\":2,\"441\":2,\"443\":2,\"520\":1,\"783\":1,\"786\":1,\"798\":1,\"808\":1,\"809\":1,\"828\":1,\"829\":1,\"834\":2,\"916\":6,\"925\":1,\"939\":3,\"940\":1,\"943\":2,\"948\":5,\"958\":1,\"981\":1,\"995\":1,\"996\":1,\"1086\":3,\"1144\":4,\"1145\":2,\"1146\":3,\"1204\":1,\"1430\":1,\"1559\":1,\"1675\":1,\"1677\":1,\"1792\":1,\"1799\":2,\"1803\":3,\"1804\":5,\"1805\":1,\"1827\":1,\"1953\":2,\"2058\":2,\"2065\":3,\"2075\":3}}],[\"ie8\",{\"1\":{\"1030\":1,\"1098\":2}}],[\"ie7\",{\"1\":{\"1030\":1}}],[\"ie9+\",{\"1\":{\"1029\":1}}],[\"ie9\",{\"1\":{\"691\":1,\"702\":1}}],[\"ie=edge\",{\"1\":{\"287\":2,\"329\":1,\"764\":1,\"773\":1}}],[\"ie\",{\"0\":{\"1579\":1},\"1\":{\"22\":1,\"23\":1,\"24\":1,\"702\":1,\"765\":1,\"1087\":5,\"1098\":11,\"1128\":1,\"1139\":1,\"1140\":1,\"1196\":2,\"1572\":1,\"1579\":2,\"1792\":2,\"1822\":1}}],[\"io\",{\"1\":{\"16\":2,\"223\":1,\"224\":2,\"1650\":1}}],[\"immediate\",{\"1\":{\"1378\":2,\"1380\":2,\"1497\":4,\"1810\":1,\"1897\":4,\"1987\":3,\"2069\":1}}],[\"immediately\",{\"1\":{\"29\":1}}],[\"im\",{\"1\":{\"219\":1,\"395\":2}}],[\"imissyou\",{\"1\":{\"207\":1}}],[\"imgdata\",{\"1\":{\"740\":8}}],[\"imgname\",{\"1\":{\"496\":2}}],[\"imgs\",{\"1\":{\"478\":5}}],[\"img\",{\"1\":{\"158\":2,\"292\":2,\"293\":1,\"295\":1,\"390\":1,\"409\":2,\"413\":1,\"478\":1,\"507\":1,\"508\":1,\"605\":1,\"628\":1,\"635\":1,\"666\":2,\"718\":1,\"719\":1,\"727\":4,\"740\":14,\"765\":5,\"980\":1,\"981\":1,\"1040\":1,\"1328\":1,\"1644\":1,\"1647\":2,\"1648\":1,\"1655\":2,\"1789\":4,\"1790\":2,\"1805\":1,\"1806\":1,\"1807\":1}}],[\"implements\",{\"1\":{\"958\":1}}],[\"implied\",{\"1\":{\"156\":1}}],[\"impact\",{\"1\":{\"732\":1}}],[\"important\",{\"1\":{\"524\":1,\"1358\":1}}],[\"important样式\",{\"1\":{\"523\":1}}],[\"importlib\",{\"1\":{\"377\":1}}],[\"importdeclaration\",{\"1\":{\"155\":2}}],[\"import\",{\"0\":{\"1319\":1},\"1\":{\"50\":4,\"52\":2,\"124\":3,\"138\":4,\"143\":1,\"155\":1,\"377\":1,\"378\":11,\"379\":1,\"402\":1,\"1262\":1,\"1300\":2,\"1301\":1,\"1302\":2,\"1307\":1,\"1313\":22,\"1314\":5,\"1315\":6,\"1316\":6,\"1317\":5,\"1318\":2,\"1319\":14,\"1320\":10,\"1328\":2,\"1427\":2,\"1431\":2,\"1439\":1,\"1441\":1,\"1450\":3,\"1451\":2,\"1456\":3,\"1484\":2,\"1486\":1,\"1493\":2,\"1496\":1,\"1499\":4,\"1507\":1,\"1516\":2,\"1655\":8,\"1656\":2,\"1659\":2,\"1661\":1,\"1662\":2,\"1663\":4,\"1665\":2,\"1666\":1,\"1667\":1,\"1669\":2,\"1670\":2,\"1671\":2,\"1673\":2,\"1674\":1,\"1675\":2,\"1877\":1,\"2010\":4,\"2012\":1,\"2013\":1,\"2016\":1,\"2019\":2,\"2025\":4,\"2041\":4,\"2047\":6,\"2052\":2,\"2053\":3}}],[\"import语句\",{\"1\":{\"50\":1}}],[\"iml\",{\"1\":{\"15\":1}}],[\"imageonline\",{\"1\":{\"1974\":1}}],[\"imagenet\",{\"1\":{\"1656\":1}}],[\"imagedata\",{\"0\":{\"737\":1,\"739\":1},\"1\":{\"735\":1,\"736\":1,\"737\":1,\"739\":2}}],[\"image来设置\",{\"1\":{\"636\":1}}],[\"image068\",{\"1\":{\"408\":1}}],[\"image066\",{\"1\":{\"408\":1}}],[\"image064\",{\"1\":{\"408\":1}}],[\"image062\",{\"1\":{\"408\":1}}],[\"image060\",{\"1\":{\"405\":1}}],[\"image058\",{\"1\":{\"405\":1}}],[\"image056\",{\"1\":{\"405\":1}}],[\"image054\",{\"1\":{\"405\":1}}],[\"image052\",{\"1\":{\"405\":1}}],[\"image050\",{\"1\":{\"405\":1}}],[\"image048\",{\"1\":{\"405\":1}}],[\"image046\",{\"1\":{\"405\":1}}],[\"image044\",{\"1\":{\"405\":1}}],[\"image042\",{\"1\":{\"405\":1}}],[\"image040\",{\"1\":{\"405\":1}}],[\"image038\",{\"1\":{\"405\":1}}],[\"image036\",{\"1\":{\"405\":1}}],[\"image034\",{\"1\":{\"405\":1}}],[\"image032\",{\"1\":{\"405\":1}}],[\"image030\",{\"1\":{\"405\":1}}],[\"image028\",{\"1\":{\"405\":1}}],[\"image026\",{\"1\":{\"405\":1}}],[\"image024\",{\"1\":{\"404\":1}}],[\"image022\",{\"1\":{\"404\":1}}],[\"image020\",{\"1\":{\"404\":1}}],[\"image018\",{\"1\":{\"404\":1}}],[\"image016\",{\"1\":{\"403\":1}}],[\"image014\",{\"1\":{\"402\":1}}],[\"image012\",{\"1\":{\"402\":1}}],[\"image010\",{\"1\":{\"402\":1}}],[\"image008\",{\"1\":{\"402\":1}}],[\"image006\",{\"1\":{\"402\":1}}],[\"image004\",{\"1\":{\"390\":1}}],[\"images\",{\"1\":{\"142\":3,\"148\":1,\"332\":1,\"666\":1,\"1328\":2,\"1658\":3,\"1678\":1}}],[\"image\",{\"1\":{\"11\":1,\"223\":1,\"260\":1,\"284\":2,\"294\":5,\"336\":1,\"347\":1,\"354\":2,\"385\":1,\"418\":1,\"419\":1,\"496\":11,\"520\":2,\"533\":1,\"564\":1,\"628\":1,\"636\":3,\"662\":1,\"665\":1,\"666\":1,\"675\":1,\"680\":2,\"696\":1,\"697\":2,\"706\":3,\"717\":1,\"722\":3,\"723\":2,\"725\":1,\"726\":1,\"727\":1,\"737\":1,\"740\":1,\"773\":1,\"1023\":2,\"1069\":1,\"1150\":1,\"1168\":1,\"1181\":1,\"1203\":1,\"1259\":1,\"1262\":2,\"1332\":4,\"1411\":1,\"1433\":3,\"1446\":3,\"1483\":2,\"1494\":2,\"1554\":1,\"1555\":1,\"1556\":1,\"1558\":2,\"1570\":1,\"1571\":1,\"1580\":1,\"1584\":2,\"1600\":1,\"1602\":1,\"1603\":1,\"1605\":1,\"1610\":1,\"1611\":1,\"1614\":2,\"1615\":3,\"1616\":3,\"1622\":1,\"1623\":1,\"1624\":1,\"1626\":2,\"1628\":1,\"1629\":1,\"1630\":1,\"1632\":1,\"1635\":1,\"1636\":1,\"1655\":6,\"1675\":1,\"1742\":1,\"1748\":1,\"1757\":1,\"1758\":1,\"1779\":1,\"1832\":1,\"1834\":1,\"1836\":1,\"1838\":2,\"1847\":1,\"1861\":1,\"1862\":1,\"1864\":1,\"1865\":1,\"1866\":1,\"1873\":1,\"1889\":1,\"1890\":2,\"1891\":1,\"1897\":1,\"1903\":3,\"1937\":1,\"1951\":1,\"1964\":1,\"1965\":1,\"1972\":3,\"1977\":1,\"2011\":1,\"2014\":1,\"2071\":1}}],[\"当导航触发的时候\",{\"1\":{\"2072\":1}}],[\"当导入名为\",{\"1\":{\"379\":1}}],[\"当加载或者更新指定组件时候会触发\",{\"1\":{\"2071\":1}}],[\"当加工逻辑比较复杂且其他组件需要进行复用时\",{\"1\":{\"1452\":1}}],[\"当进入指定路由的时候会触发\",{\"1\":{\"2071\":1}}],[\"当进行\",{\"1\":{\"1862\":1}}],[\"当进行了会影响布局树的操作后\",{\"1\":{\"1527\":1}}],[\"当外部获取的时候\",{\"1\":{\"2047\":1}}],[\"当目标路由成功激活时\",{\"1\":{\"2032\":1}}],[\"当执行\",{\"1\":{\"2026\":1}}],[\"当执行结束消失\",{\"1\":{\"1020\":1}}],[\"当更新依赖时代替副作用函数执行\",{\"1\":{\"1985\":1}}],[\"当这里的代码运行时\",{\"1\":{\"1977\":1}}],[\"当这个值的引用次数变成\",{\"1\":{\"1030\":1}}],[\"当组件更新是因为内部数据变更引起的自更新时\",{\"1\":{\"2002\":1}}],[\"当组件自身的响应式数据发生变化时\",{\"1\":{\"1954\":1}}],[\"当组件挂载时\",{\"1\":{\"1862\":1}}],[\"当伪造的事件处理函数执行时\",{\"1\":{\"1949\":1}}],[\"当要删除的元素确实存在时\",{\"1\":{\"1928\":1}}],[\"当访问newobj\",{\"1\":{\"1937\":1}}],[\"当访问\",{\"1\":{\"1927\":1}}],[\"当访问量比较大时\",{\"1\":{\"508\":1}}],[\"当禁止追踪时\",{\"1\":{\"1925\":1,\"1993\":1}}],[\"当第二个副作用函数执行时\",{\"1\":{\"1925\":1}}],[\"当为属性设置新的值时\",{\"1\":{\"1909\":1}}],[\"当为添加了响应式的对象属性设置新的值时\",{\"1\":{\"1784\":1}}],[\"当操作类型为\",{\"1\":{\"1906\":1,\"1917\":1,\"1990\":1,\"1993\":1}}],[\"当再次修改属性值时\",{\"1\":{\"1897\":1}}],[\"当再次打开浏览器时\",{\"1\":{\"768\":1}}],[\"当过期时\",{\"1\":{\"1897\":1,\"1987\":1}}],[\"当计算属性依赖的响应式数据变化时\",{\"1\":{\"1896\":1,\"1986\":1}}],[\"当计算属性依赖的响应式数据发生变化时\",{\"1\":{\"1896\":1}}],[\"当计算属性依赖的响应式属性修改时\",{\"1\":{\"1850\":1}}],[\"当副作用函数执行时\",{\"1\":{\"1890\":1}}],[\"当修改\",{\"1\":{\"1890\":1,\"1918\":1}}],[\"当修改被监听属性的属性值时\",{\"1\":{\"1855\":1}}],[\"当读取计算属性的值时\",{\"1\":{\"1896\":1}}],[\"当读取\",{\"1\":{\"1896\":2,\"1986\":1}}],[\"当读取属性时\",{\"1\":{\"1889\":1}}],[\"当读取操作将要开始之前调用\",{\"1\":{\"773\":1}}],[\"当读取操作完成时调用\",{\"1\":{\"773\":1}}],[\"当读取操作成功完成时调用\",{\"1\":{\"773\":1}}],[\"当读取操作发生错误时调用\",{\"1\":{\"773\":1}}],[\"当读取操作被中止时调用\",{\"1\":{\"773\":1}}],[\"当调用\",{\"1\":{\"1888\":1,\"1891\":1,\"1893\":1,\"1929\":2}}],[\"当调用了该方法\",{\"1\":{\"1821\":1}}],[\"当调用了vm\",{\"1\":{\"1807\":1}}],[\"当被监听属性发生改变时\",{\"1\":{\"1860\":1}}],[\"当被监视的属性变化时\",{\"1\":{\"1377\":1}}],[\"当获取计算属性时\",{\"1\":{\"1859\":1}}],[\"当获取了\",{\"1\":{\"773\":1}}],[\"当需要进行数值计算\",{\"1\":{\"1857\":1}}],[\"当需要在上例的\",{\"1\":{\"1309\":1}}],[\"当computed内有异步操作时无效\",{\"1\":{\"1857\":1}}],[\"当添加自定义\",{\"1\":{\"1855\":1}}],[\"当响应式数据变化时可以更新当前组件\",{\"1\":{\"1849\":1}}],[\"当响应式数据变化时可以更新计算属性\",{\"1\":{\"1849\":1}}],[\"当依赖属性发生变化会触发computed\",{\"1\":{\"1859\":1}}],[\"当依赖属性修改后\",{\"1\":{\"1849\":1}}],[\"当依赖的数据发生改变时会被再次调用\",{\"1\":{\"1375\":1}}],[\"当数据变化时\",{\"1\":{\"1897\":2}}],[\"当数据\",{\"1\":{\"1806\":1}}],[\"当数据发生变化时通知并执行相应的回调函数\",{\"1\":{\"1897\":1}}],[\"当数据发生变化时\",{\"1\":{\"1394\":1}}],[\"当剩下的text不再被正则匹配上时\",{\"1\":{\"1793\":1}}],[\"当sync为false时\",{\"1\":{\"1784\":1}}],[\"当sync为true时\",{\"1\":{\"1784\":1}}],[\"当state中的数据需要经过加工后再使用时\",{\"1\":{\"1452\":1}}],[\"当阅读与定义相关的描述时\",{\"1\":{\"1757\":1}}],[\"当期数据＝当期累计\",{\"1\":{\"1752\":1}}],[\"当比较不同部分对同一整体的增量贡献率时\",{\"1\":{\"1750\":1}}],[\"当月量\",{\"1\":{\"1740\":1}}],[\"当多个选项符合中心主旨时\",{\"1\":{\"1696\":1}}],[\"当多次点击发送请求时会增加服务器的负担\",{\"1\":{\"1582\":1}}],[\"当输入很大或很小的时候\",{\"1\":{\"1666\":1}}],[\"当定义了卷积层后\",{\"1\":{\"1662\":1}}],[\"当卷积和池化层的输出为四维张量\",{\"1\":{\"1661\":1}}],[\"当优化问题的数值解接近局部最优值时\",{\"1\":{\"1658\":1}}],[\"当页面中需要观察实时数据的变化\",{\"1\":{\"1649\":1}}],[\"当页面源和目标源一致时\",{\"1\":{\"1602\":1}}],[\"当协议是https端口为443时\",{\"1\":{\"1626\":1}}],[\"当协议是http端口为80时\",{\"1\":{\"1626\":1}}],[\"当遇到一个复杂问题的时候\",{\"1\":{\"1621\":1}}],[\"当redystate状态值发生变化时触发\",{\"1\":{\"1575\":1}}],[\"当出现明显的比喻和拟人\",{\"1\":{\"1702\":1}}],[\"当出现非\",{\"1\":{\"1639\":1}}],[\"当出现一些特殊的响应码时浏览器会自动完成处理\",{\"1\":{\"1570\":1}}],[\"当出现冲突的时候选择需要保留的代码\",{\"1\":{\"17\":1}}],[\"当发送\",{\"1\":{\"1569\":1}}],[\"当发生过度约束\",{\"0\":{\"574\":1}}],[\"当发生名字冲突时\",{\"1\":{\"378\":1}}],[\"当解析到注释时\",{\"1\":{\"1791\":1}}],[\"当解析到文本时\",{\"1\":{\"1791\":1}}],[\"当解析到结束标签时\",{\"1\":{\"1791\":1}}],[\"当解析到开始标签时\",{\"1\":{\"1791\":1}}],[\"当解析\",{\"1\":{\"1569\":1}}],[\"当一些事情发生的时候\",{\"1\":{\"1569\":1}}],[\"当一个\",{\"1\":{\"1864\":1}}],[\"当一个请求需要附带\",{\"1\":{\"1612\":1}}],[\"当一个源的文档和脚本\",{\"1\":{\"1599\":1}}],[\"当一个变量被声明多次\",{\"1\":{\"1329\":1}}],[\"当一个动作连续触发\",{\"1\":{\"1035\":1,\"1036\":1}}],[\"当一个函数要被执行的时候\",{\"1\":{\"932\":1}}],[\"当一个元素浮动之后\",{\"1\":{\"561\":1}}],[\"当启动浏览器后\",{\"1\":{\"1555\":1}}],[\"当收到服务器响应时\",{\"1\":{\"1545\":1}}],[\"当服务器正常进行响应时处理响应结果\",{\"1\":{\"1575\":1}}],[\"当服务器的版本发生变化时\",{\"1\":{\"1543\":1}}],[\"当服务启动后\",{\"1\":{\"275\":1}}],[\"当文件改动后\",{\"1\":{\"1543\":1}}],[\"当文字超过父元素设置的宽度时\",{\"1\":{\"625\":1}}],[\"当该数据发生变化时就会通知依赖列表中所有的依赖\",{\"1\":{\"1806\":1}}],[\"当该消息头出现在请求中时\",{\"1\":{\"1542\":1}}],[\"当该方法执行的时候\",{\"1\":{\"714\":1}}],[\"当max\",{\"1\":{\"1541\":1}}],[\"当margin和width都设置为\",{\"1\":{\"554\":1}}],[\"当它看到服务器的这个响应头表达的美好愿望后\",{\"1\":{\"1534\":1}}],[\"当所有选项尾数各不相同\",{\"1\":{\"1711\":1}}],[\"当所有资源加载完毕后会触发\",{\"1\":{\"1530\":1}}],[\"当所传参数为空时\",{\"1\":{\"890\":1}}],[\"当改动了可见样式后\",{\"1\":{\"1528\":1}}],[\"当改变数据后\",{\"1\":{\"1440\":1}}],[\"当值为空字符串时\",{\"1\":{\"1949\":1}}],[\"当值为\",{\"1\":{\"1515\":1}}],[\"当渲染具有不可变数据源的大列表时\",{\"1\":{\"1506\":1}}],[\"当绑定的元素被卸载时\",{\"1\":{\"1499\":1}}],[\"当路径较长时\",{\"1\":{\"1460\":1}}],[\"当请求了前端不存在的资源时\",{\"1\":{\"1444\":1}}],[\"当请求处理完毕后就关闭这个线程\",{\"1\":{\"224\":1}}],[\"当父组件的状态发生变化会引起自身的重渲染\",{\"1\":{\"1955\":1}}],[\"当父组件修改属性的内部属性时\",{\"1\":{\"1842\":1}}],[\"当父组件修改数据时\",{\"1\":{\"1841\":1}}],[\"当父组件传递给子组件的\",{\"1\":{\"1840\":1}}],[\"当父组件通过模板引用获取到了该组件的实例时\",{\"1\":{\"1499\":1}}],[\"当父子组件都添加了scoped样式时\",{\"1\":{\"1433\":1}}],[\"当父元素中的空间不足以容纳所有的子元素时\",{\"1\":{\"591\":1}}],[\"当父元素有多余的空间时\",{\"1\":{\"591\":1}}],[\"当子组件使用的是prop数据的内部属性时\",{\"1\":{\"1842\":1}}],[\"当子组件的\",{\"1\":{\"1834\":1}}],[\"当子组件中有多个同名的ref\",{\"1\":{\"1428\":1}}],[\"当子元素浮动后会完全脱离文档流\",{\"1\":{\"562\":1}}],[\"当应用在\",{\"1\":{\"1428\":1}}],[\"当注册组件时的配置对象为原生对象\",{\"1\":{\"1423\":1}}],[\"当各组件发生嵌套时\",{\"1\":{\"1422\":1}}],[\"当没有使用extend定义时\",{\"1\":{\"1421\":1}}],[\"当没有设置宽度和高度的时候\",{\"1\":{\"703\":1}}],[\"当watch中不需要除了handler以外的配置项时\",{\"1\":{\"1380\":1}}],[\"当事件值为方法路径或者函数表达式\",{\"1\":{\"1368\":1}}],[\"当事件发生时就会执行函数中相应的代码\",{\"1\":{\"1142\":1}}],[\"当事件发生时\",{\"1\":{\"1137\":1,\"1151\":1}}],[\"当通过超出\",{\"1\":{\"1917\":1}}],[\"当通过索引设置元素值时\",{\"1\":{\"1916\":1}}],[\"当通过$emit触发事件时\",{\"1\":{\"1368\":1}}],[\"当通知显示的时候被触发\",{\"1\":{\"1105\":1}}],[\"当创建组件实例时\",{\"1\":{\"1368\":1,\"1845\":1}}],[\"当有人修改person的age属性时\",{\"1\":{\"1364\":1}}],[\"当有人读取person的age属性时\",{\"1\":{\"1364\":1}}],[\"当有应用程序使用\",{\"1\":{\"767\":1}}],[\"当生成render函数时\",{\"1\":{\"1353\":1}}],[\"当查看导入的样式表时\",{\"1\":{\"1314\":1}}],[\"当查到匹配的标签后就不会再继续搜寻\",{\"1\":{\"1236\":1}}],[\"当本样式表被其他样式表使用\",{\"1\":{\"1300\":1}}],[\"当本地资源发生变化时\",{\"1\":{\"158\":1}}],[\"当编写带有参数的\",{\"1\":{\"1252\":1}}],[\"当循环结束后\",{\"1\":{\"1239\":1}}],[\"当其中一个状态发生变化时\",{\"1\":{\"1804\":1}}],[\"当其他正常用户浏览页面\",{\"1\":{\"2094\":1}}],[\"当其他代码执行完后\",{\"1\":{\"1224\":1}}],[\"当其他线程完成时\",{\"1\":{\"1180\":1,\"1558\":1}}],[\"当其选项卡的内容变得可见或被隐藏时\",{\"1\":{\"1132\":1}}],[\"当图像加载完毕以后就会显示一个警告框\",{\"1\":{\"1150\":1}}],[\"当鼠标移入\",{\"1\":{\"1577\":1}}],[\"当鼠标滚轮滑动时触发\",{\"1\":{\"1153\":1}}],[\"当鼠标在元素范围内移动内\",{\"1\":{\"1148\":1}}],[\"当鼠标点击源对象后一直移动对象不松手即为拖拽\",{\"1\":{\"762\":1}}],[\"当时是作为分担服务器运算负担的一种手段\",{\"1\":{\"1135\":1}}],[\"当点击按钮后\",{\"1\":{\"1214\":1}}],[\"当点击\",{\"1\":{\"1081\":1}}],[\"当垃圾收集器下一次运行时\",{\"1\":{\"1031\":1}}],[\"当垃圾回收器下次再运行时\",{\"1\":{\"1030\":1}}],[\"当引用次数变成\",{\"1\":{\"1031\":1}}],[\"当包含这个引用类型值的变量又被赋值成另一个值了\",{\"1\":{\"1031\":1}}],[\"当包含块的高度不依赖子元素的高度\",{\"1\":{\"543\":1}}],[\"当包含块的高度设置为\",{\"1\":{\"543\":1}}],[\"当变量离开环境时\",{\"1\":{\"1031\":1}}],[\"当变量进入环境时\",{\"1\":{\"1029\":1,\"1031\":1}}],[\"当声明了一个变量并将一个引用类型值赋给该变量时\",{\"1\":{\"1030\":1}}],[\"当代码执行进入一个环境时\",{\"1\":{\"1013\":1}}],[\"当给对象属性赋值时不会使用原型链\",{\"1\":{\"1009\":1}}],[\"当我点击\",{\"1\":{\"1152\":2}}],[\"当我点击如下位置时打印出来的信息如下\",{\"1\":{\"993\":1}}],[\"当我打开浏览器运行此文件时\",{\"1\":{\"1091\":1}}],[\"当我们调用\",{\"1\":{\"2058\":1}}],[\"当我们点击\",{\"1\":{\"2030\":1}}],[\"当我们点击了子元素之后\",{\"1\":{\"1155\":1}}],[\"当我们点击了页面的\",{\"1\":{\"1140\":1}}],[\"当我们点击了页面上的\",{\"1\":{\"1139\":1}}],[\"当我们执行\",{\"1\":{\"2027\":1,\"2031\":1}}],[\"当我们执行完引用变量的函数\",{\"1\":{\"1023\":1}}],[\"当我们创建两个响应式对象\",{\"1\":{\"1910\":1}}],[\"当我们创建包含属性的对象的时候\",{\"1\":{\"827\":1}}],[\"当我们修改\",{\"1\":{\"1902\":1,\"1943\":1}}],[\"当我们向object数据里添加一对新的key\",{\"1\":{\"1786\":1}}],[\"当我们将选择器使用此函数进行包裹时\",{\"1\":{\"1433\":1}}],[\"当我们添加scoped时\",{\"1\":{\"1433\":1}}],[\"当我们再次点击子元素来触发事件时\",{\"1\":{\"1155\":1}}],[\"当我们按下鼠标时\",{\"1\":{\"1153\":1}}],[\"当我们触发鼠标事件时\",{\"1\":{\"1153\":1}}],[\"当我们触发一个事件的时候\",{\"1\":{\"1152\":1}}],[\"当我们随意按下键盘上的任意按键时\",{\"1\":{\"1149\":1}}],[\"当我们刷新页面之后\",{\"1\":{\"1105\":1}}],[\"当我们试图访问某个不存在的或者没有赋值的变量时\",{\"1\":{\"980\":1}}],[\"当我们打印\",{\"1\":{\"980\":1}}],[\"当我们要将一个字符串转为\",{\"1\":{\"897\":1}}],[\"当我们要将其取出来使用的时候\",{\"1\":{\"770\":1}}],[\"当我们使用代理对象\",{\"1\":{\"1902\":1}}],[\"当我们使用\",{\"1\":{\"1867\":1,\"1902\":1}}],[\"当我们使用上述方法获取节点时\",{\"1\":{\"1112\":1}}],[\"当我们使用typeof运算符来打印正则表达式的类型时\",{\"1\":{\"922\":1}}],[\"当我们使用typeof来打印其数据类型的时候\",{\"1\":{\"842\":1}}],[\"当我们使用对象来作为实参时\",{\"1\":{\"833\":1}}],[\"当我们使用symbol\",{\"1\":{\"828\":1}}],[\"当我们解构一个空对象的时候\",{\"1\":{\"832\":1}}],[\"当我们访问嵌套对象里面的值的时候\",{\"1\":{\"831\":1}}],[\"当我们需要对图片补充一些说明性的文字时\",{\"1\":{\"666\":1}}],[\"当我们需要使用很多\",{\"1\":{\"148\":1}}],[\"当我们获取\",{\"1\":{\"649\":1}}],[\"当我们在proxy中没有定义\",{\"1\":{\"1903\":1}}],[\"当我们在一个对象中使用\",{\"1\":{\"834\":1}}],[\"当我们在\",{\"1\":{\"648\":1}}],[\"当我们开启了绝对定位后\",{\"1\":{\"573\":1}}],[\"当我们通过不同的选择器\",{\"1\":{\"522\":1}}],[\"当我们写这个正则表达式\",{\"1\":{\"150\":1}}],[\"当我们的参数过多时\",{\"1\":{\"931\":1}}],[\"当我们的属性名来自于变量的时候\",{\"1\":{\"828\":1}}],[\"当我们的\",{\"1\":{\"129\":1,\"996\":1}}],[\"当我们发起变基时\",{\"1\":{\"11\":1}}],[\"当存在选项尾数相同\",{\"1\":{\"1711\":1}}],[\"当存在更复杂的调用关系时\",{\"1\":{\"992\":1}}],[\"当存在多轴线即存在多行项目时\",{\"1\":{\"589\":1}}],[\"当对v\",{\"1\":{\"1428\":1}}],[\"当对文本框里的内容做剪切\",{\"1\":{\"1160\":1}}],[\"当对象添加到集合中时\",{\"1\":{\"865\":1}}],[\"当对盒子设置浮动时\",{\"1\":{\"580\":1}}],[\"当传入的参数为单一的整数值时\",{\"1\":{\"840\":1}}],[\"当相同的变量和函数名被共享在同一作用域的时候\",{\"1\":{\"835\":1}}],[\"当属性名和变量名一致的时候\",{\"1\":{\"832\":1}}],[\"当不同数据类型之间进行相互运算\",{\"1\":{\"801\":1}}],[\"当想要将\",{\"1\":{\"789\":1}}],[\"当想要把commonjs放到浏览器端时\",{\"1\":{\"37\":1}}],[\"当格式不符合\",{\"1\":{\"757\":2}}],[\"当用户定义一个组件的时候\",{\"1\":{\"1953\":1}}],[\"当用户使用这些方法查找元素时\",{\"1\":{\"1922\":1}}],[\"当用户尝试修改只读数据时\",{\"1\":{\"1914\":1}}],[\"当用户点击浏览器的前进或者后退\",{\"1\":{\"2061\":1}}],[\"当用户点击了刷新\",{\"1\":{\"1569\":1}}],[\"当用户点击了提交按钮<button\",{\"1\":{\"1569\":1}}],[\"当用户点击了页面中的\",{\"1\":{\"1569\":1}}],[\"当用户点击该按钮时\",{\"1\":{\"1137\":1}}],[\"当用户释放键盘上的键时触发\",{\"1\":{\"1149\":1}}],[\"当用户选择允许通知时\",{\"1\":{\"1105\":1}}],[\"当用户关闭通知时被触发\",{\"1\":{\"1105\":1}}],[\"当用户关闭浏览器后\",{\"1\":{\"768\":1}}],[\"当用户或开发人员提交页面时\",{\"1\":{\"754\":1}}],[\"当用户登录成功后\",{\"1\":{\"343\":1}}],[\"当音频数据缓存并交给音频层处理时\",{\"1\":{\"752\":1}}],[\"当播放中的视频重新开始播放时会触发这个事件\",{\"1\":{\"752\":1}}],[\"当像\",{\"1\":{\"722\":1}}],[\"当你打开恶意网站时\",{\"1\":{\"2087\":1}}],[\"当你的\",{\"1\":{\"2058\":1}}],[\"当你缓存之后\",{\"1\":{\"1539\":1}}],[\"当你更改了响应式状态\",{\"1\":{\"1498\":1}}],[\"当你声明一个接收任意参数的\",{\"1\":{\"1273\":1}}],[\"当你调用\",{\"1\":{\"711\":1}}],[\"当你在遇到这些问题时\",{\"1\":{\"566\":1}}],[\"当浏览器页面进行前进后退的时候\",{\"1\":{\"2050\":1}}],[\"当浏览器运行页面后\",{\"1\":{\"1602\":1}}],[\"当浏览器发现缓存已经过期\",{\"1\":{\"1537\":1}}],[\"当浏览器发现缓存有效时\",{\"1\":{\"1536\":1}}],[\"当浏览器发展到第\",{\"1\":{\"1138\":1}}],[\"当浏览器的网络线程收到\",{\"1\":{\"1526\":1}}],[\"当浏览器窗口被调整到一个新的高度或者宽度时\",{\"1\":{\"1150\":1}}],[\"当浏览器窗口大小被拖动而改变的时候\",{\"1\":{\"1034\":1}}],[\"当浏览器解析时\",{\"1\":{\"675\":1}}],[\"当浏览器遇到commonjs\",{\"1\":{\"37\":1}}],[\"当指定用户电脑上并未安装的字体时\",{\"1\":{\"621\":1}}],[\"当指定一个元素是\",{\"1\":{\"548\":1}}],[\"当指定一个元素是块盒后\",{\"1\":{\"548\":1}}],[\"当平移单位为百分比时\",{\"1\":{\"616\":1}}],[\"当空间不足时\",{\"1\":{\"591\":1}}],[\"当弹性容器有额外空间时\",{\"1\":{\"591\":1}}],[\"当元素存在时在\",{\"1\":{\"1921\":1}}],[\"当元素有多个层级时\",{\"1\":{\"694\":1}}],[\"当元素的position属性设置为sticky时则开启了元素的粘滞定位\",{\"1\":{\"572\":1}}],[\"当元素的position属性值设置为absolute时\",{\"1\":{\"570\":1}}],[\"当元素的position属性值设置为relative时则开启了元素的相对定位\",{\"1\":{\"569\":1}}],[\"当元素开启了定位以后\",{\"1\":{\"569\":1}}],[\"当设置新值时\",{\"1\":{\"1910\":1}}],[\"当设置数据时\",{\"1\":{\"1886\":1}}],[\"当设置了\",{\"1\":{\"565\":1}}],[\"当设置signed为true时\",{\"1\":{\"350\":1}}],[\"当仅发现内部值时\",{\"1\":{\"548\":1}}],[\"当仅发现外部值时\",{\"1\":{\"548\":1}}],[\"当盒子开启\",{\"1\":{\"539\":2}}],[\"当某台服务器故障的时候\",{\"1\":{\"508\":1}}],[\"当客户端收到响应后即可完成握手\",{\"1\":{\"1649\":1}}],[\"当客户端收拾好行李\",{\"1\":{\"1535\":1}}],[\"当客户端需要和服务器使用\",{\"1\":{\"1648\":1}}],[\"当客户端发出一个get请求到服务器\",{\"1\":{\"1534\":1}}],[\"当客户端打开一个网站时\",{\"1\":{\"507\":1}}],[\"当客户端主动更改了cookie值时\",{\"1\":{\"350\":1}}],[\"当完成\",{\"1\":{\"463\":1}}],[\"当系统判断没有变量引用该内存地址时\",{\"1\":{\"382\":1}}],[\"当模块的文件名属于以下两种情况时\",{\"1\":{\"378\":1}}],[\"当模块被导入到其他模块\",{\"1\":{\"377\":1}}],[\"当关闭浏览器结束这个会话的时候\",{\"1\":{\"345\":1}}],[\"当登录时\",{\"1\":{\"343\":1}}],[\"当如果希望执行完中间件函数之后\",{\"1\":{\"313\":1}}],[\"当只要有一个请求路径就需要进行判断\",{\"1\":{\"294\":1}}],[\"当接收到\",{\"1\":{\"273\":1}}],[\"当前网站的域名必须与请求的域名完全匹配\",{\"1\":{\"2088\":1}}],[\"当前匹配的路由记录\",{\"1\":{\"2069\":1}}],[\"当前激活状态下所对应的样式类\",{\"1\":{\"2064\":1}}],[\"当前历史记录条目\",{\"1\":{\"2058\":3}}],[\"当前路由进行注册\",{\"1\":{\"2047\":1}}],[\"当前路由初始化\",{\"1\":{\"2041\":1}}],[\"当前路由\",{\"1\":{\"2029\":2,\"2074\":1}}],[\"当前缩进的级别\",{\"1\":{\"1979\":1}}],[\"当前转换节点的子节点一定处理完毕了\",{\"1\":{\"1977\":1}}],[\"当前扫描的\",{\"1\":{\"1974\":1}}],[\"当前实例的父组件\",{\"1\":{\"1864\":1}}],[\"当前实例会立即\",{\"1\":{\"1821\":1}}],[\"当前正在处理的标签名\",{\"1\":{\"1792\":1}}],[\"当前虚拟节点对应的真实dom节点\",{\"1\":{\"1788\":1}}],[\"当前节点\",{\"1\":{\"1976\":1}}],[\"当前节点对应的组件的实例\",{\"1\":{\"1788\":1}}],[\"当前节点对应的对象\",{\"1\":{\"1788\":1}}],[\"当前节点的父节点不能是带有\",{\"1\":{\"1795\":1}}],[\"当前节点的父节点\",{\"1\":{\"1788\":1}}],[\"当前节点的名字空间\",{\"1\":{\"1788\":1}}],[\"当前节点的文本\",{\"1\":{\"1788\":1}}],[\"当前节点的子节点\",{\"1\":{\"1788\":1}}],[\"当前节点的标签名\",{\"1\":{\"1788\":1}}],[\"当前请求无法被服务器理解\",{\"1\":{\"1635\":1}}],[\"当前组件实例是否存在\",{\"1\":{\"2019\":1}}],[\"当前组件的占位符节点\",{\"1\":{\"1864\":1}}],[\"当前组件的名称\",{\"1\":{\"1864\":1}}],[\"当前组件的vue实例\",{\"1\":{\"1835\":1}}],[\"当前组件的每个标签\",{\"1\":{\"1433\":1}}],[\"当前组件是否为根组件\",{\"1\":{\"1804\":1}}],[\"当前组件节点对应的vue实例\",{\"1\":{\"1788\":1}}],[\"当前组件所用到的\",{\"1\":{\"1438\":1}}],[\"当前\",{\"1\":{\"1219\":1,\"1792\":1,\"1962\":1}}],[\"当前事件源的左上角作为参考点\",{\"1\":{\"1153\":1}}],[\"当前屏幕距上方的像素距离\",{\"1\":{\"1098\":1}}],[\"当前屏幕距左边的像素距离\",{\"1\":{\"1098\":1}}],[\"当前页面会转为新页面内容\",{\"1\":{\"1094\":1}}],[\"当前页面载入的完整\",{\"1\":{\"1093\":1,\"2051\":1}}],[\"当前浏览器是苹果\",{\"1\":{\"1091\":1}}],[\"当前浏览器是欧朋\",{\"1\":{\"1091\":1}}],[\"当前浏览器是谷歌\",{\"1\":{\"1091\":1}}],[\"当前浏览器是ie\",{\"1\":{\"1091\":1}}],[\"当前浏览器是火狐\",{\"1\":{\"1091\":1}}],[\"当前作用域未定义\",{\"1\":{\"1019\":1}}],[\"当前值\",{\"1\":{\"946\":1}}],[\"当前文本基线的属性\",{\"1\":{\"730\":1}}],[\"当前文件夹所在目录的绝对路径\",{\"1\":{\"262\":1}}],[\"当前我们用来绘制文本的样式\",{\"1\":{\"730\":1}}],[\"当前笔触自动重置回默认坐标\",{\"1\":{\"714\":1}}],[\"当前的组件实例和之前对应的组件实例相同\",{\"1\":{\"2069\":1}}],[\"当前的虚线列表\",{\"1\":{\"711\":1}}],[\"当前的剪切区域\",{\"1\":{\"711\":1}}],[\"当前的变换矩阵\",{\"1\":{\"711\":1}}],[\"当前的数值\",{\"1\":{\"696\":1}}],[\"当前程序所在目录\",{\"1\":{\"379\":1}}],[\"当前域名下\",{\"1\":{\"346\":1}}],[\"当前目录模块不需要写\",{\"1\":{\"1308\":1}}],[\"当前目录\",{\"1\":{\"261\":1}}],[\"当前目录的上一级目录中的\",{\"1\":{\"261\":1}}],[\"当前目录下的\",{\"1\":{\"261\":1}}],[\"当前导入声明的来源\",{\"1\":{\"155\":1}}],[\"当\",{\"1\":{\"248\":1,\"340\":1,\"345\":1,\"395\":2,\"401\":1,\"948\":1,\"1028\":1,\"1232\":1,\"1313\":1,\"1357\":1,\"1527\":2,\"1530\":1,\"1824\":1,\"1889\":1,\"1890\":2,\"1897\":1,\"1902\":1,\"1954\":1,\"1956\":2,\"1969\":2,\"2047\":1,\"2061\":1}}],[\"当连接的数据库不存在\",{\"1\":{\"191\":1}}],[\"当在组件标签上使用\",{\"1\":{\"2002\":1}}],[\"当在段落中找不到数据时\",{\"1\":{\"1728\":1}}],[\"当在整个应用中使用时\",{\"1\":{\"1501\":1}}],[\"当在函数作用域操作一个变量时\",{\"1\":{\"938\":1}}],[\"当在\",{\"1\":{\"142\":1,\"1360\":1}}],[\"当开发一个具有规模的程序\",{\"1\":{\"116\":1}}],[\"当然终极解决方案自然是\",{\"1\":{\"1644\":1}}],[\"当然也支持不同程度的修改\",{\"1\":{\"1544\":1}}],[\"当然也因此\",{\"1\":{\"1499\":1}}],[\"当然也有不一样的\",{\"1\":{\"1219\":1}}],[\"当然也可以使用鼠标右键菜单进行操作\",{\"1\":{\"1160\":1}}],[\"当然也可以使用padding为侧边栏留出空白空间\",{\"1\":{\"580\":1}}],[\"当然该事件也可以用于某个单独的元素上面\",{\"1\":{\"1150\":1}}],[\"当然查就是前面我们所讲的查找节点\",{\"1\":{\"1115\":1}}],[\"当然只可能是局部变量\",{\"1\":{\"1028\":1}}],[\"当然这会带来程序设计上的一些问题\",{\"1\":{\"1647\":1}}],[\"当然这些都是自动产生闭包的情况\",{\"1\":{\"1023\":1}}],[\"当然这个目录中都是一些静态资源\",{\"1\":{\"316\":1}}],[\"当然我们也可以修改\",{\"1\":{\"2032\":1}}],[\"当然我们也可以一次性初始化多个变量\",{\"1\":{\"780\":1}}],[\"当然我们可以将任何内容通过包裹在\",{\"1\":{\"664\":1}}],[\"当然我们可以使用<script\",{\"1\":{\"675\":1}}],[\"当然我们可以使用\",{\"1\":{\"142\":1}}],[\"当然在实际使用中\",{\"1\":{\"659\":1}}],[\"当然一般情况下我们使用\",{\"1\":{\"649\":1}}],[\"当然一般我们也不会这么蛋疼\",{\"1\":{\"544\":1}}],[\"当然上面这几个\",{\"1\":{\"142\":1}}],[\"当然\",{\"1\":{\"71\":1,\"220\":1,\"772\":1,\"778\":1,\"781\":1,\"789\":2,\"801\":1,\"827\":1,\"832\":1,\"948\":1,\"990\":1,\"1023\":1,\"1029\":1,\"1105\":1,\"1232\":1,\"1243\":1,\"1265\":1,\"1267\":1,\"1519\":1,\"1978\":1}}],[\"当使用计算属性时\",{\"1\":{\"2035\":1}}],[\"当使用时\",{\"1\":{\"1888\":1}}],[\"当使用vue\",{\"1\":{\"1805\":1}}],[\"当使用vm\",{\"1\":{\"1804\":2}}],[\"当使用单文件组件\",{\"1\":{\"1486\":1}}],[\"当使用其他的语言时\",{\"1\":{\"1434\":1}}],[\"当使用\",{\"1\":{\"59\":1,\"1309\":1,\"1927\":1,\"1930\":1}}],[\"当使用require\",{\"1\":{\"37\":1}}],[\"当头指针没有执行某个分支的头部时\",{\"1\":{\"14\":1}}],[\"当功能开发完成时首先切回主分支\",{\"1\":{\"10\":1}}],[\"我的\",{\"1\":{\"1738\":1}}],[\"我的座右铭\",{\"1\":{\"254\":1}}],[\"我听都听不懂\",{\"1\":{\"1635\":1}}],[\"我临时的把它移动到了一个新的地址\",{\"1\":{\"1635\":1}}],[\"我已经永远的把它移动到了一个新的地址\",{\"1\":{\"1635\":1}}],[\"我已经改变了\",{\"1\":{\"953\":3}}],[\"我用什么装可乐\",{\"1\":{\"1621\":1}}],[\"我应该处理哪一个呢\",{\"1\":{\"1556\":1}}],[\"我该立即去执行它的回调吗\",{\"1\":{\"1556\":1}}],[\"我该立即去执行点击事件的处理函数吗\",{\"1\":{\"1556\":1}}],[\"我正在执行一个\",{\"1\":{\"1556\":2}}],[\"我告知\",{\"1\":{\"1539\":2}}],[\"我给你一个新的缓存时间\",{\"1\":{\"1537\":1}}],[\"我给你响应这个资源的服务器时间是格林威治时间2020\",{\"1\":{\"1534\":1}}],[\"我这个缓存还能继续使用吗\",{\"1\":{\"1537\":1}}],[\"我需要的东西在不在缓存里呢\",{\"1\":{\"1535\":1}}],[\"我希望你把这个资源缓存起来\",{\"1\":{\"1534\":1}}],[\"我很少会改动它\",{\"1\":{\"1534\":1}}],[\"我$\",{\"1\":{\"1486\":1}}],[\"我要开始忙了`\",{\"1\":{\"1396\":1}}],[\"我要去解析模板\",{\"1\":{\"1396\":1}}],[\"我要匹配文件名以\",{\"1\":{\"918\":1}}],[\"我想通过\",{\"1\":{\"1194\":1}}],[\"我知道你已经点击了\",{\"1\":{\"1137\":1,\"1143\":1}}],[\"我是注脚\",{\"1\":{\"1954\":1}}],[\"我是注释\",{\"1\":{\"1792\":3}}],[\"我是标题\",{\"1\":{\"1954\":1}}],[\"我是内容\",{\"1\":{\"1788\":1,\"1954\":1}}],[\"我是韩梅梅\",{\"1\":{\"1646\":1}}],[\"我是innertext输出的\",{\"1\":{\"1124\":1}}],[\"我是textcontent输出的\",{\"1\":{\"1124\":1}}],[\"我是不知道人人网有消息推送过来给我的\",{\"1\":{\"1104\":1}}],[\"我明明只是想新增一个节点\",{\"1\":{\"1124\":1}}],[\"我不得不承认实在是相当的繁琐\",{\"1\":{\"1124\":1}}],[\"我叫\",{\"1\":{\"833\":6,\"1352\":3,\"1793\":3}}],[\"我叫18\",{\"1\":{\"833\":1}}],[\"我叫xiejie\",{\"1\":{\"833\":1}}],[\"我今年\",{\"1\":{\"833\":6,\"1352\":3,\"1793\":3}}],[\"我今年xiejie岁\",{\"1\":{\"833\":1}}],[\"我今年18岁\",{\"1\":{\"833\":1}}],[\"我今年$\",{\"1\":{\"833\":3}}],[\"我才是真正的首页\",{\"1\":{\"304\":1}}],[\"我干嘛还要自己去写呢\",{\"1\":{\"24\":1}}],[\"我们看到这里链式调用了\",{\"1\":{\"2072\":1}}],[\"我们看第二句\",{\"1\":{\"2055\":1}}],[\"我们定义了一个简化版的\",{\"1\":{\"2058\":1}}],[\"我们定义了一个简单的\",{\"1\":{\"1661\":1}}],[\"我们来总结一下\",{\"1\":{\"2058\":1}}],[\"我们来看下面的例子\",{\"1\":{\"1152\":1}}],[\"我们来看下面的示例\",{\"1\":{\"1086\":1}}],[\"我们来看下面的这个例子\",{\"1\":{\"865\":1}}],[\"我们来看下面这个例子\",{\"1\":{\"953\":1}}],[\"我们来看一个具体的示例\",{\"1\":{\"943\":1}}],[\"我们来看一个使用了\",{\"1\":{\"765\":1}}],[\"我们来看一个\",{\"1\":{\"764\":1}}],[\"我们回忆一下\",{\"1\":{\"2055\":1}}],[\"我们发现第二句其实就是在调用原生的\",{\"1\":{\"2055\":1}}],[\"我们放在后面来解析\",{\"1\":{\"2055\":1}}],[\"我们传入的是\",{\"1\":{\"2053\":1}}],[\"我们能够发现这是一种非常常见的模式\",{\"1\":{\"2042\":1}}],[\"我们能够将\",{\"1\":{\"2041\":1}}],[\"我们自然会去\",{\"1\":{\"2040\":1}}],[\"我们肯定是需要去看一下\",{\"1\":{\"2040\":1}}],[\"我们确实不需要频繁obj\",{\"1\":{\"1938\":1}}],[\"我们直接使用for\",{\"1\":{\"1931\":1}}],[\"我们直接下载开发依赖即可\",{\"1\":{\"71\":1}}],[\"我们\",{\"1\":{\"1929\":1}}],[\"我们应该在\",{\"1\":{\"1921\":1}}],[\"我们应该尽量避免使用\",{\"1\":{\"1920\":1}}],[\"我们给数组中不存在的元素赋值\",{\"1\":{\"1917\":1}}],[\"我们目前实现的\",{\"1\":{\"1911\":1}}],[\"我们根据\",{\"1\":{\"1905\":1}}],[\"我们根据mycomponent的类型对渲染器进行相应的修改\",{\"1\":{\"1879\":1}}],[\"我们想要拿到副作用函数\",{\"1\":{\"1895\":1}}],[\"我们并不希望副作用函数立即执行\",{\"1\":{\"1894\":1}}],[\"我们编写的所有配置文件\",{\"1\":{\"1825\":1}}],[\"我们把根\",{\"1\":{\"2031\":1}}],[\"我们把这个位置索引称为最大索引\",{\"1\":{\"1962\":1}}],[\"我们把这个js对象就称为是这个真实dom节点的虚拟dom节点\",{\"1\":{\"1788\":1}}],[\"我们把\",{\"1\":{\"1929\":1}}],[\"我们把原始对象和对应的reactive对象存储起来\",{\"1\":{\"1923\":1}}],[\"我们把数据发生变化后生成的vnode与前一次缓存下来的vnode进行对比\",{\"1\":{\"1788\":1}}],[\"我们把组成一个dom节点的必要东西通过一个js对象表示出来\",{\"1\":{\"1788\":1}}],[\"我们把后续的协议升级为websocket\",{\"1\":{\"1648\":1}}],[\"我们做的实际上是以下\",{\"1\":{\"1678\":1}}],[\"我们对输入图像做了反卷积操作\",{\"1\":{\"1667\":1}}],[\"我们希望一些数据是只读的\",{\"1\":{\"1914\":1}}],[\"我们希望输出的张量大小为\",{\"1\":{\"1663\":1}}],[\"我们希望阻止这一默认行为\",{\"1\":{\"1156\":1}}],[\"我们得到了\",{\"1\":{\"1656\":1}}],[\"我们首先看一下该方法的方法签名\",{\"1\":{\"2042\":1}}],[\"我们首先需要回忆一下\",{\"1\":{\"2041\":1,\"2069\":1}}],[\"我们首先创建了一个反卷积层\",{\"1\":{\"1667\":1}}],[\"我们首先创建了一个大小为\",{\"1\":{\"1655\":1}}],[\"我们首先定义了一个简单的模型\",{\"1\":{\"1673\":1}}],[\"我们首先定义了一个模型\",{\"1\":{\"1659\":1}}],[\"我们首先定义了一个数据预处理函数\",{\"1\":{\"1656\":1}}],[\"我们首先声明了两个函数\",{\"1\":{\"1028\":1}}],[\"我们创建了一个\",{\"1\":{\"1655\":1}}],[\"我们创建了一个大小为\",{\"1\":{\"1655\":1}}],[\"我们推荐在纯逻辑复用时使用组合式函数\",{\"1\":{\"1501\":1}}],[\"我们可能一个页面里面有多个\",{\"1\":{\"2047\":1}}],[\"我们可能不希望侦听器触发一千次\",{\"1\":{\"1498\":1}}],[\"我们可以很清晰的知道这个\",{\"1\":{\"2058\":1}}],[\"我们可以先放一放\",{\"1\":{\"2055\":1}}],[\"我们可以先安装\",{\"1\":{\"228\":1}}],[\"我们可以看到\",{\"1\":{\"2042\":1}}],[\"我们可以看到两种写法\",{\"1\":{\"1200\":1}}],[\"我们可以知道\",{\"1\":{\"1782\":1}}],[\"我们可以得出以下结论\",{\"1\":{\"1621\":1}}],[\"我们可以更加优雅的组织我们的代码\",{\"1\":{\"1512\":1}}],[\"我们可以为整个页面指定一个\",{\"1\":{\"1158\":1}}],[\"我们可以为一个元素开启\",{\"1\":{\"564\":1}}],[\"我们可以用一张层级关系图来表示\",{\"1\":{\"1084\":1}}],[\"我们可以查看到一个对象的构造函数是什么\",{\"1\":{\"1064\":1}}],[\"我们可以面临这样一种场景\",{\"1\":{\"1040\":1}}],[\"我们可以证明这是一个全局作用域里面的变量\",{\"1\":{\"939\":1}}],[\"我们可以实现对代码的复用\",{\"1\":{\"926\":1}}],[\"我们可以设置正则表达式为全局匹配模式\",{\"1\":{\"894\":1}}],[\"我们可以快速的为数组去重\",{\"1\":{\"864\":1}}],[\"我们可以来解构一个多维数组\",{\"1\":{\"848\":1}}],[\"我们可以轻松的访问到存储在数组里面的元素\",{\"1\":{\"844\":1}}],[\"我们可以利用出题人出坑的方式做题\",{\"1\":{\"1732\":1}}],[\"我们可以利用\",{\"1\":{\"1674\":1}}],[\"我们可以利用上一节讲解的柯里化来固定已知参数\",{\"1\":{\"1040\":1}}],[\"我们可以利用=来给一个变量进行赋值\",{\"1\":{\"780\":1}}],[\"我们可以利用代理\",{\"1\":{\"507\":1}}],[\"我们可以利用代理来\",{\"1\":{\"507\":1}}],[\"我们可以对应实现\",{\"1\":{\"1929\":1}}],[\"我们可以对我们的代码进行分块\",{\"1\":{\"948\":1}}],[\"我们可以对前一个示例稍作修改\",{\"1\":{\"772\":1}}],[\"我们可以对文件夹进行\",{\"1\":{\"256\":1}}],[\"我们可以指定一个渐变的方向\",{\"1\":{\"636\":1}}],[\"我们可以将数据集读取到内存中\",{\"1\":{\"1655\":1}}],[\"我们可以将整个上下文环境看作是一个对象\",{\"1\":{\"1015\":1}}],[\"我们可以将行高设置为和高度一样的值\",{\"1\":{\"621\":1}}],[\"我们可以将网格元素放置在与这些行和列相关的位置上\",{\"1\":{\"605\":1}}],[\"我们可以将自己开发的工具包发布到\",{\"1\":{\"91\":1}}],[\"我们可以直接使用\",{\"1\":{\"148\":1}}],[\"我们可以直接执行\",{\"1\":{\"124\":1}}],[\"我们可以再webpack\",{\"1\":{\"143\":1}}],[\"我们可以使用事件对象的stoppropagation\",{\"1\":{\"1155\":1}}],[\"我们可以使用removeeventlister\",{\"1\":{\"1146\":1}}],[\"我们可以使用一个未声明的变量\",{\"1\":{\"958\":1}}],[\"我们可以使用它将字符串快速转为数组\",{\"1\":{\"849\":1}}],[\"我们可以使用delete运算符来删除数组中的某一个元素\",{\"1\":{\"845\":1}}],[\"我们可以使用<canvas>标签来定义一个\",{\"1\":{\"701\":1}}],[\"我们可以使用box\",{\"1\":{\"547\":1}}],[\"我们可以使用如下几种方式\",{\"1\":{\"249\":1}}],[\"我们可以使用如下几个方法来实现该效果\",{\"1\":{\"243\":1}}],[\"我们可以使用图形化的管理工具来对\",{\"1\":{\"213\":1}}],[\"我们可以使用到里面的各种字体图标\",{\"1\":{\"143\":1}}],[\"我们可以使用\",{\"1\":{\"86\":1,\"254\":1,\"255\":1,\"257\":1,\"258\":1,\"259\":1,\"260\":1,\"368\":1,\"1486\":1,\"1673\":1,\"1897\":1}}],[\"我们可以执行安装选项\",{\"1\":{\"73\":1}}],[\"我们可以在一个\",{\"1\":{\"1499\":1}}],[\"我们可以在父组件中引用子组件对象\",{\"1\":{\"1493\":1}}],[\"我们可以在事件的处理函数中添加以下代码\",{\"1\":{\"1151\":1}}],[\"我们可以在开始跑步时通过手机浏览器启动应用程序的记录功能\",{\"1\":{\"1100\":1}}],[\"我们可以在创建对象时就给该对象初始化好相应的信息\",{\"1\":{\"827\":1}}],[\"我们可以在本地存储中存储任何的\",{\"1\":{\"770\":1}}],[\"我们可以在其中设置基本的提交特性\",{\"1\":{\"754\":1}}],[\"我们可以在安装时设置选项来区分\",{\"1\":{\"72\":1}}],[\"我们可以在项目目录中添加一个\",{\"1\":{\"15\":1}}],[\"我们可以尝试切换成\",{\"1\":{\"67\":1}}],[\"我们可以通过end\",{\"1\":{\"1792\":1}}],[\"我们可以通过使用构建工具来简化该操作\",{\"1\":{\"1486\":1}}],[\"我们可以通过document\",{\"1\":{\"1150\":1}}],[\"我们可以通过很多不同的方式来触发事件\",{\"1\":{\"1147\":1}}],[\"我们可以通过下面的代码\",{\"1\":{\"1139\":1}}],[\"我们可以通过innerhtml和innertext来获取到节点内部的信息\",{\"1\":{\"1124\":1}}],[\"我们可以通过offsetleft以及offsettop来得到一个元素相对于父级定位元素的位置\",{\"1\":{\"1087\":1}}],[\"我们可以通过类比乒乓球盒子来分析\",{\"1\":{\"980\":1}}],[\"我们可以通过这个name属性来证明函数表达式的变量不是函数名\",{\"1\":{\"950\":1}}],[\"我们可以通过函数的\",{\"1\":{\"875\":1}}],[\"我们可以通过一个点\",{\"1\":{\"828\":1}}],[\"我们可以通过setitem\",{\"1\":{\"769\":1}}],[\"我们可以通过改变视口的大小\",{\"1\":{\"649\":1}}],[\"我们可以通过查看视口的大小\",{\"1\":{\"649\":1}}],[\"我们可以通过查看\",{\"1\":{\"77\":1}}],[\"我们可以通过\",{\"1\":{\"66\":1,\"81\":1,\"1112\":1,\"1655\":2,\"1905\":1}}],[\"我们会找到匹配的路径\",{\"1\":{\"2028\":1}}],[\"我们会担心那些之前使用\",{\"1\":{\"1319\":1}}],[\"我们会在下一小节中介绍事件对象\",{\"1\":{\"1149\":1}}],[\"我们会在后面进行详细的介绍\",{\"1\":{\"876\":1}}],[\"我们会在后面进行介绍\",{\"1\":{\"847\":1}}],[\"我们平时都称之为\",{\"1\":{\"1247\":1}}],[\"我们之前讲\",{\"1\":{\"1224\":1}}],[\"我们要阻止事件冒泡\",{\"1\":{\"1155\":1}}],[\"我们要想使用它\",{\"1\":{\"623\":1}}],[\"我们介绍了在\",{\"1\":{\"1147\":1}}],[\"我们由此可以来观察一下事件捕获的一个顺序\",{\"1\":{\"1140\":1}}],[\"我们打开开发者工具进行查看\",{\"1\":{\"1123\":1}}],[\"我们感觉好像没有克隆成功\",{\"1\":{\"1123\":1}}],[\"我们元素对象本身其实就有一个\",{\"1\":{\"1121\":1}}],[\"我们设置了settimeout\",{\"1\":{\"1105\":1}}],[\"我们一般不使用属性节点\",{\"1\":{\"1113\":1}}],[\"我们一般不写在<title>标签下面\",{\"1\":{\"1078\":1}}],[\"我们一刷新页面就会弹出所创建的通知\",{\"1\":{\"1105\":1}}],[\"我们如何来移动呢\",{\"1\":{\"1088\":1}}],[\"我们再来看一道比较高阶的题目\",{\"1\":{\"992\":1}}],[\"我们再来看一个例子\",{\"1\":{\"849\":1}}],[\"我们第一行书写了\",{\"1\":{\"957\":1}}],[\"我们即使不定义形参\",{\"1\":{\"932\":1}}],[\"我们都只需要将容器清空\",{\"1\":{\"1951\":1}}],[\"我们都会使用更加简便的符号\",{\"1\":{\"1198\":1}}],[\"我们都会将createpattern返回的对象作为fillstyle的值\",{\"1\":{\"723\":1}}],[\"我们都是将一个匿名函数赋值给一个变量\",{\"1\":{\"929\":1}}],[\"我们同样可以使用for\",{\"1\":{\"863\":1}}],[\"我们同样要删除本地的分支并拉取最新的代码\",{\"1\":{\"17\":1}}],[\"我们调用sort\",{\"1\":{\"855\":1}}],[\"我们利用此属性\",{\"1\":{\"851\":1}}],[\"我们交换两个数需要使用到一个中间变量\",{\"1\":{\"847\":1}}],[\"我们已经学会了向文档里面添加节点\",{\"1\":{\"1120\":1}}],[\"我们已经写了很多的代码\",{\"1\":{\"835\":1}}],[\"我们已经知道了在\",{\"1\":{\"801\":1}}],[\"我们为\",{\"1\":{\"832\":1}}],[\"我们为iframe标签设置name属性\",{\"1\":{\"664\":1}}],[\"我们有介绍过事件冒泡\",{\"1\":{\"1155\":1}}],[\"我们有介绍过数组的解构\",{\"1\":{\"832\":1}}],[\"我们有更棒的写法\",{\"1\":{\"1053\":1}}],[\"我们有如下的\",{\"1\":{\"71\":1}}],[\"我们就将\",{\"1\":{\"2054\":1}}],[\"我们就将数据\",{\"1\":{\"1655\":1}}],[\"我们就知道上面的三个方法是干嘛的了\",{\"1\":{\"2045\":1}}],[\"我们就可以通过this\",{\"1\":{\"1804\":1}}],[\"我们就可以很轻松的获取到用户具体按下的是哪一个键\",{\"1\":{\"1149\":1}}],[\"我们就可以使用\",{\"1\":{\"1120\":1}}],[\"我们就可以使用函数管道\",{\"1\":{\"1040\":1}}],[\"我们就可以给该对象添加相应的属性\",{\"1\":{\"827\":1}}],[\"我们就来看一下严格模式下对\",{\"1\":{\"958\":1}}],[\"我们就已经接触过一个内置回调函数了\",{\"1\":{\"944\":1}}],[\"我们就说\",{\"1\":{\"66\":1}}],[\"我们的单页应用就只有一个\",{\"1\":{\"2047\":1}}],[\"我们的程序可以检测这些事件\",{\"1\":{\"1135\":1}}],[\"我们的通知实现主要是通过闪烁页面的标题内容来实现\",{\"1\":{\"1104\":1}}],[\"我们的浏览器\",{\"1\":{\"1083\":1}}],[\"我们的\",{\"1\":{\"943\":1,\"1738\":1}}],[\"我们的自增自减操作符不仅仅局限于数值\",{\"1\":{\"806\":1}}],[\"我们的结果和运算的数都是数字\",{\"1\":{\"801\":1}}],[\"我们这里使用转义字符也是一个很好的选择\",{\"1\":{\"789\":1}}],[\"我们存储的是值为一个数组\",{\"1\":{\"769\":1}}],[\"我们存储的值是存放于本地的\",{\"1\":{\"769\":1}}],[\"我们依然可以访问这些数据\",{\"1\":{\"768\":1}}],[\"我们先忽略\",{\"1\":{\"2058\":1}}],[\"我们先来看看\",{\"1\":{\"1205\":1}}],[\"我们先来看一下我们一般函数调用的例子\",{\"1\":{\"833\":1}}],[\"我们先来看一下\",{\"1\":{\"766\":1,\"1086\":1,\"1087\":1}}],[\"我们先介绍\",{\"1\":{\"720\":1}}],[\"我们必须阻止对元素的默认处理方式\",{\"1\":{\"764\":1}}],[\"我们必须使用第三方包来帮助我们进行配置\",{\"1\":{\"71\":1}}],[\"我们尚未深入了解\",{\"1\":{\"735\":1}}],[\"我们用\",{\"1\":{\"694\":1}}],[\"我们统称为非布尔值属性\",{\"1\":{\"682\":1}}],[\"我们统称为布尔值属性\",{\"1\":{\"682\":1}}],[\"我们统称为property\",{\"1\":{\"681\":1}}],[\"我们经常遇到一种情况\",{\"1\":{\"1937\":1}}],[\"我们经常需要使用表格来表示一些格式化数据\",{\"1\":{\"669\":1}}],[\"我们经常利用这个特点来使一个元素在其父元素中水平居中\",{\"1\":{\"556\":1}}],[\"我们不希望在模板中频繁使用obj\",{\"1\":{\"1937\":1}}],[\"我们不希望它被\",{\"1\":{\"15\":1}}],[\"我们不应该在副作用函数与\",{\"1\":{\"1921\":1}}],[\"我们不用打开开发者工具\",{\"1\":{\"1123\":1}}],[\"我们不用获取可以直接使用\",{\"1\":{\"1111\":1}}],[\"我们不想创建和插入一个完全新的元素\",{\"1\":{\"1123\":1}}],[\"我们不能直接书写一些特殊符号\",{\"1\":{\"658\":1}}],[\"我们称其为断点\",{\"1\":{\"651\":1}}],[\"我们按照\",{\"1\":{\"648\":1}}],[\"我们常说的分辨率\",{\"1\":{\"646\":1}}],[\"我们常用此来执行一些单元测试代码\",{\"1\":{\"377\":1}}],[\"我们常用的代码编辑器\",{\"1\":{\"222\":1}}],[\"我们也可以直接将\",{\"1\":{\"1081\":1}}],[\"我们也可以使用集合里面自带的keys\",{\"1\":{\"863\":1}}],[\"我们也可以使用这\",{\"1\":{\"830\":1}}],[\"我们也可以为解构的变量设置一个默认值\",{\"1\":{\"833\":1}}],[\"我们也可以自己指定渐变的位置\",{\"1\":{\"636\":1}}],[\"我们也可以通过下面的方式来进行证明\",{\"1\":{\"1092\":1}}],[\"我们也可以通过一些快捷方式来进行数据类型的显性转换\",{\"1\":{\"801\":1}}],[\"我们也可以通过\",{\"1\":{\"124\":1}}],[\"我们认为是\",{\"1\":{\"565\":1}}],[\"我们使用上文类似的方法添加这个方法\",{\"1\":{\"1931\":1}}],[\"我们使用form标签来创建一个表单\",{\"1\":{\"670\":1}}],[\"我们使用float属性来设置元素的浮动\",{\"1\":{\"560\":1}}],[\"我们使用\",{\"1\":{\"557\":1,\"1293\":1,\"1573\":1,\"1655\":1,\"1656\":1,\"1659\":1,\"1667\":1,\"1673\":1,\"1937\":1}}],[\"我们在控制台输入如下的代码\",{\"1\":{\"2050\":1}}],[\"我们在编写\",{\"1\":{\"1938\":1}}],[\"我们在模板中使用这个对象中的某些属性\",{\"1\":{\"1937\":1}}],[\"我们在视图渲染之前\",{\"1\":{\"1788\":1}}],[\"我们在最开始的时候写的事件快速入门案例就是一个\",{\"1\":{\"1143\":1}}],[\"我们在外部成功访问到了在函数里面没有添加声明关键字的变量i\",{\"1\":{\"939\":1}}],[\"我们在使用变量之前\",{\"1\":{\"778\":1}}],[\"我们在父元素中新建一个块元素\",{\"1\":{\"566\":1}}],[\"我们在为一个元素设置样式时同时也会应用到它的后代元素上\",{\"1\":{\"527\":1}}],[\"我们在我们的项目中安装\",{\"1\":{\"128\":1}}],[\"我们后续主要对routes\",{\"1\":{\"332\":1}}],[\"我们只需要写<school\",{\"1\":{\"1423\":1}}],[\"我们只需要输入一对大括号即可\",{\"1\":{\"827\":1}}],[\"我们只需要在<canvas>标签中提供替换内容就可以\",{\"1\":{\"702\":1}}],[\"我们只需要在res\",{\"1\":{\"350\":1}}],[\"我们只需要将css和webfonts移动到项目中的同一目录下\",{\"1\":{\"623\":1}}],[\"我们只需要将内置的中间件引入\",{\"1\":{\"317\":1}}],[\"我们只是使用到了两个\",{\"1\":{\"148\":1}}],[\"我们将传递给另一个函数作为实参的函数称之为回调函数\",{\"1\":{\"943\":1}}],[\"我们将其称之为方法\",{\"1\":{\"826\":1}}],[\"我们将其称之为该对象的属性\",{\"1\":{\"826\":1}}],[\"我们将视口分成三种情况\",{\"1\":{\"648\":1}}],[\"我们将弹性元素的排列方向称为\",{\"1\":{\"586\":1}}],[\"我们将介绍如下几个较为常用的几个\",{\"1\":{\"264\":1}}],[\"我们将这些问题称之为工程问题\",{\"1\":{\"116\":1}}],[\"我们知道注册时实际执行的是对象内的\",{\"1\":{\"2016\":1}}],[\"我们知道事件冒泡会让程序将做很多额外的事情\",{\"1\":{\"1155\":1}}],[\"我们知道\",{\"1\":{\"216\":1,\"1232\":1,\"1407\":1,\"1998\":1}}],[\"我们知道了\",{\"1\":{\"148\":1}}],[\"我们现在需要优化它\",{\"1\":{\"150\":1}}],[\"我们需要做的事情如下\",{\"1\":{\"2025\":1}}],[\"我们需要将转换逻辑编写在退出阶段的回调函数内\",{\"1\":{\"1978\":1}}],[\"我们需要将主区域的代码靠前书写\",{\"1\":{\"580\":1}}],[\"我们需要能访问\",{\"1\":{\"1976\":1}}],[\"我们需要先获取锚点元素\",{\"1\":{\"1962\":1}}],[\"我们需要复用这些节点\",{\"1\":{\"1962\":1}}],[\"我们需要使用唯一的标识来作为访问原始数据的键\",{\"1\":{\"1929\":1}}],[\"我们需要自定义\",{\"1\":{\"1928\":1}}],[\"我们需要在\",{\"1\":{\"1893\":1}}],[\"我们需要通过\",{\"1\":{\"1519\":1}}],[\"我们需要声明一个同名的\",{\"1\":{\"1499\":1}}],[\"我们需要阻止事件冒泡\",{\"1\":{\"1158\":1}}],[\"我们需要得到用户的授权\",{\"1\":{\"1105\":1}}],[\"我们需要用到\",{\"1\":{\"720\":1}}],[\"我们需要找到它的渲染上下文\",{\"1\":{\"704\":1}}],[\"我们需要修改\",{\"1\":{\"150\":1}}],[\"我们需要借助\",{\"1\":{\"149\":1}}],[\"我们需要有一个工具\",{\"1\":{\"118\":1}}],[\"我们去修改\",{\"1\":{\"148\":1}}],[\"我们去手动创建\",{\"1\":{\"128\":1}}],[\"我们还是需要特殊处理\",{\"1\":{\"1923\":1}}],[\"我们还能够精准的获取到用户按下鼠标时所处的位置\",{\"1\":{\"1153\":1}}],[\"我们还会介绍一个东西\",{\"1\":{\"1084\":1}}],[\"我们还会经常用到其他的字体\",{\"1\":{\"143\":1}}],[\"我们还可以阻止一些浏览器的默认行为\",{\"1\":{\"1156\":1}}],[\"我们还可以通过offsetwidth和offsetheight来得到一个元素的宽高\",{\"1\":{\"1087\":1}}],[\"我们还可以在<a>标签的href属性里面书写\",{\"1\":{\"1080\":1}}],[\"我们还可以在package\",{\"1\":{\"124\":1}}],[\"我们还可以使用\",{\"1\":{\"864\":1}}],[\"我们还可以使用变量的方式来进行访问\",{\"1\":{\"844\":1}}],[\"我们还可以直接将一个数组传入add\",{\"1\":{\"861\":1}}],[\"我们还可以直接进行如下的存值和取值操作\",{\"1\":{\"769\":1}}],[\"我们还可以将图标直接设置为字体\",{\"1\":{\"622\":1}}],[\"我们往往希望把最终生成的代码和页面部署到服务器上\",{\"1\":{\"133\":1}}],[\"我们更加希望能看到源代码中的错误\",{\"1\":{\"124\":1}}],[\"我们干嘛不自己重新定一个模块化的标准出来\",{\"1\":{\"25\":1}}],[\"我们学习阶段\",{\"1\":{\"12\":1}}],[\"我们通过调用\",{\"1\":{\"1673\":1}}],[\"我们通过datatransfer\",{\"1\":{\"765\":1}}],[\"我们通过table标签来创建一个表格\",{\"1\":{\"669\":1}}],[\"我们通过对\",{\"1\":{\"648\":1}}],[\"我们通过\",{\"1\":{\"11\":1}}],[\"我必须要反复的创建\",{\"1\":{\"11\":1}}],[\"d+\",{\"1\":{\"1769\":1}}],[\"d+$\",{\"1\":{\"1162\":1}}],[\"dms\",{\"1\":{\"1101\":1}}],[\"dpi\",{\"1\":{\"1098\":5}}],[\"d来匹配单个数字字符\",{\"1\":{\"906\":1}}],[\"ddd\",{\"1\":{\"1297\":2}}],[\"dd\",{\"1\":{\"893\":1}}],[\"dndfiles\",{\"1\":{\"773\":1}}],[\"dns\",{\"1\":{\"373\":3,\"1530\":1}}],[\"dynamicargattribute\",{\"1\":{\"1792\":1}}],[\"dynamicargre\",{\"1\":{\"1368\":1}}],[\"dynamic\",{\"1\":{\"1368\":4,\"1799\":1}}],[\"dy\",{\"1\":{\"738\":2}}],[\"dx\",{\"1\":{\"738\":2}}],[\"dtd\",{\"1\":{\"691\":3}}],[\"dl>dt>dd\",{\"1\":{\"663\":1}}],[\"during\",{\"1\":{\"1804\":1}}],[\"durationchange\",{\"1\":{\"752\":1}}],[\"duration\",{\"1\":{\"641\":1,\"644\":1,\"750\":1,\"1181\":2,\"1559\":2}}],[\"duyiedu\",{\"1\":{\"1571\":1,\"1589\":1,\"1594\":4,\"1600\":2,\"1630\":1,\"1633\":1}}],[\"duplicate\",{\"1\":{\"958\":1,\"1313\":1}}],[\"dumps\",{\"1\":{\"404\":1}}],[\"dump\",{\"1\":{\"15\":1,\"404\":2}}],[\"d2\",{\"1\":{\"393\":2}}],[\"d2=12\",{\"1\":{\"165\":1}}],[\"drag1\",{\"1\":{\"765\":2}}],[\"draggable\",{\"1\":{\"764\":1,\"765\":2}}],[\"draggable=\",{\"1\":{\"764\":1,\"765\":2}}],[\"dragleave\",{\"1\":{\"764\":1}}],[\"dragover\",{\"1\":{\"764\":1,\"772\":1}}],[\"dragenter\",{\"1\":{\"764\":1}}],[\"dragend\",{\"1\":{\"764\":1}}],[\"dragstart\",{\"1\":{\"764\":1,\"765\":1}}],[\"drag\",{\"1\":{\"762\":1,\"764\":7,\"765\":5}}],[\"draw\",{\"1\":{\"740\":2,\"1529\":2}}],[\"drawimage\",{\"1\":{\"496\":1,\"722\":1,\"727\":1,\"740\":1}}],[\"drivers\",{\"1\":{\"372\":1}}],[\"dropout层一般加在全连接层之后\",{\"1\":{\"1664\":1}}],[\"dropout以一定的概率丢弃\",{\"1\":{\"1664\":1}}],[\"dropout是一种常用的正则化方法用于减少神经网络的过拟合风险\",{\"1\":{\"1664\":1}}],[\"dropout\",{\"0\":{\"1664\":1},\"1\":{\"1664\":3}}],[\"dropzone\",{\"1\":{\"772\":3}}],[\"dropeffect\",{\"1\":{\"765\":1,\"772\":1}}],[\"drop\",{\"1\":{\"180\":1,\"762\":1,\"764\":2,\"765\":4,\"772\":3,\"1655\":3}}],[\"dropdatabase\",{\"1\":{\"179\":1}}],[\"d4=10\",{\"1\":{\"165\":1}}],[\"d3\",{\"1\":{\"165\":1}}],[\"d1=5\",{\"1\":{\"165\":1}}],[\"don\",{\"1\":{\"2058\":1}}],[\"done\",{\"1\":{\"408\":1,\"1186\":3,\"1187\":1,\"1772\":2,\"1931\":7,\"1932\":4}}],[\"dotted\",{\"1\":{\"1332\":1}}],[\"down\",{\"1\":{\"1284\":1,\"1370\":1}}],[\"download=true\",{\"1\":{\"1656\":2}}],[\"downloadiamge\",{\"1\":{\"496\":1}}],[\"download\",{\"1\":{\"177\":1,\"227\":1,\"307\":2,\"496\":1,\"1656\":1}}],[\"dolor\",{\"1\":{\"1112\":9,\"1120\":2,\"1123\":4,\"1150\":4,\"1153\":1,\"2101\":1}}],[\"douyutv\",{\"1\":{\"1635\":1}}],[\"douyin\",{\"1\":{\"1609\":4}}],[\"douglas\",{\"1\":{\"895\":1}}],[\"doubleage\",{\"1\":{\"2019\":2}}],[\"double\",{\"1\":{\"165\":4}}],[\"doe\",{\"1\":{\"366\":1}}],[\"dom后面\",{\"1\":{\"1962\":1}}],[\"dom更新\",{\"1\":{\"1806\":1}}],[\"dom元素\",{\"1\":{\"1805\":1}}],[\"dom元素绑定事件时\",{\"1\":{\"993\":1}}],[\"dom的代码\",{\"1\":{\"1782\":1}}],[\"domcontentloaded\",{\"1\":{\"1530\":1,\"2050\":1}}],[\"dommousescroll\",{\"1\":{\"1153\":1}}],[\"domain\",{\"1\":{\"345\":2,\"350\":1,\"373\":1,\"493\":1,\"1626\":2}}],[\"dom\",{\"0\":{\"1084\":1,\"1108\":1,\"1115\":1,\"1124\":1,\"1125\":1,\"1126\":1,\"1141\":1,\"1144\":1,\"1145\":1,\"1239\":1,\"1788\":1,\"1866\":1,\"1873\":1,\"1961\":1,\"1962\":1},\"1\":{\"216\":2,\"680\":1,\"681\":9,\"765\":1,\"1034\":4,\"1084\":5,\"1109\":2,\"1112\":2,\"1120\":1,\"1124\":1,\"1130\":1,\"1139\":1,\"1140\":1,\"1141\":4,\"1142\":1,\"1145\":1,\"1146\":3,\"1148\":1,\"1151\":2,\"1156\":4,\"1158\":1,\"1163\":1,\"1172\":2,\"1173\":1,\"1177\":1,\"1182\":1,\"1195\":1,\"1198\":2,\"1200\":2,\"1208\":1,\"1214\":4,\"1215\":2,\"1219\":2,\"1239\":5,\"1240\":2,\"1353\":1,\"1357\":1,\"1388\":1,\"1389\":1,\"1394\":18,\"1407\":2,\"1411\":1,\"1423\":1,\"1428\":1,\"1437\":1,\"1440\":2,\"1441\":1,\"1478\":1,\"1498\":4,\"1499\":3,\"1526\":9,\"1530\":2,\"1782\":1,\"1788\":1,\"1789\":2,\"1797\":2,\"1800\":1,\"1801\":1,\"1802\":1,\"1806\":1,\"1822\":1,\"1834\":3,\"1835\":2,\"1841\":1,\"1862\":5,\"1873\":3,\"1874\":5,\"1877\":4,\"1878\":4,\"1879\":6,\"1944\":1,\"1948\":2,\"1949\":5,\"1950\":1,\"1951\":5,\"1962\":9,\"1964\":5,\"1965\":1,\"1998\":2,\"2029\":1,\"2069\":1,\"2070\":4,\"2071\":1},\"2\":{\"1134\":1}}],[\"do\",{\"1\":{\"156\":1,\"408\":2,\"820\":2}}],[\"doc\",{\"1\":{\"338\":1,\"377\":1,\"405\":1,\"1112\":2}}],[\"doctypematch\",{\"1\":{\"1792\":3}}],[\"doctype\",{\"1\":{\"287\":2,\"329\":1,\"580\":1,\"657\":2,\"691\":2,\"770\":2,\"1139\":1,\"1140\":1,\"1791\":1,\"1792\":5}}],[\"docs\",{\"1\":{\"93\":1,\"271\":1,\"958\":1,\"1105\":1,\"1491\":2,\"1587\":1,\"1607\":1,\"2040\":1}}],[\"document对象作为\",{\"1\":{\"1111\":1}}],[\"documentelement\",{\"1\":{\"478\":2,\"479\":3,\"727\":2,\"1087\":9,\"1111\":1,\"1139\":1,\"1140\":1,\"1150\":1,\"1805\":1}}],[\"document表示集合中的具体文档\",{\"1\":{\"189\":1}}],[\"documentation\",{\"1\":{\"156\":1}}],[\"document\",{\"0\":{\"1109\":1,\"1111\":1,\"1130\":1,\"1200\":1},\"1\":{\"45\":1,\"176\":2,\"189\":1,\"287\":2,\"445\":1,\"446\":1,\"447\":1,\"474\":3,\"478\":4,\"479\":3,\"480\":3,\"483\":2,\"496\":2,\"681\":1,\"685\":2,\"704\":2,\"713\":1,\"727\":3,\"732\":1,\"764\":3,\"765\":4,\"772\":4,\"773\":4,\"841\":1,\"993\":3,\"1083\":1,\"1084\":2,\"1087\":8,\"1088\":2,\"1092\":2,\"1104\":7,\"1111\":5,\"1112\":15,\"1116\":1,\"1117\":1,\"1120\":3,\"1123\":4,\"1124\":2,\"1132\":3,\"1139\":8,\"1140\":8,\"1141\":4,\"1144\":2,\"1145\":1,\"1146\":2,\"1149\":1,\"1150\":4,\"1152\":3,\"1154\":2,\"1156\":5,\"1157\":2,\"1158\":3,\"1162\":3,\"1181\":4,\"1194\":1,\"1198\":2,\"1200\":3,\"1205\":2,\"1208\":6,\"1214\":1,\"1215\":1,\"1357\":1,\"1467\":2,\"1559\":2,\"1576\":2,\"1577\":1,\"1581\":1,\"1582\":1,\"1777\":1,\"1805\":2,\"1822\":1,\"1872\":1,\"1878\":2,\"1888\":1,\"1890\":1,\"1943\":1,\"1946\":1,\"2050\":2,\"2054\":1,\"2058\":1,\"2061\":1}}],[\"dampening\",{\"1\":{\"1659\":1}}],[\"dampening=0\",{\"1\":{\"1659\":2}}],[\"damages\",{\"1\":{\"156\":1}}],[\"darken\",{\"1\":{\"1337\":1}}],[\"dark\",{\"1\":{\"1337\":1}}],[\"dashed\",{\"1\":{\"1271\":1}}],[\"daemon\",{\"1\":{\"1027\":1}}],[\"daemon=none\",{\"1\":{\"408\":1}}],[\"dadbdf\",{\"1\":{\"1266\":1}}],[\"dad\",{\"1\":{\"925\":6}}],[\"dayjs\",{\"1\":{\"1397\":1}}],[\"day\",{\"1\":{\"875\":1,\"877\":2}}],[\"days\",{\"1\":{\"378\":1}}],[\"david\",{\"1\":{\"828\":2,\"863\":7}}],[\"dabc\",{\"1\":{\"519\":1}}],[\"date1\",{\"1\":{\"877\":3}}],[\"date2\",{\"1\":{\"876\":2,\"877\":3}}],[\"datetime\",{\"1\":{\"757\":2}}],[\"date\",{\"0\":{\"873\":1},\"1\":{\"192\":1,\"355\":1,\"757\":1,\"873\":1,\"874\":3,\"875\":14,\"876\":18,\"877\":30,\"967\":2,\"995\":3,\"1088\":1,\"1181\":2,\"1534\":2,\"1535\":1,\"1559\":2,\"1579\":2}}],[\"datadef\",{\"1\":{\"1836\":3}}],[\"dataloader\",{\"1\":{\"1655\":11}}],[\"datalist>\",{\"1\":{\"697\":1}}],[\"datalist\",{\"1\":{\"697\":2,\"758\":1}}],[\"data函数\",{\"1\":{\"1423\":2}}],[\"data必须写成函数\",{\"1\":{\"1415\":1}}],[\"data中的属性如果不是基本数据类型会为这个属性创建observer实例\",{\"1\":{\"1840\":1}}],[\"data中对应的属性\",{\"1\":{\"1366\":1}}],[\"data中用于存储数据\",{\"1\":{\"1349\":1}}],[\"data`\",{\"1\":{\"1354\":1,\"1804\":1,\"1836\":1}}],[\"data是服务器返回的数据\",{\"1\":{\"1227\":1}}],[\"data1\",{\"1\":{\"1182\":1}}],[\"datatransfer\",{\"0\":{\"765\":1},\"1\":{\"765\":15,\"772\":2}}],[\"data指的是资源内容的\",{\"1\":{\"672\":1}}],[\"data=\",{\"1\":{\"672\":1,\"674\":1}}],[\"datasets\",{\"1\":{\"1656\":11,\"1674\":1}}],[\"dataset\",{\"1\":{\"478\":1,\"685\":2,\"1125\":2,\"1655\":9,\"1674\":2}}],[\"dataservice\",{\"1\":{\"40\":1,\"41\":4,\"42\":2,\"44\":3,\"45\":2}}],[\"datasrc\",{\"1\":{\"474\":3}}],[\"databases\",{\"1\":{\"179\":1}}],[\"database\",{\"1\":{\"172\":1,\"176\":3}}],[\"data2\",{\"1\":{\"27\":2}}],[\"data\",{\"0\":{\"1359\":1,\"1361\":1,\"1836\":1,\"2106\":1},\"1\":{\"27\":5,\"28\":8,\"29\":5,\"30\":3,\"35\":2,\"43\":1,\"142\":3,\"177\":1,\"191\":3,\"200\":3,\"203\":8,\"205\":2,\"206\":4,\"207\":4,\"209\":2,\"210\":2,\"211\":2,\"212\":2,\"244\":2,\"245\":1,\"246\":2,\"250\":4,\"251\":2,\"252\":3,\"258\":4,\"260\":5,\"262\":5,\"263\":3,\"282\":1,\"283\":2,\"294\":8,\"368\":2,\"474\":2,\"476\":3,\"685\":1,\"737\":1,\"740\":12,\"744\":1,\"765\":4,\"967\":3,\"1040\":4,\"1182\":2,\"1227\":2,\"1228\":1,\"1229\":1,\"1232\":2,\"1237\":1,\"1347\":1,\"1349\":1,\"1350\":2,\"1352\":1,\"1353\":3,\"1354\":8,\"1356\":3,\"1358\":13,\"1361\":3,\"1366\":9,\"1368\":2,\"1379\":2,\"1385\":3,\"1393\":1,\"1394\":2,\"1396\":7,\"1397\":1,\"1407\":4,\"1415\":1,\"1422\":1,\"1428\":5,\"1429\":1,\"1430\":1,\"1431\":1,\"1433\":7,\"1438\":1,\"1439\":1,\"1445\":1,\"1446\":2,\"1480\":1,\"1485\":1,\"1486\":2,\"1490\":1,\"1491\":1,\"1515\":1,\"1518\":1,\"1519\":1,\"1578\":4,\"1585\":1,\"1586\":2,\"1592\":2,\"1607\":1,\"1634\":3,\"1655\":9,\"1656\":6,\"1659\":1,\"1669\":1,\"1670\":2,\"1777\":9,\"1778\":4,\"1784\":1,\"1786\":1,\"1788\":5,\"1789\":10,\"1796\":5,\"1799\":2,\"1802\":8,\"1803\":1,\"1804\":25,\"1807\":3,\"1822\":1,\"1825\":3,\"1827\":1,\"1834\":1,\"1835\":3,\"1836\":11,\"1880\":2,\"1886\":2,\"1888\":1,\"1889\":2,\"1896\":2,\"1897\":2,\"1953\":2,\"1954\":4,\"1956\":2,\"1985\":1,\"2031\":3,\"2057\":2,\"2058\":4}}],[\"dahl\",{\"1\":{\"24\":1}}],[\"dilation=1\",{\"1\":{\"1667\":1}}],[\"dilation\",{\"1\":{\"1663\":1,\"1667\":1}}],[\"dialog\",{\"1\":{\"1515\":1}}],[\"dinosaur\",{\"1\":{\"666\":1}}],[\"digit\",{\"1\":{\"419\":2}}],[\"div4\",{\"1\":{\"1267\":2}}],[\"div3\",{\"1\":{\"1267\":2}}],[\"div2\",{\"1\":{\"765\":1,\"1261\":1,\"1267\":2}}],[\"div1\",{\"1\":{\"765\":1,\"993\":6,\"1261\":1,\"1267\":2}}],[\"div\",{\"1\":{\"445\":1,\"446\":1,\"447\":1,\"516\":1,\"517\":2,\"518\":2,\"580\":1,\"694\":3,\"763\":1,\"764\":1,\"765\":3,\"773\":4,\"993\":2,\"1087\":4,\"1104\":1,\"1139\":5,\"1140\":4,\"1141\":2,\"1148\":1,\"1153\":1,\"1160\":1,\"1208\":1,\"1216\":1,\"1224\":1,\"1252\":1,\"1282\":1,\"1284\":1,\"1312\":2,\"1325\":1,\"1327\":1,\"1334\":2,\"1335\":4,\"1336\":1,\"1353\":1,\"1388\":4,\"1392\":1,\"1788\":1,\"1792\":2,\"1796\":1,\"1797\":2,\"1835\":1,\"1872\":4,\"1873\":1,\"1879\":2,\"1880\":1,\"1953\":3,\"1974\":8,\"1975\":3,\"1979\":1}}],[\"divmod\",{\"1\":{\"395\":3}}],[\"div>\",{\"1\":{\"45\":1,\"143\":1,\"520\":2,\"533\":1,\"580\":16,\"582\":9,\"662\":1,\"681\":2,\"685\":2,\"764\":1,\"765\":2,\"772\":1,\"773\":1,\"993\":1,\"1087\":6,\"1124\":2,\"1139\":2,\"1140\":2,\"1148\":13,\"1153\":1,\"1155\":4,\"1207\":4,\"1216\":1,\"1348\":1,\"1353\":1,\"1369\":1,\"1385\":3,\"1392\":1,\"1393\":1,\"1401\":1,\"1415\":1,\"1422\":1,\"1446\":6,\"1487\":1,\"1515\":2,\"1516\":1,\"1788\":1,\"1792\":13,\"1797\":1,\"1835\":1,\"1872\":1,\"1880\":1,\"1954\":1,\"1974\":1,\"2013\":1,\"2035\":1,\"2047\":2,\"2050\":3,\"2068\":2}}],[\"dict方法获取网络层参数\",{\"1\":{\"1671\":1}}],[\"dict\",{\"1\":{\"388\":1,\"405\":1,\"1671\":7,\"1673\":10,\"1674\":1}}],[\"dictionary\",{\"0\":{\"393\":1},\"1\":{\"381\":2,\"393\":1}}],[\"dirty变为false\",{\"1\":{\"1849\":1}}],[\"dirty\",{\"1\":{\"1784\":1,\"1804\":1,\"1847\":1,\"1849\":1,\"1896\":16,\"1986\":7}}],[\"dirs\",{\"1\":{\"1407\":3}}],[\"directly\",{\"1\":{\"1803\":1,\"1804\":1}}],[\"directinactive\",{\"1\":{\"1800\":1}}],[\"directive\",{\"0\":{\"1828\":1},\"1\":{\"1406\":2,\"1407\":2,\"1432\":1,\"1518\":3,\"1825\":1,\"1828\":2}}],[\"directives\",{\"1\":{\"1357\":1,\"1406\":2,\"1407\":13,\"1799\":1}}],[\"direction\",{\"1\":{\"552\":1,\"586\":1,\"587\":1,\"644\":1,\"1284\":1,\"2034\":1,\"2061\":2}}],[\"directory\",{\"1\":{\"257\":1,\"1308\":1}}],[\"dir\",{\"1\":{\"257\":1,\"264\":1,\"380\":1,\"487\":1,\"1655\":6}}],[\"dirname\",{\"0\":{\"262\":1},\"1\":{\"37\":3,\"124\":1,\"142\":1,\"150\":2,\"155\":3,\"239\":3,\"262\":6,\"264\":7,\"287\":1,\"294\":4,\"307\":1,\"329\":1,\"2050\":1}}],[\"disable\",{\"1\":{\"1313\":1,\"1428\":1}}],[\"disabled\",{\"1\":{\"670\":1,\"680\":2,\"1205\":2,\"1515\":1}}],[\"disposition\",{\"1\":{\"1634\":2}}],[\"disposition头中\",{\"1\":{\"1570\":1}}],[\"disposearr\",{\"1\":{\"488\":5}}],[\"dispatch\",{\"1\":{\"1451\":1,\"1453\":2,\"1454\":1}}],[\"dispatchevent\",{\"1\":{\"1357\":1}}],[\"display\",{\"1\":{\"548\":8,\"560\":1,\"566\":2,\"580\":2,\"585\":3,\"599\":1,\"604\":1,\"669\":1,\"1124\":2,\"1302\":2,\"1305\":1,\"1337\":2,\"1401\":1}}],[\"disconnect\",{\"1\":{\"191\":1}}],[\"distribute\",{\"1\":{\"156\":1}}],[\"dist\",{\"1\":{\"15\":1,\"124\":2,\"128\":1,\"129\":3,\"142\":1,\"1583\":1}}],[\"different\",{\"1\":{\"1789\":1}}],[\"diff的过程也叫patch过程\",{\"1\":{\"1789\":1}}],[\"diff\",{\"0\":{\"1787\":1,\"1789\":1,\"1959\":1,\"1960\":1,\"1963\":1,\"1964\":1,\"1965\":1,\"1966\":1,\"1967\":1},\"1\":{\"15\":1,\"17\":1,\"158\":1,\"1394\":2,\"1782\":1,\"1789\":1,\"1862\":1,\"1873\":1,\"1959\":1,\"1962\":1,\"1964\":2,\"1965\":2,\"1966\":2,\"1968\":3,\"1969\":1}}],[\"dblclick<\",{\"1\":{\"1148\":1}}],[\"dblclick\",{\"1\":{\"1148\":2,\"1214\":1}}],[\"db则用来保存数据库连接时的通用代码\",{\"1\":{\"212\":1}}],[\"dbname\",{\"1\":{\"212\":3}}],[\"dbport\",{\"1\":{\"212\":3}}],[\"dbhost\",{\"1\":{\"212\":3}}],[\"dbs\",{\"1\":{\"179\":1}}],[\"db`\",{\"1\":{\"177\":1}}],[\"db\",{\"1\":{\"15\":1,\"179\":2,\"180\":3,\"181\":5,\"205\":1,\"206\":2,\"207\":1,\"212\":7,\"220\":1,\"340\":2}}],[\"dsa\",{\"1\":{\"2100\":1}}],[\"ds\",{\"1\":{\"15\":1,\"1655\":6}}],[\"deindent\",{\"1\":{\"1979\":3}}],[\"deactivated\",{\"1\":{\"2029\":2}}],[\"deactivated路由组件失活时触发\",{\"1\":{\"1466\":1}}],[\"dead\",{\"1\":{\"1875\":1}}],[\"dealings\",{\"1\":{\"156\":1}}],[\"deal\",{\"1\":{\"156\":1}}],[\"deep\",{\"1\":{\"1378\":2,\"1379\":1,\"1380\":2,\"1433\":1,\"1497\":6,\"1784\":1,\"1854\":1,\"1855\":1,\"2069\":1}}],[\"deepclone\",{\"1\":{\"472\":3}}],[\"denied\",{\"1\":{\"1105\":1}}],[\"degrees\",{\"1\":{\"716\":1}}],[\"decrease\",{\"1\":{\"2058\":1}}],[\"decrement\",{\"1\":{\"1453\":2,\"1454\":1,\"1493\":2}}],[\"declared\",{\"1\":{\"1804\":1}}],[\"declare\",{\"1\":{\"1786\":1}}],[\"decay\",{\"1\":{\"1659\":1}}],[\"decay=0\",{\"1\":{\"1659\":2}}],[\"decode\",{\"1\":{\"2045\":1}}],[\"decodeparams\",{\"1\":{\"2041\":1,\"2045\":1}}],[\"decodeattr\",{\"1\":{\"1792\":1}}],[\"decodeuri\",{\"1\":{\"493\":1}}],[\"deconvolution\",{\"1\":{\"1667\":1}}],[\"decoration\",{\"1\":{\"625\":1}}],[\"decimal128\",{\"1\":{\"192\":2}}],[\"debug\",{\"1\":{\"1251\":1,\"1254\":2,\"1265\":9,\"1266\":7,\"1268\":2,\"1270\":2,\"1271\":3,\"1272\":1,\"1273\":1,\"1274\":12,\"1275\":3,\"1277\":2,\"1279\":2,\"1280\":1,\"1285\":2,\"1286\":1,\"1290\":2}}],[\"debounce\",{\"0\":{\"1035\":1},\"1\":{\"460\":1,\"1035\":1}}],[\"debian\",{\"1\":{\"94\":1}}],[\"derivedclassname\",{\"1\":{\"405\":2}}],[\"delta\",{\"1\":{\"2034\":5,\"2053\":2,\"2055\":5,\"2061\":14}}],[\"deltay\",{\"1\":{\"1153\":1}}],[\"delimiters\",{\"1\":{\"1793\":3,\"1805\":2}}],[\"deleting\",{\"1\":{\"1786\":1}}],[\"delete触发trigger时传递操作类型\",{\"1\":{\"1990\":1}}],[\"deleteproperty\",{\"1\":{\"1491\":2,\"1907\":4,\"1914\":2,\"1989\":1,\"1990\":2,\"1992\":1}}],[\"deletenewtypeofvoid\",{\"1\":{\"816\":1}}],[\"delete等\",{\"1\":{\"268\":1}}],[\"deletemany\",{\"1\":{\"201\":1}}],[\"deleteone\",{\"1\":{\"201\":1}}],[\"delete\",{\"1\":{\"14\":1,\"199\":1,\"339\":2,\"349\":1,\"428\":1,\"430\":1,\"769\":1,\"829\":2,\"845\":1,\"862\":2,\"865\":1,\"869\":2,\"872\":1,\"958\":2,\"1086\":2,\"1370\":1,\"1632\":1,\"1786\":4,\"1890\":1,\"1906\":2,\"1907\":1,\"1914\":1,\"1926\":2,\"1927\":8,\"1928\":5,\"1929\":1,\"1930\":1,\"1932\":2,\"1955\":1,\"1984\":1,\"1989\":1,\"1990\":4,\"2047\":2}}],[\"delegate\",{\"0\":{\"1242\":1},\"1\":{\"1214\":1,\"1216\":3}}],[\"delay\",{\"1\":{\"641\":1,\"644\":1,\"1037\":2,\"1181\":6,\"1220\":1,\"1225\":2,\"1507\":2,\"1559\":2,\"1581\":1,\"1582\":1}}],[\"del\",{\"1\":{\"405\":2,\"1786\":1}}],[\"des\",{\"1\":{\"2099\":1}}],[\"descriptor\",{\"1\":{\"1364\":1}}],[\"description\",{\"1\":{\"64\":2,\"659\":1}}],[\"destory阶段执行updatedirectives函数\",{\"1\":{\"1407\":1}}],[\"destruction\",{\"1\":{\"857\":2}}],[\"destroyed\",{\"1\":{\"1807\":1,\"2026\":2,\"2031\":1}}],[\"destroyed改名为\",{\"1\":{\"1500\":1}}],[\"destroy\",{\"1\":{\"355\":1,\"1428\":1,\"2060\":2,\"2061\":3}}],[\"destination\",{\"1\":{\"743\":5}}],[\"desktop\",{\"1\":{\"222\":1,\"262\":1,\"264\":7,\"1093\":1}}],[\"detach\",{\"1\":{\"1208\":1,\"1211\":3}}],[\"detached\",{\"1\":{\"14\":1}}],[\"detail\",{\"1\":{\"1153\":2,\"1459\":2,\"1461\":3,\"1462\":2}}],[\"details>\",{\"1\":{\"697\":1}}],[\"details\",{\"1\":{\"219\":1,\"697\":1,\"1087\":1}}],[\"device=torch\",{\"1\":{\"1676\":2}}],[\"deviceydpi\",{\"1\":{\"1098\":1}}],[\"devicexdpi\",{\"1\":{\"1098\":1}}],[\"device\",{\"1\":{\"649\":1,\"1675\":5,\"1676\":3,\"1680\":6}}],[\"developer\",{\"1\":{\"271\":1,\"659\":1,\"958\":1,\"1105\":1,\"1491\":2,\"1587\":1,\"1607\":1}}],[\"development\",{\"1\":{\"71\":1,\"124\":3}}],[\"dev去打包的时候会发现已经快很多了\",{\"1\":{\"150\":1}}],[\"dev命令打包\",{\"1\":{\"149\":1}}],[\"dev进行打包操作\",{\"1\":{\"138\":1}}],[\"devserver\",{\"1\":{\"133\":1,\"134\":1,\"1444\":1,\"1445\":1}}],[\"devtools\",{\"1\":{\"2040\":1}}],[\"devtool\",{\"1\":{\"124\":2}}],[\"devtime\",{\"1\":{\"117\":2}}],[\"devdependencies\",{\"1\":{\"72\":1}}],[\"dev包信息保存在\",{\"1\":{\"72\":1}}],[\"dev\",{\"1\":{\"72\":1,\"87\":1,\"124\":2,\"128\":1,\"129\":1,\"133\":9,\"134\":1,\"138\":1,\"148\":1,\"149\":1,\"158\":3,\"1483\":1,\"2047\":2,\"2053\":1,\"2058\":1,\"2075\":2}}],[\"dependarray\",{\"1\":{\"1785\":3}}],[\"depend\",{\"1\":{\"1785\":4,\"1804\":1,\"1849\":1}}],[\"dependencygraph\",{\"1\":{\"155\":2}}],[\"dependency\",{\"1\":{\"155\":2}}],[\"dependencies\",{\"1\":{\"72\":1}}],[\"dependecies\",{\"1\":{\"155\":16}}],[\"dep\",{\"1\":{\"1784\":4,\"1785\":7,\"1786\":2,\"1804\":1,\"1842\":1,\"1849\":1,\"1855\":1,\"1889\":1,\"1890\":1}}],[\"dep中的所有watcher实例\",{\"1\":{\"1784\":1}}],[\"depth++\",{\"1\":{\"2031\":1}}],[\"depth\",{\"0\":{\"2068\":1},\"1\":{\"451\":3,\"2031\":3,\"2067\":1,\"2068\":10}}],[\"depsmap\",{\"1\":{\"1889\":20,\"1890\":8,\"1892\":3,\"1893\":3,\"1906\":8,\"1917\":1,\"1918\":1,\"1930\":1,\"1932\":1,\"1985\":8,\"1990\":1,\"1993\":2}}],[\"deps\",{\"1\":{\"45\":2,\"1889\":10,\"1890\":21,\"1891\":2,\"1893\":2,\"1894\":1,\"1895\":1,\"1984\":10,\"1985\":8}}],[\"defining\",{\"1\":{\"1804\":1}}],[\"definition\",{\"1\":{\"1407\":8,\"1423\":5,\"1804\":1,\"1828\":13}}],[\"definestore传入options时调用这个函数\",{\"1\":{\"2021\":1}}],[\"definestore返回一个函数\",{\"1\":{\"2018\":1}}],[\"definestore\",{\"0\":{\"2017\":1},\"1\":{\"2012\":2,\"2015\":5,\"2016\":1,\"2018\":1,\"2019\":5}}],[\"defineownproperty\",{\"1\":{\"1916\":1}}],[\"definecomputed\",{\"1\":{\"1804\":2}}],[\"definecomponent\",{\"1\":{\"1519\":2,\"2062\":2,\"2067\":1}}],[\"defineasynccomponent\",{\"1\":{\"1516\":2}}],[\"defineexpose\",{\"1\":{\"1493\":2,\"1499\":3}}],[\"defineemits\",{\"1\":{\"1493\":2}}],[\"defineprops\",{\"1\":{\"1493\":4}}],[\"defineproperties\",{\"0\":{\"1060\":1},\"1\":{\"1060\":1}}],[\"defineproperty来完成代理\",{\"1\":{\"1889\":1}}],[\"defineproperty实现\",{\"1\":{\"1886\":1}}],[\"defineproperty实现的响应式并不适用于数组对象\",{\"1\":{\"1785\":1}}],[\"defineproperty将所有计算属性添加到组件实例\",{\"1\":{\"1859\":1}}],[\"defineproperty给传入的prop数据添加拦截\",{\"1\":{\"1840\":1}}],[\"defineproperty方法为\",{\"1\":{\"2026\":1}}],[\"defineproperty方法将所有计算属性挂载到组件实例上\",{\"1\":{\"1846\":1}}],[\"defineproperty方法将组件中所有计算属性添加到\",{\"1\":{\"1845\":1}}],[\"defineproperty方法实现的对object数据的观测仅仅只能观测到object数据的取值及设置值\",{\"1\":{\"1786\":1}}],[\"defineproperty方法提供的getter和setter\",{\"1\":{\"1373\":1}}],[\"defineproperty\",{\"0\":{\"1059\":1,\"1364\":1},\"1\":{\"155\":1,\"1059\":2,\"1364\":2,\"1365\":1,\"1366\":1,\"1396\":1,\"1430\":1,\"1478\":1,\"1487\":1,\"1490\":2,\"1492\":1,\"1804\":1,\"1836\":2,\"1838\":1,\"1936\":2,\"1937\":2,\"2026\":2,\"2047\":5,\"2053\":2,\"2055\":2}}],[\"definereactive\",{\"1\":{\"1430\":2,\"1785\":1,\"1786\":1,\"1803\":2,\"1804\":2,\"1838\":1,\"2026\":1,\"2031\":1}}],[\"defined\",{\"1\":{\"783\":1,\"786\":1,\"798\":1,\"808\":1,\"809\":1,\"939\":3,\"940\":1,\"948\":1,\"958\":1,\"1804\":5,\"2075\":1}}],[\"define\",{\"1\":{\"41\":2,\"44\":1,\"1663\":2}}],[\"def\",{\"1\":{\"402\":3,\"408\":2,\"1407\":1,\"1655\":3,\"1669\":2,\"1670\":2,\"1671\":2,\"1673\":2,\"1680\":2,\"1785\":2,\"1802\":5}}],[\"defaultclass\",{\"1\":{\"2066\":3}}],[\"defaulttagre\",{\"1\":{\"1793\":1}}],[\"defaults\",{\"1\":{\"1584\":1,\"1586\":1}}],[\"default>\",{\"1\":{\"1516\":1}}],[\"defaultprevented属性表示默认行为是否被阻止\",{\"1\":{\"1156\":1}}],[\"defaultprevented\",{\"1\":{\"1156\":3,\"2065\":2}}],[\"default用于书写默认的条件\",{\"1\":{\"819\":1}}],[\"default\",{\"1\":{\"51\":2,\"52\":1,\"124\":3,\"155\":1,\"156\":1,\"195\":1,\"405\":1,\"819\":2,\"1260\":5,\"1261\":1,\"1306\":3,\"1309\":1,\"1312\":4,\"1320\":1,\"1429\":1,\"1446\":2,\"1450\":1,\"1451\":1,\"1452\":1,\"1456\":1,\"1462\":1,\"1507\":1,\"1519\":1,\"1788\":1,\"1803\":2,\"1804\":1,\"1877\":1,\"1880\":2,\"1937\":1,\"2027\":1,\"2028\":2,\"2031\":1,\"2041\":1,\"2047\":2,\"2050\":1,\"2064\":1,\"2066\":2,\"2070\":3}}],[\"defer><\",{\"1\":{\"675\":1}}],[\"defer\",{\"1\":{\"47\":1,\"675\":1}}],[\"demo1\",{\"1\":{\"1369\":1}}],[\"demo\",{\"1\":{\"12\":1,\"148\":1,\"149\":3,\"1221\":3,\"1224\":3,\"1225\":1,\"1348\":1,\"1349\":1,\"1368\":2,\"1437\":1,\"1438\":2,\"1439\":2,\"1460\":3,\"1507\":1,\"1827\":1}}],[\"d\",{\"1\":{\"10\":1,\"14\":1,\"17\":1,\"71\":1,\"72\":2,\"82\":1,\"123\":1,\"128\":1,\"129\":1,\"133\":1,\"138\":1,\"147\":1,\"173\":1,\"261\":1,\"262\":1,\"264\":4,\"379\":1,\"382\":3,\"388\":2,\"482\":2,\"494\":2,\"758\":1,\"789\":7,\"792\":2,\"806\":4,\"889\":1,\"903\":1,\"904\":3,\"905\":4,\"906\":6,\"910\":3,\"911\":12,\"913\":5,\"917\":1,\"923\":1,\"925\":10,\"981\":1,\"983\":4,\"995\":6,\"1054\":1,\"1368\":1,\"1379\":1,\"1587\":1,\"1723\":1,\"1745\":2,\"1746\":1,\"1797\":1,\"1865\":2,\"2040\":1,\"2100\":1}}],[\"c的属性值\",{\"1\":{\"1854\":1}}],[\"c5\",{\"1\":{\"1433\":5}}],[\"c4\",{\"1\":{\"1433\":3}}],[\"c3\",{\"1\":{\"1433\":3}}],[\"c2\",{\"1\":{\"1433\":3}}],[\"ccc\",{\"1\":{\"1297\":2,\"1335\":4,\"1336\":1}}],[\"c69\",{\"1\":{\"1266\":1}}],[\"c^\",{\"1\":{\"903\":1}}],[\"c1\",{\"1\":{\"732\":1,\"1433\":4}}],[\"cp\",{\"1\":{\"719\":1}}],[\"cp2y\",{\"1\":{\"719\":2}}],[\"cp2x\",{\"1\":{\"719\":2}}],[\"cp1y\",{\"1\":{\"718\":2,\"719\":1}}],[\"cp1x\",{\"1\":{\"718\":2,\"719\":2}}],[\"cpuclass\",{\"1\":{\"1091\":1}}],[\"cpu\",{\"1\":{\"407\":3,\"1091\":1,\"1169\":1,\"1675\":2}}],[\"ctor\",{\"1\":{\"1358\":4,\"1423\":5,\"1802\":4,\"1825\":2,\"1834\":1,\"1862\":1}}],[\"ctx\",{\"1\":{\"704\":2,\"713\":8,\"725\":3,\"726\":3,\"727\":3,\"736\":1,\"739\":1,\"740\":5,\"745\":1,\"1822\":4,\"1997\":1,\"2001\":2}}],[\"ctrl+v\",{\"1\":{\"1160\":1}}],[\"ctrl+c\",{\"1\":{\"1160\":1}}],[\"ctrlkey\",{\"1\":{\"1154\":2,\"2065\":1}}],[\"ctrl\",{\"1\":{\"275\":1,\"1154\":4,\"1370\":1,\"2065\":1}}],[\"cuda和cuda\",{\"1\":{\"1675\":1}}],[\"cuda\",{\"1\":{\"1655\":1,\"1675\":5,\"1676\":4}}],[\"custom\",{\"1\":{\"1655\":2,\"2064\":2,\"2065\":1,\"2066\":1}}],[\"customref\",{\"0\":{\"1507\":1},\"1\":{\"1507\":2}}],[\"customerror\",{\"1\":{\"760\":1}}],[\"cube\",{\"1\":{\"1470\":1}}],[\"cubic\",{\"1\":{\"641\":2}}],[\"cut和copy事件中的getdata\",{\"1\":{\"1161\":1}}],[\"cutstring\",{\"1\":{\"1040\":1}}],[\"cut\",{\"1\":{\"875\":1,\"1160\":2}}],[\"curly++\",{\"1\":{\"1794\":1}}],[\"curly\",{\"1\":{\"1794\":3}}],[\"curindex\",{\"1\":{\"1792\":2}}],[\"currying\",{\"1\":{\"1039\":1}}],[\"curry\",{\"1\":{\"463\":2,\"1039\":4,\"1040\":1}}],[\"currentname\",{\"1\":{\"2070\":5}}],[\"currentnode\",{\"1\":{\"1976\":2,\"1977\":21}}],[\"currentmatched\",{\"1\":{\"2065\":9}}],[\"currentroute的改变会引起组件的重新渲染\",{\"1\":{\"2034\":1}}],[\"currentroute\",{\"0\":{\"2044\":1},\"1\":{\"2034\":1,\"2035\":8,\"2041\":3,\"2044\":3,\"2047\":19,\"2065\":7,\"2068\":1}}],[\"currentlocation\",{\"1\":{\"2034\":3,\"2053\":1,\"2057\":2,\"2058\":9,\"2060\":1,\"2061\":9,\"2065\":1}}],[\"currentindent++\",{\"1\":{\"1979\":1}}],[\"currentindent\",{\"1\":{\"1979\":6}}],[\"currentinstance\",{\"1\":{\"1954\":5,\"2001\":1}}],[\"currenttarget\",{\"1\":{\"1219\":5,\"2065\":3}}],[\"currenttime\",{\"1\":{\"750\":1,\"752\":2}}],[\"currentstate\",{\"1\":{\"1974\":10,\"2058\":9}}],[\"currentstyle\",{\"0\":{\"1128\":1},\"1\":{\"1128\":1}}],[\"currentsrc\",{\"1\":{\"750\":1}}],[\"current\",{\"1\":{\"408\":1,\"412\":3,\"413\":3,\"416\":3,\"450\":2,\"452\":4,\"458\":3,\"2026\":1,\"2029\":14,\"2031\":4,\"2034\":4,\"2058\":13,\"2064\":1,\"2066\":1}}],[\"cur\",{\"1\":{\"439\":3,\"946\":8,\"1802\":13}}],[\"curd\",{\"0\":{\"199\":1}}],[\"circular\",{\"1\":{\"1807\":1}}],[\"circle\",{\"1\":{\"143\":1,\"516\":1,\"636\":1,\"1274\":1}}],[\"cifar\",{\"1\":{\"1674\":1}}],[\"cifar100\",{\"1\":{\"1656\":1}}],[\"cifar10\",{\"1\":{\"1656\":3,\"1674\":1}}],[\"cid++\",{\"1\":{\"1825\":1}}],[\"cid\",{\"1\":{\"1358\":1,\"1802\":1,\"1825\":2}}],[\"cidrrange\",{\"1\":{\"501\":2}}],[\"cidrmask\",{\"1\":{\"501\":2}}],[\"cidr\",{\"1\":{\"501\":2}}],[\"city\",{\"1\":{\"493\":1,\"1124\":2}}],[\"city=\",{\"1\":{\"493\":1}}],[\"c=3><\",{\"1\":{\"1792\":1}}],[\"c=300传参\",{\"1\":{\"1576\":1}}],[\"c=300\",{\"1\":{\"1576\":1,\"1577\":1}}],[\"c=1\",{\"1\":{\"1012\":1}}],[\"c=xx\",{\"1\":{\"494\":1}}],[\"c=none\",{\"1\":{\"398\":1}}],[\"c=8+7j\",{\"1\":{\"395\":1}}],[\"cell\",{\"1\":{\"669\":1}}],[\"ceil\",{\"1\":{\"395\":1,\"480\":1,\"882\":2,\"1663\":1}}],[\"centerbox\",{\"1\":{\"1296\":1}}],[\"centerwrap\",{\"1\":{\"582\":2}}],[\"center\",{\"1\":{\"386\":1,\"582\":4,\"588\":2,\"589\":1,\"596\":1,\"599\":1,\"604\":1,\"619\":1,\"625\":1,\"630\":1,\"635\":2,\"636\":1,\"730\":4,\"1148\":1,\"1252\":2,\"1296\":2,\"1446\":2}}],[\"centos\",{\"1\":{\"94\":1}}],[\"cdata\",{\"1\":{\"1792\":1}}],[\"cdn\",{\"1\":{\"1207\":2,\"1219\":1,\"1583\":1}}],[\"cd\",{\"1\":{\"332\":1,\"912\":2,\"918\":2,\"920\":1,\"1482\":1,\"1483\":1}}],[\"csp\",{\"1\":{\"2095\":1}}],[\"csv\",{\"1\":{\"1655\":6}}],[\"cst\",{\"1\":{\"876\":2,\"877\":2}}],[\"csdn\",{\"1\":{\"219\":1,\"1087\":1}}],[\"csrf\",{\"0\":{\"2087\":1},\"1\":{\"361\":1,\"2087\":3,\"2088\":1}}],[\"csr\",{\"0\":{\"1640\":1},\"1\":{\"219\":1,\"1640\":1}}],[\"css变成了app\",{\"1\":{\"1543\":1}}],[\"cssom\",{\"1\":{\"1526\":2,\"1530\":1}}],[\"css作为演示\",{\"1\":{\"1441\":1}}],[\"css引入到网页中<link\",{\"1\":{\"623\":1}}],[\"css或者all\",{\"1\":{\"623\":1}}],[\"css视觉样式\",{\"0\":{\"608\":1}}],[\"css布局\",{\"0\":{\"551\":1}}],[\"css2\",{\"1\":{\"548\":1}}],[\"css3\",{\"1\":{\"548\":2}}],[\"css基本规则\",{\"0\":{\"513\":1}}],[\"css$\",{\"1\":{\"138\":1,\"142\":1}}],[\"css\",{\"0\":{\"1206\":1,\"1248\":1,\"1315\":1,\"1316\":1,\"2109\":1},\"1\":{\"30\":1,\"41\":1,\"44\":1,\"122\":2,\"138\":8,\"142\":1,\"143\":3,\"159\":1,\"271\":1,\"288\":1,\"292\":4,\"294\":7,\"295\":1,\"331\":2,\"332\":1,\"514\":1,\"515\":3,\"521\":1,\"524\":1,\"527\":1,\"528\":1,\"529\":1,\"530\":1,\"532\":1,\"535\":1,\"539\":2,\"542\":2,\"564\":1,\"580\":3,\"584\":1,\"610\":2,\"615\":1,\"623\":2,\"640\":1,\"646\":5,\"649\":8,\"656\":1,\"659\":3,\"669\":2,\"703\":1,\"708\":1,\"720\":2,\"725\":1,\"730\":1,\"733\":1,\"748\":2,\"1112\":1,\"1127\":2,\"1150\":1,\"1168\":1,\"1172\":3,\"1193\":1,\"1194\":2,\"1201\":3,\"1203\":2,\"1206\":6,\"1232\":4,\"1237\":1,\"1238\":1,\"1247\":3,\"1248\":1,\"1249\":1,\"1250\":2,\"1255\":1,\"1259\":1,\"1262\":3,\"1263\":1,\"1265\":3,\"1266\":1,\"1267\":1,\"1269\":1,\"1273\":1,\"1275\":3,\"1278\":1,\"1282\":1,\"1288\":1,\"1289\":1,\"1290\":1,\"1298\":2,\"1299\":7,\"1300\":2,\"1301\":3,\"1302\":1,\"1306\":1,\"1308\":5,\"1309\":1,\"1312\":1,\"1313\":8,\"1314\":4,\"1315\":10,\"1316\":3,\"1317\":5,\"1318\":1,\"1319\":1,\"1320\":1,\"1324\":3,\"1325\":1,\"1334\":1,\"1341\":1,\"1401\":1,\"1433\":2,\"1434\":1,\"1441\":3,\"1515\":1,\"1526\":6,\"1543\":8,\"1555\":1,\"1556\":1,\"1570\":2,\"1601\":1,\"1602\":1,\"1636\":2,\"2010\":1,\"2032\":1},\"2\":{\"537\":1,\"550\":1,\"607\":1,\"638\":1,\"653\":1}}],[\"c++编写的\",{\"1\":{\"238\":1}}],[\"c++\",{\"1\":{\"218\":2,\"865\":1,\"1673\":1}}],[\"c++语言来编写\",{\"1\":{\"24\":1}}],[\"crl\",{\"1\":{\"2091\":1}}],[\"crockford\",{\"1\":{\"895\":1}}],[\"crossentropyloss\",{\"1\":{\"1680\":1}}],[\"crossorigin\",{\"1\":{\"496\":1}}],[\"cross\",{\"1\":{\"71\":5,\"1605\":1,\"2087\":1,\"2094\":1}}],[\"creatroutermatcher\",{\"1\":{\"2042\":1}}],[\"creating\",{\"1\":{\"1482\":1}}],[\"createbaselocation\",{\"1\":{\"2058\":1}}],[\"createhref\",{\"1\":{\"2053\":2,\"2055\":2}}],[\"createhydrationfns\",{\"1\":{\"1998\":1}}],[\"createnavigationredirectederror\",{\"1\":{\"2029\":1}}],[\"createnavigationabortederror\",{\"1\":{\"2029\":1}}],[\"createnavigationcancellederror\",{\"1\":{\"2029\":2}}],[\"creatematcher\",{\"1\":{\"2027\":1,\"2028\":1}}],[\"createoptionstore\",{\"1\":{\"2020\":1}}],[\"createoptionsstore\",{\"0\":{\"2021\":1},\"1\":{\"2019\":1,\"2021\":1}}],[\"createoncehandler\",{\"1\":{\"1368\":1,\"1802\":3}}],[\"createidentifier\",{\"1\":{\"1978\":2}}],[\"createimagedata\",{\"1\":{\"739\":1,\"740\":1}}],[\"createvnode\",{\"1\":{\"1944\":1,\"1997\":1,\"1998\":1}}],[\"createwebhistroy\",{\"1\":{\"2052\":3}}],[\"createwebhistory\",{\"0\":{\"2052\":1},\"1\":{\"2041\":1,\"2047\":2,\"2052\":1,\"2053\":1,\"2055\":1}}],[\"createwatcher\",{\"1\":{\"1804\":3,\"1810\":1}}],[\"createwritestream\",{\"0\":{\"247\":1},\"1\":{\"243\":1,\"247\":2,\"263\":1}}],[\"creategetterinvoker\",{\"1\":{\"1804\":3}}],[\"createfninvoker\",{\"1\":{\"1802\":1}}],[\"createtext\",{\"1\":{\"1951\":2}}],[\"createtextvnode\",{\"1\":{\"1797\":2}}],[\"createtextnode\",{\"1\":{\"483\":1,\"1112\":1,\"1117\":1,\"1208\":2,\"1777\":1,\"1789\":2,\"1822\":1,\"1878\":1}}],[\"createarrayexpression\",{\"1\":{\"1978\":2}}],[\"createastelement\",{\"1\":{\"1791\":1}}],[\"createapp主要完成了如下三个功能\",{\"1\":{\"1998\":1}}],[\"createappapi\",{\"1\":{\"1944\":1,\"1997\":1,\"1998\":3}}],[\"createapp\",{\"0\":{\"1998\":1},\"1\":{\"1484\":3,\"1944\":4,\"1997\":4,\"1998\":5,\"2003\":1,\"2010\":1,\"2041\":1,\"2047\":5}}],[\"createkeytooldidx\",{\"1\":{\"1789\":1}}],[\"createcurrentlocation\",{\"1\":{\"2034\":1,\"2057\":1,\"2058\":12,\"2061\":4}}],[\"createcallexpression\",{\"1\":{\"1978\":2}}],[\"createchildren\",{\"1\":{\"1789\":2}}],[\"createcomputedgetter\",{\"1\":{\"1804\":3,\"1849\":1}}],[\"createcompilercreator\",{\"1\":{\"1790\":1}}],[\"createcompiler\",{\"1\":{\"1790\":1}}],[\"createcomponentinstance\",{\"1\":{\"1997\":1,\"2000\":1}}],[\"createcomponent\",{\"1\":{\"1358\":1,\"1423\":1,\"1802\":1}}],[\"createcomment\",{\"1\":{\"1789\":1}}],[\"createcollection\",{\"1\":{\"180\":1}}],[\"created\",{\"1\":{\"1799\":1,\"1954\":4,\"1956\":2}}],[\"created===>setup\",{\"1\":{\"1500\":1}}],[\"createdocumentfragment\",{\"1\":{\"480\":1,\"1120\":1}}],[\"createemptyvnode\",{\"1\":{\"1797\":2,\"1806\":1}}],[\"createelm\",{\"1\":{\"1789\":4}}],[\"createelement\",{\"1\":{\"474\":1,\"480\":2,\"483\":1,\"496\":2,\"765\":1,\"773\":1,\"1112\":1,\"1116\":1,\"1120\":1,\"1124\":1,\"1208\":2,\"1423\":1,\"1789\":1,\"1797\":1,\"1865\":1,\"1878\":1,\"1946\":3,\"1948\":2}}],[\"createevent\",{\"1\":{\"1357\":1}}],[\"createsetupstore\",{\"0\":{\"2020\":1},\"1\":{\"2019\":1,\"2020\":2,\"2021\":1}}],[\"createsetupcontext\",{\"1\":{\"1997\":1,\"2001\":1}}],[\"createserver\",{\"1\":{\"273\":2,\"282\":1,\"283\":1,\"284\":2,\"285\":1,\"287\":2,\"294\":2}}],[\"createstringliteral\",{\"1\":{\"1978\":3}}],[\"createstudent\",{\"1\":{\"1047\":2}}],[\"createpinia正常运行\",{\"1\":{\"2016\":1}}],[\"createpinia返回的是一个\",{\"1\":{\"2016\":1}}],[\"createpinia\",{\"0\":{\"2016\":1},\"1\":{\"2010\":2,\"2015\":4,\"2016\":3}}],[\"createperson\",{\"1\":{\"1047\":2}}],[\"createpattern\",{\"1\":{\"723\":1}}],[\"createroutererror<navigationredirecterror>\",{\"1\":{\"2075\":1}}],[\"createroutererror<navigationfailure>\",{\"1\":{\"2075\":1}}],[\"createroutermathcer\",{\"1\":{\"2042\":1}}],[\"createroutermatcher\",{\"1\":{\"2042\":6}}],[\"createrouter\",{\"0\":{\"2039\":1},\"1\":{\"2040\":3,\"2041\":10,\"2042\":6,\"2043\":1,\"2047\":4,\"2052\":2,\"2055\":1}}],[\"createroutemap\",{\"1\":{\"2028\":3}}],[\"createrenderer\",{\"1\":{\"1944\":2,\"1946\":1,\"1948\":1,\"1997\":1,\"1998\":1}}],[\"createreactive\",{\"1\":{\"1913\":5,\"1914\":5,\"1917\":2,\"1918\":1,\"1920\":2,\"1921\":1,\"1923\":4,\"1927\":2,\"1928\":2,\"1991\":4,\"1992\":3,\"1993\":1}}],[\"createreadstream\",{\"0\":{\"252\":1},\"1\":{\"249\":1,\"252\":2,\"263\":1}}],[\"createradialgradient\",{\"1\":{\"726\":2}}],[\"createlineargradient\",{\"1\":{\"725\":3}}],[\"create\",{\"0\":{\"467\":1},\"1\":{\"191\":1,\"199\":1,\"200\":1,\"212\":1,\"273\":1,\"355\":1,\"421\":1,\"467\":1,\"1066\":1,\"1067\":1,\"1407\":2,\"1424\":1,\"1425\":1,\"1426\":1,\"1428\":1,\"1482\":2,\"1483\":1,\"1785\":1,\"1802\":1,\"1803\":1,\"1804\":2,\"1816\":1,\"1825\":1,\"1828\":2,\"1864\":1,\"2008\":2}}],[\"credentials\",{\"1\":{\"343\":1,\"1612\":2}}],[\"cb中\",{\"1\":{\"2029\":1}}],[\"cb中包含回调和配置\",{\"1\":{\"1810\":1}}],[\"cbs\",{\"1\":{\"1789\":2,\"1815\":8,\"1816\":5,\"2029\":1}}],[\"cb\",{\"1\":{\"156\":2,\"1784\":1,\"1810\":5,\"1816\":4,\"1822\":4,\"1854\":2,\"1855\":2,\"1897\":16,\"1987\":3,\"2029\":8}}],[\"cls\",{\"1\":{\"405\":1}}],[\"clearwatch\",{\"1\":{\"1102\":2}}],[\"clearinterval\",{\"1\":{\"1038\":1,\"1088\":4}}],[\"cleardata\",{\"1\":{\"765\":2,\"1161\":3}}],[\"clearrect\",{\"1\":{\"706\":2,\"727\":1}}],[\"clearfix\",{\"1\":{\"566\":3}}],[\"cleartimeout\",{\"1\":{\"460\":1,\"504\":2,\"1035\":1,\"1088\":2,\"1507\":1}}],[\"clear\",{\"0\":{\"565\":1},\"1\":{\"408\":1,\"565\":1,\"566\":2,\"769\":1,\"862\":1,\"869\":2,\"1150\":1,\"1436\":1,\"1926\":2,\"1954\":1}}],[\"clearcookie\",{\"1\":{\"349\":1}}],[\"cleanup\",{\"0\":{\"1890\":1},\"1\":{\"1890\":5,\"1891\":1,\"1893\":1,\"1894\":1,\"1895\":1,\"1897\":6,\"1984\":3,\"1985\":1,\"1987\":4}}],[\"cleanwebpackplugin\",{\"1\":{\"129\":2}}],[\"clean\",{\"1\":{\"129\":6,\"1792\":2}}],[\"cloak>\",{\"1\":{\"1401\":1}}],[\"cloak属性\",{\"1\":{\"1401\":1}}],[\"cloak\",{\"0\":{\"1401\":1},\"1\":{\"1401\":2,\"1404\":1}}],[\"closure\",{\"1\":{\"402\":1}}],[\"close=\",{\"1\":{\"1519\":1}}],[\"closepath\",{\"1\":{\"711\":5}}],[\"closest\",{\"1\":{\"636\":2}}],[\"close\",{\"1\":{\"191\":1,\"200\":1,\"201\":2,\"202\":2,\"203\":4,\"209\":1,\"210\":1,\"211\":1,\"212\":1,\"269\":1,\"404\":2,\"1088\":1,\"1105\":1,\"1519\":1}}],[\"clonevnode\",{\"1\":{\"1789\":1}}],[\"clonenode\",{\"1\":{\"1123\":3}}],[\"clone\",{\"0\":{\"1213\":1},\"1\":{\"13\":1,\"17\":1,\"1208\":1,\"1232\":1}}],[\"claim\",{\"1\":{\"156\":1}}],[\"class可配置高亮样式\",{\"1\":{\"1456\":1}}],[\"classarr\",{\"1\":{\"1385\":2}}],[\"classobj\",{\"1\":{\"1385\":2}}],[\"class<component>\",{\"1\":{\"1358\":1,\"1799\":1,\"1802\":1}}],[\"class4\",{\"1\":{\"685\":1}}],[\"classlist\",{\"1\":{\"685\":4,\"1125\":5,\"1949\":1}}],[\"classlist属于property\",{\"1\":{\"685\":1}}],[\"classname\",{\"1\":{\"680\":1,\"681\":1,\"1125\":1,\"1949\":3}}],[\"class2\",{\"1\":{\"405\":1,\"685\":1}}],[\"class1\",{\"1\":{\"405\":1,\"685\":1}}],[\"classmethod\",{\"1\":{\"405\":1}}],[\"classes\",{\"1\":{\"148\":2}}],[\"class=\",{\"1\":{\"143\":4,\"520\":1,\"533\":1,\"580\":16,\"582\":9,\"623\":3,\"681\":2,\"773\":1,\"1112\":6,\"1120\":2,\"1123\":4,\"1124\":1,\"1148\":4,\"1155\":4,\"1353\":1,\"1369\":1,\"1385\":7,\"1441\":2,\"1456\":1,\"1515\":2,\"1516\":1,\"1788\":1,\"1792\":4,\"1835\":1}}],[\"class\",{\"0\":{\"1235\":1,\"1236\":1,\"1385\":1},\"1\":{\"49\":1,\"148\":1,\"155\":1,\"156\":1,\"405\":6,\"408\":2,\"498\":1,\"516\":2,\"680\":2,\"903\":1,\"1125\":1,\"1205\":3,\"1236\":2,\"1299\":1,\"1329\":3,\"1337\":2,\"1353\":1,\"1388\":2,\"1515\":1,\"1655\":1,\"1669\":1,\"1670\":1,\"1671\":1,\"1673\":1,\"1777\":1,\"1785\":1,\"1788\":2,\"1790\":1,\"1792\":3,\"1949\":6,\"2066\":1}}],[\"clinet\",{\"1\":{\"1630\":1}}],[\"cli版本在4\",{\"1\":{\"1482\":1}}],[\"cli版本\",{\"1\":{\"1482\":1}}],[\"cli仅作为学习使用\",{\"1\":{\"1425\":1}}],[\"clipboarddata\",{\"1\":{\"1161\":16,\"1162\":4}}],[\"clip\",{\"1\":{\"390\":1,\"402\":5,\"403\":1,\"404\":4,\"405\":18,\"408\":4,\"557\":2,\"582\":1,\"632\":1,\"635\":1}}],[\"clickhandler\",{\"1\":{\"1802\":2}}],[\"click=\",{\"1\":{\"1353\":1,\"1368\":3,\"1369\":1,\"1385\":1,\"1415\":1,\"1437\":2,\"1486\":1,\"1515\":1,\"1518\":1,\"1519\":1,\"1872\":1,\"1877\":1,\"1880\":1}}],[\"click<\",{\"1\":{\"1148\":1}}],[\"click\",{\"1\":{\"287\":2,\"496\":1,\"993\":1,\"995\":5,\"1105\":2,\"1139\":1,\"1140\":6,\"1145\":2,\"1146\":3,\"1148\":2,\"1152\":4,\"1153\":1,\"1154\":1,\"1157\":2,\"1158\":4,\"1214\":3,\"1216\":2,\"1218\":2,\"1219\":1,\"1353\":1,\"1368\":1,\"1369\":4,\"1407\":2,\"1437\":4,\"1802\":2,\"1827\":1,\"1872\":1,\"1879\":2,\"1880\":1,\"2087\":1}}],[\"clienty+滚动\",{\"1\":{\"1153\":1}}],[\"clienty\",{\"1\":{\"764\":1,\"1153\":2}}],[\"clientx\",{\"1\":{\"764\":1,\"1153\":2}}],[\"clientwidth来获取\",{\"1\":{\"1150\":1}}],[\"clientwidth以及document\",{\"1\":{\"1087\":1}}],[\"clientwidth\",{\"1\":{\"727\":1,\"1087\":3,\"1150\":1}}],[\"clientheight以及document\",{\"1\":{\"1150\":1}}],[\"clientheight也可以获取到页面视图区的大小\",{\"1\":{\"1087\":1}}],[\"clientheight\",{\"1\":{\"478\":2,\"479\":3,\"727\":1,\"1087\":3,\"1150\":1}}],[\"client\",{\"1\":{\"158\":1,\"219\":1,\"1153\":2}}],[\"cli\",{\"0\":{\"1482\":1},\"1\":{\"66\":2,\"123\":3,\"147\":2,\"1426\":2,\"1482\":3,\"1867\":1}}],[\"cnn\",{\"1\":{\"1661\":1}}],[\"cnblogs\",{\"1\":{\"918\":1}}],[\"cnpm\",{\"0\":{\"70\":1,\"79\":1},\"1\":{\"60\":1,\"67\":1,\"80\":3,\"81\":2,\"82\":7,\"94\":1}}],[\"cn\",{\"1\":{\"39\":1,\"146\":1,\"213\":1,\"241\":1,\"271\":1,\"298\":1,\"341\":2,\"509\":1,\"510\":1,\"511\":1,\"958\":1,\"1015\":1,\"1105\":1,\"1483\":2,\"1485\":1,\"1491\":2,\"1587\":1,\"1591\":1,\"2047\":1,\"2053\":1}}],[\"ca\",{\"1\":{\"2091\":1}}],[\"car\",{\"1\":{\"1508\":6}}],[\"cart\",{\"1\":{\"321\":1}}],[\"caps\",{\"1\":{\"1370\":1}}],[\"capture\",{\"1\":{\"1369\":1,\"1802\":3}}],[\"capturing\",{\"1\":{\"913\":1}}],[\"captruing\",{\"1\":{\"1140\":1}}],[\"camelcase\",{\"1\":{\"1408\":1,\"1419\":1}}],[\"camelize\",{\"1\":{\"1358\":1}}],[\"camel\",{\"1\":{\"1040\":3}}],[\"category\",{\"1\":{\"1446\":2}}],[\"category>\",{\"1\":{\"1446\":4}}],[\"cat\",{\"1\":{\"925\":11}}],[\"catch块中捕获该异常\",{\"1\":{\"504\":1}}],[\"catch\",{\"1\":{\"242\":1,\"245\":1,\"476\":1,\"499\":1,\"504\":1,\"1187\":1,\"1232\":1,\"1772\":1,\"1777\":3,\"1804\":1,\"1815\":1,\"1822\":1,\"1855\":1,\"2029\":2,\"2047\":2,\"2058\":1,\"2065\":1,\"2072\":1,\"2075\":1,\"2084\":2}}],[\"case\",{\"1\":{\"819\":6,\"919\":1,\"1370\":1,\"1408\":1,\"1419\":1,\"1785\":3,\"1794\":9,\"1803\":1,\"1974\":9,\"1979\":5,\"2027\":3,\"2049\":2,\"2050\":2,\"2063\":1}}],[\"canonlybecalledonce\",{\"1\":{\"2075\":1}}],[\"canbeleftopentag\",{\"1\":{\"1791\":2,\"1792\":3}}],[\"canmove表示是否需要移动节点\",{\"1\":{\"1789\":1}}],[\"canmove\",{\"1\":{\"1789\":4}}],[\"cannot\",{\"1\":{\"830\":1,\"1804\":1}}],[\"canplaythrough\",{\"1\":{\"752\":2}}],[\"canplay\",{\"1\":{\"752\":1}}],[\"canvas\",{\"0\":{\"700\":1,\"701\":1,\"703\":1,\"705\":1,\"709\":1,\"713\":1,\"716\":1,\"717\":1,\"718\":1,\"719\":1,\"720\":1,\"721\":1,\"725\":1,\"726\":1,\"728\":1,\"729\":1,\"732\":1,\"734\":1,\"735\":1,\"741\":1},\"1\":{\"496\":1,\"701\":2,\"702\":2,\"703\":2,\"704\":5,\"705\":1,\"706\":2,\"707\":1,\"708\":1,\"711\":5,\"713\":3,\"720\":6,\"722\":4,\"729\":1,\"735\":1,\"737\":1,\"742\":1,\"744\":1,\"745\":1},\"2\":{\"775\":1}}],[\"cancelednavigationcheck\",{\"1\":{\"2072\":2,\"2079\":1,\"2080\":1,\"2081\":1,\"2082\":1,\"2083\":1}}],[\"cancelable属性返回一个布尔值\",{\"1\":{\"1156\":1}}],[\"cancelable\",{\"1\":{\"1156\":2}}],[\"cancel\",{\"1\":{\"408\":1,\"1332\":4}}],[\"can\",{\"1\":{\"59\":1,\"752\":2,\"1255\":1,\"1305\":1,\"2065\":1}}],[\"callval\",{\"1\":{\"2031\":2}}],[\"callwitherrorhandling\",{\"1\":{\"1875\":1}}],[\"callhook\",{\"1\":{\"1799\":2,\"1806\":3,\"1807\":2}}],[\"callable\",{\"1\":{\"1655\":1}}],[\"callit\",{\"1\":{\"995\":3}}],[\"callexp\",{\"1\":{\"1978\":4}}],[\"callexpression\",{\"1\":{\"1975\":3,\"1978\":2,\"1979\":1}}],[\"caller\",{\"1\":{\"952\":3}}],[\"caller属性是函数对象本身的属性\",{\"1\":{\"952\":1}}],[\"called\",{\"1\":{\"438\":1,\"441\":1,\"443\":1,\"1799\":1}}],[\"callee的作用在于能够找到arguments对象所属的函数\",{\"1\":{\"953\":1}}],[\"callee是arguments对象的一个属性\",{\"1\":{\"953\":1}}],[\"callee\",{\"1\":{\"239\":2,\"951\":1,\"953\":3,\"1975\":3,\"1978\":3,\"1979\":2}}],[\"callbacks\",{\"1\":{\"1822\":4,\"2043\":2,\"2061\":1}}],[\"callback不是函数\",{\"1\":{\"1777\":1}}],[\"callback是函数且返回值是thenable对象\",{\"1\":{\"1777\":1}}],[\"callback是函数且返回值不是thenable对象\",{\"1\":{\"1777\":1}}],[\"callbackname\",{\"1\":{\"474\":3}}],[\"callback\",{\"1\":{\"244\":2,\"245\":1,\"246\":1,\"250\":2,\"254\":2,\"255\":2,\"257\":2,\"258\":2,\"259\":2,\"260\":2,\"304\":1,\"408\":3,\"436\":4,\"438\":4,\"441\":4,\"443\":4,\"943\":2,\"993\":6,\"995\":2,\"1358\":10,\"1397\":1,\"1498\":2,\"1777\":6,\"1926\":6,\"1930\":12,\"2043\":1,\"2060\":1,\"2061\":8,\"2069\":3,\"2075\":1}}],[\"call\",{\"0\":{\"426\":1,\"446\":1},\"1\":{\"37\":1,\"436\":1,\"438\":1,\"443\":1,\"446\":1,\"466\":1,\"467\":1,\"474\":1,\"967\":1,\"990\":1,\"995\":36,\"996\":1,\"1013\":1,\"1070\":1,\"1071\":1,\"1072\":1,\"1785\":1,\"1803\":2,\"1804\":2,\"1805\":1,\"1807\":1,\"1810\":1,\"1822\":1,\"1855\":2,\"1906\":1,\"1907\":1,\"1909\":1,\"1910\":1,\"1914\":2,\"1917\":1,\"1918\":1,\"1930\":3,\"1932\":1,\"1954\":7,\"1956\":1,\"1990\":2,\"1993\":1,\"2002\":2,\"2021\":1,\"2058\":1,\"2075\":1}}],[\"cachedctors\",{\"1\":{\"1825\":4}}],[\"cached\",{\"1\":{\"1803\":1}}],[\"cache实现同样的含义\",{\"1\":{\"1542\":1}}],[\"caches\",{\"1\":{\"239\":3}}],[\"cache\",{\"0\":{\"1539\":1},\"1\":{\"15\":2,\"37\":3,\"269\":1,\"271\":1,\"1534\":2,\"1539\":4,\"1541\":2,\"1542\":2,\"1613\":1,\"1804\":1}}],[\"cmd\",{\"1\":{\"25\":1,\"37\":1}}],[\"ch\",{\"1\":{\"1789\":8}}],[\"ch6\",{\"1\":{\"1680\":1}}],[\"chen\",{\"1\":{\"2019\":1}}],[\"chengyu\",{\"1\":{\"665\":1}}],[\"checkcancelednavigationandreject\",{\"1\":{\"2041\":1,\"2046\":1,\"2072\":1}}],[\"checkcancelednavigation\",{\"1\":{\"2041\":1,\"2046\":1}}],[\"checkkeycodes\",{\"1\":{\"1797\":1}}],[\"checkduplicatekeys\",{\"1\":{\"1789\":3}}],[\"checkpoint\",{\"1\":{\"1560\":1}}],[\"checkinfor\",{\"1\":{\"1428\":1}}],[\"check\",{\"1\":{\"772\":1}}],[\"checkbox\",{\"1\":{\"670\":1,\"756\":1,\"1203\":1,\"1205\":2,\"1357\":4,\"1358\":1}}],[\"checked\",{\"1\":{\"670\":2,\"756\":2,\"1205\":3,\"1358\":1}}],[\"checkout\",{\"1\":{\"17\":3}}],[\"childindex\",{\"1\":{\"1977\":7}}],[\"child对象上并没有bar这个属性\",{\"1\":{\"1910\":1}}],[\"child指向\",{\"1\":{\"1866\":1}}],[\"childob\",{\"1\":{\"1785\":2}}],[\"childnodes\",{\"1\":{\"1112\":2}}],[\"children中\",{\"1\":{\"1795\":1}}],[\"children后还不算把所有子节点都遍历完\",{\"1\":{\"1795\":1}}],[\"children为一个数组\",{\"1\":{\"1789\":1}}],[\"children表示该节点包含的子节点等\",{\"1\":{\"1788\":1}}],[\"children之间的patch时\",{\"1\":{\"1394\":1}}],[\"children\",{\"1\":{\"483\":3,\"1112\":2,\"1204\":1,\"1232\":1,\"1358\":2,\"1458\":1,\"1460\":2,\"1461\":2,\"1788\":4,\"1789\":12,\"1791\":1,\"1795\":9,\"1796\":6,\"1797\":2,\"1802\":4,\"1834\":1,\"1835\":2,\"1862\":2,\"1864\":1,\"1866\":1,\"1873\":2,\"1878\":6,\"1879\":2,\"1948\":6,\"1951\":18,\"1953\":3,\"1954\":10,\"1961\":2,\"1962\":8,\"1965\":2,\"1966\":2,\"1968\":2,\"1969\":4,\"1974\":10,\"1976\":5,\"1977\":19,\"1978\":4,\"1997\":1,\"2001\":4,\"2028\":2,\"2031\":1,\"2066\":3}}],[\"child\",{\"1\":{\"287\":4,\"466\":9,\"467\":4,\"483\":2,\"520\":4,\"1069\":6,\"1070\":3,\"1071\":7,\"1072\":9,\"1352\":1,\"1423\":2,\"1499\":5,\"1516\":2,\"1788\":1,\"1795\":3,\"1878\":2,\"1910\":7,\"1948\":2}}],[\"chromium\",{\"1\":{\"222\":1}}],[\"chrome\",{\"1\":{\"24\":1,\"215\":1,\"216\":1,\"956\":1,\"1023\":1,\"1029\":1,\"1091\":1,\"1098\":11,\"1139\":1,\"1140\":1,\"1161\":2,\"1181\":2,\"1560\":2,\"1779\":1}}],[\"channels\",{\"1\":{\"1667\":4}}],[\"channels=64\",{\"1\":{\"1661\":1,\"1662\":1,\"1667\":1}}],[\"channels=32\",{\"1\":{\"1661\":2,\"1667\":1}}],[\"channels=3\",{\"1\":{\"1661\":1,\"1662\":1}}],[\"channel\",{\"1\":{\"1663\":1}}],[\"changelocation\",{\"1\":{\"2035\":1,\"2057\":1,\"2058\":25}}],[\"changecounter\",{\"1\":{\"2012\":1,\"2013\":1,\"2019\":2}}],[\"changes\",{\"1\":{\"1803\":1}}],[\"changestate\",{\"1\":{\"1777\":3}}],[\"change属性更大程度的影响分层结果\",{\"1\":{\"1526\":1}}],[\"changeinfo\",{\"1\":{\"1488\":2}}],[\"changemood\",{\"1\":{\"1385\":1}}],[\"change\",{\"1\":{\"772\":1,\"773\":1,\"1214\":1,\"1357\":3,\"1358\":2,\"1953\":2,\"1954\":1}}],[\"changeorigin默认值为true\",{\"1\":{\"1445\":1}}],[\"changeorigin设置为false时\",{\"1\":{\"1445\":1}}],[\"changeorigin设置为true时\",{\"1\":{\"1445\":1}}],[\"changeorigin\",{\"1\":{\"134\":1,\"1445\":2}}],[\"chapter4\",{\"1\":{\"1632\":1}}],[\"char\",{\"1\":{\"1794\":1,\"1974\":23}}],[\"chars数组\",{\"1\":{\"1974\":1}}],[\"chars\",{\"1\":{\"1791\":3,\"1792\":7,\"1974\":24}}],[\"charset\",{\"1\":{\"659\":1}}],[\"charset=\",{\"1\":{\"287\":2,\"329\":1,\"580\":1,\"657\":1,\"659\":1,\"693\":1,\"764\":1,\"765\":1,\"770\":2,\"773\":1,\"1078\":1,\"1087\":4,\"1139\":1,\"1140\":1,\"1148\":1,\"1153\":1,\"1155\":2}}],[\"charset=utf\",{\"1\":{\"271\":1,\"275\":1,\"285\":1,\"286\":1,\"287\":2,\"476\":1,\"693\":1}}],[\"characterdata\",{\"1\":{\"1777\":1,\"1822\":1}}],[\"character\",{\"1\":{\"903\":1}}],[\"charat\",{\"1\":{\"888\":3,\"1794\":1,\"1805\":1}}],[\"charcodeat\",{\"1\":{\"888\":3,\"1794\":3}}],[\"charge\",{\"1\":{\"156\":1}}],[\"chunkhash\",{\"1\":{\"159\":2}}],[\"chunk\",{\"1\":{\"154\":2,\"158\":3,\"159\":1,\"252\":4,\"263\":2,\"282\":1,\"283\":2}}],[\"chocolatey\",{\"1\":{\"94\":2}}],[\"choose\",{\"1\":{\"64\":1}}],[\"cvs\",{\"1\":{\"15\":1}}],[\"c\",{\"0\":{\"162\":1},\"1\":{\"10\":1,\"14\":1,\"17\":1,\"24\":1,\"156\":1,\"173\":1,\"238\":1,\"275\":1,\"286\":1,\"331\":1,\"372\":1,\"382\":3,\"390\":1,\"395\":6,\"398\":1,\"401\":1,\"402\":5,\"403\":1,\"404\":4,\"405\":18,\"408\":4,\"482\":2,\"494\":1,\"496\":5,\"777\":1,\"789\":9,\"792\":2,\"806\":4,\"808\":3,\"809\":3,\"812\":2,\"847\":3,\"848\":6,\"849\":2,\"918\":2,\"923\":1,\"951\":4,\"980\":1,\"981\":1,\"983\":7,\"1012\":7,\"1015\":5,\"1023\":1,\"1030\":1,\"1149\":1,\"1154\":2,\"1201\":2,\"1309\":2,\"1310\":3,\"1313\":7,\"1340\":3,\"1379\":1,\"1388\":2,\"1392\":1,\"1488\":2,\"1587\":1,\"1661\":2,\"1723\":1,\"1728\":3,\"1740\":2,\"1743\":1,\"1745\":2,\"1746\":1,\"1769\":3,\"1794\":10,\"1796\":3,\"1797\":5,\"1802\":1,\"1854\":1,\"1865\":2,\"1951\":8,\"1978\":2}}],[\"coords\",{\"1\":{\"1102\":3}}],[\"cookie属性\",{\"1\":{\"2088\":1}}],[\"cookieenabled\",{\"1\":{\"1091\":1}}],[\"cookie是自动携带的\",{\"1\":{\"360\":1}}],[\"cookie是保存在客户端的\",{\"1\":{\"352\":1}}],[\"cookie为\",{\"1\":{\"350\":1}}],[\"cookie中对option对象的signed属性设置设置成true即可\",{\"1\":{\"350\":1}}],[\"cookie加密\",{\"0\":{\"350\":1}}],[\"cookie的读取\",{\"1\":{\"349\":1}}],[\"cookie的设置\",{\"1\":{\"349\":1}}],[\"cookies\",{\"1\":{\"349\":1}}],[\"cookieparser\",{\"1\":{\"349\":4,\"350\":2}}],[\"cookie存储量很小\",{\"1\":{\"346\":1}}],[\"cookie可用于攻击\",{\"1\":{\"346\":1}}],[\"cookie可以被篡改\",{\"1\":{\"346\":1}}],[\"cookie保存在浏览器本地\",{\"1\":{\"346\":1}}],[\"cookie\",{\"0\":{\"344\":1,\"345\":1,\"346\":1,\"347\":1,\"348\":1,\"349\":1,\"356\":1,\"767\":1,\"1612\":1},\"1\":{\"269\":1,\"343\":1,\"345\":23,\"346\":3,\"347\":3,\"348\":4,\"349\":14,\"350\":9,\"354\":1,\"355\":1,\"356\":7,\"358\":1,\"360\":1,\"766\":1,\"767\":17,\"768\":2,\"1091\":1,\"1530\":3,\"1572\":1,\"1612\":3,\"2088\":15,\"2095\":4}}],[\"coding\",{\"1\":{\"943\":2}}],[\"codegenstate\",{\"1\":{\"1796\":2}}],[\"codegen\",{\"1\":{\"1790\":1}}],[\"coder\",{\"1\":{\"1768\":2}}],[\"code都会帮我们提示\",{\"1\":{\"1519\":1}}],[\"code已经不需要纠结这个问题\",{\"1\":{\"1519\":1}}],[\"codecs\",{\"1\":{\"747\":1}}],[\"code\",{\"0\":{\"2115\":1},\"1\":{\"155\":15,\"222\":1,\"223\":1,\"239\":1,\"262\":1,\"264\":7,\"328\":3,\"957\":1,\"1260\":2,\"1307\":1,\"1354\":1,\"1357\":1,\"1370\":2,\"1790\":3,\"1796\":8,\"1835\":1,\"1875\":1,\"1972\":1,\"1979\":6}}],[\"cos\",{\"1\":{\"884\":1}}],[\"cost\",{\"1\":{\"790\":2}}],[\"cover\",{\"1\":{\"633\":1}}],[\"could\",{\"1\":{\"2031\":1}}],[\"countabout\",{\"1\":{\"1454\":6}}],[\"counterpar\",{\"1\":{\"2012\":1,\"2013\":1}}],[\"counter\",{\"1\":{\"504\":1,\"995\":17,\"1822\":5,\"2012\":3}}],[\"count++\",{\"1\":{\"499\":1,\"995\":3,\"1486\":1,\"1518\":1,\"1778\":1,\"1827\":1,\"2044\":2}}],[\"count\",{\"1\":{\"499\":2,\"644\":1,\"790\":3,\"995\":7,\"1038\":2,\"1486\":2,\"1490\":1,\"1493\":3,\"1518\":2,\"1778\":3,\"1827\":2,\"1938\":2,\"1943\":4,\"1953\":4,\"1969\":4,\"2044\":3,\"2058\":1}}],[\"countofrender\",{\"1\":{\"480\":3}}],[\"countsort\",{\"1\":{\"417\":1}}],[\"course\",{\"1\":{\"12\":1,\"292\":3}}],[\"correctly\",{\"1\":{\"1804\":1}}],[\"cors\",{\"0\":{\"1605\":1},\"1\":{\"1442\":1,\"1605\":4,\"1606\":2,\"1607\":2,\"1614\":1,\"1615\":1}}],[\"corner\",{\"1\":{\"636\":3,\"1262\":2,\"1302\":1}}],[\"coroutine\",{\"1\":{\"408\":3}}],[\"core\",{\"1\":{\"147\":2,\"149\":5,\"150\":1,\"155\":1}}],[\"co\",{\"1\":{\"324\":1,\"1974\":1}}],[\"coffeescript\",{\"1\":{\"223\":1}}],[\"col1\",{\"1\":{\"1270\":4}}],[\"colou\",{\"1\":{\"906\":1}}],[\"colour\",{\"1\":{\"906\":1}}],[\"color传的参数可以省略\",{\"1\":{\"1336\":1}}],[\"colordepth\",{\"1\":{\"1098\":2}}],[\"colorlist\",{\"1\":{\"993\":2,\"1152\":2,\"1158\":4}}],[\"colors\",{\"1\":{\"401\":1,\"1273\":2}}],[\"color\",{\"1\":{\"45\":1,\"200\":3,\"287\":4,\"520\":2,\"533\":2,\"544\":1,\"546\":2,\"582\":6,\"621\":1,\"623\":1,\"627\":1,\"643\":2,\"651\":1,\"725\":2,\"733\":1,\"740\":13,\"757\":1,\"764\":1,\"906\":1,\"993\":2,\"1087\":5,\"1127\":2,\"1139\":1,\"1140\":1,\"1152\":2,\"1155\":4,\"1158\":5,\"1194\":2,\"1201\":4,\"1206\":3,\"1224\":1,\"1232\":1,\"1237\":1,\"1248\":3,\"1249\":4,\"1250\":3,\"1259\":7,\"1261\":2,\"1265\":1,\"1273\":4,\"1278\":4,\"1282\":3,\"1284\":7,\"1290\":4,\"1297\":4,\"1301\":2,\"1306\":2,\"1309\":5,\"1310\":2,\"1312\":6,\"1313\":4,\"1314\":2,\"1315\":2,\"1318\":9,\"1319\":5,\"1320\":4,\"1325\":1,\"1328\":2,\"1330\":4,\"1331\":2,\"1332\":4,\"1334\":2,\"1335\":6,\"1336\":3,\"1337\":8,\"1338\":2,\"1339\":2,\"1340\":4}}],[\"colspan=\",{\"1\":{\"669\":1}}],[\"collate\",{\"1\":{\"1655\":2}}],[\"collapse\",{\"1\":{\"287\":4,\"548\":2,\"669\":2}}],[\"collecation\",{\"1\":{\"1028\":1}}],[\"collect\",{\"1\":{\"390\":1}}],[\"collections\",{\"1\":{\"180\":1}}],[\"collection\",{\"1\":{\"176\":2}}],[\"columns\",{\"1\":{\"580\":1,\"1267\":1}}],[\"column\",{\"1\":{\"176\":1,\"586\":2}}],[\"copies\",{\"1\":{\"156\":2,\"1822\":3}}],[\"copyaugment\",{\"1\":{\"1785\":1}}],[\"copyobj\",{\"1\":{\"472\":8}}],[\"copy\",{\"1\":{\"156\":2,\"658\":1,\"772\":1,\"1160\":3}}],[\"copyright\",{\"1\":{\"156\":3}}],[\"conv1\",{\"1\":{\"1669\":2}}],[\"convtranspose2d\",{\"1\":{\"1667\":5}}],[\"conv\",{\"1\":{\"1662\":2,\"1667\":3}}],[\"conv2d是\",{\"1\":{\"1662\":1}}],[\"conv2d\",{\"1\":{\"1661\":2,\"1662\":2,\"1667\":1,\"1669\":1,\"1680\":1}}],[\"conversion\",{\"1\":{\"1338\":4}}],[\"converted\",{\"1\":{\"1804\":1}}],[\"convert\",{\"1\":{\"830\":1,\"1805\":1}}],[\"conjugate\",{\"1\":{\"395\":3}}],[\"conditionalend\",{\"1\":{\"1792\":3}}],[\"conditionalcomment\",{\"1\":{\"1792\":3}}],[\"condition\",{\"1\":{\"408\":1}}],[\"conditions\",{\"1\":{\"156\":1,\"1388\":1}}],[\"conda等包管理工具下载的包\",{\"1\":{\"377\":1}}],[\"connect\",{\"1\":{\"191\":1,\"200\":1,\"212\":1,\"355\":3,\"1468\":1}}],[\"connections\",{\"1\":{\"177\":1}}],[\"connection\",{\"1\":{\"156\":1,\"191\":3,\"200\":2,\"201\":2,\"202\":2,\"203\":4,\"209\":1,\"210\":1,\"211\":1,\"212\":3,\"269\":1,\"271\":1,\"1530\":1,\"1648\":2,\"1649\":2}}],[\"contact\",{\"1\":{\"2062\":1}}],[\"contains\",{\"1\":{\"1125\":1,\"1203\":1}}],[\"contain\",{\"1\":{\"633\":2,\"635\":1,\"2065\":1}}],[\"containing\",{\"1\":{\"570\":1}}],[\"container\",{\"1\":{\"483\":2,\"520\":3,\"533\":2,\"580\":8,\"1259\":1,\"1878\":2,\"1879\":5,\"1944\":13,\"1948\":4,\"1951\":11,\"1954\":3,\"1956\":1,\"1961\":2,\"1962\":4,\"1965\":7,\"1966\":5,\"1968\":4,\"1969\":7,\"1997\":5,\"2000\":3,\"2002\":2}}],[\"context指的是上下文对象\",{\"1\":{\"1977\":1}}],[\"contextmenu\",{\"1\":{\"1163\":2}}],[\"context\",{\"0\":{\"564\":1,\"576\":1},\"1\":{\"576\":1,\"707\":2,\"958\":1,\"1358\":2,\"1407\":3,\"1423\":1,\"1428\":1,\"1451\":2,\"1493\":1,\"1508\":1,\"1788\":3,\"1802\":2,\"1834\":1,\"1835\":3,\"1977\":46,\"1979\":35}}],[\"contentwindow等等\",{\"1\":{\"1601\":1}}],[\"contents\",{\"1\":{\"1204\":1}}],[\"contenteditable=\",{\"1\":{\"685\":1}}],[\"content为\",{\"1\":{\"589\":1}}],[\"content<\",{\"1\":{\"580\":3}}],[\"content=\",{\"1\":{\"287\":4,\"329\":2,\"580\":1,\"649\":1,\"659\":3,\"693\":1,\"764\":2,\"773\":2}}],[\"contenthash\",{\"1\":{\"159\":2}}],[\"content\",{\"0\":{\"543\":1},\"1\":{\"155\":2,\"271\":2,\"275\":1,\"285\":1,\"286\":1,\"287\":2,\"294\":1,\"476\":1,\"521\":1,\"542\":1,\"547\":1,\"566\":2,\"580\":2,\"582\":1,\"588\":1,\"590\":2,\"599\":1,\"623\":2,\"631\":1,\"632\":2,\"635\":1,\"659\":1,\"693\":3,\"1232\":2,\"1237\":1,\"1261\":2,\"1298\":3,\"1530\":1,\"1577\":1,\"1609\":1,\"1613\":2,\"1630\":1,\"1634\":6,\"1636\":1,\"1974\":7,\"1978\":2,\"2050\":6,\"2095\":1}}],[\"continue跳过进入下一次循环\",{\"1\":{\"401\":1}}],[\"continue\",{\"0\":{\"823\":1,\"825\":1},\"1\":{\"401\":1,\"773\":1,\"824\":1,\"825\":2,\"1792\":5,\"1803\":1,\"2074\":1}}],[\"control可以出现在请求头中\",{\"1\":{\"1542\":1}}],[\"control的max\",{\"1\":{\"1540\":1}}],[\"control还可以设置下面一个或多个值\",{\"1\":{\"1539\":1}}],[\"control是服务器向客户端响应的一个消息头\",{\"1\":{\"1539\":1}}],[\"controls>\",{\"1\":{\"668\":1,\"747\":2}}],[\"controls\",{\"1\":{\"668\":1,\"747\":2,\"748\":1,\"749\":1}}],[\"control\",{\"0\":{\"1539\":1},\"1\":{\"269\":1,\"271\":1,\"1534\":2,\"1539\":1,\"1541\":2,\"1542\":1,\"1576\":1,\"1577\":2,\"1578\":2,\"1612\":2,\"1613\":3}}],[\"contract\",{\"1\":{\"156\":1}}],[\"concurrequest\",{\"1\":{\"499\":1}}],[\"concurrent\",{\"1\":{\"408\":1}}],[\"concat\",{\"1\":{\"155\":1,\"418\":2,\"453\":1,\"469\":1,\"493\":1,\"854\":2,\"889\":2,\"1039\":1,\"1358\":1,\"2029\":2}}],[\"concepts\",{\"1\":{\"122\":1}}],[\"consectetur\",{\"1\":{\"2101\":1}}],[\"consolas\",{\"1\":{\"1275\":2}}],[\"console\",{\"1\":{\"27\":3,\"28\":4,\"29\":4,\"30\":3,\"35\":5,\"71\":2,\"124\":3,\"134\":1,\"148\":2,\"149\":2,\"156\":2,\"191\":4,\"200\":3,\"201\":2,\"203\":4,\"205\":2,\"206\":4,\"207\":4,\"209\":1,\"210\":1,\"211\":1,\"212\":5,\"236\":1,\"239\":1,\"244\":1,\"245\":2,\"246\":1,\"250\":2,\"252\":3,\"254\":1,\"255\":3,\"257\":2,\"258\":2,\"259\":5,\"260\":1,\"262\":1,\"264\":11,\"273\":1,\"282\":5,\"283\":2,\"284\":8,\"285\":1,\"287\":2,\"294\":2,\"301\":1,\"304\":1,\"305\":8,\"313\":1,\"314\":2,\"316\":1,\"317\":3,\"321\":1,\"327\":1,\"329\":1,\"349\":2,\"350\":2,\"355\":2,\"368\":2,\"422\":4,\"429\":1,\"433\":2,\"439\":2,\"449\":3,\"471\":1,\"476\":2,\"482\":1,\"486\":6,\"487\":5,\"488\":4,\"498\":1,\"501\":1,\"504\":1,\"685\":2,\"769\":6,\"770\":5,\"772\":1,\"777\":1,\"779\":1,\"780\":1,\"782\":2,\"783\":3,\"786\":7,\"789\":18,\"790\":8,\"792\":2,\"793\":1,\"794\":6,\"795\":8,\"796\":5,\"797\":2,\"798\":4,\"803\":6,\"805\":5,\"806\":7,\"808\":9,\"809\":11,\"810\":10,\"812\":8,\"814\":2,\"822\":2,\"828\":24,\"829\":3,\"830\":22,\"831\":2,\"832\":16,\"833\":3,\"834\":2,\"835\":2,\"836\":4,\"842\":2,\"843\":1,\"844\":2,\"845\":1,\"846\":7,\"847\":7,\"848\":4,\"849\":3,\"851\":3,\"853\":6,\"854\":19,\"855\":6,\"856\":7,\"857\":2,\"860\":2,\"861\":8,\"862\":6,\"863\":5,\"864\":5,\"865\":4,\"868\":4,\"869\":6,\"870\":4,\"871\":5,\"874\":2,\"875\":9,\"876\":8,\"877\":13,\"879\":1,\"881\":2,\"882\":3,\"883\":5,\"888\":5,\"889\":10,\"890\":2,\"891\":13,\"892\":2,\"896\":3,\"897\":2,\"901\":2,\"903\":6,\"905\":3,\"907\":1,\"908\":1,\"910\":2,\"911\":15,\"912\":7,\"913\":10,\"914\":4,\"916\":2,\"917\":3,\"918\":19,\"919\":6,\"920\":6,\"923\":17,\"924\":14,\"925\":23,\"928\":1,\"931\":1,\"932\":1,\"933\":7,\"934\":3,\"935\":2,\"939\":5,\"940\":6,\"941\":2,\"943\":3,\"944\":2,\"945\":6,\"946\":5,\"947\":1,\"948\":8,\"950\":4,\"951\":5,\"952\":3,\"953\":6,\"957\":3,\"958\":11,\"967\":7,\"978\":1,\"980\":5,\"982\":3,\"983\":10,\"984\":3,\"985\":2,\"991\":6,\"992\":5,\"993\":7,\"995\":9,\"996\":6,\"1012\":2,\"1015\":6,\"1021\":4,\"1023\":1,\"1025\":1,\"1039\":4,\"1040\":2,\"1053\":1,\"1054\":1,\"1055\":1,\"1056\":1,\"1057\":2,\"1058\":2,\"1059\":3,\"1060\":2,\"1063\":8,\"1064\":4,\"1065\":4,\"1066\":3,\"1067\":4,\"1086\":4,\"1087\":22,\"1088\":4,\"1091\":5,\"1092\":1,\"1093\":1,\"1096\":1,\"1098\":3,\"1102\":2,\"1105\":1,\"1112\":7,\"1124\":2,\"1144\":3,\"1145\":2,\"1146\":3,\"1148\":1,\"1149\":1,\"1150\":6,\"1151\":2,\"1152\":5,\"1153\":5,\"1154\":8,\"1155\":4,\"1181\":11,\"1182\":3,\"1186\":5,\"1188\":8,\"1199\":2,\"1201\":12,\"1204\":3,\"1207\":2,\"1214\":4,\"1216\":1,\"1219\":1,\"1224\":1,\"1225\":2,\"1231\":2,\"1361\":1,\"1364\":2,\"1376\":1,\"1378\":1,\"1379\":2,\"1380\":4,\"1396\":1,\"1407\":1,\"1445\":2,\"1451\":2,\"1467\":3,\"1486\":3,\"1497\":6,\"1498\":1,\"1573\":1,\"1584\":1,\"1586\":4,\"1587\":1,\"1778\":2,\"1779\":8,\"1893\":1,\"1894\":1,\"1896\":1,\"1897\":1,\"1902\":1,\"1910\":1,\"1911\":1,\"1914\":2,\"1917\":1,\"1918\":1,\"1923\":2,\"1927\":1,\"1929\":1,\"1953\":2,\"1954\":3,\"1956\":3,\"1992\":2,\"1993\":1,\"2012\":2,\"2016\":1,\"2019\":2,\"2028\":1,\"2043\":1,\"2045\":1,\"2047\":1,\"2050\":1,\"2058\":5,\"2101\":1}}],[\"constant\",{\"1\":{\"779\":1}}],[\"const所声明的变量如果是简单数据类型\",{\"1\":{\"779\":1}}],[\"const和let的区别在于\",{\"1\":{\"779\":1}}],[\"constructor\",{\"0\":{\"1064\":1},\"1\":{\"155\":1,\"156\":1,\"424\":2,\"466\":1,\"467\":1,\"498\":1,\"996\":1,\"1007\":2,\"1063\":1,\"1064\":6,\"1069\":1,\"1071\":1,\"1072\":1,\"1424\":1,\"1777\":1,\"1785\":1,\"1788\":1,\"1799\":2,\"1825\":1,\"1864\":1}}],[\"const\",{\"0\":{\"986\":1,\"989\":1},\"1\":{\"124\":1,\"128\":1,\"129\":1,\"142\":1,\"155\":24,\"156\":1,\"191\":1,\"200\":3,\"212\":6,\"236\":1,\"238\":1,\"239\":1,\"244\":1,\"255\":1,\"263\":5,\"264\":2,\"273\":2,\"282\":2,\"283\":2,\"284\":5,\"285\":2,\"287\":8,\"301\":2,\"304\":2,\"305\":2,\"316\":2,\"317\":2,\"321\":5,\"327\":1,\"329\":3,\"349\":3,\"350\":2,\"355\":4,\"368\":1,\"414\":2,\"416\":1,\"417\":1,\"418\":5,\"419\":2,\"421\":4,\"422\":1,\"424\":1,\"425\":1,\"428\":4,\"429\":1,\"430\":2,\"432\":1,\"433\":4,\"436\":2,\"438\":2,\"441\":2,\"443\":5,\"452\":3,\"463\":1,\"464\":1,\"469\":1,\"471\":3,\"472\":3,\"474\":4,\"476\":1,\"478\":5,\"479\":3,\"480\":6,\"482\":4,\"483\":1,\"490\":2,\"493\":3,\"494\":2,\"498\":3,\"499\":4,\"501\":6,\"504\":2,\"681\":1,\"727\":2,\"740\":2,\"772\":2,\"773\":3,\"779\":3,\"781\":1,\"856\":1,\"857\":4,\"883\":1,\"951\":3,\"991\":2,\"992\":5,\"993\":3,\"996\":8,\"1015\":1,\"1035\":1,\"1036\":1,\"1038\":1,\"1039\":3,\"1040\":2,\"1054\":2,\"1065\":1,\"1066\":1,\"1086\":3,\"1181\":5,\"1187\":1,\"1188\":3,\"1189\":2,\"1357\":2,\"1358\":6,\"1368\":2,\"1370\":1,\"1376\":1,\"1395\":1,\"1396\":2,\"1407\":3,\"1415\":1,\"1421\":2,\"1422\":2,\"1423\":1,\"1424\":2,\"1428\":5,\"1431\":1,\"1446\":1,\"1450\":3,\"1451\":3,\"1452\":1,\"1454\":3,\"1456\":1,\"1484\":1,\"1486\":1,\"1487\":1,\"1488\":1,\"1493\":5,\"1496\":1,\"1498\":2,\"1499\":4,\"1502\":1,\"1508\":1,\"1516\":1,\"1573\":2,\"1576\":3,\"1577\":2,\"1578\":1,\"1581\":1,\"1582\":1,\"1768\":1,\"1769\":2,\"1772\":1,\"1777\":11,\"1778\":2,\"1785\":8,\"1786\":2,\"1789\":9,\"1790\":3,\"1792\":23,\"1793\":4,\"1795\":2,\"1796\":4,\"1799\":1,\"1800\":1,\"1802\":5,\"1803\":7,\"1804\":24,\"1805\":3,\"1807\":2,\"1810\":2,\"1814\":1,\"1815\":2,\"1816\":2,\"1817\":1,\"1821\":1,\"1822\":5,\"1824\":2,\"1825\":6,\"1827\":2,\"1828\":1,\"1836\":1,\"1838\":2,\"1849\":1,\"1854\":1,\"1855\":2,\"1864\":3,\"1872\":1,\"1873\":1,\"1878\":2,\"1879\":4,\"1886\":3,\"1888\":1,\"1889\":7,\"1890\":6,\"1891\":2,\"1892\":3,\"1893\":4,\"1894\":1,\"1895\":2,\"1896\":11,\"1897\":11,\"1902\":3,\"1904\":1,\"1905\":2,\"1906\":14,\"1907\":3,\"1909\":4,\"1910\":7,\"1911\":1,\"1912\":1,\"1913\":1,\"1914\":7,\"1917\":4,\"1918\":3,\"1921\":1,\"1923\":9,\"1924\":2,\"1925\":3,\"1927\":4,\"1928\":11,\"1929\":15,\"1930\":9,\"1931\":14,\"1932\":12,\"1936\":3,\"1937\":6,\"1938\":6,\"1943\":1,\"1944\":7,\"1946\":2,\"1948\":3,\"1949\":4,\"1950\":1,\"1951\":8,\"1953\":4,\"1954\":16,\"1955\":7,\"1956\":3,\"1961\":5,\"1962\":9,\"1965\":2,\"1966\":4,\"1968\":4,\"1969\":19,\"1972\":3,\"1974\":13,\"1975\":1,\"1976\":2,\"1977\":11,\"1978\":2,\"1979\":9,\"1984\":5,\"1985\":5,\"1986\":2,\"1987\":4,\"1990\":6,\"1991\":1,\"1993\":8,\"1998\":5,\"2000\":1,\"2001\":5,\"2002\":6,\"2010\":1,\"2012\":1,\"2013\":3,\"2015\":2,\"2016\":3,\"2019\":7,\"2020\":3,\"2021\":2,\"2025\":2,\"2028\":5,\"2029\":9,\"2031\":5,\"2034\":7,\"2041\":14,\"2042\":2,\"2043\":7,\"2044\":4,\"2045\":8,\"2047\":19,\"2049\":1,\"2050\":2,\"2052\":1,\"2053\":3,\"2054\":3,\"2055\":5,\"2057\":3,\"2058\":20,\"2059\":1,\"2060\":1,\"2061\":12,\"2062\":3,\"2065\":23,\"2066\":5,\"2067\":1,\"2068\":7,\"2069\":2,\"2070\":8,\"2072\":3,\"2073\":7,\"2074\":4,\"2075\":4,\"2078\":1,\"2079\":1,\"2080\":1,\"2081\":2,\"2083\":1,\"2101\":3}}],[\"confim\",{\"1\":{\"1150\":1}}],[\"confirmtransition\",{\"1\":{\"2029\":2}}],[\"confirm\",{\"1\":{\"1088\":2}}],[\"configure\",{\"1\":{\"1307\":2}}],[\"configurable\",{\"1\":{\"1059\":2,\"1364\":1,\"1804\":1}}],[\"configuration\",{\"1\":{\"133\":1}}],[\"config\",{\"1\":{\"3\":3,\"42\":1,\"45\":1,\"68\":1,\"69\":1,\"88\":2,\"124\":1,\"128\":1,\"129\":1,\"133\":1,\"138\":1,\"142\":2,\"143\":1,\"149\":1,\"150\":1,\"157\":1,\"212\":4,\"1370\":1,\"1426\":1,\"1427\":3,\"1444\":1,\"1445\":1,\"1518\":4,\"1584\":1,\"1585\":1,\"1591\":1,\"1799\":2,\"1804\":1,\"1805\":2,\"2016\":3,\"2040\":1,\"2047\":5,\"2053\":2}}],[\"conflicts\",{\"1\":{\"1804\":1}}],[\"conflict\",{\"1\":{\"15\":1}}],[\"comp\",{\"1\":{\"1953\":2}}],[\"computescrollposition\",{\"1\":{\"2058\":2,\"2061\":1}}],[\"computescroll\",{\"1\":{\"2058\":2}}],[\"compute\",{\"1\":{\"1896\":1}}],[\"computed<routelocationmatched\",{\"1\":{\"2068\":1}}],[\"computed<routelocationnormalizedloaded>\",{\"1\":{\"2068\":1}}],[\"computed<boolean>\",{\"1\":{\"2065\":6}}],[\"computed<number>\",{\"1\":{\"2065\":3,\"2068\":1}}],[\"computedname\",{\"1\":{\"1825\":1}}],[\"computedgetters\",{\"1\":{\"2021\":3}}],[\"computedgetter\",{\"1\":{\"1804\":2,\"1849\":1}}],[\"computedwatcheroptions\",{\"1\":{\"1804\":1}}],[\"computedwatchers\",{\"1\":{\"1804\":3,\"1836\":1,\"1845\":1,\"1849\":2}}],[\"computed里修改\",{\"1\":{\"1511\":1}}],[\"computed中的函数\",{\"1\":{\"1423\":2}}],[\"computed不一定能完成\",{\"1\":{\"1382\":1}}],[\"computed能完成的功能\",{\"1\":{\"1382\":1}}],[\"computed\",{\"0\":{\"1381\":1,\"1496\":1,\"1843\":1,\"1856\":1,\"1857\":1,\"1859\":1,\"1896\":1},\"1\":{\"1376\":2,\"1393\":1,\"1395\":1,\"1453\":5,\"1485\":1,\"1486\":2,\"1496\":4,\"1498\":2,\"1526\":1,\"1799\":2,\"1803\":1,\"1804\":10,\"1825\":1,\"1836\":1,\"1847\":1,\"1896\":7,\"1986\":1,\"2019\":2,\"2021\":1,\"2065\":3,\"2066\":1,\"2068\":1}}],[\"compile`\",{\"1\":{\"1805\":1}}],[\"compiletofunctions\",{\"1\":{\"1805\":1}}],[\"compile\",{\"1\":{\"1805\":4,\"1972\":1}}],[\"compiledresult\",{\"1\":{\"1790\":1}}],[\"compileroptions\",{\"1\":{\"1790\":1}}],[\"compiler\",{\"1\":{\"154\":1,\"155\":3}}],[\"compat\",{\"1\":{\"2063\":1}}],[\"compatconfig\",{\"0\":{\"2063\":1},\"1\":{\"2062\":1,\"2063\":2,\"2067\":1}}],[\"compatible\",{\"1\":{\"287\":2,\"329\":1,\"764\":1,\"773\":1}}],[\"comparefunction\",{\"1\":{\"1395\":1}}],[\"comparable\",{\"1\":{\"1274\":2}}],[\"complete\",{\"1\":{\"408\":1}}],[\"complex\",{\"1\":{\"382\":2,\"395\":2,\"980\":1}}],[\"compliation\",{\"1\":{\"156\":3}}],[\"complier\",{\"1\":{\"156\":3,\"1790\":1}}],[\"compomnentinstance和componentoptions是组件占位符特有的属性\",{\"1\":{\"1866\":1}}],[\"compose\",{\"1\":{\"1656\":1}}],[\"composer\",{\"1\":{\"94\":1}}],[\"composing\",{\"1\":{\"1357\":3}}],[\"composition\",{\"0\":{\"1485\":1,\"1503\":1,\"1510\":1,\"1512\":1},\"1\":{\"1480\":1,\"1485\":2,\"1500\":1,\"1501\":1}}],[\"compositionend\",{\"1\":{\"1357\":1}}],[\"compositionstart\",{\"1\":{\"1357\":1}}],[\"componentpromise\",{\"1\":{\"2074\":1}}],[\"componentupdatefn\",{\"1\":{\"1997\":1,\"2002\":2}}],[\"component也指向组件实例\",{\"1\":{\"1955\":1}}],[\"componenttag\",{\"1\":{\"1802\":1,\"1864\":2}}],[\"componentoptions\",{\"1\":{\"1423\":1,\"1788\":3,\"1802\":2,\"1834\":1,\"1862\":1,\"1864\":1,\"1954\":2}}],[\"componentinstance\",{\"1\":{\"1423\":1,\"1428\":1,\"1788\":2,\"1789\":2,\"1834\":1,\"1862\":2}}],[\"component\",{\"0\":{\"1828\":1},\"1\":{\"1353\":1,\"1358\":2,\"1416\":2,\"1423\":1,\"1427\":1,\"1456\":2,\"1458\":4,\"1460\":3,\"1461\":4,\"1462\":1,\"1518\":3,\"1519\":1,\"1788\":2,\"1796\":3,\"1799\":3,\"1800\":3,\"1802\":5,\"1803\":4,\"1804\":13,\"1805\":1,\"1807\":1,\"1810\":1,\"1814\":1,\"1815\":2,\"1816\":1,\"1817\":1,\"1821\":1,\"1825\":1,\"1828\":3,\"1834\":1,\"1954\":2,\"1955\":3,\"1997\":1,\"1998\":1,\"2000\":1,\"2001\":2,\"2025\":2,\"2026\":1,\"2028\":11,\"2031\":3,\"2041\":2,\"2042\":1,\"2047\":5,\"2070\":9}}],[\"components属性\",{\"1\":{\"1828\":1}}],[\"components\",{\"1\":{\"15\":1,\"1416\":1,\"1422\":1,\"1423\":1,\"1456\":2,\"1516\":1,\"1804\":1,\"1825\":1,\"2028\":1,\"2031\":1,\"2068\":2,\"2070\":2,\"2074\":2}}],[\"com的完整镜像\",{\"1\":{\"80\":1}}],[\"com2222\",{\"1\":{\"28\":1}}],[\"commonlength\",{\"1\":{\"1961\":5}}],[\"common\",{\"1\":{\"1334\":3}}],[\"commonjs\",{\"0\":{\"32\":1,\"37\":1,\"240\":1},\"1\":{\"24\":2,\"25\":5,\"34\":1,\"37\":2,\"51\":1,\"52\":1,\"122\":1,\"240\":2,\"241\":1}}],[\"commentend\",{\"1\":{\"1792\":5}}],[\"comments\",{\"1\":{\"1791\":1,\"1805\":2}}],[\"comment\",{\"1\":{\"1273\":2,\"1325\":1,\"1791\":3,\"1792\":5,\"1796\":1}}],[\"commments\",{\"1\":{\"1255\":1}}],[\"communicator\",{\"1\":{\"1140\":1}}],[\"community\",{\"1\":{\"177\":1}}],[\"commit\",{\"1\":{\"7\":2,\"17\":1,\"1451\":2,\"1453\":1,\"1454\":1}}],[\"com\",{\"1\":{\"12\":2,\"17\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"39\":1,\"64\":1,\"65\":1,\"68\":2,\"69\":1,\"80\":1,\"81\":1,\"84\":1,\"88\":1,\"91\":1,\"93\":1,\"94\":1,\"122\":1,\"133\":1,\"171\":1,\"177\":1,\"213\":2,\"228\":2,\"268\":2,\"291\":2,\"292\":5,\"298\":1,\"307\":1,\"324\":1,\"338\":2,\"339\":1,\"340\":1,\"341\":1,\"345\":3,\"349\":1,\"355\":1,\"368\":1,\"372\":1,\"389\":2,\"476\":1,\"493\":1,\"494\":1,\"624\":1,\"659\":1,\"666\":1,\"667\":1,\"773\":1,\"918\":1,\"958\":1,\"1093\":8,\"1094\":2,\"1156\":6,\"1181\":1,\"1205\":1,\"1207\":2,\"1219\":1,\"1317\":2,\"1369\":2,\"1475\":1,\"1571\":1,\"1583\":1,\"1589\":1,\"1594\":4,\"1600\":2,\"1609\":4,\"1630\":1,\"1633\":1,\"1635\":1,\"1648\":2,\"2040\":1,\"2049\":2,\"2050\":4,\"2051\":7,\"2058\":3,\"2065\":1}}],[\"smart\",{\"1\":{\"1803\":1}}],[\"small\",{\"1\":{\"666\":1,\"1275\":1,\"1289\":2,\"1290\":6}}],[\"smi命令来查看显卡信息\",{\"1\":{\"1675\":1}}],[\"smi\",{\"1\":{\"1675\":1}}],[\"sgd\",{\"1\":{\"1659\":7,\"1680\":1}}],[\"sfc\",{\"1\":{\"1486\":1}}],[\"s指的是tostring函数\",{\"1\":{\"1352\":1}}],[\"svg\",{\"1\":{\"1259\":1,\"1262\":2,\"1658\":3,\"1678\":1}}],[\"svn\",{\"1\":{\"15\":1,\"1182\":2}}],[\"sdk\",{\"1\":{\"995\":1}}],[\"s+\",{\"1\":{\"967\":1}}],[\"s+$\",{\"1\":{\"917\":1}}],[\"s+|\",{\"1\":{\"917\":1}}],[\"s5\",{\"1\":{\"806\":2}}],[\"s4\",{\"1\":{\"806\":2}}],[\"s3\",{\"1\":{\"806\":2}}],[\"s2\",{\"1\":{\"806\":2,\"860\":2}}],[\"s1\",{\"1\":{\"806\":2,\"860\":2,\"861\":18,\"862\":13,\"864\":8}}],[\"sx\",{\"1\":{\"736\":2}}],[\"syncgen\",{\"1\":{\"1358\":1}}],[\"sync修饰符时\",{\"1\":{\"1358\":1}}],[\"sync=\",{\"1\":{\"1358\":3}}],[\"sync\",{\"1\":{\"1358\":1,\"1407\":1,\"1784\":1}}],[\"syntax\",{\"1\":{\"1273\":2}}],[\"syntaxerror\",{\"1\":{\"897\":1,\"931\":1,\"933\":1,\"958\":4}}],[\"sym\",{\"1\":{\"828\":1}}],[\"symbol和函数\",{\"1\":{\"471\":1}}],[\"symbol\",{\"1\":{\"428\":1,\"430\":1,\"471\":1,\"787\":1,\"828\":33,\"830\":24,\"1778\":1,\"1906\":1,\"1921\":5,\"1923\":1,\"1929\":1,\"1931\":10,\"1932\":4,\"1935\":1,\"1993\":1,\"2016\":1}}],[\"sy\",{\"1\":{\"736\":2}}],[\"sys\",{\"1\":{\"379\":12,\"403\":2}}],[\"systemlanguage\",{\"1\":{\"1091\":1}}],[\"system32\",{\"1\":{\"372\":1}}],[\"system\",{\"1\":{\"242\":1,\"373\":1}}],[\"slotname\",{\"1\":{\"1796\":1}}],[\"slottarget\",{\"1\":{\"1796\":1}}],[\"slot=\",{\"1\":{\"1446\":1}}],[\"slot>\",{\"1\":{\"1446\":4}}],[\"slot\",{\"0\":{\"1446\":1,\"1494\":1},\"1\":{\"1446\":2,\"1516\":2,\"1795\":1,\"1796\":2,\"1954\":1}}],[\"slots是将父组件编译生成的插槽\",{\"1\":{\"1446\":1,\"1494\":1}}],[\"slots\",{\"1\":{\"405\":1,\"1493\":3,\"1953\":2,\"1954\":5,\"1956\":3,\"2001\":3,\"2002\":1,\"2062\":1,\"2066\":3,\"2067\":1,\"2068\":1,\"2070\":2}}],[\"slow\",{\"1\":{\"1221\":1,\"1799\":1}}],[\"sloppy\",{\"1\":{\"956\":1}}],[\"slash属于图标字体名\",{\"1\":{\"623\":1}}],[\"slash\",{\"1\":{\"623\":1,\"2054\":2,\"2058\":1}}],[\"slack\",{\"1\":{\"222\":1}}],[\"slidetoggle\",{\"0\":{\"1222\":1},\"1\":{\"1220\":1,\"1222\":1}}],[\"slideup\",{\"0\":{\"1222\":1},\"1\":{\"1220\":1,\"1222\":1}}],[\"slidedown\",{\"0\":{\"1222\":1},\"1\":{\"1220\":1,\"1222\":1}}],[\"slider\",{\"1\":{\"580\":5}}],[\"slicepos\",{\"1\":{\"2058\":2}}],[\"slice\",{\"0\":{\"446\":1},\"1\":{\"414\":2,\"446\":1,\"469\":1,\"482\":2,\"486\":1,\"487\":1,\"488\":1,\"501\":2,\"771\":1,\"854\":8,\"891\":7,\"995\":15,\"1204\":1,\"1232\":1,\"1265\":1,\"1368\":1,\"1397\":1,\"1785\":1,\"1792\":3,\"1793\":2,\"1794\":3,\"1822\":1,\"1949\":2,\"1954\":1,\"1974\":11,\"2043\":1,\"2058\":5}}],[\"sleep\",{\"1\":{\"491\":2}}],[\"s为字符串变量\",{\"1\":{\"402\":1}}],[\"sso\",{\"1\":{\"2088\":1}}],[\"ssl\",{\"1\":{\"1530\":2,\"2091\":11}}],[\"ssl等\",{\"1\":{\"345\":1}}],[\"ss\",{\"1\":{\"1397\":1}}],[\"ssh等\",{\"1\":{\"268\":1}}],[\"ssr\",{\"0\":{\"1640\":1},\"1\":{\"219\":1,\"1640\":2}}],[\"spray\",{\"1\":{\"857\":1}}],[\"splice已经被重写\",{\"1\":{\"1786\":1}}],[\"splice\",{\"1\":{\"854\":4,\"1396\":1,\"1490\":1,\"1785\":3,\"1786\":2,\"1816\":1,\"1915\":1,\"1925\":4,\"1977\":2,\"1993\":3,\"2043\":1,\"2061\":1}}],[\"split\",{\"1\":{\"263\":1,\"482\":1,\"493\":4,\"494\":4,\"501\":2,\"854\":4,\"894\":1,\"1376\":1,\"1496\":1,\"1769\":1}}],[\"speed\",{\"1\":{\"1102\":1,\"1125\":1}}],[\"speech\",{\"1\":{\"651\":1}}],[\"specific\",{\"1\":{\"1816\":2}}],[\"specified\",{\"1\":{\"64\":2}}],[\"special\",{\"1\":{\"1799\":1}}],[\"spec\",{\"1\":{\"377\":1,\"1560\":1}}],[\"spawn为自动执行器\",{\"1\":{\"1187\":1}}],[\"spawn\",{\"1\":{\"1187\":2,\"1772\":2}}],[\"spacing\",{\"1\":{\"669\":1,\"1259\":4}}],[\"space\",{\"1\":{\"588\":3,\"590\":1,\"625\":1,\"1370\":1}}],[\"spans\",{\"1\":{\"841\":2}}],[\"span><\",{\"1\":{\"1877\":1}}],[\"span>\",{\"1\":{\"623\":1,\"662\":1,\"1088\":1}}],[\"span\",{\"1\":{\"517\":1,\"518\":4,\"841\":1,\"1273\":4,\"1298\":2,\"1873\":1}}],[\"spa\",{\"1\":{\"219\":1}}],[\"simple\",{\"1\":{\"1607\":1}}],[\"siblings\",{\"1\":{\"1204\":1,\"1232\":1}}],[\"six\",{\"1\":{\"1148\":2}}],[\"sit\",{\"1\":{\"1112\":9,\"1120\":2,\"1123\":4,\"1150\":4,\"1153\":1,\"2101\":1}}],[\"site\",{\"1\":{\"379\":1,\"2087\":1,\"2094\":1}}],[\"sir\",{\"1\":{\"1105\":4}}],[\"since是http1\",{\"1\":{\"1537\":1}}],[\"since`\",{\"1\":{\"1537\":1}}],[\"since\",{\"1\":{\"1537\":3,\"1799\":1,\"1803\":1,\"1804\":1,\"2075\":1}}],[\"single\",{\"1\":{\"1255\":1,\"1446\":1,\"1592\":1,\"2050\":1}}],[\"singer\",{\"1\":{\"340\":3}}],[\"sin\",{\"1\":{\"884\":1}}],[\"sizing\",{\"1\":{\"547\":1,\"582\":1}}],[\"size其实是一个访问器属性\",{\"1\":{\"1927\":1}}],[\"size=3\",{\"1\":{\"1661\":2,\"1662\":1,\"1667\":1}}],[\"size=2\",{\"1\":{\"1655\":1,\"1661\":2,\"1663\":2}}],[\"size=10\",{\"1\":{\"1655\":1}}],[\"size=1\",{\"1\":{\"1655\":1}}],[\"size必须写在background\",{\"1\":{\"635\":1}}],[\"size实际上就是在设置字体框的高度\",{\"1\":{\"621\":1}}],[\"size\",{\"1\":{\"260\":1,\"534\":1,\"621\":3,\"633\":1,\"650\":1,\"740\":11,\"772\":6,\"861\":2,\"862\":1,\"869\":1,\"1202\":1,\"1259\":3,\"1260\":1,\"1269\":4,\"1275\":2,\"1288\":4,\"1289\":7,\"1290\":4,\"1297\":2,\"1306\":2,\"1309\":2,\"1313\":3,\"1315\":3,\"1319\":2,\"1331\":2,\"1655\":2,\"1662\":4,\"1663\":5,\"1665\":1,\"1667\":4,\"1926\":2,\"1927\":9,\"1928\":2,\"1929\":1,\"2047\":2,\"2069\":2}}],[\"sid\",{\"1\":{\"355\":2}}],[\"sidebar\",{\"1\":{\"1261\":2}}],[\"sidebar<\",{\"1\":{\"580\":6}}],[\"side\",{\"1\":{\"219\":2,\"636\":2}}],[\"sign\",{\"1\":{\"368\":2}}],[\"signature\",{\"0\":{\"367\":1},\"1\":{\"364\":1}}],[\"signed\",{\"1\":{\"350\":1}}],[\"signedcookies\",{\"1\":{\"350\":3}}],[\"signup\",{\"1\":{\"91\":1}}],[\"suspense>\",{\"1\":{\"1516\":1}}],[\"suspense\",{\"0\":{\"1516\":1},\"1\":{\"1480\":1,\"1486\":1}}],[\"suspend\",{\"1\":{\"752\":1}}],[\"sunchis\",{\"1\":{\"1093\":7}}],[\"sure\",{\"1\":{\"1088\":1}}],[\"sumres\",{\"1\":{\"1896\":3}}],[\"sum或msg变化了\",{\"1\":{\"1497\":1}}],[\"sum变化了\",{\"1\":{\"1497\":1}}],[\"sum\",{\"1\":{\"947\":2,\"958\":2,\"1451\":3,\"1452\":1,\"1453\":7,\"1454\":2,\"1497\":2,\"1498\":1,\"1505\":2,\"1680\":1}}],[\"summer\",{\"1\":{\"924\":6}}],[\"summary>\",{\"1\":{\"697\":1}}],[\"summary\",{\"1\":{\"697\":1}}],[\"supportsscroll\",{\"1\":{\"2034\":1}}],[\"supported\",{\"1\":{\"772\":2}}],[\"support\",{\"1\":{\"772\":1}}],[\"superoptions\",{\"1\":{\"1825\":1}}],[\"superid\",{\"1\":{\"1825\":4}}],[\"superman\",{\"1\":{\"895\":1}}],[\"super\",{\"1\":{\"405\":2,\"1424\":2,\"1431\":3,\"1669\":1,\"1670\":1,\"1671\":1,\"1673\":1,\"1825\":12}}],[\"super函数\",{\"1\":{\"405\":1}}],[\"success\",{\"1\":{\"212\":3,\"476\":1,\"772\":1,\"1227\":1}}],[\"subtree\",{\"1\":{\"1879\":3,\"1954\":8,\"2002\":8}}],[\"subtype\",{\"1\":{\"294\":1}}],[\"submit\",{\"1\":{\"670\":3,\"756\":2,\"758\":1,\"1203\":1,\"1214\":1,\"1231\":2,\"1569\":1}}],[\"submit方法\",{\"1\":{\"408\":1}}],[\"subs里面了\",{\"1\":{\"1842\":1}}],[\"subs中所有\",{\"1\":{\"1855\":1}}],[\"subs中\",{\"1\":{\"1841\":2,\"1842\":3,\"1849\":2,\"1854\":1}}],[\"subs\",{\"1\":{\"1784\":1,\"1842\":1,\"1890\":1}}],[\"subscribe\",{\"1\":{\"1439\":1}}],[\"substr\",{\"1\":{\"891\":5,\"1878\":1}}],[\"substring\",{\"1\":{\"891\":3,\"1792\":3}}],[\"substantial\",{\"1\":{\"156\":1}}],[\"subsize\",{\"1\":{\"418\":3}}],[\"sub\",{\"1\":{\"366\":2,\"1207\":4,\"1424\":4,\"1431\":2,\"1825\":23}}],[\"subject\",{\"1\":{\"156\":1,\"1453\":5,\"1454\":1}}],[\"sublicense\",{\"1\":{\"156\":1}}],[\"sublime\",{\"1\":{\"15\":2}}],[\"skype\",{\"1\":{\"222\":1}}],[\"skyblue\",{\"1\":{\"138\":1,\"1087\":2,\"1155\":2,\"1280\":2}}],[\"skip\",{\"1\":{\"211\":2}}],[\"sqrt\",{\"1\":{\"884\":1}}],[\"sqrt2\",{\"1\":{\"879\":1}}],[\"sqrt1\",{\"1\":{\"879\":1}}],[\"square++\",{\"1\":{\"1794\":1}}],[\"square\",{\"1\":{\"708\":1,\"835\":2,\"1274\":1,\"1794\":3}}],[\"squash\",{\"1\":{\"17\":1}}],[\"sql术语\",{\"1\":{\"176\":1}}],[\"sb1\",{\"1\":{\"165\":1}}],[\"sbyte\",{\"1\":{\"165\":1}}],[\"solution\",{\"0\":{\"2108\":1}}],[\"solid\",{\"1\":{\"544\":1,\"580\":10,\"582\":2,\"765\":1,\"773\":1,\"1087\":1,\"1148\":2,\"1153\":1,\"1206\":1,\"1257\":4,\"1267\":8,\"1271\":4,\"1284\":2,\"1297\":2,\"1310\":1,\"1335\":4,\"1336\":1}}],[\"softmax\",{\"1\":{\"1678\":1}}],[\"software\",{\"1\":{\"64\":1,\"156\":9}}],[\"son\",{\"1\":{\"992\":2,\"1148\":5,\"1155\":4}}],[\"song\",{\"1\":{\"339\":6,\"340\":1,\"831\":3,\"832\":7,\"934\":2,\"948\":2,\"1201\":3}}],[\"songmodel\",{\"1\":{\"200\":1,\"201\":2,\"202\":2,\"203\":4,\"209\":2,\"210\":1,\"211\":1}}],[\"something\",{\"1\":{\"1088\":1}}],[\"some\",{\"1\":{\"408\":2,\"453\":1,\"857\":2,\"944\":1,\"945\":1,\"957\":1,\"1515\":2,\"1915\":1}}],[\"sockets\",{\"1\":{\"2091\":1}}],[\"socket\",{\"1\":{\"223\":1,\"1650\":1}}],[\"socket④\",{\"1\":{\"158\":1}}],[\"sorttype\",{\"1\":{\"1395\":2}}],[\"sorted\",{\"1\":{\"393\":2}}],[\"sort\",{\"1\":{\"210\":2,\"458\":1,\"855\":7,\"944\":2,\"1395\":2,\"1396\":1,\"1785\":1,\"1915\":1}}],[\"so\",{\"1\":{\"156\":1,\"1255\":1,\"2058\":1,\"2065\":2}}],[\"sources\",{\"1\":{\"1969\":1}}],[\"source数组\",{\"1\":{\"1969\":1}}],[\"sourcetype\",{\"1\":{\"155\":1}}],[\"source\",{\"1\":{\"124\":1,\"142\":1,\"155\":3,\"156\":3,\"668\":3,\"743\":5,\"751\":1,\"765\":3,\"923\":2,\"1498\":1,\"1803\":8,\"1897\":24,\"1969\":7,\"1987\":4,\"2069\":1}}],[\"srcelement\",{\"1\":{\"993\":2,\"1152\":2}}],[\"srcelememnt\",{\"1\":{\"993\":1,\"1152\":1}}],[\"src目录下的原文件发生了更改\",{\"1\":{\"129\":1}}],[\"src\",{\"1\":{\"124\":3,\"128\":1,\"138\":1,\"142\":1,\"143\":2,\"148\":3,\"155\":3,\"156\":1,\"293\":3,\"474\":1,\"478\":2,\"496\":3,\"621\":1,\"666\":1,\"667\":1,\"703\":1,\"727\":1,\"740\":1,\"747\":2,\"748\":1,\"749\":1,\"765\":1,\"773\":1,\"1328\":1,\"1427\":1,\"1450\":1,\"1790\":1,\"2011\":1,\"2040\":1,\"2041\":1,\"2062\":1}}],[\"src=\",{\"1\":{\"27\":2,\"28\":2,\"29\":1,\"30\":2,\"31\":4,\"43\":1,\"47\":1,\"666\":2,\"667\":1,\"668\":3,\"673\":1,\"674\":1,\"675\":2,\"747\":4,\"765\":2,\"773\":1,\"1079\":1,\"1150\":1,\"1201\":2,\"1207\":2,\"1219\":1,\"1583\":1,\"2061\":1}}],[\"school>\",{\"1\":{\"1417\":1,\"1420\":1,\"1423\":1,\"1428\":1}}],[\"schoolname\",{\"1\":{\"1415\":3}}],[\"school\",{\"1\":{\"1415\":1,\"1416\":1,\"1419\":3,\"1421\":2,\"1423\":1,\"1453\":5,\"1454\":1,\"1467\":2}}],[\"scheduler\",{\"1\":{\"498\":5,\"1893\":4,\"1896\":2,\"1897\":9,\"1906\":4,\"1954\":1,\"1985\":2,\"1986\":1,\"1987\":1,\"1997\":1,\"2002\":1}}],[\"schema对象定义约束了数据库中的文档结构\",{\"1\":{\"189\":1}}],[\"schema\",{\"1\":{\"189\":1,\"191\":1,\"192\":3,\"200\":1,\"212\":1,\"1626\":2}}],[\"scope=\",{\"1\":{\"1446\":2}}],[\"scopedslots\",{\"1\":{\"1446\":1}}],[\"scopedslots是将父组件中插槽内容编译成一个\",{\"1\":{\"1446\":1,\"1494\":1}}],[\"scopedata\",{\"1\":{\"1446\":4}}],[\"scoped>\",{\"1\":{\"1433\":1}}],[\"scoped\",{\"0\":{\"1433\":1},\"1\":{\"1433\":1}}],[\"scopechain\",{\"1\":{\"1015\":4}}],[\"scope\",{\"1\":{\"958\":1,\"2002\":1}}],[\"score\",{\"1\":{\"827\":2,\"828\":5,\"830\":4,\"836\":2,\"1058\":1,\"1059\":1,\"1060\":1}}],[\"scolltop\",{\"1\":{\"478\":2}}],[\"scaley\",{\"1\":{\"618\":1}}],[\"scalex\",{\"1\":{\"618\":1}}],[\"scale\",{\"0\":{\"618\":1},\"1\":{\"618\":2,\"720\":3}}],[\"scale=1\",{\"1\":{\"287\":2,\"329\":1,\"580\":1,\"649\":1,\"764\":1,\"773\":1}}],[\"screeny\",{\"1\":{\"1087\":4,\"1153\":2}}],[\"screenx\",{\"1\":{\"1087\":4,\"1153\":2}}],[\"screentop\",{\"1\":{\"1087\":3}}],[\"screenleft\",{\"1\":{\"1087\":3}}],[\"screen\",{\"0\":{\"1098\":1},\"1\":{\"651\":2,\"1083\":1,\"1098\":6,\"1153\":2,\"1316\":1}}],[\"scrollpositionnormalized\",{\"1\":{\"2058\":1}}],[\"scrollrestoration\",{\"1\":{\"2048\":1}}],[\"scrollbehavior\",{\"1\":{\"2040\":1,\"2058\":1}}],[\"scroll事件在元素内部内容区发生滚动时触发\",{\"1\":{\"1153\":1}}],[\"scrollleft\",{\"1\":{\"1150\":1,\"1206\":1}}],[\"scrollheight\",{\"1\":{\"479\":3}}],[\"scroll\",{\"1\":{\"478\":1,\"479\":1,\"557\":1,\"634\":1,\"1034\":1,\"1153\":3,\"1214\":1,\"2058\":6,\"2061\":1}}],[\"scrolltop\",{\"1\":{\"478\":1,\"479\":3,\"1150\":2,\"1206\":1}}],[\"scripting\",{\"1\":{\"2094\":1}}],[\"script\",{\"0\":{\"675\":1,\"2111\":1},\"1\":{\"293\":1,\"295\":1,\"474\":5,\"675\":2,\"937\":1,\"957\":1,\"1583\":1,\"1792\":2}}],[\"scripts\",{\"1\":{\"64\":2,\"71\":1,\"77\":3,\"124\":1,\"133\":1,\"148\":1,\"2040\":1}}],[\"script>延迟加载\",{\"1\":{\"675\":1}}],[\"script>来异步加载\",{\"1\":{\"675\":1}}],[\"script>\",{\"1\":{\"27\":3,\"28\":3,\"29\":2,\"30\":3,\"31\":4,\"43\":1,\"287\":2,\"764\":1,\"765\":1,\"769\":6,\"770\":2,\"772\":3,\"773\":1,\"952\":1,\"957\":2,\"1078\":2,\"1079\":1,\"1086\":3,\"1087\":7,\"1088\":13,\"1091\":2,\"1092\":1,\"1093\":2,\"1094\":3,\"1096\":1,\"1097\":1,\"1098\":1,\"1102\":1,\"1104\":1,\"1105\":4,\"1112\":4,\"1120\":1,\"1123\":2,\"1124\":1,\"1137\":1,\"1139\":1,\"1140\":1,\"1143\":1,\"1144\":2,\"1145\":1,\"1146\":2,\"1148\":1,\"1149\":1,\"1150\":5,\"1152\":3,\"1153\":2,\"1154\":6,\"1155\":2,\"1156\":5,\"1157\":3,\"1158\":2,\"1160\":2,\"1161\":3,\"1162\":2,\"1194\":2,\"1201\":4,\"1207\":4,\"1216\":1,\"1219\":2,\"1231\":1,\"1446\":1,\"1486\":1,\"1493\":4,\"1499\":3,\"1507\":1,\"1519\":1,\"1559\":1,\"1583\":1,\"1880\":1,\"2013\":1,\"2061\":1}}],[\"scientist\",{\"1\":{\"405\":1}}],[\"scss\",{\"0\":{\"1250\":1},\"1\":{\"122\":1,\"1247\":5,\"1248\":1,\"1250\":5,\"1260\":2,\"1298\":1,\"1301\":8,\"1302\":3,\"1303\":1,\"1304\":1,\"1305\":2,\"1306\":3,\"1307\":2,\"1308\":3,\"1309\":18,\"1310\":9,\"1312\":5,\"1313\":10,\"1314\":2,\"1315\":1,\"1318\":16,\"1319\":7,\"1320\":3,\"1341\":2}}],[\"saddle\",{\"1\":{\"1658\":1}}],[\"salary\",{\"1\":{\"1488\":2}}],[\"samesite=none\",{\"1\":{\"2088\":1}}],[\"samesite=lax\",{\"1\":{\"2088\":1}}],[\"samesite=strict\",{\"1\":{\"2088\":1}}],[\"samesite\",{\"1\":{\"2088\":4}}],[\"same\",{\"1\":{\"1789\":1}}],[\"sameinputtype\",{\"1\":{\"1394\":1}}],[\"samevnode\",{\"1\":{\"1394\":1,\"1789\":5}}],[\"sampler\",{\"1\":{\"1655\":1}}],[\"sampler=none\",{\"1\":{\"1655\":1}}],[\"sample\",{\"1\":{\"494\":1}}],[\"sand\",{\"1\":{\"1328\":1}}],[\"sans\",{\"1\":{\"138\":1,\"621\":1,\"730\":1,\"1249\":2,\"1250\":1,\"1255\":2,\"1267\":1,\"1275\":2}}],[\"safari\",{\"1\":{\"956\":1,\"1029\":1,\"1091\":1,\"1139\":1,\"1140\":1,\"1154\":1}}],[\"safe这个库自动生成id\",{\"1\":{\"355\":1}}],[\"sat\",{\"1\":{\"925\":8}}],[\"sayhello\",{\"1\":{\"1486\":3}}],[\"sayyourname\",{\"1\":{\"422\":2}}],[\"say\",{\"1\":{\"155\":4}}],[\"saved\",{\"1\":{\"2058\":1}}],[\"saveuninitialized\",{\"1\":{\"355\":1}}],[\"save\",{\"1\":{\"72\":4,\"148\":1,\"711\":2,\"712\":2,\"713\":3,\"1441\":1,\"1673\":4,\"1674\":1}}],[\"sassscript\",{\"1\":{\"1262\":1}}],[\"sass\",{\"0\":{\"1246\":1,\"1247\":1,\"1248\":1,\"1249\":1,\"1300\":1,\"1315\":1},\"1\":{\"15\":1,\"1247\":6,\"1248\":2,\"1249\":5,\"1250\":6,\"1251\":1,\"1252\":2,\"1253\":1,\"1255\":1,\"1257\":1,\"1259\":1,\"1260\":1,\"1262\":1,\"1263\":1,\"1264\":2,\"1265\":6,\"1266\":1,\"1267\":2,\"1268\":1,\"1270\":2,\"1271\":1,\"1272\":3,\"1273\":1,\"1274\":1,\"1275\":2,\"1277\":1,\"1279\":1,\"1280\":1,\"1281\":1,\"1282\":1,\"1283\":1,\"1284\":3,\"1297\":1,\"1299\":2,\"1300\":2,\"1301\":1,\"1308\":8,\"1309\":1,\"1313\":9,\"1315\":1,\"1317\":1,\"1319\":2}}],[\"seq\",{\"1\":{\"1969\":4}}],[\"seq为最长递增子序列的索引数组\",{\"1\":{\"1969\":1}}],[\"sequential\",{\"1\":{\"1661\":1}}],[\"sequencediagram\",{\"1\":{\"1645\":1,\"1646\":1}}],[\"sequence序列的当前元素\",{\"1\":{\"402\":1}}],[\"sequence\",{\"1\":{\"402\":4}}],[\"seen\",{\"1\":{\"1897\":5}}],[\"seeking\",{\"1\":{\"752\":1}}],[\"seeked\",{\"1\":{\"752\":1}}],[\"sealedoptions\",{\"1\":{\"1825\":1}}],[\"searchparams\",{\"1\":{\"284\":1}}],[\"search\",{\"1\":{\"65\":1,\"284\":3,\"304\":1,\"757\":1,\"758\":1,\"894\":1,\"1091\":5,\"1093\":4,\"2051\":3,\"2058\":9}}],[\"seven\",{\"1\":{\"1148\":2}}],[\"sex\",{\"1\":{\"836\":2,\"1055\":1,\"1056\":1,\"1059\":3,\"1060\":2,\"1067\":2,\"1357\":4,\"1364\":1,\"1393\":5}}],[\"semaphore\",{\"1\":{\"408\":5}}],[\"security\",{\"1\":{\"2091\":1,\"2095\":1}}],[\"secure\",{\"1\":{\"345\":2,\"2088\":1,\"2091\":2}}],[\"sec\",{\"1\":{\"1648\":3,\"1649\":3,\"1680\":1}}],[\"second\",{\"1\":{\"1120\":1,\"1261\":3}}],[\"seconds\",{\"1\":{\"875\":1,\"877\":2}}],[\"section1\",{\"1\":{\"2058\":14}}],[\"section元素代表文档中的节或段\",{\"1\":{\"694\":1}}],[\"section\",{\"1\":{\"694\":2,\"1954\":1}}],[\"section>\",{\"1\":{\"662\":1,\"694\":1,\"1954\":1}}],[\"secret就是用来进行jwt的签发和jwt的验证\",{\"1\":{\"367\":1}}],[\"secret是保存在服务器端的\",{\"1\":{\"367\":1}}],[\"secret\",{\"1\":{\"350\":1,\"355\":1,\"367\":1}}],[\"sessionstorage\",{\"1\":{\"768\":6,\"769\":1,\"1436\":2}}],[\"session存在服务端\",{\"1\":{\"361\":1}}],[\"session的设置\",{\"1\":{\"355\":1}}],[\"sessionid\",{\"1\":{\"355\":1,\"362\":2}}],[\"session包\",{\"1\":{\"355\":1}}],[\"session是一种特殊的cookie\",{\"1\":{\"352\":1}}],[\"session是另一种记录客户状态的机制\",{\"1\":{\"352\":1}}],[\"session\",{\"0\":{\"351\":1,\"352\":1,\"354\":1,\"355\":1,\"356\":1,\"362\":1},\"1\":{\"343\":1,\"350\":1,\"353\":1,\"354\":3,\"355\":21,\"356\":7,\"360\":1,\"362\":8,\"768\":6,\"2087\":1}}],[\"sendstatus\",{\"1\":{\"307\":1}}],[\"sendfile\",{\"1\":{\"307\":2,\"2050\":1}}],[\"send\",{\"1\":{\"304\":5,\"305\":1,\"306\":1,\"307\":3,\"316\":1,\"317\":1,\"321\":2,\"349\":3,\"350\":1,\"355\":5,\"476\":2,\"1573\":1,\"1575\":1,\"1576\":2,\"1577\":2,\"1578\":1,\"1581\":1,\"1582\":1}}],[\"sep\",{\"1\":{\"264\":3}}],[\"seo\",{\"1\":{\"219\":3,\"1572\":1}}],[\"self\",{\"1\":{\"405\":3,\"408\":3,\"1369\":1,\"1655\":12,\"1669\":9,\"1670\":5,\"1671\":5,\"1673\":5,\"1799\":2,\"1825\":1}}],[\"selecthandler\",{\"1\":{\"1802\":2}}],[\"select等\",{\"1\":{\"1356\":1}}],[\"selectors\",{\"1\":{\"1313\":1}}],[\"selector\",{\"1\":{\"1203\":1,\"1315\":1,\"1328\":2,\"1768\":2}}],[\"select>\",{\"1\":{\"670\":1}}],[\"selected\",{\"1\":{\"670\":1,\"756\":1,\"1203\":1,\"1205\":3}}],[\"selection\",{\"1\":{\"521\":1}}],[\"selectsort\",{\"1\":{\"411\":1}}],[\"select\",{\"1\":{\"209\":2,\"756\":1,\"1214\":1,\"1358\":1,\"1802\":2}}],[\"sell\",{\"1\":{\"156\":1}}],[\"service\",{\"1\":{\"1572\":1}}],[\"serve\",{\"1\":{\"1426\":1,\"1482\":1}}],[\"server目录\",{\"1\":{\"1591\":2}}],[\"server的配置\",{\"1\":{\"133\":1}}],[\"server\",{\"0\":{\"340\":1},\"1\":{\"77\":3,\"133\":7,\"134\":1,\"158\":2,\"219\":1,\"271\":1,\"273\":4,\"282\":2,\"283\":2,\"284\":4,\"285\":2,\"287\":4,\"289\":1,\"301\":1,\"340\":5,\"1182\":1,\"1576\":2,\"1577\":2,\"1578\":1,\"1584\":1,\"1585\":1,\"1586\":1,\"1587\":1,\"1635\":1}}],[\"serializearray\",{\"0\":{\"1231\":1},\"1\":{\"1226\":1,\"1231\":2}}],[\"serialize\",{\"0\":{\"1231\":1},\"1\":{\"1226\":1,\"1231\":2}}],[\"serif\",{\"1\":{\"138\":1,\"621\":3,\"730\":1,\"1249\":2,\"1250\":1,\"1255\":1,\"1267\":1,\"1275\":2}}],[\"serach\",{\"1\":{\"894\":1}}],[\"setcurrentinstance\",{\"1\":{\"1954\":3,\"2001\":2}}],[\"setcustomvalidity\",{\"1\":{\"760\":1}}],[\"setelementtext\",{\"1\":{\"1946\":2,\"1948\":2,\"1951\":3}}],[\"set和vue\",{\"1\":{\"1786\":1}}],[\"setuplisteners\",{\"1\":{\"2026\":2,\"2029\":1,\"2041\":1,\"2046\":1}}],[\"setupstore\",{\"1\":{\"2020\":5}}],[\"setupstatefulcomponent\",{\"1\":{\"1997\":1,\"2001\":2}}],[\"setupstate\",{\"1\":{\"1954\":4,\"1956\":6,\"1997\":1,\"2001\":2}}],[\"setuprendereffect类似于\",{\"1\":{\"2000\":1}}],[\"setuprendereffect\",{\"0\":{\"2002\":1},\"1\":{\"1997\":1,\"2000\":1,\"2002\":1}}],[\"setupresult\",{\"1\":{\"1954\":5,\"1997\":4,\"2001\":4}}],[\"setupcomponent类似于组件实例的初始化\",{\"1\":{\"2000\":1}}],[\"setupcomponent\",{\"0\":{\"2001\":1},\"1\":{\"1997\":2,\"2000\":1,\"2001\":1}}],[\"setupcontext中使用的\",{\"1\":{\"2001\":1}}],[\"setupcontext\",{\"1\":{\"1954\":4,\"1997\":2,\"2001\":2}}],[\"setup>中的顶层的导入和变量声明可在同一组件的模板中直接使用\",{\"1\":{\"1486\":1}}],[\"setup>\",{\"1\":{\"1486\":4,\"1493\":9,\"1499\":6,\"2013\":1}}],[\"setup\",{\"0\":{\"1486\":1,\"1493\":1,\"2066\":1},\"1\":{\"1480\":1,\"1486\":8,\"1488\":1,\"1493\":3,\"1496\":1,\"1501\":2,\"1507\":1,\"1508\":2,\"1937\":1,\"1938\":2,\"1953\":6,\"1954\":9,\"1956\":1,\"1997\":2,\"2001\":6,\"2020\":2,\"2021\":2,\"2047\":2,\"2062\":1,\"2066\":2,\"2067\":3,\"2068\":1,\"2070\":1,\"2071\":1}}],[\"settext\",{\"1\":{\"1951\":2}}],[\"settextcontent\",{\"1\":{\"1789\":3}}],[\"setter属性的依赖\",{\"1\":{\"1784\":1}}],[\"setter内部去操作\",{\"1\":{\"1366\":1}}],[\"setter\",{\"1\":{\"1364\":1,\"1366\":1,\"1784\":1,\"1804\":1,\"2031\":1,\"2034\":1}}],[\"settled\",{\"1\":{\"1777\":2}}],[\"settime\",{\"1\":{\"877\":1}}],[\"settimeout\",{\"1\":{\"460\":1,\"461\":1,\"480\":1,\"491\":1,\"498\":1,\"504\":1,\"1025\":1,\"1035\":1,\"1036\":1,\"1088\":3,\"1105\":1,\"1181\":1,\"1188\":2,\"1225\":1,\"1507\":1,\"1558\":1,\"1777\":1,\"1822\":2,\"1893\":1,\"1937\":1}}],[\"settings\",{\"1\":{\"15\":1}}],[\"set函数\",{\"1\":{\"1364\":1}}],[\"setprototypeof\",{\"0\":{\"1055\":1},\"1\":{\"1055\":2,\"1056\":1,\"1910\":1}}],[\"setpxinfo\",{\"1\":{\"740\":2}}],[\"setmonth\",{\"1\":{\"877\":1}}],[\"setfullyear\",{\"1\":{\"877\":1}}],[\"setyear\",{\"1\":{\"877\":1}}],[\"setimmediate\",{\"1\":{\"1822\":4}}],[\"setitem\",{\"1\":{\"769\":2,\"770\":1,\"1436\":1}}],[\"setinterval\",{\"1\":{\"505\":1,\"727\":1,\"1038\":1,\"1088\":5,\"1104\":1,\"1558\":1}}],[\"setdragimage\",{\"1\":{\"765\":2}}],[\"setdata\",{\"1\":{\"765\":5,\"1161\":4,\"1927\":3}}],[\"setrequestheader\",{\"1\":{\"476\":1,\"1577\":2}}],[\"setname\",{\"1\":{\"408\":1,\"466\":2,\"1045\":1,\"1046\":1,\"1047\":1,\"1048\":1,\"1049\":1,\"1071\":2,\"1072\":2}}],[\"setattribute\",{\"1\":{\"483\":1,\"496\":1,\"680\":3,\"1125\":3,\"1949\":3}}],[\"setattr\",{\"1\":{\"405\":1}}],[\"setheader\",{\"1\":{\"275\":1,\"285\":1,\"286\":4,\"287\":2,\"307\":1,\"1576\":1,\"1577\":2,\"1578\":2}}],[\"set\",{\"0\":{\"392\":1,\"1926\":1,\"1927\":1},\"1\":{\"68\":1,\"88\":1,\"212\":1,\"307\":2,\"329\":2,\"349\":1,\"381\":2,\"392\":2,\"408\":1,\"455\":2,\"472\":3,\"858\":1,\"859\":2,\"860\":5,\"861\":17,\"862\":8,\"863\":5,\"864\":6,\"865\":4,\"868\":6,\"869\":1,\"872\":1,\"877\":11,\"1057\":3,\"1059\":3,\"1279\":3,\"1364\":1,\"1365\":1,\"1376\":1,\"1396\":4,\"1426\":1,\"1490\":1,\"1491\":2,\"1496\":1,\"1507\":1,\"1591\":1,\"1786\":4,\"1804\":6,\"1886\":2,\"1888\":1,\"1889\":11,\"1890\":4,\"1892\":1,\"1893\":1,\"1897\":1,\"1902\":2,\"1906\":6,\"1909\":3,\"1910\":6,\"1914\":3,\"1917\":5,\"1918\":4,\"1923\":1,\"1926\":3,\"1927\":3,\"1928\":1,\"1929\":13,\"1930\":2,\"1932\":2,\"1937\":1,\"1938\":3,\"1954\":2,\"1956\":1,\"1985\":7,\"1990\":5,\"1992\":1,\"1993\":5,\"2020\":1,\"2061\":1}}],[\"s\",{\"1\":{\"65\":1,\"72\":3,\"82\":1,\"389\":1,\"402\":3,\"535\":1,\"641\":1,\"830\":12,\"841\":2,\"854\":1,\"863\":10,\"865\":2,\"889\":2,\"904\":3,\"905\":4,\"912\":8,\"924\":2,\"1047\":1,\"1352\":3,\"1392\":1,\"1792\":7,\"1793\":4,\"1797\":5,\"1804\":2,\"1828\":3,\"1927\":5,\"1931\":1,\"1969\":6,\"2053\":1}}],[\"shuffle=true\",{\"1\":{\"1655\":2}}],[\"shuffle=false\",{\"1\":{\"1655\":1}}],[\"shuffle\",{\"1\":{\"1655\":2}}],[\"sheets\",{\"1\":{\"1324\":1}}],[\"shellsort\",{\"1\":{\"413\":1}}],[\"shell\",{\"1\":{\"154\":1,\"222\":1}}],[\"shop\",{\"1\":{\"1792\":1}}],[\"shouldsetasprops\",{\"1\":{\"1948\":1,\"1949\":1}}],[\"shouldtrack\",{\"1\":{\"1925\":7,\"1993\":4}}],[\"shouldcache\",{\"1\":{\"1804\":3}}],[\"shouldobserve\",{\"1\":{\"1803\":1}}],[\"should\",{\"1\":{\"1799\":1,\"1804\":2}}],[\"shouldignorefirstnewline\",{\"1\":{\"1792\":2}}],[\"shouldkeepcomment\",{\"1\":{\"1791\":1,\"1792\":1}}],[\"shoulddecodenewlinesforhref为true\",{\"1\":{\"1792\":1}}],[\"shoulddecodenewlinesforhref\",{\"1\":{\"1791\":2,\"1792\":1,\"1805\":1}}],[\"shoulddecodenewlines\",{\"1\":{\"1791\":2,\"1792\":4,\"1805\":1}}],[\"short\",{\"0\":{\"1645\":1},\"1\":{\"924\":6}}],[\"shoot\",{\"1\":{\"912\":1}}],[\"shoe\",{\"1\":{\"808\":1}}],[\"shockwave\",{\"1\":{\"672\":1,\"673\":1,\"674\":2}}],[\"showname\",{\"1\":{\"1415\":2}}],[\"show一定可以获取到\",{\"1\":{\"1390\":1}}],[\"showinfo\",{\"1\":{\"1369\":5}}],[\"showinfo2\",{\"1\":{\"1368\":2}}],[\"showdelay\",{\"1\":{\"1025\":2}}],[\"show\",{\"0\":{\"1221\":1,\"1389\":1},\"1\":{\"179\":2,\"180\":1,\"292\":2,\"836\":4,\"948\":4,\"1021\":2,\"1105\":1,\"1220\":1,\"1221\":2,\"1311\":1,\"1388\":2,\"1404\":1}}],[\"show=\",{\"1\":{\"45\":1,\"1389\":1,\"1441\":3}}],[\"showmsg\",{\"1\":{\"41\":2,\"42\":1,\"44\":2,\"45\":1}}],[\"shrink\",{\"1\":{\"591\":1,\"592\":1}}],[\"shiftkey\",{\"1\":{\"1154\":2,\"2065\":1}}],[\"shift\",{\"1\":{\"498\":1,\"853\":2,\"1038\":1,\"1149\":2,\"1370\":1,\"1396\":1,\"1777\":1,\"1785\":1,\"1915\":1,\"1925\":4,\"1974\":1,\"1993\":3,\"2065\":1}}],[\"shim\",{\"1\":{\"45\":1}}],[\"sha\",{\"1\":{\"2101\":8}}],[\"shared\",{\"1\":{\"2053\":1}}],[\"sharedpropertydefinition\",{\"1\":{\"1804\":8}}],[\"sharing\",{\"1\":{\"1605\":1}}],[\"shape\",{\"1\":{\"1663\":8,\"1665\":2,\"1669\":1,\"1680\":2}}],[\"shaking机制\",{\"1\":{\"1875\":1}}],[\"shaking\",{\"1\":{\"1478\":1}}],[\"shadowcolor\",{\"1\":{\"733\":2}}],[\"shadowblur\",{\"1\":{\"733\":2}}],[\"shadowoffsety\",{\"1\":{\"733\":1}}],[\"shadowoffsetx\",{\"1\":{\"733\":2}}],[\"shadow可以设置文字阴影\",{\"1\":{\"614\":1}}],[\"shadow\",{\"1\":{\"613\":2,\"1260\":4,\"1307\":9}}],[\"sha256\",{\"1\":{\"365\":1}}],[\"shallowunwraphandlers\",{\"1\":{\"1997\":1}}],[\"shallow\",{\"1\":{\"1914\":1,\"1992\":1}}],[\"shallowreadonly\",{\"0\":{\"1505\":1},\"1\":{\"1505\":2,\"1914\":2,\"1954\":1,\"1992\":1,\"1997\":1,\"2001\":1}}],[\"shallowreactive\",{\"0\":{\"1504\":1},\"1\":{\"1504\":2,\"1912\":1,\"1913\":2,\"1954\":2,\"1991\":1,\"2047\":2}}],[\"shallowref<routelocationnormalizedloaded>\",{\"1\":{\"2044\":1}}],[\"shallowref\",{\"0\":{\"1504\":1},\"1\":{\"1504\":2,\"2044\":4}}],[\"shallowclone\",{\"1\":{\"469\":1}}],[\"shall\",{\"1\":{\"156\":2}}],[\"sh\",{\"1\":{\"94\":1,\"736\":2,\"924\":1}}],[\"sty3\",{\"1\":{\"1385\":1}}],[\"sty2\",{\"1\":{\"1385\":1}}],[\"sty1\",{\"1\":{\"1385\":1}}],[\"style等数据\",{\"1\":{\"1790\":1}}],[\"style2\",{\"1\":{\"1385\":1}}],[\"style1\",{\"1\":{\"1385\":1}}],[\"stylelint\",{\"1\":{\"1313\":1}}],[\"styles\",{\"1\":{\"1300\":1,\"1307\":2}}],[\"stylesheet\",{\"1\":{\"623\":1,\"659\":1}}],[\"stylesheets\",{\"0\":{\"1130\":1},\"1\":{\"332\":1}}],[\"style>\",{\"1\":{\"287\":2,\"513\":1,\"520\":2,\"580\":4,\"582\":2,\"764\":1,\"765\":1,\"773\":1,\"1087\":4,\"1124\":1,\"1148\":1,\"1153\":1,\"1155\":2,\"1433\":1}}],[\"style\",{\"0\":{\"1127\":1,\"1386\":1},\"1\":{\"138\":5,\"142\":1,\"287\":2,\"332\":1,\"544\":1,\"621\":1,\"764\":2,\"1124\":1,\"1127\":2,\"1194\":1,\"1206\":1,\"1224\":1,\"1260\":1,\"1284\":2,\"1324\":1,\"1325\":1,\"1335\":6,\"1336\":3,\"1526\":1,\"1792\":4,\"1949\":4,\"2010\":1}}],[\"style=\",{\"1\":{\"45\":1,\"580\":9,\"582\":6,\"1124\":2,\"1139\":1,\"1140\":1,\"1150\":1,\"1207\":4,\"1386\":2}}],[\"stx\",{\"1\":{\"1273\":4}}],[\"stop=\",{\"1\":{\"1369\":2}}],[\"stop\",{\"1\":{\"1220\":1,\"1225\":6,\"1369\":2,\"1370\":1,\"1680\":1}}],[\"stoppropagation\",{\"1\":{\"772\":2,\"1155\":1,\"1219\":1,\"1370\":1}}],[\"storagearea\",{\"1\":{\"770\":2}}],[\"storage\",{\"0\":{\"766\":1,\"768\":1,\"769\":1,\"770\":1},\"1\":{\"766\":1,\"768\":4,\"769\":2,\"770\":8}}],[\"storedid\",{\"1\":{\"2019\":1}}],[\"store实例对象\",{\"1\":{\"2018\":1}}],[\"stores还需要\",{\"1\":{\"2016\":1}}],[\"stores\",{\"1\":{\"2016\":5,\"2019\":2,\"2020\":1,\"2021\":1}}],[\"store对象\",{\"1\":{\"2015\":1}}],[\"storeid\",{\"1\":{\"2012\":1,\"2019\":1}}],[\"store\",{\"1\":{\"15\":1,\"355\":1,\"418\":4,\"419\":2,\"1450\":5,\"1451\":1,\"1452\":1,\"1454\":2,\"1539\":1,\"2011\":1,\"2013\":5,\"2015\":1,\"2016\":8,\"2018\":2,\"2020\":5,\"2021\":3}}],[\"stu\",{\"1\":{\"769\":5,\"836\":2}}],[\"study\",{\"1\":{\"1357\":1,\"1589\":1,\"1600\":2,\"1630\":1,\"1633\":1}}],[\"student\",{\"1\":{\"992\":6,\"1416\":1}}],[\"students1\",{\"1\":{\"1445\":1}}],[\"students\",{\"1\":{\"205\":1,\"206\":2,\"207\":1}}],[\"studio3t\",{\"1\":{\"213\":1}}],[\"stepmismatch\",{\"1\":{\"760\":1}}],[\"step\",{\"1\":{\"757\":1,\"760\":1,\"1187\":4,\"1659\":2,\"1680\":1,\"1772\":4,\"2029\":4}}],[\"steps\",{\"1\":{\"641\":2}}],[\"sticky这时的效果相当于\",{\"1\":{\"572\":1}}],[\"sticky\",{\"1\":{\"568\":1}}],[\"st\",{\"1\":{\"487\":2}}],[\"structure\",{\"0\":{\"2106\":1}}],[\"structuredclone\",{\"1\":{\"472\":1}}],[\"str5\",{\"1\":{\"918\":4}}],[\"str4\",{\"1\":{\"918\":4}}],[\"str1\",{\"1\":{\"891\":8,\"917\":2,\"918\":6}}],[\"str3\",{\"1\":{\"891\":6,\"918\":6}}],[\"str2\",{\"1\":{\"854\":2,\"891\":10,\"912\":2,\"917\":2,\"918\":6,\"982\":2}}],[\"stroeid\",{\"1\":{\"2019\":1}}],[\"stroketext\",{\"1\":{\"729\":1}}],[\"stroke\",{\"1\":{\"711\":2}}],[\"strokestyle\",{\"1\":{\"708\":1,\"711\":1}}],[\"strokerect\",{\"0\":{\"707\":1},\"1\":{\"706\":1,\"707\":2}}],[\"strong\",{\"1\":{\"662\":1}}],[\"stretch\",{\"1\":{\"589\":2}}],[\"strength\",{\"1\":{\"422\":2}}],[\"stream\",{\"1\":{\"294\":1,\"1570\":1}}],[\"str\",{\"0\":{\"388\":1},\"1\":{\"264\":6,\"384\":3,\"386\":7,\"402\":1,\"482\":11,\"790\":9,\"809\":3,\"828\":2,\"849\":2,\"854\":5,\"888\":7,\"889\":15,\"890\":4,\"891\":16,\"892\":4,\"894\":2,\"896\":4,\"907\":2,\"908\":2,\"911\":8,\"912\":4,\"916\":2,\"917\":2,\"918\":4,\"923\":7,\"925\":2,\"980\":2,\"981\":1,\"982\":4,\"984\":3,\"1091\":7,\"1239\":3,\"1397\":2,\"1578\":2,\"1680\":1,\"1974\":27}}],[\"stripbase\",{\"1\":{\"2058\":8}}],[\"strip\",{\"1\":{\"2054\":1}}],[\"stride=2\",{\"1\":{\"1663\":1,\"1667\":1}}],[\"stride=1\",{\"1\":{\"1662\":1,\"1667\":1}}],[\"stride\",{\"1\":{\"1663\":1,\"1667\":1}}],[\"stringliteral\",{\"1\":{\"1975\":5,\"1978\":3,\"1979\":1}}],[\"string\",{\"0\":{\"383\":1,\"389\":1,\"788\":1,\"885\":1},\"1\":{\"191\":2,\"192\":1,\"194\":1,\"195\":1,\"196\":1,\"197\":1,\"198\":1,\"200\":2,\"212\":2,\"251\":1,\"381\":2,\"384\":1,\"389\":2,\"443\":1,\"483\":2,\"488\":1,\"769\":1,\"787\":1,\"789\":19,\"790\":2,\"801\":4,\"830\":1,\"888\":2,\"925\":2,\"965\":1,\"970\":1,\"980\":1,\"1015\":1,\"1088\":1,\"1265\":9,\"1273\":2,\"1275\":2,\"1358\":3,\"1429\":2,\"1515\":1,\"1655\":2,\"1788\":2,\"1789\":1,\"1790\":1,\"1791\":1,\"1793\":3,\"1794\":2,\"1796\":1,\"1802\":2,\"1804\":3,\"1805\":2,\"1815\":1,\"1822\":2,\"1878\":1,\"1879\":1,\"1935\":1,\"1948\":1,\"1951\":3,\"1953\":2,\"2019\":2,\"2029\":3,\"2045\":2,\"2053\":1,\"2054\":3,\"2057\":1,\"2058\":9,\"2060\":1,\"2061\":1,\"2064\":4,\"2066\":4,\"2075\":2}}],[\"stringifyquery\",{\"1\":{\"2041\":1,\"2065\":1}}],[\"stringify\",{\"0\":{\"471\":1},\"1\":{\"155\":1,\"156\":1,\"471\":2,\"476\":1,\"770\":2,\"896\":4,\"1352\":1,\"1358\":1,\"1578\":1,\"1609\":2,\"1793\":2,\"2050\":1,\"2061\":1}}],[\"strictquery\",{\"1\":{\"212\":2}}],[\"strict\",{\"1\":{\"35\":1,\"155\":2,\"691\":1,\"955\":1,\"957\":9,\"958\":13,\"959\":2,\"991\":2,\"995\":1,\"2088\":3}}],[\"standard\",{\"1\":{\"2099\":1}}],[\"stalled\",{\"1\":{\"752\":1}}],[\"stackedtag\",{\"1\":{\"1792\":8}}],[\"stack\",{\"0\":{\"576\":1},\"1\":{\"452\":4,\"576\":1,\"578\":1,\"1013\":1,\"1249\":2,\"1250\":2,\"1792\":14}}],[\"stats\",{\"1\":{\"1665\":1}}],[\"statsync\",{\"1\":{\"260\":3}}],[\"stateentry\",{\"1\":{\"2058\":9,\"2060\":1,\"2061\":3}}],[\"state\",{\"0\":{\"1804\":1},\"1\":{\"644\":1,\"1388\":1,\"1392\":1,\"1407\":1,\"1450\":2,\"1451\":6,\"1452\":2,\"1453\":2,\"1454\":5,\"1486\":3,\"1671\":4,\"1673\":10,\"1777\":8,\"1796\":15,\"1797\":1,\"1799\":1,\"1803\":2,\"1804\":1,\"1827\":3,\"1954\":9,\"1956\":8,\"1974\":16,\"2012\":1,\"2016\":8,\"2019\":7,\"2020\":2,\"2021\":5,\"2034\":4,\"2048\":2,\"2050\":8,\"2053\":5,\"2055\":5,\"2057\":3,\"2058\":21,\"2059\":1,\"2060\":2,\"2061\":20}}],[\"staticprocessed\",{\"1\":{\"1796\":1}}],[\"staticroot\",{\"1\":{\"1795\":2,\"1796\":1}}],[\"staticrenderfns\",{\"1\":{\"1790\":2,\"1796\":2,\"1797\":2,\"1805\":3,\"1864\":2}}],[\"staticinfor\",{\"1\":{\"1795\":1}}],[\"staticclass\",{\"1\":{\"1388\":2,\"1835\":2}}],[\"static\",{\"1\":{\"316\":1,\"568\":1,\"958\":1,\"1777\":2,\"1795\":8,\"1797\":3,\"1804\":1}}],[\"stat\",{\"1\":{\"260\":4}}],[\"statustext\",{\"1\":{\"476\":2,\"1575\":1,\"1586\":1}}],[\"statusmessage\",{\"1\":{\"286\":2,\"307\":1}}],[\"statuscode\",{\"1\":{\"286\":2,\"294\":2,\"307\":1}}],[\"status来查看文件的状态\",{\"1\":{\"7\":1}}],[\"status\",{\"1\":{\"5\":1,\"260\":1,\"271\":1,\"307\":2,\"355\":1,\"476\":2,\"488\":5,\"1575\":3,\"1576\":2,\"1577\":2,\"1586\":1}}],[\"stable\",{\"1\":{\"94\":1}}],[\"starts\",{\"1\":{\"2058\":1}}],[\"startswith\",{\"1\":{\"889\":2,\"1954\":1,\"2058\":1}}],[\"starting\",{\"1\":{\"2047\":2,\"2058\":1}}],[\"started\",{\"1\":{\"2047\":7}}],[\"startlocation\",{\"1\":{\"2034\":1}}],[\"start钩子函数中遇到自闭和也会调用\",{\"1\":{\"1801\":1}}],[\"starttag\",{\"1\":{\"1799\":4}}],[\"starttagclose\",{\"1\":{\"1792\":4}}],[\"starttagopen\",{\"1\":{\"1792\":4}}],[\"starttagmatch\",{\"1\":{\"1792\":4}}],[\"starttagend\",{\"1\":{\"1353\":2}}],[\"startangle\",{\"1\":{\"716\":3}}],[\"start来启动\",{\"1\":{\"133\":1}}],[\"start\",{\"1\":{\"71\":1,\"77\":5,\"133\":1,\"138\":1,\"408\":1,\"415\":5,\"482\":3,\"588\":1,\"589\":2,\"641\":1,\"1038\":2,\"1181\":2,\"1188\":2,\"1285\":2,\"1353\":3,\"1368\":1,\"1559\":2,\"1591\":1,\"1680\":1,\"1791\":3,\"1792\":33,\"1799\":1,\"1804\":1,\"2034\":1,\"2044\":4,\"2047\":11}}],[\"staged\",{\"1\":{\"8\":1}}],[\"swing\",{\"1\":{\"1441\":1}}],[\"switching\",{\"1\":{\"1648\":1}}],[\"switch语句在执行时会依次将case后的表达式的值和switch后的条件表达式的值进行全等比较\",{\"1\":{\"819\":1}}],[\"switch\",{\"1\":{\"10\":2,\"14\":1,\"17\":3,\"819\":1,\"824\":1,\"1337\":2,\"1785\":1,\"1794\":1,\"1974\":3,\"1979\":1,\"2027\":1,\"2049\":1,\"2050\":1}}],[\"sw\",{\"1\":{\"736\":2}}],[\"swf\",{\"1\":{\"672\":1,\"674\":1}}],[\"swp\",{\"1\":{\"15\":1}}],[\"swo\",{\"1\":{\"15\":1}}],[\"<$\",{\"1\":{\"1792\":1}}],[\"<见具体演示>\",{\"1\":{\"1559\":1}}],[\"<keep\",{\"1\":{\"1465\":2}}],[\"<router\",{\"1\":{\"1456\":2,\"1458\":1,\"1459\":2,\"1460\":3,\"1461\":2,\"1463\":1,\"1465\":2,\"2026\":2,\"2031\":9,\"2032\":2,\"2034\":1,\"2062\":3,\"2068\":2}}],[\"<remote\",{\"1\":{\"12\":1}}],[\"<nav>\",{\"1\":{\"2068\":1}}],[\"<nav><\",{\"1\":{\"662\":1,\"694\":1}}],[\"<name>\",{\"1\":{\"1319\":1}}],[\"<namespace>\",{\"1\":{\"1302\":3}}],[\"<variable>\",{\"1\":{\"1285\":2,\"1302\":1}}],[\"<video\",{\"1\":{\"747\":1}}],[\"<video>\",{\"1\":{\"747\":1,\"749\":2,\"1569\":1}}],[\"<label>邮箱\",{\"1\":{\"1231\":1}}],[\"<label>密码\",{\"1\":{\"1231\":1}}],[\"<label>手机号\",{\"1\":{\"1231\":1}}],[\"<li\",{\"1\":{\"1120\":1,\"1392\":1,\"1393\":1,\"1446\":1}}],[\"<li>css<\",{\"1\":{\"1194\":1}}],[\"<li>属性<\",{\"1\":{\"1194\":1}}],[\"<li>筛选<\",{\"1\":{\"1194\":1}}],[\"<li>选择器<\",{\"1\":{\"1194\":1}}],[\"<li>广州<\",{\"1\":{\"1124\":1}}],[\"<li>item3<\",{\"1\":{\"1112\":3,\"1120\":1,\"1123\":2,\"1124\":1}}],[\"<li>item2<\",{\"1\":{\"1112\":3,\"1123\":2,\"1124\":1}}],[\"<li>item1<\",{\"1\":{\"1112\":3,\"1120\":1,\"1123\":2,\"1124\":1}}],[\"<li>white<\",{\"1\":{\"993\":1,\"1152\":1,\"1158\":3}}],[\"<li>black<\",{\"1\":{\"993\":1,\"1152\":1,\"1158\":3}}],[\"<li>blue<\",{\"1\":{\"993\":1,\"1152\":1,\"1158\":3}}],[\"<li>green<\",{\"1\":{\"993\":1,\"1152\":1,\"1158\":3}}],[\"<li>yellow<\",{\"1\":{\"993\":1,\"1152\":1,\"1158\":3}}],[\"<li>red<\",{\"1\":{\"993\":1,\"1152\":1,\"1158\":3}}],[\"<li>name\",{\"1\":{\"772\":2}}],[\"<link\",{\"1\":{\"659\":1,\"1543\":2}}],[\"<ul>\",{\"1\":{\"1124\":1,\"1194\":1,\"1392\":1,\"1393\":1,\"1446\":1}}],[\"<ul\",{\"1\":{\"993\":1,\"1112\":3,\"1120\":1,\"1123\":2,\"1152\":1,\"1158\":3}}],[\"<url>\",{\"1\":{\"12\":1,\"13\":2}}],[\"<1\",{\"1\":{\"845\":1}}],[\"<10\",{\"1\":{\"388\":1}}],[\"<3\",{\"1\":{\"843\":1}}],[\"<demo\",{\"1\":{\"1429\":1,\"1437\":3}}],[\"<details>\",{\"1\":{\"697\":1}}],[\"<datalist\",{\"1\":{\"697\":1}}],[\"<div>html结构2<\",{\"1\":{\"1446\":1}}],[\"<div>html结构1<\",{\"1\":{\"1446\":2}}],[\"<div>\",{\"1\":{\"1139\":2,\"1140\":2,\"1415\":1,\"1422\":1,\"1446\":3,\"1487\":1,\"1792\":2,\"1954\":1,\"2013\":1,\"2035\":1,\"2050\":1,\"2068\":2}}],[\"<div><p>vue<\",{\"1\":{\"1974\":1}}],[\"<div><\",{\"1\":{\"662\":1,\"1139\":1,\"1140\":1,\"1792\":3}}],[\"<div>div标签\",{\"1\":{\"520\":1}}],[\"<div\",{\"1\":{\"45\":1,\"143\":1,\"520\":1,\"533\":1,\"580\":16,\"582\":9,\"681\":2,\"685\":2,\"764\":1,\"765\":2,\"772\":1,\"773\":1,\"993\":1,\"1087\":6,\"1124\":2,\"1139\":1,\"1140\":1,\"1148\":13,\"1153\":1,\"1155\":4,\"1207\":4,\"1216\":1,\"1348\":1,\"1353\":1,\"1369\":1,\"1385\":3,\"1392\":1,\"1393\":1,\"1401\":1,\"1515\":2,\"1516\":1,\"1788\":1,\"1792\":2,\"1797\":1,\"1835\":1,\"1872\":1,\"1880\":1,\"2047\":2,\"2050\":2}}],[\"<output\",{\"1\":{\"772\":2}}],[\"<object\",{\"1\":{\"672\":1,\"674\":1}}],[\"<object>\",{\"1\":{\"671\":1}}],[\"<option\",{\"1\":{\"670\":2,\"697\":4}}],[\"<expression>\",{\"1\":{\"1252\":1,\"1254\":1,\"1286\":1}}],[\"<embed>\",{\"1\":{\"671\":1}}],[\"<embed\",{\"1\":{\"668\":1,\"673\":1,\"674\":1}}],[\"<engine>\",{\"1\":{\"331\":4}}],[\"<mycomponent>\",{\"1\":{\"1954\":1}}],[\"<my\",{\"1\":{\"1519\":1}}],[\"<mixin>\",{\"1\":{\"1302\":1}}],[\"<main><\",{\"1\":{\"662\":1}}],[\"<meter\",{\"1\":{\"696\":3}}],[\"<method>\",{\"1\":{\"304\":1}}],[\"<meta\",{\"1\":{\"287\":6,\"329\":3,\"580\":2,\"649\":1,\"657\":1,\"659\":3,\"693\":2,\"764\":3,\"765\":1,\"770\":2,\"773\":3,\"1078\":1,\"1087\":4,\"1139\":1,\"1140\":1,\"1148\":1,\"1153\":1,\"1155\":2}}],[\"<a>\",{\"1\":{\"1156\":1,\"2032\":4}}],[\"<a>123<\",{\"1\":{\"912\":2}}],[\"<audio>等元素\",{\"1\":{\"1569\":1}}],[\"<audio>\",{\"1\":{\"747\":1,\"749\":2}}],[\"<audio\",{\"1\":{\"668\":1,\"747\":1}}],[\"<abbr\",{\"1\":{\"665\":1}}],[\"<abbr>\",{\"1\":{\"665\":1}}],[\"<article><\",{\"1\":{\"662\":1,\"694\":1}}],[\"<aside><\",{\"1\":{\"662\":1,\"694\":1}}],[\"<a\",{\"1\":{\"533\":1,\"664\":1,\"747\":2,\"1080\":1,\"1112\":3,\"1120\":1,\"1123\":2,\"1156\":6,\"1369\":2,\"2050\":2}}],[\"<project\",{\"1\":{\"1483\":1}}],[\"<param\",{\"1\":{\"672\":1,\"674\":1}}],[\"<p>我是注脚<\",{\"1\":{\"1954\":1}}],[\"<p>正文<\",{\"1\":{\"1232\":1}}],[\"<p>third<\",{\"1\":{\"1216\":1}}],[\"<p>second<\",{\"1\":{\"1216\":1}}],[\"<p>first<\",{\"1\":{\"1216\":1}}],[\"<p><\",{\"1\":{\"1198\":1,\"1205\":2}}],[\"<p>45678<\",{\"1\":{\"1162\":1}}],[\"<p>123hello<\",{\"1\":{\"1162\":1}}],[\"<p>在看到我之前\",{\"1\":{\"1150\":2}}],[\"<p>hello<\",{\"1\":{\"1124\":1}}],[\"<p>lorem\",{\"1\":{\"1112\":3,\"1150\":4}}],[\"<p>left<\",{\"1\":{\"582\":2}}],[\"<p>超级侦探\",{\"1\":{\"697\":1}}],[\"<p>任何地点<\",{\"1\":{\"697\":1}}],[\"<p>任何时间<\",{\"1\":{\"697\":1}}],[\"<p>\",{\"1\":{\"665\":1,\"747\":2,\"1825\":1,\"2035\":3}}],[\"<p>right<\",{\"1\":{\"582\":2}}],[\"<p>center<\",{\"1\":{\"582\":4}}],[\"<p>world<\",{\"1\":{\"533\":1,\"1124\":1}}],[\"<p>p标签\",{\"1\":{\"520\":5}}],[\"<p\",{\"1\":{\"519\":4,\"657\":1,\"1112\":6,\"1120\":2,\"1123\":4,\"1153\":1}}],[\"<<=>>=instanceof\",{\"1\":{\"816\":1}}],[\"<<>>>>>\",{\"1\":{\"816\":1}}],[\"<<\",{\"1\":{\"399\":1}}],[\"<>\",{\"1\":{\"398\":1}}],[\"<child\",{\"1\":{\"1499\":2,\"1516\":1}}],[\"<changed\",{\"1\":{\"17\":1}}],[\"<category>\",{\"1\":{\"1446\":4}}],[\"<canvas>很容易定义一些替代内容\",{\"1\":{\"702\":1}}],[\"<canvas>\",{\"1\":{\"701\":2,\"703\":1,\"704\":2}}],[\"<color>\",{\"1\":{\"613\":1}}],[\"<class\",{\"1\":{\"377\":1,\"382\":4,\"1674\":1}}],[\"<文件名>\",{\"1\":{\"301\":2}}],[\"<teleport\",{\"1\":{\"1515\":4}}],[\"<template\",{\"1\":{\"1446\":4,\"1516\":2,\"1954\":3}}],[\"<template>\",{\"1\":{\"1446\":3,\"1486\":1,\"1493\":1,\"1499\":2,\"1507\":1,\"1516\":1,\"1835\":1,\"1880\":2,\"1954\":1,\"2013\":1,\"2035\":1}}],[\"<transition>和<keep\",{\"1\":{\"1800\":1}}],[\"<transition\",{\"1\":{\"1441\":3}}],[\"<tr>\",{\"1\":{\"287\":8,\"669\":2,\"1219\":3}}],[\"<td>李四<\",{\"1\":{\"1219\":1}}],[\"<td>3<\",{\"1\":{\"1219\":1}}],[\"<td>王五<\",{\"1\":{\"1219\":1}}],[\"<td>22<\",{\"1\":{\"1219\":1}}],[\"<td>21<\",{\"1\":{\"1219\":1}}],[\"<td>2<\",{\"1\":{\"1219\":1}}],[\"<td>20<\",{\"1\":{\"1219\":1}}],[\"<td>张三<\",{\"1\":{\"1219\":1}}],[\"<td>1<\",{\"1\":{\"1219\":1}}],[\"<td><\",{\"1\":{\"287\":24,\"669\":1}}],[\"<td\",{\"1\":{\"669\":2}}],[\"<tfoot><\",{\"1\":{\"669\":1}}],[\"<tbody>\",{\"1\":{\"669\":1}}],[\"<th><\",{\"1\":{\"669\":1}}],[\"<thead>\",{\"1\":{\"669\":1}}],[\"<title>我的测试站点<\",{\"1\":{\"657\":1}}],[\"<title>document<\",{\"1\":{\"287\":2,\"329\":1,\"580\":1,\"659\":1,\"764\":1,\"765\":1,\"770\":2,\"773\":1,\"1078\":1,\"1087\":4,\"1139\":1,\"1140\":1,\"1148\":1,\"1153\":1,\"1155\":2}}],[\"<table>\",{\"1\":{\"669\":1}}],[\"<table\",{\"1\":{\"287\":2,\"1219\":1}}],[\"<base>\",{\"1\":{\"2054\":1}}],[\"<br>标签\",{\"1\":{\"1792\":1}}],[\"<br\",{\"1\":{\"1356\":2,\"1357\":4,\"1385\":2}}],[\"<branch\",{\"1\":{\"10\":5}}],[\"<body\",{\"1\":{\"1150\":1}}],[\"<body>\",{\"1\":{\"287\":2,\"329\":1,\"580\":4,\"657\":1,\"764\":1,\"765\":1,\"769\":6,\"770\":2,\"772\":3,\"773\":1,\"952\":1,\"1078\":1,\"1079\":1,\"1080\":1,\"1081\":1,\"1086\":3,\"1087\":7,\"1088\":13,\"1091\":2,\"1092\":1,\"1093\":2,\"1094\":3,\"1096\":1,\"1098\":1,\"1102\":1,\"1104\":1,\"1105\":4,\"1112\":4,\"1120\":1,\"1123\":2,\"1124\":1,\"1137\":1,\"1139\":4,\"1140\":4,\"1143\":1,\"1144\":2,\"1145\":1,\"1146\":2,\"1148\":1,\"1149\":1,\"1150\":5,\"1152\":3,\"1153\":2,\"1154\":6,\"1155\":2,\"1156\":5,\"1157\":3,\"1158\":3,\"1160\":2,\"1161\":3,\"1162\":2,\"1201\":2,\"1207\":2,\"1219\":1,\"1805\":1,\"2061\":1}}],[\"<button>change<\",{\"1\":{\"1559\":1}}],[\"<button\",{\"1\":{\"670\":3,\"1081\":1,\"1088\":7,\"1093\":1,\"1094\":3,\"1096\":1,\"1112\":1,\"1137\":1,\"1139\":1,\"1140\":1,\"1143\":1,\"1144\":2,\"1145\":1,\"1146\":2,\"1152\":3,\"1157\":3,\"1162\":1,\"1368\":1,\"1369\":2,\"1415\":1,\"1486\":1,\"1515\":1,\"1518\":1,\"2061\":3}}],[\"<suspense>\",{\"1\":{\"1516\":1}}],[\"<summary>经典台词<\",{\"1\":{\"697\":1}}],[\"<slot\",{\"1\":{\"1446\":3,\"1954\":1}}],[\"<slot>插槽默认内容\",{\"1\":{\"1446\":1}}],[\"<school\",{\"1\":{\"1420\":2,\"1428\":1}}],[\"<school><\",{\"1\":{\"1417\":1,\"1420\":1}}],[\"<script>标签块的组件对象上\",{\"1\":{\"1880\":1}}],[\"<script>\",{\"1\":{\"287\":2,\"764\":1,\"765\":1,\"769\":6,\"770\":2,\"772\":3,\"773\":1,\"952\":1,\"957\":2,\"1078\":2,\"1086\":3,\"1087\":7,\"1088\":13,\"1091\":2,\"1092\":1,\"1093\":2,\"1094\":3,\"1096\":1,\"1097\":1,\"1098\":1,\"1102\":1,\"1104\":1,\"1105\":4,\"1112\":4,\"1120\":1,\"1123\":2,\"1124\":1,\"1137\":1,\"1139\":1,\"1140\":1,\"1143\":1,\"1144\":2,\"1145\":1,\"1146\":2,\"1148\":1,\"1149\":1,\"1150\":5,\"1152\":3,\"1153\":2,\"1154\":6,\"1155\":2,\"1156\":5,\"1157\":3,\"1158\":2,\"1160\":2,\"1161\":3,\"1162\":2,\"1194\":2,\"1201\":2,\"1207\":2,\"1216\":1,\"1219\":1,\"1231\":1,\"1446\":1,\"1507\":1,\"1519\":1,\"1559\":1,\"1569\":1,\"1880\":1}}],[\"<script\",{\"1\":{\"27\":3,\"28\":3,\"29\":2,\"30\":3,\"31\":4,\"43\":1,\"47\":1,\"1079\":1,\"1201\":2,\"1207\":2,\"1219\":1,\"1486\":5,\"1493\":8,\"1499\":6,\"1583\":1,\"2013\":1,\"2061\":1}}],[\"<section>我是内容<\",{\"1\":{\"1954\":1}}],[\"<section><\",{\"1\":{\"662\":1,\"694\":1}}],[\"<select\",{\"1\":{\"670\":1}}],[\"<source>\",{\"1\":{\"747\":1}}],[\"<source\",{\"1\":{\"668\":2,\"747\":4}}],[\"<span><\",{\"1\":{\"662\":1}}],[\"<span\",{\"1\":{\"623\":1,\"1088\":1}}],[\"<style\",{\"1\":{\"580\":3,\"1433\":1}}],[\"<style>\",{\"1\":{\"287\":2,\"520\":2,\"580\":1,\"582\":2,\"764\":1,\"765\":1,\"773\":1,\"1087\":4,\"1124\":1,\"1148\":1,\"1153\":1,\"1155\":2}}],[\"<h3>加载中\",{\"1\":{\"1516\":1}}],[\"<h3>我是app组件<\",{\"1\":{\"1516\":1}}],[\"<h3>我是一个弹窗<\",{\"1\":{\"1515\":1}}],[\"<h3>\",{\"1\":{\"1507\":1}}],[\"<h3>标题<\",{\"1\":{\"1210\":2}}],[\"<h4>\",{\"1\":{\"1493\":1}}],[\"<h4\",{\"1\":{\"1446\":1}}],[\"<h1\",{\"1\":{\"1428\":1,\"1441\":3,\"1877\":1}}],[\"<h1>some\",{\"1\":{\"2068\":1}}],[\"<h1>my\",{\"1\":{\"2050\":1}}],[\"<h1>mr\",{\"1\":{\"1559\":1}}],[\"<h1>我是标题<\",{\"1\":{\"1954\":1}}],[\"<h1>\",{\"1\":{\"1835\":1}}],[\"<h1>hello\",{\"1\":{\"1348\":1}}],[\"<h1>title<\",{\"1\":{\"1216\":1}}],[\"<h1>标题<\",{\"1\":{\"1208\":2,\"1209\":3,\"1232\":3,\"1237\":1}}],[\"<h1>根元素<\",{\"1\":{\"1198\":3}}],[\"<h1>404\",{\"1\":{\"285\":1,\"294\":2,\"304\":1}}],[\"<h2\",{\"1\":{\"1401\":1}}],[\"<h2>page\",{\"1\":{\"2050\":1}}],[\"<h2>about\",{\"1\":{\"2050\":1}}],[\"<h2>actions值\",{\"1\":{\"2013\":1}}],[\"<h2>welcome\",{\"1\":{\"2050\":1}}],[\"<h2>getter值\",{\"1\":{\"2013\":1}}],[\"<h2>state值\",{\"1\":{\"2013\":1}}],[\"<h2>学校地址\",{\"1\":{\"1415\":1}}],[\"<h2>学校名称\",{\"1\":{\"1415\":1}}],[\"<h2>人员列表<\",{\"1\":{\"1392\":1,\"1393\":1}}],[\"<h2>\",{\"1\":{\"329\":1}}],[\"<hello><\",{\"1\":{\"1422\":1}}],[\"<helloworld\",{\"1\":{\"1358\":2,\"1834\":1}}],[\"<header><slot\",{\"1\":{\"1954\":1}}],[\"<header><\",{\"1\":{\"662\":1,\"694\":1}}],[\"<head><\",{\"1\":{\"657\":1}}],[\"<head>\",{\"1\":{\"287\":2,\"329\":1,\"580\":4,\"657\":1,\"764\":1,\"765\":1,\"770\":2,\"773\":1,\"1078\":1,\"1087\":4,\"1139\":1,\"1140\":1,\"1148\":1,\"1153\":1,\"1155\":2}}],[\"<hgroup><\",{\"1\":{\"694\":1}}],[\"<html><\",{\"1\":{\"657\":1,\"692\":1}}],[\"<html>\",{\"1\":{\"520\":1,\"580\":3,\"1139\":2,\"1140\":2,\"1805\":1}}],[\"<html\",{\"1\":{\"287\":2,\"329\":1,\"580\":1,\"657\":1,\"692\":1,\"770\":2,\"1139\":1,\"1140\":1}}],[\"<=\",{\"1\":{\"205\":2,\"398\":1,\"418\":2,\"1182\":1,\"1239\":2,\"1286\":1,\"1789\":2,\"1965\":2,\"1966\":6,\"1968\":4,\"1969\":7,\"1974\":2}}],[\"<iframe\",{\"1\":{\"667\":1}}],[\"<img>\",{\"1\":{\"703\":1,\"1569\":1}}],[\"<img>和<p>\",{\"1\":{\"666\":1}}],[\"<img\",{\"1\":{\"666\":2,\"765\":2,\"773\":1,\"1150\":1}}],[\"<i\",{\"1\":{\"143\":4,\"623\":2}}],[\"<input\",{\"1\":{\"45\":1,\"670\":8,\"697\":1,\"771\":1,\"772\":1,\"773\":1,\"1154\":2,\"1160\":2,\"1161\":3,\"1162\":2,\"1201\":2,\"1205\":2,\"1231\":4,\"1356\":2,\"1357\":8,\"1358\":2,\"1393\":1,\"1499\":2,\"1507\":1,\"1792\":1}}],[\"<别名>\",{\"1\":{\"87\":1}}],[\"<包名\",{\"1\":{\"75\":1}}],[\"<包名>\",{\"1\":{\"66\":2}}],[\"<function>\",{\"1\":{\"1302\":1}}],[\"<figcaption>曼彻斯特大学博物馆展出的一只霸王龙的化石<\",{\"1\":{\"666\":1}}],[\"<figure>\",{\"1\":{\"666\":1}}],[\"<filename>\",{\"1\":{\"7\":1,\"8\":4}}],[\"<footer><slot\",{\"1\":{\"1954\":1}}],[\"<footer><\",{\"1\":{\"662\":1,\"694\":1}}],[\"<form\",{\"1\":{\"45\":1,\"670\":1,\"1231\":1}}],[\"<\",{\"0\":{\"976\":1},\"1\":{\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"45\":2,\"143\":1,\"205\":2,\"263\":1,\"287\":22,\"327\":3,\"328\":10,\"329\":6,\"388\":1,\"398\":1,\"410\":3,\"411\":4,\"412\":3,\"413\":3,\"414\":3,\"415\":8,\"416\":3,\"417\":2,\"418\":1,\"419\":2,\"436\":1,\"438\":2,\"441\":1,\"443\":1,\"472\":1,\"476\":1,\"478\":2,\"480\":2,\"482\":2,\"491\":1,\"498\":1,\"499\":2,\"520\":3,\"533\":1,\"580\":21,\"582\":11,\"623\":1,\"657\":7,\"659\":2,\"664\":1,\"665\":1,\"666\":1,\"668\":3,\"669\":10,\"670\":8,\"672\":1,\"674\":1,\"685\":1,\"691\":2,\"694\":5,\"697\":2,\"740\":4,\"747\":4,\"764\":4,\"765\":5,\"769\":12,\"770\":10,\"772\":12,\"773\":5,\"812\":1,\"821\":1,\"822\":2,\"846\":1,\"855\":2,\"912\":7,\"932\":1,\"952\":2,\"957\":2,\"993\":1,\"1038\":1,\"1078\":5,\"1079\":2,\"1080\":2,\"1081\":2,\"1086\":6,\"1087\":25,\"1088\":26,\"1091\":4,\"1092\":2,\"1093\":4,\"1094\":6,\"1096\":2,\"1097\":1,\"1098\":2,\"1102\":2,\"1104\":2,\"1105\":8,\"1112\":20,\"1120\":6,\"1123\":10,\"1124\":7,\"1137\":2,\"1139\":6,\"1140\":6,\"1143\":2,\"1144\":4,\"1145\":2,\"1146\":4,\"1148\":9,\"1149\":2,\"1150\":15,\"1152\":7,\"1153\":8,\"1154\":12,\"1155\":10,\"1156\":10,\"1157\":6,\"1158\":8,\"1160\":4,\"1161\":6,\"1162\":4,\"1181\":1,\"1188\":1,\"1194\":4,\"1201\":5,\"1207\":6,\"1216\":2,\"1219\":6,\"1231\":5,\"1274\":1,\"1348\":2,\"1356\":1,\"1358\":4,\"1368\":1,\"1369\":5,\"1385\":3,\"1392\":3,\"1393\":3,\"1401\":2,\"1415\":3,\"1422\":2,\"1428\":2,\"1441\":3,\"1446\":31,\"1459\":3,\"1460\":3,\"1461\":2,\"1465\":4,\"1486\":3,\"1487\":1,\"1493\":7,\"1499\":5,\"1507\":3,\"1515\":3,\"1516\":6,\"1518\":1,\"1519\":1,\"1559\":3,\"1569\":1,\"1575\":1,\"1576\":1,\"1577\":1,\"1769\":1,\"1785\":3,\"1789\":2,\"1792\":32,\"1793\":2,\"1794\":2,\"1795\":4,\"1796\":1,\"1797\":1,\"1803\":1,\"1804\":1,\"1814\":1,\"1815\":1,\"1816\":1,\"1822\":1,\"1825\":1,\"1835\":3,\"1880\":2,\"1890\":1,\"1917\":1,\"1918\":1,\"1943\":1,\"1949\":1,\"1954\":8,\"1955\":1,\"1961\":3,\"1962\":4,\"1966\":2,\"1968\":1,\"1969\":4,\"1974\":5,\"1976\":1,\"1977\":6,\"1979\":2,\"1984\":1,\"1993\":1,\"2013\":6,\"2035\":4,\"2047\":2,\"2050\":2,\"2058\":3,\"2061\":1,\"2068\":7,\"2073\":1,\"2075\":1}}],[\"<提交id>\",{\"1\":{\"14\":1}}],[\"<远程分支>\",{\"1\":{\"13\":1}}],[\"<远程库名\",{\"1\":{\"13\":1}}],[\"<远程库名>\",{\"1\":{\"13\":3}}],[\"<远程库>\",{\"1\":{\"13\":1}}],[\"<本地分支>\",{\"1\":{\"13\":1}}],[\"<分支名>\",{\"1\":{\"13\":1,\"14\":1}}],[\"时可以使用\",{\"1\":{\"2095\":1}}],[\"时可以按照这样一种通用模式处理\",{\"1\":{\"1593\":1}}],[\"时将\",{\"1\":{\"2001\":1}}],[\"时根据组件内部声明的\",{\"1\":{\"2001\":1}}],[\"时立即执行\",{\"1\":{\"1897\":1}}],[\"时的结构如图\",{\"1\":{\"1890\":1}}],[\"时的劣势\",{\"0\":{\"225\":1}}],[\"时会进行组件的初始化\",{\"1\":{\"1836\":1}}],[\"时会调用end钩子函数处理\",{\"1\":{\"1353\":1}}],[\"时才计算值\",{\"1\":{\"1896\":1}}],[\"时才执行\",{\"1\":{\"1896\":1}}],[\"时才执行回调函数\",{\"1\":{\"1784\":1}}],[\"时才相等\",{\"1\":{\"983\":1}}],[\"时机\",{\"1\":{\"1783\":1}}],[\"时f\",{\"1\":{\"1666\":1}}],[\"时消失\",{\"1\":{\"1658\":1}}],[\"时遇到了<link>\",{\"1\":{\"1569\":1}}],[\"时传入配置项\",{\"1\":{\"1946\":1}}],[\"时传入store配置项\",{\"1\":{\"1450\":1}}],[\"时传入的那个options几乎一样\",{\"1\":{\"1415\":1}}],[\"时调用\",{\"1\":{\"1407\":1}}],[\"时非常有用\",{\"1\":{\"1038\":1}}],[\"时停止响应其他操作\",{\"1\":{\"1028\":1}}],[\"时区\",{\"1\":{\"875\":1}}],[\"时触发\",{\"1\":{\"752\":2,\"1149\":1}}],[\"时表示被阻止\",{\"1\":{\"1156\":1}}],[\"时表示以正常速度播放\",{\"1\":{\"750\":1}}],[\"时表示选中奇数位的元素\",{\"1\":{\"520\":1}}],[\"时表示选中偶数位的元素\",{\"1\":{\"520\":1}}],[\"时什么效果都没有\",{\"1\":{\"720\":1}}],[\"时指定的点\",{\"1\":{\"718\":1,\"719\":1}}],[\"时候\",{\"1\":{\"712\":4}}],[\"时不会自动闭合\",{\"1\":{\"711\":1}}],[\"时不但会影响画布本身的高宽\",{\"1\":{\"703\":1}}],[\"时只影响画布本身而不影响画布内容\",{\"1\":{\"703\":1}}],[\"时序函数编辑\",{\"1\":{\"641\":1}}],[\"时间不能倒流\",{\"1\":{\"1776\":1}}],[\"时间坑\",{\"1\":{\"1752\":1}}],[\"时间平均数要注意闰年天数\",{\"1\":{\"1745\":1}}],[\"时间的日期字符串\",{\"1\":{\"877\":1}}],[\"时间没有前置\",{\"1\":{\"875\":1}}],[\"时间\",{\"1\":{\"875\":3,\"877\":2,\"1194\":1}}],[\"时间戳\",{\"0\":{\"874\":1},\"1\":{\"1397\":1}}],[\"时间单位\",{\"1\":{\"641\":1}}],[\"时间段的描述\",{\"1\":{\"407\":1}}],[\"时间继续向前推移\",{\"1\":{\"24\":1}}],[\"时所需要的资源凭证\",{\"1\":{\"362\":1}}],[\"时需要考虑的问题\",{\"1\":{\"350\":1}}],[\"时\",{\"0\":{\"707\":1},\"1\":{\"10\":1,\"289\":1,\"345\":1,\"369\":1,\"377\":1,\"391\":1,\"397\":2,\"404\":1,\"539\":1,\"554\":1,\"636\":1,\"649\":1,\"711\":2,\"712\":1,\"716\":1,\"730\":1,\"767\":1,\"806\":2,\"874\":1,\"875\":2,\"876\":1,\"948\":1,\"976\":1,\"995\":1,\"1030\":1,\"1031\":1,\"1140\":1,\"1156\":2,\"1273\":1,\"1290\":3,\"1309\":1,\"1313\":1,\"1353\":1,\"1423\":1,\"1449\":1,\"1486\":1,\"1493\":1,\"1515\":1,\"1541\":1,\"1612\":1,\"1649\":1,\"1711\":1,\"1841\":2,\"1842\":2,\"1845\":1,\"1890\":1,\"1896\":2,\"1906\":1,\"1911\":1,\"1923\":1,\"1927\":2,\"1954\":1,\"1956\":2,\"1962\":1,\"1969\":1,\"1986\":1,\"1990\":1,\"2058\":1,\"2088\":2}}],[\"在将数据输出到页面上之前\",{\"1\":{\"2095\":1}}],[\"在表单内容中加入一些恶意脚本\",{\"1\":{\"2094\":1}}],[\"在表单提交时\",{\"1\":{\"2094\":1}}],[\"在表单中添加验证码\",{\"1\":{\"2088\":1}}],[\"在导航被确认之后\",{\"1\":{\"2071\":1}}],[\"在导出一个\",{\"1\":{\"142\":1}}],[\"在卸载的组件里面调用\",{\"1\":{\"2071\":1}}],[\"在整个嵌套的\",{\"1\":{\"2068\":1}}],[\"在整个更新过程中\",{\"1\":{\"1962\":1}}],[\"在布局组件的\",{\"1\":{\"2068\":1}}],[\"在布局介绍里提到过\",{\"1\":{\"552\":1}}],[\"在源码中\",{\"1\":{\"2043\":1}}],[\"在源对象上面设置\",{\"1\":{\"765\":1}}],[\"在开始之前\",{\"1\":{\"2040\":1}}],[\"在开发环境下\",{\"1\":{\"507\":1}}],[\"在开发阶段\",{\"1\":{\"133\":1}}],[\"在开发中我们经常使用数组来存储一些数据\",{\"1\":{\"838\":1}}],[\"在开发中显然不能这样的\",{\"1\":{\"12\":1}}],[\"在开发中除了通过\",{\"1\":{\"11\":1}}],[\"在开发中\",{\"1\":{\"10\":1}}],[\"在某些情况下拦截路由跳转\",{\"1\":{\"2032\":1}}],[\"在某些东西完成任务之后\",{\"1\":{\"865\":1}}],[\"在混入的\",{\"1\":{\"2031\":1}}],[\"在混合宏\",{\"1\":{\"1294\":1}}],[\"在切换完成的回调函数中\",{\"1\":{\"2030\":1}}],[\"在被激活的组件里调用\",{\"1\":{\"2029\":1}}],[\"在路由配置里调用\",{\"1\":{\"2029\":1}}],[\"在重用的组件里调用\",{\"1\":{\"2029\":1,\"2071\":1}}],[\"在失活的组件里调用离开守卫\",{\"1\":{\"2029\":1}}],[\"在实例化vue的时候会将router实例作为options传入\",{\"1\":{\"2026\":1}}],[\"在实际工作中\",{\"1\":{\"12\":1}}],[\"在createrenderer定义了一大堆函数\",{\"1\":{\"1998\":1}}],[\"在chrome浏览器中调试时\",{\"1\":{\"1542\":1}}],[\"在get拦截函数中访问\",{\"1\":{\"1990\":1}}],[\"在getter中收集依赖\",{\"1\":{\"1784\":1}}],[\"在getter\",{\"1\":{\"1366\":1}}],[\"在生成代码时\",{\"1\":{\"1979\":1}}],[\"在生命周期开始前先\",{\"1\":{\"1799\":1}}],[\"在节点处理的最后阶段执行缓存到\",{\"1\":{\"1977\":1}}],[\"在转换标签节点时\",{\"1\":{\"1978\":1}}],[\"在转换\",{\"1\":{\"1977\":1}}],[\"在转发其他模块的成员时\",{\"1\":{\"1312\":1}}],[\"在合适的地方设置转换上下文对象中的数据\",{\"1\":{\"1977\":1}}],[\"在合适的时候给元素添加样式类名\",{\"1\":{\"1441\":1}}],[\"在合适的时机通过\",{\"1\":{\"156\":1}}],[\"在构造\",{\"1\":{\"1969\":1}}],[\"在构建过程中要分析依赖关系\",{\"1\":{\"122\":1}}],[\"在构建的过程中需要\",{\"1\":{\"122\":1}}],[\"在特殊情况下\",{\"1\":{\"1969\":1}}],[\"在组件渲染前触发一个钩子\",{\"1\":{\"2071\":1}}],[\"在组件中使用\",{\"0\":{\"2013\":1}}],[\"在组件模板中可以直接使用$slots和$attrs\",{\"1\":{\"1956\":1}}],[\"在组件实例中添加\",{\"1\":{\"1954\":1}}],[\"在组件实例化\",{\"1\":{\"1836\":1}}],[\"在微任务中刷新缓冲队列\",{\"1\":{\"1954\":1}}],[\"在复用了\",{\"1\":{\"1951\":1}}],[\"在绑定事件时绑定一个伪造的事件处理函数\",{\"1\":{\"1949\":1}}],[\"在底层实现时需要首先对其进行规范化\",{\"1\":{\"1949\":1}}],[\"在触发响应的时候应该触发iterate\",{\"1\":{\"1906\":1}}],[\"在读写属性值时\",{\"1\":{\"1906\":1}}],[\"在读取数据时\",{\"1\":{\"1886\":1}}],[\"在读取数据过程中周期性调用\",{\"1\":{\"773\":1}}],[\"在副作用函数与\",{\"1\":{\"1932\":1}}],[\"在副作用函数中读取一个只读属性的值时\",{\"1\":{\"1914\":1}}],[\"在副作用函数内通过原始对象访问它的某个属性是不会建立响应联系的\",{\"1\":{\"1902\":1}}],[\"在副作用函数执行时\",{\"1\":{\"1891\":1}}],[\"在另一个\",{\"1\":{\"1896\":1}}],[\"在调度函数中判断\",{\"1\":{\"1897\":1}}],[\"在调度器中将\",{\"1\":{\"1896\":1}}],[\"在调用这个\",{\"1\":{\"2059\":1}}],[\"在调用原始方法之后\",{\"1\":{\"1925\":1}}],[\"在调用原始方法之前\",{\"1\":{\"1925\":1}}],[\"在调用回调函数\",{\"1\":{\"1897\":1}}],[\"在调用副作用函数之前将当前副作用函数压栈\",{\"1\":{\"1893\":1}}],[\"在调用副作用函数之前将当前副作用函数压入栈中\",{\"1\":{\"1891\":1}}],[\"在调用parsehtml传入的配置项中\",{\"1\":{\"1791\":1}}],[\"在调用end函数处理\",{\"1\":{\"1428\":1}}],[\"在调用exec\",{\"1\":{\"924\":1,\"925\":1}}],[\"在调用了\",{\"1\":{\"1088\":1}}],[\"在调用方法时\",{\"1\":{\"947\":1}}],[\"在调用test\",{\"1\":{\"925\":1}}],[\"在调用\",{\"1\":{\"404\":1,\"911\":1,\"1954\":1}}],[\"在调用时只需要调用默认的混合宏\",{\"1\":{\"1295\":1}}],[\"在调用时候给这个混合宏传一个参数值\",{\"1\":{\"1294\":1}}],[\"在调用时\",{\"1\":{\"402\":1}}],[\"在有些场景下\",{\"1\":{\"1894\":1}}],[\"在当前副作用函数执行完毕后\",{\"1\":{\"1891\":1,\"1893\":1}}],[\"在当前工程目录下执行webpack会以\",{\"1\":{\"124\":1}}],[\"在收集依赖时进行双向的收集\",{\"1\":{\"1890\":1}}],[\"在根据新的\",{\"1\":{\"1862\":1}}],[\"在根目录下创建\",{\"1\":{\"124\":1}}],[\"在vm\",{\"1\":{\"1862\":1}}],[\"在vue类上创建了options属性\",{\"1\":{\"1828\":1}}],[\"在vue2中我们有以下两种\",{\"1\":{\"1446\":1,\"1494\":1}}],[\"在vue\",{\"1\":{\"1444\":1}}],[\"在计算computed值的过程中会将computed\",{\"1\":{\"1859\":1}}],[\"在计算机里面\",{\"1\":{\"874\":1}}],[\"在计算机中是一个非常常见的操作\",{\"1\":{\"248\":1}}],[\"在执行confirmtransition时\",{\"1\":{\"2029\":1}}],[\"在执行\",{\"1\":{\"2029\":1}}],[\"在执行app\",{\"1\":{\"1998\":1}}],[\"在执行父组件的render函数时\",{\"1\":{\"1838\":1}}],[\"在执行代码之前\",{\"1\":{\"85\":1}}],[\"在只包含运行时版本中不存在该阶段\",{\"1\":{\"1805\":1}}],[\"在下面的源码中\",{\"1\":{\"2069\":2}}],[\"在下次获取计算属性时\",{\"1\":{\"1859\":1}}],[\"在下游子孙组件中可以使用inject选项来接收这些数据以便为自己所用\",{\"1\":{\"1803\":1}}],[\"在下一个的事件循环中\",{\"1\":{\"1860\":1}}],[\"在下一次\",{\"1\":{\"1440\":1}}],[\"在下一章\",{\"1\":{\"1084\":1}}],[\"在访问vm属性出错时提示错误\",{\"1\":{\"1799\":1}}],[\"在访问\",{\"1\":{\"1799\":1,\"1928\":1}}],[\"在访问数组内元素时\",{\"1\":{\"1785\":1}}],[\"在ast中找出所有静态根节点并打上标记\",{\"1\":{\"1795\":1}}],[\"在ast中找出所有静态节点并打上标记\",{\"1\":{\"1795\":1}}],[\"在ajax\",{\"1\":{\"1442\":1}}],[\"在栈中寻找与tagname相同的标签并记录其所在的位置pos\",{\"1\":{\"1792\":1}}],[\"在<template><\",{\"1\":{\"1791\":1}}],[\"在数组中\",{\"1\":{\"1927\":1}}],[\"在数组中有空项的时候\",{\"1\":{\"449\":1}}],[\"在数组的\",{\"1\":{\"1923\":1}}],[\"在数据变化后\",{\"1\":{\"1784\":2}}],[\"在年均增长率极小时\",{\"1\":{\"1748\":1}}],[\"在乘除法中采用近似的方法计算\",{\"1\":{\"1723\":1}}],[\"在多个数字\",{\"1\":{\"1711\":1}}],[\"在多个相同的混合中\",{\"1\":{\"1337\":1}}],[\"在注意力机制中\",{\"1\":{\"1678\":2}}],[\"在输入特征图上进行反卷积\",{\"1\":{\"1667\":1}}],[\"在具体实现中\",{\"1\":{\"1667\":1}}],[\"在具体使用时应该注意\",{\"1\":{\"768\":1}}],[\"在测试模式下\",{\"1\":{\"1665\":1}}],[\"在训练过程中通过动量方式累积得到的均值和方差\",{\"1\":{\"1665\":1}}],[\"在训练过程中\",{\"1\":{\"1665\":1}}],[\"在训练模型时\",{\"1\":{\"1655\":2}}],[\"在分析\",{\"1\":{\"2041\":1}}],[\"在分析渲染器时\",{\"1\":{\"1998\":1}}],[\"在分母上加上一个很小的数\",{\"1\":{\"1665\":1}}],[\"在分线程不能调用\",{\"1\":{\"1182\":1}}],[\"在深度学习网络训练过程中\",{\"1\":{\"1664\":1}}],[\"在握手阶段\",{\"1\":{\"1648\":1}}],[\"在单个\",{\"1\":{\"1647\":1}}],[\"在单独的属性需要统一处理时\",{\"1\":{\"1291\":1}}],[\"在吗\",{\"1\":{\"1646\":1}}],[\"在线教育\",{\"1\":{\"1644\":1}}],[\"在线上环境下\",{\"1\":{\"507\":1}}],[\"在那个年代\",{\"1\":{\"1614\":1}}],[\"在很久很久以前\",{\"1\":{\"1614\":1}}],[\"在很多语言中都有包管理工具\",{\"1\":{\"94\":1}}],[\"在跨域访问时\",{\"1\":{\"1613\":1}}],[\"在请求时\",{\"1\":{\"1593\":1}}],[\"在处理完相同的前置和后置节点之后\",{\"1\":{\"1969\":1}}],[\"在处理响应结果时\",{\"1\":{\"1593\":1}}],[\"在处理的时候必须要执行\",{\"1\":{\"286\":1}}],[\"在命令行进入upload\",{\"1\":{\"1591\":2}}],[\"在命令行的运行\",{\"1\":{\"148\":1}}],[\"在初始化阶段\",{\"1\":{\"1859\":1,\"1860\":1}}],[\"在初始化阶段的工作主要是\",{\"1\":{\"1799\":1}}],[\"在初始化过程中会为每个watch创建一个user\",{\"1\":{\"1854\":1}}],[\"在初始化\",{\"1\":{\"1579\":1,\"1803\":2,\"2001\":1}}],[\"在后续的操作中我们主要针对步骤\",{\"1\":{\"1573\":1}}],[\"在后面学习的事件中\",{\"1\":{\"1081\":1}}],[\"在后面是可以改变的\",{\"1\":{\"779\":1}}],[\"在消息队列中先进先出\",{\"1\":{\"1560\":1}}],[\"在消息队列先进先出\",{\"1\":{\"1181\":1}}],[\"在http1\",{\"1\":{\"1540\":1,\"1542\":1}}],[\"在事件回调中卸载事件并执行回调函数\",{\"1\":{\"1817\":1}}],[\"在事件循环机制的作用下\",{\"1\":{\"1526\":1}}],[\"在事件捕获过程中\",{\"1\":{\"1140\":1}}],[\"在需要同时复用逻辑和视图布局时使用无渲染组件\",{\"1\":{\"1501\":1}}],[\"在beforecreate之前执行一次\",{\"1\":{\"1493\":1}}],[\"在代码里分割了不同的属性\",{\"1\":{\"1485\":1}}],[\"在代码被提交到仓库前需要校验代码是否符合规范\",{\"1\":{\"122\":1}}],[\"在set的拦截函数中判断当前操作类型\",{\"1\":{\"1990\":1}}],[\"在setter中通知依赖更新\",{\"1\":{\"1784\":1}}],[\"在store\",{\"1\":{\"1452\":1}}],[\"在sass中的继承可以继承类样式块中所有样式代码\",{\"1\":{\"1297\":1}}],[\"在main\",{\"1\":{\"1450\":1}}],[\"在渲染上下文中对其进行处理\",{\"1\":{\"2001\":1}}],[\"在渲染子组件时\",{\"1\":{\"1446\":2,\"1494\":2}}],[\"在渲染矩形边框时\",{\"1\":{\"707\":1}}],[\"在插入\",{\"1\":{\"1441\":1}}],[\"在父组件中\",{\"1\":{\"1437\":2}}],[\"在父元素中设置display值为\",{\"1\":{\"564\":1}}],[\"在父元素外部的位置显示\",{\"1\":{\"557\":1}}],[\"在创建\",{\"1\":{\"1946\":1}}],[\"在创建过程中会对被监听的属性做依赖收集\",{\"1\":{\"1852\":1}}],[\"在创建父组件\",{\"1\":{\"1841\":1}}],[\"在创建的时候指定\",{\"1\":{\"1676\":1}}],[\"在创建<style>标签时可以通过lang\",{\"1\":{\"1434\":1}}],[\"在创建实例对象时被自动添加\",{\"1\":{\"1008\":1}}],[\"在子孙组件中使用\",{\"1\":{\"1803\":1}}],[\"在子组件实例化的时候进行初始化\",{\"1\":{\"1802\":1}}],[\"在子组件初始化的时候\",{\"1\":{\"1802\":1}}],[\"在子组件根标签上会出现两个自定义属性标识\",{\"1\":{\"1433\":1}}],[\"在子类型构造函数中使用call\",{\"1\":{\"1070\":1}}],[\"在子类中\",{\"1\":{\"405\":1}}],[\"在虚拟dom渲染更新的create\",{\"1\":{\"1407\":1}}],[\"在闭合标签时会处理标签属性\",{\"1\":{\"1368\":1}}],[\"在内部使用不同的属性为不同的输入元素抛出不同的事件\",{\"1\":{\"1358\":1}}],[\"在内存中的相关处理\",{\"1\":{\"1172\":1}}],[\"在内存中的所有操作的目标\",{\"1\":{\"998\":1}}],[\"在内存中可读的\",{\"1\":{\"998\":1}}],[\"在内存里面已经是垃圾了\",{\"1\":{\"865\":1}}],[\"在解析整个\",{\"1\":{\"1791\":1}}],[\"在解析过程中如果碰到文本内容\",{\"1\":{\"1791\":1}}],[\"在解析过程中还会触发一系列的事件\",{\"1\":{\"1530\":1}}],[\"在解析到动态绑定后面的\",{\"1\":{\"1358\":1}}],[\"在解析普通标签上的v\",{\"1\":{\"1357\":1}}],[\"在解析\",{\"1\":{\"1353\":2}}],[\"在解构出现之前\",{\"1\":{\"847\":1}}],[\"在嵌套规则中\",{\"1\":{\"1332\":1}}],[\"在嵌套\",{\"1\":{\"1314\":1}}],[\"在此步骤中最重要的逻辑为\",{\"1\":{\"2026\":1}}],[\"在此特别提醒\",{\"1\":{\"1250\":1}}],[\"在此示例中\",{\"1\":{\"764\":1}}],[\"在适当的时候选择链式操作\",{\"0\":{\"1237\":1}}],[\"在标签上绑定事件的做法就不说了\",{\"1\":{\"1214\":1}}],[\"在标记清除方式下是没有问题的\",{\"1\":{\"1030\":1}}],[\"在我们取得进展之前\",{\"1\":{\"1658\":1}}],[\"在我们原生的\",{\"1\":{\"1200\":1}}],[\"在我们书写程序时往往还需要对整个程序进行分支\",{\"1\":{\"817\":1}}],[\"在目前\",{\"1\":{\"1181\":1,\"1560\":1}}],[\"在添加新任务时\",{\"1\":{\"1180\":1,\"1556\":1}}],[\"在最前面传入参数\",{\"1\":{\"1201\":1}}],[\"在最开始的时候\",{\"1\":{\"1180\":1,\"1556\":1}}],[\"在最后一个形式参数前面添加\",{\"1\":{\"933\":1}}],[\"在其中挂载事件回调\",{\"1\":{\"1368\":1}}],[\"在其基础上进行扩展\",{\"1\":{\"1313\":1}}],[\"在其他浏览器中\",{\"1\":{\"1161\":2}}],[\"在其父元素中设置overflow\",{\"1\":{\"582\":1}}],[\"在按下非字符键时\",{\"1\":{\"1154\":1}}],[\"在按下某个字符键时\",{\"1\":{\"1154\":1}}],[\"在火狐中使用\",{\"1\":{\"1153\":1}}],[\"在火狐中需要使用\",{\"1\":{\"1153\":1}}],[\"在用户登录时\",{\"1\":{\"2088\":1}}],[\"在用户没有手写render函数的情况下获取传入的模板template\",{\"1\":{\"1805\":1}}],[\"在用户释放鼠标按钮时触发\",{\"1\":{\"1148\":1}}],[\"在用户移动过程中\",{\"1\":{\"1100\":1}}],[\"在冒泡阶段进行事件的处理\",{\"1\":{\"1145\":1}}],[\"在捕获阶段不会接收事件\",{\"1\":{\"1141\":1}}],[\"在每次副作用函数执行时\",{\"1\":{\"1890\":1}}],[\"在每一级节点上都会发生\",{\"1\":{\"1139\":1}}],[\"在每个包文件夹里都必须包含一个\",{\"1\":{\"376\":1}}],[\"在早期拨号上网的年代\",{\"1\":{\"1137\":1}}],[\"在原来的基础上向右移动\",{\"1\":{\"1088\":1}}],[\"在原来的基础上向右移动100\",{\"1\":{\"1088\":1}}],[\"在原来的基础上增加\",{\"1\":{\"1088\":2}}],[\"在原有线段的基础上相加\",{\"1\":{\"708\":1}}],[\"在原有的通用参数装饰器外面再封装一层函数接受\",{\"1\":{\"402\":1}}],[\"在原有的函数外面再包装一层函数\",{\"1\":{\"402\":1}}],[\"在维护一些老项目的时候\",{\"1\":{\"1078\":1}}],[\"在回调中获取元素当前位置\",{\"1\":{\"1034\":1}}],[\"在回放速率变化时触发\",{\"1\":{\"752\":1}}],[\"在运行时期间\",{\"1\":{\"1664\":1}}],[\"在运行的时候会给存储在内存中的所有变量都加上标记\",{\"1\":{\"1031\":1}}],[\"在运算操作的基础上添加其他功能\",{\"1\":{\"405\":1}}],[\"在编写转换函数时\",{\"1\":{\"1977\":1}}],[\"在编写代码时\",{\"1\":{\"379\":1}}],[\"在编译阶段的优化\",{\"1\":{\"2035\":1}}],[\"在编译阶段\",{\"1\":{\"1802\":2}}],[\"在编译阶段会存放到\",{\"1\":{\"1015\":1}}],[\"在编译模板的时候\",{\"1\":{\"1792\":1}}],[\"在编译模板时会解析标签属性中的指令\",{\"1\":{\"1407\":1}}],[\"在编译过程中处理元素的关闭操作\",{\"1\":{\"1791\":1}}],[\"在编译出的\",{\"1\":{\"1299\":1}}],[\"在编码时就确定了\",{\"1\":{\"1017\":1}}],[\"在exp中发现一个\",{\"1\":{\"1794\":3}}],[\"在express中使用ejs\",{\"0\":{\"329\":1}}],[\"在es6中引入了块作用域的概念\",{\"1\":{\"1015\":1}}],[\"在变量前面加上$的原因是将缓存\",{\"1\":{\"1238\":1}}],[\"在变量定义语句之前\",{\"1\":{\"1012\":1}}],[\"在变量名前加两下划线\",{\"1\":{\"405\":1}}],[\"在程序运行过程中它的值是允许改变的量\",{\"1\":{\"999\":1}}],[\"在通过addeventlistener\",{\"1\":{\"1146\":1}}],[\"在通过元素节点获取文本节点\",{\"1\":{\"1114\":1}}],[\"在通过\",{\"1\":{\"991\":1}}],[\"在非严格模式下\",{\"1\":{\"991\":1}}],[\"在非严格模式下则会被绑定到全局对象\",{\"1\":{\"990\":1,\"996\":1}}],[\"在箭头函数中\",{\"1\":{\"990\":1,\"996\":1}}],[\"在严格模式下\",{\"1\":{\"990\":1,\"996\":1}}],[\"在严格模式下则会保存\",{\"1\":{\"958\":1}}],[\"在更严格的条件下运行\",{\"1\":{\"959\":1}}],[\"在更高层面\",{\"1\":{\"138\":1}}],[\"在以下任意位置包装表达式即可\",{\"1\":{\"1262\":1}}],[\"在以前\",{\"1\":{\"1104\":1}}],[\"在以函数的形式被调用时\",{\"1\":{\"958\":1}}],[\"在以上过程中\",{\"1\":{\"154\":1}}],[\"在普通模式下\",{\"1\":{\"958\":4}}],[\"在之前的学习中\",{\"1\":{\"944\":1}}],[\"在本例中\",{\"1\":{\"1087\":1}}],[\"在本章开篇就有提到过\",{\"1\":{\"943\":1}}],[\"在本地作用域l或嵌套作用域e下对全局变量进行操作\",{\"1\":{\"402\":1}}],[\"在函数的建立阶段\",{\"1\":{\"1015\":1}}],[\"在函数定义语句之前\",{\"1\":{\"1012\":1}}],[\"在函数体中\",{\"1\":{\"990\":1,\"996\":1}}],[\"在函数内部声明的变量是一个局部变量\",{\"1\":{\"948\":1}}],[\"在函数作用域中可以访问到全局作用域的变量\",{\"1\":{\"938\":1}}],[\"在函数中声明一个变量\",{\"1\":{\"1029\":1}}],[\"在函数中要访问全局变量可以使用\",{\"1\":{\"938\":1}}],[\"在函数中\",{\"1\":{\"935\":1,\"938\":1}}],[\"在页面的任意的部分都可以访问的到\",{\"1\":{\"937\":1}}],[\"在页面关闭时销毁\",{\"1\":{\"937\":1}}],[\"在全局作用域中无法访问到函数作用域的变量\",{\"1\":{\"938\":1}}],[\"在全局作用域中\",{\"1\":{\"937\":1}}],[\"在全局作用域中有一个全局对象\",{\"1\":{\"937\":1}}],[\"在全局作用域中所声明变量称之为全局变量\",{\"1\":{\"785\":1}}],[\"在同一个字符串上多次调用exec\",{\"1\":{\"925\":1}}],[\"在同时开启的多个任务中\",{\"1\":{\"408\":1}}],[\"在匹配项数组中\",{\"1\":{\"925\":1}}],[\"在没有匹配项的情况下返回null\",{\"1\":{\"925\":1}}],[\"在没有动过\",{\"1\":{\"683\":1}}],[\"在正则表达式中\",{\"1\":{\"915\":1}}],[\"在正常流布局中\",{\"1\":{\"539\":1}}],[\"在选择结构中\",{\"1\":{\"914\":2}}],[\"在replace\",{\"1\":{\"911\":1}}],[\"在量词后添加问号\",{\"1\":{\"908\":1}}],[\"在美国英语和英国英语里面有些单词的写法不一样\",{\"1\":{\"906\":1}}],[\"在介绍\",{\"1\":{\"877\":1}}],[\"在时刻上尽量接近于世界时的一种时间计量系统\",{\"1\":{\"875\":1}}],[\"在学习\",{\"1\":{\"874\":1}}],[\"在设计的时候\",{\"1\":{\"2070\":1}}],[\"在设计语言新标准时\",{\"1\":{\"869\":1}}],[\"在设置\",{\"1\":{\"636\":1,\"2088\":1,\"2095\":1}}],[\"在设置的某个时间点后该\",{\"1\":{\"345\":1}}],[\"在对象中\",{\"1\":{\"868\":1}}],[\"在集合里面键和值是相同的\",{\"1\":{\"863\":1}}],[\"在集合中可以存放很多文档\",{\"1\":{\"176\":1}}],[\"在第一层循环中定义变量\",{\"1\":{\"1962\":1}}],[\"在第\",{\"1\":{\"846\":1}}],[\"在第二个\",{\"1\":{\"384\":1}}],[\"在上述情况下\",{\"1\":{\"2065\":1}}],[\"在上述的讲解中\",{\"1\":{\"1539\":1}}],[\"在上面已经实现\",{\"1\":{\"1921\":1}}],[\"在上面写\",{\"1\":{\"1621\":1}}],[\"在上面的方法中\",{\"1\":{\"2072\":1}}],[\"在上面的这种情况下\",{\"1\":{\"2068\":1}}],[\"在上面的示例中为\",{\"1\":{\"2058\":1}}],[\"在上面的示例中\",{\"1\":{\"2053\":1}}],[\"在上面的代码中\",{\"1\":{\"957\":1,\"992\":2,\"1028\":1,\"1655\":2,\"1656\":1,\"1659\":1,\"1661\":1,\"2084\":1}}],[\"在上面的例子中\",{\"1\":{\"939\":1,\"940\":1,\"996\":1,\"1105\":1}}],[\"在上面的对象的解构中\",{\"1\":{\"832\":1}}],[\"在上例中\",{\"1\":{\"1309\":1}}],[\"在上一小节中我们已经介绍了一些常见的事件类型\",{\"1\":{\"1151\":1}}],[\"在上一小节中\",{\"1\":{\"1147\":1}}],[\"在上级目录中下的\",{\"1\":{\"59\":1}}],[\"在应用浮点数数值时\",{\"1\":{\"806\":1}}],[\"在应用于一个不包含有效数字字符的字符串时\",{\"1\":{\"806\":1}}],[\"在应用于一个包含有效数字字符的字符串时\",{\"1\":{\"806\":1}}],[\"在递增递减中\",{\"1\":{\"806\":1}}],[\"在动态语言中做除法运算时\",{\"1\":{\"803\":1}}],[\"在动过\",{\"1\":{\"683\":1}}],[\"在反引号之内的所有空白符都是字符串的一部分\",{\"1\":{\"790\":1}}],[\"在局部作用域里面\",{\"1\":{\"786\":1}}],[\"在大部分计算机语言中\",{\"1\":{\"1033\":1}}],[\"在大括号中用var声明的变量不是局部变量\",{\"1\":{\"786\":1}}],[\"在大多数情况下\",{\"1\":{\"189\":1,\"2047\":1}}],[\"在他的博文中\",{\"1\":{\"773\":1}}],[\"在向服务器发送图片的过程中创建图片的缩略图预览\",{\"1\":{\"771\":1}}],[\"在该页面中发出的请求称之为目标源\",{\"1\":{\"1602\":1}}],[\"在该页面中我们安装了一个\",{\"1\":{\"770\":1}}],[\"在该页面下我们设置了两个\",{\"1\":{\"770\":1}}],[\"在该函数中对接收到的内容进行转换\",{\"1\":{\"156\":1}}],[\"在存储容量方面可以根据用户分配的磁盘配额进行存储\",{\"1\":{\"768\":1}}],[\"在存储文件时\",{\"1\":{\"10\":1}}],[\"在了解\",{\"1\":{\"766\":1}}],[\"在所有新子节点处理完毕\",{\"1\":{\"1968\":1}}],[\"在所有旧子节点处理完毕\",{\"1\":{\"1968\":1}}],[\"在所有系统上\",{\"1\":{\"1308\":1}}],[\"在所有的得到类数组的方法中\",{\"1\":{\"1112\":1}}],[\"在所有拖放事件中\",{\"1\":{\"765\":1}}],[\"在所有预定义简单数学类型上执行标准的算数运算\",{\"1\":{\"165\":1}}],[\"在拖动的过程中还可以抽象出一个过程对象\",{\"1\":{\"764\":1}}],[\"在讲解\",{\"1\":{\"763\":1,\"1644\":1}}],[\"在音频音量改变时触发\",{\"1\":{\"752\":1}}],[\"在尝试获取媒体数据\",{\"1\":{\"752\":1}}],[\"在跳跃操作开始时触发\",{\"1\":{\"752\":1}}],[\"在跳跃操作完成时触发\",{\"1\":{\"752\":1}}],[\"在暂停后恢复\",{\"1\":{\"752\":1}}],[\"在发生粘贴操作前触发\",{\"1\":{\"1160\":1}}],[\"在发生粘贴操作时触发\",{\"1\":{\"1160\":1}}],[\"在发生剪切操作前触发\",{\"1\":{\"1160\":1}}],[\"在发生剪切操作时触发\",{\"1\":{\"1160\":1}}],[\"在发生复制操作前触发\",{\"1\":{\"1160\":1}}],[\"在发生复制操作时触发\",{\"1\":{\"1160\":1}}],[\"在发生错误时触发\",{\"1\":{\"752\":1}}],[\"在发送通知之前\",{\"1\":{\"1105\":1}}],[\"在发送请求前\",{\"1\":{\"373\":1}}],[\"在媒体资源加载终止时触发\",{\"1\":{\"752\":1}}],[\"在媒体开始播放时触发\",{\"1\":{\"752\":1}}],[\"在媒体开始加载时触发\",{\"1\":{\"752\":1}}],[\"在媒体回放被暂停后再次开始时触发\",{\"1\":{\"752\":1}}],[\"在媒体已被加载足够的长度从而得知总长度时会触发这个事件\",{\"1\":{\"752\":1}}],[\"在媒体的\",{\"1\":{\"752\":1}}],[\"在媒体数据已经有足够的数据\",{\"1\":{\"752\":1}}],[\"在播放被终止时触发\",{\"1\":{\"752\":1}}],[\"在指定的子节点前插入新的子节点\",{\"0\":{\"1119\":1}}],[\"在指定的\",{\"1\":{\"729\":2}}],[\"在填充矩形的基础上清除中间区域\",{\"1\":{\"706\":1}}],[\"在自定义属性的名字前加data\",{\"1\":{\"685\":1}}],[\"在tr中使用td表示一个单元格\",{\"1\":{\"669\":1}}],[\"在table中使用tr表示表格中的一行\",{\"1\":{\"669\":1}}],[\"在现实生活中表单用于提交数据\",{\"1\":{\"670\":1}}],[\"在现实生活中\",{\"1\":{\"669\":1}}],[\"在不重新加载页面的情况下发送请求给服务器\",{\"1\":{\"1572\":1}}],[\"在不设置全局标志的情况下\",{\"1\":{\"925\":1}}],[\"在不同的副作用函数内对同一个数组执行上述方法\",{\"1\":{\"1925\":1}}],[\"在不同的地方又称之为零宽断言\",{\"1\":{\"918\":1}}],[\"在不同的屏幕\",{\"1\":{\"649\":1}}],[\"在不改变原有代码实现的基础上\",{\"1\":{\"402\":1}}],[\"在移动端获焦的时候会切换到数字键盘\",{\"1\":{\"757\":1}}],[\"在移动端获焦的时候会切换到英文键盘\",{\"1\":{\"757\":1}}],[\"在移动端\",{\"1\":{\"648\":1}}],[\"在进行数字验证时\",{\"1\":{\"904\":1}}],[\"在进行\",{\"1\":{\"617\":1,\"1423\":1}}],[\"在进行手机端开发时常用\",{\"1\":{\"534\":1}}],[\"在文档内容滚动事件\",{\"1\":{\"1153\":1}}],[\"在文档不再可见时暂停音乐\",{\"1\":{\"1132\":1}}],[\"在文档可见时开始播放音乐曲目\",{\"1\":{\"1132\":1}}],[\"在文本处理中可能会经常进行单词替换\",{\"1\":{\"916\":1}}],[\"在文本外套上标签\",{\"1\":{\"602\":1}}],[\"在文件中声明函数\",{\"1\":{\"91\":1}}],[\"在超出容器可容纳空间时会自动收缩子元素\",{\"1\":{\"587\":1}}],[\"在滑动过程中\",{\"1\":{\"572\":1}}],[\"在浮动布局中\",{\"1\":{\"562\":1}}],[\"在前面一节中我们学习了如何通过选择器来创建或获取\",{\"1\":{\"1204\":1}}],[\"在前面介绍事件流的时候\",{\"1\":{\"1155\":1}}],[\"在前面介绍解构的时候\",{\"1\":{\"832\":1}}],[\"在前面\",{\"1\":{\"1120\":1}}],[\"在前后端分离的天然选择下\",{\"1\":{\"507\":1}}],[\"在前端开发中像素要分成两种情况讨论\",{\"1\":{\"646\":1}}],[\"在前端写\",{\"1\":{\"216\":1}}],[\"在前端迅速发展的今天\",{\"1\":{\"128\":1}}],[\"在死循环代码中插入一个定时器\",{\"1\":{\"505\":1}}],[\"在死循环代码周围设置一个定时器\",{\"1\":{\"504\":1}}],[\"在于使用await语法\",{\"1\":{\"491\":1}}],[\"在新旧vnode\",{\"1\":{\"1394\":1}}],[\"在新版本的javascript引入了structuredclone\",{\"1\":{\"472\":1}}],[\"在新的分支上完成功能\",{\"1\":{\"10\":1}}],[\"在javascript中\",{\"1\":{\"469\":1}}],[\"在已排序序列中从后向前扫描\",{\"1\":{\"412\":1}}],[\"在未排序序列中找到最小\",{\"1\":{\"411\":1}}],[\"在定时器的触发函数里\",{\"1\":{\"408\":1}}],[\"在定义原函数时就可以为其指定修饰器函数\",{\"1\":{\"402\":1}}],[\"在定义包含\",{\"1\":{\"391\":1}}],[\"在定义schema时使用\",{\"1\":{\"193\":1}}],[\"在属性存在时返回属性的值\",{\"1\":{\"405\":1}}],[\"在两个对象进行运算\",{\"1\":{\"405\":1}}],[\"在类中定义并实现一个与运算符对应的处理方法\",{\"1\":{\"405\":1}}],[\"在类中对其进行指定\",{\"1\":{\"405\":1}}],[\"在字符组中\",{\"1\":{\"903\":1}}],[\"在字符串模板中\",{\"1\":{\"388\":1}}],[\"在字符串前面加上\",{\"1\":{\"384\":2}}],[\"在字典变量前加\",{\"1\":{\"402\":1}}],[\"在列表或元组前加一个\",{\"1\":{\"402\":1}}],[\"在星号的后面的参数都必须要指定参数名称\",{\"1\":{\"402\":1}}],[\"在zip对象前加\",{\"1\":{\"401\":1}}],[\"在键值对中\",{\"1\":{\"393\":1}}],[\"在模型的训练过程中\",{\"1\":{\"1659\":1}}],[\"在模板编译时\",{\"1\":{\"1801\":1}}],[\"在模板编译的优化阶段会标记静态节点\",{\"1\":{\"1789\":1}}],[\"在模板解析阶段首先会将ref作为普通的属性解析到匹配的attrs中生成\",{\"1\":{\"1428\":1}}],[\"在模板中均可以直接使用\",{\"1\":{\"1486\":1}}],[\"在模板中绑定事件时传递好参数\",{\"1\":{\"1453\":1}}],[\"在模板中使用时直接使用计算属性名\",{\"1\":{\"1376\":1}}],[\"在模板中\",{\"1\":{\"388\":1}}],[\"在模板中放置\",{\"1\":{\"387\":1}}],[\"在模块被第一次\",{\"1\":{\"1320\":1}}],[\"在模块与当前代码不在同一路径的情况下\",{\"1\":{\"378\":1}}],[\"在模块中使用\",{\"1\":{\"238\":1}}],[\"在行尾时\",{\"1\":{\"384\":1}}],[\"在赋值之前各自有自己的指针\",{\"1\":{\"382\":1}}],[\"在push的时候\",{\"1\":{\"1925\":1}}],[\"在python中声明变量时不需要任何关键字\",{\"1\":{\"380\":1}}],[\"在package\",{\"1\":{\"71\":1}}],[\"在任何场景都不应该流露出去\",{\"1\":{\"367\":1}}],[\"在网络中需要分发密钥\",{\"1\":{\"2099\":1}}],[\"在网络层面\",{\"1\":{\"1568\":1}}],[\"在网络上传输数据之前先将数据加密\",{\"1\":{\"345\":1}}],[\"在网站上动态渲染任意\",{\"1\":{\"1400\":1}}],[\"在网页中经常需要使用一些图标\",{\"1\":{\"622\":1}}],[\"在网页应用中\",{\"1\":{\"143\":1}}],[\"在哪个路径\",{\"1\":{\"345\":1}}],[\"在互联网应用中\",{\"1\":{\"343\":1}}],[\"在地址栏输入\",{\"1\":{\"373\":1}}],[\"在地址栏中输入\",{\"1\":{\"296\":1}}],[\"在地址栏直接输入\",{\"1\":{\"295\":1}}],[\"在服务端运行\",{\"1\":{\"1324\":1}}],[\"在服务端进行网页与数据的拼接\",{\"1\":{\"322\":1}}],[\"在服务端渲染被看成是一条出路\",{\"1\":{\"219\":1}}],[\"在服务器端验证请求的\",{\"1\":{\"2088\":1}}],[\"在服务器端对请求进行验证\",{\"1\":{\"2088\":1}}],[\"在服务器端直接就渲染好了\",{\"1\":{\"219\":1}}],[\"在服务器端的运行环境\",{\"1\":{\"215\":1}}],[\"在写法上的区别在于\",{\"1\":{\"216\":1}}],[\"在里面添加了\",{\"1\":{\"158\":1}}],[\"在配置\",{\"1\":{\"157\":1}}],[\"在确定好输出内容后\",{\"1\":{\"154\":1}}],[\"在经过第\",{\"1\":{\"154\":1}}],[\"在打包好的\",{\"1\":{\"149\":1}}],[\"在打包出来的\",{\"1\":{\"149\":1}}],[\"在项目中运用较多\",{\"1\":{\"291\":1}}],[\"在项目的\",{\"1\":{\"148\":1}}],[\"在项目协作中有一个常用的命令就是\",{\"1\":{\"74\":1}}],[\"在错误提示中提醒我们需要相应的\",{\"1\":{\"138\":1}}],[\"在采用模块化的项目里会有很多个模块和文件\",{\"1\":{\"122\":1}}],[\"在浏览器不支持\",{\"1\":{\"2027\":1}}],[\"在浏览器地址栏输入地址\",{\"1\":{\"1530\":1}}],[\"在浏览器环境中打印出\",{\"1\":{\"996\":1}}],[\"在浏览器中用\",{\"1\":{\"996\":1}}],[\"在浏览器中扮演的角色\",{\"1\":{\"23\":1}}],[\"在浏览器的默认样式表中对\",{\"1\":{\"533\":1}}],[\"在浏览器和\",{\"1\":{\"223\":1}}],[\"在浏览器端\",{\"1\":{\"117\":1}}],[\"在制作与最终食用都会用到\",{\"1\":{\"72\":1}}],[\"在安装时会\",{\"1\":{\"62\":1}}],[\"在一些情况下的点击事件不需要被处理\",{\"1\":{\"2065\":1}}],[\"在一次事件循环中\",{\"1\":{\"1181\":1,\"1560\":2}}],[\"在一次暂停事件后恢复媒体回放\",{\"1\":{\"752\":1}}],[\"在一个选择结构中\",{\"1\":{\"914\":1}}],[\"在一个待执行的操作\",{\"1\":{\"752\":1}}],[\"在一个分支上修改代码不会影响其他的分支\",{\"1\":{\"10\":1}}],[\"在一定程度上提高安全性\",{\"1\":{\"350\":1}}],[\"在一开始可以确定模块依赖关系\",{\"1\":{\"46\":1}}],[\"在与微软浏览器\",{\"1\":{\"22\":1}}],[\"在这种异步模式下\",{\"1\":{\"1558\":1}}],[\"在这种情况下\",{\"1\":{\"22\":1,\"633\":2,\"1663\":1,\"1969\":1}}],[\"在这些信息中\",{\"1\":{\"1541\":1}}],[\"在这些场景下\",{\"1\":{\"1034\":1}}],[\"在这一过程中\",{\"1\":{\"1526\":1}}],[\"在这一点上\",{\"1\":{\"142\":1}}],[\"在这里编写退出节点的逻辑\",{\"1\":{\"1977\":1}}],[\"在这里它就是渲染函数的名称\",{\"1\":{\"1975\":1}}],[\"在这里调用\",{\"1\":{\"1954\":6}}],[\"在这里\",{\"1\":{\"1101\":1,\"1667\":1}}],[\"在这里有一个问题\",{\"1\":{\"316\":1}}],[\"在这个常量里面\",{\"1\":{\"2044\":1}}],[\"在这个过程\",{\"1\":{\"2031\":1}}],[\"在这个文件夹下可以创建多个\",{\"1\":{\"2011\":1}}],[\"在这个作用域内定义的函数都可以访问那些\",{\"1\":{\"1948\":1}}],[\"在这个示例中\",{\"1\":{\"1663\":2,\"1673\":1,\"2058\":1}}],[\"在这个方法中当第三个参数设置为\",{\"1\":{\"1140\":1}}],[\"在这个例子中\",{\"1\":{\"1023\":1,\"1105\":1,\"1353\":1}}],[\"在这个分区退出之后\",{\"1\":{\"415\":1}}],[\"在这个之后的路由\",{\"1\":{\"355\":1}}],[\"在这个插件内部\",{\"1\":{\"128\":1}}],[\"在这个阶段\",{\"1\":{\"22\":1,\"23\":1}}],[\"在\",{\"0\":{\"729\":1,\"1315\":1},\"1\":{\"16\":1,\"22\":1,\"37\":1,\"44\":2,\"45\":1,\"84\":1,\"117\":1,\"129\":1,\"133\":1,\"138\":2,\"142\":1,\"149\":2,\"156\":3,\"158\":1,\"205\":1,\"216\":2,\"217\":1,\"218\":1,\"254\":1,\"255\":1,\"257\":1,\"258\":1,\"259\":1,\"260\":1,\"321\":1,\"345\":3,\"377\":1,\"379\":1,\"382\":1,\"520\":1,\"535\":2,\"539\":1,\"623\":1,\"641\":1,\"644\":1,\"650\":1,\"658\":1,\"666\":1,\"681\":1,\"694\":1,\"720\":3,\"746\":1,\"754\":1,\"758\":1,\"762\":1,\"765\":1,\"769\":5,\"777\":1,\"779\":1,\"781\":1,\"786\":1,\"787\":1,\"789\":1,\"790\":1,\"792\":1,\"793\":1,\"794\":1,\"822\":1,\"828\":1,\"846\":2,\"859\":1,\"861\":1,\"868\":1,\"874\":1,\"875\":1,\"877\":1,\"884\":1,\"895\":1,\"926\":1,\"936\":1,\"944\":1,\"948\":1,\"956\":2,\"980\":1,\"981\":1,\"991\":1,\"995\":1,\"1018\":1,\"1028\":1,\"1030\":1,\"1083\":1,\"1087\":1,\"1088\":1,\"1105\":1,\"1124\":1,\"1145\":1,\"1146\":1,\"1147\":1,\"1151\":1,\"1156\":3,\"1158\":1,\"1161\":7,\"1200\":1,\"1201\":2,\"1208\":1,\"1232\":1,\"1240\":1,\"1257\":1,\"1264\":1,\"1267\":1,\"1283\":1,\"1309\":2,\"1313\":3,\"1315\":1,\"1316\":1,\"1318\":1,\"1320\":1,\"1352\":1,\"1368\":1,\"1385\":1,\"1388\":1,\"1392\":1,\"1396\":1,\"1407\":1,\"1445\":1,\"1446\":1,\"1448\":1,\"1486\":1,\"1494\":1,\"1499\":2,\"1514\":2,\"1560\":1,\"1632\":1,\"1639\":1,\"1646\":1,\"1655\":1,\"1666\":1,\"1723\":6,\"1751\":1,\"1776\":1,\"1779\":1,\"1792\":2,\"1800\":1,\"1804\":1,\"1825\":1,\"1834\":2,\"1836\":1,\"1886\":2,\"1889\":2,\"1894\":1,\"1897\":1,\"1902\":1,\"1903\":1,\"1910\":1,\"1925\":1,\"1935\":1,\"1936\":2,\"1937\":1,\"1948\":1,\"1954\":2,\"1962\":1,\"1977\":1,\"1993\":1,\"2000\":1,\"2002\":1,\"2016\":2,\"2031\":2,\"2034\":1,\"2042\":1,\"2053\":1,\"2061\":1,\"2065\":2,\"2068\":1,\"2069\":1,\"2070\":2,\"2071\":2,\"2074\":1,\"2091\":2}}],[\"在主分支新的代码之后重新进行这些操作\",{\"1\":{\"11\":1}}],[\"在提交记录中会将所有的分支创建和分支合并的过程全部都显示出来\",{\"1\":{\"11\":1}}],[\"在使用了\",{\"1\":{\"1647\":1}}],[\"在使用$\",{\"1\":{\"1201\":1}}],[\"在使用变量但是没有为其赋值的时候\",{\"1\":{\"798\":1}}],[\"在使用时需要谨慎\",{\"1\":{\"1666\":1}}],[\"在使用时可能会存在多个文件中的成员同名\",{\"1\":{\"1310\":1}}],[\"在使用时\",{\"1\":{\"402\":1}}],[\"在使用\",{\"1\":{\"10\":1,\"1593\":1}}],[\"四次比较都不能命中从而进行复用\",{\"1\":{\"1966\":1}}],[\"四层\",{\"0\":{\"1624\":1}}],[\"四个索引指向的\",{\"1\":{\"1965\":1,\"1966\":1}}],[\"四个索引值\",{\"1\":{\"1965\":1,\"1966\":1}}],[\"四个\",{\"0\":{\"1453\":1}}],[\"四个值\",{\"1\":{\"544\":1,\"612\":1}}],[\"四舍五入后得到秒数\",{\"1\":{\"874\":1}}],[\"四\",{\"0\":{\"9\":1,\"38\":1,\"83\":1,\"119\":1,\"150\":1,\"168\":1,\"213\":1,\"224\":1,\"239\":1,\"307\":1,\"341\":1,\"357\":1,\"394\":1,\"442\":1,\"510\":1,\"573\":1,\"626\":1,\"660\":1,\"684\":1,\"700\":1,\"802\":1,\"986\":1,\"1022\":1,\"1089\":1,\"1125\":1,\"1151\":1,\"1175\":1,\"1204\":1,\"1258\":1,\"1331\":1,\"1442\":1,\"1510\":1,\"1529\":1,\"1668\":1,\"1704\":1,\"1736\":1,\"1760\":1,\"1779\":1,\"1798\":1,\"1837\":1,\"1896\":1,\"1911\":1,\"2030\":1,\"2056\":1}}],[\"重名问题\",{\"1\":{\"1804\":1}}],[\"重名检查\",{\"1\":{\"1804\":2}}],[\"重合尽量少\",{\"1\":{\"1751\":1}}],[\"重点\",{\"1\":{\"1954\":1}}],[\"重点来了\",{\"1\":{\"1569\":1}}],[\"重点关注\",{\"1\":{\"1486\":1,\"1757\":1}}],[\"重点掌握\",{\"1\":{\"282\":1}}],[\"重孙\",{\"1\":{\"1243\":1}}],[\"重则导致进程崩溃\",{\"1\":{\"1027\":1}}],[\"重排序涉及到两个方法\",{\"1\":{\"855\":1}}],[\"重置当前组件实例\",{\"1\":{\"1954\":1}}],[\"重置状态\",{\"1\":{\"1954\":1}}],[\"重置异步锁\",{\"1\":{\"1822\":1}}],[\"重置为\",{\"1\":{\"925\":1,\"1896\":1}}],[\"重置按钮\",{\"1\":{\"756\":2}}],[\"重置样式表\",{\"1\":{\"610\":1}}],[\"重置文件\",{\"1\":{\"8\":1}}],[\"重叠现象\",{\"1\":{\"558\":1}}],[\"重载run方法\",{\"1\":{\"408\":1}}],[\"重定向\",{\"1\":{\"307\":1}}],[\"重定向请求\",{\"1\":{\"307\":1}}],[\"重要原则\",{\"0\":{\"1362\":1}}],[\"重要\",{\"1\":{\"242\":1}}],[\"重建集合\",{\"1\":{\"198\":1}}],[\"重命名\",{\"1\":{\"263\":1}}],[\"重命名集合\",{\"1\":{\"180\":1}}],[\"重命名文件\",{\"1\":{\"8\":1}}],[\"重写mount\",{\"1\":{\"1998\":1}}],[\"重写数组的\",{\"1\":{\"1925\":2,\"1993\":1}}],[\"重写会修改数组长度的方法\",{\"0\":{\"1925\":1}}],[\"重写会改变原始数组的原生方法\",{\"1\":{\"1785\":1}}],[\"重写部分数组的查找方法\",{\"0\":{\"1922\":1}}],[\"重写虚拟\",{\"1\":{\"1478\":1}}],[\"重写\",{\"1\":{\"155\":1,\"1923\":1,\"1925\":2}}],[\"重复整个流程\",{\"1\":{\"1649\":2}}],[\"重复请求问题\",{\"0\":{\"1582\":1}}],[\"重复字母\",{\"1\":{\"912\":1}}],[\"重复声明仅仅是使用var关键字时可以这样\",{\"1\":{\"782\":1}}],[\"重复声明不带有赋值操作\",{\"1\":{\"782\":1}}],[\"重复声明\",{\"0\":{\"782\":1},\"1\":{\"781\":1}}],[\"重复执行动画时反向执行\",{\"1\":{\"644\":2}}],[\"重复出现的\",{\"1\":{\"493\":1}}],[\"重复\",{\"1\":{\"142\":1,\"389\":1}}],[\"重新收集副作用函数中用到的响应式数据\",{\"1\":{\"1890\":1}}],[\"重新收集依赖并将watcher的dirty变为false\",{\"1\":{\"1804\":1}}],[\"重新让被监听属性做依赖收集\",{\"1\":{\"1855\":1}}],[\"重新渲染组件\",{\"1\":{\"2031\":1,\"2034\":1}}],[\"重新渲染\",{\"1\":{\"1821\":1}}],[\"重新执行其中的exporfn\",{\"1\":{\"1784\":1}}],[\"重新执行历史操作\",{\"1\":{\"11\":1}}],[\"重新发一次请求\",{\"1\":{\"1569\":1}}],[\"重新解析模板\",{\"1\":{\"1396\":1}}],[\"重新设置\",{\"1\":{\"1124\":1}}],[\"重新设置以下sesssion\",{\"1\":{\"355\":1}}],[\"重新载入当前文档\",{\"1\":{\"1094\":1,\"2051\":1}}],[\"重新加载当前页面\",{\"1\":{\"1097\":1}}],[\"重新加载页面以后弹出新的窗口\",{\"1\":{\"1088\":1}}],[\"重新加载媒体才能生效\",{\"1\":{\"751\":1}}],[\"重新加载媒体\",{\"1\":{\"751\":1}}],[\"重新计算函数执行时间\",{\"1\":{\"1035\":1}}],[\"重新调用tostring\",{\"1\":{\"973\":1}}],[\"重新声明时如果带有赋值操作\",{\"1\":{\"782\":1}}],[\"重新定义\",{\"1\":{\"487\":1}}],[\"重新推入stack\",{\"1\":{\"452\":1}}],[\"重新排序数列\",{\"1\":{\"415\":1}}],[\"重新编译打包\",{\"1\":{\"158\":1}}],[\"重新运行npm\",{\"1\":{\"128\":1}}],[\"tls\",{\"1\":{\"2091\":3}}],[\"tline\",{\"1\":{\"384\":5}}],[\"t=\",{\"1\":{\"1579\":1}}],[\"t=filter\",{\"1\":{\"402\":1}}],[\"tcp\",{\"1\":{\"1530\":2,\"1638\":1,\"1647\":7,\"1649\":2}}],[\"tsl\",{\"1\":{\"2091\":1}}],[\"ts\",{\"0\":{\"2010\":1,\"2012\":1},\"1\":{\"1519\":1,\"1875\":1,\"2011\":1,\"2040\":20,\"2041\":2,\"2042\":1,\"2043\":1,\"2045\":1,\"2047\":5,\"2052\":1,\"2053\":1,\"2062\":1,\"2067\":1,\"2068\":3,\"2072\":1}}],[\"tsql\",{\"1\":{\"918\":1}}],[\"two\",{\"1\":{\"1087\":8,\"1148\":2}}],[\"twitter\",{\"1\":{\"659\":1,\"895\":1}}],[\"twitch\",{\"1\":{\"222\":2}}],[\"twing\",{\"1\":{\"329\":1}}],[\"tfoot>\",{\"1\":{\"669\":1}}],[\"tbody\",{\"1\":{\"669\":3}}],[\"tbody>\",{\"1\":{\"669\":1}}],[\"tb\",{\"1\":{\"403\":1,\"552\":1,\"1219\":2}}],[\"ttf\",{\"1\":{\"621\":1}}],[\"tt\",{\"1\":{\"390\":1}}],[\"ttl\",{\"1\":{\"355\":1}}],[\"t\",{\"1\":{\"384\":4,\"401\":1,\"402\":2,\"408\":1,\"904\":2,\"924\":1,\"1038\":3,\"1305\":1,\"1796\":1,\"1797\":1,\"1956\":4,\"1974\":4,\"2043\":2,\"2058\":3}}],[\"tuc\",{\"1\":{\"875\":1}}],[\"tue\",{\"1\":{\"875\":1}}],[\"ture\",{\"1\":{\"716\":1,\"983\":1}}],[\"tuple\",{\"0\":{\"391\":1},\"1\":{\"381\":2,\"388\":2,\"391\":2,\"401\":1,\"402\":1}}],[\"tutorials\",{\"1\":{\"773\":1}}],[\"tutorial\",{\"1\":{\"368\":1,\"704\":1}}],[\"tjva95orm7e2cbab30rmhrhdcefxjoyzgefonfh7hgq\",{\"1\":{\"364\":1,\"367\":1}}],[\"typ\",{\"1\":{\"365\":1}}],[\"typicode\",{\"1\":{\"340\":1,\"476\":1,\"1181\":1}}],[\"type进行不同的处理\",{\"1\":{\"2000\":1}}],[\"type标注了附带的响应体是什么格式\",{\"1\":{\"1636\":1}}],[\"type标注了附带的请求体是什么格式\",{\"1\":{\"1634\":1}}],[\"typemismatch\",{\"1\":{\"760\":1}}],[\"type为指定资源的\",{\"1\":{\"672\":1}}],[\"typeerror\",{\"1\":{\"421\":1,\"428\":2,\"430\":1,\"432\":1,\"436\":2,\"438\":3,\"441\":2,\"443\":2,\"779\":1,\"829\":1,\"830\":1,\"865\":2,\"995\":1,\"996\":1,\"1778\":1}}],[\"typeof\",{\"1\":{\"212\":1,\"421\":3,\"424\":1,\"428\":1,\"430\":1,\"432\":1,\"436\":1,\"438\":1,\"441\":1,\"443\":1,\"472\":1,\"483\":2,\"487\":1,\"488\":1,\"769\":1,\"789\":13,\"790\":2,\"795\":1,\"796\":1,\"797\":1,\"798\":2,\"828\":1,\"842\":2,\"876\":1,\"901\":2,\"965\":5,\"966\":3,\"967\":1,\"980\":6,\"1012\":1,\"1015\":6,\"1088\":2,\"1354\":1,\"1366\":1,\"1407\":1,\"1446\":1,\"1769\":1,\"1777\":7,\"1778\":1,\"1803\":2,\"1804\":7,\"1805\":1,\"1822\":4,\"1824\":2,\"1828\":1,\"1836\":1,\"1861\":1,\"1878\":1,\"1879\":2,\"1897\":5,\"1912\":1,\"1913\":1,\"1914\":2,\"1921\":2,\"1923\":3,\"1929\":1,\"1930\":2,\"1931\":2,\"1932\":2,\"1948\":1,\"1949\":1,\"1951\":4,\"1954\":1,\"1969\":1,\"1987\":1,\"1991\":1,\"1992\":1,\"1993\":2,\"2019\":2,\"2020\":1,\"2029\":5,\"2070\":1,\"2075\":1}}],[\"types\",{\"1\":{\"192\":3,\"1825\":1,\"1828\":3,\"2040\":1}}],[\"typescript可以更加清楚的进行类型推断的提示\",{\"1\":{\"1519\":1}}],[\"typescript\",{\"0\":{\"1479\":1},\"1\":{\"122\":1,\"1479\":1,\"1519\":1}}],[\"type\",{\"1\":{\"142\":6,\"143\":1,\"176\":3,\"194\":1,\"195\":1,\"196\":1,\"197\":1,\"198\":1,\"271\":1,\"275\":1,\"285\":1,\"286\":1,\"287\":2,\"294\":2,\"380\":1,\"382\":4,\"476\":1,\"520\":4,\"681\":1,\"693\":3,\"756\":10,\"757\":13,\"758\":1,\"772\":6,\"773\":1,\"967\":3,\"1152\":1,\"1160\":2,\"1219\":1,\"1227\":1,\"1352\":2,\"1353\":1,\"1357\":3,\"1407\":1,\"1423\":1,\"1429\":1,\"1488\":2,\"1530\":1,\"1570\":1,\"1577\":1,\"1607\":1,\"1609\":1,\"1613\":1,\"1630\":1,\"1634\":3,\"1674\":1,\"1680\":2,\"1791\":1,\"1795\":5,\"1797\":3,\"1804\":1,\"1825\":3,\"1828\":10,\"1906\":6,\"1909\":2,\"1910\":2,\"1914\":2,\"1917\":4,\"1918\":3,\"1930\":4,\"1932\":3,\"1948\":1,\"1949\":2,\"1951\":9,\"1953\":3,\"1954\":8,\"1955\":1,\"1974\":21,\"1975\":15,\"1978\":10,\"1979\":1,\"1990\":4,\"1993\":4,\"2001\":1,\"2034\":1,\"2058\":3,\"2061\":2,\"2064\":2,\"2065\":1}}],[\"type=\",{\"1\":{\"27\":3,\"28\":3,\"29\":2,\"30\":3,\"31\":4,\"45\":1,\"47\":1,\"580\":3,\"668\":1,\"670\":11,\"672\":1,\"673\":1,\"674\":2,\"681\":1,\"697\":1,\"747\":4,\"771\":1,\"772\":3,\"773\":1,\"1154\":2,\"1201\":2,\"1205\":2,\"1231\":4,\"1356\":2,\"1357\":8,\"1358\":2,\"1393\":1,\"1507\":1,\"1569\":1,\"1792\":1}}],[\"tdea\",{\"1\":{\"2099\":1}}],[\"tds\",{\"1\":{\"287\":4}}],[\"td>\",{\"1\":{\"287\":24,\"669\":3,\"1219\":9}}],[\"td\",{\"1\":{\"287\":6,\"669\":2,\"1219\":3}}],[\"txt\",{\"1\":{\"244\":2,\"245\":1,\"246\":2,\"247\":1,\"250\":2,\"251\":2,\"252\":1,\"254\":4,\"255\":3,\"260\":2,\"261\":5,\"262\":3,\"404\":2}}],[\"txt文件中\",{\"1\":{\"228\":1}}],[\"tidal\",{\"1\":{\"1328\":1}}],[\"timing\",{\"1\":{\"641\":1}}],[\"timeformater\",{\"1\":{\"1397\":1}}],[\"timechunk\",{\"1\":{\"1038\":1}}],[\"timeupdate\",{\"1\":{\"752\":1}}],[\"timestamp\",{\"1\":{\"1102\":1,\"1949\":2}}],[\"times\",{\"1\":{\"490\":1,\"491\":2,\"621\":2,\"995\":5,\"1518\":1}}],[\"timeout\",{\"1\":{\"460\":3,\"498\":2,\"505\":1,\"1035\":3,\"1580\":1}}],[\"timerfunc\",{\"1\":{\"1822\":5}}],[\"timer2\",{\"1\":{\"408\":1}}],[\"timer\",{\"1\":{\"408\":2,\"504\":3,\"1507\":3,\"1680\":5}}],[\"time\",{\"1\":{\"176\":3,\"377\":9,\"460\":2,\"461\":2,\"478\":1,\"491\":2,\"498\":4,\"504\":1,\"757\":1,\"1025\":2,\"1035\":2,\"1036\":2,\"1088\":2,\"1397\":1}}],[\"tiemo\",{\"1\":{\"236\":4}}],[\"titletext\",{\"1\":{\"1208\":2}}],[\"titleinit\",{\"1\":{\"1104\":2}}],[\"title~=abc\",{\"1\":{\"519\":1}}],[\"title$=abc\",{\"1\":{\"519\":1}}],[\"title=$\",{\"1\":{\"1459\":1}}],[\"title=\",{\"1\":{\"519\":4,\"665\":1,\"773\":1}}],[\"title=abc\",{\"1\":{\"519\":1}}],[\"title^=abc\",{\"1\":{\"519\":1}}],[\"title>\",{\"1\":{\"287\":2,\"329\":1,\"580\":1,\"657\":1,\"659\":1,\"764\":1,\"765\":1,\"770\":2,\"773\":1,\"1078\":1,\"1087\":4,\"1139\":1,\"1140\":1,\"1148\":1,\"1153\":1,\"1155\":2}}],[\"title\",{\"1\":{\"176\":3,\"191\":2,\"194\":1,\"200\":1,\"209\":2,\"329\":2,\"519\":8,\"659\":2,\"680\":1,\"1104\":9,\"1205\":4,\"1234\":1,\"1235\":1,\"1446\":1,\"1459\":4,\"1460\":1,\"1461\":3,\"1462\":3,\"1464\":2,\"1467\":4,\"1493\":2,\"1953\":3,\"2050\":2,\"2061\":3}}],[\"truthy\",{\"1\":{\"2075\":1}}],[\"true即可\",{\"1\":{\"1612\":1}}],[\"true可以监测对象内部值改变\",{\"1\":{\"1379\":1}}],[\"truetype\",{\"1\":{\"621\":2}}],[\"true\",{\"1\":{\"45\":1,\"129\":1,\"133\":1,\"134\":2,\"143\":4,\"155\":1,\"157\":1,\"194\":1,\"197\":1,\"212\":2,\"257\":2,\"259\":5,\"282\":1,\"284\":2,\"345\":1,\"350\":2,\"355\":2,\"366\":1,\"382\":1,\"397\":6,\"398\":5,\"402\":1,\"424\":2,\"425\":1,\"456\":1,\"461\":2,\"476\":1,\"482\":1,\"493\":3,\"683\":1,\"685\":1,\"716\":1,\"759\":1,\"760\":8,\"764\":2,\"765\":4,\"770\":1,\"789\":4,\"794\":2,\"795\":3,\"796\":8,\"797\":1,\"801\":2,\"806\":2,\"808\":6,\"809\":8,\"810\":11,\"812\":4,\"813\":8,\"814\":1,\"815\":1,\"830\":6,\"843\":1,\"856\":2,\"857\":4,\"862\":1,\"865\":1,\"869\":1,\"877\":1,\"889\":4,\"895\":2,\"903\":4,\"905\":2,\"910\":1,\"911\":2,\"912\":4,\"913\":4,\"917\":1,\"918\":5,\"919\":2,\"920\":4,\"923\":2,\"925\":5,\"945\":19,\"948\":2,\"965\":1,\"967\":1,\"970\":1,\"971\":1,\"972\":2,\"976\":1,\"980\":3,\"983\":4,\"984\":3,\"992\":2,\"995\":5,\"1036\":2,\"1059\":3,\"1060\":1,\"1063\":2,\"1064\":1,\"1065\":4,\"1066\":3,\"1067\":3,\"1088\":3,\"1092\":1,\"1098\":1,\"1104\":3,\"1123\":3,\"1132\":1,\"1140\":6,\"1145\":1,\"1154\":1,\"1156\":5,\"1157\":2,\"1161\":2,\"1201\":3,\"1205\":1,\"1213\":2,\"1225\":4,\"1265\":1,\"1274\":13,\"1283\":1,\"1286\":1,\"1353\":1,\"1357\":4,\"1364\":3,\"1366\":1,\"1368\":2,\"1378\":2,\"1379\":1,\"1380\":4,\"1388\":2,\"1407\":3,\"1428\":2,\"1429\":1,\"1430\":1,\"1445\":2,\"1454\":2,\"1462\":1,\"1497\":7,\"1582\":1,\"1612\":1,\"1655\":2,\"1656\":1,\"1665\":2,\"1667\":1,\"1677\":1,\"1777\":1,\"1788\":1,\"1789\":3,\"1791\":1,\"1792\":2,\"1794\":4,\"1795\":2,\"1796\":1,\"1799\":1,\"1800\":1,\"1803\":1,\"1804\":5,\"1806\":3,\"1807\":2,\"1810\":1,\"1822\":4,\"1825\":1,\"1836\":1,\"1854\":1,\"1865\":1,\"1886\":2,\"1888\":1,\"1890\":1,\"1894\":1,\"1896\":11,\"1897\":7,\"1910\":2,\"1913\":1,\"1914\":5,\"1917\":1,\"1918\":1,\"1925\":5,\"1936\":2,\"1937\":2,\"1938\":1,\"1949\":3,\"1954\":5,\"1955\":2,\"1962\":2,\"1969\":1,\"1986\":5,\"1987\":4,\"1991\":1,\"1992\":5,\"1993\":3,\"2002\":1,\"2012\":1,\"2021\":1,\"2029\":3,\"2034\":1,\"2041\":1,\"2047\":9,\"2053\":3,\"2055\":3,\"2058\":9,\"2060\":1,\"2061\":1,\"2063\":3,\"2064\":1,\"2065\":4,\"2070\":2,\"2075\":2}}],[\"treatment\",{\"1\":{\"1799\":1}}],[\"treat\",{\"1\":{\"1789\":1}}],[\"tree\",{\"1\":{\"1478\":1,\"1530\":1}}],[\"triggered\",{\"1\":{\"2058\":1}}],[\"triggererror\",{\"1\":{\"2041\":1,\"2046\":1}}],[\"triggerlisteners\",{\"1\":{\"2053\":2,\"2055\":2}}],[\"triggeraftereach\",{\"1\":{\"2041\":1,\"2046\":1,\"2084\":3}}],[\"trigger\",{\"1\":{\"1357\":2,\"1507\":2,\"1889\":3,\"1890\":3,\"1892\":4,\"1893\":3,\"1896\":3,\"1902\":1,\"1906\":6,\"1907\":1,\"1909\":1,\"1910\":1,\"1914\":2,\"1917\":3,\"1918\":4,\"1928\":4,\"1929\":5,\"1930\":2,\"1932\":2,\"1985\":2,\"1986\":2,\"1990\":3,\"1993\":2}}],[\"triangle\",{\"1\":{\"1284\":2}}],[\"trident\",{\"1\":{\"1091\":1}}],[\"trim\",{\"1\":{\"889\":2,\"1356\":1,\"1368\":1,\"1790\":1,\"1793\":1,\"1794\":3}}],[\"tr>\",{\"1\":{\"287\":8,\"669\":2,\"1219\":3}}],[\"tr\",{\"1\":{\"287\":4,\"669\":3,\"691\":1,\"1219\":4}}],[\"try\",{\"1\":{\"177\":1,\"242\":1,\"245\":1,\"499\":1,\"504\":1,\"1187\":1,\"1772\":1,\"1777\":2,\"1804\":1,\"1815\":1,\"1822\":1,\"1855\":1,\"1954\":1,\"2029\":2,\"2050\":1,\"2058\":1}}],[\"trailing\",{\"1\":{\"2054\":2}}],[\"training\",{\"1\":{\"1680\":1}}],[\"train=false\",{\"1\":{\"1656\":1}}],[\"train=true\",{\"1\":{\"1656\":1}}],[\"train\",{\"1\":{\"378\":1,\"379\":2,\"1656\":4,\"1677\":1,\"1680\":14}}],[\"track\",{\"1\":{\"1507\":2,\"1665\":1,\"1889\":3,\"1890\":2,\"1892\":1,\"1896\":3,\"1902\":1,\"1905\":1,\"1906\":1,\"1910\":1,\"1912\":1,\"1913\":1,\"1914\":3,\"1920\":1,\"1921\":1,\"1923\":1,\"1925\":2,\"1928\":3,\"1929\":2,\"1930\":3,\"1931\":3,\"1932\":3,\"1985\":2,\"1986\":2,\"1990\":1,\"1991\":1,\"1992\":1,\"1993\":3}}],[\"traceback\",{\"1\":{\"403\":2}}],[\"travell\",{\"1\":{\"906\":1}}],[\"traveller\",{\"1\":{\"906\":1}}],[\"traveler\",{\"1\":{\"906\":1}}],[\"traversenode\",{\"1\":{\"1976\":3,\"1977\":10}}],[\"traverse\",{\"1\":{\"155\":3,\"1897\":11,\"1987\":1}}],[\"trans\",{\"1\":{\"1667\":3}}],[\"transfer\",{\"1\":{\"1627\":1,\"2091\":1}}],[\"transformroot\",{\"1\":{\"1978\":1}}],[\"transformtext\",{\"1\":{\"1977\":2,\"1978\":1}}],[\"transformelement\",{\"1\":{\"1977\":3,\"1978\":1}}],[\"transform=transform\",{\"1\":{\"1656\":2}}],[\"transform=none\",{\"1\":{\"1655\":3}}],[\"transforms\",{\"1\":{\"1656\":5,\"1796\":3,\"1977\":9}}],[\"transformspecialnewlines\",{\"1\":{\"1352\":1}}],[\"transformmodel\",{\"1\":{\"1358\":2}}],[\"transformfromast\",{\"1\":{\"155\":2}}],[\"transform\",{\"0\":{\"615\":1,\"1529\":1},\"1\":{\"148\":5,\"602\":1,\"616\":3,\"617\":1,\"618\":1,\"619\":4,\"1526\":1,\"1529\":3,\"1655\":5,\"1656\":5,\"1972\":1,\"1977\":3},\"2\":{\"638\":1}}],[\"transparent\",{\"1\":{\"1266\":1,\"1284\":2}}],[\"transport\",{\"1\":{\"266\":1,\"2091\":1}}],[\"transitionto是\",{\"1\":{\"2029\":1}}],[\"transitionto\",{\"1\":{\"2026\":1,\"2029\":5,\"2030\":1,\"2031\":2,\"2034\":2}}],[\"transition>\",{\"1\":{\"1441\":1}}],[\"transition\",{\"0\":{\"641\":1},\"1\":{\"641\":5,\"1441\":1}}],[\"translatez\",{\"1\":{\"616\":2}}],[\"translatey\",{\"1\":{\"616\":1}}],[\"translatex\",{\"1\":{\"616\":2}}],[\"translate\",{\"0\":{\"616\":1},\"1\":{\"602\":1,\"720\":5}}],[\"thu\",{\"1\":{\"1534\":4,\"1537\":2,\"1540\":1}}],[\"thumb\",{\"1\":{\"773\":2}}],[\"thumbs\",{\"1\":{\"15\":1}}],[\"third\",{\"1\":{\"1120\":1}}],[\"thisvalue\",{\"1\":{\"995\":1}}],[\"thisarg\",{\"1\":{\"436\":2,\"441\":2,\"443\":2,\"1926\":4,\"1930\":3}}],[\"this\",{\"0\":{\"834\":1,\"990\":1,\"991\":1,\"992\":1,\"993\":1,\"994\":1,\"995\":1,\"996\":1},\"1\":{\"28\":4,\"155\":14,\"156\":2,\"287\":2,\"377\":1,\"422\":4,\"428\":3,\"429\":1,\"430\":3,\"432\":3,\"433\":1,\"436\":4,\"438\":4,\"441\":4,\"443\":3,\"451\":1,\"460\":1,\"461\":1,\"466\":4,\"467\":3,\"486\":1,\"487\":5,\"498\":13,\"772\":1,\"828\":1,\"834\":8,\"916\":2,\"924\":6,\"925\":1,\"942\":1,\"958\":4,\"978\":1,\"981\":1,\"990\":12,\"991\":10,\"992\":8,\"993\":11,\"995\":47,\"996\":30,\"1008\":2,\"1015\":7,\"1021\":1,\"1025\":2,\"1035\":1,\"1036\":1,\"1045\":1,\"1046\":1,\"1047\":1,\"1048\":4,\"1049\":3,\"1070\":4,\"1071\":4,\"1072\":4,\"1073\":2,\"1086\":3,\"1144\":4,\"1145\":2,\"1146\":3,\"1152\":5,\"1182\":2,\"1199\":3,\"1201\":3,\"1216\":1,\"1354\":1,\"1358\":1,\"1361\":1,\"1362\":1,\"1368\":2,\"1376\":7,\"1380\":2,\"1383\":3,\"1393\":2,\"1395\":4,\"1396\":1,\"1407\":3,\"1415\":1,\"1423\":4,\"1424\":2,\"1428\":3,\"1430\":1,\"1431\":3,\"1437\":4,\"1438\":4,\"1439\":2,\"1440\":1,\"1453\":3,\"1454\":4,\"1464\":5,\"1493\":4,\"1499\":1,\"1777\":22,\"1785\":8,\"1788\":24,\"1796\":1,\"1797\":1,\"1799\":4,\"1804\":7,\"1805\":8,\"1806\":1,\"1807\":1,\"1810\":1,\"1814\":2,\"1815\":1,\"1816\":2,\"1817\":1,\"1821\":1,\"1824\":5,\"1825\":2,\"1826\":3,\"1828\":3,\"1835\":1,\"1836\":1,\"1838\":1,\"1847\":6,\"1849\":2,\"1854\":2,\"1855\":13,\"1901\":1,\"1902\":7,\"1922\":1,\"1923\":5,\"1924\":4,\"1925\":2,\"1926\":2,\"1927\":4,\"1928\":4,\"1929\":3,\"1930\":5,\"1931\":4,\"1932\":4,\"1953\":4,\"1954\":4,\"1956\":1,\"1993\":6,\"2012\":2,\"2016\":7,\"2019\":4,\"2026\":18,\"2027\":9,\"2029\":33,\"2030\":1,\"2031\":7,\"2034\":5,\"2047\":7,\"2058\":1,\"2071\":1}}],[\"th>\",{\"1\":{\"669\":1}}],[\"that\",{\"1\":{\"486\":4,\"993\":2,\"1025\":2,\"1804\":1}}],[\"three\",{\"1\":{\"1087\":6,\"1148\":2,\"1329\":2}}],[\"threadpoolexecutor\",{\"1\":{\"408\":1}}],[\"thread\",{\"1\":{\"408\":3}}],[\"threading\",{\"1\":{\"408\":13}}],[\"through\",{\"1\":{\"625\":1,\"752\":1,\"1285\":4}}],[\"throttle\",{\"0\":{\"1036\":1},\"1\":{\"461\":1,\"478\":1,\"1036\":1}}],[\"throw\",{\"1\":{\"191\":1,\"200\":1,\"201\":2,\"202\":2,\"203\":4,\"209\":1,\"210\":1,\"211\":1,\"244\":1,\"246\":1,\"250\":2,\"254\":1,\"255\":1,\"257\":2,\"258\":1,\"259\":1,\"260\":1,\"421\":1,\"428\":2,\"430\":1,\"432\":1,\"436\":2,\"438\":3,\"441\":2,\"443\":2,\"504\":1,\"1187\":1,\"1772\":1,\"1777\":1,\"1778\":1,\"2029\":1}}],[\"they\",{\"1\":{\"2065\":1}}],[\"themes\",{\"1\":{\"1328\":3}}],[\"their\",{\"1\":{\"1305\":1,\"2065\":1}}],[\"thefile\",{\"1\":{\"773\":2}}],[\"thead>\",{\"1\":{\"669\":1}}],[\"then返回\",{\"1\":{\"1779\":1}}],[\"then方法返回值也是一个promise\",{\"1\":{\"1777\":1}}],[\"then方法回调的调用时机\",{\"1\":{\"1777\":1}}],[\"then\",{\"1\":{\"476\":1,\"498\":2,\"1105\":3,\"1181\":1,\"1187\":3,\"1188\":2,\"1189\":4,\"1232\":2,\"1445\":1,\"1560\":1,\"1584\":1,\"1586\":1,\"1587\":2,\"1772\":1,\"1777\":8,\"1778\":2,\"1779\":10,\"1822\":1,\"1897\":2,\"1954\":1,\"1987\":1,\"2072\":5,\"2074\":1,\"2075\":2,\"2076\":1,\"2079\":1,\"2080\":1,\"2081\":1,\"2082\":1,\"2083\":1,\"2084\":1}}],[\"the\",{\"1\":{\"156\":15,\"772\":3,\"1025\":3,\"1154\":1,\"1315\":1,\"1786\":1,\"1799\":2,\"1803\":3,\"1804\":7,\"1807\":1,\"2047\":2,\"2058\":7,\"2061\":1,\"2065\":5,\"2075\":1}}],[\"teardowns\",{\"1\":{\"2060\":1,\"2061\":8}}],[\"teardown\",{\"1\":{\"1807\":3,\"1810\":1,\"2061\":11}}],[\"tensor\",{\"1\":{\"1663\":12,\"1671\":2,\"1673\":2}}],[\"tensors\",{\"1\":{\"1655\":2}}],[\"tensordataset\",{\"1\":{\"1655\":10}}],[\"term=sunchis\",{\"1\":{\"1093\":1,\"2051\":1}}],[\"tern=sunchis\",{\"1\":{\"1093\":1,\"2051\":1}}],[\"teleport>\",{\"1\":{\"1515\":1}}],[\"teleportprops\",{\"1\":{\"1515\":1}}],[\"teleport\",{\"0\":{\"1515\":1},\"1\":{\"1480\":1,\"1515\":3}}],[\"tel\",{\"1\":{\"757\":1,\"758\":1,\"1059\":2,\"1060\":1}}],[\"testdiv\",{\"1\":{\"1124\":3}}],[\"testnode\",{\"1\":{\"685\":8}}],[\"test\",{\"1\":{\"49\":1,\"64\":4,\"71\":2,\"134\":2,\"138\":3,\"142\":5,\"143\":1,\"149\":1,\"150\":1,\"156\":1,\"212\":1,\"238\":1,\"239\":2,\"255\":1,\"264\":2,\"286\":3,\"425\":2,\"429\":2,\"433\":8,\"643\":1,\"644\":1,\"670\":1,\"685\":4,\"713\":1,\"782\":6,\"828\":4,\"833\":11,\"903\":6,\"905\":3,\"910\":2,\"911\":3,\"912\":7,\"913\":5,\"916\":2,\"917\":2,\"918\":18,\"919\":4,\"920\":6,\"923\":2,\"924\":3,\"925\":9,\"931\":2,\"932\":2,\"933\":6,\"934\":3,\"935\":2,\"939\":4,\"940\":13,\"941\":4,\"943\":6,\"950\":5,\"951\":8,\"952\":10,\"953\":14,\"984\":1,\"996\":14,\"1029\":2,\"1030\":1,\"1069\":1,\"1086\":7,\"1088\":4,\"1093\":2,\"1094\":6,\"1096\":2,\"1104\":1,\"1124\":3,\"1137\":2,\"1143\":2,\"1144\":13,\"1145\":7,\"1146\":14,\"1148\":10,\"1152\":9,\"1153\":2,\"1154\":8,\"1155\":4,\"1156\":22,\"1157\":7,\"1160\":10,\"1161\":9,\"1162\":5,\"1186\":4,\"1188\":2,\"1340\":8,\"1357\":2,\"1368\":2,\"1437\":3,\"1460\":3,\"1467\":1,\"1482\":2,\"1571\":1,\"1656\":2,\"1674\":1,\"1680\":7,\"1792\":6,\"1793\":1,\"1794\":1,\"1878\":1,\"1949\":2,\"2050\":4,\"2065\":1}}],[\"test4\",{\"1\":{\"30\":1}}],[\"test3\",{\"1\":{\"29\":1,\"953\":3,\"1112\":6,\"1120\":1,\"1123\":4}}],[\"test2\",{\"1\":{\"28\":1,\"255\":1,\"828\":2,\"943\":7,\"950\":2,\"952\":3,\"953\":8,\"1112\":3,\"1120\":1,\"1123\":2,\"1155\":4,\"1486\":2}}],[\"test1\",{\"1\":{\"27\":1,\"828\":1,\"1112\":3,\"1120\":1,\"1123\":2,\"1125\":1}}],[\"textparseresult\",{\"1\":{\"1793\":1}}],[\"textend\",{\"1\":{\"1792\":8}}],[\"text已定义\",{\"1\":{\"1789\":1}}],[\"text未定义\",{\"1\":{\"1789\":1}}],[\"text表示节点中包含的文本\",{\"1\":{\"1788\":1}}],[\"textnode\",{\"1\":{\"1777\":3,\"1822\":3,\"1974\":2}}],[\"text会替换掉节点中的内容\",{\"1\":{\"1399\":1}}],[\"textarea时\",{\"1\":{\"1792\":2}}],[\"textarea\",{\"1\":{\"1358\":1,\"1792\":2}}],[\"textalign\",{\"1\":{\"730\":2}}],[\"textmetrics\",{\"1\":{\"731\":1}}],[\"textbaseline\",{\"1\":{\"730\":1,\"732\":1}}],[\"textcontent的时候为false\",{\"1\":{\"1788\":1}}],[\"textcontent属性\",{\"1\":{\"1124\":1}}],[\"textcontent\",{\"1\":{\"681\":1,\"841\":1,\"1114\":1,\"1124\":4,\"1559\":1,\"1946\":1}}],[\"text\",{\"0\":{\"1114\":1,\"1399\":1},\"1\":{\"27\":3,\"28\":3,\"29\":2,\"30\":3,\"31\":4,\"45\":1,\"271\":1,\"275\":1,\"285\":1,\"286\":1,\"287\":2,\"294\":5,\"580\":3,\"596\":1,\"625\":2,\"670\":1,\"681\":1,\"693\":2,\"697\":1,\"729\":2,\"756\":1,\"758\":1,\"765\":12,\"924\":4,\"925\":10,\"992\":5,\"1114\":1,\"1148\":1,\"1154\":2,\"1160\":2,\"1161\":8,\"1162\":2,\"1201\":2,\"1203\":2,\"1205\":5,\"1216\":2,\"1218\":1,\"1231\":1,\"1252\":4,\"1352\":5,\"1356\":2,\"1357\":1,\"1358\":3,\"1393\":1,\"1404\":1,\"1407\":2,\"1493\":2,\"1507\":1,\"1530\":1,\"1570\":4,\"1587\":1,\"1607\":1,\"1627\":1,\"1636\":4,\"1788\":4,\"1789\":10,\"1791\":2,\"1792\":17,\"1793\":8,\"1796\":3,\"1797\":1,\"1835\":1,\"1886\":1,\"1888\":2,\"1890\":2,\"1946\":2,\"1951\":1,\"1974\":11,\"1978\":1}}],[\"templateast\",{\"1\":{\"1972\":2}}],[\"template>模板内\",{\"1\":{\"1791\":1}}],[\"template>\",{\"1\":{\"1446\":7,\"1486\":1,\"1493\":1,\"1499\":2,\"1507\":1,\"1516\":3,\"1835\":1,\"1880\":1,\"1954\":4,\"2013\":1,\"2035\":1}}],[\"template\",{\"1\":{\"128\":1,\"580\":1,\"1267\":1,\"1392\":1,\"1415\":1,\"1422\":2,\"1518\":1,\"1782\":1,\"1790\":3,\"1791\":2,\"1792\":1,\"1795\":2,\"1796\":1,\"1797\":1,\"1805\":18,\"1825\":1,\"1874\":2,\"1877\":1,\"1972\":1,\"1974\":2,\"1975\":2,\"1979\":1,\"2001\":1}}],[\"temp\",{\"1\":{\"15\":1,\"390\":1,\"402\":5,\"403\":1,\"404\":4,\"405\":18,\"408\":4,\"925\":4,\"2061\":1}}],[\"tmpprototype\",{\"1\":{\"424\":5}}],[\"tmproj\",{\"1\":{\"15\":1}}],[\"tmp\",{\"1\":{\"15\":1,\"418\":2}}],[\"tan\",{\"1\":{\"546\":2,\"884\":1}}],[\"taskstart\",{\"1\":{\"498\":2}}],[\"task\",{\"1\":{\"408\":2,\"498\":2}}],[\"tab\",{\"1\":{\"384\":1,\"1249\":1,\"1370\":1}}],[\"table>\",{\"1\":{\"287\":2,\"669\":1,\"1219\":1}}],[\"table\",{\"1\":{\"176\":2,\"287\":8,\"548\":3,\"566\":1,\"669\":3}}],[\"tapasync\",{\"1\":{\"156\":1}}],[\"tapable\",{\"1\":{\"156\":1}}],[\"target为undefined\",{\"1\":{\"1786\":2}}],[\"target和srcelememnt是等价的\",{\"1\":{\"1152\":1}}],[\"target属性返回对触发事件的元素节点对象的一个引用\",{\"1\":{\"1152\":1}}],[\"target=\",{\"1\":{\"664\":1,\"2065\":2}}],[\"target=handle\",{\"1\":{\"408\":1}}],[\"target=none\",{\"1\":{\"408\":1}}],[\"target传参绑定处理函数\",{\"1\":{\"408\":1}}],[\"target\",{\"0\":{\"1902\":1},\"1\":{\"134\":1,\"432\":1,\"670\":1,\"765\":4,\"772\":1,\"773\":2,\"993\":5,\"1088\":3,\"1152\":4,\"1158\":1,\"1219\":4,\"1315\":1,\"1357\":4,\"1358\":2,\"1369\":1,\"1396\":2,\"1445\":2,\"1491\":6,\"1655\":3,\"1656\":1,\"1768\":3,\"1784\":1,\"1785\":1,\"1786\":25,\"1797\":18,\"1802\":4,\"1804\":3,\"1849\":1,\"1886\":4,\"1888\":5,\"1889\":23,\"1890\":5,\"1892\":2,\"1893\":2,\"1902\":8,\"1905\":3,\"1906\":11,\"1907\":4,\"1909\":5,\"1910\":14,\"1912\":4,\"1913\":4,\"1914\":18,\"1917\":10,\"1918\":10,\"1920\":5,\"1921\":4,\"1923\":5,\"1925\":1,\"1927\":16,\"1928\":17,\"1929\":17,\"1930\":11,\"1931\":9,\"1932\":12,\"1938\":12,\"1985\":11,\"1990\":17,\"1991\":4,\"1992\":4,\"1993\":22,\"2065\":3}}],[\"tagendname\",{\"1\":{\"1974\":3}}],[\"tagend\",{\"1\":{\"1974\":8}}],[\"tagopen\",{\"1\":{\"1974\":4}}],[\"tagre\",{\"1\":{\"1793\":5}}],[\"tagname\",{\"1\":{\"1353\":1,\"1792\":25,\"1796\":1,\"1802\":1,\"1948\":1,\"1974\":3}}],[\"tags\",{\"1\":{\"14\":1,\"200\":3,\"1475\":1,\"1792\":1}}],[\"tag\",{\"0\":{\"14\":1},\"1\":{\"14\":4,\"483\":2,\"1353\":1,\"1358\":2,\"1388\":2,\"1394\":2,\"1423\":1,\"1475\":1,\"1788\":4,\"1789\":5,\"1791\":3,\"1792\":8,\"1795\":4,\"1796\":3,\"1797\":2,\"1802\":4,\"1834\":2,\"1835\":3,\"1864\":1,\"1873\":2,\"1878\":2,\"1879\":7,\"1946\":2,\"1974\":9,\"1978\":2,\"2032\":3,\"2054\":1}}],[\"taobao\",{\"1\":{\"2\":1,\"69\":1,\"1426\":1,\"1591\":1}}],[\"toarray\",{\"1\":{\"1815\":2,\"1824\":1}}],[\"tonumber\",{\"1\":{\"1797\":1}}],[\"torchvision\",{\"1\":{\"1656\":9}}],[\"torch\",{\"1\":{\"1655\":13,\"1659\":5,\"1661\":1,\"1662\":4,\"1663\":6,\"1665\":3,\"1666\":1,\"1667\":3,\"1669\":2,\"1670\":2,\"1671\":2,\"1673\":8,\"1674\":1,\"1675\":7,\"1676\":1,\"1677\":1,\"1680\":2}}],[\"toraw\",{\"0\":{\"1506\":1},\"1\":{\"1506\":1}}],[\"torefs返回的对象结构\",{\"1\":{\"1937\":1}}],[\"torefs\",{\"1\":{\"1502\":2,\"1937\":3,\"1938\":2}}],[\"toref\",{\"0\":{\"1502\":1},\"1\":{\"1502\":1,\"1937\":6}}],[\"tort\",{\"1\":{\"156\":1}}],[\"to的对象写法\",{\"1\":{\"1459\":1,\"1461\":1}}],[\"to的字符串写法\",{\"1\":{\"1459\":1,\"1461\":1}}],[\"to=\",{\"1\":{\"1456\":1,\"1458\":1,\"1459\":2,\"1460\":3,\"1461\":2,\"1515\":4,\"2062\":3}}],[\"towidth\",{\"1\":{\"1201\":2}}],[\"toml\",{\"1\":{\"2040\":1}}],[\"tom\",{\"1\":{\"1045\":1,\"1046\":1,\"1047\":1,\"1048\":1,\"1049\":1,\"1491\":1}}],[\"tom2\",{\"1\":{\"41\":1}}],[\"tolocation\",{\"1\":{\"2084\":2}}],[\"tolocalstring\",{\"1\":{\"925\":1}}],[\"tolocaletimestring\",{\"1\":{\"877\":1}}],[\"tolocalestring\",{\"1\":{\"877\":2,\"925\":5,\"1088\":1}}],[\"tolocaledatestring\",{\"1\":{\"772\":2,\"877\":1}}],[\"tolowercase\",{\"1\":{\"892\":2,\"1091\":1,\"1792\":3,\"1878\":1,\"1949\":2,\"2058\":2}}],[\"tojson\",{\"1\":{\"877\":1}}],[\"totensor\",{\"1\":{\"1656\":1}}],[\"totimestring\",{\"1\":{\"877\":3}}],[\"total\",{\"1\":{\"480\":3,\"835\":2}}],[\"toisostring\",{\"1\":{\"877\":2}}],[\"toutiao\",{\"1\":{\"1768\":2}}],[\"toutcstring\",{\"1\":{\"877\":1}}],[\"touppercase\",{\"1\":{\"41\":1,\"892\":2,\"1954\":1,\"2045\":1}}],[\"too\",{\"1\":{\"828\":2,\"1144\":2,\"1145\":1,\"1146\":1}}],[\"toolong\",{\"1\":{\"760\":1}}],[\"tofixed\",{\"1\":{\"790\":1}}],[\"tocolor\",{\"1\":{\"1201\":4}}],[\"toc\",{\"1\":{\"773\":1}}],[\"toggleobserving\",{\"1\":{\"1803\":2,\"1804\":2}}],[\"toggleclass\",{\"1\":{\"1205\":2}}],[\"toggle\",{\"0\":{\"1221\":1},\"1\":{\"685\":1,\"1125\":1,\"1220\":1,\"1221\":2}}],[\"to动画的结束位置\",{\"1\":{\"643\":1}}],[\"top=10\",{\"1\":{\"1088\":1}}],[\"top\",{\"1\":{\"543\":1,\"545\":1,\"546\":1,\"569\":2,\"572\":1,\"574\":4,\"580\":1,\"582\":2,\"602\":1,\"603\":2,\"619\":1,\"625\":1,\"630\":1,\"636\":1,\"730\":1,\"764\":3,\"1087\":6,\"1098\":1,\"1153\":1,\"1207\":3,\"1257\":2,\"1259\":2,\"1262\":2,\"1284\":1,\"1296\":2,\"1298\":6,\"1332\":3}}],[\"top和margin\",{\"1\":{\"543\":1}}],[\"todatestring\",{\"1\":{\"877\":3}}],[\"todataurl\",{\"1\":{\"496\":1,\"744\":1}}],[\"todos\",{\"1\":{\"1181\":1}}],[\"todo\",{\"1\":{\"494\":1,\"1767\":1,\"1976\":1}}],[\"tokenize\",{\"1\":{\"1974\":2}}],[\"tokenvalue\",{\"1\":{\"1793\":5}}],[\"tokens\",{\"1\":{\"1352\":3,\"1793\":7,\"1974\":17}}],[\"token中包含的用户信息\",{\"1\":{\"368\":1}}],[\"token的接收方是否是自己等等\",{\"1\":{\"368\":1}}],[\"token放入http请求头中的authorization属性中\",{\"1\":{\"368\":1}}],[\"token即可\",{\"1\":{\"368\":1}}],[\"token字符串作为登录成功的结果返回给前端\",{\"1\":{\"368\":1}}],[\"token就是一个如同lll\",{\"1\":{\"368\":1}}],[\"token\",{\"0\":{\"357\":1,\"358\":1,\"359\":1,\"360\":1,\"361\":1,\"362\":1,\"369\":1},\"1\":{\"343\":2,\"350\":1,\"358\":3,\"360\":14,\"362\":8,\"363\":2,\"368\":9,\"369\":4,\"897\":1,\"1357\":1,\"1793\":1,\"1974\":16,\"2088\":5}}],[\"tostring函数\",{\"1\":{\"967\":1}}],[\"tostring\",{\"1\":{\"35\":1,\"239\":3,\"464\":1,\"501\":1,\"789\":10,\"801\":1,\"877\":3,\"925\":4,\"967\":1,\"995\":3,\"1797\":2,\"1822\":1,\"1930\":1,\"1932\":1}}],[\"to\",{\"1\":{\"8\":1,\"15\":1,\"64\":1,\"156\":8,\"636\":4,\"643\":1,\"644\":4,\"779\":1,\"830\":1,\"877\":4,\"940\":1,\"1015\":4,\"1285\":4,\"1441\":2,\"1456\":1,\"1461\":1,\"1467\":12,\"1515\":1,\"1519\":4,\"1663\":2,\"1676\":2,\"1680\":3,\"1768\":2,\"1786\":2,\"1799\":1,\"1803\":1,\"1804\":2,\"1805\":3,\"1834\":2,\"1835\":1,\"1897\":1,\"1956\":1,\"1987\":1,\"2029\":13,\"2032\":1,\"2034\":3,\"2043\":1,\"2050\":1,\"2057\":2,\"2058\":25,\"2061\":8,\"2062\":2,\"2064\":3,\"2065\":5,\"2069\":22,\"2072\":5,\"2073\":9,\"2074\":6,\"2075\":8,\"2078\":2,\"2079\":1,\"2080\":2,\"2081\":2,\"2082\":2,\"2083\":1,\"2084\":2}}],[\"fc2\",{\"1\":{\"1669\":2}}],[\"fc1\",{\"1\":{\"1669\":2}}],[\"fcb\",{\"1\":{\"287\":2}}],[\"f=600\",{\"1\":{\"1587\":1}}],[\"fbind\",{\"1\":{\"1407\":1}}],[\"f55\",{\"1\":{\"1312\":1,\"1320\":3}}],[\"f00\",{\"1\":{\"1267\":8,\"1278\":2,\"1279\":2,\"1280\":2,\"1282\":1,\"1290\":6,\"1301\":2,\"1306\":1,\"1309\":3,\"1312\":1,\"1313\":2,\"1315\":2,\"1318\":3,\"1319\":3,\"1320\":1}}],[\"f0f3\",{\"1\":{\"623\":1}}],[\"f36\",{\"1\":{\"1248\":2,\"1297\":2}}],[\"fm\",{\"1\":{\"1231\":4}}],[\"f2ece4\",{\"1\":{\"1266\":3}}],[\"f2\",{\"1\":{\"991\":2}}],[\"f11\",{\"1\":{\"1312\":2}}],[\"f1\",{\"1\":{\"991\":2}}],[\"f1b0\",{\"1\":{\"623\":1}}],[\"ff0\",{\"1\":{\"1280\":2}}],[\"ff5\",{\"1\":{\"1279\":2}}],[\"fff\",{\"1\":{\"725\":1,\"1248\":2,\"1259\":1,\"1306\":2}}],[\"ff\",{\"1\":{\"535\":1}}],[\"flushcallbacks\",{\"1\":{\"1822\":5}}],[\"flush\",{\"1\":{\"1498\":3,\"1897\":4,\"1987\":1,\"2069\":3}}],[\"flex\",{\"0\":{\"584\":1},\"1\":{\"548\":4,\"580\":3,\"583\":1,\"584\":2,\"585\":3,\"586\":1,\"587\":2,\"588\":5,\"589\":3,\"591\":6,\"592\":9,\"599\":1,\"604\":1,\"1265\":4,\"1302\":6,\"1303\":2,\"1304\":2,\"1305\":4},\"2\":{\"607\":1}}],[\"flash\",{\"1\":{\"672\":2,\"673\":1,\"674\":2,\"746\":1}}],[\"flag=\",{\"1\":{\"1834\":1}}],[\"flag\",{\"1\":{\"461\":4,\"482\":4,\"1036\":4,\"1799\":1,\"1834\":2}}],[\"flatten\",{\"1\":{\"453\":1,\"1661\":5}}],[\"flattendeep\",{\"1\":{\"450\":2,\"452\":1}}],[\"flat\",{\"0\":{\"449\":1},\"1\":{\"449\":4}}],[\"flow\",{\"0\":{\"539\":1},\"1\":{\"539\":1,\"548\":4,\"552\":1,\"564\":1,\"587\":1,\"1803\":1}}],[\"floor\",{\"1\":{\"395\":1,\"413\":2,\"414\":1,\"416\":1,\"418\":3,\"419\":2,\"480\":1,\"740\":2,\"882\":2,\"883\":3}}],[\"floatshadowoffsety\",{\"1\":{\"733\":1}}],[\"float\",{\"0\":{\"559\":1},\"1\":{\"382\":2,\"395\":2,\"560\":1,\"578\":1,\"580\":2,\"582\":1,\"733\":2,\"765\":1,\"1148\":1}}],[\"fns\",{\"1\":{\"1802\":2}}],[\"fnscopeid\",{\"1\":{\"1788\":1}}],[\"fnoptions\",{\"1\":{\"1788\":1}}],[\"fncontext\",{\"1\":{\"1788\":1}}],[\"fn=none\",{\"1\":{\"1655\":1}}],[\"fnname\",{\"1\":{\"1311\":2}}],[\"fn2\",{\"1\":{\"1021\":4,\"1025\":2,\"1028\":4,\"1146\":2}}],[\"fn的函数定义\",{\"1\":{\"1021\":1}}],[\"fntrim\",{\"1\":{\"917\":2}}],[\"fn1\",{\"1\":{\"759\":1,\"991\":4,\"1025\":2,\"1028\":6,\"1146\":3}}],[\"fnargs\",{\"1\":{\"428\":3}}],[\"fn\",{\"1\":{\"402\":1,\"421\":5,\"428\":5,\"430\":5,\"432\":3,\"433\":3,\"460\":2,\"461\":2,\"463\":4,\"464\":4,\"487\":3,\"934\":6,\"943\":4,\"991\":8,\"992\":18,\"1008\":1,\"1021\":5,\"1030\":4,\"1035\":2,\"1036\":2,\"1038\":2,\"1073\":1,\"1186\":2,\"1187\":2,\"1201\":7,\"1216\":4,\"1446\":2,\"1655\":1,\"1659\":1,\"1772\":2,\"1802\":4,\"1804\":2,\"1814\":3,\"1816\":7,\"1817\":4,\"1886\":2,\"1888\":6,\"1889\":4,\"1890\":6,\"1891\":2,\"1893\":4,\"1894\":2,\"1895\":4,\"1897\":2,\"1949\":2,\"1954\":2,\"1984\":3,\"1987\":2,\"2029\":2,\"2045\":5}}],[\"ftp\",{\"1\":{\"268\":1,\"1093\":2,\"2051\":2}}],[\"fulfilled\",{\"1\":{\"1777\":5}}],[\"full\",{\"1\":{\"2054\":1}}],[\"fullpath\",{\"1\":{\"2029\":2,\"2044\":1,\"2065\":2}}],[\"fullname\",{\"1\":{\"1376\":2,\"1496\":2}}],[\"fullyear\",{\"1\":{\"877\":2}}],[\"fully\",{\"1\":{\"772\":1}}],[\"fun\",{\"1\":{\"402\":1,\"928\":1}}],[\"func\",{\"1\":{\"402\":1,\"490\":1,\"491\":2,\"995\":5,\"1039\":5,\"1040\":4,\"1777\":4}}],[\"functools\",{\"1\":{\"402\":1}}],[\"functional\",{\"1\":{\"2031\":1}}],[\"functiondecl\",{\"1\":{\"1975\":1,\"1978\":1,\"1979\":1}}],[\"functiondeclnode\",{\"1\":{\"1975\":1}}],[\"functions\",{\"1\":{\"148\":3,\"1040\":6,\"1300\":3,\"1308\":1,\"1804\":1}}],[\"function\",{\"0\":{\"27\":1},\"1\":{\"27\":3,\"29\":6,\"30\":4,\"35\":4,\"37\":2,\"41\":4,\"42\":2,\"44\":2,\"45\":2,\"49\":1,\"124\":3,\"134\":1,\"149\":1,\"155\":4,\"156\":2,\"198\":1,\"200\":1,\"201\":2,\"202\":2,\"203\":4,\"209\":1,\"210\":1,\"211\":1,\"212\":2,\"236\":1,\"239\":2,\"282\":2,\"287\":2,\"313\":2,\"314\":2,\"350\":3,\"402\":3,\"408\":2,\"410\":1,\"411\":1,\"412\":1,\"413\":1,\"414\":2,\"415\":1,\"416\":2,\"417\":1,\"418\":1,\"419\":2,\"421\":4,\"422\":2,\"424\":1,\"428\":4,\"429\":1,\"430\":4,\"432\":5,\"433\":1,\"436\":3,\"438\":3,\"441\":3,\"443\":3,\"450\":1,\"451\":1,\"452\":1,\"453\":1,\"455\":1,\"456\":2,\"457\":1,\"458\":1,\"460\":2,\"461\":2,\"463\":2,\"464\":3,\"466\":5,\"467\":2,\"469\":1,\"471\":1,\"472\":1,\"476\":5,\"478\":1,\"479\":1,\"480\":2,\"482\":2,\"483\":2,\"486\":1,\"487\":6,\"488\":1,\"490\":1,\"491\":2,\"494\":1,\"496\":2,\"499\":2,\"501\":2,\"505\":1,\"641\":1,\"727\":3,\"732\":1,\"740\":4,\"764\":3,\"765\":7,\"772\":3,\"773\":3,\"828\":2,\"829\":2,\"830\":11,\"833\":3,\"834\":2,\"835\":2,\"836\":2,\"846\":1,\"855\":3,\"883\":1,\"896\":1,\"917\":1,\"928\":1,\"929\":1,\"930\":1,\"931\":1,\"932\":1,\"933\":3,\"934\":3,\"935\":1,\"939\":2,\"940\":5,\"943\":4,\"944\":1,\"945\":5,\"946\":3,\"948\":8,\"950\":2,\"951\":4,\"952\":6,\"953\":9,\"957\":3,\"958\":4,\"966\":1,\"967\":2,\"978\":1,\"991\":5,\"992\":6,\"993\":5,\"995\":34,\"996\":5,\"1009\":3,\"1012\":3,\"1015\":14,\"1021\":4,\"1023\":2,\"1025\":8,\"1028\":2,\"1029\":1,\"1030\":2,\"1033\":1,\"1035\":1,\"1036\":1,\"1038\":4,\"1039\":4,\"1040\":4,\"1045\":1,\"1046\":1,\"1047\":3,\"1048\":2,\"1049\":2,\"1063\":1,\"1064\":4,\"1065\":1,\"1069\":3,\"1070\":2,\"1071\":3,\"1072\":5,\"1086\":1,\"1087\":1,\"1088\":9,\"1093\":1,\"1094\":3,\"1096\":1,\"1102\":1,\"1104\":3,\"1105\":2,\"1112\":1,\"1132\":1,\"1137\":1,\"1139\":6,\"1140\":6,\"1143\":1,\"1144\":3,\"1145\":2,\"1146\":3,\"1148\":1,\"1149\":1,\"1150\":5,\"1151\":4,\"1152\":3,\"1153\":2,\"1154\":6,\"1155\":4,\"1156\":5,\"1157\":3,\"1158\":2,\"1160\":2,\"1161\":3,\"1162\":3,\"1181\":6,\"1182\":3,\"1186\":1,\"1187\":11,\"1198\":1,\"1199\":2,\"1200\":2,\"1201\":7,\"1214\":5,\"1215\":2,\"1216\":3,\"1217\":2,\"1218\":2,\"1219\":1,\"1224\":1,\"1225\":2,\"1227\":1,\"1228\":1,\"1229\":1,\"1230\":1,\"1231\":1,\"1273\":2,\"1282\":3,\"1307\":1,\"1354\":1,\"1357\":3,\"1358\":3,\"1366\":1,\"1368\":3,\"1392\":1,\"1393\":1,\"1394\":1,\"1396\":1,\"1397\":1,\"1407\":2,\"1424\":1,\"1428\":1,\"1431\":1,\"1432\":2,\"1446\":1,\"1485\":1,\"1486\":3,\"1488\":1,\"1507\":1,\"1559\":2,\"1576\":2,\"1577\":2,\"1580\":2,\"1581\":2,\"1582\":3,\"1769\":1,\"1772\":11,\"1777\":5,\"1778\":3,\"1785\":4,\"1786\":2,\"1788\":1,\"1789\":5,\"1790\":1,\"1791\":2,\"1792\":6,\"1793\":1,\"1794\":2,\"1795\":3,\"1796\":2,\"1797\":1,\"1799\":3,\"1800\":1,\"1802\":11,\"1803\":5,\"1804\":24,\"1805\":2,\"1806\":2,\"1807\":1,\"1810\":2,\"1814\":1,\"1815\":1,\"1816\":1,\"1817\":2,\"1821\":1,\"1822\":3,\"1824\":6,\"1825\":5,\"1826\":1,\"1828\":2,\"1836\":2,\"1838\":1,\"1849\":2,\"1861\":1,\"1864\":1,\"1878\":1,\"1879\":4,\"1888\":1,\"1889\":2,\"1890\":5,\"1891\":1,\"1892\":1,\"1893\":2,\"1894\":1,\"1895\":1,\"1896\":4,\"1897\":12,\"1906\":2,\"1909\":1,\"1910\":1,\"1912\":1,\"1913\":3,\"1914\":4,\"1917\":2,\"1918\":2,\"1920\":1,\"1921\":1,\"1923\":5,\"1924\":1,\"1925\":3,\"1927\":1,\"1928\":1,\"1930\":1,\"1931\":2,\"1932\":3,\"1936\":1,\"1937\":3,\"1938\":2,\"1944\":3,\"1948\":5,\"1950\":1,\"1951\":3,\"1954\":9,\"1955\":2,\"1956\":1,\"1965\":1,\"1966\":1,\"1968\":1,\"1969\":1,\"1974\":3,\"1975\":1,\"1976\":1,\"1977\":6,\"1978\":7,\"1979\":9,\"1984\":2,\"1985\":2,\"1986\":1,\"1987\":3,\"1990\":1,\"1991\":3,\"1992\":3,\"1993\":6,\"1998\":4,\"2000\":1,\"2001\":2,\"2002\":2,\"2015\":5,\"2016\":4,\"2018\":2,\"2019\":4,\"2020\":5,\"2021\":2,\"2028\":2,\"2029\":3,\"2041\":22,\"2042\":8,\"2043\":3,\"2045\":1,\"2046\":21,\"2047\":5,\"2049\":1,\"2050\":6,\"2053\":2,\"2054\":1,\"2055\":1,\"2057\":4,\"2058\":10,\"2060\":5,\"2061\":8,\"2065\":4,\"2070\":1,\"2072\":1,\"2073\":1,\"2074\":1,\"2075\":5,\"2076\":1,\"2084\":1}}],[\"futures\",{\"1\":{\"408\":1}}],[\"future\",{\"1\":{\"259\":1,\"408\":2}}],[\"furnished\",{\"1\":{\"156\":1}}],[\"failure\",{\"1\":{\"2084\":4}}],[\"fallback>\",{\"1\":{\"1516\":1}}],[\"fallback\",{\"1\":{\"1468\":1,\"1516\":1,\"2027\":2}}],[\"false无效\",{\"1\":{\"1156\":1}}],[\"false都有效\",{\"1\":{\"1156\":1}}],[\"false\",{\"1\":{\"142\":1,\"317\":1,\"355\":1,\"397\":2,\"398\":4,\"424\":2,\"461\":2,\"482\":2,\"680\":2,\"683\":1,\"716\":1,\"759\":2,\"765\":1,\"772\":3,\"773\":1,\"794\":1,\"795\":4,\"796\":6,\"801\":2,\"806\":1,\"808\":6,\"809\":6,\"810\":9,\"812\":6,\"813\":10,\"814\":1,\"815\":1,\"830\":1,\"856\":3,\"857\":2,\"862\":1,\"889\":3,\"895\":2,\"903\":2,\"905\":1,\"910\":1,\"912\":3,\"913\":1,\"917\":1,\"918\":11,\"919\":2,\"920\":2,\"923\":1,\"925\":2,\"945\":10,\"965\":1,\"970\":1,\"971\":1,\"972\":2,\"976\":2,\"980\":1,\"983\":5,\"995\":2,\"1036\":1,\"1059\":3,\"1065\":2,\"1067\":1,\"1088\":1,\"1104\":2,\"1121\":2,\"1123\":3,\"1132\":1,\"1145\":5,\"1146\":2,\"1152\":2,\"1153\":1,\"1154\":2,\"1156\":7,\"1157\":2,\"1160\":2,\"1161\":5,\"1162\":2,\"1186\":3,\"1205\":2,\"1213\":4,\"1225\":4,\"1265\":1,\"1274\":14,\"1286\":1,\"1353\":1,\"1357\":1,\"1358\":1,\"1368\":3,\"1385\":2,\"1427\":1,\"1497\":1,\"1515\":1,\"1582\":2,\"1659\":1,\"1677\":1,\"1777\":1,\"1788\":6,\"1789\":2,\"1790\":1,\"1792\":1,\"1794\":8,\"1795\":4,\"1797\":5,\"1799\":1,\"1800\":4,\"1802\":1,\"1803\":2,\"1804\":2,\"1806\":1,\"1822\":2,\"1862\":1,\"1890\":1,\"1896\":5,\"1897\":2,\"1909\":2,\"1913\":2,\"1914\":6,\"1917\":2,\"1918\":2,\"1920\":2,\"1921\":2,\"1923\":7,\"1924\":2,\"1925\":2,\"1927\":2,\"1928\":2,\"1948\":1,\"1954\":4,\"1955\":1,\"1962\":3,\"1969\":1,\"1986\":2,\"1987\":2,\"1991\":2,\"1992\":4,\"1993\":5,\"2027\":1,\"2029\":4,\"2047\":4,\"2058\":7,\"2063\":3,\"2065\":1,\"2067\":1,\"2075\":4}}],[\"fadetoggle\",{\"0\":{\"1223\":1},\"1\":{\"1220\":1,\"1223\":1}}],[\"fadeto\",{\"0\":{\"1223\":1},\"1\":{\"1220\":1,\"1223\":1}}],[\"fadeout\",{\"0\":{\"1223\":1},\"1\":{\"1220\":1,\"1223\":1}}],[\"fadein\",{\"0\":{\"1223\":1},\"1\":{\"1220\":1,\"1223\":1}}],[\"father\",{\"1\":{\"1155\":4}}],[\"fatherclassname2\",{\"1\":{\"405\":1}}],[\"fatherclassname\",{\"1\":{\"405\":2}}],[\"fat\",{\"1\":{\"925\":8}}],[\"favou\",{\"1\":{\"906\":1}}],[\"favour\",{\"1\":{\"906\":1}}],[\"favor\",{\"1\":{\"906\":1}}],[\"favicon\",{\"1\":{\"282\":1,\"1427\":1}}],[\"farthest\",{\"1\":{\"636\":3}}],[\"fab\",{\"1\":{\"623\":2}}],[\"fast\",{\"1\":{\"1221\":1}}],[\"fasle\",{\"1\":{\"794\":1,\"918\":1}}],[\"fas\",{\"1\":{\"623\":3}}],[\"face的形式来对字体进行引入\",{\"1\":{\"622\":1}}],[\"face\",{\"1\":{\"621\":1,\"623\":1}}],[\"face指定的字体提供给用户使用\",{\"1\":{\"621\":1}}],[\"facebook\",{\"1\":{\"84\":1,\"895\":1}}],[\"fa\",{\"1\":{\"143\":8,\"623\":4,\"903\":2}}],[\"family\",{\"1\":{\"138\":1,\"621\":4,\"623\":4,\"831\":4,\"832\":2,\"1275\":1}}],[\"fri\",{\"1\":{\"877\":2}}],[\"frameborder\",{\"1\":{\"667\":1}}],[\"frameborder=\",{\"1\":{\"667\":1}}],[\"fragment类型\",{\"1\":{\"1951\":1}}],[\"fragment\",{\"0\":{\"1514\":1},\"1\":{\"480\":3,\"1480\":1,\"1951\":4}}],[\"frozenset\",{\"1\":{\"392\":1}}],[\"frozen\",{\"1\":{\"377\":1,\"1807\":1}}],[\"frontend\",{\"1\":{\"218\":1}}],[\"fromstate\",{\"1\":{\"2034\":3,\"2061\":7}}],[\"fromroute\",{\"1\":{\"2029\":4}}],[\"fromentries\",{\"0\":{\"1057\":1},\"1\":{\"1057\":2,\"1058\":1}}],[\"fromcharcode\",{\"1\":{\"888\":1}}],[\"from可以将两类对象转为真正的数组\",{\"1\":{\"841\":1}}],[\"from表示动画的开始位置\",{\"1\":{\"643\":1}}],[\"from\",{\"0\":{\"445\":1},\"1\":{\"8\":1,\"50\":4,\"52\":2,\"124\":3,\"138\":3,\"156\":1,\"378\":3,\"402\":1,\"445\":1,\"455\":1,\"643\":1,\"644\":4,\"841\":2,\"864\":1,\"871\":1,\"1285\":4,\"1305\":1,\"1427\":2,\"1431\":2,\"1439\":1,\"1450\":3,\"1451\":2,\"1456\":3,\"1467\":8,\"1484\":3,\"1486\":1,\"1493\":2,\"1496\":1,\"1499\":4,\"1507\":1,\"1516\":1,\"1519\":2,\"1655\":4,\"1675\":1,\"1803\":1,\"1807\":1,\"1877\":1,\"2010\":3,\"2012\":1,\"2013\":1,\"2016\":1,\"2019\":2,\"2025\":4,\"2034\":3,\"2040\":1,\"2041\":2,\"2043\":1,\"2047\":6,\"2061\":8,\"2069\":12,\"2072\":5,\"2073\":9,\"2074\":6,\"2075\":7,\"2078\":2,\"2079\":1,\"2080\":2,\"2081\":2,\"2082\":1,\"2083\":1,\"2084\":4}}],[\"free\",{\"1\":{\"64\":1,\"156\":1,\"338\":1,\"623\":2}}],[\"fs模块\",{\"1\":{\"262\":1,\"263\":4}}],[\"fs模块对文件的几乎所有操作都有同步和异步两种形式\",{\"1\":{\"242\":1}}],[\"fs文件系统\",{\"0\":{\"242\":1}}],[\"fs\",{\"1\":{\"35\":3,\"155\":6,\"239\":1,\"242\":1,\"244\":4,\"245\":3,\"246\":4,\"247\":2,\"250\":4,\"251\":3,\"252\":2,\"254\":4,\"255\":7,\"257\":5,\"258\":4,\"259\":8,\"260\":4,\"261\":1,\"262\":2,\"263\":12,\"264\":3,\"287\":5,\"294\":4}}],[\"fibonacci\",{\"1\":{\"1182\":4}}],[\"five\",{\"1\":{\"1148\":2}}],[\"figure\",{\"1\":{\"1803\":1}}],[\"figure>\",{\"1\":{\"666\":1}}],[\"figcaption>\",{\"1\":{\"666\":1}}],[\"fire\",{\"1\":{\"2029\":1}}],[\"firefox\",{\"1\":{\"24\":1,\"752\":1,\"771\":1,\"956\":1,\"1029\":1,\"1091\":1,\"1098\":11,\"1139\":1,\"1140\":1,\"1153\":2,\"1156\":1,\"1161\":2}}],[\"firfox\",{\"1\":{\"1160\":1}}],[\"firstpersonname\",{\"1\":{\"1454\":1}}],[\"firstname\",{\"1\":{\"1376\":3,\"1496\":3,\"1825\":2}}],[\"firstchild\",{\"1\":{\"1112\":5,\"1205\":1,\"1962\":2}}],[\"firstupper\",{\"1\":{\"1040\":1}}],[\"first\",{\"1\":{\"520\":2,\"521\":2,\"1040\":1,\"1120\":1,\"1203\":1,\"1204\":1,\"1261\":1,\"1794\":2}}],[\"finalizenavigation\",{\"1\":{\"2041\":1,\"2046\":1}}],[\"finaldata\",{\"1\":{\"1897\":1,\"1987\":1}}],[\"finally\",{\"1\":{\"499\":1,\"1777\":1,\"1804\":1,\"1954\":1}}],[\"finally不管异常发生与否都会执行\",{\"1\":{\"403\":1}}],[\"finishcomponentsetup\",{\"1\":{\"2001\":1}}],[\"finish\",{\"1\":{\"1220\":1,\"1225\":4}}],[\"findindex\",{\"1\":{\"1915\":1,\"1966\":1,\"2065\":3}}],[\"findidxinold\",{\"1\":{\"1789\":1}}],[\"find2\",{\"1\":{\"487\":2}}],[\"find1\",{\"1\":{\"487\":2}}],[\"find0\",{\"1\":{\"487\":2}}],[\"findtest\",{\"1\":{\"487\":8}}],[\"finds\",{\"1\":{\"486\":4}}],[\"findbyid\",{\"1\":{\"203\":1}}],[\"findone\",{\"1\":{\"203\":1}}],[\"find\",{\"1\":{\"59\":1,\"181\":1,\"203\":2,\"205\":2,\"206\":4,\"207\":3,\"209\":2,\"210\":1,\"211\":1,\"1204\":1,\"1232\":5,\"1794\":1,\"1915\":1,\"1962\":7,\"2073\":2}}],[\"filperons\",{\"1\":{\"1393\":2,\"1395\":1}}],[\"filler\",{\"1\":{\"1338\":2}}],[\"filltext\",{\"1\":{\"729\":1,\"732\":1}}],[\"fillstyle\",{\"1\":{\"708\":1,\"711\":1,\"725\":1,\"726\":1}}],[\"fillrect\",{\"1\":{\"706\":1,\"725\":1,\"726\":1}}],[\"fill\",{\"1\":{\"417\":1,\"418\":1,\"419\":1,\"644\":1,\"711\":2,\"713\":1,\"1915\":1,\"1969\":1}}],[\"filter2\",{\"1\":{\"1794\":3}}],[\"filter1\",{\"1\":{\"1794\":3}}],[\"filters\",{\"1\":{\"1397\":2,\"1794\":7,\"1828\":1}}],[\"filter\",{\"0\":{\"440\":1,\"457\":1,\"1828\":1},\"1\":{\"402\":6,\"457\":1,\"857\":2,\"945\":3,\"947\":2,\"1033\":1,\"1204\":1,\"1232\":1,\"1393\":2,\"1395\":1,\"1397\":2,\"1432\":1,\"1519\":1,\"1794\":1,\"1797\":1,\"1825\":1,\"1828\":1}}],[\"filereader\",{\"1\":{\"771\":1,\"772\":1,\"773\":8}}],[\"filelist\",{\"1\":{\"771\":1,\"772\":6,\"773\":1}}],[\"files`\",{\"1\":{\"177\":1}}],[\"files\",{\"0\":{\"1319\":1},\"1\":{\"156\":1,\"261\":1,\"263\":2,\"772\":18,\"773\":9,\"2050\":1}}],[\"filepath\",{\"1\":{\"155\":4,\"294\":2}}],[\"filename\",{\"1\":{\"37\":4,\"124\":2,\"128\":1,\"142\":2,\"143\":1,\"155\":10,\"159\":2,\"239\":2,\"264\":2,\"1674\":2}}],[\"file>\",{\"1\":{\"17\":1}}],[\"file\",{\"1\":{\"15\":1,\"142\":5,\"159\":1,\"239\":2,\"242\":1,\"244\":2,\"245\":1,\"246\":2,\"390\":1,\"402\":5,\"403\":1,\"404\":6,\"405\":18,\"408\":4,\"659\":1,\"771\":5,\"772\":9,\"773\":7,\"1093\":1,\"1203\":1,\"1655\":4},\"2\":{\"775\":1}}],[\"field\",{\"1\":{\"176\":1}}],[\"fitness\",{\"1\":{\"156\":1}}],[\"fis\",{\"1\":{\"119\":1}}],[\"fixed\",{\"1\":{\"568\":1,\"572\":1,\"634\":2,\"1153\":1}}],[\"fix\",{\"1\":{\"17\":1}}],[\"fe\",{\"1\":{\"1768\":2}}],[\"female\",{\"1\":{\"831\":2,\"832\":2,\"1357\":1}}],[\"features被设置为\",{\"1\":{\"1665\":1}}],[\"features\",{\"1\":{\"1665\":1}}],[\"features=3\",{\"1\":{\"1665\":1}}],[\"features=10\",{\"1\":{\"1661\":1}}],[\"features=64\",{\"1\":{\"1661\":1}}],[\"feature\",{\"1\":{\"17\":7,\"1665\":4}}],[\"fetch它会从远程仓库下载所有代码\",{\"1\":{\"13\":1}}],[\"fetch\",{\"0\":{\"1587\":1},\"1\":{\"13\":1,\"134\":1,\"499\":1,\"1181\":1,\"1558\":1,\"1572\":1,\"1587\":4,\"1609\":4,\"1612\":2,\"1897\":1,\"1987\":1}}],[\"focusout\",{\"1\":{\"1214\":1}}],[\"focusin\",{\"1\":{\"1214\":1}}],[\"focus\",{\"1\":{\"1214\":1,\"1216\":2,\"1218\":1,\"1407\":2,\"1499\":1,\"1518\":2}}],[\"four\",{\"1\":{\"1148\":2}}],[\"found`\",{\"1\":{\"1803\":1}}],[\"found<\",{\"1\":{\"285\":1,\"294\":2,\"304\":1,\"2050\":1}}],[\"found\",{\"1\":{\"271\":1,\"1315\":1,\"1635\":2,\"1805\":1,\"2058\":1,\"2104\":1}}],[\"following\",{\"1\":{\"156\":1}}],[\"folders\",{\"1\":{\"15\":2}}],[\"fontawesome\",{\"0\":{\"623\":1},\"1\":{\"623\":1}}],[\"fontsize\",{\"1\":{\"1206\":1,\"1386\":1}}],[\"fontsmoothingenabled\",{\"1\":{\"1098\":1}}],[\"fonts\",{\"1\":{\"143\":1}}],[\"font\",{\"1\":{\"138\":1,\"143\":5,\"621\":15,\"623\":11,\"730\":3,\"732\":1,\"1224\":1,\"1249\":2,\"1250\":1,\"1255\":1,\"1259\":1,\"1260\":1,\"1269\":4,\"1275\":5,\"1288\":4,\"1289\":10,\"1290\":12,\"1297\":2,\"1306\":2,\"1309\":2,\"1313\":3,\"1315\":3,\"1317\":4,\"1319\":2,\"1328\":1,\"1331\":2}}],[\"foo++\",{\"1\":{\"1897\":1,\"1902\":1}}],[\"foo++这种操作\",{\"1\":{\"1892\":1}}],[\"fooexecutioncontext\",{\"1\":{\"1015\":3}}],[\"food\",{\"1\":{\"830\":4,\"1023\":6}}],[\"footer元素代表网页或section\",{\"1\":{\"694\":1}}],[\"footer\",{\"1\":{\"694\":1,\"1446\":2,\"1954\":4}}],[\"footer>\",{\"1\":{\"662\":1,\"694\":1,\"1446\":1,\"1954\":2}}],[\"foo\",{\"1\":{\"27\":3,\"28\":5,\"29\":4,\"30\":3,\"35\":6,\"672\":1,\"674\":1,\"681\":3,\"991\":7,\"1015\":15,\"1891\":1,\"1892\":4,\"1893\":1,\"1894\":1,\"1896\":2,\"1897\":3,\"1902\":10,\"1904\":1,\"1905\":1,\"1906\":1,\"1911\":6,\"1929\":2,\"1937\":2,\"1953\":3}}],[\"forgery\",{\"1\":{\"2087\":1}}],[\"forbidden\",{\"1\":{\"1635\":1}}],[\"for的标签元素使用ref\",{\"1\":{\"1428\":1}}],[\"for的值\",{\"1\":{\"1392\":1}}],[\"forprocessed\",{\"1\":{\"1392\":1,\"1796\":1}}],[\"for=\",{\"1\":{\"1392\":3,\"1393\":1,\"1446\":2}}],[\"for指令\",{\"1\":{\"1392\":1,\"1795\":1}}],[\"foreground\",{\"1\":{\"1276\":1}}],[\"foreach\",{\"0\":{\"435\":1,\"1930\":1},\"1\":{\"155\":1,\"263\":1,\"287\":2,\"417\":3,\"418\":3,\"419\":3,\"456\":2,\"472\":1,\"483\":2,\"493\":1,\"494\":1,\"846\":2,\"863\":2,\"945\":2,\"995\":7,\"1199\":1,\"1396\":1,\"1785\":1,\"1803\":1,\"1825\":1,\"1828\":2,\"1878\":1,\"1886\":1,\"1888\":1,\"1889\":2,\"1890\":3,\"1892\":3,\"1893\":2,\"1906\":6,\"1917\":1,\"1918\":2,\"1924\":1,\"1925\":2,\"1926\":6,\"1930\":12,\"1932\":1,\"1948\":1,\"1949\":1,\"1951\":4,\"1954\":2,\"1979\":1,\"1985\":2,\"1990\":1,\"1993\":5,\"2029\":4,\"2034\":1,\"2042\":1,\"2061\":2,\"2069\":1,\"2072\":1,\"2078\":1,\"2080\":1,\"2082\":1,\"2084\":1}}],[\"forward\",{\"1\":{\"1097\":2,\"1300\":1,\"1301\":1,\"1302\":1,\"1309\":10,\"1310\":4,\"1311\":3,\"1312\":1,\"1318\":1,\"1319\":1,\"1320\":2,\"1464\":1,\"1662\":1,\"1669\":1,\"1670\":1,\"1671\":1,\"1673\":1,\"2034\":1,\"2041\":1,\"2049\":1,\"2055\":1,\"2058\":15,\"2061\":3}}],[\"forwards\",{\"1\":{\"644\":3}}],[\"for循环\",{\"1\":{\"401\":2}}],[\"form属性是一个只读属性\",{\"1\":{\"1948\":1}}],[\"formcharcode\",{\"1\":{\"888\":1}}],[\"formnovalidate\",{\"1\":{\"761\":2}}],[\"formal\",{\"1\":{\"933\":1}}],[\"formaction\",{\"1\":{\"758\":1}}],[\"formatcomponentname\",{\"1\":{\"1799\":1}}],[\"formatted\",{\"1\":{\"1792\":1}}],[\"formatting\",{\"0\":{\"564\":1}}],[\"format\",{\"1\":{\"388\":10,\"621\":2,\"1397\":1}}],[\"format格式化\",{\"0\":{\"388\":1}}],[\"forms\",{\"1\":{\"754\":1}}],[\"form\",{\"1\":{\"293\":1,\"295\":2,\"754\":1,\"758\":1,\"1577\":1,\"1592\":1,\"1607\":2,\"1634\":4,\"1948\":1,\"2061\":1}}],[\"form>\",{\"1\":{\"45\":1,\"670\":3,\"1231\":1}}],[\"force\",{\"1\":{\"93\":1,\"331\":1,\"2058\":1}}],[\"for\",{\"0\":{\"821\":1},\"1\":{\"2\":1,\"15\":1,\"155\":1,\"156\":2,\"177\":1,\"218\":1,\"228\":1,\"401\":5,\"402\":2,\"404\":1,\"410\":2,\"411\":2,\"412\":1,\"413\":1,\"414\":1,\"416\":1,\"419\":2,\"469\":1,\"472\":1,\"474\":1,\"478\":1,\"480\":1,\"491\":1,\"498\":1,\"499\":1,\"740\":4,\"756\":1,\"772\":3,\"773\":1,\"821\":5,\"822\":4,\"824\":1,\"828\":8,\"830\":8,\"846\":10,\"863\":4,\"870\":4,\"932\":1,\"1038\":1,\"1040\":1,\"1055\":1,\"1060\":1,\"1120\":1,\"1188\":1,\"1194\":1,\"1239\":2,\"1283\":1,\"1285\":5,\"1286\":1,\"1352\":1,\"1392\":3,\"1404\":1,\"1560\":1,\"1655\":2,\"1659\":1,\"1669\":1,\"1680\":2,\"1778\":1,\"1785\":3,\"1789\":2,\"1791\":1,\"1792\":3,\"1794\":3,\"1795\":8,\"1796\":2,\"1797\":1,\"1802\":3,\"1803\":1,\"1804\":7,\"1814\":1,\"1815\":2,\"1816\":1,\"1822\":1,\"1855\":1,\"1878\":1,\"1890\":1,\"1897\":2,\"1904\":1,\"1915\":2,\"1920\":1,\"1921\":2,\"1926\":1,\"1932\":1,\"1937\":2,\"1948\":1,\"1951\":2,\"1954\":1,\"1955\":3,\"1961\":3,\"1962\":3,\"1966\":2,\"1969\":3,\"1976\":1,\"1977\":6,\"1979\":1,\"1984\":1,\"1989\":1,\"1993\":2,\"2020\":1,\"2031\":1,\"2045\":1,\"2047\":4,\"2061\":1,\"2072\":1,\"2073\":1,\"2074\":4,\"2078\":1,\"2079\":1,\"2080\":1,\"2081\":2,\"2083\":1}}],[\"f\",{\"0\":{\"389\":1},\"1\":{\"8\":1,\"17\":1,\"331\":1,\"384\":1,\"389\":6,\"404\":5,\"466\":3,\"789\":2,\"903\":2,\"904\":2,\"995\":13,\"1021\":2,\"1025\":5,\"1039\":4,\"1072\":3,\"1155\":1,\"1658\":3,\"1663\":4,\"1674\":2,\"1675\":1,\"1680\":4,\"1794\":2,\"1797\":1}}],[\"riding\",{\"1\":{\"2087\":1}}],[\"rightcontext\",{\"1\":{\"924\":2}}],[\"right越大元素越靠左\",{\"1\":{\"569\":1}}],[\"right值以使等式满足\",{\"1\":{\"554\":1}}],[\"right不会产生任何效果\",{\"1\":{\"546\":1}}],[\"right\",{\"1\":{\"414\":8,\"545\":1,\"546\":1,\"553\":6,\"554\":1,\"555\":3,\"560\":1,\"565\":1,\"569\":1,\"573\":5,\"574\":4,\"580\":11,\"582\":7,\"598\":2,\"619\":1,\"623\":1,\"625\":1,\"630\":1,\"636\":3,\"730\":2,\"765\":1,\"1252\":1,\"1257\":2,\"1259\":2,\"1262\":2,\"1284\":3,\"1370\":1,\"1646\":4,\"2053\":1}}],[\"rights\",{\"1\":{\"156\":1}}],[\"rc5\",{\"1\":{\"2099\":1}}],[\"rc\",{\"1\":{\"1753\":2}}],[\"r=x\",{\"1\":{\"1753\":1}}],[\"r=lambda\",{\"1\":{\"402\":1}}],[\"r求出基期\",{\"1\":{\"1726\":1}}],[\"rb​+rc​+rb​rc​\",{\"1\":{\"1728\":1}}],[\"rb\",{\"1\":{\"1674\":1,\"1753\":1}}],[\"r$\",{\"1\":{\"727\":1}}],[\"r2\",{\"1\":{\"726\":2,\"1726\":2,\"1728\":1,\"1753\":2}}],[\"r1​−r2​\",{\"1\":{\"1735\":1,\"1753\":1}}],[\"r1​+r2​+r1​r2​\",{\"1\":{\"1728\":1}}],[\"r1\",{\"1\":{\"726\":2,\"1726\":2,\"1728\":1,\"1753\":2}}],[\"rt\",{\"1\":{\"698\":1}}],[\"rl\",{\"1\":{\"546\":1}}],[\"rlock\",{\"1\":{\"408\":1}}],[\"rgba\",{\"1\":{\"535\":1,\"613\":1,\"725\":1,\"737\":1,\"1260\":2,\"1266\":4,\"1282\":1,\"1307\":1}}],[\"rgb\",{\"1\":{\"535\":5,\"1266\":3}}],[\"rabin\",{\"1\":{\"2100\":1}}],[\"rabbit320\",{\"1\":{\"747\":3}}],[\"ratechange\",{\"1\":{\"752\":1}}],[\"radio\",{\"1\":{\"670\":1,\"756\":1,\"1203\":1,\"1357\":3,\"1358\":1}}],[\"radial\",{\"1\":{\"636\":2}}],[\"radius这样的长名称\",{\"1\":{\"1302\":1}}],[\"radius\",{\"1\":{\"612\":4,\"716\":3,\"717\":1,\"1260\":5,\"1274\":1,\"1292\":3,\"1293\":3,\"1294\":4,\"1295\":5,\"1307\":8}}],[\"radixsort\",{\"1\":{\"419\":1}}],[\"randint\",{\"1\":{\"1655\":2}}],[\"randn\",{\"1\":{\"1655\":2,\"1662\":1,\"1663\":2,\"1665\":1,\"1667\":2}}],[\"rand\",{\"1\":{\"883\":2}}],[\"randomnum\",{\"1\":{\"883\":4}}],[\"random\",{\"1\":{\"480\":1,\"740\":2,\"883\":5}}],[\"rangesetitem\",{\"1\":{\"1368\":1}}],[\"rangeoverflow\",{\"1\":{\"760\":1}}],[\"rangeunderflow\",{\"1\":{\"760\":1}}],[\"rangebinary\",{\"1\":{\"501\":2}}],[\"range\",{\"1\":{\"401\":2,\"402\":2,\"501\":2,\"757\":1,\"760\":3,\"1357\":2,\"1368\":1,\"1680\":1}}],[\"raise\",{\"1\":{\"403\":1}}],[\"rawcomponent\",{\"1\":{\"2074\":2}}],[\"rawlocation\",{\"1\":{\"2065\":2}}],[\"raw访问原始数据\",{\"1\":{\"1990\":1}}],[\"rawvalue\",{\"1\":{\"1929\":2}}],[\"rawtokens\",{\"1\":{\"1793\":5}}],[\"rawattrsmap\",{\"1\":{\"1791\":1}}],[\"rawname\",{\"1\":{\"1357\":1,\"1407\":5}}],[\"raw\",{\"1\":{\"142\":3,\"156\":1,\"384\":1,\"666\":1,\"1788\":1,\"1910\":6,\"1912\":1,\"1913\":1,\"1914\":3,\"1917\":1,\"1918\":1,\"1921\":1,\"1923\":3,\"1924\":2,\"1928\":5,\"1929\":8,\"1930\":3,\"1931\":3,\"1932\":2,\"1990\":4,\"1991\":1,\"1993\":4}}],[\"rjust\",{\"1\":{\"386\":5}}],[\"rfc7231\",{\"1\":{\"1632\":1}}],[\"rfc\",{\"1\":{\"363\":1,\"1475\":1}}],[\"rsa\",{\"1\":{\"363\":1,\"2100\":1}}],[\"rs\",{\"1\":{\"252\":3,\"263\":3}}],[\"rpc\",{\"1\":{\"218\":2}}],[\"rose\",{\"1\":{\"1493\":1}}],[\"robin\",{\"1\":{\"895\":1}}],[\"robomongo\",{\"1\":{\"213\":1}}],[\"robo\",{\"1\":{\"213\":1}}],[\"roboto\",{\"1\":{\"138\":1,\"1265\":1,\"1275\":1}}],[\"round\",{\"1\":{\"708\":2,\"874\":1,\"882\":2}}],[\"routeprops\",{\"1\":{\"2070\":2}}],[\"routepropsoption\",{\"1\":{\"2070\":6}}],[\"routeparams\",{\"1\":{\"2045\":2}}],[\"routeparamsraw\",{\"1\":{\"2045\":1}}],[\"routetodisplay\",{\"1\":{\"2068\":6,\"2070\":1}}],[\"routematched\",{\"1\":{\"2065\":7}}],[\"routelocationraw\",{\"1\":{\"2075\":2}}],[\"routelocationmatched\",{\"1\":{\"2068\":1}}],[\"routelocationkey\",{\"1\":{\"2047\":3,\"2065\":2}}],[\"routelocationnormalized\",{\"1\":{\"2047\":3,\"2072\":1,\"2073\":1,\"2074\":1,\"2075\":3}}],[\"routelocationnormalizedloaded\",{\"1\":{\"2044\":1,\"2047\":5,\"2072\":1,\"2073\":1,\"2074\":1,\"2075\":3,\"2084\":3}}],[\"routelocation\",{\"1\":{\"2041\":1}}],[\"route\",{\"1\":{\"1455\":1,\"1462\":3,\"2026\":4,\"2028\":2,\"2029\":33,\"2031\":6,\"2032\":1,\"2034\":4,\"2042\":2,\"2050\":4,\"2065\":8,\"2066\":1,\"2068\":3,\"2070\":7}}],[\"routes\",{\"1\":{\"321\":1,\"332\":2,\"1456\":1,\"1458\":1,\"2025\":2,\"2027\":1,\"2028\":7,\"2041\":1,\"2042\":7,\"2047\":2}}],[\"routerkey\",{\"1\":{\"2047\":3,\"2065\":2,\"2066\":1}}],[\"routermatcher\",{\"1\":{\"2042\":1}}],[\"routerhistory\",{\"1\":{\"2041\":1,\"2047\":5,\"2053\":9,\"2055\":11,\"2060\":1}}],[\"routeroptions\",{\"1\":{\"2041\":3}}],[\"routerviewimpl\",{\"1\":{\"2067\":2}}],[\"routerviewlocationkey\",{\"1\":{\"2047\":2,\"2068\":4}}],[\"routerview\",{\"0\":{\"2067\":1},\"1\":{\"2040\":1,\"2047\":6,\"2067\":2}}],[\"routerlinki\",{\"1\":{\"2062\":1}}],[\"routerlinkimpl\",{\"1\":{\"2062\":6}}],[\"routerlink\",{\"0\":{\"2062\":1},\"1\":{\"2040\":1,\"2047\":6,\"2062\":4,\"2064\":2}}],[\"router源码\",{\"1\":{\"2040\":1}}],[\"router4\",{\"1\":{\"2034\":1}}],[\"router3\",{\"1\":{\"2034\":1}}],[\"routerecordnormalized\",{\"1\":{\"2073\":3,\"2074\":1,\"2075\":2}}],[\"routerecord\",{\"1\":{\"2031\":1,\"2065\":2}}],[\"routerroot\",{\"1\":{\"2026\":5,\"2031\":1}}],[\"router\",{\"0\":{\"318\":1,\"319\":1,\"320\":1,\"321\":1,\"2024\":1,\"2031\":1,\"2032\":1,\"2038\":1,\"2047\":1},\"1\":{\"319\":1,\"321\":6,\"1455\":1,\"1456\":8,\"1457\":1,\"1458\":1,\"1459\":2,\"1460\":3,\"1461\":2,\"1463\":1,\"1465\":2,\"1467\":2,\"2016\":1,\"2024\":1,\"2025\":3,\"2026\":10,\"2028\":2,\"2029\":13,\"2030\":2,\"2031\":5,\"2032\":3,\"2034\":2,\"2038\":2,\"2040\":10,\"2041\":14,\"2043\":3,\"2044\":1,\"2046\":1,\"2047\":39,\"2052\":1,\"2055\":3,\"2061\":1,\"2062\":4,\"2065\":12,\"2066\":2,\"2068\":16,\"2070\":2,\"2071\":4,\"2072\":1}}],[\"roman\",{\"1\":{\"621\":1}}],[\"rotatez\",{\"1\":{\"617\":1}}],[\"rotatex\",{\"1\":{\"617\":1}}],[\"rotatey\",{\"1\":{\"617\":2}}],[\"rotate\",{\"0\":{\"617\":1},\"1\":{\"720\":2}}],[\"rowspan=\",{\"1\":{\"669\":1}}],[\"row\",{\"1\":{\"176\":1,\"586\":3,\"587\":1,\"916\":5}}],[\"rootcontainer\",{\"1\":{\"1998\":2}}],[\"rootcomponent\",{\"1\":{\"1998\":3}}],[\"root>p\",{\"1\":{\"1205\":1}}],[\"rootdir\",{\"1\":{\"294\":2}}],[\"root\",{\"1\":{\"73\":1,\"264\":1,\"520\":1,\"548\":2,\"564\":1,\"1198\":4,\"1199\":1,\"1205\":5,\"1206\":3,\"1208\":8,\"1209\":3,\"1210\":2,\"1211\":3,\"1217\":1,\"1230\":1,\"1232\":7,\"1234\":3,\"1237\":1,\"1238\":1,\"1239\":3,\"1350\":2,\"1356\":1,\"1360\":1,\"1393\":2,\"1397\":1,\"1401\":1,\"1416\":1,\"1655\":6,\"1656\":2,\"1786\":2,\"1791\":1,\"1804\":1,\"1974\":7,\"1976\":1,\"1978\":2,\"2002\":1}}],[\"rules\",{\"1\":{\"138\":1,\"142\":3,\"143\":1,\"149\":1,\"156\":1,\"1314\":1}}],[\"rubygems\",{\"1\":{\"94\":1}}],[\"ruby\",{\"1\":{\"94\":1,\"698\":1,\"1247\":1,\"1248\":2}}],[\"runguardqueue\",{\"0\":{\"2076\":1},\"1\":{\"2072\":1,\"2076\":1,\"2078\":1,\"2079\":1,\"2080\":1,\"2081\":1,\"2082\":1,\"2083\":1}}],[\"runwithcontext\",{\"1\":{\"2041\":1,\"2046\":1,\"2076\":1,\"2084\":1}}],[\"runqueue\",{\"1\":{\"2029\":3}}],[\"runone\",{\"1\":{\"1777\":3}}],[\"runoob\",{\"1\":{\"389\":6}}],[\"runmicrotask\",{\"1\":{\"1777\":2}}],[\"running\",{\"1\":{\"1665\":1}}],[\"runcount++\",{\"1\":{\"498\":1}}],[\"runcount\",{\"1\":{\"498\":3}}],[\"runtime\",{\"1\":{\"117\":2,\"222\":1,\"1027\":1,\"1427\":3,\"1786\":1}}],[\"run\",{\"1\":{\"77\":4,\"87\":1,\"124\":1,\"128\":1,\"129\":1,\"138\":2,\"148\":4,\"149\":2,\"150\":1,\"154\":1,\"155\":1,\"408\":2,\"836\":2,\"1426\":1,\"1482\":1,\"1483\":1,\"1777\":3,\"1855\":1}}],[\"ruanyifeng\",{\"1\":{\"64\":1,\"339\":1,\"368\":1,\"958\":1}}],[\"r\",{\"1\":{\"76\":1,\"82\":1,\"173\":1,\"246\":1,\"247\":4,\"384\":5,\"401\":3,\"737\":1,\"902\":1,\"904\":2,\"905\":4,\"906\":2,\"1722\":3,\"1723\":7,\"1725\":1,\"1726\":1,\"1729\":2,\"1738\":2,\"1742\":1,\"1753\":1,\"1956\":2}}],[\"rn\",{\"1\":{\"25\":1}}],[\"ryan\",{\"1\":{\"24\":2}}],[\"reusability\",{\"1\":{\"2047\":1}}],[\"ret\",{\"1\":{\"1937\":3,\"2020\":2}}],[\"returnstatement\",{\"1\":{\"1975\":1,\"1978\":1,\"1979\":1}}],[\"returnvalue\",{\"1\":{\"1156\":3}}],[\"return\",{\"0\":{\"2070\":1},\"1\":{\"37\":2,\"41\":3,\"44\":1,\"149\":1,\"155\":7,\"156\":2,\"205\":1,\"206\":2,\"207\":2,\"212\":1,\"239\":2,\"255\":1,\"259\":2,\"355\":1,\"368\":1,\"402\":1,\"410\":2,\"411\":2,\"412\":2,\"413\":2,\"414\":3,\"415\":2,\"416\":2,\"417\":2,\"418\":3,\"419\":2,\"421\":1,\"424\":3,\"428\":1,\"430\":1,\"432\":3,\"436\":1,\"438\":1,\"439\":1,\"441\":1,\"443\":1,\"450\":2,\"451\":2,\"452\":1,\"453\":1,\"455\":1,\"456\":2,\"457\":2,\"458\":2,\"460\":1,\"461\":2,\"463\":3,\"464\":3,\"469\":1,\"472\":2,\"474\":1,\"476\":1,\"482\":3,\"483\":2,\"486\":3,\"487\":5,\"488\":4,\"491\":2,\"493\":1,\"494\":1,\"498\":1,\"499\":2,\"501\":2,\"740\":1,\"773\":1,\"835\":2,\"855\":7,\"883\":1,\"917\":1,\"935\":4,\"942\":2,\"944\":1,\"945\":8,\"946\":3,\"953\":6,\"957\":2,\"967\":2,\"978\":1,\"992\":6,\"995\":6,\"1015\":4,\"1023\":1,\"1025\":6,\"1028\":1,\"1035\":1,\"1036\":2,\"1038\":2,\"1039\":4,\"1040\":5,\"1047\":2,\"1121\":2,\"1156\":2,\"1160\":2,\"1161\":3,\"1162\":2,\"1182\":1,\"1187\":7,\"1201\":2,\"1282\":1,\"1307\":1,\"1354\":1,\"1357\":1,\"1358\":1,\"1361\":1,\"1364\":1,\"1365\":1,\"1368\":3,\"1370\":2,\"1376\":2,\"1388\":1,\"1392\":2,\"1393\":2,\"1394\":1,\"1395\":3,\"1396\":1,\"1397\":2,\"1407\":2,\"1415\":1,\"1422\":1,\"1428\":1,\"1430\":1,\"1431\":1,\"1446\":2,\"1452\":1,\"1453\":1,\"1454\":1,\"1462\":1,\"1486\":4,\"1488\":1,\"1491\":3,\"1493\":1,\"1496\":2,\"1507\":4,\"1508\":1,\"1587\":2,\"1655\":2,\"1663\":1,\"1669\":1,\"1670\":1,\"1671\":1,\"1673\":1,\"1769\":3,\"1772\":7,\"1777\":12,\"1778\":1,\"1779\":4,\"1785\":2,\"1786\":9,\"1788\":1,\"1789\":3,\"1790\":1,\"1791\":2,\"1792\":2,\"1793\":2,\"1794\":1,\"1795\":5,\"1796\":9,\"1797\":1,\"1802\":2,\"1803\":1,\"1804\":8,\"1805\":3,\"1806\":2,\"1807\":1,\"1810\":2,\"1814\":1,\"1815\":1,\"1816\":5,\"1817\":1,\"1822\":1,\"1824\":2,\"1825\":3,\"1826\":1,\"1827\":2,\"1828\":2,\"1835\":1,\"1836\":1,\"1838\":1,\"1849\":2,\"1877\":1,\"1879\":2,\"1880\":1,\"1886\":2,\"1888\":2,\"1889\":8,\"1890\":2,\"1892\":1,\"1893\":1,\"1894\":1,\"1895\":2,\"1896\":8,\"1897\":2,\"1902\":3,\"1905\":1,\"1906\":4,\"1907\":1,\"1909\":2,\"1910\":4,\"1912\":4,\"1913\":7,\"1914\":16,\"1917\":3,\"1918\":3,\"1920\":2,\"1921\":5,\"1923\":11,\"1924\":1,\"1925\":4,\"1927\":7,\"1928\":7,\"1929\":1,\"1931\":8,\"1932\":6,\"1936\":1,\"1937\":6,\"1938\":8,\"1944\":1,\"1946\":1,\"1948\":3,\"1949\":1,\"1953\":6,\"1954\":6,\"1955\":3,\"1956\":5,\"1974\":3,\"1975\":3,\"1977\":3,\"1978\":10,\"1979\":4,\"1984\":2,\"1985\":4,\"1986\":2,\"1990\":5,\"1991\":7,\"1992\":6,\"1993\":14,\"1998\":5,\"2012\":3,\"2015\":4,\"2016\":3,\"2018\":1,\"2019\":9,\"2020\":3,\"2021\":3,\"2026\":2,\"2028\":2,\"2029\":2,\"2031\":1,\"2034\":2,\"2041\":1,\"2042\":1,\"2043\":2,\"2045\":1,\"2047\":2,\"2053\":1,\"2054\":1,\"2055\":1,\"2057\":1,\"2058\":6,\"2060\":1,\"2061\":5,\"2065\":12,\"2066\":2,\"2067\":2,\"2068\":1,\"2070\":4,\"2072\":1,\"2073\":1,\"2074\":2,\"2075\":1,\"2076\":1,\"2079\":1,\"2080\":1,\"2081\":1,\"2082\":1,\"2083\":1}}],[\"ref<componentpublicinstance>\",{\"1\":{\"2068\":1}}],[\"refelm\",{\"1\":{\"1789\":7}}],[\"referer\",{\"1\":{\"2088\":3}}],[\"reference\",{\"1\":{\"912\":1,\"958\":1,\"1487\":1,\"1491\":2,\"1804\":1,\"1807\":3}}],[\"referenceerror\",{\"1\":{\"783\":1,\"786\":1,\"798\":1,\"808\":1,\"809\":1,\"938\":1,\"939\":2,\"940\":1,\"948\":1,\"958\":1}}],[\"referrer\",{\"1\":{\"1572\":1}}],[\"reflow\",{\"0\":{\"1527\":1},\"1\":{\"1527\":3,\"1528\":1,\"1530\":1}}],[\"reflect对象的方法与proxy对象的方法一一对应\",{\"1\":{\"1901\":1}}],[\"reflect\",{\"0\":{\"1901\":1},\"1\":{\"472\":1,\"830\":1,\"1491\":7,\"1492\":1,\"1803\":1,\"1902\":2,\"1905\":1,\"1906\":4,\"1907\":2,\"1909\":1,\"1910\":2,\"1911\":1,\"1912\":1,\"1913\":1,\"1914\":4,\"1917\":1,\"1918\":1,\"1920\":1,\"1921\":1,\"1923\":2,\"1927\":4,\"1928\":1,\"1938\":3,\"1985\":2,\"1990\":3,\"1991\":1,\"1993\":4}}],[\"refs\",{\"1\":{\"1428\":10}}],[\"refinfor\",{\"1\":{\"1428\":2}}],[\"ref=\",{\"1\":{\"1428\":2,\"1437\":1,\"1499\":3}}],[\"ref被用来给元素或子组件注册引用信息\",{\"1\":{\"1428\":1}}],[\"ref\",{\"0\":{\"1428\":1,\"1487\":1,\"1492\":1,\"1499\":1,\"1936\":1,\"1938\":1},\"1\":{\"1428\":21,\"1480\":1,\"1487\":2,\"1492\":4,\"1493\":3,\"1499\":14,\"1502\":2,\"1507\":3,\"1509\":1,\"1936\":4,\"1938\":10,\"1943\":1,\"1953\":1,\"2001\":1,\"2002\":1,\"2019\":1,\"2020\":1,\"2044\":4,\"2047\":4,\"2070\":2}}],[\"reverse\",{\"1\":{\"586\":2,\"587\":2,\"644\":3,\"855\":4,\"1396\":1,\"1785\":1,\"2072\":1,\"2074\":1,\"2078\":1}}],[\"re\",{\"1\":{\"395\":2,\"408\":1,\"1803\":1,\"1804\":1,\"2054\":2}}],[\"repalcestate\",{\"1\":{\"2050\":2,\"2058\":3}}],[\"repalce\",{\"1\":{\"2041\":1,\"2057\":1,\"2058\":5,\"2064\":2,\"2065\":1}}],[\"repaint\",{\"0\":{\"1528\":1},\"1\":{\"1528\":3,\"1530\":1}}],[\"repetition\",{\"1\":{\"723\":2}}],[\"repeating\",{\"1\":{\"636\":2}}],[\"repeatedfunc\",{\"1\":{\"490\":3}}],[\"repeatfunc\",{\"1\":{\"490\":1}}],[\"repeat\",{\"1\":{\"490\":3,\"491\":1,\"629\":6,\"635\":1,\"723\":4,\"889\":2,\"1979\":1}}],[\"repr\",{\"1\":{\"384\":2,\"402\":1}}],[\"replaced\",{\"1\":{\"2058\":4}}],[\"replacestate\",{\"1\":{\"2030\":1,\"2048\":1,\"2050\":2,\"2058\":3,\"2061\":3}}],[\"replacehash\",{\"1\":{\"2029\":1}}],[\"replacenode\",{\"1\":{\"1977\":1}}],[\"replace是替换当前记录\",{\"1\":{\"1463\":1}}],[\"replacement\",{\"1\":{\"1340\":5}}],[\"replaceall\",{\"1\":{\"1208\":1,\"1210\":3}}],[\"replacewith\",{\"1\":{\"1208\":1,\"1210\":3}}],[\"replacechild\",{\"1\":{\"1122\":2}}],[\"replace\",{\"0\":{\"1463\":1},\"1\":{\"156\":2,\"889\":1,\"894\":2,\"911\":2,\"917\":1,\"919\":2,\"967\":1,\"1094\":5,\"1368\":1,\"1463\":1,\"1464\":1,\"1769\":1,\"1792\":3,\"2029\":5,\"2032\":2,\"2034\":2,\"2041\":2,\"2046\":1,\"2051\":1,\"2053\":2,\"2054\":2,\"2055\":1,\"2057\":2,\"2058\":11,\"2059\":1,\"2060\":2,\"2061\":3,\"2064\":1,\"2065\":2,\"2071\":1}}],[\"receiver\",{\"1\":{\"1901\":1,\"1902\":2,\"1906\":2,\"1909\":2,\"1910\":9,\"1912\":2,\"1913\":2,\"1914\":7,\"1917\":3,\"1918\":3,\"1921\":2,\"1923\":3,\"1927\":6,\"1928\":1,\"1938\":6,\"1985\":3,\"1990\":8,\"1991\":2,\"1992\":2,\"1993\":6}}],[\"recache\",{\"1\":{\"1792\":2}}],[\"rectified\",{\"1\":{\"1666\":1}}],[\"rect\",{\"1\":{\"714\":1}}],[\"recordto\",{\"1\":{\"2073\":5}}],[\"recordfrom\",{\"1\":{\"2073\":5}}],[\"record\",{\"1\":{\"2028\":3,\"2072\":2,\"2073\":4,\"2074\":9,\"2075\":11,\"2078\":3,\"2080\":3,\"2081\":6,\"2082\":2}}],[\"recordmiddleware\",{\"1\":{\"313\":2}}],[\"recoder\",{\"1\":{\"402\":2}}],[\"recursive\",{\"1\":{\"257\":2,\"259\":5,\"415\":1,\"1825\":1}}],[\"req\",{\"1\":{\"301\":1,\"304\":5,\"305\":8,\"306\":2,\"307\":1,\"321\":2,\"329\":1,\"350\":4,\"355\":15}}],[\"required\",{\"1\":{\"194\":1,\"758\":1,\"1429\":1,\"2064\":1}}],[\"required=\",{\"1\":{\"45\":1}}],[\"require函数\",{\"1\":{\"155\":1}}],[\"requirejs\",{\"1\":{\"39\":3}}],[\"require\",{\"0\":{\"39\":1,\"44\":1,\"45\":1},\"1\":{\"35\":5,\"37\":5,\"39\":2,\"40\":1,\"42\":2,\"43\":1,\"45\":2,\"52\":1,\"59\":1,\"77\":1,\"124\":1,\"128\":1,\"129\":1,\"142\":1,\"155\":14,\"191\":1,\"200\":1,\"212\":6,\"236\":1,\"237\":1,\"238\":5,\"239\":4,\"240\":1,\"244\":1,\"255\":1,\"262\":1,\"263\":2,\"264\":2,\"273\":1,\"282\":3,\"283\":1,\"284\":3,\"285\":1,\"287\":4,\"294\":5,\"301\":1,\"304\":1,\"305\":1,\"316\":1,\"317\":1,\"321\":3,\"327\":1,\"329\":2,\"349\":1,\"350\":2,\"355\":3,\"368\":1,\"1573\":1,\"2101\":1}}],[\"requestpermission\",{\"1\":{\"1105\":5}}],[\"requestanimationframe\",{\"1\":{\"480\":1}}],[\"request对象\",{\"1\":{\"309\":1}}],[\"requests\",{\"1\":{\"269\":1,\"1607\":1}}],[\"request\",{\"1\":{\"17\":1,\"273\":3,\"282\":15,\"283\":3,\"284\":7,\"285\":2,\"287\":2,\"294\":4,\"305\":1,\"313\":2,\"314\":2,\"315\":2,\"316\":1,\"317\":5,\"349\":4,\"498\":3,\"499\":3,\"1573\":2,\"1576\":1,\"1577\":1,\"1578\":1,\"1635\":1,\"1644\":1,\"1897\":1,\"1987\":1,\"2050\":1,\"2087\":1}}],[\"renamesync\",{\"1\":{\"254\":3,\"263\":1}}],[\"rename\",{\"1\":{\"254\":3}}],[\"renamecollection\",{\"1\":{\"180\":1}}],[\"rendercontext\",{\"1\":{\"1954\":1,\"1956\":2}}],[\"renderchildren\",{\"1\":{\"1802\":1,\"1864\":1}}],[\"rendereroptions\",{\"1\":{\"1944\":2,\"1997\":2,\"1998\":1}}],[\"renderer\",{\"1\":{\"1878\":3,\"1879\":3,\"1943\":1,\"1946\":2,\"1998\":2}}],[\"render2\",{\"1\":{\"1833\":1}}],[\"render函数会生成组件实际内容的\",{\"1\":{\"2002\":1}}],[\"render函数运行返回一个虚拟\",{\"1\":{\"1877\":1}}],[\"render函数的总流程大致如下\",{\"1\":{\"1833\":1}}],[\"render函数接收到的createelement函数去指定具体内容\",{\"1\":{\"1427\":1}}],[\"renderproxy\",{\"1\":{\"1799\":1}}],[\"renders\",{\"1\":{\"1803\":1,\"1804\":1}}],[\"renderstatic\",{\"1\":{\"1797\":1}}],[\"renderslot\",{\"1\":{\"1797\":1}}],[\"renderlist\",{\"1\":{\"1797\":1}}],[\"rendering\",{\"1\":{\"1530\":1}}],[\"render\",{\"0\":{\"1944\":1},\"1\":{\"219\":2,\"307\":1,\"327\":1,\"329\":3,\"483\":4,\"1427\":1,\"1446\":1,\"1450\":1,\"1782\":1,\"1790\":2,\"1796\":1,\"1797\":2,\"1802\":1,\"1805\":6,\"1806\":4,\"1827\":1,\"1834\":1,\"1835\":2,\"1841\":2,\"1842\":5,\"1859\":1,\"1864\":3,\"1865\":1,\"1874\":3,\"1877\":1,\"1879\":2,\"1880\":1,\"1890\":1,\"1891\":2,\"1944\":5,\"1948\":2,\"1953\":3,\"1954\":7,\"1975\":3,\"1978\":3,\"1979\":1,\"1997\":2,\"1998\":6,\"2000\":3,\"2001\":3,\"2002\":3,\"2025\":1,\"2031\":4,\"2050\":4}}],[\"related\",{\"0\":{\"2121\":1}}],[\"relative\",{\"1\":{\"568\":1,\"580\":1,\"582\":1,\"1207\":2}}],[\"relativepath\",{\"1\":{\"155\":2}}],[\"relu可能存在的问题有两个\",{\"1\":{\"1666\":1}}],[\"relu的代码如下\",{\"1\":{\"1666\":1}}],[\"relu的功能很简单\",{\"1\":{\"1666\":1}}],[\"relu是对输入的数据进行修正线性单元\",{\"1\":{\"1666\":1}}],[\"relu\",{\"0\":{\"1666\":1},\"1\":{\"1658\":1,\"1661\":3,\"1666\":14}}],[\"reload\",{\"1\":{\"1094\":3,\"2051\":1}}],[\"rel=\",{\"1\":{\"623\":1,\"659\":1}}],[\"release\",{\"1\":{\"408\":2,\"1807\":1}}],[\"releases\",{\"1\":{\"213\":1,\"227\":1,\"1475\":1}}],[\"regex\",{\"1\":{\"2028\":1}}],[\"regexp\",{\"0\":{\"900\":1},\"1\":{\"207\":1,\"900\":1,\"901\":1,\"911\":11,\"913\":2,\"923\":4,\"924\":20,\"925\":10,\"967\":1,\"1792\":1}}],[\"reg2\",{\"1\":{\"901\":2}}],[\"reg1\",{\"1\":{\"901\":2}}],[\"regular\",{\"1\":{\"621\":1,\"898\":1,\"1277\":1}}],[\"registerrouteinstance\",{\"1\":{\"2031\":3}}],[\"registerref\",{\"1\":{\"1428\":5}}],[\"registerinstance\",{\"1\":{\"2026\":2,\"2031\":4}}],[\"register\",{\"1\":{\"285\":1}}],[\"registry=https\",{\"1\":{\"81\":1}}],[\"registry参数\",{\"1\":{\"68\":1}}],[\"registry\",{\"1\":{\"68\":4,\"69\":2,\"81\":1,\"88\":2,\"1426\":2,\"1591\":2}}],[\"reg\",{\"1\":{\"285\":1,\"907\":2,\"908\":2,\"911\":6,\"912\":8,\"916\":3,\"917\":3,\"918\":23,\"923\":19,\"925\":2}}],[\"remaining\",{\"1\":{\"1792\":1}}],[\"remarks\",{\"1\":{\"176\":3}}],[\"rem是相对于根元素\",{\"1\":{\"534\":1}}],[\"rem\",{\"1\":{\"534\":1,\"621\":1,\"650\":3}}],[\"removetrailingslash\",{\"1\":{\"2054\":5}}],[\"removehistorylistener\",{\"1\":{\"2047\":6}}],[\"removeroute\",{\"1\":{\"2041\":2,\"2042\":4,\"2046\":1,\"2047\":1}}],[\"removevnodes\",{\"1\":{\"1789\":2}}],[\"removeonly\",{\"1\":{\"1789\":4,\"1862\":1}}],[\"removenode\",{\"1\":{\"1789\":1,\"1977\":1}}],[\"remove不同\",{\"1\":{\"1368\":1}}],[\"removeclass\",{\"1\":{\"1205\":2}}],[\"removechild\",{\"1\":{\"474\":1,\"1121\":3,\"1789\":1,\"1950\":1}}],[\"removeprop\",{\"1\":{\"1205\":1}}],[\"removeattr\",{\"1\":{\"1205\":3}}],[\"removeattribute\",{\"1\":{\"1125\":1}}],[\"removeempty\",{\"1\":{\"1040\":1}}],[\"removeeventlistener\",{\"1\":{\"995\":2,\"1146\":1,\"1949\":3,\"2061\":2}}],[\"removeitem\",{\"1\":{\"769\":1,\"1436\":1}}],[\"removed\",{\"1\":{\"259\":1}}],[\"remove\",{\"1\":{\"13\":1,\"76\":2,\"87\":2,\"181\":1,\"259\":1,\"404\":1,\"685\":1,\"1121\":2,\"1125\":1,\"1208\":1,\"1211\":6,\"1368\":1,\"1428\":1,\"1802\":4,\"1807\":3,\"2043\":2}}],[\"remote\",{\"0\":{\"12\":1},\"1\":{\"12\":4,\"13\":3}}],[\"res1\",{\"1\":{\"1189\":1}}],[\"res2\",{\"1\":{\"1188\":1,\"1189\":1}}],[\"resizable=yes\",{\"1\":{\"1088\":3}}],[\"resizeby\",{\"1\":{\"1088\":3}}],[\"resizeto\",{\"1\":{\"1088\":4}}],[\"resize\",{\"1\":{\"1034\":1,\"1035\":1,\"1214\":1}}],[\"reserved\",{\"1\":{\"958\":1,\"1804\":1}}],[\"resets\",{\"1\":{\"2058\":1}}],[\"reset\",{\"1\":{\"610\":1,\"670\":2,\"756\":2,\"1139\":2,\"1140\":2,\"1203\":1,\"2043\":2}}],[\"resave\",{\"1\":{\"355\":1}}],[\"respect\",{\"1\":{\"2054\":1}}],[\"resp\",{\"1\":{\"499\":2}}],[\"respsonse\",{\"1\":{\"316\":1}}],[\"responsetype\",{\"1\":{\"1578\":1}}],[\"responsetext\",{\"1\":{\"476\":1}}],[\"response=>\",{\"1\":{\"1445\":1}}],[\"response对象\",{\"1\":{\"309\":1}}],[\"response\",{\"1\":{\"273\":4,\"275\":1,\"282\":2,\"283\":2,\"284\":4,\"285\":5,\"286\":15,\"287\":6,\"294\":10,\"307\":1,\"313\":2,\"314\":2,\"315\":2,\"316\":1,\"317\":2,\"349\":9,\"476\":2,\"1445\":1,\"1573\":3,\"1575\":1,\"1576\":4,\"1577\":5,\"1578\":6,\"1586\":5,\"1587\":5,\"1644\":1,\"2050\":2}}],[\"res\",{\"1\":{\"284\":4,\"301\":2,\"304\":10,\"305\":2,\"306\":2,\"307\":23,\"321\":4,\"329\":3,\"350\":6,\"355\":11,\"419\":3,\"421\":5,\"430\":2,\"439\":2,\"441\":3,\"482\":4,\"493\":9,\"494\":4,\"1188\":1,\"1189\":1,\"1352\":3,\"1446\":10,\"1779\":2,\"1793\":1,\"1895\":4,\"1897\":2,\"1906\":2,\"1907\":3,\"1909\":2,\"1910\":2,\"1912\":6,\"1913\":6,\"1914\":18,\"1917\":2,\"1918\":2,\"1921\":7,\"1923\":18,\"1924\":8,\"1925\":4,\"1928\":6,\"1929\":5,\"1984\":4,\"1985\":2,\"1987\":2,\"1990\":5,\"1991\":6,\"1992\":4,\"1993\":19}}],[\"restackedtag\",{\"1\":{\"1792\":2}}],[\"restargs\",{\"1\":{\"432\":3}}],[\"rest\",{\"1\":{\"933\":1,\"1792\":11}}],[\"restor\",{\"1\":{\"712\":1}}],[\"restore\",{\"1\":{\"8\":2,\"711\":2,\"712\":1,\"713\":3}}],[\"restful\",{\"0\":{\"339\":1},\"1\":{\"339\":2,\"340\":1}}],[\"restriction\",{\"1\":{\"156\":1}}],[\"resource\",{\"1\":{\"142\":5,\"143\":1,\"1445\":1,\"1605\":1,\"1626\":1}}],[\"resolvehooks\",{\"1\":{\"2029\":2}}],[\"resolveasynccomponents\",{\"1\":{\"2029\":1}}],[\"resolveasset\",{\"1\":{\"1423\":1}}],[\"resolvequeue\",{\"1\":{\"2029\":1}}],[\"resolveprops\",{\"1\":{\"1954\":4,\"1955\":2}}],[\"resolveinject\",{\"1\":{\"1803\":2}}],[\"resolveconstructoroptions\",{\"1\":{\"1799\":1}}],[\"resolvescopedslots\",{\"1\":{\"1797\":1}}],[\"resolvefilter\",{\"1\":{\"1797\":1}}],[\"resolved\",{\"1\":{\"1789\":1,\"2074\":1}}],[\"resolvedcounter++\",{\"1\":{\"1778\":1}}],[\"resolvedcounter\",{\"1\":{\"1778\":2}}],[\"resolve\",{\"1\":{\"124\":1,\"142\":1,\"150\":2,\"239\":1,\"264\":5,\"329\":1,\"474\":2,\"476\":2,\"491\":2,\"498\":2,\"499\":3,\"1187\":4,\"1188\":4,\"1189\":1,\"1560\":1,\"1772\":3,\"1777\":20,\"1778\":4,\"1779\":12,\"1805\":1,\"1822\":7,\"1897\":2,\"1954\":2,\"1987\":1,\"2041\":2,\"2042\":3,\"2046\":1,\"2050\":1,\"2065\":8,\"2075\":3,\"2076\":1}}],[\"result\",{\"1\":{\"134\":2,\"386\":1,\"414\":6,\"417\":3,\"418\":6,\"428\":2,\"433\":2,\"451\":4,\"452\":3,\"456\":8,\"499\":4,\"773\":6,\"857\":2,\"890\":1,\"894\":2,\"1040\":2,\"1182\":4,\"1368\":1,\"1388\":1,\"1392\":1,\"1576\":5,\"1577\":6,\"1578\":2,\"1769\":6,\"1777\":7,\"1778\":3,\"1785\":2,\"1803\":9,\"2058\":6,\"2101\":2}}],[\"reason\",{\"1\":{\"1777\":4,\"1778\":2}}],[\"real\",{\"1\":{\"895\":1,\"1799\":1}}],[\"readme\",{\"1\":{\"1427\":1,\"2040\":1}}],[\"readycbs\",{\"1\":{\"2029\":1}}],[\"ready则是在图片节点创建好之后就会执行\",{\"1\":{\"1200\":1}}],[\"ready要比\",{\"1\":{\"1200\":1}}],[\"ready\",{\"0\":{\"1200\":1,\"1215\":1},\"1\":{\"1198\":1,\"1200\":1,\"1214\":1,\"1215\":4,\"1240\":1,\"2029\":3,\"2047\":2}}],[\"readystate\",{\"1\":{\"752\":2,\"1575\":1,\"1576\":1,\"1577\":1,\"1582\":1}}],[\"reader\",{\"1\":{\"773\":3}}],[\"readasarraybuffer\",{\"1\":{\"773\":1}}],[\"readasdataurl\",{\"1\":{\"773\":3}}],[\"readastext\",{\"1\":{\"773\":1}}],[\"readasbinarystring\",{\"1\":{\"773\":1}}],[\"readonly<routerecordraw\",{\"1\":{\"2042\":1}}],[\"readonly\",{\"0\":{\"1505\":1},\"1\":{\"670\":1,\"1205\":1,\"1430\":1,\"1505\":2,\"1509\":2,\"1914\":5,\"1921\":1,\"1923\":2,\"1956\":1,\"1992\":2,\"1993\":1}}],[\"readline\",{\"1\":{\"404\":1}}],[\"readdirsync\",{\"1\":{\"256\":1,\"258\":3,\"263\":1}}],[\"readdir\",{\"0\":{\"258\":1},\"1\":{\"256\":1,\"258\":3}}],[\"read\",{\"1\":{\"199\":1,\"345\":1,\"404\":2,\"1655\":1}}],[\"readfilesync\",{\"0\":{\"251\":1},\"1\":{\"155\":1,\"239\":1,\"242\":1,\"249\":1,\"251\":3,\"262\":1,\"263\":1,\"287\":1,\"294\":3}}],[\"readfile\",{\"0\":{\"250\":1},\"1\":{\"35\":1,\"249\":1,\"250\":3,\"263\":1,\"294\":1}}],[\"reactiveroute\",{\"1\":{\"2035\":2,\"2047\":12}}],[\"reactiveeffect\",{\"1\":{\"2002\":2}}],[\"reactivemap\",{\"1\":{\"1923\":3}}],[\"reactive的递归处理\",{\"1\":{\"1923\":1}}],[\"reactivegetter\",{\"1\":{\"1785\":1}}],[\"reactive函数\",{\"1\":{\"1487\":1}}],[\"reactive\",{\"0\":{\"1488\":1,\"1492\":1},\"1\":{\"1480\":1,\"1486\":2,\"1488\":3,\"1492\":3,\"1497\":2,\"1508\":1,\"1509\":2,\"1784\":1,\"1786\":3,\"1909\":2,\"1910\":4,\"1911\":2,\"1912\":3,\"1913\":3,\"1914\":2,\"1921\":1,\"1923\":7,\"1925\":1,\"1929\":4,\"1930\":2,\"1931\":2,\"1932\":2,\"1936\":2,\"1937\":2,\"1954\":2,\"1990\":2,\"1991\":2,\"1992\":1,\"1993\":2,\"2019\":1,\"2020\":1,\"2066\":1}}],[\"react\",{\"1\":{\"25\":1}}],[\"redirectedfrom\",{\"1\":{\"2028\":1,\"2044\":1,\"2065\":1}}],[\"redirect\",{\"1\":{\"307\":2,\"355\":1,\"2028\":1,\"2029\":1,\"2075\":1}}],[\"redirsync\",{\"1\":{\"259\":1}}],[\"reduceright\",{\"1\":{\"946\":1}}],[\"reduce模拟原生flat\",{\"0\":{\"451\":1}}],[\"reduce\",{\"0\":{\"437\":1,\"450\":1,\"458\":1},\"1\":{\"155\":1,\"402\":2,\"438\":1,\"450\":1,\"451\":1,\"458\":1,\"464\":1,\"835\":1,\"946\":6,\"947\":2,\"1040\":2,\"2021\":1,\"2076\":3}}],[\"red\",{\"1\":{\"30\":1,\"44\":1,\"45\":1,\"516\":1,\"517\":2,\"533\":1,\"535\":1,\"544\":1,\"636\":2,\"643\":1,\"725\":1,\"726\":1,\"764\":1,\"853\":5,\"854\":6,\"1148\":1,\"1194\":2,\"1201\":2,\"1206\":3,\"1207\":2,\"1232\":3,\"1237\":1,\"1257\":2,\"1261\":1,\"1271\":3,\"1276\":1,\"1278\":2,\"1279\":4,\"1280\":2,\"1310\":3,\"1319\":1,\"1320\":2,\"1325\":1,\"1336\":1,\"1339\":2}}],[\"rejected\",{\"1\":{\"1777\":3}}],[\"reject\",{\"1\":{\"474\":1,\"476\":3,\"1187\":2,\"1772\":2,\"1777\":21,\"1778\":2,\"2075\":5}}],[\"rej\",{\"1\":{\"15\":1,\"1188\":2}}],[\"rebase\",{\"0\":{\"11\":1},\"1\":{\"11\":1,\"17\":1}}],[\"rmdirsync\",{\"1\":{\"256\":1,\"259\":3}}],[\"rmdir\",{\"0\":{\"259\":1},\"1\":{\"256\":1,\"259\":4}}],[\"rmsync\",{\"1\":{\"255\":1}}],[\"rm\",{\"1\":{\"8\":2,\"255\":2,\"259\":3}}],[\"4px\",{\"1\":{\"1338\":2}}],[\"4+\",{\"1\":{\"956\":1}}],[\"415\",{\"0\":{\"1722\":1},\"1\":{\"1722\":5,\"1729\":1}}],[\"4196\",{\"1\":{\"1712\":1}}],[\"41\",{\"1\":{\"883\":1,\"1161\":1,\"1477\":1}}],[\"4位数\",{\"1\":{\"877\":1}}],[\"46\",{\"1\":{\"877\":1,\"1161\":2}}],[\"446fccb8\",{\"1\":{\"1543\":2}}],[\"444\",{\"1\":{\"1328\":1}}],[\"44\",{\"1\":{\"856\":1,\"857\":2,\"876\":1}}],[\"443\",{\"1\":{\"275\":1}}],[\"47\",{\"1\":{\"765\":1}}],[\"484\",{\"1\":{\"1720\":2}}],[\"48\",{\"1\":{\"1105\":1,\"1160\":1,\"1488\":1,\"1720\":1}}],[\"480\",{\"1\":{\"673\":1,\"674\":1}}],[\"48px\",{\"1\":{\"650\":2}}],[\"4vw\",{\"1\":{\"650\":1}}],[\"4s\",{\"1\":{\"644\":1}}],[\"43\",{\"1\":{\"1104\":1,\"1714\":1}}],[\"438121005\",{\"1\":{\"624\":1}}],[\"4396\",{\"1\":{\"176\":1}}],[\"42\",{\"1\":{\"488\":1,\"773\":1,\"796\":1,\"1105\":1}}],[\"4协程\",{\"1\":{\"408\":1}}],[\"4数据成员的分类和区别\",{\"1\":{\"405\":1}}],[\"4d\",{\"1\":{\"387\":1,\"388\":2}}],[\"456\",{\"1\":{\"482\":1,\"493\":1,\"948\":1,\"995\":3}}],[\"4500\",{\"1\":{\"385\":2}}],[\"45\",{\"1\":{\"382\":3,\"385\":1,\"486\":2,\"487\":2,\"488\":2,\"1718\":1}}],[\"4k\",{\"1\":{\"356\":1}}],[\"4kb\",{\"1\":{\"350\":1}}],[\"403\",{\"1\":{\"1575\":1,\"1635\":1}}],[\"40万\",{\"1\":{\"1508\":1}}],[\"40\",{\"1\":{\"650\":1,\"696\":2,\"1154\":1,\"1353\":1,\"2019\":1}}],[\"400\",{\"1\":{\"498\":1,\"555\":1,\"666\":1,\"1277\":1,\"1290\":6,\"1587\":1,\"1635\":1}}],[\"401\",{\"1\":{\"355\":1,\"1575\":1}}],[\"40px\",{\"1\":{\"287\":2,\"546\":2,\"650\":1,\"1269\":5,\"1288\":5,\"1328\":1}}],[\"404响应\",{\"1\":{\"294\":1}}],[\"404\",{\"1\":{\"271\":1,\"294\":2,\"304\":1,\"307\":2,\"1468\":1,\"1575\":1,\"1635\":1,\"2050\":1,\"2104\":1}}],[\"4>\",{\"1\":{\"177\":1}}],[\"4\",{\"0\":{\"8\":1,\"16\":1,\"25\":1,\"30\":1,\"36\":1,\"42\":1,\"52\":1,\"71\":1,\"174\":1,\"180\":1,\"192\":1,\"221\":1,\"255\":1,\"272\":1,\"306\":1,\"312\":1,\"328\":1,\"338\":1,\"348\":1,\"355\":1,\"361\":1,\"379\":1,\"391\":1,\"398\":1,\"464\":1,\"519\":1,\"532\":1,\"535\":1,\"546\":1,\"563\":1,\"571\":1,\"588\":1,\"613\":1,\"619\":1,\"630\":1,\"650\":1,\"664\":1,\"699\":1,\"704\":1,\"713\":1,\"727\":1,\"732\":1,\"738\":1,\"745\":1,\"750\":1,\"759\":1,\"770\":1,\"784\":1,\"797\":1,\"811\":1,\"821\":1,\"830\":1,\"844\":1,\"862\":1,\"870\":1,\"877\":1,\"906\":1,\"936\":1,\"958\":1,\"983\":1,\"994\":1,\"1001\":1,\"1010\":1,\"1015\":1,\"1020\":1,\"1030\":1,\"1039\":1,\"1048\":1,\"1072\":1,\"1081\":1,\"1114\":1,\"1140\":1,\"1146\":1,\"1155\":1,\"1180\":1,\"1201\":1,\"1212\":1,\"1218\":1,\"1224\":1,\"1230\":1,\"1237\":1,\"1255\":1,\"1262\":1,\"1287\":1,\"1295\":1,\"1330\":1,\"1337\":1,\"1350\":1,\"1358\":1,\"1359\":1,\"1375\":1,\"1395\":1,\"1402\":1,\"1422\":1,\"1429\":1,\"1451\":1,\"1459\":1,\"1480\":1,\"1489\":1,\"1499\":1,\"1507\":1,\"1578\":1,\"1587\":1,\"1603\":1,\"1616\":1,\"1624\":1,\"1631\":1,\"1648\":1,\"1664\":1,\"1698\":1,\"1719\":1,\"1728\":1,\"1734\":1,\"1743\":1,\"1748\":1,\"1803\":1,\"1827\":1,\"1859\":1,\"1880\":1,\"1891\":1,\"1925\":1,\"1930\":1,\"1935\":1,\"1951\":1,\"1956\":1,\"1987\":1,\"1992\":1,\"2011\":1,\"2021\":1,\"2035\":1,\"2043\":1,\"2066\":1},\"1\":{\"37\":1,\"67\":1,\"142\":2,\"154\":1,\"158\":1,\"165\":2,\"182\":1,\"191\":1,\"200\":1,\"212\":1,\"219\":1,\"239\":1,\"255\":1,\"280\":1,\"287\":1,\"301\":1,\"317\":1,\"321\":1,\"327\":1,\"329\":1,\"349\":4,\"385\":2,\"386\":2,\"390\":1,\"395\":4,\"402\":15,\"404\":2,\"405\":3,\"408\":3,\"439\":1,\"449\":5,\"453\":1,\"486\":2,\"487\":6,\"488\":5,\"490\":2,\"498\":2,\"650\":1,\"691\":1,\"697\":1,\"740\":8,\"767\":2,\"780\":1,\"801\":2,\"822\":2,\"835\":1,\"842\":1,\"843\":2,\"844\":2,\"845\":2,\"846\":8,\"848\":2,\"849\":2,\"851\":3,\"854\":14,\"855\":3,\"857\":1,\"861\":2,\"863\":4,\"864\":2,\"865\":1,\"877\":3,\"882\":1,\"893\":2,\"910\":1,\"911\":4,\"913\":1,\"923\":1,\"925\":9,\"934\":2,\"945\":6,\"946\":17,\"947\":1,\"951\":1,\"992\":1,\"995\":2,\"1025\":1,\"1038\":1,\"1039\":4,\"1054\":1,\"1057\":1,\"1063\":2,\"1065\":1,\"1066\":1,\"1087\":1,\"1088\":5,\"1138\":3,\"1139\":2,\"1140\":2,\"1148\":2,\"1150\":1,\"1154\":1,\"1156\":1,\"1181\":2,\"1196\":1,\"1201\":2,\"1225\":2,\"1265\":1,\"1276\":2,\"1285\":2,\"1338\":1,\"1397\":1,\"1432\":1,\"1560\":2,\"1573\":1,\"1575\":2,\"1576\":2,\"1577\":1,\"1582\":1,\"1609\":1,\"1658\":1,\"1663\":13,\"1665\":6,\"1711\":2,\"1712\":1,\"1715\":1,\"1722\":5,\"1723\":2,\"1731\":1,\"1778\":1,\"1779\":8,\"1792\":3,\"1813\":1,\"1818\":1,\"1951\":1,\"1966\":1,\"1968\":1,\"1974\":4,\"2015\":1,\"2035\":1,\"2038\":1,\"2041\":1,\"2053\":1,\"2059\":1,\"2061\":1,\"2069\":1,\"2087\":1}}],[\"aes\",{\"1\":{\"2099\":1}}],[\"aef\",{\"1\":{\"287\":2}}],[\"aka\",{\"1\":{\"1825\":1}}],[\"ag\",{\"1\":{\"1742\":1}}],[\"age=0类似于cache\",{\"1\":{\"1541\":1}}],[\"age=3600表示这是一个公开资源\",{\"1\":{\"1539\":1}}],[\"age=3600\",{\"1\":{\"1534\":2}}],[\"age设置为\",{\"1\":{\"1541\":1}}],[\"age来记录了\",{\"1\":{\"1540\":1}}],[\"age用于指定缓存时间\",{\"1\":{\"1539\":1}}],[\"age等价于person\",{\"1\":{\"834\":1}}],[\"agent\",{\"1\":{\"269\":1,\"1091\":1,\"1568\":1}}],[\"age10\",{\"1\":{\"2019\":2}}],[\"age1\",{\"1\":{\"50\":1}}],[\"age\",{\"1\":{\"49\":3,\"50\":3,\"176\":3,\"181\":1,\"206\":4,\"269\":1,\"402\":1,\"405\":1,\"422\":3,\"467\":3,\"769\":4,\"770\":5,\"777\":1,\"827\":2,\"828\":5,\"829\":5,\"830\":16,\"831\":5,\"832\":17,\"833\":11,\"834\":4,\"836\":4,\"868\":4,\"869\":3,\"870\":7,\"871\":6,\"896\":4,\"897\":3,\"934\":3,\"996\":3,\"1028\":3,\"1047\":3,\"1048\":3,\"1049\":3,\"1055\":1,\"1056\":1,\"1058\":1,\"1059\":1,\"1060\":1,\"1061\":3,\"1066\":1,\"1067\":1,\"1201\":8,\"1352\":3,\"1364\":1,\"1392\":1,\"1393\":5,\"1395\":4,\"1486\":4,\"1488\":2,\"1498\":1,\"1535\":1,\"1539\":1,\"1584\":1,\"1793\":3,\"2019\":13}}],[\"a即可\",{\"1\":{\"1728\":1}}],[\"affine\",{\"1\":{\"1665\":1}}],[\"afterguards\",{\"1\":{\"2041\":2,\"2043\":1,\"2084\":1}}],[\"afterhooks\",{\"1\":{\"2029\":1}}],[\"aftereach\",{\"0\":{\"2084\":1},\"1\":{\"1467\":2,\"2029\":1,\"2041\":1,\"2071\":2,\"2084\":2}}],[\"after\",{\"1\":{\"521\":2,\"566\":2,\"623\":1,\"1208\":1,\"1209\":1,\"2053\":1}}],[\"axios\",{\"0\":{\"1583\":1},\"1\":{\"1445\":3,\"1583\":6,\"1584\":4,\"1585\":3,\"1586\":3}}],[\"axb\",{\"1\":{\"918\":1}}],[\"a被改变了\",{\"1\":{\"1379\":1}}],[\"a55\",{\"1\":{\"1306\":2,\"1314\":2}}],[\"a和window\",{\"1\":{\"1086\":1}}],[\"a3\",{\"1\":{\"981\":1}}],[\"a2a2a2\",{\"1\":{\"1337\":1}}],[\"a2\",{\"1\":{\"981\":1,\"1740\":1}}],[\"a11\",{\"1\":{\"1279\":2}}],[\"a1\",{\"1\":{\"981\":1,\"1740\":1}}],[\"a123aa456aa\",{\"1\":{\"482\":1}}],[\"a|\",{\"1\":{\"914\":1}}],[\"avoid\",{\"1\":{\"1786\":2,\"1799\":1,\"2065\":1}}],[\"average\",{\"1\":{\"1663\":2}}],[\"av\",{\"1\":{\"1274\":2}}],[\"avatar\",{\"1\":{\"1274\":3,\"1592\":1}}],[\"availtop\",{\"1\":{\"1098\":1}}],[\"availleft\",{\"1\":{\"1098\":1}}],[\"availwidth\",{\"1\":{\"1098\":1}}],[\"availheight\",{\"1\":{\"1098\":1}}],[\"available\",{\"1\":{\"229\":1,\"1675\":1}}],[\"avg\",{\"1\":{\"835\":2,\"1663\":2}}],[\"amet\",{\"1\":{\"1112\":9,\"1120\":2,\"1123\":4,\"1150\":4,\"1153\":1,\"2101\":1}}],[\"am\",{\"1\":{\"422\":2}}],[\"amd\",{\"0\":{\"38\":1},\"1\":{\"25\":2,\"37\":1}}],[\"a<=b\",{\"1\":{\"398\":1}}],[\"a<b\",{\"1\":{\"398\":1,\"401\":1}}],[\"a>\",{\"1\":{\"533\":1,\"664\":1,\"747\":2,\"912\":1,\"1080\":1,\"1112\":3,\"1120\":1,\"1123\":2,\"1156\":6,\"1369\":2,\"2050\":2}}],[\"a>=b\",{\"1\":{\"398\":1}}],[\"a>b\",{\"1\":{\"398\":1}}],[\"a++\",{\"1\":{\"1025\":1}}],[\"a+\",{\"1\":{\"907\":1,\"908\":1,\"911\":1,\"1776\":2}}],[\"a+=b\",{\"1\":{\"396\":2}}],[\"a+b\",{\"1\":{\"395\":1}}],[\"aabbbxj\",{\"1\":{\"911\":1}}],[\"aabbcc\",{\"1\":{\"535\":1}}],[\"aaa\",{\"1\":{\"907\":1,\"1067\":1}}],[\"aaabbcc\",{\"1\":{\"907\":2,\"908\":2}}],[\"aaaa\",{\"1\":{\"482\":1}}],[\"aage\",{\"1\":{\"832\":2}}],[\"aa\",{\"1\":{\"384\":7,\"482\":2,\"911\":1,\"912\":1,\"1053\":1}}],[\"aa=\",{\"1\":{\"384\":2}}],[\"a=b\",{\"1\":{\"1740\":1,\"1753\":1}}],[\"a==3\",{\"1\":{\"978\":1}}],[\"a==2\",{\"1\":{\"978\":1}}],[\"a==1\",{\"1\":{\"978\":1}}],[\"a==b\",{\"1\":{\"398\":1}}],[\"a=1\",{\"1\":{\"494\":1,\"1792\":1}}],[\"a=100\",{\"1\":{\"268\":2,\"284\":1,\"345\":1,\"1576\":2,\"1577\":1,\"1587\":1}}],[\"a=3\",{\"1\":{\"398\":1}}],[\"a=9\",{\"1\":{\"396\":7}}],[\"a=a\",{\"1\":{\"396\":12}}],[\"a=a+b\",{\"1\":{\"396\":2}}],[\"a=20\",{\"1\":{\"395\":1}}],[\"a=\",{\"1\":{\"383\":2}}],[\"adipisicing\",{\"1\":{\"2101\":1}}],[\"advanced\",{\"1\":{\"2099\":1}}],[\"advance\",{\"1\":{\"1792\":10}}],[\"ad\",{\"1\":{\"1745\":2}}],[\"adaptive\",{\"1\":{\"1663\":4}}],[\"adaptiveavgpool2d的输出张量形状为指定大小的输出\",{\"1\":{\"1663\":1}}],[\"adaptiveavgpool2d是\",{\"1\":{\"1663\":1}}],[\"adaptiveavgpool2d\",{\"1\":{\"1663\":2}}],[\"administrator\",{\"1\":{\"390\":1,\"402\":5,\"403\":1,\"404\":4,\"405\":18,\"408\":4}}],[\"admin\",{\"1\":{\"317\":1,\"366\":1,\"1585\":2,\"1586\":2,\"1630\":1,\"1634\":3}}],[\"addroutes\",{\"1\":{\"2028\":5}}],[\"addroute\",{\"1\":{\"2028\":1,\"2041\":3,\"2042\":6,\"2046\":1,\"2047\":1}}],[\"address\",{\"1\":{\"275\":1,\"1348\":1,\"1349\":1,\"1396\":1,\"1415\":2}}],[\"add和delete触发iterate\",{\"1\":{\"1990\":1}}],[\"addvnodes\",{\"1\":{\"1789\":2}}],[\"adding\",{\"1\":{\"1786\":1}}],[\"addinteraction3\",{\"1\":{\"1181\":2}}],[\"addinteraction2\",{\"1\":{\"1181\":2}}],[\"addinteraction\",{\"1\":{\"1181\":2}}],[\"addpersonwang\",{\"1\":{\"1454\":1}}],[\"addprop\",{\"1\":{\"1353\":1}}],[\"adddirective\",{\"1\":{\"1407\":1}}],[\"adddelay\",{\"1\":{\"1181\":6}}],[\"addhandler中\",{\"1\":{\"1368\":1}}],[\"addhandler\",{\"1\":{\"1357\":1,\"1358\":1,\"1368\":1}}],[\"addattr\",{\"1\":{\"1353\":1}}],[\"addself\",{\"1\":{\"1232\":1}}],[\"addclass\",{\"1\":{\"1205\":2}}],[\"addcolorstop\",{\"1\":{\"725\":6,\"726\":4}}],[\"addnetwork\",{\"1\":{\"1181\":6}}],[\"addtask\",{\"1\":{\"498\":5}}],[\"addmethod中为object添加调用函数\",{\"1\":{\"487\":1}}],[\"addmethod\",{\"1\":{\"487\":4}}],[\"addeventlistener\",{\"1\":{\"287\":2,\"478\":1,\"479\":1,\"759\":1,\"765\":1,\"770\":1,\"772\":3,\"773\":1,\"993\":1,\"995\":2,\"1105\":1,\"1132\":1,\"1140\":5,\"1145\":2,\"1146\":2,\"1148\":9,\"1151\":1,\"1152\":3,\"1153\":2,\"1154\":2,\"1157\":2,\"1158\":2,\"1214\":2,\"1357\":3,\"1558\":1,\"1577\":1,\"1872\":1,\"1878\":1,\"1949\":2,\"2049\":1,\"2050\":3,\"2060\":2,\"2061\":3}}],[\"add\",{\"1\":{\"7\":2,\"12\":3,\"13\":1,\"17\":1,\"87\":3,\"408\":1,\"464\":1,\"480\":2,\"488\":2,\"498\":2,\"685\":1,\"861\":10,\"865\":3,\"995\":9,\"1063\":5,\"1064\":8,\"1065\":4,\"1125\":1,\"1232\":1,\"1368\":1,\"1454\":1,\"1680\":3,\"1802\":4,\"1886\":1,\"1888\":1,\"1889\":2,\"1890\":1,\"1892\":1,\"1893\":1,\"1897\":1,\"1906\":7,\"1909\":1,\"1910\":1,\"1914\":1,\"1917\":6,\"1918\":3,\"1926\":1,\"1928\":14,\"1929\":4,\"1930\":2,\"1932\":3,\"1954\":1,\"1985\":2,\"1990\":6,\"1993\":7,\"2041\":4,\"2043\":6,\"2047\":2,\"2058\":1}}],[\"aud\",{\"1\":{\"366\":1}}],[\"audio>\",{\"1\":{\"668\":1,\"747\":1}}],[\"audio\",{\"0\":{\"749\":1},\"1\":{\"293\":1,\"294\":1,\"668\":4,\"747\":2}}],[\"autofocus\",{\"1\":{\"670\":1,\"758\":1,\"1205\":1}}],[\"autocomplete=\",{\"1\":{\"670\":1}}],[\"autoplay\",{\"1\":{\"668\":2,\"748\":1,\"749\":1}}],[\"auto\",{\"0\":{\"556\":1},\"1\":{\"142\":2,\"540\":1,\"543\":1,\"554\":4,\"555\":3,\"556\":3,\"557\":2,\"574\":5,\"577\":1,\"578\":1,\"589\":1,\"591\":2,\"592\":6,\"597\":2,\"598\":2,\"603\":2,\"633\":1,\"748\":2,\"1328\":1,\"2048\":1,\"2063\":1}}],[\"authorization\",{\"1\":{\"343\":1,\"1613\":1}}],[\"authors\",{\"1\":{\"156\":1,\"1057\":2}}],[\"author\",{\"1\":{\"64\":2,\"191\":2,\"195\":1,\"200\":1,\"201\":1,\"202\":6,\"203\":2,\"206\":2,\"212\":2,\"1057\":1}}],[\"atan2\",{\"1\":{\"884\":1}}],[\"atan\",{\"1\":{\"884\":1}}],[\"atop\",{\"1\":{\"743\":2}}],[\"atom\",{\"1\":{\"222\":1,\"223\":1}}],[\"at\",{\"1\":{\"636\":2,\"856\":5,\"888\":1,\"897\":1,\"901\":2,\"925\":14,\"1314\":1,\"1786\":1,\"1792\":1,\"1804\":1,\"2058\":1,\"2065\":2}}],[\"attack\",{\"1\":{\"2087\":1}}],[\"attached\",{\"1\":{\"1802\":1,\"1949\":3}}],[\"attachment\",{\"1\":{\"634\":1,\"1570\":1,\"1636\":1}}],[\"attention\",{\"1\":{\"1678\":1}}],[\"attr\",{\"1\":{\"686\":1,\"756\":1,\"1205\":8,\"1232\":3,\"1237\":1,\"1792\":6}}],[\"attrs的供用户访问版\",{\"1\":{\"1865\":1}}],[\"attrs数组长度相等的数组\",{\"1\":{\"1792\":1}}],[\"attrslist\",{\"1\":{\"1791\":1,\"1797\":1}}],[\"attrsmap\",{\"1\":{\"1353\":1,\"1791\":1,\"1795\":1,\"1797\":1}}],[\"attrs生成\",{\"1\":{\"1353\":1}}],[\"attrs\",{\"1\":{\"483\":4,\"1353\":6,\"1358\":2,\"1388\":2,\"1428\":1,\"1430\":2,\"1493\":3,\"1788\":1,\"1791\":4,\"1792\":17,\"1796\":1,\"1797\":2,\"1834\":1,\"1953\":2,\"1954\":11,\"1956\":2,\"2001\":2,\"2067\":1,\"2068\":1,\"2070\":2}}],[\"attributes\",{\"1\":{\"681\":9,\"1353\":1,\"1949\":1}}],[\"attribute和property\",{\"0\":{\"678\":1}}],[\"attribute\",{\"0\":{\"680\":1,\"683\":1,\"685\":1,\"1113\":1},\"1\":{\"405\":3,\"680\":2,\"683\":4,\"1499\":1,\"1792\":1,\"1804\":1,\"1949\":1,\"2063\":1},\"2\":{\"688\":1}}],[\"atguiguqhf\",{\"1\":{\"685\":2}}],[\"atguigu\",{\"1\":{\"27\":1,\"28\":2,\"29\":1,\"30\":1,\"291\":2,\"292\":5,\"307\":1,\"355\":1,\"368\":2,\"685\":1,\"1025\":1,\"1349\":1,\"1369\":2,\"1467\":2}}],[\"acb\",{\"1\":{\"918\":1}}],[\"acos\",{\"1\":{\"884\":1}}],[\"ac\",{\"1\":{\"493\":1,\"918\":1}}],[\"acquire\",{\"1\":{\"408\":2}}],[\"activated\",{\"1\":{\"2029\":4}}],[\"activated路由组件被激活时触发\",{\"1\":{\"1466\":1}}],[\"activerecordindex\",{\"1\":{\"2065\":9}}],[\"activeclass\",{\"1\":{\"2032\":1,\"2064\":2,\"2066\":1}}],[\"activecount\",{\"1\":{\"408\":1}}],[\"activeeffect\",{\"1\":{\"1888\":6,\"1889\":7,\"1890\":9,\"1891\":7,\"1892\":1,\"1893\":5,\"1894\":2,\"1895\":2,\"1906\":4,\"1917\":1,\"1918\":1,\"1925\":1,\"1930\":1,\"1932\":1,\"1984\":3,\"1985\":5,\"1990\":1,\"1993\":3}}],[\"active和v\",{\"1\":{\"1441\":1}}],[\"active\",{\"1\":{\"520\":1,\"1353\":2,\"1441\":5,\"1456\":3,\"1855\":1,\"2066\":2}}],[\"action中的方法名\",{\"1\":{\"1451\":1}}],[\"actions中的jia被调用了\",{\"1\":{\"1451\":1}}],[\"actions\",{\"1\":{\"1450\":2,\"1451\":3,\"1454\":2,\"2012\":1,\"2019\":3,\"2020\":1,\"2021\":3}}],[\"action=\",{\"1\":{\"670\":1,\"1231\":1}}],[\"action\",{\"1\":{\"156\":1,\"293\":1,\"670\":1,\"754\":1,\"1888\":1,\"1889\":1,\"1890\":1,\"1891\":1,\"1892\":1,\"1893\":1,\"1894\":1,\"1895\":1,\"1896\":1,\"2012\":1,\"2020\":2}}],[\"accuracy\",{\"1\":{\"1102\":1,\"1680\":2}}],[\"accumulator\",{\"1\":{\"438\":6,\"1680\":1}}],[\"access\",{\"1\":{\"1576\":1,\"1577\":2,\"1578\":2,\"1612\":2,\"1613\":2}}],[\"accessed\",{\"1\":{\"1305\":1}}],[\"accessible\",{\"1\":{\"623\":1}}],[\"accept标记\",{\"1\":{\"1649\":1}}],[\"accept\",{\"1\":{\"269\":3,\"1648\":1}}],[\"acc\",{\"1\":{\"450\":2,\"458\":6,\"464\":2,\"918\":2,\"1680\":10}}],[\"account\",{\"1\":{\"176\":3}}],[\"accounts\",{\"1\":{\"176\":1}}],[\"abrx主要考点\",{\"1\":{\"1753\":1}}],[\"abrx\",{\"0\":{\"1724\":1}}],[\"ab|cd\",{\"1\":{\"920\":3}}],[\"abbc\",{\"1\":{\"918\":2}}],[\"abb\",{\"1\":{\"918\":3}}],[\"abbr>\",{\"1\":{\"665\":1}}],[\"abab\",{\"1\":{\"910\":2,\"920\":2}}],[\"ababx\",{\"1\":{\"893\":1}}],[\"abax\",{\"1\":{\"893\":1}}],[\"ab\",{\"1\":{\"893\":4,\"910\":3,\"912\":3,\"914\":1,\"918\":4,\"919\":4,\"920\":3,\"1737\":1,\"1751\":1}}],[\"aboutview\",{\"1\":{\"2041\":1}}],[\"about\",{\"1\":{\"1456\":5,\"1458\":2,\"2025\":5,\"2028\":13,\"2041\":2,\"2050\":3,\"2058\":8}}],[\"aborted\",{\"1\":{\"2075\":1}}],[\"abort\",{\"1\":{\"752\":1,\"1581\":2,\"1582\":3,\"2029\":6}}],[\"above\",{\"1\":{\"156\":1}}],[\"abstracthistory\",{\"1\":{\"2027\":1}}],[\"abstract\",{\"1\":{\"1800\":3,\"1807\":1,\"2027\":1}}],[\"absolute\",{\"1\":{\"568\":1,\"580\":1,\"582\":2,\"583\":1,\"598\":1,\"602\":1,\"603\":1,\"764\":1,\"1087\":5,\"1155\":2,\"1259\":1,\"1262\":2,\"1296\":1}}],[\"absolutepath\",{\"1\":{\"239\":5}}],[\"abs\",{\"1\":{\"395\":2,\"884\":1}}],[\"abcc\",{\"1\":{\"918\":2}}],[\"abcabc\",{\"1\":{\"913\":8}}],[\"abcdcdxj\",{\"1\":{\"912\":1}}],[\"abcdabxj\",{\"1\":{\"912\":2}}],[\"abcd\",{\"1\":{\"519\":1,\"789\":3,\"918\":4,\"923\":6}}],[\"abc\",{\"1\":{\"49\":2,\"307\":1,\"345\":3,\"516\":1,\"519\":5,\"535\":1,\"801\":1,\"913\":10,\"918\":3,\"920\":2,\"967\":1,\"984\":8,\"1112\":6,\"1120\":2,\"1123\":4}}],[\"ar\",{\"1\":{\"1722\":1,\"1723\":1}}],[\"ary\",{\"1\":{\"1199\":2}}],[\"are\",{\"1\":{\"772\":2,\"958\":1,\"1088\":1,\"1804\":1,\"1956\":1,\"2065\":2,\"2075\":1}}],[\"area\",{\"1\":{\"666\":1}}],[\"arcto\",{\"1\":{\"717\":1}}],[\"arc\",{\"1\":{\"716\":1}}],[\"around\",{\"1\":{\"588\":1}}],[\"arg\",{\"1\":{\"1407\":5,\"1794\":3}}],[\"arg2\",{\"1\":{\"995\":1}}],[\"arg1\",{\"1\":{\"995\":1}}],[\"args=\",{\"1\":{\"408\":3}}],[\"args\",{\"1\":{\"402\":1,\"421\":2,\"428\":3,\"430\":2,\"432\":3,\"463\":2,\"464\":5,\"1039\":3,\"1187\":2,\"1772\":2,\"1778\":1,\"1785\":4,\"1792\":9,\"1815\":2,\"1824\":4,\"1923\":3,\"1924\":3,\"1925\":4,\"1979\":2,\"1993\":5,\"1998\":2}}],[\"arguments对象\",{\"1\":{\"1015\":1}}],[\"arguments对象实现\",{\"0\":{\"486\":1}}],[\"arguments伪数组对象的length属性是调用函数时实际参数的个数\",{\"1\":{\"951\":1}}],[\"arguments\",{\"0\":{\"932\":1},\"1\":{\"239\":2,\"460\":1,\"461\":1,\"486\":4,\"487\":3,\"932\":6,\"951\":2,\"953\":3,\"995\":1,\"1015\":6,\"1035\":1,\"1036\":1,\"1335\":2,\"1446\":2,\"1815\":1,\"1816\":1,\"1817\":1,\"1824\":1,\"1975\":3,\"1978\":4,\"1979\":1,\"2020\":1}}],[\"article>\",{\"1\":{\"662\":1,\"694\":1}}],[\"article\",{\"1\":{\"219\":1,\"1087\":1}}],[\"arrtext\",{\"1\":{\"1120\":3}}],[\"arr2\",{\"1\":{\"842\":2,\"854\":4,\"864\":2}}],[\"arr1\",{\"1\":{\"842\":2}}],[\"arrry\",{\"1\":{\"436\":1}}],[\"arr为原始数组\",{\"1\":{\"419\":1}}],[\"arr\",{\"1\":{\"416\":8,\"418\":7,\"419\":8,\"439\":4,\"449\":5,\"450\":4,\"452\":2,\"453\":6,\"455\":3,\"456\":4,\"457\":2,\"458\":2,\"486\":4,\"487\":5,\"488\":4,\"493\":2,\"494\":2,\"822\":6,\"835\":5,\"840\":1,\"842\":1,\"843\":10,\"844\":4,\"845\":3,\"846\":16,\"847\":5,\"848\":2,\"849\":2,\"851\":8,\"853\":9,\"854\":26,\"855\":11,\"856\":14,\"857\":2,\"864\":6,\"865\":12,\"868\":2,\"869\":2,\"871\":4,\"944\":4,\"945\":10,\"946\":10,\"947\":2,\"1038\":5,\"1058\":2,\"1063\":6,\"1065\":3,\"1066\":4,\"1376\":3,\"1392\":3,\"1395\":4,\"1785\":1,\"1915\":4,\"1917\":2,\"1923\":7,\"1925\":4,\"1993\":1}}],[\"arrayexpression\",{\"1\":{\"1975\":1,\"1978\":3,\"1979\":1}}],[\"arrayinstrumentations\",{\"1\":{\"1923\":5,\"1924\":2,\"1925\":2,\"1993\":6}}],[\"array<historystatevalue>\",{\"1\":{\"2058\":1}}],[\"array<\",{\"1\":{\"2029\":1,\"2060\":1,\"2061\":1,\"2074\":1}}],[\"array<astattr>\",{\"1\":{\"1791\":1}}],[\"array<any>\",{\"1\":{\"1785\":2,\"1786\":1}}],[\"array<vnode>\",{\"1\":{\"1358\":2,\"1788\":1,\"1802\":2}}],[\"arraykeys\",{\"1\":{\"1785\":1}}],[\"arraymethods\",{\"1\":{\"1785\":4}}],[\"arrayproto\",{\"1\":{\"1785\":3}}],[\"array时返回的是object\",{\"1\":{\"966\":1}}],[\"arraybuffer\",{\"1\":{\"773\":1}}],[\"array\",{\"0\":{\"445\":1,\"446\":1},\"1\":{\"192\":1,\"200\":1,\"410\":12,\"411\":12,\"412\":10,\"413\":11,\"414\":5,\"415\":14,\"416\":10,\"417\":8,\"418\":1,\"419\":1,\"425\":1,\"428\":2,\"436\":1,\"438\":2,\"441\":2,\"443\":2,\"445\":1,\"446\":1,\"450\":1,\"451\":2,\"452\":1,\"453\":1,\"455\":1,\"457\":2,\"469\":2,\"472\":1,\"486\":1,\"493\":1,\"840\":1,\"841\":8,\"842\":1,\"857\":3,\"864\":2,\"871\":2,\"966\":1,\"967\":4,\"995\":14,\"1040\":2,\"1063\":5,\"1065\":1,\"1066\":1,\"1358\":1,\"1393\":3,\"1428\":2,\"1446\":1,\"1785\":5,\"1786\":2,\"1789\":1,\"1792\":1,\"1804\":1,\"1814\":1,\"1816\":2,\"1878\":1,\"1917\":2,\"1918\":2,\"1920\":1,\"1923\":2,\"1924\":1,\"1925\":2,\"1927\":1,\"1948\":1,\"1949\":1,\"1951\":4,\"1969\":1,\"1993\":7}}],[\"arrow\",{\"1\":{\"148\":3}}],[\"arising\",{\"1\":{\"156\":1}}],[\"ariacurrentvalue\",{\"1\":{\"2032\":1,\"2064\":3,\"2066\":1}}],[\"arial\",{\"1\":{\"1267\":1}}],[\"aria\",{\"1\":{\"143\":4,\"681\":2,\"2064\":1,\"2066\":1}}],[\"awesome\",{\"1\":{\"143\":5,\"623\":4,\"1559\":1}}],[\"await\",{\"1\":{\"134\":2,\"491\":1,\"499\":1,\"1187\":1,\"1188\":2,\"1189\":2,\"1897\":1,\"1987\":1}}],[\"asrootdata\",{\"1\":{\"1366\":1,\"1804\":2,\"1836\":1}}],[\"ascii\",{\"1\":{\"812\":1,\"944\":1,\"1154\":1,\"1569\":2,\"1639\":2}}],[\"asin\",{\"1\":{\"884\":1}}],[\"aside>\",{\"1\":{\"662\":1,\"694\":1}}],[\"asilu\",{\"1\":{\"338\":1}}],[\"asp\",{\"1\":{\"219\":1}}],[\"assigned\",{\"1\":{\"1804\":1}}],[\"assign会将源对象的所有属性复制到目标对象上\",{\"1\":{\"1053\":1}}],[\"assignment\",{\"1\":{\"779\":1,\"1358\":1}}],[\"assign\",{\"0\":{\"1053\":1},\"1\":{\"469\":1,\"1053\":2,\"1094\":5,\"2020\":1,\"2021\":1,\"2051\":1,\"2053\":1,\"2055\":1,\"2058\":4,\"2061\":1,\"2065\":1,\"2070\":1}}],[\"assertion\",{\"1\":{\"915\":1}}],[\"assert\",{\"1\":{\"403\":2,\"2027\":1}}],[\"assetmodulefilename\",{\"1\":{\"142\":2}}],[\"assets\",{\"1\":{\"142\":1,\"156\":2,\"1427\":1}}],[\"asset\",{\"1\":{\"142\":15,\"143\":1,\"1825\":1,\"1828\":3}}],[\"associated\",{\"1\":{\"156\":1}}],[\"astnode\",{\"1\":{\"1795\":3}}],[\"astelement\",{\"1\":{\"1791\":2,\"1796\":1}}],[\"ast\",{\"0\":{\"1978\":1},\"1\":{\"155\":11,\"1353\":3,\"1368\":1,\"1388\":1,\"1392\":1,\"1407\":1,\"1428\":3,\"1790\":4,\"1791\":5,\"1792\":1,\"1795\":1,\"1796\":4,\"1797\":1,\"1802\":1,\"1973\":1,\"1974\":9,\"1975\":3,\"1976\":6,\"1977\":12,\"1978\":5,\"1979\":2}}],[\"asyncmeta\",{\"1\":{\"1788\":1}}],[\"async的实现原理\",{\"0\":{\"1772\":1}}],[\"asynchronous\",{\"1\":{\"1572\":1}}],[\"asyncfactory\",{\"1\":{\"1358\":1,\"1394\":3,\"1788\":3,\"1789\":1,\"1802\":1}}],[\"async函数是generator函数的一种语法糖\",{\"1\":{\"1187\":1}}],[\"async和await\",{\"0\":{\"1185\":1},\"2\":{\"1191\":1,\"1774\":1}}],[\"async><\",{\"1\":{\"675\":1}}],[\"asyncio\",{\"1\":{\"408\":2}}],[\"async\",{\"1\":{\"134\":1,\"408\":1,\"491\":1,\"499\":1,\"675\":1,\"1187\":2,\"1188\":1,\"1189\":1,\"1227\":1,\"1486\":1,\"1772\":2,\"1854\":1,\"1897\":1,\"1987\":1}}],[\"as\",{\"1\":{\"50\":3,\"51\":1,\"156\":1,\"378\":2,\"403\":1,\"404\":1,\"1303\":2,\"1304\":2,\"1310\":4,\"1319\":1,\"1320\":1,\"1655\":1,\"1656\":2,\"1659\":1,\"1661\":1,\"1662\":1,\"1663\":2,\"1665\":1,\"1666\":1,\"1667\":1,\"1669\":1,\"1670\":1,\"1671\":1,\"1673\":1,\"1674\":1,\"1789\":1,\"1804\":5,\"2045\":1,\"2047\":6,\"2058\":2,\"2062\":1,\"2064\":2,\"2065\":5,\"2069\":2,\"2084\":1}}],[\"also\",{\"1\":{\"2058\":1,\"2075\":1}}],[\"altkey\",{\"1\":{\"2065\":1}}],[\"altkey和metakey属性\",{\"1\":{\"1154\":1}}],[\"alt和meta\",{\"1\":{\"1154\":3}}],[\"altitudeaccuracy\",{\"1\":{\"1102\":1}}],[\"altitude\",{\"1\":{\"1102\":1}}],[\"alt\",{\"1\":{\"666\":3,\"703\":1,\"1149\":2,\"1205\":1,\"1370\":1,\"2065\":1}}],[\"alt=\",{\"1\":{\"666\":2,\"1150\":1}}],[\"alternate\",{\"1\":{\"644\":4}}],[\"alice\",{\"1\":{\"2019\":1,\"2045\":2,\"2099\":3}}],[\"alias\",{\"1\":{\"1392\":2,\"1825\":2}}],[\"align\",{\"1\":{\"589\":1,\"590\":2,\"596\":1,\"604\":1,\"625\":2,\"669\":2,\"1148\":1,\"1252\":4}}],[\"alive>\",{\"1\":{\"1465\":2,\"1800\":1}}],[\"alive\",{\"1\":{\"269\":1,\"1465\":2}}],[\"alg\",{\"1\":{\"365\":1}}],[\"already\",{\"1\":{\"275\":1,\"1352\":1,\"1804\":6}}],[\"allow\",{\"1\":{\"1576\":1,\"1577\":2,\"1578\":2,\"1612\":2}}],[\"allowed\",{\"1\":{\"958\":2}}],[\"allowdrop\",{\"1\":{\"765\":4}}],[\"allies\",{\"1\":{\"895\":1}}],[\"allargs\",{\"1\":{\"463\":4,\"1039\":4}}],[\"all\",{\"0\":{\"1340\":1,\"1778\":1},\"1\":{\"156\":1,\"304\":2,\"373\":1,\"623\":1,\"641\":1,\"651\":1,\"772\":1,\"1111\":3,\"1340\":2,\"1577\":1,\"1578\":1,\"1792\":1}}],[\"alert是window的方法\",{\"1\":{\"1182\":1}}],[\"alert\",{\"1\":{\"41\":1,\"44\":1,\"490\":2,\"772\":2,\"821\":1,\"1025\":3,\"1080\":1,\"1081\":1,\"1086\":6,\"1088\":5,\"1091\":6,\"1137\":1,\"1143\":1,\"1150\":3,\"1158\":2,\"1162\":1,\"1182\":1,\"1415\":1,\"1467\":2,\"1486\":1,\"1580\":2,\"1872\":2,\"1879\":2,\"2061\":1}}],[\"alerter\",{\"1\":{\"40\":1,\"41\":1,\"42\":5,\"44\":1,\"45\":5}}],[\"always\",{\"1\":{\"15\":1}}],[\"apr\",{\"1\":{\"1534\":4,\"1537\":2,\"1540\":1}}],[\"apt\",{\"1\":{\"94\":1}}],[\"app<\",{\"1\":{\"2050\":1}}],[\"app2\",{\"1\":{\"2047\":6}}],[\"app1\",{\"1\":{\"2047\":6}}],[\"apps\",{\"1\":{\"2029\":1}}],[\"app获取到具体的\",{\"1\":{\"1998\":1}}],[\"appear\",{\"1\":{\"1441\":1}}],[\"appendto\",{\"1\":{\"1208\":1,\"1209\":3}}],[\"appendchild\",{\"1\":{\"474\":1,\"480\":2,\"483\":1,\"765\":2,\"773\":1,\"1112\":2,\"1118\":2,\"1120\":2,\"1123\":2,\"1124\":1,\"1208\":4,\"1789\":1,\"1878\":2}}],[\"append+pop\",{\"1\":{\"390\":1}}],[\"append将列表作为一个整体对象加入到a后面\",{\"1\":{\"390\":1}}],[\"append\",{\"1\":{\"246\":1,\"379\":1,\"1208\":2,\"1209\":3,\"1232\":1,\"1239\":4,\"1270\":3,\"1272\":1}}],[\"appendfilesync\",{\"0\":{\"246\":1},\"1\":{\"243\":1,\"246\":2}}],[\"appendfile\",{\"0\":{\"246\":1},\"1\":{\"243\":1,\"246\":3}}],[\"appversion\",{\"1\":{\"1091\":2}}],[\"appname\",{\"1\":{\"1091\":2}}],[\"appminorversion\",{\"1\":{\"1091\":1}}],[\"appcodename\",{\"1\":{\"1091\":1}}],[\"appdata\",{\"1\":{\"390\":1,\"402\":5,\"403\":1,\"404\":4,\"405\":18,\"408\":4}}],[\"app上\",{\"1\":{\"362\":1}}],[\"app实例在运行过程中\",{\"1\":{\"309\":1}}],[\"apple\",{\"1\":{\"701\":1}}],[\"application\",{\"1\":{\"294\":3,\"335\":1,\"345\":1,\"476\":1,\"672\":1,\"673\":1,\"674\":2,\"769\":1,\"1570\":1,\"1577\":1,\"1589\":1,\"1607\":1,\"1609\":1,\"1630\":1,\"1634\":2,\"1636\":1}}],[\"applytoparams\",{\"1\":{\"2045\":9}}],[\"apply方法的参数都是对象\",{\"1\":{\"995\":1}}],[\"apply\",{\"1\":{\"156\":2,\"421\":1,\"428\":1,\"429\":1,\"432\":1,\"460\":1,\"461\":1,\"487\":2,\"990\":1,\"995\":16,\"996\":1,\"1035\":1,\"1036\":1,\"1446\":1,\"1663\":2,\"1680\":1,\"1785\":1,\"1815\":1,\"1817\":1,\"1824\":2,\"1923\":2,\"1924\":2,\"1925\":2,\"1993\":3,\"2020\":1}}],[\"app\",{\"0\":{\"36\":1},\"1\":{\"34\":1,\"35\":2,\"36\":1,\"124\":1,\"143\":1,\"149\":1,\"292\":4,\"294\":4,\"301\":3,\"304\":8,\"305\":3,\"306\":1,\"307\":1,\"313\":2,\"314\":3,\"315\":2,\"316\":4,\"317\":4,\"319\":1,\"321\":3,\"329\":5,\"332\":2,\"343\":1,\"349\":6,\"350\":6,\"355\":8,\"359\":1,\"362\":4,\"1422\":1,\"1427\":5,\"1433\":1,\"1446\":1,\"1450\":2,\"1468\":2,\"1484\":9,\"1516\":1,\"1518\":8,\"1543\":5,\"1573\":3,\"1576\":1,\"1577\":1,\"1578\":1,\"1834\":2,\"1835\":1,\"1872\":1,\"1943\":1,\"1944\":14,\"1997\":12,\"1998\":8,\"2010\":5,\"2016\":6,\"2025\":2,\"2029\":4,\"2031\":1,\"2041\":3,\"2047\":31,\"2050\":2,\"2053\":3,\"2054\":4,\"2058\":2,\"2068\":1}}],[\"api文档\",{\"1\":{\"2040\":1}}],[\"api2\",{\"1\":{\"1445\":3}}],[\"api1\",{\"1\":{\"1445\":3}}],[\"apis\",{\"1\":{\"772\":2}}],[\"apifox\",{\"1\":{\"341\":2}}],[\"apipost\",{\"1\":{\"341\":2}}],[\"api\",{\"0\":{\"339\":1,\"705\":1,\"711\":1,\"741\":1,\"764\":1,\"1051\":1,\"1102\":1,\"1131\":1,\"1132\":1,\"1430\":1,\"1485\":1,\"1503\":1,\"1510\":1,\"1511\":1,\"1512\":1,\"1518\":1,\"1786\":1,\"1823\":1,\"1946\":1},\"1\":{\"23\":1,\"57\":1,\"123\":2,\"134\":5,\"147\":2,\"149\":1,\"154\":1,\"156\":2,\"216\":5,\"241\":1,\"264\":2,\"305\":1,\"307\":1,\"335\":2,\"338\":2,\"339\":2,\"340\":1,\"355\":1,\"362\":2,\"708\":1,\"711\":3,\"712\":1,\"762\":1,\"765\":1,\"768\":1,\"769\":1,\"771\":3,\"772\":3,\"1099\":4,\"1100\":1,\"1101\":1,\"1102\":2,\"1105\":2,\"1193\":1,\"1194\":2,\"1197\":1,\"1202\":1,\"1203\":2,\"1204\":1,\"1205\":1,\"1207\":1,\"1213\":1,\"1219\":1,\"1225\":1,\"1231\":1,\"1232\":1,\"1396\":2,\"1431\":1,\"1433\":1,\"1436\":1,\"1441\":1,\"1445\":1,\"1446\":2,\"1468\":1,\"1480\":2,\"1485\":14,\"1486\":2,\"1494\":2,\"1499\":3,\"1500\":1,\"1501\":1,\"1518\":5,\"1519\":1,\"1572\":1,\"1587\":1,\"1589\":1,\"1594\":4,\"1600\":1,\"1601\":1,\"1612\":1,\"1630\":1,\"1647\":1,\"1662\":1,\"1782\":1,\"1786\":1,\"1865\":1,\"1923\":1,\"1946\":1,\"1948\":2,\"1949\":1,\"1953\":1,\"2002\":1,\"2026\":1,\"2035\":1,\"2041\":1,\"2050\":2}}],[\"annotations\",{\"1\":{\"1655\":4}}],[\"anna\",{\"1\":{\"405\":1}}],[\"animator\",{\"1\":{\"1680\":4}}],[\"animate\",{\"0\":{\"1224\":1},\"1\":{\"1220\":1,\"1224\":10,\"1225\":3,\"1441\":6}}],[\"animated\",{\"1\":{\"1203\":1,\"1441\":1}}],[\"animation\",{\"0\":{\"640\":1},\"1\":{\"644\":8},\"2\":{\"653\":1}}],[\"anchorindex\",{\"1\":{\"1968\":3,\"1969\":3}}],[\"anchor\",{\"1\":{\"915\":1,\"1946\":2,\"1948\":2,\"1951\":4,\"1954\":3,\"1955\":1,\"1956\":1,\"1962\":6,\"1968\":2,\"1969\":6,\"2058\":1}}],[\"aname\",{\"1\":{\"832\":2}}],[\"angle\",{\"1\":{\"720\":2}}],[\"angular\",{\"0\":{\"45\":2},\"1\":{\"25\":1,\"45\":18}}],[\"anticlockwise\",{\"1\":{\"716\":3}}],[\"anonymous\",{\"1\":{\"493\":1,\"496\":1}}],[\"an\",{\"1\":{\"156\":1,\"958\":1,\"1663\":2,\"1803\":1,\"1804\":2,\"2058\":1}}],[\"anyway\",{\"1\":{\"2065\":2}}],[\"any\",{\"1\":{\"156\":3,\"1358\":1,\"1428\":1,\"1785\":1,\"1786\":2,\"1792\":1,\"1797\":1,\"1803\":2,\"1804\":3,\"2029\":1,\"2045\":1,\"2062\":1}}],[\"and\",{\"1\":{\"17\":1,\"156\":5,\"397\":2,\"651\":2,\"666\":1,\"925\":15,\"1154\":2,\"1265\":1,\"1274\":2,\"1316\":1,\"1572\":1,\"1799\":2,\"1804\":1,\"1805\":1,\"2058\":2,\"2061\":1,\"2075\":1}}],[\"ajax\",{\"0\":{\"1226\":1,\"1227\":1,\"1442\":1,\"1572\":1,\"1574\":1,\"1583\":1,\"1587\":1},\"1\":{\"23\":1,\"158\":1,\"219\":1,\"293\":1,\"295\":2,\"476\":2,\"1173\":1,\"1177\":1,\"1193\":1,\"1194\":1,\"1195\":1,\"1226\":3,\"1227\":3,\"1228\":1,\"1229\":1,\"1383\":1,\"1410\":1,\"1442\":1,\"1572\":5,\"1576\":1,\"1577\":1,\"1579\":1,\"1593\":1,\"1601\":1,\"1602\":1,\"1603\":1,\"1612\":2,\"1646\":1,\"1647\":1},\"2\":{\"1597\":1,\"1618\":1}}],[\"a\",{\"0\":{\"533\":1,\"1080\":1,\"1743\":1},\"1\":{\"7\":1,\"29\":1,\"49\":1,\"50\":1,\"66\":4,\"71\":5,\"156\":2,\"165\":1,\"259\":1,\"284\":1,\"286\":1,\"293\":1,\"295\":1,\"380\":2,\"382\":3,\"383\":2,\"384\":1,\"395\":8,\"396\":19,\"397\":3,\"398\":3,\"399\":2,\"401\":1,\"402\":1,\"404\":2,\"421\":1,\"428\":1,\"430\":1,\"432\":1,\"433\":2,\"436\":1,\"438\":1,\"441\":1,\"443\":4,\"466\":1,\"471\":3,\"472\":6,\"482\":6,\"494\":1,\"496\":5,\"520\":1,\"533\":1,\"535\":1,\"662\":1,\"664\":1,\"670\":1,\"737\":1,\"780\":3,\"783\":6,\"785\":1,\"789\":15,\"792\":5,\"793\":2,\"795\":3,\"801\":1,\"805\":11,\"806\":10,\"808\":4,\"809\":4,\"828\":1,\"829\":1,\"830\":2,\"832\":8,\"835\":2,\"847\":9,\"848\":6,\"849\":4,\"855\":9,\"888\":3,\"894\":2,\"902\":4,\"903\":1,\"908\":1,\"912\":1,\"916\":2,\"918\":12,\"919\":4,\"921\":1,\"923\":2,\"924\":6,\"925\":1,\"933\":6,\"934\":2,\"944\":5,\"947\":2,\"948\":13,\"951\":4,\"958\":11,\"978\":2,\"983\":5,\"985\":6,\"995\":27,\"996\":1,\"1012\":3,\"1015\":4,\"1025\":2,\"1028\":1,\"1029\":2,\"1030\":14,\"1053\":6,\"1054\":1,\"1063\":3,\"1064\":4,\"1065\":3,\"1066\":2,\"1067\":5,\"1070\":1,\"1071\":1,\"1072\":1,\"1086\":7,\"1105\":8,\"1144\":4,\"1145\":2,\"1146\":3,\"1149\":1,\"1156\":1,\"1188\":2,\"1201\":25,\"1205\":4,\"1267\":2,\"1301\":2,\"1302\":3,\"1303\":1,\"1304\":1,\"1305\":3,\"1306\":3,\"1309\":16,\"1310\":3,\"1312\":2,\"1313\":4,\"1314\":4,\"1315\":10,\"1318\":10,\"1319\":15,\"1320\":8,\"1332\":13,\"1340\":3,\"1379\":2,\"1386\":2,\"1394\":8,\"1437\":4,\"1438\":3,\"1439\":3,\"1462\":1,\"1482\":1,\"1488\":2,\"1493\":2,\"1499\":3,\"1560\":1,\"1569\":2,\"1586\":1,\"1601\":1,\"1609\":3,\"1613\":1,\"1663\":2,\"1722\":2,\"1723\":1,\"1725\":1,\"1726\":1,\"1727\":1,\"1728\":4,\"1735\":1,\"1737\":7,\"1740\":1,\"1741\":2,\"1742\":1,\"1745\":4,\"1746\":3,\"1751\":4,\"1752\":2,\"1753\":6,\"1769\":3,\"1786\":2,\"1788\":2,\"1792\":8,\"1799\":3,\"1804\":8,\"1854\":3,\"1865\":2,\"1897\":2,\"1974\":2,\"2050\":1,\"2058\":2,\"2064\":1,\"2065\":2,\"2066\":1}}],[\"mnist\",{\"1\":{\"1656\":13}}],[\"md4\",{\"1\":{\"2101\":1}}],[\"md5\",{\"1\":{\"2101\":9}}],[\"md\",{\"1\":{\"1427\":1,\"2040\":1}}],[\"mdn\",{\"1\":{\"614\":1,\"619\":1,\"636\":1,\"666\":1,\"958\":1,\"1131\":1,\"1491\":1}}],[\"mm\",{\"1\":{\"893\":2,\"1397\":1}}],[\"mb\",{\"1\":{\"768\":2}}],[\"m++\",{\"1\":{\"740\":1}}],[\"mutableinstrumentation\",{\"1\":{\"1929\":1}}],[\"mutableinstrumentations\",{\"1\":{\"1928\":8,\"1929\":2,\"1930\":6,\"1931\":3,\"1932\":1}}],[\"mutate\",{\"1\":{\"1956\":1}}],[\"mutated\",{\"1\":{\"1803\":1,\"1804\":1}}],[\"mutating\",{\"1\":{\"1803\":1,\"1804\":1}}],[\"mutationobserverconstructor\",{\"1\":{\"1822\":1}}],[\"mutationobserver\",{\"1\":{\"1560\":1,\"1777\":2,\"1822\":4}}],[\"mutations中的方法名\",{\"1\":{\"1451\":1}}],[\"mutations中的jia被调用了\",{\"1\":{\"1451\":1}}],[\"mutations\",{\"1\":{\"1450\":2,\"1451\":2,\"1454\":2}}],[\"mutator\",{\"1\":{\"1785\":1}}],[\"muted\",{\"1\":{\"748\":1,\"749\":1,\"750\":3,\"752\":1}}],[\"multiline\",{\"1\":{\"923\":2,\"924\":2}}],[\"multimedia\",{\"1\":{\"666\":1}}],[\"multipart\",{\"1\":{\"1592\":1,\"1607\":1,\"1634\":1}}],[\"multipage\",{\"1\":{\"1560\":1}}],[\"multiple>\",{\"1\":{\"771\":1}}],[\"multiple\",{\"1\":{\"756\":1,\"772\":2,\"773\":1,\"1205\":1}}],[\"multiprocessing模块\",{\"1\":{\"408\":1}}],[\"multipurpose\",{\"1\":{\"294\":1}}],[\"must\",{\"1\":{\"421\":1,\"428\":1,\"933\":1,\"1778\":1,\"1804\":1}}],[\"ms\",{\"1\":{\"641\":1,\"875\":1,\"1265\":2}}],[\"msohtmlclip1\",{\"1\":{\"390\":1,\"402\":5,\"403\":1,\"404\":4,\"405\":18,\"408\":4}}],[\"msg=\",{\"1\":{\"1834\":1,\"1840\":1}}],[\"msg\",{\"1\":{\"41\":2,\"429\":2,\"1025\":2,\"1358\":9,\"1422\":2,\"1497\":1,\"1834\":1,\"1835\":1}}],[\"mpeg\",{\"1\":{\"294\":1}}],[\"mp3\",{\"1\":{\"294\":1,\"668\":3,\"747\":3}}],[\"mp4\",{\"1\":{\"263\":5,\"292\":4,\"294\":2,\"747\":3}}],[\"mtime\",{\"1\":{\"260\":1}}],[\"mk\",{\"1\":{\"257\":1}}],[\"mkdirsync\",{\"1\":{\"256\":1,\"257\":3}}],[\"mkdir\",{\"0\":{\"257\":1},\"1\":{\"256\":1,\"257\":4}}],[\"mrqid4s3k\",{\"1\":{\"176\":1}}],[\"might\",{\"1\":{\"2065\":1}}],[\"missing\",{\"1\":{\"1804\":1}}],[\"microtask\",{\"1\":{\"1560\":1}}],[\"microchip\",{\"1\":{\"143\":1}}],[\"mixinname\",{\"1\":{\"1311\":2}}],[\"mixins\",{\"0\":{\"1333\":1},\"1\":{\"1259\":1,\"1300\":3,\"1308\":1,\"1313\":1,\"1314\":1,\"1431\":1}}],[\"mixin\",{\"0\":{\"1291\":1,\"1307\":1,\"1431\":1,\"1826\":1},\"1\":{\"1252\":2,\"1259\":1,\"1261\":1,\"1262\":1,\"1273\":3,\"1274\":1,\"1282\":2,\"1284\":1,\"1292\":2,\"1293\":2,\"1294\":1,\"1295\":1,\"1296\":1,\"1299\":2,\"1302\":1,\"1305\":1,\"1306\":1,\"1307\":4,\"1309\":2,\"1313\":3,\"1314\":3,\"1317\":2,\"1324\":1,\"1333\":1,\"1337\":4,\"1431\":13,\"1432\":1,\"1518\":2,\"1825\":2,\"1826\":4,\"2016\":1,\"2026\":2,\"2031\":1}}],[\"mixed\",{\"1\":{\"192\":2}}],[\"milliseconds\",{\"1\":{\"877\":2}}],[\"mint\",{\"1\":{\"1470\":1}}],[\"minutes\",{\"1\":{\"875\":1,\"877\":2,\"1105\":4}}],[\"min=\",{\"1\":{\"696\":3}}],[\"minvalue\",{\"1\":{\"418\":6}}],[\"min项\",{\"1\":{\"417\":1}}],[\"min\",{\"1\":{\"417\":6,\"499\":1,\"623\":1,\"651\":5,\"696\":1,\"757\":1,\"760\":1,\"794\":2,\"881\":3,\"1038\":1,\"1201\":4,\"1207\":2,\"1219\":1,\"1583\":1,\"1961\":1}}],[\"ministore\",{\"1\":{\"1451\":1}}],[\"mini\",{\"0\":{\"2006\":1},\"1\":{\"1289\":2,\"1665\":1}}],[\"minindex\",{\"1\":{\"411\":5}}],[\"minicssextractplugin\",{\"1\":{\"159\":1}}],[\"midnightblue\",{\"1\":{\"1266\":2}}],[\"middata用于保存每次调用的结果\",{\"1\":{\"1040\":1}}],[\"middata\",{\"1\":{\"1040\":4}}],[\"middle\",{\"1\":{\"625\":1,\"669\":1,\"730\":1,\"732\":2,\"1289\":2,\"1290\":6}}],[\"middleware\",{\"1\":{\"134\":1,\"309\":1}}],[\"mid\",{\"1\":{\"414\":3,\"1188\":2}}],[\"mime类型\",{\"1\":{\"1609\":1}}],[\"mimetype\",{\"1\":{\"771\":2}}],[\"mime\",{\"1\":{\"294\":4,\"672\":1,\"693\":2,\"1161\":2}}],[\"mirror\",{\"1\":{\"228\":2}}],[\"mirrors\",{\"1\":{\"2\":1,\"228\":2}}],[\"miter\",{\"1\":{\"708\":2}}],[\"mit\",{\"1\":{\"64\":1,\"156\":2}}],[\"me<\",{\"1\":{\"1353\":1,\"1880\":1}}],[\"members\",{\"1\":{\"1305\":1}}],[\"memory=false\",{\"1\":{\"1655\":1}}],[\"memory\",{\"1\":{\"1027\":1,\"1655\":1}}],[\"medium\",{\"1\":{\"1277\":2}}],[\"media\",{\"1\":{\"651\":2,\"1155\":1}}],[\"meeting\",{\"1\":{\"1105\":4}}],[\"message\",{\"1\":{\"1105\":4,\"1407\":1,\"1445\":1,\"1458\":3,\"1459\":6,\"1461\":2,\"1465\":1,\"1794\":3,\"2075\":1}}],[\"messages\",{\"0\":{\"45\":1},\"1\":{\"45\":7}}],[\"meaning\",{\"1\":{\"2065\":1}}],[\"measure\",{\"1\":{\"1799\":1,\"1805\":1}}],[\"measuretext\",{\"0\":{\"731\":1},\"1\":{\"731\":1,\"732\":1}}],[\"meat\",{\"1\":{\"830\":1}}],[\"metric\",{\"1\":{\"1680\":7}}],[\"methos\",{\"1\":{\"1486\":2}}],[\"methodstopatch\",{\"1\":{\"1785\":2}}],[\"methods中的函数\",{\"1\":{\"1423\":2}}],[\"methods\",{\"0\":{\"1861\":1},\"1\":{\"1368\":2,\"1415\":1,\"1431\":1,\"1437\":1,\"1438\":1,\"1439\":1,\"1453\":5,\"1485\":1,\"1511\":1,\"1799\":2,\"1803\":1,\"1804\":13,\"1861\":2,\"1880\":2,\"1903\":1}}],[\"method\",{\"0\":{\"2107\":1},\"1\":{\"282\":2,\"285\":3,\"294\":5,\"295\":2,\"305\":1,\"476\":2,\"1181\":1,\"1201\":2,\"1586\":1,\"1587\":1,\"1609\":2,\"1785\":4,\"1804\":2,\"1861\":1,\"1924\":3,\"1925\":6,\"1993\":6}}],[\"meter>\",{\"1\":{\"696\":3}}],[\"meter\",{\"1\":{\"696\":1}}],[\"metakey\",{\"1\":{\"2065\":1}}],[\"metadata\",{\"1\":{\"748\":1}}],[\"meta\",{\"0\":{\"659\":1},\"1\":{\"1273\":4,\"1370\":1,\"1467\":4,\"2028\":2,\"2041\":1,\"2044\":1,\"2052\":2,\"2053\":3,\"2065\":1}}],[\"me\",{\"1\":{\"236\":2,\"238\":1,\"1879\":2,\"1880\":1}}],[\"merchantability\",{\"1\":{\"156\":1}}],[\"merging\",{\"1\":{\"15\":1,\"1799\":1}}],[\"mergeoptions\",{\"1\":{\"1431\":2,\"1799\":1,\"1825\":1,\"1826\":1}}],[\"mergesort\",{\"1\":{\"414\":3}}],[\"merge\",{\"1\":{\"10\":1,\"11\":3,\"13\":1,\"17\":1,\"156\":1,\"414\":2,\"1280\":2}}],[\"mock\",{\"0\":{\"2107\":1}}],[\"mocha\",{\"1\":{\"223\":1}}],[\"mood\",{\"1\":{\"1385\":1}}],[\"mount的时候调用\",{\"1\":{\"1998\":1}}],[\"mountelement\",{\"1\":{\"1879\":2,\"1944\":1,\"1948\":1,\"1951\":2}}],[\"mounted===>onmounted\",{\"1\":{\"1500\":1}}],[\"mounted\",{\"1\":{\"1410\":1,\"1437\":1,\"1438\":1,\"1439\":1,\"1806\":1,\"1953\":1,\"1954\":11}}],[\"mountcomponent\",{\"0\":{\"1954\":1,\"2000\":1},\"1\":{\"1806\":2,\"1879\":2,\"1944\":1,\"1951\":1,\"1954\":1,\"1956\":1,\"1997\":1,\"2000\":3}}],[\"mount\",{\"0\":{\"1999\":1},\"1\":{\"1484\":2,\"1805\":4,\"1825\":1,\"1944\":1,\"1997\":2,\"1998\":5,\"2000\":1,\"2010\":1,\"2047\":2,\"2063\":1}}],[\"mouseevent\",{\"1\":{\"2065\":5}}],[\"mouseenter\",{\"1\":{\"1148\":4,\"1214\":1}}],[\"mouse\",{\"1\":{\"1154\":1}}],[\"mouseup<\",{\"1\":{\"1148\":1}}],[\"mouseup\",{\"1\":{\"1148\":2,\"1214\":1}}],[\"mouseover\",{\"1\":{\"1148\":4,\"1214\":1,\"1217\":2,\"1218\":1,\"1577\":1}}],[\"mouseout\",{\"1\":{\"1148\":4,\"1214\":1,\"1217\":2,\"1218\":1}}],[\"mouseleave\",{\"1\":{\"1148\":4,\"1214\":1}}],[\"mousedown<\",{\"1\":{\"1148\":1}}],[\"mousedown\",{\"1\":{\"1034\":1,\"1148\":2,\"1214\":1}}],[\"mousemove<\",{\"1\":{\"1148\":1}}],[\"mousemove\",{\"1\":{\"1034\":2,\"1148\":2,\"1214\":1}}],[\"moudle1\",{\"1\":{\"35\":1}}],[\"momentum\",{\"1\":{\"1659\":2,\"1665\":1}}],[\"momentum=0\",{\"1\":{\"1659\":3}}],[\"mom\",{\"1\":{\"925\":5}}],[\"mozaudioavailable\",{\"1\":{\"752\":1}}],[\"mozilla\",{\"1\":{\"271\":1,\"659\":1,\"958\":1,\"1105\":1,\"1491\":2,\"1587\":1,\"1607\":1}}],[\"mosaic\",{\"1\":{\"740\":2}}],[\"mov\",{\"1\":{\"673\":1,\"674\":1}}],[\"movie的源为https\",{\"1\":{\"1600\":1}}],[\"movie\",{\"1\":{\"673\":1,\"674\":1}}],[\"moviemodel\",{\"1\":{\"212\":1}}],[\"moved\",{\"1\":{\"1635\":1,\"1969\":3}}],[\"moveby\",{\"1\":{\"1088\":3}}],[\"moveto\",{\"1\":{\"711\":2,\"714\":1,\"717\":1,\"718\":1,\"719\":1,\"1088\":3}}],[\"move\",{\"1\":{\"672\":1,\"674\":1,\"727\":3}}],[\"monorepo\",{\"1\":{\"2040\":2}}],[\"mono\",{\"1\":{\"1265\":2}}],[\"monospace\",{\"1\":{\"621\":1,\"1275\":2}}],[\"mon\",{\"1\":{\"876\":2}}],[\"month\",{\"1\":{\"757\":1,\"875\":1,\"877\":2}}],[\"mongourl\",{\"1\":{\"355\":1}}],[\"mongostore\",{\"1\":{\"355\":2}}],[\"mongoose模块化\",{\"1\":{\"212\":1}}],[\"mongoose会使用集合名称的复数\",{\"1\":{\"191\":1}}],[\"mongoose中的对象\",{\"1\":{\"189\":1}}],[\"mongoose是一个对象文档模型\",{\"1\":{\"189\":1}}],[\"mongoose是一个让我们可以通过node来操作mongodb的模块\",{\"1\":{\"189\":1}}],[\"mongoosejs\",{\"1\":{\"189\":1}}],[\"mongoose\",{\"0\":{\"188\":1},\"1\":{\"190\":1,\"191\":10,\"192\":3,\"193\":1,\"200\":7,\"201\":2,\"202\":2,\"203\":4,\"209\":1,\"210\":1,\"211\":1,\"212\":16}}],[\"mongod\",{\"1\":{\"177\":1}}],[\"mongodb数据库\",{\"1\":{\"191\":1}}],[\"mongodb自动将\",{\"1\":{\"176\":1}}],[\"mongodb不支持\",{\"1\":{\"176\":1}}],[\"mongodb术语\",{\"1\":{\"176\":1}}],[\"mongodb\",{\"0\":{\"169\":1,\"171\":1,\"175\":1},\"1\":{\"171\":2,\"176\":3,\"177\":6,\"181\":1,\"191\":1,\"200\":1,\"205\":1,\"212\":1,\"213\":1,\"355\":1}}],[\"mongo\",{\"1\":{\"177\":1,\"355\":2}}],[\"more\",{\"1\":{\"479\":1}}],[\"modified\",{\"1\":{\"1534\":2,\"1537\":6,\"1613\":1,\"1635\":1}}],[\"modifiers\",{\"1\":{\"1353\":2,\"1368\":3,\"1407\":4}}],[\"modify\",{\"1\":{\"156\":1}}],[\"model绑定的值不能是props传过来的值\",{\"1\":{\"1429\":1}}],[\"model用于组件间通信时默认传递的事件为input\",{\"1\":{\"1358\":1}}],[\"model指令转换为对应的\",{\"1\":{\"1358\":1}}],[\"model指令的inserted钩子函数\",{\"1\":{\"1357\":1}}],[\"model和表单上的完全不同\",{\"1\":{\"1358\":1}}],[\"model是\",{\"1\":{\"1358\":1}}],[\"model时要切记\",{\"1\":{\"1429\":1}}],[\"model时\",{\"1\":{\"1357\":1}}],[\"model的初始值是数组\",{\"1\":{\"1357\":1}}],[\"model的初始值是非数组\",{\"1\":{\"1357\":1}}],[\"model的三个修饰符\",{\"1\":{\"1356\":1}}],[\"model收集的是\",{\"1\":{\"1357\":2}}],[\"model3\",{\"1\":{\"378\":1}}],[\"models中用来保存集合的schema配置\",{\"1\":{\"212\":1}}],[\"models\",{\"1\":{\"212\":2}}],[\"model对象作为集合中的所有文档的表示\",{\"1\":{\"189\":1}}],[\"model\",{\"0\":{\"542\":1,\"1109\":1,\"1347\":1,\"1356\":1},\"1\":{\"189\":1,\"191\":1,\"200\":1,\"212\":1,\"1083\":1,\"1084\":1,\"1353\":1,\"1356\":3,\"1357\":2,\"1358\":13,\"1404\":1,\"1659\":4,\"1661\":1,\"1669\":5,\"1670\":3,\"1671\":3,\"1673\":7,\"1677\":1}}],[\"model=\",{\"1\":{\"45\":1,\"1356\":1,\"1357\":5,\"1358\":2,\"1393\":1,\"1507\":1}}],[\"mode\",{\"1\":{\"124\":2,\"129\":1,\"404\":1,\"546\":1,\"644\":1,\"919\":1,\"958\":5,\"1468\":1,\"1663\":1,\"2025\":1,\"2027\":3,\"2062\":1,\"2063\":2,\"2067\":1}}],[\"mod\",{\"1\":{\"94\":1}}],[\"modulea\",{\"1\":{\"1303\":2}}],[\"module=\",{\"1\":{\"1025\":1}}],[\"moduleid\",{\"1\":{\"37\":5,\"155\":3}}],[\"modulepath\",{\"1\":{\"37\":2}}],[\"module\",{\"1\":{\"35\":4,\"37\":6,\"45\":1,\"47\":2,\"59\":1,\"91\":1,\"122\":2,\"124\":11,\"129\":1,\"138\":4,\"142\":7,\"143\":1,\"155\":3,\"156\":3,\"212\":3,\"236\":1,\"237\":5,\"239\":9,\"240\":1,\"321\":1,\"377\":1,\"405\":1,\"1301\":5,\"1308\":6,\"1309\":2,\"1310\":1,\"1311\":2,\"1445\":1,\"1662\":1,\"1669\":1,\"1670\":1,\"1671\":1,\"1673\":1,\"1796\":1}}],[\"module4\",{\"1\":{\"30\":2,\"31\":1}}],[\"module3\",{\"1\":{\"29\":2,\"31\":1,\"34\":1,\"35\":7,\"124\":2,\"138\":1}}],[\"module2\",{\"1\":{\"27\":2,\"28\":2,\"31\":1,\"34\":1,\"35\":5,\"124\":2,\"138\":1}}],[\"module1\",{\"1\":{\"27\":2,\"28\":2,\"31\":1,\"34\":1,\"35\":4,\"124\":2,\"138\":1}}],[\"modulespec\",{\"1\":{\"377\":1}}],[\"modules去找babel命令实在太麻烦\",{\"1\":{\"148\":1}}],[\"modules文件夹\",{\"1\":{\"59\":1}}],[\"modules\",{\"1\":{\"15\":2,\"34\":1,\"35\":3,\"40\":1,\"42\":2,\"45\":2,\"59\":3,\"66\":2,\"74\":1,\"148\":1,\"150\":4,\"155\":6,\"332\":2,\"1301\":1,\"1305\":1,\"1308\":1,\"1427\":1,\"1454\":1}}],[\"myplugin\",{\"1\":{\"2047\":2}}],[\"mypromise\",{\"1\":{\"1777\":5}}],[\"myall\",{\"1\":{\"1778\":2}}],[\"myapp文件夹下的结构如下所示\",{\"1\":{\"332\":1}}],[\"myapp\",{\"1\":{\"45\":2,\"332\":3}}],[\"mydict2\",{\"1\":{\"1673\":2}}],[\"mydict\",{\"1\":{\"1673\":4}}],[\"mydate\",{\"1\":{\"355\":1}}],[\"mybutton\",{\"1\":{\"1518\":1}}],[\"mybind\",{\"1\":{\"432\":1,\"433\":1}}],[\"myref\",{\"1\":{\"1507\":2}}],[\"myreduce\",{\"1\":{\"438\":2,\"439\":1}}],[\"myschool\",{\"1\":{\"1419\":1}}],[\"myslice\",{\"1\":{\"1397\":1}}],[\"mynull\",{\"1\":{\"980\":2}}],[\"mynew\",{\"1\":{\"421\":1,\"422\":1}}],[\"myimagedata\",{\"1\":{\"738\":1}}],[\"myinstanceof\",{\"1\":{\"424\":1,\"425\":1}}],[\"mymodel\",{\"1\":{\"1659\":2,\"1673\":4}}],[\"mymodule2\",{\"1\":{\"28\":3}}],[\"mymodule\",{\"1\":{\"28\":5,\"29\":8,\"30\":2}}],[\"mymaths\",{\"1\":{\"835\":4}}],[\"mymap\",{\"1\":{\"443\":1}}],[\"myfirstname\",{\"1\":{\"1040\":1}}],[\"myfilter\",{\"1\":{\"441\":2,\"443\":1}}],[\"myfont\",{\"1\":{\"621\":2}}],[\"myforeach\",{\"1\":{\"436\":1}}],[\"myform\",{\"1\":{\"45\":3}}],[\"myflat\",{\"1\":{\"451\":2}}],[\"mycomponent>\",{\"1\":{\"1954\":1}}],[\"mycomponent可以是函数\",{\"1\":{\"1879\":1}}],[\"mycomponent是一个函数\",{\"1\":{\"1879\":1}}],[\"mycomponent是一个对象\",{\"1\":{\"1879\":1}}],[\"mycomponent\",{\"1\":{\"1879\":3,\"1938\":1,\"1953\":3,\"1954\":3}}],[\"mycustomdataset\",{\"1\":{\"1655\":2}}],[\"mycall\",{\"1\":{\"430\":1}}],[\"myclass\",{\"1\":{\"405\":1}}],[\"myeptinput\",{\"1\":{\"405\":1}}],[\"myept\",{\"1\":{\"405\":2}}],[\"mygen\",{\"1\":{\"402\":2}}],[\"mylist\",{\"1\":{\"388\":2}}],[\"myheader\",{\"1\":{\"286\":1}}],[\"my\",{\"1\":{\"17\":7,\"659\":1,\"681\":2,\"834\":1,\"943\":1,\"948\":2,\"1025\":3,\"1040\":1,\"1282\":2,\"1328\":2,\"1419\":1,\"1800\":1}}],[\"manual\",{\"1\":{\"2048\":1}}],[\"manager\",{\"1\":{\"61\":1,\"228\":1}}],[\"mac\",{\"1\":{\"1154\":3}}],[\"macos\",{\"1\":{\"94\":1}}],[\"may\",{\"1\":{\"875\":1,\"1807\":1,\"2058\":1}}],[\"male\",{\"1\":{\"827\":2,\"828\":5,\"830\":8,\"831\":3,\"832\":2,\"896\":2,\"897\":3,\"1357\":1}}],[\"mar\",{\"1\":{\"877\":2}}],[\"march\",{\"1\":{\"875\":1}}],[\"mary\",{\"1\":{\"848\":2,\"849\":2}}],[\"markasready\",{\"1\":{\"2041\":1,\"2046\":1}}],[\"markonce\",{\"1\":{\"1797\":1}}],[\"markstaticroots\",{\"1\":{\"1795\":3}}],[\"markstatic\",{\"1\":{\"1795\":3}}],[\"markraw\",{\"0\":{\"1506\":1},\"1\":{\"1506\":1}}],[\"mark\",{\"1\":{\"699\":1,\"1799\":4,\"1805\":4}}],[\"margintop5\",{\"1\":{\"1298\":4}}],[\"margintop\",{\"1\":{\"1224\":1,\"1225\":1,\"1299\":1}}],[\"marginleft\",{\"1\":{\"1224\":2,\"1225\":1}}],[\"margin的简写属性\",{\"1\":{\"546\":1}}],[\"margin\",{\"0\":{\"546\":1},\"1\":{\"540\":2,\"542\":1,\"546\":11,\"553\":4,\"554\":2,\"555\":4,\"556\":1,\"573\":2,\"574\":2,\"580\":3,\"582\":5,\"597\":1,\"598\":2,\"603\":2,\"623\":1,\"641\":1,\"643\":2,\"765\":1,\"773\":1,\"1124\":1,\"1207\":1,\"1259\":1,\"1296\":2,\"1298\":3,\"1328\":1}}],[\"mask\",{\"1\":{\"1515\":1}}],[\"masklength\",{\"1\":{\"501\":3}}],[\"master\",{\"1\":{\"10\":1,\"11\":1,\"17\":2,\"666\":1}}],[\"matchas\",{\"1\":{\"2028\":1}}],[\"matchedroutekey\",{\"1\":{\"2068\":1}}],[\"matchedrouteref\",{\"1\":{\"2068\":3,\"2069\":3,\"2070\":1}}],[\"matchedroute\",{\"1\":{\"2065\":2,\"2068\":4,\"2070\":7}}],[\"matched\",{\"1\":{\"2028\":1,\"2029\":2,\"2031\":7,\"2044\":1,\"2065\":10,\"2068\":7,\"2073\":11,\"2074\":3,\"2082\":1}}],[\"matched是一个record对象\",{\"1\":{\"2028\":1}}],[\"matcherlocation\",{\"1\":{\"2065\":1}}],[\"matcher\",{\"0\":{\"2028\":1,\"2042\":1},\"1\":{\"2027\":1,\"2028\":2,\"2040\":1,\"2041\":1,\"2042\":5,\"2065\":3}}],[\"matches\",{\"1\":{\"925\":10}}],[\"matching\",{\"1\":{\"1792\":1}}],[\"match是http1\",{\"1\":{\"1537\":1}}],[\"match存在\",{\"1\":{\"1537\":1}}],[\"match\",{\"1\":{\"482\":2,\"773\":1,\"894\":4,\"919\":1,\"1353\":1,\"1537\":3,\"1792\":29,\"1793\":5,\"2028\":6,\"2029\":1}}],[\"mathcer\",{\"1\":{\"2042\":1}}],[\"math\",{\"0\":{\"878\":1},\"1\":{\"395\":1,\"413\":2,\"414\":1,\"416\":1,\"418\":3,\"419\":3,\"480\":3,\"499\":1,\"716\":1,\"740\":4,\"794\":3,\"874\":1,\"878\":1,\"879\":10,\"881\":2,\"882\":3,\"883\":8,\"884\":14,\"995\":1,\"1038\":1,\"1274\":3,\"1284\":2,\"1786\":1,\"1961\":1,\"2073\":1}}],[\"mail\",{\"1\":{\"294\":1,\"1262\":3}}],[\"main>\",{\"1\":{\"662\":1}}],[\"main=\",{\"1\":{\"43\":1}}],[\"main\",{\"0\":{\"42\":1,\"1484\":1,\"2010\":1},\"1\":{\"12\":3,\"17\":3,\"40\":1,\"43\":1,\"44\":1,\"45\":1,\"64\":2,\"124\":1,\"128\":1,\"238\":2,\"377\":2,\"580\":7,\"1427\":2,\"1431\":1,\"2041\":1,\"2047\":1}}],[\"maxpool\",{\"1\":{\"1661\":1,\"1663\":2}}],[\"maxpool2d是\",{\"1\":{\"1663\":1}}],[\"maxpool2d\",{\"1\":{\"1661\":3,\"1663\":4}}],[\"maxlength\",{\"1\":{\"760\":1}}],[\"max=\",{\"1\":{\"696\":3}}],[\"maxexecutiontime\",{\"1\":{\"504\":2}}],[\"maxcount\",{\"1\":{\"498\":3}}],[\"maxdigitnum++\",{\"1\":{\"419\":1}}],[\"maxdigitnum\",{\"1\":{\"419\":2}}],[\"maxnum\",{\"1\":{\"419\":6,\"499\":2}}],[\"maxvalue\",{\"1\":{\"418\":5}}],[\"maxage\",{\"1\":{\"345\":2,\"349\":1,\"350\":1,\"355\":1}}],[\"max\",{\"1\":{\"269\":1,\"417\":5,\"651\":3,\"696\":2,\"757\":1,\"760\":1,\"794\":2,\"881\":3,\"995\":1,\"1201\":2,\"1534\":2,\"1539\":2,\"1541\":1,\"1663\":2,\"1786\":1,\"2073\":1}}],[\"makeattrsmap\",{\"1\":{\"1791\":1}}],[\"make\",{\"1\":{\"257\":1}}],[\"mapmutations\",{\"1\":{\"1453\":4,\"1454\":1}}],[\"mapactions\",{\"1\":{\"1453\":4,\"1454\":1}}],[\"mapgetters\",{\"1\":{\"1453\":3,\"1454\":1}}],[\"mapstate\",{\"1\":{\"1453\":3,\"1454\":1}}],[\"map等等\",{\"1\":{\"1033\":1}}],[\"map方法\",{\"1\":{\"408\":1}}],[\"map\",{\"0\":{\"442\":1,\"1277\":1,\"1278\":1,\"1279\":1,\"1280\":1,\"1289\":1,\"1453\":1,\"1926\":1,\"1927\":1},\"1\":{\"124\":1,\"402\":7,\"418\":1,\"419\":1,\"472\":2,\"501\":2,\"859\":1,\"866\":1,\"867\":2,\"868\":14,\"869\":6,\"870\":4,\"871\":3,\"944\":1,\"945\":2,\"946\":1,\"1057\":6,\"1058\":1,\"1204\":1,\"1232\":1,\"1273\":2,\"1274\":1,\"1275\":4,\"1276\":6,\"1277\":5,\"1278\":1,\"1279\":7,\"1280\":5,\"1281\":5,\"1283\":1,\"1287\":1,\"1290\":6,\"1307\":1,\"1665\":4,\"1769\":1,\"1889\":4,\"1890\":1,\"1923\":3,\"1926\":6,\"1929\":4,\"1930\":4,\"1932\":10,\"1978\":1,\"1985\":1,\"2016\":2,\"2028\":1,\"2029\":1,\"2045\":2}}],[\"maven\",{\"1\":{\"94\":1}}],[\"mvvm\",{\"0\":{\"1346\":1}}],[\"mvc\",{\"1\":{\"219\":1}}],[\"mv\",{\"1\":{\"8\":1}}],[\"m\",{\"0\":{\"1347\":1},\"1\":{\"7\":2,\"12\":1,\"17\":1,\"385\":2,\"401\":1,\"740\":3,\"828\":5,\"829\":2,\"830\":9,\"834\":2,\"868\":12,\"869\":9,\"870\":8,\"871\":7,\"889\":1,\"896\":1,\"901\":1,\"906\":2,\"908\":2,\"919\":2,\"920\":1,\"921\":1,\"923\":1,\"943\":2,\"981\":1,\"995\":5,\"1680\":4,\"1797\":1,\"1929\":10,\"2029\":2}}],[\"将服务器的合法证书替换为伪造的证书\",{\"1\":{\"2091\":1}}],[\"将在导航的\",{\"1\":{\"2088\":1}}],[\"将在未来几年内逐步淘汰它\",{\"1\":{\"1313\":1}}],[\"将调用的结果存储到\",{\"1\":{\"2075\":1}}],[\"将解构出的state存入到全局state对象中\",{\"1\":{\"2021\":1}}],[\"将解析出的\",{\"1\":{\"1954\":1}}],[\"将对应的id里的options\",{\"1\":{\"2019\":2}}],[\"将对象转为原始类型进行比较\",{\"1\":{\"976\":1}}],[\"将函数设置为副作用\",{\"1\":{\"2002\":1}}],[\"将函数作为实参传递给另一个函数调用\",{\"1\":{\"1025\":1}}],[\"将函数作为另一个函数的返回值\",{\"1\":{\"1025\":1}}],[\"将此对象挂载到instance\",{\"1\":{\"2001\":1}}],[\"将此函数作为\",{\"1\":{\"2001\":1}}],[\"将逻辑编写在退出阶段的回调函数中\",{\"1\":{\"1978\":1}}],[\"将转换代码编写在退出阶段的回调函数中\",{\"1\":{\"1978\":1}}],[\"将退出阶段的回调函数添加到\",{\"1\":{\"1977\":1}}],[\"将栈顶节点弹出\",{\"1\":{\"1974\":1}}],[\"将拥有与\",{\"1\":{\"1974\":1}}],[\"将用户编写的模板解析为模板\",{\"1\":{\"1973\":1}}],[\"将oldstartvnode移动到oldendvnode的后面\",{\"1\":{\"1965\":1}}],[\"将oldendidx减1\",{\"1\":{\"1789\":1}}],[\"将渲染副作用函数缓冲到微任务队列中\",{\"1\":{\"1954\":1}}],[\"将渲染实例从其他数据的依赖列表中删除\",{\"1\":{\"1807\":1}}],[\"将组件实例的\",{\"1\":{\"1954\":1}}],[\"将组件实例设置到\",{\"1\":{\"1954\":1}}],[\"将组件的render\",{\"1\":{\"1849\":1}}],[\"将只读版本的\",{\"1\":{\"1954\":1}}],[\"将生命周期函数添加到\",{\"1\":{\"1954\":1}}],[\"将生成的key在cookie中传输\",{\"1\":{\"353\":1}}],[\"将旧子节点进行卸载\",{\"1\":{\"1969\":1}}],[\"将旧节点的\",{\"1\":{\"1951\":1}}],[\"将旧值和新值作为回调函数的参数\",{\"1\":{\"1897\":1}}],[\"将依赖于特定平台的\",{\"1\":{\"1946\":1}}],[\"将公共代码抽离进行复用\",{\"1\":{\"1931\":1}}],[\"将自定义的\",{\"1\":{\"1928\":1}}],[\"将自定义事件通过$on添加到\",{\"1\":{\"1368\":1}}],[\"将方法与原始数据对象\",{\"1\":{\"1927\":1}}],[\"将结果存储到\",{\"1\":{\"1923\":1,\"1924\":1,\"1993\":1}}],[\"将结果包装成响应式数据并返回\",{\"1\":{\"1912\":1}}],[\"将结束标签后面的空格符删除\",{\"1\":{\"328\":1}}],[\"将与\",{\"1\":{\"1906\":2}}],[\"将target\",{\"1\":{\"1902\":1}}],[\"将之前回调返回的数据抛弃\",{\"1\":{\"1897\":1}}],[\"将过期回调存储到\",{\"1\":{\"1897\":1}}],[\"将代码按上述修改之后会产生无限循环的问题\",{\"1\":{\"1890\":1}}],[\"将代码上传服务器上\",{\"1\":{\"12\":1}}],[\"将副作用收集到\",{\"1\":{\"1889\":1}}],[\"将副作用函数与\",{\"1\":{\"1906\":1}}],[\"将副作用函数作为返回值返回\",{\"1\":{\"1894\":1}}],[\"将副作用函数放到宏任务队列中执行\",{\"1\":{\"1893\":1}}],[\"将副作用函数赋值给\",{\"1\":{\"1891\":1,\"1893\":1}}],[\"将副作用函数收集到\",{\"1\":{\"1889\":1}}],[\"将副作用函数\",{\"1\":{\"1886\":1,\"1888\":1,\"1889\":1}}],[\"将副作用函数从依赖集合中移除\",{\"1\":{\"1890\":1}}],[\"将副作用函数从\",{\"1\":{\"1886\":1}}],[\"将副作用函数存到一个\",{\"1\":{\"1886\":1}}],[\"将属性设置相关操作封装到\",{\"1\":{\"1949\":1}}],[\"将属性\",{\"1\":{\"1878\":1}}],[\"将dirty置为true\",{\"1\":{\"1859\":1}}],[\"将data对象中key不以\",{\"1\":{\"1804\":1}}],[\"将data的值赋给\",{\"1\":{\"1396\":1}}],[\"将user\",{\"1\":{\"1854\":1,\"1860\":1}}],[\"将computed\",{\"1\":{\"1849\":1}}],[\"将配置项中的部分内容挂载到组件实例上\",{\"1\":{\"1836\":1}}],[\"将vue作为传入的第一个参数\",{\"1\":{\"1824\":1}}],[\"将回调函数推入回调队列\",{\"1\":{\"1822\":1}}],[\"将回调延迟到下次\",{\"1\":{\"1822\":1}}],[\"将实例的vnode树设置为null\",{\"1\":{\"1807\":1}}],[\"将定义\",{\"1\":{\"1954\":1}}],[\"将定义的事件和回调存入vm\",{\"1\":{\"1814\":1}}],[\"将定义的指令挂载到vue\",{\"1\":{\"1407\":1}}],[\"将定义好的updatecomponent函数传入\",{\"1\":{\"1806\":1}}],[\"将最新的模板内容渲染到视图页面\",{\"1\":{\"1806\":1}}],[\"将最后一个|过滤符后面的加入fiters\",{\"1\":{\"1794\":1}}],[\"将render\",{\"1\":{\"1849\":1}}],[\"将render挂载到options\",{\"1\":{\"1805\":1}}],[\"将request对象再传给下一个中间件\",{\"1\":{\"309\":1}}],[\"将获取到的template编译成render函数\",{\"1\":{\"1805\":1}}],[\"将计算属性添加到\",{\"1\":{\"1804\":1}}],[\"将计算属性添加到vm上\",{\"1\":{\"1804\":1}}],[\"将methods中定义的方法添加到组件实例上\",{\"1\":{\"1804\":1}}],[\"将inject对象转为key\",{\"1\":{\"1803\":1}}],[\"将ip地址转换为一个32位的二进制字符串\",{\"1\":{\"501\":1}}],[\"将注入\",{\"1\":{\"1803\":1}}],[\"将父类中的一些属性复制到子类中\",{\"1\":{\"1825\":1}}],[\"将父组件在模板中使用\",{\"1\":{\"1801\":1}}],[\"将父元素的值取出应用到该元素\",{\"1\":{\"532\":1}}],[\"将中间的filter放入filters数组\",{\"1\":{\"1794\":1}}],[\"将三位数的减法分成两段\",{\"1\":{\"1715\":1}}],[\"将加载的\",{\"1\":{\"1673\":1}}],[\"将输入通道数设为\",{\"1\":{\"1667\":1}}],[\"将输入划分为固定的池化区域\",{\"1\":{\"1663\":1}}],[\"将输入数据放缩到\",{\"1\":{\"1656\":2}}],[\"将模板编译为渲染函数\",{\"1\":{\"1880\":1}}],[\"将模型参数放在\",{\"0\":{\"1676\":1}}],[\"将模型的\",{\"1\":{\"1673\":1}}],[\"将模型的权重向量\",{\"1\":{\"1659\":1}}],[\"将模块成员以\",{\"1\":{\"1305\":1}}],[\"将请求分为两类\",{\"1\":{\"1606\":1}}],[\"将请求信息转化成一个对象\",{\"1\":{\"282\":1}}],[\"将事先传递的回调函数包装成任务\",{\"1\":{\"1558\":1}}],[\"将事件监听器绑定到父元素\",{\"1\":{\"1158\":1}}],[\"将事件一直冒泡到\",{\"1\":{\"1139\":1}}],[\"将来更新props时只需遍历vm\",{\"1\":{\"1804\":1}}],[\"将来该默认模式可能会有所改变\",{\"1\":{\"1555\":1}}],[\"将来某一个层改变后\",{\"1\":{\"1526\":1}}],[\"将全局的\",{\"1\":{\"1518\":1}}],[\"将处于更新前的状态\",{\"1\":{\"1498\":1}}],[\"将处理后的值放入返回的数组\",{\"1\":{\"841\":1}}],[\"将ast转换成渲染函数\",{\"1\":{\"1790\":2}}],[\"将app组件放入容器中\",{\"1\":{\"1427\":1}}],[\"将acc初始赋值为一个空数组\",{\"1\":{\"458\":1}}],[\"将按原样呈现\",{\"1\":{\"1308\":1}}],[\"将命名空间添加到成员名中\",{\"1\":{\"1302\":1}}],[\"将不会产生任何样式代码\",{\"1\":{\"1299\":1}}],[\"将不同的装饰器使用\",{\"1\":{\"402\":1}}],[\"将不同的功能封装成不同的全局函数\",{\"1\":{\"27\":1}}],[\"将值与键关联起来的\",{\"1\":{\"1276\":1}}],[\"将匹配的元素列表变为前一次的状态\",{\"1\":{\"1232\":1}}],[\"将html标签转换为\",{\"1\":{\"1198\":1}}],[\"将下次递归调用任务放入微队列\",{\"1\":{\"1187\":1}}],[\"将下面对象的值翻倍\",{\"1\":{\"1058\":1}}],[\"将划分好的创建对象\",{\"1\":{\"1172\":1}}],[\"将是否阻止默认行为的结果赋值给\",{\"1\":{\"1156\":1}}],[\"将窗口向下滚动一段距离后\",{\"1\":{\"1153\":1}}],[\"将li添加到city中\",{\"1\":{\"1124\":1}}],[\"将lastindex值置为\",{\"1\":{\"925\":1}}],[\"将节点先添加在一个文档碎片里面\",{\"1\":{\"1120\":1}}],[\"将某些任务由管理模块交给对应的线程执行\",{\"1\":{\"1180\":1}}],[\"将某节点设置为另一节点的子节点\",{\"0\":{\"1118\":1}}],[\"将某段代码保护起来\",{\"1\":{\"408\":1}}],[\"将文本节点添加给\",{\"1\":{\"1112\":1}}],[\"将文件内容转为ast抽象语法树\",{\"1\":{\"155\":1}}],[\"将文件发送到输出目录\",{\"1\":{\"142\":1}}],[\"将文件作为八位字节流发送\",{\"1\":{\"307\":1}}],[\"将文件作为\",{\"1\":{\"142\":1}}],[\"将文件导入为字符串\",{\"1\":{\"142\":1}}],[\"将文件中的代码放入到一个函数环境中执行\",{\"1\":{\"37\":1}}],[\"将文件切换到暂存的状态\",{\"1\":{\"7\":1}}],[\"将新旧节点皆移向下一个节点\",{\"1\":{\"1789\":1}}],[\"将新建的通知存储在\",{\"1\":{\"1105\":1}}],[\"将新创建的对象作为\",{\"1\":{\"1073\":1}}],[\"将新的代码拿过来再尝试将自己的修改应用到新代码中\",{\"1\":{\"11\":1}}],[\"将两者的优点集中了起来\",{\"1\":{\"1071\":1}}],[\"将两个排序好的子序列合并成一个最终的排序序列\",{\"1\":{\"414\":1}}],[\"将键值对类型转换为\",{\"1\":{\"1057\":1}}],[\"将要继承基础vue类的子类\",{\"1\":{\"1825\":1}}],[\"将要依次调用的函数组装起来\",{\"1\":{\"1040\":1}}],[\"将要被提取的图像数据矩形区域的高度\",{\"1\":{\"736\":1}}],[\"将要被提取的图像数据矩形区域的宽度\",{\"1\":{\"736\":1}}],[\"将要被提取的图像数据矩形区域的左上角\",{\"1\":{\"736\":2}}],[\"将作为参数传递给下一个函数\",{\"1\":{\"1040\":1}}],[\"将固定的参数和剩余参数拼接\",{\"1\":{\"1039\":1}}],[\"将固化参数作为自由变量\",{\"1\":{\"402\":1}}],[\"将指向最后调用它的对象\",{\"1\":{\"992\":1}}],[\"将报错\",{\"1\":{\"958\":1}}],[\"将整个脚本文件放在一个立即执行的匿名函数之中\",{\"1\":{\"957\":1}}],[\"将整个马赛克块中所有的像素块设置为之前获取的信息\",{\"1\":{\"740\":1}}],[\"将阶乘函数赋值给\",{\"1\":{\"953\":2}}],[\"将始终返回第一个匹配项的信息\",{\"1\":{\"925\":1}}],[\"将返回一个\",{\"1\":{\"1273\":1}}],[\"将返回以米为单位的海拔属性的精度\",{\"1\":{\"1102\":1}}],[\"将返回\",{\"1\":{\"875\":1}}],[\"将集合转为数组\",{\"1\":{\"864\":1}}],[\"将删除的元素返回给i\",{\"1\":{\"854\":1}}],[\"将会加载到这个文件的所有公共成员及样式\",{\"1\":{\"1320\":1}}],[\"将会根据该内容创建文本节点\",{\"1\":{\"1117\":1}}],[\"将会根据该标签名创建元素节点对象\",{\"1\":{\"1116\":1}}],[\"将会根据该字符串去拆分数组\",{\"1\":{\"894\":1}}],[\"将会打印出\",{\"1\":{\"996\":1}}],[\"将会结束指定的循环\",{\"1\":{\"824\":1}}],[\"将会有部分背景无法完全显示\",{\"1\":{\"628\":1}}],[\"将变量的值设置为\",{\"1\":{\"806\":1}}],[\"将触发读取程序的\",{\"1\":{\"773\":1}}],[\"将画布导出为图像\",{\"0\":{\"744\":1}}],[\"将有关样式的设置局限在作用域中\",{\"1\":{\"713\":1}}],[\"将样式栈的栈顶状态弹出到样式样式容器里\",{\"1\":{\"712\":2}}],[\"将样式容器里的状态压入样式栈\",{\"1\":{\"712\":2}}],[\"将笔触移动到指定的坐标\",{\"1\":{\"711\":1}}],[\"将外部内容嵌入文档中的指定位置\",{\"1\":{\"671\":1}}],[\"将表单项设置为禁用\",{\"1\":{\"670\":1}}],[\"将表单项设置为只读\",{\"1\":{\"670\":1}}],[\"将网页的视口设置为完美视口\",{\"1\":{\"649\":1}}],[\"将网页中的http请求转化为\",{\"1\":{\"269\":1}}],[\"将像素比设置为最佳像素比的视口大小我们称其为完美视口\",{\"1\":{\"649\":1}}],[\"将背景固定在它所设置的元素上\",{\"1\":{\"634\":1}}],[\"将图片在元素中完整显示\",{\"1\":{\"633\":1}}],[\"将图标字体指定为字体族\",{\"1\":{\"623\":1}}],[\"将如果其中一种不生效记得换另一种试试\",{\"1\":{\"623\":1}}],[\"将上下\",{\"1\":{\"603\":1}}],[\"将上面的对象合并到\",{\"1\":{\"2053\":1}}],[\"将上面的排序写作如下\",{\"1\":{\"944\":1}}],[\"将上面高亮部分替换为\",{\"1\":{\"1932\":1}}],[\"将上面\",{\"1\":{\"148\":1}}],[\"将左右\",{\"1\":{\"598\":1}}],[\"将多行项目视为一个整体\",{\"1\":{\"589\":1}}],[\"将占满整个容器的高度\",{\"1\":{\"589\":1}}],[\"将侧边栏高度设置为一个很大的值\",{\"1\":{\"582\":1}}],[\"将侧边栏的位置空出来\",{\"1\":{\"580\":1}}],[\"将其放入到\",{\"1\":{\"2078\":1}}],[\"将其放到微任务队列中执行\",{\"1\":{\"1897\":1}}],[\"将其中的每个属性定义为计算属性\",{\"1\":{\"2034\":1}}],[\"将其中的v\",{\"1\":{\"1358\":1}}],[\"将其中一些依赖于特定平台的操作进行了封装\",{\"1\":{\"1998\":1}}],[\"将其挂载到头部\",{\"1\":{\"1966\":1}}],[\"将其挂载到组件实例上\",{\"1\":{\"1861\":1}}],[\"将其移动到旧子节点首节点的前面\",{\"1\":{\"1966\":1}}],[\"将其抽离为patchprops函数\",{\"1\":{\"1949\":1}}],[\"将其返回\",{\"1\":{\"1931\":1,\"1932\":2}}],[\"将其封装到\",{\"1\":{\"1927\":1}}],[\"将其与模板中所用到的响应式数据绑定\",{\"1\":{\"2002\":1}}],[\"将其与旧\",{\"1\":{\"1944\":1}}],[\"将其与原始对象绑定\",{\"1\":{\"1927\":1}}],[\"将其与jwt\",{\"1\":{\"368\":1}}],[\"将其添加到进入的数组里面\",{\"1\":{\"2073\":1}}],[\"将其添加到离开的数组\",{\"1\":{\"2073\":1}}],[\"将其添加到父节点的\",{\"1\":{\"1974\":1}}],[\"将其添加到父级节点的\",{\"1\":{\"1974\":1}}],[\"将其添加到\",{\"1\":{\"1890\":1,\"1985\":1}}],[\"将其拦截在数组实例与array\",{\"1\":{\"1785\":1}}],[\"将其划分为更多的小区域\",{\"1\":{\"1526\":1}}],[\"将其值添加到\",{\"1\":{\"1428\":1}}],[\"将其设置为当前激活的副作用函数\",{\"1\":{\"1890\":1}}],[\"将其设置为\",{\"1\":{\"1156\":1}}],[\"将其单独取了出来\",{\"1\":{\"1084\":1}}],[\"将其从内存中删除\",{\"1\":{\"865\":1}}],[\"将其写在一行里面\",{\"1\":{\"780\":1}}],[\"将其固定\",{\"1\":{\"572\":1}}],[\"将元素添加到挂载点下\",{\"1\":{\"1878\":1}}],[\"将元素节点添加到文档碎片里面\",{\"1\":{\"1120\":1}}],[\"将元素铺满\",{\"1\":{\"628\":1,\"633\":1}}],[\"将元素的position属性设置为fixed则开启了元素的固定定位\",{\"1\":{\"571\":1}}],[\"将元素的overflow设置为一个非visible的值\",{\"1\":{\"564\":1}}],[\"将元素设置为单元格\",{\"1\":{\"669\":1}}],[\"将元素设置为一个圆形\",{\"1\":{\"612\":1}}],[\"将元素设置为\",{\"1\":{\"564\":1}}],[\"将元素设置为行内块元素\",{\"1\":{\"548\":1}}],[\"将元素设置为行盒\",{\"1\":{\"548\":1}}],[\"将元素设置为块盒\",{\"1\":{\"548\":1}}],[\"将元素设置为矩形的盒子后\",{\"1\":{\"542\":1}}],[\"将页面中的所有元素都设置为了一个矩形的盒子\",{\"1\":{\"542\":1}}],[\"将该标志设置为\",{\"1\":{\"1954\":1}}],[\"将该属性设置为默认值\",{\"1\":{\"532\":1}}],[\"将该程序装载到内存\",{\"1\":{\"408\":1}}],[\"将符合条件的元素从选择器中去除\",{\"1\":{\"520\":1}}],[\"将条件变为tostring的自动调用\",{\"1\":{\"464\":1}}],[\"将需要调用的函数挂载到绑定对象上\",{\"1\":{\"428\":1}}],[\"将桶内的数字\",{\"1\":{\"418\":1}}],[\"将数据包装成只读的代理对象\",{\"1\":{\"1914\":1}}],[\"将数据添加到\",{\"1\":{\"1897\":1}}],[\"将数组中的所有元素都转化为可被侦测的响应式\",{\"1\":{\"1785\":1}}],[\"将数组对象转换为\",{\"1\":{\"1198\":1}}],[\"将数组的空元素变成\",{\"1\":{\"995\":1}}],[\"将数组的每一项应用到函数里面\",{\"1\":{\"946\":1}}],[\"将数组的每一项传入到回调函数\",{\"1\":{\"846\":1,\"945\":5}}],[\"将数组进行分组\",{\"1\":{\"418\":1}}],[\"将数字按照映射的规则\",{\"1\":{\"418\":1}}],[\"将原始数据按照增量间隔分组\",{\"1\":{\"413\":1}}],[\"将原有开发分支删除\",{\"1\":{\"10\":1}}],[\"将包裹对象变成响应式数据\",{\"1\":{\"1936\":1}}],[\"将包裹对象的创建工作都封装到该函数中\",{\"1\":{\"1936\":1}}],[\"将包含\",{\"1\":{\"995\":1}}],[\"将包含用户信息的数据作为jwt的payload\",{\"1\":{\"368\":1}}],[\"将包装类变成一个属性的\",{\"1\":{\"405\":1}}],[\"将私有化变量改名\",{\"1\":{\"405\":1}}],[\"将成员函数定义在类外\",{\"1\":{\"405\":1}}],[\"将缓存里的内容写进了文件\",{\"1\":{\"404\":1}}],[\"将字典放在最后\",{\"1\":{\"402\":1}}],[\"将字符串切割成字符串数组\",{\"1\":{\"1854\":1}}],[\"将字符串中括号内的字符由对应的变量进行替换\",{\"1\":{\"482\":1}}],[\"将字符串换成浮点数\",{\"1\":{\"395\":1}}],[\"将字符串以二进制转换成整数\",{\"1\":{\"395\":1}}],[\"将字符串转成\",{\"1\":{\"384\":1}}],[\"将字符串转成二进制字符串\",{\"1\":{\"384\":1}}],[\"将字符串\",{\"1\":{\"384\":1}}],[\"将序列类型的数据生成带序号的新序列数据\",{\"1\":{\"401\":1}}],[\"将这个回调函数添加到\",{\"1\":{\"2075\":1}}],[\"将这个目标路由传递给\",{\"1\":{\"2065\":1}}],[\"将这个变量标记为\",{\"1\":{\"1031\":1}}],[\"将这些副作用函数添加到\",{\"1\":{\"1917\":1,\"1993\":1}}],[\"将这些参数绑定到原函数的参数\",{\"1\":{\"995\":1}}],[\"将这两个张量封装成一个数据集\",{\"1\":{\"1655\":1}}],[\"将这段代码放入浏览器运行\",{\"1\":{\"996\":1}}],[\"将这四个变量的类型打印出来\",{\"1\":{\"382\":1}}],[\"将这三部分用\",{\"1\":{\"367\":1}}],[\"将这三段信息文本用\",{\"1\":{\"364\":1}}],[\"将当前路由对象的\",{\"1\":{\"2068\":1}}],[\"将当前标签节点对应的\",{\"1\":{\"1978\":1}}],[\"将当前节点设置为父节点\",{\"1\":{\"1977\":1}}],[\"将当前节点\",{\"1\":{\"1977\":1}}],[\"将当前节点压入栈\",{\"1\":{\"1974\":1}}],[\"将当前字符缓存到\",{\"1\":{\"1974\":2}}],[\"将当前字母缓存到\",{\"1\":{\"1974\":1}}],[\"将当前副作用函数收集到\",{\"1\":{\"1892\":1}}],[\"将当前副作用函数弹出栈\",{\"1\":{\"1891\":1,\"1893\":1}}],[\"将当前副作用函数压入栈中\",{\"1\":{\"1891\":1}}],[\"将当前的vue实例从其父级实例中删除\",{\"1\":{\"1807\":1}}],[\"将当前的\",{\"1\":{\"1807\":1}}],[\"将当前文件夹下的public目录作为网站的根目录\",{\"1\":{\"316\":1}}],[\"将当前部分指向目标的基底\",{\"1\":{\"11\":1}}],[\"将相对路径转为绝对路径\",{\"1\":{\"239\":2}}],[\"将一堆模板字符串用正则等方式解析成抽象语法树ast\",{\"1\":{\"1790\":1}}],[\"将一组属性从一个规则集包含\",{\"1\":{\"1333\":1}}],[\"将一个由reactive生成的响应式对象转为普通对象\",{\"1\":{\"1506\":1}}],[\"将一个字符串转换为小写并返回\",{\"1\":{\"892\":1}}],[\"将一个字符串转换为大写并返回\",{\"1\":{\"892\":1}}],[\"将一个复杂的程序文件依据一定规则\",{\"1\":{\"232\":1}}],[\"将一系列流程用代码去实现\",{\"1\":{\"122\":1}}],[\"将现有的代码进行合理的拆分\",{\"1\":{\"212\":1}}],[\"将压缩包移动到\",{\"1\":{\"177\":1}}],[\"将所有\",{\"1\":{\"2016\":1,\"2083\":1}}],[\"将所有创建的watcher放在vm\",{\"1\":{\"1845\":1}}],[\"将所有的变量都封装到函数的作用域里面\",{\"1\":{\"948\":1}}],[\"将所有传入的参数利用闭包储存到一个数组中\",{\"1\":{\"463\":1}}],[\"将所有类型的文件\",{\"1\":{\"138\":1}}],[\"将所有已修改\",{\"1\":{\"7\":1}}],[\"将使得开发进度变得极其缓慢\",{\"1\":{\"116\":1}}],[\"将\",{\"0\":{\"1238\":1},\"1\":{\"22\":1,\"24\":1,\"39\":1,\"44\":1,\"45\":1,\"122\":2,\"155\":1,\"158\":1,\"244\":1,\"284\":1,\"369\":1,\"379\":1,\"384\":2,\"388\":1,\"395\":2,\"493\":1,\"711\":1,\"789\":1,\"957\":2,\"995\":4,\"1120\":1,\"1216\":1,\"1358\":1,\"1499\":1,\"1655\":1,\"1723\":1,\"1784\":1,\"1804\":1,\"1888\":1,\"1890\":1,\"1893\":1,\"1895\":2,\"1896\":1,\"1897\":2,\"1906\":1,\"1930\":1,\"1954\":3,\"1966\":1,\"1977\":2,\"1978\":1,\"1984\":3,\"1987\":1,\"2047\":1,\"2058\":1,\"2078\":1,\"2080\":1,\"2088\":1}}],[\"将分支上的改变合并为一个改变并合并\",{\"1\":{\"17\":1}}],[\"将改变提交到本地\",{\"1\":{\"17\":1}}],[\"将远程仓库复制到本地\",{\"1\":{\"17\":1}}],[\"将本地库上传\",{\"1\":{\"12\":2}}],[\"将本地修改的代码提交到仓库与之同步\",{\"1\":{\"7\":1}}],[\"将暂存的文件存储到仓库中\",{\"1\":{\"7\":1}}],[\"将你的个人介绍和档案放置在此处\",{\"1\":{\"0\":1}}],[\"→\",{\"1\":{\"7\":3}}],[\"已安装过此插件\",{\"1\":{\"1824\":1}}],[\"已知\",{\"0\":{\"1742\":1,\"1743\":1}}],[\"已知今年较去年增长\",{\"1\":{\"1728\":1}}],[\"已知变化情况求基期\",{\"1\":{\"1726\":1}}],[\"已建立服务器链接\",{\"1\":{\"1575\":1}}],[\"已更改为通过cache\",{\"1\":{\"1540\":1}}],[\"已发布了\",{\"1\":{\"1084\":1}}],[\"已不推荐使用\",{\"1\":{\"1013\":1}}],[\"已过时\",{\"1\":{\"877\":2}}],[\"已松手\",{\"1\":{\"763\":1}}],[\"已经\",{\"1\":{\"1897\":1}}],[\"已经是\",{\"1\":{\"1795\":1}}],[\"已经更新\",{\"1\":{\"1411\":1}}],[\"已经过了\",{\"1\":{\"1088\":1}}],[\"已经过了5秒了\",{\"1\":{\"1088\":1}}],[\"已经被删除掉了\",{\"1\":{\"1086\":1}}],[\"已经将\",{\"1\":{\"1084\":1}}],[\"已经不再指向\",{\"1\":{\"995\":1}}],[\"已经绘制过的图形\",{\"1\":{\"743\":1}}],[\"已经启动成功\",{\"1\":{\"177\":1}}],[\"已经准备好生成的\",{\"1\":{\"155\":1}}],[\"已修改\",{\"1\":{\"7\":1}}],[\"已跟踪\",{\"1\":{\"7\":1}}],[\"未实例化\",{\"1\":{\"1825\":1}}],[\"未初始化\",{\"1\":{\"1575\":1}}],[\"未找到\",{\"1\":{\"1394\":1}}],[\"未提供别名的按键\",{\"1\":{\"1370\":1}}],[\"未勾选\",{\"1\":{\"1357\":2}}],[\"未被系统部件占用的最上方的像素值\",{\"1\":{\"1098\":1}}],[\"未被系统部件占用的最左侧的像素值\",{\"1\":{\"1098\":1}}],[\"未赋值\",{\"1\":{\"1012\":1,\"1015\":1}}],[\"未列出的单个任意字符\",{\"1\":{\"902\":1}}],[\"未定义值\",{\"1\":{\"816\":1}}],[\"未松手\",{\"1\":{\"763\":1}}],[\"未设置或者比最小值还要小时\",{\"1\":{\"696\":1}}],[\"未指定值的\",{\"1\":{\"493\":1}}],[\"未来无可限量\",{\"1\":{\"24\":1}}],[\"未修改\",{\"1\":{\"7\":3}}],[\"未跟踪的文件不会提交\",{\"1\":{\"7\":1}}],[\"未跟踪\",{\"1\":{\"7\":3}}],[\"仓库维护者审查代码之后执行\",{\"1\":{\"17\":1}}],[\"仓库和本地的本质没有什么区别\",{\"1\":{\"12\":1}}],[\"仓库中文件不同\",{\"1\":{\"7\":1}}],[\"仓库中的文件相同\",{\"1\":{\"7\":1}}],[\"仓库\",{\"1\":{\"7\":1,\"12\":2,\"17\":1}}],[\"3x3\",{\"1\":{\"1662\":1}}],[\"3cm\",{\"1\":{\"1338\":1}}],[\"3in\",{\"1\":{\"1274\":1}}],[\"3400\",{\"1\":{\"1671\":1}}],[\"34\",{\"1\":{\"1260\":3,\"1723\":1}}],[\"3498db\",{\"1\":{\"1259\":1}}],[\"341\",{\"1\":{\"666\":1}}],[\"38\",{\"1\":{\"1154\":1,\"1161\":1,\"1353\":1,\"1540\":2}}],[\"3647\",{\"1\":{\"1712\":1}}],[\"366\",{\"1\":{\"1332\":1,\"1745\":1}}],[\"36\",{\"1\":{\"1112\":1}}],[\"3600\",{\"1\":{\"1534\":2}}],[\"360\",{\"1\":{\"535\":1}}],[\"3919\",{\"1\":{\"1712\":1}}],[\"39\",{\"1\":{\"1101\":3,\"1154\":1,\"1353\":1,\"1534\":4}}],[\"37\",{\"1\":{\"1088\":1,\"1154\":1}}],[\"375\",{\"1\":{\"650\":3}}],[\"3g24j1\",{\"1\":{\"925\":1}}],[\"3b\",{\"1\":{\"919\":1}}],[\"3111\",{\"1\":{\"1712\":1}}],[\"31\",{\"1\":{\"877\":2,\"1534\":4,\"1537\":3,\"1723\":1}}],[\"310px\",{\"1\":{\"582\":1}}],[\"3375\",{\"1\":{\"1712\":1}}],[\"333\",{\"1\":{\"1249\":2,\"1250\":1,\"1259\":1,\"1312\":2}}],[\"3333vw\",{\"1\":{\"650\":1}}],[\"33\",{\"1\":{\"876\":2,\"995\":2,\"1723\":1}}],[\"3581\",{\"1\":{\"868\":2}}],[\"35\",{\"1\":{\"773\":1,\"805\":1}}],[\"35px\",{\"1\":{\"650\":2}}],[\"3px\",{\"1\":{\"765\":1,\"1274\":1}}],[\"3多进程与多线程的区别\",{\"1\":{\"408\":1}}],[\"3成员函数分类和调用\",{\"1\":{\"405\":1}}],[\"3函数参数的定义方式和调用方式\",{\"1\":{\"402\":1}}],[\"3j\",{\"1\":{\"395\":1}}],[\"3f\",{\"1\":{\"388\":1,\"1680\":3}}],[\"3des\",{\"1\":{\"2099\":1}}],[\"3d\",{\"1\":{\"387\":1,\"388\":1,\"617\":1}}],[\"328\",{\"1\":{\"2065\":1}}],[\"322\",{\"1\":{\"1720\":1}}],[\"324\",{\"1\":{\"794\":2}}],[\"32\",{\"1\":{\"382\":1,\"1039\":1,\"1098\":1,\"1667\":4,\"1714\":1}}],[\"325\",{\"1\":{\"338\":1}}],[\"3a\",{\"0\":{\"1742\":1},\"1\":{\"919\":3}}],[\"3alisi\",{\"1\":{\"350\":1}}],[\"3azhangshan\",{\"1\":{\"350\":1}}],[\"3t\",{\"1\":{\"213\":1}}],[\"3060\",{\"1\":{\"1671\":1}}],[\"304\",{\"1\":{\"1635\":1,\"1720\":1}}],[\"3016\",{\"1\":{\"1671\":1}}],[\"301\",{\"1\":{\"1635\":1}}],[\"302\",{\"1\":{\"1570\":1,\"1635\":1}}],[\"30k\",{\"1\":{\"1488\":1}}],[\"30+个\",{\"1\":{\"1475\":1}}],[\"30px\",{\"1\":{\"619\":1,\"1148\":2,\"1274\":3}}],[\"30\",{\"1\":{\"206\":2,\"480\":1,\"619\":1,\"696\":1,\"767\":1,\"995\":1,\"1086\":1,\"1534\":8,\"1537\":3,\"1540\":1,\"1586\":1,\"2019\":1}}],[\"300px\",{\"1\":{\"582\":1,\"630\":1,\"701\":1,\"773\":1,\"1087\":1,\"1139\":1,\"1140\":1,\"1331\":2}}],[\"3000\",{\"1\":{\"275\":1,\"301\":3,\"304\":2,\"305\":1,\"316\":2,\"321\":2,\"329\":1,\"332\":1,\"340\":1,\"349\":1,\"350\":1,\"355\":2,\"490\":2,\"1559\":1}}],[\"3001\",{\"1\":{\"134\":1}}],[\"300\",{\"1\":{\"93\":1,\"350\":1,\"355\":1,\"476\":1,\"498\":1,\"555\":1,\"668\":1,\"703\":1,\"725\":4,\"726\":2,\"1575\":1,\"1576\":1,\"1577\":1,\"1587\":1}}],[\"3>\",{\"1\":{\"177\":1}}],[\"3模块\",{\"1\":{\"124\":1}}],[\"3\",{\"0\":{\"7\":1,\"15\":1,\"24\":1,\"29\":1,\"35\":1,\"41\":1,\"51\":1,\"59\":1,\"60\":1,\"67\":1,\"173\":1,\"179\":1,\"191\":1,\"220\":1,\"234\":1,\"254\":1,\"271\":1,\"305\":1,\"311\":1,\"321\":1,\"325\":1,\"337\":1,\"347\":1,\"354\":1,\"360\":1,\"369\":1,\"378\":1,\"390\":1,\"397\":1,\"464\":1,\"518\":1,\"525\":1,\"531\":1,\"534\":1,\"545\":1,\"558\":1,\"562\":1,\"566\":1,\"570\":1,\"587\":1,\"612\":1,\"618\":1,\"625\":1,\"629\":1,\"649\":1,\"663\":1,\"674\":1,\"693\":1,\"698\":1,\"703\":1,\"708\":1,\"712\":1,\"724\":1,\"731\":1,\"737\":1,\"744\":1,\"749\":1,\"758\":1,\"765\":1,\"769\":1,\"781\":1,\"796\":1,\"807\":1,\"810\":1,\"814\":1,\"820\":1,\"829\":1,\"843\":1,\"861\":1,\"869\":1,\"876\":1,\"903\":1,\"935\":1,\"957\":1,\"978\":1,\"982\":1,\"993\":1,\"1000\":1,\"1009\":1,\"1014\":1,\"1019\":1,\"1025\":1,\"1029\":1,\"1038\":1,\"1047\":1,\"1071\":1,\"1080\":1,\"1088\":1,\"1102\":1,\"1113\":1,\"1139\":1,\"1145\":1,\"1150\":1,\"1154\":1,\"1162\":1,\"1170\":1,\"1179\":1,\"1196\":1,\"1200\":1,\"1211\":1,\"1217\":1,\"1223\":1,\"1229\":1,\"1236\":1,\"1254\":1,\"1261\":1,\"1286\":1,\"1294\":1,\"1313\":1,\"1329\":1,\"1336\":1,\"1349\":1,\"1354\":1,\"1357\":1,\"1362\":1,\"1366\":1,\"1370\":1,\"1374\":1,\"1380\":1,\"1390\":1,\"1394\":1,\"1401\":1,\"1407\":1,\"1408\":1,\"1417\":1,\"1418\":1,\"1421\":1,\"1428\":1,\"1450\":1,\"1458\":1,\"1479\":1,\"1484\":1,\"1488\":1,\"1498\":1,\"1506\":1,\"1516\":1,\"1555\":1,\"1571\":1,\"1577\":1,\"1583\":1,\"1586\":1,\"1593\":1,\"1602\":1,\"1615\":1,\"1623\":1,\"1630\":1,\"1647\":1,\"1663\":1,\"1671\":1,\"1693\":1,\"1697\":1,\"1716\":1,\"1727\":1,\"1733\":1,\"1742\":1,\"1747\":1,\"1763\":1,\"1786\":1,\"1796\":1,\"1801\":1,\"1818\":1,\"1826\":1,\"1840\":1,\"1856\":1,\"1866\":1,\"1874\":1,\"1879\":1,\"1890\":1,\"1900\":1,\"1907\":1,\"1922\":1,\"1929\":1,\"1938\":1,\"1950\":1,\"1955\":1,\"1966\":1,\"1978\":1,\"1986\":1,\"1991\":1,\"2002\":1,\"2010\":1,\"2020\":1,\"2035\":1,\"2042\":1,\"2051\":1,\"2055\":1,\"2065\":1,\"2070\":1},\"1\":{\"37\":1,\"49\":1,\"67\":1,\"124\":3,\"138\":1,\"143\":1,\"165\":5,\"176\":3,\"182\":1,\"191\":1,\"200\":1,\"205\":1,\"212\":1,\"219\":1,\"239\":1,\"257\":1,\"273\":1,\"279\":1,\"282\":1,\"283\":2,\"285\":1,\"286\":1,\"287\":1,\"301\":1,\"307\":1,\"321\":1,\"327\":1,\"329\":1,\"340\":1,\"349\":2,\"355\":1,\"381\":2,\"386\":2,\"387\":1,\"389\":1,\"390\":1,\"395\":8,\"396\":2,\"402\":8,\"404\":2,\"405\":3,\"408\":3,\"418\":1,\"439\":1,\"449\":5,\"453\":1,\"486\":6,\"487\":6,\"488\":6,\"498\":2,\"517\":2,\"520\":2,\"613\":1,\"697\":1,\"708\":1,\"740\":4,\"765\":2,\"769\":2,\"771\":2,\"779\":1,\"780\":2,\"781\":1,\"782\":3,\"789\":1,\"793\":2,\"803\":4,\"805\":1,\"806\":1,\"808\":1,\"812\":4,\"822\":2,\"828\":4,\"830\":3,\"832\":3,\"835\":2,\"840\":1,\"841\":5,\"842\":1,\"843\":3,\"844\":3,\"845\":1,\"846\":16,\"847\":4,\"848\":2,\"849\":2,\"851\":5,\"854\":23,\"855\":8,\"856\":3,\"857\":1,\"860\":2,\"861\":11,\"862\":8,\"863\":4,\"864\":10,\"865\":8,\"868\":2,\"869\":1,\"875\":1,\"876\":1,\"877\":4,\"879\":1,\"881\":2,\"882\":3,\"889\":1,\"910\":1,\"911\":3,\"915\":1,\"923\":2,\"925\":6,\"932\":2,\"933\":7,\"934\":2,\"936\":1,\"941\":1,\"944\":2,\"945\":5,\"946\":17,\"947\":1,\"951\":3,\"953\":3,\"967\":1,\"981\":1,\"985\":2,\"991\":1,\"995\":11,\"1012\":1,\"1015\":1,\"1025\":1,\"1030\":1,\"1036\":1,\"1039\":2,\"1054\":1,\"1057\":1,\"1058\":1,\"1063\":2,\"1065\":1,\"1066\":1,\"1087\":1,\"1088\":4,\"1105\":1,\"1135\":1,\"1139\":2,\"1140\":2,\"1141\":1,\"1145\":1,\"1148\":1,\"1149\":1,\"1150\":1,\"1152\":1,\"1153\":2,\"1156\":1,\"1157\":3,\"1160\":4,\"1161\":2,\"1181\":2,\"1196\":1,\"1198\":1,\"1199\":1,\"1201\":5,\"1205\":2,\"1207\":4,\"1214\":1,\"1219\":2,\"1224\":2,\"1225\":1,\"1276\":2,\"1285\":2,\"1329\":2,\"1338\":2,\"1425\":1,\"1432\":1,\"1475\":1,\"1518\":1,\"1573\":2,\"1575\":1,\"1576\":1,\"1609\":1,\"1662\":4,\"1663\":8,\"1665\":5,\"1667\":2,\"1669\":2,\"1670\":1,\"1671\":1,\"1673\":1,\"1676\":1,\"1678\":1,\"1680\":1,\"1720\":1,\"1722\":1,\"1723\":5,\"1731\":1,\"1769\":3,\"1778\":1,\"1779\":3,\"1791\":2,\"1792\":4,\"1795\":2,\"1809\":1,\"1896\":1,\"1915\":1,\"1927\":3,\"1944\":1,\"1951\":1,\"1964\":1,\"1966\":1,\"1968\":1,\"1974\":7,\"1978\":1,\"1998\":1,\"2000\":1,\"2001\":1,\"2015\":1,\"2035\":1,\"2038\":1,\"2041\":1,\"2050\":1,\"2053\":1,\"2061\":2,\"2062\":1,\"2063\":7,\"2067\":1,\"2069\":2,\"2073\":2,\"2075\":2,\"2087\":1}}],[\"2~0\",{\"1\":{\"1664\":1}}],[\"2xx\",{\"1\":{\"1575\":1}}],[\"2cm\",{\"1\":{\"1338\":2}}],[\"2e3\",{\"1\":{\"1264\":1}}],[\"2px\",{\"1\":{\"1257\":2,\"1274\":1,\"1332\":1}}],[\"2级添加事件\",{\"1\":{\"1146\":1}}],[\"2+\",{\"1\":{\"2029\":1}}],[\"2+6\",{\"1\":{\"1039\":1}}],[\"2+3\",{\"1\":{\"1039\":3}}],[\"2b\",{\"1\":{\"919\":1}}],[\"2a\",{\"0\":{\"1743\":1},\"1\":{\"919\":3}}],[\"2600+次提交\",{\"1\":{\"1475\":1}}],[\"26445509\",{\"1\":{\"1087\":1}}],[\"26\",{\"1\":{\"883\":1,\"1723\":1}}],[\"28\",{\"1\":{\"772\":1,\"1662\":10,\"1712\":1,\"1723\":2}}],[\"2s\",{\"1\":{\"641\":3,\"644\":1,\"1580\":1}}],[\"2n+1\",{\"1\":{\"520\":1}}],[\"2n\",{\"1\":{\"520\":1}}],[\"215\",{\"1\":{\"1266\":1}}],[\"210\",{\"1\":{\"895\":1,\"1266\":1}}],[\"210px\",{\"1\":{\"582\":1}}],[\"21\",{\"1\":{\"488\":1,\"772\":2,\"773\":1,\"792\":2,\"803\":1,\"848\":2,\"849\":2,\"877\":1,\"911\":5,\"925\":1,\"1160\":1,\"1161\":3,\"1162\":1,\"1393\":1,\"2019\":1}}],[\"214\",{\"1\":{\"176\":1}}],[\"2参数\",{\"1\":{\"486\":1}}],[\"2的子序列\",{\"1\":{\"414\":1}}],[\"2的n次方\",{\"1\":{\"399\":2}}],[\"2进程\",{\"1\":{\"408\":1}}],[\"2类的实例化\",{\"1\":{\"405\":1}}],[\"2==0\",{\"1\":{\"402\":1}}],[\"2文档字符串\",{\"1\":{\"402\":1}}],[\"27t08\",{\"1\":{\"876\":1}}],[\"27\",{\"1\":{\"396\":1,\"422\":1,\"848\":2,\"849\":2,\"876\":2,\"941\":1}}],[\"27017\",{\"1\":{\"191\":2,\"200\":1,\"212\":1,\"355\":1}}],[\"256\",{\"1\":{\"2101\":7}}],[\"250px\",{\"1\":{\"1296\":1}}],[\"25px\",{\"1\":{\"1270\":2,\"1272\":2}}],[\"25rem\",{\"1\":{\"1260\":1,\"1307\":1}}],[\"253\",{\"1\":{\"792\":1}}],[\"255\",{\"1\":{\"535\":1,\"737\":6,\"773\":1,\"1526\":1}}],[\"25\",{\"1\":{\"388\":2,\"439\":1,\"582\":1,\"764\":1,\"790\":1,\"835\":1,\"875\":1,\"883\":3,\"1039\":2,\"1667\":5,\"1722\":2,\"1723\":1}}],[\"2d\",{\"1\":{\"387\":1,\"388\":2,\"496\":1,\"704\":2,\"708\":1,\"711\":2,\"713\":1,\"727\":1,\"732\":1,\"740\":1,\"1663\":5}}],[\"2fzswj7y18mzb6gewkfgcjcdc\",{\"1\":{\"350\":3}}],[\"2334\",{\"1\":{\"914\":2}}],[\"23的形式变成03\",{\"1\":{\"911\":1}}],[\"23t00\",{\"1\":{\"876\":1}}],[\"23\",{\"1\":{\"382\":1,\"385\":1,\"395\":1,\"501\":1,\"772\":2,\"773\":1,\"855\":5,\"875\":4,\"876\":3,\"877\":15,\"911\":6,\"914\":4,\"925\":6,\"944\":2,\"1104\":1,\"1105\":1,\"1540\":1,\"1722\":2}}],[\"23123456\",{\"1\":{\"349\":1}}],[\"2399\",{\"1\":{\"200\":1}}],[\"2k\",{\"1\":{\"296\":1}}],[\"2>\",{\"1\":{\"177\":1}}],[\"224488\",{\"1\":{\"1338\":1}}],[\"225\",{\"1\":{\"1266\":1}}],[\"228\",{\"1\":{\"1266\":1}}],[\"222\",{\"1\":{\"1260\":1,\"1307\":1}}],[\"22t15\",{\"1\":{\"876\":1}}],[\"22t16\",{\"1\":{\"876\":1}}],[\"223355\",{\"1\":{\"1338\":1}}],[\"223\",{\"1\":{\"385\":1}}],[\"22\",{\"1\":{\"176\":1,\"1053\":1,\"1088\":1,\"1162\":1,\"1393\":1,\"1712\":1}}],[\"2模块\",{\"1\":{\"124\":1}}],[\"24003779065523112\",{\"1\":{\"883\":1}}],[\"24\",{\"1\":{\"93\":2,\"206\":1,\"378\":1,\"641\":1,\"848\":2,\"849\":2,\"995\":1,\"1061\":3,\"1098\":2}}],[\"20world\",{\"1\":{\"2045\":1}}],[\"204\",{\"1\":{\"1266\":1}}],[\"20+3j\",{\"1\":{\"395\":1}}],[\"20px\",{\"1\":{\"287\":2,\"546\":2,\"582\":2,\"601\":2,\"612\":1,\"765\":1,\"1275\":1,\"1289\":2,\"1297\":2}}],[\"203\",{\"1\":{\"286\":1}}],[\"20240818162152462\",{\"1\":{\"1977\":1}}],[\"20240816140455521\",{\"1\":{\"1972\":1}}],[\"20240816140132689\",{\"1\":{\"1972\":1}}],[\"20240816140012658\",{\"1\":{\"1972\":1}}],[\"20240906155514474\",{\"1\":{\"1965\":1}}],[\"20240906111147956\",{\"1\":{\"1964\":1}}],[\"20240906102401710\",{\"1\":{\"1951\":1}}],[\"20240318102542437\",{\"1\":{\"1866\":1}}],[\"20240316201127650\",{\"1\":{\"1865\":1}}],[\"20240316152343097\",{\"1\":{\"1864\":1}}],[\"20240316154022019\",{\"1\":{\"1861\":1}}],[\"20240316153703286\",{\"1\":{\"1838\":1}}],[\"20240316161744870\",{\"1\":{\"1847\":1}}],[\"20240316094656477\",{\"1\":{\"1836\":1}}],[\"20240324215104187\",{\"1\":{\"1862\":1}}],[\"20240308195733073\",{\"1\":{\"1779\":1}}],[\"20241122182320969\",{\"1\":{\"1758\":1}}],[\"20241122200941199\",{\"1\":{\"1757\":1}}],[\"20241115232002977\",{\"1\":{\"1748\":1}}],[\"20241115224004771\",{\"1\":{\"1742\":1}}],[\"2021\",{\"1\":{\"1723\":1}}],[\"20211008164017299\",{\"1\":{\"1624\":1}}],[\"20211008163458168\",{\"1\":{\"1623\":1}}],[\"20211008163417521\",{\"1\":{\"1622\":1}}],[\"2020\",{\"1\":{\"1475\":1,\"1534\":4,\"1537\":2,\"1540\":1,\"1723\":1}}],[\"20220930164636149\",{\"1\":{\"1584\":1}}],[\"20220930164358473\",{\"1\":{\"1584\":1}}],[\"20220930105508809\",{\"1\":{\"1580\":1}}],[\"20220906154616921\",{\"1\":{\"1069\":1}}],[\"20220428165629557\",{\"1\":{\"1571\":1}}],[\"20220810104858857\",{\"1\":{\"1558\":1}}],[\"20220810104344296\",{\"1\":{\"1558\":1}}],[\"20220809223027806\",{\"1\":{\"1556\":1}}],[\"20220809213152371\",{\"1\":{\"1555\":1}}],[\"20220809210859457\",{\"1\":{\"1554\":1}}],[\"20221119104125698\",{\"1\":{\"1181\":1}}],[\"20221119092759496\",{\"1\":{\"1168\":1}}],[\"20221124103928013\",{\"1\":{\"737\":1}}],[\"20221123202620132\",{\"1\":{\"726\":1}}],[\"20221123201921994\",{\"1\":{\"725\":1}}],[\"20221123150443073\",{\"1\":{\"717\":1}}],[\"20221123121209574\",{\"1\":{\"706\":1}}],[\"20221123121002884\",{\"1\":{\"706\":1}}],[\"20221123120822512\",{\"1\":{\"706\":1}}],[\"20221123101054215\",{\"1\":{\"680\":1}}],[\"20221123100921950\",{\"1\":{\"680\":1}}],[\"20221128114902131\",{\"1\":{\"697\":1}}],[\"20221128114539798\",{\"1\":{\"697\":1}}],[\"20221128114108465\",{\"1\":{\"696\":1}}],[\"20221126101045761\",{\"1\":{\"662\":1}}],[\"20221102140856507\",{\"1\":{\"223\":1}}],[\"20221218193659346\",{\"1\":{\"564\":1}}],[\"20221218172839309\",{\"1\":{\"533\":1}}],[\"20231012134023642\",{\"1\":{\"1446\":1}}],[\"20230614220822579\",{\"1\":{\"2014\":1}}],[\"20230613223249677\",{\"1\":{\"2011\":1}}],[\"20230524180340479\",{\"1\":{\"1937\":1}}],[\"20230522093731842\",{\"1\":{\"1903\":1}}],[\"20230522093616167\",{\"1\":{\"1903\":1}}],[\"20230522093515753\",{\"1\":{\"1903\":1}}],[\"20230519093732138\",{\"1\":{\"1897\":1}}],[\"20230518153811983\",{\"1\":{\"1891\":1}}],[\"20230517182421551\",{\"1\":{\"1890\":1}}],[\"20230517182210993\",{\"1\":{\"1890\":1}}],[\"20230517192740314\",{\"1\":{\"1889\":1}}],[\"20230508115106933\",{\"1\":{\"1483\":1}}],[\"20230508115022383\",{\"1\":{\"1483\":1}}],[\"20230113190854930\",{\"1\":{\"1632\":1}}],[\"20230113214343300\",{\"1\":{\"1629\":1}}],[\"20230115151406797\",{\"1\":{\"1616\":1}}],[\"20230115150610750\",{\"1\":{\"1616\":1}}],[\"20230115145335319\",{\"1\":{\"1616\":1}}],[\"20230115133817554\",{\"1\":{\"1615\":1}}],[\"20230115133732560\",{\"1\":{\"1615\":1}}],[\"20230115133326930\",{\"1\":{\"1615\":1}}],[\"20230112131000507\",{\"1\":{\"1635\":1}}],[\"20230112114542925\",{\"1\":{\"1630\":1}}],[\"20230112110047746\",{\"1\":{\"1628\":1}}],[\"20230112102913056\",{\"1\":{\"1626\":1}}],[\"20230112104100679\",{\"1\":{\"1626\":1}}],[\"20230112163616513\",{\"1\":{\"1602\":1}}],[\"20230112163455982\",{\"1\":{\"1600\":1}}],[\"20230112205613983\",{\"1\":{\"1614\":1}}],[\"20230112205454350\",{\"1\":{\"1614\":1}}],[\"20230112204634493\",{\"1\":{\"1611\":1}}],[\"20230112204546583\",{\"1\":{\"1610\":1}}],[\"20230112202539003\",{\"1\":{\"1605\":1}}],[\"20230112201027855\",{\"1\":{\"1603\":1}}],[\"20230830171859963\",{\"1\":{\"1446\":1,\"1494\":1}}],[\"20230830171539704\",{\"1\":{\"1446\":1,\"1494\":1}}],[\"20230818160749507\",{\"1\":{\"675\":1}}],[\"20230818113801274\",{\"1\":{\"666\":1}}],[\"20230818113521357\",{\"1\":{\"665\":1}}],[\"20230818170655253\",{\"1\":{\"520\":1}}],[\"20230818170454204\",{\"1\":{\"520\":1}}],[\"20230922184232782\",{\"1\":{\"1838\":1}}],[\"20230922182344463\",{\"1\":{\"1832\":1}}],[\"20230922172952626\",{\"1\":{\"1834\":1}}],[\"20230906132633084\",{\"1\":{\"1433\":1}}],[\"20230906132229897\",{\"1\":{\"1433\":1}}],[\"20230906131935290\",{\"1\":{\"1433\":1}}],[\"20230915102139386\",{\"1\":{\"2071\":1}}],[\"20230914192225280\",{\"1\":{\"1411\":1}}],[\"20230918171944425\",{\"1\":{\"385\":1}}],[\"20230330173503276\",{\"1\":{\"1023\":1}}],[\"20230330171740243\",{\"1\":{\"1023\":1}}],[\"20230321131551437\",{\"1\":{\"1873\":1}}],[\"20230321144242912\",{\"1\":{\"260\":1}}],[\"20230329155746146\",{\"1\":{\"1675\":1}}],[\"20230327223550720\",{\"1\":{\"354\":1}}],[\"20230327222810111\",{\"1\":{\"354\":1}}],[\"20230327214554199\",{\"1\":{\"347\":1}}],[\"20230327163353386\",{\"1\":{\"336\":1}}],[\"20230322162034273\",{\"1\":{\"284\":1}}],[\"20230322162535711\",{\"1\":{\"284\":1}}],[\"20230427172648863\",{\"1\":{\"11\":1}}],[\"2023\",{\"1\":{\"176\":3,\"1735\":4}}],[\"2099\",{\"1\":{\"200\":1}}],[\"20\",{\"1\":{\"176\":1,\"205\":2,\"206\":1,\"350\":1,\"391\":2,\"395\":1,\"466\":1,\"696\":3,\"770\":1,\"808\":2,\"831\":3,\"832\":4,\"833\":3,\"934\":2,\"947\":1,\"948\":2,\"981\":1,\"995\":1,\"996\":1,\"1021\":1,\"1029\":1,\"1039\":1,\"1070\":1,\"1071\":1,\"1072\":1,\"1086\":3,\"1101\":1,\"1201\":2,\"1206\":1,\"1266\":2,\"1393\":1,\"1584\":1,\"1712\":1,\"1723\":2}}],[\"2010\",{\"1\":{\"1093\":2,\"2051\":2}}],[\"2017\",{\"1\":{\"875\":2,\"876\":3,\"911\":10,\"1747\":1}}],[\"2019\",{\"1\":{\"764\":1,\"765\":1,\"772\":2,\"773\":1,\"1104\":1,\"1105\":1}}],[\"2018\",{\"1\":{\"368\":1,\"1088\":2,\"1112\":1,\"1160\":1,\"1161\":3,\"1162\":2}}],[\"2014\",{\"1\":{\"339\":1}}],[\"2013\",{\"1\":{\"156\":1,\"958\":1}}],[\"2016\",{\"1\":{\"84\":1,\"223\":1,\"911\":3,\"925\":6}}],[\"2011\",{\"1\":{\"64\":1}}],[\"2015\",{\"1\":{\"25\":1,\"46\":1,\"1747\":1}}],[\"2007\",{\"1\":{\"1247\":1}}],[\"200x150\",{\"1\":{\"1088\":1}}],[\"2006\",{\"1\":{\"895\":1}}],[\"2005\",{\"1\":{\"895\":1,\"1572\":1}}],[\"2001\",{\"1\":{\"895\":1}}],[\"2004\",{\"1\":{\"875\":4}}],[\"200px\",{\"1\":{\"555\":1,\"580\":8,\"582\":1,\"616\":1,\"765\":2,\"1087\":5,\"1155\":4,\"1201\":1,\"1332\":2,\"1341\":1}}],[\"200\",{\"1\":{\"271\":2,\"476\":1,\"555\":5,\"1038\":1,\"1084\":1,\"1088\":1,\"1365\":1,\"1575\":3,\"1576\":1,\"1577\":1,\"1585\":1,\"1586\":1,\"1635\":1}}],[\"200000\",{\"1\":{\"350\":1}}],[\"2000\",{\"1\":{\"270\":1,\"1025\":1,\"1181\":5,\"1580\":1}}],[\"2009\",{\"1\":{\"24\":2}}],[\"2008\",{\"1\":{\"23\":1,\"24\":3}}],[\"2\",{\"0\":{\"6\":1,\"11\":1,\"14\":1,\"23\":1,\"28\":1,\"34\":1,\"40\":1,\"48\":1,\"58\":1,\"63\":1,\"166\":1,\"172\":1,\"178\":1,\"190\":1,\"219\":1,\"233\":1,\"237\":1,\"249\":1,\"267\":1,\"301\":1,\"304\":1,\"310\":1,\"320\":1,\"324\":1,\"332\":1,\"336\":1,\"346\":1,\"353\":1,\"359\":1,\"368\":1,\"377\":1,\"383\":1,\"396\":1,\"408\":1,\"464\":1,\"472\":1,\"505\":1,\"508\":1,\"517\":1,\"524\":1,\"528\":1,\"530\":1,\"541\":1,\"544\":1,\"557\":1,\"561\":1,\"565\":1,\"569\":1,\"575\":1,\"578\":1,\"581\":1,\"586\":1,\"600\":1,\"611\":1,\"617\":1,\"622\":1,\"628\":1,\"642\":1,\"647\":1,\"657\":1,\"662\":1,\"673\":1,\"681\":1,\"692\":1,\"697\":1,\"702\":1,\"707\":1,\"711\":1,\"723\":1,\"730\":1,\"736\":1,\"743\":1,\"748\":1,\"755\":1,\"757\":1,\"764\":1,\"768\":1,\"773\":1,\"780\":1,\"791\":1,\"804\":1,\"809\":1,\"813\":1,\"819\":1,\"828\":1,\"839\":1,\"852\":1,\"860\":1,\"868\":1,\"875\":1,\"880\":1,\"887\":1,\"897\":1,\"902\":1,\"931\":1,\"956\":1,\"967\":1,\"974\":1,\"981\":1,\"992\":1,\"996\":1,\"999\":1,\"1008\":1,\"1013\":1,\"1018\":1,\"1024\":1,\"1028\":1,\"1034\":1,\"1046\":1,\"1062\":1,\"1070\":1,\"1079\":1,\"1084\":1,\"1087\":1,\"1091\":1,\"1094\":1,\"1097\":1,\"1101\":1,\"1105\":1,\"1112\":1,\"1138\":1,\"1144\":1,\"1145\":1,\"1149\":1,\"1153\":1,\"1161\":1,\"1169\":1,\"1173\":1,\"1178\":1,\"1179\":1,\"1195\":1,\"1199\":1,\"1210\":1,\"1216\":1,\"1222\":1,\"1228\":1,\"1235\":1,\"1250\":1,\"1253\":1,\"1260\":1,\"1285\":1,\"1293\":1,\"1309\":1,\"1328\":1,\"1335\":1,\"1348\":1,\"1351\":1,\"1353\":1,\"1356\":1,\"1360\":1,\"1361\":2,\"1365\":1,\"1369\":1,\"1373\":1,\"1379\":1,\"1383\":1,\"1386\":1,\"1389\":1,\"1393\":1,\"1400\":1,\"1407\":1,\"1411\":1,\"1414\":1,\"1416\":1,\"1420\":1,\"1427\":1,\"1446\":1,\"1449\":1,\"1457\":1,\"1471\":1,\"1478\":1,\"1483\":1,\"1487\":1,\"1497\":1,\"1505\":1,\"1512\":1,\"1515\":1,\"1519\":1,\"1554\":1,\"1570\":1,\"1574\":1,\"1576\":1,\"1585\":1,\"1590\":1,\"1601\":1,\"1613\":1,\"1614\":1,\"1622\":1,\"1627\":1,\"1629\":1,\"1646\":1,\"1656\":1,\"1659\":1,\"1662\":1,\"1670\":1,\"1674\":1,\"1677\":1,\"1692\":1,\"1696\":1,\"1713\":1,\"1726\":1,\"1732\":1,\"1738\":1,\"1741\":1,\"1746\":1,\"1751\":1,\"1762\":1,\"1785\":1,\"1789\":1,\"1795\":1,\"1800\":1,\"1813\":1,\"1825\":1,\"1835\":1,\"1839\":1,\"1848\":1,\"1853\":1,\"1865\":1,\"1873\":1,\"1878\":1,\"1884\":1,\"1889\":1,\"1903\":1,\"1906\":1,\"1910\":1,\"1913\":1,\"1919\":1,\"1928\":1,\"1937\":1,\"1944\":1,\"1947\":1,\"1954\":1,\"1962\":1,\"1965\":1,\"1969\":1,\"1977\":1,\"1985\":1,\"1990\":1,\"2001\":1,\"2009\":1,\"2019\":1,\"2029\":1,\"2032\":1,\"2035\":1,\"2041\":1,\"2050\":1,\"2054\":1,\"2058\":1,\"2061\":1,\"2064\":1,\"2069\":1,\"2077\":1},\"1\":{\"35\":1,\"37\":1,\"59\":1,\"67\":1,\"75\":1,\"78\":1,\"124\":3,\"133\":1,\"138\":1,\"176\":1,\"182\":1,\"191\":1,\"200\":1,\"212\":1,\"219\":1,\"239\":1,\"257\":1,\"273\":1,\"275\":1,\"278\":1,\"282\":1,\"283\":2,\"284\":1,\"285\":1,\"286\":2,\"301\":1,\"305\":1,\"307\":1,\"321\":1,\"327\":1,\"329\":1,\"340\":1,\"349\":2,\"355\":1,\"385\":2,\"386\":1,\"388\":2,\"390\":1,\"393\":1,\"395\":1,\"402\":13,\"403\":1,\"404\":2,\"405\":4,\"408\":4,\"410\":1,\"411\":1,\"412\":1,\"413\":3,\"414\":2,\"415\":1,\"416\":4,\"417\":1,\"418\":2,\"439\":1,\"449\":6,\"453\":1,\"472\":1,\"486\":2,\"494\":1,\"498\":3,\"501\":3,\"517\":2,\"520\":1,\"591\":1,\"618\":1,\"621\":1,\"635\":1,\"641\":1,\"649\":1,\"669\":2,\"697\":1,\"717\":1,\"722\":1,\"725\":1,\"732\":2,\"740\":8,\"746\":1,\"764\":1,\"765\":5,\"768\":1,\"769\":8,\"770\":3,\"789\":1,\"790\":1,\"794\":5,\"795\":1,\"796\":1,\"801\":1,\"803\":3,\"805\":1,\"806\":3,\"813\":1,\"815\":2,\"822\":2,\"828\":3,\"830\":1,\"832\":2,\"833\":1,\"835\":1,\"840\":1,\"841\":1,\"842\":1,\"843\":4,\"844\":3,\"845\":3,\"846\":10,\"847\":5,\"848\":3,\"849\":2,\"851\":4,\"853\":1,\"854\":21,\"855\":3,\"856\":7,\"857\":2,\"860\":2,\"861\":11,\"862\":7,\"863\":4,\"864\":9,\"865\":8,\"868\":2,\"869\":1,\"877\":2,\"879\":6,\"883\":6,\"890\":1,\"891\":12,\"902\":1,\"903\":1,\"910\":6,\"911\":11,\"913\":9,\"918\":1,\"920\":2,\"923\":2,\"924\":1,\"925\":11,\"932\":2,\"933\":6,\"934\":2,\"945\":10,\"946\":16,\"947\":2,\"948\":2,\"951\":2,\"958\":6,\"967\":1,\"981\":1,\"983\":1,\"989\":2,\"991\":1,\"995\":17,\"1000\":1,\"1012\":1,\"1015\":1,\"1025\":2,\"1030\":3,\"1031\":1,\"1033\":1,\"1039\":4,\"1054\":2,\"1057\":1,\"1058\":2,\"1063\":2,\"1065\":1,\"1066\":1,\"1079\":1,\"1086\":1,\"1087\":1,\"1088\":9,\"1105\":3,\"1135\":1,\"1139\":2,\"1140\":2,\"1144\":1,\"1145\":4,\"1146\":2,\"1150\":1,\"1152\":1,\"1153\":2,\"1155\":1,\"1156\":2,\"1157\":3,\"1161\":2,\"1162\":1,\"1181\":2,\"1182\":2,\"1186\":2,\"1188\":2,\"1195\":1,\"1196\":1,\"1198\":1,\"1199\":1,\"1201\":1,\"1207\":1,\"1214\":2,\"1221\":1,\"1224\":1,\"1225\":3,\"1254\":1,\"1259\":1,\"1261\":1,\"1264\":5,\"1265\":1,\"1268\":1,\"1271\":1,\"1274\":1,\"1276\":2,\"1284\":2,\"1285\":2,\"1296\":2,\"1329\":1,\"1338\":6,\"1352\":2,\"1370\":1,\"1396\":1,\"1432\":1,\"1441\":1,\"1446\":1,\"1475\":1,\"1493\":1,\"1494\":1,\"1499\":1,\"1518\":2,\"1573\":1,\"1575\":1,\"1576\":1,\"1592\":1,\"1609\":3,\"1655\":2,\"1663\":9,\"1664\":1,\"1665\":3,\"1673\":1,\"1676\":1,\"1680\":3,\"1712\":5,\"1715\":3,\"1720\":1,\"1723\":3,\"1731\":1,\"1751\":2,\"1768\":2,\"1777\":2,\"1778\":1,\"1779\":4,\"1785\":1,\"1791\":1,\"1792\":2,\"1795\":1,\"1797\":1,\"1822\":1,\"1834\":1,\"1865\":1,\"1878\":1,\"1896\":1,\"1903\":1,\"1910\":1,\"1911\":1,\"1917\":3,\"1927\":2,\"1937\":1,\"1944\":1,\"1949\":2,\"1951\":1,\"1953\":1,\"1965\":1,\"1966\":1,\"1968\":1,\"1974\":12,\"1977\":1,\"1978\":1,\"1997\":1,\"1998\":1,\"2000\":1,\"2001\":1,\"2002\":1,\"2015\":1,\"2019\":2,\"2020\":1,\"2026\":1,\"2029\":3,\"2041\":1,\"2053\":1,\"2058\":4,\"2061\":2,\"2063\":5,\"2065\":3,\"2069\":2,\"2071\":1,\"2075\":1,\"2087\":1}}],[\"1向下修正\",{\"1\":{\"1723\":1}}],[\"1m\",{\"1\":{\"1592\":1}}],[\"1版本中\",{\"1\":{\"1542\":1}}],[\"1版本\",{\"1\":{\"1540\":1}}],[\"1的规范\",{\"1\":{\"1537\":1}}],[\"1cm\",{\"1\":{\"1338\":1}}],[\"1rem\",{\"1\":{\"1260\":4,\"1307\":2}}],[\"1+r\",{\"1\":{\"1748\":1,\"1753\":2}}],[\"1+r分子\",{\"1\":{\"1732\":1,\"1753\":1}}],[\"1+r分母\",{\"1\":{\"1732\":1,\"1753\":1}}],[\"1+rc​rb​−rc​\",{\"1\":{\"1728\":1}}],[\"1+r实​\",{\"1\":{\"1727\":1}}],[\"1+r名​b​×\",{\"1\":{\"1727\":1}}],[\"1+\",{\"1\":{\"956\":1}}],[\"1+2\",{\"1\":{\"389\":1}}],[\"1b\",{\"1\":{\"919\":2}}],[\"1a\",{\"1\":{\"919\":2}}],[\"1asd\",{\"1\":{\"917\":1}}],[\"1abc1\",{\"1\":{\"519\":1}}],[\"1xj\",{\"1\":{\"912\":2}}],[\"1y\",{\"1\":{\"719\":1}}],[\"1vw\",{\"1\":{\"650\":1}}],[\"1s\",{\"1\":{\"641\":1,\"1937\":1}}],[\"1f\",{\"1\":{\"1680\":1}}],[\"1fr\",{\"1\":{\"580\":1}}],[\"1font\",{\"1\":{\"534\":1}}],[\"1px\",{\"1\":{\"580\":10,\"650\":1,\"707\":1,\"773\":1,\"1087\":1,\"1148\":2,\"1153\":1,\"1206\":1,\"1257\":2,\"1267\":8,\"1271\":4,\"1274\":3,\"1297\":2,\"1310\":1,\"1335\":4,\"1338\":1}}],[\"1e\",{\"1\":{\"903\":1}}],[\"1evel\",{\"1\":{\"578\":1}}],[\"1em\",{\"1\":{\"534\":1}}],[\"1参数\",{\"1\":{\"486\":1}}],[\"1基本术语\",{\"1\":{\"405\":1}}],[\"1匿名函数\",{\"1\":{\"402\":1}}],[\"1函数定义\",{\"1\":{\"402\":1}}],[\"171ca289ebf\",{\"1\":{\"1534\":4,\"1537\":3}}],[\"179\",{\"1\":{\"1266\":1}}],[\"17222\",{\"1\":{\"1101\":2}}],[\"1725106032\",{\"1\":{\"382\":3}}],[\"1725105328\",{\"1\":{\"382\":1}}],[\"17\",{\"0\":{\"1409\":1},\"1\":{\"395\":1,\"910\":1,\"947\":1,\"1088\":3,\"1370\":1,\"1711\":1}}],[\"1621561377603\",{\"1\":{\"1397\":1}}],[\"16px\",{\"1\":{\"1259\":1,\"1264\":3,\"1268\":1,\"1270\":2,\"1272\":2,\"1289\":2,\"1290\":6,\"1306\":1,\"1309\":2,\"1313\":3,\"1315\":3,\"1319\":2}}],[\"16588246930073\",{\"1\":{\"1037\":1}}],[\"16\",{\"0\":{\"1405\":1},\"1\":{\"317\":1,\"391\":1,\"764\":1,\"772\":1,\"789\":1,\"876\":2,\"910\":1,\"925\":1,\"947\":1,\"1264\":1,\"1370\":1,\"1534\":4,\"1537\":3,\"1662\":4,\"1669\":3,\"1712\":1}}],[\"133\",{\"1\":{\"1477\":1}}],[\"1333333333333333vw\",{\"1\":{\"650\":1}}],[\"13778\",{\"1\":{\"1101\":3}}],[\"13800000000\",{\"1\":{\"1060\":1}}],[\"13+\",{\"1\":{\"956\":1}}],[\"130\",{\"1\":{\"856\":2,\"857\":2}}],[\"13\",{\"0\":{\"296\":1,\"1397\":1,\"1439\":1,\"1468\":1},\"1\":{\"395\":1,\"789\":1,\"875\":1,\"925\":1,\"947\":1,\"1048\":1,\"1049\":1,\"1104\":1,\"1648\":1}}],[\"128\",{\"1\":{\"2101\":1}}],[\"124\",{\"1\":{\"1573\":1}}],[\"121\",{\"1\":{\"1534\":4,\"1537\":3}}],[\"12px\",{\"1\":{\"1260\":1,\"1268\":2,\"1270\":2,\"1272\":2,\"1289\":2,\"1331\":2}}],[\"120\",{\"1\":{\"1101\":3,\"1594\":1}}],[\"12000\",{\"1\":{\"1047\":1}}],[\"1200\",{\"1\":{\"651\":1}}],[\"12+\",{\"1\":{\"956\":1}}],[\"12|23|34\",{\"1\":{\"914\":4}}],[\"1220\",{\"1\":{\"1671\":1}}],[\"12232434\",{\"1\":{\"1059\":1}}],[\"122\",{\"1\":{\"806\":1}}],[\"12e2\",{\"1\":{\"793\":1}}],[\"12345\",{\"1\":{\"913\":3}}],[\"1234567890\",{\"1\":{\"366\":1}}],[\"123456\",{\"1\":{\"317\":1,\"1634\":2,\"2101\":1}}],[\"123hello\",{\"1\":{\"806\":1}}],[\"123123\",{\"1\":{\"913\":2,\"1630\":1,\"1634\":1}}],[\"123123<\",{\"1\":{\"520\":1}}],[\"1231231231<\",{\"1\":{\"520\":5}}],[\"123\",{\"1\":{\"482\":1,\"493\":1,\"519\":1,\"795\":2,\"806\":1,\"854\":1,\"913\":4,\"948\":1,\"995\":8,\"1088\":3,\"1161\":3,\"1265\":2,\"2045\":4,\"2047\":5}}],[\"125\",{\"1\":{\"388\":2}}],[\"12\",{\"0\":{\"295\":1,\"675\":1,\"1391\":1,\"1438\":1,\"1467\":1},\"1\":{\"396\":1,\"789\":1,\"790\":1,\"792\":1,\"806\":1,\"810\":1,\"855\":10,\"856\":1,\"857\":2,\"875\":2,\"893\":2,\"911\":4,\"914\":3,\"925\":1,\"944\":4,\"947\":1,\"1047\":1,\"1048\":1,\"1049\":1,\"1088\":2,\"1112\":1,\"1160\":1,\"1161\":3,\"1162\":2,\"1196\":1,\"1201\":2,\"1534\":4,\"1667\":5,\"1731\":1}}],[\"127\",{\"1\":{\"134\":1,\"191\":1,\"200\":1,\"212\":1,\"274\":1,\"284\":2,\"301\":1,\"355\":1,\"372\":1,\"1266\":2,\"1576\":1,\"1577\":1,\"1579\":1,\"1581\":1,\"1582\":1,\"1584\":1,\"1586\":1,\"1587\":1}}],[\"1424\",{\"1\":{\"1671\":1}}],[\"14px\",{\"1\":{\"1289\":2,\"1290\":6,\"1306\":2}}],[\"1481869925657\",{\"1\":{\"995\":2}}],[\"1483228800000\",{\"1\":{\"875\":2}}],[\"141592653589793\",{\"1\":{\"879\":1}}],[\"14\",{\"0\":{\"1398\":1,\"1440\":1},\"1\":{\"255\":1,\"395\":2,\"789\":1,\"793\":2,\"803\":2,\"806\":2,\"843\":1,\"882\":1,\"947\":1,\"1088\":1}}],[\"15px\",{\"1\":{\"1267\":1}}],[\"153\",{\"1\":{\"1266\":2}}],[\"15118764014918\",{\"1\":{\"1155\":1}}],[\"15118515229457\",{\"1\":{\"1155\":1}}],[\"1511767768\",{\"1\":{\"874\":1}}],[\"1511767644238\",{\"1\":{\"874\":1}}],[\"1500\",{\"1\":{\"1225\":2}}],[\"150\",{\"1\":{\"703\":1,\"726\":4,\"1087\":1,\"1088\":1,\"1224\":5,\"1225\":2,\"1746\":1}}],[\"150px\",{\"1\":{\"701\":1,\"1087\":3,\"1207\":4}}],[\"15\",{\"0\":{\"1404\":1,\"1441\":1},\"1\":{\"206\":1,\"792\":3,\"910\":4,\"946\":1,\"947\":1,\"995\":1,\"1040\":1,\"1260\":2,\"1307\":1,\"1338\":1,\"1718\":1}}],[\"1>\",{\"1\":{\"177\":1,\"912\":3}}],[\"1901\",{\"1\":{\"1671\":1}}],[\"1900\",{\"1\":{\"877\":1}}],[\"191970\",{\"1\":{\"1266\":1}}],[\"1988\",{\"1\":{\"877\":1}}],[\"1970\",{\"1\":{\"874\":1,\"875\":1,\"876\":1,\"877\":2}}],[\"1920px\",{\"1\":{\"649\":3}}],[\"1920\",{\"1\":{\"646\":1}}],[\"19\",{\"1\":{\"176\":1,\"181\":1,\"191\":1,\"212\":1,\"925\":1,\"947\":1,\"1393\":1}}],[\"1991\",{\"1\":{\"1671\":1}}],[\"1994\",{\"1\":{\"1084\":1}}],[\"1995\",{\"1\":{\"980\":1}}],[\"1992\",{\"1\":{\"877\":2}}],[\"1990\",{\"1\":{\"875\":4,\"876\":6,\"877\":13}}],[\"1999\",{\"1\":{\"692\":2}}],[\"1998\",{\"1\":{\"22\":1}}],[\"1996\",{\"1\":{\"22\":1}}],[\"1模块\",{\"1\":{\"124\":1}}],[\"1121\",{\"1\":{\"1671\":1}}],[\"112244\",{\"1\":{\"1338\":2}}],[\"117\",{\"1\":{\"1594\":1}}],[\"114\",{\"1\":{\"1594\":1}}],[\"113\",{\"1\":{\"1266\":2}}],[\"115\",{\"1\":{\"946\":1,\"1266\":1}}],[\"110\",{\"1\":{\"946\":1,\"947\":1}}],[\"111\",{\"1\":{\"685\":1,\"888\":1,\"1338\":1}}],[\"11支持\",{\"1\":{\"405\":1}}],[\"11\",{\"0\":{\"78\":1,\"294\":1,\"671\":1,\"922\":1,\"1387\":1,\"1437\":1,\"1466\":1,\"1502\":1},\"1\":{\"75\":1,\"346\":1,\"372\":1,\"707\":2,\"764\":1,\"765\":1,\"790\":1,\"803\":1,\"806\":3,\"841\":2,\"876\":1,\"877\":2,\"925\":1,\"947\":1,\"1053\":1,\"1054\":1,\"1265\":1,\"1714\":1}}],[\"18px\",{\"1\":{\"1275\":4,\"1290\":6}}],[\"180\",{\"1\":{\"716\":1,\"1585\":2}}],[\"180deg\",{\"1\":{\"617\":1}}],[\"18\",{\"1\":{\"49\":2,\"176\":1,\"206\":1,\"769\":2,\"770\":1,\"827\":2,\"828\":5,\"829\":2,\"830\":11,\"831\":2,\"832\":6,\"833\":9,\"834\":3,\"836\":1,\"857\":1,\"868\":8,\"869\":3,\"870\":7,\"871\":6,\"896\":4,\"897\":3,\"910\":3,\"925\":1,\"934\":2,\"947\":1,\"996\":1,\"1055\":1,\"1056\":1,\"1058\":1,\"1059\":1,\"1060\":1,\"1066\":1,\"1067\":1,\"1112\":1,\"1160\":1,\"1161\":3,\"1162\":2,\"1201\":6,\"1364\":2,\"1475\":1,\"1486\":1,\"1488\":1,\"1720\":1}}],[\"105\",{\"1\":{\"1594\":1,\"1723\":1}}],[\"10mm\",{\"1\":{\"1338\":1}}],[\"107\",{\"1\":{\"1266\":2}}],[\"102\",{\"1\":{\"1266\":1}}],[\"1024\",{\"1\":{\"794\":5}}],[\"10次===\",{\"1\":{\"1188\":1}}],[\"106\",{\"1\":{\"946\":1}}],[\"103\",{\"1\":{\"946\":1}}],[\"108\",{\"1\":{\"888\":2}}],[\"1080\",{\"1\":{\"646\":1}}],[\"104\",{\"1\":{\"888\":1}}],[\"10px\",{\"1\":{\"544\":1,\"623\":1,\"773\":1,\"1259\":1,\"1264\":1,\"1267\":1,\"1268\":1,\"1270\":2,\"1272\":2,\"1274\":4,\"1294\":1,\"1295\":1,\"1297\":2}}],[\"10自定义异常类\",{\"1\":{\"405\":1}}],[\"101\",{\"1\":{\"402\":1,\"888\":2,\"946\":1,\"995\":1,\"1648\":1}}],[\"1010\",{\"1\":{\"395\":1,\"789\":1}}],[\"100x100\",{\"1\":{\"1088\":2}}],[\"100vw\",{\"1\":{\"650\":2}}],[\"100ms\",{\"1\":{\"641\":1}}],[\"100px\",{\"1\":{\"572\":1,\"636\":2,\"764\":2,\"1087\":4,\"1139\":1,\"1140\":1,\"1148\":2,\"1153\":3,\"1155\":4,\"1207\":3,\"1274\":3,\"1327\":1,\"1334\":2,\"1336\":1,\"1341\":6}}],[\"10000px\",{\"1\":{\"582\":1}}],[\"100000\",{\"1\":{\"480\":1}}],[\"1000\",{\"1\":{\"349\":1,\"355\":2,\"498\":1,\"504\":1,\"874\":3,\"1088\":3,\"1225\":1,\"1937\":1}}],[\"100\",{\"1\":{\"284\":1,\"304\":1,\"501\":2,\"535\":3,\"555\":2,\"580\":1,\"616\":1,\"621\":1,\"668\":1,\"696\":3,\"726\":1,\"727\":1,\"786\":2,\"827\":2,\"828\":5,\"830\":1,\"883\":2,\"933\":2,\"946\":2,\"948\":3,\"995\":1,\"1057\":1,\"1087\":1,\"1088\":17,\"1104\":1,\"1158\":2,\"1181\":1,\"1206\":2,\"1224\":8,\"1225\":4,\"1232\":4,\"1249\":2,\"1250\":1,\"1264\":2,\"1365\":1,\"1379\":1,\"1584\":1,\"1586\":1,\"1655\":8,\"1718\":1,\"1720\":1,\"1751\":3,\"1937\":1,\"2012\":1,\"2019\":1}}],[\"10\",{\"0\":{\"77\":1,\"290\":1,\"636\":1,\"670\":1,\"836\":1,\"921\":1,\"949\":1,\"1243\":1,\"1384\":1,\"1436\":1,\"1465\":1,\"1501\":1},\"1\":{\"23\":1,\"30\":1,\"44\":2,\"45\":1,\"211\":2,\"263\":1,\"339\":4,\"355\":1,\"386\":1,\"388\":2,\"395\":3,\"402\":1,\"408\":3,\"419\":4,\"439\":1,\"501\":1,\"707\":6,\"727\":1,\"764\":1,\"765\":3,\"768\":1,\"777\":2,\"786\":9,\"789\":7,\"790\":2,\"795\":1,\"803\":1,\"805\":1,\"806\":4,\"812\":2,\"821\":1,\"832\":2,\"842\":1,\"843\":2,\"846\":1,\"854\":12,\"856\":1,\"857\":2,\"879\":2,\"883\":1,\"893\":1,\"939\":6,\"945\":6,\"946\":2,\"947\":1,\"948\":1,\"956\":1,\"958\":4,\"980\":1,\"983\":4,\"985\":2,\"991\":4,\"995\":1,\"996\":6,\"1015\":5,\"1021\":2,\"1028\":3,\"1029\":1,\"1086\":4,\"1088\":2,\"1112\":1,\"1188\":1,\"1286\":2,\"1337\":2,\"1338\":1,\"1407\":1,\"1452\":1,\"1454\":1,\"1586\":1,\"1621\":1,\"1655\":5,\"1669\":1,\"1673\":1,\"1674\":1,\"1718\":3,\"1720\":3,\"1723\":3,\"2013\":1}}],[\"1\",{\"0\":{\"5\":1,\"10\":1,\"13\":1,\"22\":1,\"27\":1,\"33\":1,\"39\":1,\"47\":1,\"57\":1,\"62\":1,\"165\":1,\"171\":1,\"177\":1,\"189\":1,\"218\":1,\"229\":1,\"232\":1,\"236\":1,\"243\":1,\"266\":1,\"300\":1,\"303\":1,\"309\":1,\"319\":1,\"323\":1,\"331\":1,\"335\":1,\"345\":1,\"352\":1,\"358\":1,\"364\":1,\"371\":1,\"376\":1,\"382\":1,\"395\":1,\"407\":1,\"464\":1,\"471\":1,\"504\":1,\"507\":2,\"508\":1,\"516\":1,\"523\":1,\"527\":1,\"529\":1,\"540\":1,\"543\":1,\"553\":1,\"560\":1,\"564\":1,\"568\":1,\"574\":1,\"577\":1,\"580\":1,\"585\":1,\"595\":1,\"610\":1,\"616\":1,\"621\":1,\"627\":1,\"641\":1,\"646\":1,\"656\":1,\"661\":1,\"672\":1,\"680\":1,\"691\":1,\"696\":1,\"701\":1,\"706\":1,\"710\":1,\"722\":1,\"729\":1,\"735\":1,\"742\":1,\"747\":1,\"754\":1,\"763\":1,\"767\":1,\"772\":1,\"779\":1,\"788\":1,\"803\":1,\"808\":1,\"812\":1,\"818\":1,\"827\":1,\"838\":1,\"851\":1,\"859\":1,\"867\":1,\"874\":1,\"879\":1,\"886\":1,\"896\":1,\"899\":1,\"927\":1,\"955\":1,\"964\":1,\"969\":1,\"980\":1,\"991\":1,\"998\":1,\"1007\":1,\"1012\":1,\"1017\":1,\"1023\":1,\"1027\":1,\"1033\":1,\"1045\":1,\"1051\":1,\"1069\":1,\"1078\":1,\"1083\":1,\"1086\":1,\"1090\":1,\"1093\":1,\"1096\":1,\"1100\":1,\"1104\":1,\"1111\":1,\"1132\":1,\"1137\":1,\"1143\":1,\"1148\":1,\"1152\":1,\"1160\":1,\"1168\":1,\"1172\":1,\"1177\":1,\"1194\":1,\"1198\":1,\"1209\":1,\"1215\":1,\"1221\":1,\"1227\":1,\"1234\":1,\"1249\":1,\"1252\":1,\"1259\":1,\"1284\":1,\"1292\":1,\"1301\":1,\"1327\":1,\"1334\":1,\"1346\":1,\"1347\":1,\"1352\":1,\"1355\":1,\"1360\":1,\"1364\":1,\"1368\":1,\"1372\":1,\"1378\":1,\"1382\":1,\"1385\":1,\"1388\":1,\"1392\":1,\"1399\":1,\"1406\":1,\"1410\":1,\"1413\":1,\"1415\":1,\"1419\":1,\"1426\":1,\"1443\":1,\"1448\":1,\"1456\":1,\"1470\":1,\"1477\":1,\"1482\":1,\"1486\":1,\"1496\":1,\"1504\":1,\"1511\":1,\"1514\":1,\"1518\":1,\"1553\":1,\"1569\":1,\"1573\":1,\"1575\":1,\"1584\":1,\"1589\":1,\"1600\":1,\"1605\":1,\"1612\":1,\"1621\":1,\"1626\":1,\"1628\":1,\"1645\":1,\"1655\":1,\"1658\":1,\"1661\":1,\"1669\":1,\"1673\":1,\"1676\":1,\"1680\":1,\"1686\":1,\"1695\":1,\"1705\":1,\"1710\":1,\"1725\":1,\"1731\":1,\"1737\":1,\"1740\":1,\"1745\":1,\"1750\":1,\"1761\":1,\"1784\":1,\"1788\":1,\"1791\":1,\"1799\":1,\"1809\":1,\"1824\":1,\"1834\":1,\"1838\":1,\"1844\":1,\"1852\":1,\"1864\":1,\"1870\":1,\"1872\":1,\"1877\":1,\"1888\":1,\"1902\":1,\"1905\":1,\"1909\":1,\"1912\":1,\"1916\":1,\"1927\":1,\"1936\":1,\"1943\":1,\"1946\":1,\"1953\":1,\"1961\":1,\"1964\":1,\"1968\":1,\"1974\":1,\"1976\":1,\"1984\":1,\"1989\":1,\"2000\":1,\"2008\":1,\"2018\":1,\"2028\":1,\"2031\":1,\"2034\":1,\"2040\":1,\"2049\":1,\"2053\":1,\"2057\":1,\"2060\":1,\"2063\":1,\"2068\":1,\"2072\":1},\"1\":{\"30\":2,\"34\":1,\"35\":1,\"37\":1,\"44\":4,\"45\":2,\"49\":2,\"64\":6,\"67\":1,\"75\":1,\"124\":3,\"134\":1,\"138\":1,\"165\":2,\"176\":4,\"191\":2,\"200\":2,\"209\":3,\"210\":3,\"212\":2,\"219\":1,\"239\":1,\"257\":1,\"259\":1,\"263\":1,\"271\":4,\"273\":1,\"274\":1,\"275\":1,\"282\":3,\"283\":2,\"284\":3,\"285\":1,\"286\":2,\"287\":2,\"301\":2,\"304\":1,\"305\":1,\"307\":1,\"321\":1,\"327\":1,\"329\":1,\"340\":1,\"345\":1,\"349\":1,\"355\":1,\"372\":1,\"388\":2,\"390\":2,\"391\":1,\"393\":1,\"395\":3,\"402\":12,\"403\":4,\"404\":2,\"405\":4,\"408\":6,\"410\":5,\"411\":1,\"412\":4,\"413\":2,\"415\":2,\"416\":6,\"417\":2,\"418\":5,\"439\":1,\"449\":5,\"451\":2,\"453\":1,\"458\":1,\"472\":2,\"476\":1,\"480\":1,\"482\":2,\"486\":6,\"487\":4,\"488\":3,\"493\":2,\"494\":2,\"498\":2,\"501\":3,\"517\":2,\"524\":4,\"534\":2,\"535\":1,\"580\":1,\"591\":2,\"592\":5,\"628\":1,\"644\":1,\"649\":3,\"650\":3,\"666\":1,\"670\":1,\"696\":1,\"697\":1,\"708\":1,\"717\":2,\"720\":3,\"725\":3,\"726\":1,\"727\":1,\"740\":5,\"742\":2,\"750\":2,\"758\":1,\"764\":1,\"765\":4,\"769\":8,\"770\":2,\"787\":1,\"794\":1,\"795\":1,\"796\":1,\"801\":7,\"803\":1,\"805\":1,\"806\":7,\"813\":2,\"815\":2,\"822\":2,\"828\":3,\"830\":1,\"832\":2,\"833\":2,\"835\":1,\"840\":1,\"841\":1,\"842\":1,\"843\":7,\"844\":3,\"845\":2,\"846\":15,\"847\":6,\"848\":2,\"849\":2,\"851\":4,\"854\":16,\"855\":7,\"856\":6,\"857\":1,\"860\":2,\"861\":12,\"862\":9,\"863\":4,\"864\":9,\"865\":9,\"868\":2,\"874\":2,\"875\":2,\"876\":2,\"877\":7,\"879\":1,\"881\":3,\"883\":9,\"888\":2,\"890\":2,\"894\":1,\"897\":1,\"902\":3,\"906\":2,\"908\":2,\"911\":3,\"912\":1,\"913\":5,\"914\":1,\"918\":1,\"923\":2,\"925\":3,\"932\":3,\"933\":5,\"934\":2,\"935\":2,\"945\":5,\"946\":16,\"947\":1,\"951\":2,\"953\":9,\"958\":3,\"967\":2,\"970\":1,\"978\":1,\"981\":1,\"983\":1,\"985\":1,\"989\":1,\"991\":1,\"995\":31,\"1012\":1,\"1015\":3,\"1025\":1,\"1030\":7,\"1031\":4,\"1033\":1,\"1038\":1,\"1053\":2,\"1054\":2,\"1057\":1,\"1058\":1,\"1063\":2,\"1065\":1,\"1066\":1,\"1078\":1,\"1086\":4,\"1087\":1,\"1088\":7,\"1093\":1,\"1097\":2,\"1105\":5,\"1139\":2,\"1140\":2,\"1141\":1,\"1150\":2,\"1152\":1,\"1153\":2,\"1156\":1,\"1157\":3,\"1161\":3,\"1162\":1,\"1181\":3,\"1182\":2,\"1186\":2,\"1188\":2,\"1196\":5,\"1198\":1,\"1199\":1,\"1201\":3,\"1205\":1,\"1207\":2,\"1208\":1,\"1219\":2,\"1221\":1,\"1224\":2,\"1225\":1,\"1239\":2,\"1254\":6,\"1255\":4,\"1260\":1,\"1265\":3,\"1267\":2,\"1268\":1,\"1271\":1,\"1276\":2,\"1285\":4,\"1286\":1,\"1329\":2,\"1332\":1,\"1338\":3,\"1358\":1,\"1368\":2,\"1370\":1,\"1376\":1,\"1379\":2,\"1393\":1,\"1395\":2,\"1396\":1,\"1432\":1,\"1441\":1,\"1454\":1,\"1493\":2,\"1496\":1,\"1499\":1,\"1519\":2,\"1534\":1,\"1539\":1,\"1543\":1,\"1573\":1,\"1575\":1,\"1576\":2,\"1577\":1,\"1579\":1,\"1581\":2,\"1582\":2,\"1584\":1,\"1586\":1,\"1587\":1,\"1592\":1,\"1609\":4,\"1630\":2,\"1632\":2,\"1648\":2,\"1655\":1,\"1656\":2,\"1659\":1,\"1662\":1,\"1663\":8,\"1665\":1,\"1667\":8,\"1669\":1,\"1673\":2,\"1675\":1,\"1680\":6,\"1711\":2,\"1712\":2,\"1715\":3,\"1718\":4,\"1720\":2,\"1722\":6,\"1723\":4,\"1725\":1,\"1731\":4,\"1732\":1,\"1737\":1,\"1746\":3,\"1748\":2,\"1751\":2,\"1753\":1,\"1768\":2,\"1777\":2,\"1778\":1,\"1779\":3,\"1786\":2,\"1789\":6,\"1791\":2,\"1792\":13,\"1793\":1,\"1794\":5,\"1795\":5,\"1797\":2,\"1815\":2,\"1816\":1,\"1822\":2,\"1824\":2,\"1834\":1,\"1891\":1,\"1892\":1,\"1893\":1,\"1894\":1,\"1895\":1,\"1896\":1,\"1897\":1,\"1902\":3,\"1905\":1,\"1906\":1,\"1910\":2,\"1911\":2,\"1915\":1,\"1924\":1,\"1925\":2,\"1927\":4,\"1929\":2,\"1931\":3,\"1937\":1,\"1943\":1,\"1944\":1,\"1951\":1,\"1953\":1,\"1954\":1,\"1962\":2,\"1964\":1,\"1965\":3,\"1966\":3,\"1968\":4,\"1969\":11,\"1974\":24,\"1977\":2,\"1978\":1,\"1979\":1,\"1984\":1,\"1993\":1,\"1997\":1,\"1998\":1,\"2000\":1,\"2001\":1,\"2015\":1,\"2020\":1,\"2029\":3,\"2041\":3,\"2043\":2,\"2044\":1,\"2047\":2,\"2053\":1,\"2055\":2,\"2058\":8,\"2061\":4,\"2065\":14,\"2068\":3,\"2069\":2,\"2071\":1,\"2087\":1,\"2101\":1}}],[\"三种设置类名的方法中\",{\"1\":{\"1949\":1}}],[\"三年\",{\"1\":{\"1747\":1}}],[\"三浓度排序\",{\"0\":{\"1741\":1}}],[\"三个私有变量\",{\"1\":{\"2060\":1}}],[\"三个状态\",{\"1\":{\"1776\":1}}],[\"三个模块中都有一个名叫\",{\"1\":{\"1310\":1}}],[\"三个值\",{\"1\":{\"544\":1,\"612\":1}}],[\"三目运算符的优先级很低\",{\"1\":{\"816\":1}}],[\"三目运算符\",{\"0\":{\"400\":1,\"815\":1},\"1\":{\"816\":1}}],[\"三人行\",{\"1\":{\"244\":2,\"245\":1}}],[\"三\",{\"0\":{\"4\":1,\"32\":1,\"79\":1,\"118\":1,\"149\":1,\"167\":1,\"188\":1,\"217\":1,\"238\":1,\"265\":1,\"302\":1,\"340\":1,\"351\":1,\"381\":1,\"431\":1,\"440\":1,\"447\":1,\"480\":1,\"509\":1,\"526\":1,\"567\":1,\"620\":1,\"651\":1,\"659\":1,\"683\":1,\"695\":1,\"787\":1,\"979\":1,\"1016\":1,\"1068\":1,\"1085\":1,\"1115\":1,\"1147\":1,\"1174\":1,\"1203\":1,\"1251\":1,\"1326\":1,\"1425\":1,\"1503\":1,\"1528\":1,\"1557\":1,\"1588\":1,\"1637\":1,\"1650\":1,\"1660\":1,\"1694\":1,\"1730\":1,\"1759\":1,\"1778\":1,\"1790\":1,\"1836\":1,\"1876\":1,\"1887\":1,\"1908\":1,\"1952\":1,\"1967\":1,\"1979\":1,\"2003\":1,\"2017\":1,\"2027\":1,\"2052\":1},\"1\":{\"207\":3}}],[\"gpu\",{\"0\":{\"1675\":1,\"1676\":1},\"1\":{\"1526\":5,\"1530\":1,\"1655\":1,\"1680\":1}}],[\"guardcall\",{\"1\":{\"2075\":6}}],[\"guardreturn\",{\"1\":{\"2075\":3}}],[\"guardtype\",{\"1\":{\"2074\":4}}],[\"guardtopromisefn\",{\"0\":{\"2075\":1},\"1\":{\"2072\":1,\"2074\":4,\"2075\":3,\"2078\":1,\"2079\":1,\"2080\":1,\"2081\":2,\"2083\":1}}],[\"guard\",{\"1\":{\"2072\":3,\"2074\":7,\"2075\":8,\"2076\":2,\"2078\":2,\"2079\":2,\"2080\":2,\"2083\":2,\"2084\":2}}],[\"guards\",{\"1\":{\"2072\":7,\"2074\":6,\"2076\":3,\"2078\":5,\"2079\":5,\"2080\":5,\"2081\":6,\"2082\":3,\"2083\":5}}],[\"guardevent\",{\"1\":{\"2065\":6}}],[\"guanyu\",{\"1\":{\"1467\":2}}],[\"guide\",{\"1\":{\"1482\":1,\"1483\":1,\"1485\":1,\"1804\":1,\"2047\":1}}],[\"gulp\",{\"1\":{\"119\":1,\"221\":1}}],[\"g修饰符表示全局匹配\",{\"1\":{\"919\":1}}],[\"g这三个标志\",{\"1\":{\"919\":1}}],[\"gmt+0800\",{\"1\":{\"876\":2,\"877\":2}}],[\"gmt\",{\"1\":{\"875\":1,\"1534\":4,\"1537\":2,\"1540\":1}}],[\"ggbond\",{\"1\":{\"769\":4,\"770\":1,\"1577\":1}}],[\"gt\",{\"1\":{\"658\":1,\"1203\":1}}],[\"game\",{\"1\":{\"1357\":1}}],[\"games=\",{\"1\":{\"1446\":1}}],[\"games\",{\"1\":{\"422\":2,\"1446\":5}}],[\"garbage\",{\"1\":{\"1028\":1}}],[\"gap\",{\"1\":{\"413\":7}}],[\"gc\",{\"1\":{\"390\":1,\"1028\":2}}],[\"gi\",{\"1\":{\"894\":1,\"923\":1,\"925\":10}}],[\"gifimage\",{\"1\":{\"1974\":1}}],[\"gif\",{\"1\":{\"294\":2,\"402\":5,\"403\":1,\"404\":4,\"405\":18,\"408\":4,\"666\":2,\"1592\":1}}],[\"gitignore文件\",{\"1\":{\"15\":1}}],[\"gitignore\",{\"0\":{\"15\":1},\"1\":{\"331\":1,\"1427\":1,\"2040\":1}}],[\"gitee\",{\"1\":{\"12\":5}}],[\"githubusercontent\",{\"1\":{\"666\":1}}],[\"github\",{\"0\":{\"16\":1},\"1\":{\"12\":2,\"16\":4,\"17\":1,\"39\":2,\"213\":1,\"222\":2,\"340\":1,\"1475\":2,\"1583\":2,\"2040\":3,\"2065\":1}}],[\"git\",{\"0\":{\"4\":1},\"1\":{\"2\":2,\"3\":4,\"5\":1,\"6\":1,\"7\":9,\"8\":5,\"10\":9,\"11\":2,\"12\":18,\"13\":10,\"14\":8,\"15\":4,\"17\":18,\"248\":1,\"253\":1,\"331\":1,\"1427\":1},\"2\":{\"19\":1}}],[\"git管理\",{\"0\":{\"1\":1}}],[\"geolocation\",{\"0\":{\"1099\":1,\"1100\":1,\"1102\":1},\"1\":{\"1099\":3,\"1100\":2,\"1101\":2,\"1102\":7}}],[\"genarrayexpression\",{\"1\":{\"1979\":2}}],[\"genreturnstatement\",{\"1\":{\"1979\":2}}],[\"gennodelist\",{\"1\":{\"1979\":7}}],[\"gennode\",{\"1\":{\"1979\":7}}],[\"genstringliteral\",{\"1\":{\"1979\":2}}],[\"genstatic\",{\"1\":{\"1796\":1}}],[\"genslot\",{\"1\":{\"1796\":1}}],[\"gencallexpression\",{\"1\":{\"1979\":2}}],[\"gencomponent\",{\"1\":{\"1796\":1}}],[\"gencomponentmodel\",{\"1\":{\"1358\":1}}],[\"genchildren\",{\"1\":{\"1796\":2}}],[\"genonce\",{\"1\":{\"1796\":1}}],[\"genelement函数定义如下\",{\"1\":{\"1796\":1}}],[\"genelement\",{\"1\":{\"1796\":2}}],[\"generateurl\",{\"1\":{\"474\":2}}],[\"generate\",{\"1\":{\"155\":2,\"1790\":1,\"1796\":1,\"1972\":1,\"1979\":1}}],[\"generator函数执行之后生成一个指针对象\",{\"1\":{\"1186\":1}}],[\"generator\",{\"0\":{\"331\":1},\"1\":{\"142\":1,\"143\":1,\"331\":1,\"1187\":1,\"1772\":1}}],[\"gendata\",{\"1\":{\"1796\":1}}],[\"gendirectives生成的代码如下\",{\"1\":{\"1407\":1}}],[\"gendirectives\",{\"1\":{\"1407\":1}}],[\"gender\",{\"1\":{\"196\":1,\"827\":2,\"828\":5,\"830\":29,\"831\":5,\"832\":4,\"896\":2,\"897\":3}}],[\"genif生成的代码如下\",{\"1\":{\"1388\":1}}],[\"genif\",{\"1\":{\"1388\":1,\"1796\":1}}],[\"genid\",{\"1\":{\"355\":1}}],[\"genhandlers生成的代码如下\",{\"1\":{\"1368\":1}}],[\"genhandlers\",{\"1\":{\"1368\":2}}],[\"genprops\",{\"1\":{\"1353\":2}}],[\"gen\",{\"1\":{\"1187\":4,\"1772\":4}}],[\"genfunctiondecl\",{\"1\":{\"1979\":2}}],[\"genfor生成的代码如下\",{\"1\":{\"1392\":1}}],[\"genfor\",{\"1\":{\"1392\":1,\"1796\":1}}],[\"genf\",{\"1\":{\"1187\":2,\"1772\":2}}],[\"genuuid\",{\"1\":{\"355\":1}}],[\"getlinkclass\",{\"1\":{\"2066\":4}}],[\"getlocation\",{\"1\":{\"2034\":1}}],[\"getrecordmatcher\",{\"1\":{\"2042\":3}}],[\"getroutes会返回所有路由路径对应的路由配置\",{\"1\":{\"2028\":1}}],[\"getroutes\",{\"1\":{\"2028\":2,\"2041\":3,\"2042\":4,\"2046\":1,\"2047\":1}}],[\"getoriginalpath\",{\"1\":{\"2065\":2}}],[\"getouterhtml\",{\"1\":{\"1805\":1}}],[\"getownpropertynames方法之前就存在\",{\"1\":{\"1054\":1}}],[\"getownpropertynames\",{\"0\":{\"1054\":1},\"1\":{\"1054\":1}}],[\"getownpropertysymbols\",{\"1\":{\"830\":2}}],[\"getstudents\",{\"1\":{\"1445\":1}}],[\"getbindingattr\",{\"1\":{\"1428\":1}}],[\"get函数\",{\"1\":{\"1364\":1}}],[\"getcurrentlocation\",{\"1\":{\"2026\":1}}],[\"getcurrentinstance\",{\"1\":{\"2019\":2}}],[\"getcurrentposition\",{\"1\":{\"1102\":1}}],[\"getcomputedstyle\",{\"0\":{\"1129\":1},\"1\":{\"1129\":1}}],[\"getcontext\",{\"1\":{\"496\":1,\"704\":5,\"713\":2,\"727\":2,\"732\":1,\"740\":2}}],[\"getcode\",{\"1\":{\"155\":3}}],[\"getters的对象\",{\"1\":{\"2020\":1}}],[\"getters和actions\",{\"1\":{\"2015\":1}}],[\"getters\",{\"0\":{\"1452\":1},\"1\":{\"1452\":3,\"1454\":2,\"2012\":1,\"2019\":3,\"2021\":4}}],[\"getter和setter用来拦截对应属性的存取行为\",{\"1\":{\"1364\":1}}],[\"getter\",{\"0\":{\"1895\":1},\"1\":{\"1364\":1,\"1785\":2,\"1804\":3,\"1895\":1,\"1896\":9,\"1897\":23,\"1902\":4,\"1986\":2,\"1987\":4,\"2012\":1,\"2031\":1,\"2047\":3}}],[\"gettype\",{\"1\":{\"967\":8}}],[\"gettimezoneoffset\",{\"1\":{\"877\":1}}],[\"gettime\",{\"1\":{\"877\":3,\"995\":5}}],[\"getfullyear\",{\"1\":{\"877\":1}}],[\"getyear\",{\"1\":{\"877\":1}}],[\"getitem\",{\"1\":{\"769\":2,\"770\":1,\"1436\":3,\"1467\":2,\"1655\":3}}],[\"getimagedata\",{\"1\":{\"736\":2,\"740\":1}}],[\"getpxinfo\",{\"1\":{\"740\":2}}],[\"getprototypeof\",{\"0\":{\"1056\":1},\"1\":{\"424\":2,\"1056\":1}}],[\"getqueryobj\",{\"1\":{\"494\":1}}],[\"getelementsbyname\",{\"1\":{\"1112\":1}}],[\"getelementsbyclassname\",{\"1\":{\"1112\":3}}],[\"getelementsbytagname\",{\"1\":{\"478\":1,\"1111\":2,\"1112\":5,\"1194\":1,\"1576\":1}}],[\"getelementbyid\",{\"1\":{\"704\":2,\"727\":1,\"732\":1,\"765\":3,\"772\":4,\"773\":3,\"993\":3,\"1088\":2,\"1112\":4,\"1123\":2,\"1124\":1,\"1144\":2,\"1145\":1,\"1146\":2,\"1152\":3,\"1154\":2,\"1156\":5,\"1158\":2,\"1181\":4,\"1205\":2,\"1208\":2,\"1214\":1,\"1576\":1,\"1577\":1,\"1943\":1,\"2050\":1}}],[\"getenv\",{\"1\":{\"378\":2}}],[\"getnamefunc\",{\"1\":{\"1025\":4}}],[\"getname\",{\"1\":{\"408\":1}}],[\"getallresponseheaders\",{\"1\":{\"1575\":1}}],[\"getattribute\",{\"1\":{\"1125\":2,\"2054\":1,\"2065\":2}}],[\"getattributenode\",{\"1\":{\"1113\":1}}],[\"getattr\",{\"1\":{\"405\":2}}],[\"getast\",{\"1\":{\"155\":3}}],[\"get请求\",{\"1\":{\"270\":1}}],[\"get\",{\"0\":{\"295\":1,\"1228\":1,\"1375\":1,\"1576\":1,\"1584\":1,\"1766\":1},\"1\":{\"268\":1,\"284\":1,\"285\":4,\"294\":3,\"295\":3,\"296\":6,\"301\":1,\"304\":3,\"305\":2,\"306\":1,\"307\":1,\"315\":2,\"316\":1,\"321\":2,\"329\":1,\"339\":2,\"349\":4,\"350\":1,\"355\":3,\"408\":1,\"476\":1,\"868\":1,\"869\":1,\"872\":1,\"877\":14,\"1059\":3,\"1093\":1,\"1181\":1,\"1198\":2,\"1204\":3,\"1226\":1,\"1228\":2,\"1275\":3,\"1277\":3,\"1317\":2,\"1364\":1,\"1365\":1,\"1376\":1,\"1396\":1,\"1430\":1,\"1445\":1,\"1490\":1,\"1491\":2,\"1496\":1,\"1507\":1,\"1530\":1,\"1569\":8,\"1573\":1,\"1575\":1,\"1576\":2,\"1579\":1,\"1581\":1,\"1582\":1,\"1584\":2,\"1589\":1,\"1614\":1,\"1632\":1,\"1767\":1,\"1768\":1,\"1769\":1,\"1785\":1,\"1788\":1,\"1804\":6,\"1836\":1,\"1838\":1,\"1847\":2,\"1855\":2,\"1886\":1,\"1888\":2,\"1889\":12,\"1890\":4,\"1892\":2,\"1893\":2,\"1896\":4,\"1902\":6,\"1903\":2,\"1905\":1,\"1906\":6,\"1910\":3,\"1911\":1,\"1912\":2,\"1913\":2,\"1914\":5,\"1917\":2,\"1921\":3,\"1923\":4,\"1926\":1,\"1927\":8,\"1928\":2,\"1929\":8,\"1930\":1,\"1932\":1,\"1937\":2,\"1938\":4,\"1956\":1,\"1985\":6,\"1986\":1,\"1989\":1,\"1990\":3,\"1991\":2,\"1992\":1,\"1993\":4,\"2019\":1,\"2021\":1,\"2026\":2,\"2047\":5,\"2050\":1,\"2051\":1,\"2053\":2,\"2055\":2,\"2088\":1}}],[\"getday\",{\"1\":{\"877\":1}}],[\"getdata\",{\"1\":{\"765\":5,\"1161\":5,\"1162\":1,\"1354\":1,\"1366\":1,\"1804\":2,\"1836\":1}}],[\"getdigitnum\",{\"1\":{\"419\":2}}],[\"getdirname\",{\"1\":{\"37\":1}}],[\"getdependecies\",{\"1\":{\"155\":3}}],[\"getmonth\",{\"1\":{\"877\":2}}],[\"getmoduleid\",{\"1\":{\"37\":1}}],[\"getmsg\",{\"1\":{\"41\":3,\"44\":1}}],[\"greedy\",{\"1\":{\"907\":1}}],[\"green\",{\"1\":{\"535\":1,\"725\":1,\"726\":1,\"853\":2,\"1278\":2,\"1279\":3,\"1280\":2,\"1332\":2,\"1340\":2}}],[\"great\",{\"1\":{\"772\":1}}],[\"group>\",{\"1\":{\"1441\":2}}],[\"group\",{\"1\":{\"913\":1,\"1441\":1}}],[\"groups=1\",{\"1\":{\"1667\":1}}],[\"groups\",{\"1\":{\"911\":1,\"913\":2,\"925\":1,\"1667\":1,\"1792\":4,\"1793\":1}}],[\"group=none\",{\"1\":{\"408\":1}}],[\"grow\",{\"1\":{\"591\":3,\"592\":1}}],[\"grid\",{\"0\":{\"605\":1},\"1\":{\"548\":5,\"580\":3,\"1267\":1}}],[\"grad\",{\"1\":{\"1659\":2,\"1677\":1,\"1680\":2}}],[\"gradient\",{\"1\":{\"636\":8,\"725\":8,\"726\":6}}],[\"granted\",{\"1\":{\"156\":1,\"1105\":5}}],[\"graph\",{\"1\":{\"155\":5}}],[\"gray\",{\"1\":{\"41\":1}}],[\"grunt\",{\"1\":{\"119\":1}}],[\"got\",{\"1\":{\"1105\":4,\"1802\":1}}],[\"google\",{\"1\":{\"769\":1,\"1088\":1}}],[\"good\",{\"1\":{\"393\":1,\"1015\":2}}],[\"go\",{\"1\":{\"94\":2,\"335\":1,\"1097\":5,\"1139\":1,\"1140\":1,\"1464\":1,\"2041\":4,\"2049\":1,\"2053\":3,\"2055\":11,\"2061\":1,\"2071\":1}}],[\"g\",{\"1\":{\"69\":1,\"73\":3,\"76\":1,\"81\":1,\"82\":1,\"86\":1,\"156\":2,\"331\":1,\"340\":1,\"737\":1,\"889\":1,\"901\":1,\"911\":1,\"919\":2,\"921\":1,\"923\":2,\"924\":2,\"925\":6,\"1039\":4,\"1426\":1,\"1446\":6,\"1482\":1,\"1769\":1,\"1792\":2,\"1797\":1}}],[\"gh\",{\"1\":{\"16\":1}}],[\"globalclass\",{\"1\":{\"2066\":4}}],[\"globalcompositeoperation\",{\"1\":{\"743\":1}}],[\"globaloptions\",{\"1\":{\"2042\":3}}],[\"globalextensions\",{\"1\":{\"2040\":1}}],[\"globaleventbus\",{\"0\":{\"1438\":1}}],[\"globalapi\",{\"1\":{\"1824\":1}}],[\"globalalpha\",{\"1\":{\"742\":1}}],[\"globalproperties\",{\"1\":{\"1518\":1,\"2016\":3,\"2047\":5}}],[\"global标志只能用于设置已在文件顶层声明的变量\",{\"1\":{\"1261\":1}}],[\"global的变量声明将始终分配给全局范围\",{\"1\":{\"1261\":1}}],[\"globalthis\",{\"1\":{\"428\":1}}],[\"globals\",{\"1\":{\"402\":1}}],[\"globals和locals是执行语句的作用域\",{\"1\":{\"402\":1}}],[\"globals=none\",{\"1\":{\"402\":1}}],[\"global\",{\"1\":{\"3\":2,\"27\":1,\"87\":3,\"402\":2,\"919\":1,\"923\":2,\"990\":1,\"991\":2,\"996\":1,\"1086\":1,\"1261\":6,\"1307\":3,\"1491\":2,\"2040\":1,\"2063\":1}}],[\"和旧的路由记录\",{\"1\":{\"2069\":1}}],[\"和新的\",{\"1\":{\"2002\":1}}],[\"和执行副作用函数循环的\",{\"1\":{\"1985\":1}}],[\"和上面不同的是\",{\"1\":{\"1842\":1}}],[\"和上面其实是一个意思\",{\"1\":{\"1063\":1}}],[\"和data的区别就是\",{\"1\":{\"1840\":1}}],[\"和date\",{\"1\":{\"875\":1}}],[\"和渲染\",{\"1\":{\"1835\":1}}],[\"和量之比求第三\",{\"0\":{\"1743\":1}}],[\"和两部分平均数\",{\"1\":{\"1740\":1}}],[\"和值\",{\"1\":{\"1678\":1}}],[\"和model\",{\"1\":{\"1677\":1}}],[\"和moveby\",{\"1\":{\"1088\":1}}],[\"和大小为\",{\"1\":{\"1655\":1}}],[\"和标签\",{\"1\":{\"1655\":1}}],[\"和简单请求一致\",{\"1\":{\"1611\":1}}],[\"和配置\",{\"1\":{\"1518\":1}}],[\"和一般的实例一样\",{\"1\":{\"1499\":1}}],[\"和一个大小为\",{\"1\":{\"1655\":1}}],[\"和一个\",{\"1\":{\"404\":1}}],[\"和异步组件的配合\",{\"1\":{\"1486\":1}}],[\"和函数都可以全局访问\",{\"1\":{\"1313\":1}}],[\"和函数一样\",{\"1\":{\"832\":1}}],[\"和分号\",{\"1\":{\"1247\":1,\"1248\":1}}],[\"和循环数组的\",{\"1\":{\"1199\":1}}],[\"和cleardata\",{\"1\":{\"1161\":1}}],[\"和cleartimeout\",{\"1\":{\"1088\":1}}],[\"和剪贴板相关的还有如下\",{\"1\":{\"1160\":1}}],[\"和window\",{\"1\":{\"1097\":1}}],[\"和网页实现互动\",{\"1\":{\"1077\":1}}],[\"和复合类型\",{\"1\":{\"980\":1}}],[\"和任何运算符进行运算还是\",{\"1\":{\"975\":1}}],[\"和任何值都不相等\",{\"1\":{\"795\":1}}],[\"和return\",{\"1\":{\"1156\":1}}],[\"和returnvalue\",{\"1\":{\"1156\":1}}],[\"和replace\",{\"1\":{\"1094\":1}}],[\"和resizeby\",{\"1\":{\"1088\":1}}],[\"和reduceright\",{\"1\":{\"946\":1}}],[\"和readfile\",{\"1\":{\"242\":1}}],[\"和exec\",{\"1\":{\"925\":1}}],[\"和endswith\",{\"1\":{\"889\":1}}],[\"和运算符一样拥有一个优先级关系\",{\"1\":{\"920\":1}}],[\"和运行时态\",{\"1\":{\"117\":1}}],[\"和贪婪模式相对应\",{\"1\":{\"908\":1}}],[\"和段分隔符\",{\"1\":{\"902\":1,\"905\":1}}],[\"和其他的对象不同\",{\"1\":{\"878\":1}}],[\"和其他静态语言有所不同的是\",{\"1\":{\"819\":1}}],[\"和法文\",{\"1\":{\"875\":1}}],[\"和lastindexof\",{\"1\":{\"856\":1,\"1924\":1}}],[\"和sort\",{\"1\":{\"855\":2}}],[\"和splice\",{\"1\":{\"854\":1}}],[\"和setitem\",{\"1\":{\"769\":1}}],[\"和push\",{\"1\":{\"853\":1}}],[\"和pop\",{\"1\":{\"853\":1}}],[\"和访问单个对象的方式是一样的\",{\"1\":{\"831\":1}}],[\"和数组一样\",{\"1\":{\"827\":1,\"832\":1}}],[\"和对文件句柄的引用\",{\"1\":{\"771\":1}}],[\"和控制点\",{\"1\":{\"717\":1}}],[\"和之前的一些区别\",{\"0\":{\"690\":1}}],[\"和前端\",{\"1\":{\"219\":1}}],[\"和在前端写\",{\"1\":{\"216\":1}}],[\"和js这种弱类型语言不同\",{\"1\":{\"166\":1}}],[\"和整个项目的构建相关\",{\"1\":{\"159\":1}}],[\"和古巴比伦一样\",{\"1\":{\"146\":1}}],[\"和发送一个单独的文件之间自动选择\",{\"1\":{\"142\":1}}],[\"和并分支\",{\"1\":{\"10\":1}}],[\"和\",{\"0\":{\"89\":1,\"156\":1,\"296\":1,\"356\":1,\"362\":1,\"369\":1,\"683\":1,\"823\":1,\"881\":1,\"882\":1,\"1063\":1,\"1186\":1,\"1187\":1,\"1207\":1,\"1216\":1,\"1231\":1,\"1381\":1,\"1424\":1,\"1640\":1,\"1847\":1,\"1856\":1,\"1901\":1,\"1926\":1,\"1927\":1},\"1\":{\"3\":1,\"7\":1,\"12\":1,\"24\":1,\"25\":1,\"37\":1,\"45\":1,\"66\":1,\"74\":1,\"138\":1,\"142\":1,\"149\":2,\"155\":1,\"159\":1,\"216\":1,\"222\":1,\"238\":4,\"266\":1,\"271\":1,\"286\":2,\"296\":1,\"304\":1,\"350\":1,\"356\":1,\"362\":2,\"369\":1,\"395\":1,\"404\":1,\"487\":1,\"514\":1,\"521\":1,\"540\":2,\"543\":1,\"547\":1,\"573\":1,\"574\":2,\"587\":1,\"641\":1,\"644\":1,\"646\":1,\"670\":1,\"675\":1,\"703\":2,\"706\":1,\"707\":1,\"708\":1,\"722\":2,\"733\":2,\"738\":1,\"750\":1,\"764\":1,\"765\":1,\"768\":1,\"769\":1,\"773\":1,\"781\":1,\"789\":3,\"796\":3,\"813\":2,\"824\":1,\"854\":1,\"877\":1,\"906\":4,\"918\":1,\"921\":1,\"975\":1,\"976\":1,\"980\":2,\"991\":1,\"993\":1,\"995\":1,\"1028\":1,\"1030\":2,\"1052\":2,\"1084\":2,\"1086\":2,\"1087\":1,\"1088\":2,\"1098\":11,\"1102\":1,\"1112\":1,\"1135\":1,\"1137\":1,\"1138\":1,\"1148\":1,\"1149\":1,\"1152\":1,\"1156\":1,\"1160\":1,\"1161\":2,\"1205\":2,\"1207\":1,\"1208\":1,\"1211\":1,\"1215\":2,\"1216\":1,\"1217\":1,\"1219\":2,\"1225\":1,\"1247\":1,\"1265\":1,\"1266\":1,\"1274\":2,\"1281\":1,\"1284\":1,\"1285\":1,\"1290\":1,\"1309\":2,\"1313\":1,\"1358\":3,\"1368\":1,\"1370\":1,\"1381\":1,\"1396\":1,\"1407\":1,\"1433\":1,\"1436\":1,\"1493\":4,\"1499\":1,\"1508\":1,\"1569\":1,\"1606\":1,\"1615\":1,\"1647\":1,\"1655\":2,\"1656\":1,\"1663\":2,\"1673\":2,\"1695\":1,\"1721\":3,\"1751\":1,\"1782\":1,\"1803\":1,\"1822\":1,\"1910\":1,\"1913\":1,\"1914\":1,\"1929\":1,\"1930\":1,\"1931\":1,\"1935\":1,\"1949\":2,\"1951\":1,\"1954\":2,\"1965\":4,\"1977\":1,\"2003\":1,\"2011\":1,\"2016\":1,\"2026\":3,\"2029\":1,\"2032\":2,\"2035\":1,\"2053\":1,\"2055\":3,\"2057\":2,\"2058\":1,\"2060\":1,\"2061\":1,\"2063\":2,\"2070\":1,\"2073\":2,\"2074\":1,\"2088\":2,\"2099\":1}}],[\"n2\",{\"1\":{\"1948\":1,\"1951\":25,\"1955\":6,\"1961\":1,\"1962\":1,\"1965\":2,\"1966\":2,\"1968\":2,\"1969\":2}}],[\"n1\",{\"1\":{\"1948\":1,\"1951\":27,\"1955\":4,\"1961\":1,\"1962\":1,\"1965\":2,\"1966\":2,\"1968\":2,\"1969\":2}}],[\"nlrx\",{\"1\":{\"1797\":4}}],[\"ns\",{\"1\":{\"1788\":1}}],[\"nr\",{\"1\":{\"1748\":2}}],[\"nrm\",{\"1\":{\"67\":1,\"69\":5,\"91\":1}}],[\"n=基期末期​\",{\"1\":{\"1748\":1}}],[\"nx\",{\"1\":{\"1727\":1}}],[\"nn\",{\"1\":{\"1661\":15,\"1662\":6,\"1663\":11,\"1664\":1,\"1665\":4,\"1666\":8,\"1667\":7,\"1669\":6,\"1670\":4,\"1671\":4,\"1673\":4,\"1675\":1,\"1680\":4}}],[\"nine\",{\"1\":{\"1148\":2}}],[\"nick\",{\"1\":{\"1040\":1}}],[\"n+1\",{\"1\":{\"1013\":1}}],[\"n++\",{\"1\":{\"740\":1}}],[\"nf\",{\"1\":{\"385\":1}}],[\"nfunction\",{\"1\":{\"155\":1}}],[\"nb\",{\"1\":{\"919\":2}}],[\"nbsp\",{\"1\":{\"658\":1}}],[\"nbf\",{\"1\":{\"366\":1}}],[\"nbproject\",{\"1\":{\"15\":1}}],[\"nth\",{\"1\":{\"287\":4,\"520\":4,\"1268\":3,\"1282\":1}}],[\"n温故而知新\",{\"1\":{\"246\":1}}],[\"nvidia\",{\"1\":{\"1675\":1}}],[\"nvm的常用命令\",{\"0\":{\"229\":1}}],[\"nvm\",{\"1\":{\"228\":3,\"229\":6}}],[\"nvm安装\",{\"0\":{\"228\":1}}],[\"nvar\",{\"1\":{\"155\":1}}],[\"nativewatch\",{\"1\":{\"1804\":1}}],[\"native修饰符\",{\"1\":{\"1437\":1,\"1519\":1}}],[\"native修饰符的原生事件\",{\"1\":{\"1368\":1}}],[\"nativeon\",{\"1\":{\"1368\":1,\"1802\":3}}],[\"native\",{\"1\":{\"1368\":1,\"1834\":1}}],[\"nativeevents\",{\"1\":{\"1368\":2,\"1802\":1}}],[\"nativeevents和el\",{\"1\":{\"1368\":1}}],[\"nan会输出\",{\"1\":{\"1909\":1}}],[\"nan\",{\"0\":{\"795\":1},\"1\":{\"708\":1,\"795\":11,\"796\":1,\"801\":2,\"806\":3,\"809\":1,\"810\":3,\"812\":5,\"813\":10,\"875\":4,\"953\":1,\"970\":2,\"971\":1,\"975\":2,\"976\":2,\"980\":1,\"1052\":2,\"1909\":5}}],[\"nasa\",{\"1\":{\"665\":1}}],[\"nav\",{\"1\":{\"1339\":3}}],[\"navigate\",{\"1\":{\"2041\":1,\"2046\":1,\"2050\":3,\"2065\":5,\"2066\":2,\"2072\":4,\"2084\":2}}],[\"navigationredirecterror\",{\"1\":{\"2084\":1}}],[\"navigationfailure\",{\"1\":{\"2084\":3}}],[\"navigationfailure>\",{\"1\":{\"2065\":2}}],[\"navigationinformation\",{\"1\":{\"2061\":1}}],[\"navigationcallback\",{\"1\":{\"2060\":2,\"2061\":7}}],[\"navigationguardnextcallback\",{\"1\":{\"2075\":2}}],[\"navigationguardnext\",{\"1\":{\"2075\":2}}],[\"navigationguard\",{\"1\":{\"2075\":3}}],[\"navigationguards\",{\"1\":{\"2040\":1}}],[\"navigationguard>\",{\"1\":{\"2029\":1}}],[\"navigationdirection\",{\"1\":{\"2034\":3,\"2061\":6}}],[\"navigationtype\",{\"1\":{\"2034\":1,\"2061\":2}}],[\"navigation\",{\"1\":{\"1331\":2,\"2058\":1,\"2075\":2}}],[\"navigator\",{\"0\":{\"1089\":1,\"1090\":1,\"1091\":1},\"1\":{\"1083\":1,\"1090\":2,\"1091\":7,\"1102\":4,\"1135\":1}}],[\"navigator3\",{\"1\":{\"1030\":1}}],[\"navicat\",{\"1\":{\"213\":2}}],[\"nav元素代表页面的导航链接区域\",{\"1\":{\"694\":1}}],[\"nav>\",{\"1\":{\"662\":1,\"694\":1,\"2068\":1}}],[\"namemap\",{\"1\":{\"2028\":4}}],[\"named\",{\"1\":{\"1669\":5}}],[\"namearr\",{\"1\":{\"1496\":3}}],[\"names2\",{\"1\":{\"841\":1}}],[\"namespaced\",{\"1\":{\"1454\":2}}],[\"namespace\",{\"0\":{\"28\":1},\"1\":{\"28\":1}}],[\"name等价于person\",{\"1\":{\"834\":1}}],[\"name2\",{\"1\":{\"828\":6,\"1025\":3}}],[\"name4\",{\"1\":{\"471\":1}}],[\"name3\",{\"1\":{\"471\":1}}],[\"name1\",{\"1\":{\"471\":1,\"828\":2}}],[\"namelength\",{\"1\":{\"198\":2}}],[\"name=none\",{\"1\":{\"408\":1}}],[\"name=s\",{\"1\":{\"350\":1}}],[\"name=value\",{\"1\":{\"345\":1}}],[\"name=\",{\"1\":{\"45\":2,\"287\":2,\"329\":1,\"377\":1,\"580\":1,\"649\":1,\"659\":3,\"670\":5,\"672\":1,\"674\":1,\"764\":1,\"772\":1,\"773\":2,\"1120\":2,\"1231\":3,\"1357\":2,\"1429\":1,\"1441\":2,\"1446\":2,\"1634\":2,\"1954\":3}}],[\"name>\",{\"1\":{\"10\":5,\"12\":1,\"1483\":1}}],[\"name\",{\"1\":{\"3\":2,\"34\":1,\"41\":2,\"44\":2,\"50\":1,\"64\":3,\"142\":2,\"155\":2,\"159\":1,\"176\":3,\"181\":1,\"198\":1,\"207\":3,\"212\":2,\"237\":1,\"239\":1,\"263\":2,\"264\":1,\"340\":3,\"350\":3,\"355\":1,\"366\":1,\"373\":1,\"377\":4,\"389\":4,\"402\":2,\"405\":3,\"422\":5,\"429\":2,\"433\":1,\"466\":7,\"467\":5,\"471\":2,\"487\":6,\"644\":1,\"659\":1,\"670\":2,\"754\":1,\"756\":3,\"769\":10,\"770\":7,\"772\":4,\"773\":1,\"779\":5,\"790\":3,\"827\":2,\"828\":27,\"829\":1,\"830\":16,\"832\":14,\"833\":12,\"834\":6,\"841\":1,\"868\":5,\"869\":5,\"870\":7,\"871\":6,\"895\":2,\"896\":4,\"897\":3,\"934\":5,\"941\":2,\"943\":4,\"948\":8,\"950\":2,\"958\":1,\"982\":3,\"983\":3,\"984\":5,\"992\":4,\"995\":4,\"996\":10,\"1025\":3,\"1028\":3,\"1040\":2,\"1045\":4,\"1046\":4,\"1047\":9,\"1048\":6,\"1049\":6,\"1055\":1,\"1056\":1,\"1057\":1,\"1058\":1,\"1059\":1,\"1060\":1,\"1061\":3,\"1066\":1,\"1067\":3,\"1070\":5,\"1071\":7,\"1072\":7,\"1201\":14,\"1205\":1,\"1231\":1,\"1232\":2,\"1237\":1,\"1317\":2,\"1348\":1,\"1349\":1,\"1352\":3,\"1353\":6,\"1356\":3,\"1357\":1,\"1358\":7,\"1361\":2,\"1364\":1,\"1366\":1,\"1368\":8,\"1385\":3,\"1392\":3,\"1393\":6,\"1395\":1,\"1396\":1,\"1397\":1,\"1401\":1,\"1407\":6,\"1419\":1,\"1423\":2,\"1429\":3,\"1441\":1,\"1446\":1,\"1460\":3,\"1461\":2,\"1462\":1,\"1464\":2,\"1467\":2,\"1486\":4,\"1488\":2,\"1491\":1,\"1497\":1,\"1502\":2,\"1507\":1,\"1508\":1,\"1577\":1,\"1578\":3,\"1584\":1,\"1669\":2,\"1768\":2,\"1792\":3,\"1793\":6,\"1797\":5,\"1799\":2,\"1802\":20,\"1804\":1,\"1805\":1,\"1825\":7,\"1828\":2,\"1936\":3,\"1949\":6,\"1953\":2,\"1974\":9,\"1975\":5,\"1978\":3,\"1979\":3,\"2012\":1,\"2013\":3,\"2018\":1,\"2019\":4,\"2021\":3,\"2025\":2,\"2028\":1,\"2029\":1,\"2031\":6,\"2035\":4,\"2041\":2,\"2042\":1,\"2044\":2,\"2045\":2,\"2047\":2,\"2062\":2,\"2067\":1,\"2069\":10,\"2070\":1,\"2074\":6,\"2075\":9}}],[\"nums\",{\"1\":{\"697\":2}}],[\"num2\",{\"1\":{\"488\":7}}],[\"num1\",{\"1\":{\"488\":8}}],[\"num\",{\"1\":{\"263\":5,\"418\":8,\"419\":7,\"501\":2,\"882\":4,\"883\":2,\"884\":10,\"911\":1,\"912\":2,\"980\":2,\"1655\":2,\"1665\":3,\"1680\":8,\"2019\":6}}],[\"numbers改变了\",{\"1\":{\"1379\":1}}],[\"numbers\",{\"1\":{\"1379\":3,\"2065\":1}}],[\"number类型的值可以分为整数和实数两大类\",{\"1\":{\"791\":1}}],[\"number\",{\"0\":{\"382\":1,\"791\":1},\"1\":{\"191\":1,\"192\":1,\"200\":1,\"212\":1,\"381\":2,\"382\":1,\"483\":1,\"501\":1,\"757\":1,\"787\":1,\"794\":2,\"795\":3,\"801\":2,\"965\":1,\"967\":1,\"972\":1,\"980\":1,\"983\":1,\"995\":2,\"1065\":1,\"1182\":3,\"1356\":2,\"1364\":3,\"1499\":2,\"1917\":1,\"1918\":1,\"1935\":1,\"1993\":1,\"2045\":1,\"2053\":1,\"2055\":2,\"2058\":3,\"2065\":1}}],[\"numerous\",{\"1\":{\"15\":1}}],[\"null时返回的是object\",{\"1\":{\"965\":1}}],[\"null表示一个空的对象\",{\"1\":{\"797\":1}}],[\"null类型的值也是只有一个\",{\"1\":{\"797\":1}}],[\"null\",{\"0\":{\"797\":1},\"1\":{\"155\":1,\"317\":1,\"421\":1,\"424\":1,\"436\":2,\"438\":2,\"441\":2,\"443\":2,\"460\":1,\"472\":1,\"488\":5,\"773\":1,\"787\":1,\"789\":7,\"796\":1,\"797\":6,\"801\":2,\"810\":1,\"813\":3,\"865\":4,\"895\":1,\"914\":1,\"923\":1,\"925\":1,\"952\":2,\"965\":2,\"967\":2,\"970\":1,\"971\":1,\"972\":2,\"976\":1,\"980\":15,\"981\":1,\"982\":2,\"995\":12,\"1009\":1,\"1025\":2,\"1035\":1,\"1101\":1,\"1129\":2,\"1146\":2,\"1161\":1,\"1265\":2,\"1271\":2,\"1275\":4,\"1277\":2,\"1290\":14,\"1307\":4,\"1357\":1,\"1358\":1,\"1370\":2,\"1407\":2,\"1436\":1,\"1446\":1,\"1499\":3,\"1581\":1,\"1582\":1,\"1769\":2,\"1777\":1,\"1786\":5,\"1789\":3,\"1792\":2,\"1795\":1,\"1796\":1,\"1800\":2,\"1802\":1,\"1803\":1,\"1804\":2,\"1806\":1,\"1807\":3,\"1816\":2,\"1824\":1,\"1828\":2,\"1897\":1,\"1912\":1,\"1913\":1,\"1914\":2,\"1921\":1,\"1923\":2,\"1931\":1,\"1935\":1,\"1944\":1,\"1946\":1,\"1948\":2,\"1951\":4,\"1954\":6,\"1961\":1,\"1962\":2,\"1966\":2,\"1968\":2,\"1969\":5,\"1977\":3,\"1991\":1,\"1992\":1,\"1993\":1,\"1997\":5,\"2000\":1,\"2001\":1,\"2002\":4,\"2029\":1,\"2034\":1,\"2045\":4,\"2047\":2,\"2048\":1,\"2050\":1,\"2053\":1,\"2055\":1,\"2058\":20,\"2060\":3,\"2061\":6,\"2065\":2,\"2066\":3,\"2070\":2,\"2072\":1}}],[\"ndocument\",{\"1\":{\"155\":1}}],[\"n\",{\"1\":{\"155\":8,\"176\":1,\"247\":4,\"384\":1,\"385\":1,\"386\":7,\"402\":1,\"517\":2,\"520\":4,\"740\":3,\"897\":1,\"902\":1,\"904\":2,\"905\":1,\"906\":6,\"908\":6,\"920\":3,\"995\":8,\"1025\":1,\"1139\":5,\"1140\":5,\"1182\":4,\"1453\":1,\"1661\":2,\"1725\":4,\"1738\":2,\"1747\":3,\"1748\":1,\"1792\":4,\"1797\":1,\"1804\":1,\"1979\":4}}],[\"nested\",{\"1\":{\"2065\":1}}],[\"nesterov\",{\"1\":{\"1659\":2}}],[\"nesterov=false\",{\"1\":{\"1659\":2}}],[\"needs\",{\"1\":{\"1799\":1}}],[\"need\",{\"1\":{\"1352\":1,\"1804\":1,\"2058\":1}}],[\"neue\",{\"1\":{\"1265\":4,\"1275\":3}}],[\"nexttree\",{\"1\":{\"2002\":3}}],[\"nexttick\",{\"1\":{\"1777\":2,\"1822\":2}}],[\"nextpos\",{\"1\":{\"1969\":6}}],[\"nextprops\",{\"1\":{\"1955\":7}}],[\"nextkeys\",{\"1\":{\"1955\":4}}],[\"nextvalue\",{\"1\":{\"1949\":10}}],[\"nextuntil\",{\"1\":{\"1204\":1}}],[\"nextall\",{\"1\":{\"1204\":1,\"1232\":1}}],[\"nextf\",{\"1\":{\"1187\":2,\"1772\":2}}],[\"nextelementsibling\",{\"1\":{\"1112\":2}}],[\"nextsibling\",{\"1\":{\"1112\":2,\"1789\":1,\"1962\":2,\"1965\":1}}],[\"next\",{\"1\":{\"313\":4,\"314\":4,\"350\":3,\"355\":3,\"1186\":6,\"1187\":10,\"1204\":1,\"1232\":1,\"1284\":2,\"1313\":1,\"1467\":10,\"1475\":1,\"1772\":7,\"1792\":4,\"1921\":1,\"1931\":7,\"1932\":4,\"2002\":7,\"2029\":6,\"2043\":1,\"2069\":4,\"2075\":20}}],[\"next回调函数\",{\"1\":{\"309\":1}}],[\"nexports\",{\"1\":{\"155\":1}}],[\"netlify\",{\"1\":{\"2040\":1}}],[\"network\",{\"1\":{\"659\":1}}],[\"net\",{\"1\":{\"189\":1,\"219\":1,\"1087\":1,\"1583\":1,\"1669\":3,\"1670\":3,\"1671\":3,\"1676\":2,\"1680\":7}}],[\"netscape\",{\"1\":{\"22\":2,\"1030\":1,\"1135\":1,\"1138\":3,\"1140\":1}}],[\"newline\",{\"1\":{\"1979\":3}}],[\"newlen\",{\"1\":{\"1961\":7}}],[\"newvnode\",{\"1\":{\"1962\":13,\"1968\":8,\"1969\":14}}],[\"newval\",{\"1\":{\"1886\":2,\"1888\":2,\"1889\":4,\"1902\":2,\"1906\":2,\"1909\":5,\"1910\":5,\"1914\":5,\"1917\":5,\"1918\":9,\"1930\":1,\"1932\":1,\"1985\":2,\"1990\":5,\"1992\":1,\"1993\":7}}],[\"newvalue\",{\"1\":{\"770\":2,\"1378\":2,\"1380\":8,\"1497\":12,\"1507\":2,\"1897\":13,\"1938\":3,\"1987\":5}}],[\"newend\",{\"1\":{\"1968\":8,\"1969\":10}}],[\"newendvnode\",{\"1\":{\"1789\":7,\"1965\":9,\"1966\":3}}],[\"newendidx\",{\"1\":{\"1789\":12,\"1965\":5,\"1966\":6}}],[\"newchildren\",{\"1\":{\"1961\":4,\"1962\":6,\"1965\":8,\"1966\":7,\"1968\":9,\"1969\":17}}],[\"newchildren中所有未处理节点中的最后一个\",{\"1\":{\"1789\":1}}],[\"newchildren中所有未处理节点中的第一个\",{\"1\":{\"1789\":1}}],[\"newchildren结束索引\",{\"1\":{\"1789\":1}}],[\"newchildren开始索引\",{\"1\":{\"1789\":1}}],[\"newch\",{\"1\":{\"1789\":20}}],[\"newcontent\",{\"1\":{\"1112\":2}}],[\"newstore\",{\"1\":{\"2013\":2}}],[\"newstart的索引表示为0\",{\"1\":{\"1969\":1}}],[\"newstart表示相对索引\",{\"1\":{\"1969\":1}}],[\"newstart\",{\"1\":{\"1969\":5}}],[\"newstartvnode\",{\"1\":{\"1789\":15,\"1965\":9,\"1966\":9}}],[\"newstartidx\",{\"1\":{\"1789\":10,\"1965\":3,\"1966\":6}}],[\"newstr\",{\"1\":{\"889\":4}}],[\"news\",{\"1\":{\"1458\":4,\"1461\":2,\"1465\":2}}],[\"newdirs\",{\"1\":{\"1407\":1}}],[\"newhandler\",{\"1\":{\"1368\":2}}],[\"newul\",{\"1\":{\"1123\":4}}],[\"newparams\",{\"1\":{\"2045\":4}}],[\"newpath\",{\"1\":{\"254\":3}}],[\"newprops\",{\"1\":{\"1951\":5}}],[\"newp\",{\"1\":{\"1112\":3}}],[\"newadd\",{\"1\":{\"995\":3}}],[\"newimgdata\",{\"1\":{\"740\":5}}],[\"newobj\",{\"1\":{\"469\":3,\"1937\":2,\"1938\":1}}],[\"newfn\",{\"1\":{\"433\":4}}],[\"newname\",{\"1\":{\"180\":1,\"263\":2}}],[\"new\",{\"0\":{\"1073\":1},\"1\":{\"128\":2,\"129\":1,\"191\":1,\"200\":1,\"207\":1,\"212\":1,\"284\":3,\"417\":1,\"418\":1,\"419\":1,\"428\":2,\"430\":1,\"432\":3,\"433\":1,\"436\":2,\"438\":3,\"441\":3,\"443\":3,\"455\":2,\"466\":2,\"472\":3,\"474\":1,\"476\":2,\"491\":1,\"496\":1,\"498\":2,\"499\":1,\"504\":1,\"621\":1,\"727\":1,\"740\":1,\"773\":1,\"840\":1,\"842\":1,\"860\":3,\"861\":5,\"862\":4,\"863\":5,\"864\":3,\"865\":5,\"868\":3,\"869\":1,\"870\":4,\"871\":2,\"872\":1,\"876\":7,\"877\":11,\"900\":1,\"901\":1,\"925\":1,\"928\":1,\"967\":2,\"983\":1,\"990\":1,\"995\":1,\"996\":2,\"1048\":2,\"1049\":2,\"1057\":1,\"1063\":3,\"1064\":2,\"1065\":2,\"1069\":2,\"1070\":1,\"1071\":2,\"1072\":2,\"1073\":1,\"1088\":1,\"1105\":4,\"1182\":1,\"1187\":1,\"1188\":2,\"1349\":1,\"1356\":1,\"1358\":1,\"1360\":1,\"1393\":1,\"1396\":1,\"1397\":2,\"1406\":2,\"1416\":1,\"1423\":3,\"1427\":1,\"1438\":1,\"1450\":2,\"1451\":1,\"1452\":1,\"1454\":1,\"1456\":1,\"1491\":1,\"1576\":1,\"1577\":1,\"1581\":1,\"1582\":1,\"1612\":1,\"1772\":1,\"1777\":4,\"1778\":1,\"1785\":1,\"1789\":1,\"1792\":2,\"1796\":1,\"1802\":1,\"1804\":1,\"1806\":1,\"1810\":1,\"1822\":2,\"1824\":1,\"1825\":1,\"1836\":1,\"1854\":1,\"1863\":1,\"1886\":2,\"1888\":1,\"1889\":7,\"1890\":3,\"1892\":1,\"1893\":1,\"1896\":1,\"1897\":2,\"1902\":1,\"1905\":1,\"1906\":4,\"1907\":1,\"1909\":2,\"1910\":1,\"1912\":1,\"1913\":1,\"1914\":2,\"1917\":1,\"1918\":1,\"1920\":1,\"1921\":1,\"1923\":2,\"1927\":5,\"1928\":1,\"1929\":2,\"1938\":2,\"1954\":1,\"1956\":1,\"1969\":1,\"1985\":4,\"1990\":1,\"1991\":1,\"1992\":1,\"1993\":2,\"1997\":2,\"2001\":1,\"2002\":2,\"2003\":1,\"2016\":1,\"2025\":2,\"2027\":4,\"2028\":1,\"2075\":2}}],[\"npx\",{\"0\":{\"78\":1},\"1\":{\"78\":1}}],[\"npmrc\",{\"1\":{\"2040\":1}}],[\"npmmirror\",{\"1\":{\"68\":2,\"69\":1,\"80\":1,\"81\":1,\"88\":1,\"228\":2}}],[\"npmjs\",{\"1\":{\"65\":1,\"91\":1,\"93\":1}}],[\"npm\",{\"0\":{\"61\":1,\"62\":1,\"63\":1,\"70\":1,\"89\":1},\"1\":{\"2\":1,\"25\":1,\"59\":1,\"60\":1,\"61\":2,\"62\":3,\"64\":6,\"65\":1,\"66\":7,\"67\":2,\"68\":3,\"69\":3,\"71\":1,\"72\":3,\"73\":2,\"74\":3,\"75\":2,\"76\":3,\"77\":5,\"78\":1,\"80\":1,\"81\":2,\"82\":2,\"86\":2,\"89\":1,\"91\":5,\"92\":1,\"93\":1,\"94\":1,\"116\":1,\"117\":1,\"123\":2,\"124\":1,\"128\":1,\"129\":1,\"133\":1,\"138\":2,\"142\":1,\"143\":2,\"147\":1,\"148\":5,\"149\":2,\"190\":1,\"215\":1,\"228\":2,\"300\":4,\"326\":1,\"331\":1,\"332\":1,\"340\":1,\"349\":1,\"355\":1,\"1426\":5,\"1434\":1,\"1439\":1,\"1441\":1,\"1456\":1,\"1482\":2,\"1483\":3,\"1583\":3,\"1591\":2,\"2008\":2,\"2009\":1,\"2101\":1}}],[\"nginx是一个高性能的web服务器和反向代理服务器\",{\"1\":{\"508\":1}}],[\"nginx\",{\"0\":{\"508\":1},\"1\":{\"2050\":1}}],[\"ng\",{\"1\":{\"45\":3}}],[\"ngmessages\",{\"1\":{\"45\":1}}],[\"noop\",{\"1\":{\"1804\":9,\"1806\":1,\"1822\":1,\"1861\":1,\"2065\":1,\"2084\":1}}],[\"noscript\",{\"1\":{\"1792\":1}}],[\"nov\",{\"1\":{\"876\":2}}],[\"novalidate\",{\"1\":{\"761\":1}}],[\"normalization\",{\"1\":{\"1665\":1}}],[\"normalizeslot\",{\"1\":{\"2070\":2}}],[\"normalizescopedslots\",{\"1\":{\"1446\":1}}],[\"normalizequery\",{\"1\":{\"2065\":1}}],[\"normalizebase\",{\"1\":{\"2053\":1,\"2054\":4}}],[\"normalized\",{\"1\":{\"2044\":4,\"2047\":11}}],[\"normalizedirectives\",{\"1\":{\"1407\":2}}],[\"normalizeparams\",{\"1\":{\"2041\":1,\"2045\":2}}],[\"normalizevnode\",{\"1\":{\"2002\":2}}],[\"normalizecontainer\",{\"1\":{\"1944\":1}}],[\"normalizechildren\",{\"1\":{\"1446\":1}}],[\"normalizeevent\",{\"1\":{\"1802\":2}}],[\"normalize\",{\"1\":{\"610\":1,\"1656\":1}}],[\"normal\",{\"0\":{\"539\":1},\"1\":{\"539\":1,\"621\":2,\"625\":1,\"644\":1,\"1221\":1,\"1805\":1}}],[\"non\",{\"1\":{\"913\":1,\"1794\":1}}],[\"nonlocal\",{\"1\":{\"402\":2}}],[\"none的节点没有几何信息\",{\"1\":{\"1526\":1}}],[\"none\",{\"1\":{\"398\":2,\"402\":1,\"548\":2,\"560\":1,\"592\":1,\"625\":1,\"644\":1,\"748\":1,\"1124\":2,\"1401\":1,\"1537\":5,\"1680\":3,\"1799\":1,\"2088\":2}}],[\"noninfringement\",{\"1\":{\"156\":1}}],[\"nowrap\",{\"1\":{\"587\":1,\"625\":1}}],[\"now\",{\"1\":{\"355\":1,\"874\":8,\"875\":1,\"877\":1,\"1181\":2,\"1559\":2,\"1579\":2,\"1949\":1}}],[\"nobject\",{\"1\":{\"155\":1}}],[\"no\",{\"1\":{\"64\":2,\"156\":1,\"331\":1,\"438\":1,\"629\":2,\"635\":1,\"723\":1,\"1313\":1,\"1352\":1,\"1539\":2,\"1541\":1,\"1542\":1,\"1680\":1,\"1792\":4,\"1804\":1,\"2058\":1}}],[\"notfound\",{\"1\":{\"2028\":1}}],[\"note\",{\"1\":{\"1645\":4,\"1646\":4}}],[\"notstrict\",{\"1\":{\"957\":1}}],[\"notation\",{\"1\":{\"895\":1}}],[\"notification\",{\"0\":{\"1103\":1,\"1104\":1,\"1105\":1},\"1\":{\"1104\":1,\"1105\":34}}],[\"notifyall\",{\"1\":{\"408\":1}}],[\"notify\",{\"1\":{\"408\":1,\"1785\":1,\"1786\":2}}],[\"notice\",{\"1\":{\"156\":2}}],[\"not\",{\"1\":{\"29\":1,\"59\":1,\"156\":1,\"271\":1,\"285\":1,\"294\":2,\"304\":1,\"397\":5,\"398\":2,\"402\":1,\"428\":1,\"430\":1,\"432\":1,\"436\":2,\"438\":1,\"441\":1,\"443\":1,\"520\":1,\"772\":1,\"783\":1,\"786\":1,\"795\":1,\"798\":1,\"808\":1,\"809\":1,\"829\":1,\"939\":3,\"940\":1,\"948\":1,\"958\":3,\"995\":1,\"996\":1,\"1204\":1,\"1232\":1,\"1265\":1,\"1274\":2,\"1315\":1,\"1537\":1,\"1635\":2,\"1795\":1,\"1803\":2,\"1805\":2,\"1807\":1,\"1890\":1,\"2050\":1,\"2058\":1,\"2104\":1}}],[\"nodes\",{\"1\":{\"1979\":4}}],[\"nodetransforms\",{\"1\":{\"1977\":8}}],[\"nodetype\",{\"1\":{\"1805\":1}}],[\"nodeops\",{\"1\":{\"1789\":14}}],[\"node环境\",{\"1\":{\"1777\":1}}],[\"nodename\",{\"1\":{\"1158\":1}}],[\"nodevalue\",{\"1\":{\"1114\":1}}],[\"nodelist\",{\"1\":{\"1112\":8}}],[\"node中间层的解决方案更灵活\",{\"1\":{\"507\":1}}],[\"node中间层的日志记录\",{\"1\":{\"507\":1}}],[\"node中间层\",{\"1\":{\"507\":1}}],[\"node中间层可以直接处理一部分缓存需求\",{\"1\":{\"507\":1}}],[\"node中间层可以承担更多的责任\",{\"1\":{\"507\":1}}],[\"node作为中间层模式\",{\"0\":{\"507\":1}}],[\"nodemon\",{\"1\":{\"73\":2,\"76\":1,\"82\":1,\"87\":2,\"301\":1}}],[\"nodejs内置模块\",{\"0\":{\"241\":1}}],[\"nodejs模块化\",{\"1\":{\"237\":1,\"239\":1}}],[\"nodejs安装\",{\"0\":{\"226\":1}}],[\"nodejs简介\",{\"0\":{\"214\":1}}],[\"nodejs\",{\"1\":{\"24\":6,\"59\":2,\"122\":1,\"227\":1,\"241\":1,\"272\":1,\"1591\":1}}],[\"node\",{\"0\":{\"33\":1,\"36\":1,\"216\":1,\"217\":1,\"223\":1,\"224\":1,\"225\":1,\"230\":1},\"1\":{\"15\":2,\"34\":1,\"36\":1,\"37\":3,\"59\":4,\"61\":3,\"62\":2,\"66\":1,\"71\":12,\"73\":1,\"74\":1,\"77\":2,\"117\":2,\"148\":1,\"150\":4,\"155\":4,\"215\":5,\"216\":8,\"217\":2,\"218\":2,\"219\":3,\"220\":3,\"221\":1,\"222\":2,\"223\":4,\"224\":5,\"227\":1,\"228\":6,\"229\":5,\"238\":3,\"240\":1,\"241\":4,\"242\":2,\"245\":1,\"254\":1,\"255\":1,\"256\":1,\"257\":1,\"258\":1,\"259\":2,\"260\":1,\"262\":2,\"264\":7,\"298\":1,\"301\":1,\"332\":2,\"846\":1,\"952\":1,\"996\":1,\"1308\":1,\"1324\":1,\"1427\":1,\"1573\":1,\"1591\":2,\"1786\":4,\"1788\":1,\"1789\":3,\"1792\":3,\"1795\":43,\"1799\":4,\"1802\":1,\"1803\":2,\"1804\":8,\"1805\":6,\"1825\":1,\"1828\":1,\"1862\":1,\"1966\":2,\"1977\":4,\"1978\":20,\"1979\":26,\"2027\":1}}],[\"二进制数据\",{\"1\":{\"1570\":1}}],[\"二进制\",{\"1\":{\"792\":1}}],[\"二进制以0b开头\",{\"1\":{\"792\":1}}],[\"二者仅仅是顺序不同\",{\"1\":{\"1962\":1}}],[\"二者的区别是否只查找一级子元素\",{\"1\":{\"1243\":1}}],[\"二者的区别是\",{\"1\":{\"1215\":1}}],[\"二者的不同就是\",{\"1\":{\"1204\":1}}],[\"二者效果一样\",{\"1\":{\"1210\":1}}],[\"二者是等价的\",{\"1\":{\"1198\":1}}],[\"二者一起给出了设备的坐标\",{\"1\":{\"1102\":1}}],[\"二者都为\",{\"1\":{\"246\":1}}],[\"二者关系有点像\",{\"1\":{\"240\":1}}],[\"二者采用的是同样的\",{\"1\":{\"216\":1}}],[\"二\",{\"0\":{\"3\":1,\"26\":1,\"61\":1,\"117\":1,\"124\":1,\"143\":1,\"148\":1,\"164\":1,\"176\":1,\"216\":1,\"228\":1,\"235\":1,\"264\":1,\"299\":1,\"339\":1,\"344\":1,\"380\":1,\"430\":1,\"437\":1,\"446\":1,\"461\":1,\"464\":1,\"467\":1,\"470\":1,\"479\":1,\"483\":1,\"491\":1,\"506\":1,\"515\":1,\"542\":1,\"559\":1,\"615\":1,\"645\":1,\"658\":1,\"682\":1,\"694\":1,\"778\":1,\"968\":1,\"1011\":1,\"1050\":1,\"1082\":1,\"1110\":1,\"1142\":1,\"1171\":1,\"1197\":1,\"1248\":1,\"1325\":1,\"1412\":1,\"1485\":1,\"1527\":1,\"1556\":1,\"1572\":1,\"1604\":1,\"1625\":1,\"1649\":1,\"1657\":1,\"1685\":1,\"1724\":1,\"1758\":1,\"1777\":1,\"1787\":1,\"1833\":1,\"1875\":1,\"1886\":1,\"1904\":1,\"1945\":1,\"1963\":1,\"1975\":1,\"1988\":1,\"1998\":1,\"1999\":1,\"2016\":1,\"2026\":1,\"2048\":1}}],[\"镜像站\",{\"1\":{\"2\":1}}],[\"一棵用于描述\",{\"1\":{\"1974\":1}}],[\"一起传递给\",{\"1\":{\"1944\":1}}],[\"一一去匹配尝试\",{\"1\":{\"1792\":1}}],[\"一一对应\",{\"1\":{\"271\":1}}],[\"一二月份合并\",{\"1\":{\"1752\":1}}],[\"一二三四五\",{\"1\":{\"1648\":1}}],[\"一大一小看倍数\",{\"1\":{\"1738\":1}}],[\"一脉相承\",{\"1\":{\"1705\":1}}],[\"一段时间之后\",{\"1\":{\"1646\":2}}],[\"一段时间\",{\"1\":{\"1646\":1}}],[\"一段时间后\",{\"1\":{\"1645\":4}}],[\"一切正常\",{\"1\":{\"1635\":1}}],[\"一切皆数据\",{\"1\":{\"998\":1}}],[\"一方面会导致繁忙的主线程白白的消耗时间\",{\"1\":{\"1558\":1}}],[\"一边把二者合并为渲染树\",{\"1\":{\"1530\":1}}],[\"一边是非单词字符\",{\"1\":{\"916\":1}}],[\"一上来\",{\"1\":{\"1407\":1}}],[\"一层\",{\"1\":{\"1379\":1}}],[\"一直找到根\",{\"1\":{\"2031\":1}}],[\"一直是触发对象\",{\"1\":{\"1910\":1}}],[\"一直匹配属性attrs\",{\"1\":{\"1792\":1}}],[\"一直持续到表达式最终返回\",{\"1\":{\"1286\":1}}],[\"一直传播到事件的实际目标\",{\"1\":{\"1140\":1}}],[\"一直平移直到碰到了所处的容器的边框\",{\"1\":{\"561\":1}}],[\"一块代码区域\",{\"1\":{\"1017\":1}}],[\"一块内存包含\",{\"1\":{\"1000\":1}}],[\"一端对象\",{\"1\":{\"976\":1}}],[\"一端原始\",{\"1\":{\"976\":1}}],[\"一定是有值的\",{\"1\":{\"2054\":1}}],[\"一定是看服务方的要求\",{\"1\":{\"1632\":1}}],[\"一定不为空\",{\"1\":{\"2068\":1}}],[\"一定不能忽略被定义词\",{\"1\":{\"1757\":1}}],[\"一定不要写箭头函数\",{\"1\":{\"1362\":1}}],[\"一定会引起\",{\"1\":{\"1528\":1}}],[\"一定为\",{\"1\":{\"976\":2}}],[\"一定为false\",{\"1\":{\"976\":1}}],[\"一定要判断一下是否存在\",{\"1\":{\"2073\":1}}],[\"一定要在可信的内容上使用v\",{\"1\":{\"1400\":1}}],[\"一定要激活账号\",{\"1\":{\"91\":1}}],[\"一定要先从远程库中拉取最新的代码\",{\"1\":{\"13\":1}}],[\"一元运算符\",{\"0\":{\"804\":1},\"1\":{\"816\":1}}],[\"一对大括号就可以产生一个局部作用域\",{\"1\":{\"786\":1}}],[\"一对一对的尖括号\",{\"1\":{\"657\":1}}],[\"一种组件间通信的方式\",{\"1\":{\"1437\":1,\"1438\":1,\"1439\":1}}],[\"一种缩进式\",{\"1\":{\"1247\":1}}],[\"一种是普通标签上的事件\",{\"1\":{\"1368\":1}}],[\"一种是实际参数\",{\"1\":{\"931\":1}}],[\"一种是使用\",{\"1\":{\"877\":1}}],[\"一种是使用本地时间\",{\"1\":{\"877\":1}}],[\"一种验证失败返回\",{\"1\":{\"759\":1}}],[\"一种新的存储会话机制\",{\"1\":{\"353\":1}}],[\"一半在\",{\"1\":{\"730\":1}}],[\"一像素实心黑色\",{\"1\":{\"706\":1}}],[\"一致\",{\"1\":{\"697\":1}}],[\"一组新的片段类元素\",{\"1\":{\"694\":1}}],[\"一组兄弟元素中的第\",{\"1\":{\"520\":1}}],[\"一组兄弟元素中的第一个元素\",{\"1\":{\"520\":1}}],[\"一组兄弟元素中的最后一个元素\",{\"1\":{\"520\":1}}],[\"一只恐龙头部和躯干的骨架\",{\"1\":{\"666\":1}}],[\"一模一样\",{\"1\":{\"611\":1}}],[\"一共有四个方向的外边距\",{\"1\":{\"546\":1}}],[\"一共有四个方向的内边距\",{\"1\":{\"545\":1}}],[\"一些配置\",{\"1\":{\"2047\":1}}],[\"一些钩子函数\",{\"1\":{\"1789\":1}}],[\"一些通用函数\",{\"0\":{\"1679\":1}}],[\"一些通用的样式统一设置到共同的祖先元素上\",{\"1\":{\"527\":1}}],[\"一些组件在用\",{\"1\":{\"1435\":1}}],[\"一些其他的内置指令\",{\"0\":{\"1398\":1}}],[\"一些内置模块\",{\"1\":{\"1301\":1}}],[\"一些\",{\"0\":{\"1131\":1,\"1163\":1},\"1\":{\"1407\":1}}],[\"一些在\",{\"1\":{\"956\":1}}],[\"一些常用的帮助函数\",{\"1\":{\"380\":1}}],[\"一文教你搞定所有前端鉴权与后端鉴权方案\",{\"1\":{\"509\":1}}],[\"一旦证书被信任后\",{\"1\":{\"2091\":1}}],[\"一旦找到可复用的节点\",{\"1\":{\"1962\":1}}],[\"一旦触发之后\",{\"1\":{\"1817\":1}}],[\"一旦写了箭头函数\",{\"1\":{\"1362\":1}}],[\"一旦\",{\"1\":{\"1350\":1}}],[\"一旦打印出错误\",{\"1\":{\"1252\":1}}],[\"一旦离开了浏览器这个环境\",{\"1\":{\"1109\":1}}],[\"一旦确定就不会变化了\",{\"1\":{\"1020\":1}}],[\"一旦确实就不再变化\",{\"1\":{\"938\":1}}],[\"一旦条件满足就不再往下匹配\",{\"1\":{\"908\":1}}],[\"一旦松手即为释放了\",{\"1\":{\"762\":1}}],[\"一旦路径生成\",{\"1\":{\"710\":1}}],[\"一旦客户端得知这个secret\",{\"1\":{\"367\":1}}],[\"一旦想要点赞\",{\"1\":{\"343\":1}}],[\"一级域名和二级域名之间是允许共享使用的\",{\"1\":{\"345\":1}}],[\"一级属性的数组值\",{\"1\":{\"176\":1}}],[\"一次交互结束\",{\"1\":{\"1628\":1}}],[\"一次在这里\",{\"1\":{\"1368\":1}}],[\"一次是在指定子类原型时调用\",{\"1\":{\"1071\":1}}],[\"一次只执行一个\",{\"1\":{\"408\":1}}],[\"一次\",{\"1\":{\"191\":1,\"2058\":1}}],[\"一个方法返回一个对象\",{\"1\":{\"2042\":1}}],[\"一个辅助函数\",{\"1\":{\"1974\":1}}],[\"一个节点该移动到哪里\",{\"1\":{\"1962\":1}}],[\"一个布尔值\",{\"1\":{\"1954\":1}}],[\"一个组件实例本质上就是一个对象\",{\"1\":{\"1954\":1}}],[\"一个组件在用\",{\"1\":{\"1435\":1}}],[\"一个标志\",{\"1\":{\"1954\":1}}],[\"一个标记变量\",{\"1\":{\"1925\":1}}],[\"一个对象实现了\",{\"1\":{\"1931\":1}}],[\"一个对象里面包含其他的对象\",{\"1\":{\"831\":1}}],[\"一个迭代器对象\",{\"1\":{\"1906\":1}}],[\"一个集合左边删右边加\",{\"1\":{\"1890\":1}}],[\"一个集合会存储同一种类型的数据\",{\"1\":{\"176\":1}}],[\"一个匿名的副作用函数\",{\"1\":{\"1888\":1}}],[\"一个与match\",{\"1\":{\"1792\":1}}],[\"一个与类变量同名的实例变量\",{\"1\":{\"405\":1}}],[\"一个张量表示图像数据\",{\"1\":{\"1655\":1}}],[\"一个父组件无法访问到一个使用了\",{\"1\":{\"1499\":1}}],[\"一个路由器对象\",{\"1\":{\"2025\":1}}],[\"一个路由\",{\"1\":{\"1455\":1}}],[\"一个路由的组成有\",{\"1\":{\"304\":1}}],[\"一个单词组成\",{\"1\":{\"1419\":1}}],[\"一个块注释\",{\"1\":{\"1325\":1}}],[\"一个块级元素不会嵌套在一个内联元素里面\",{\"1\":{\"661\":1}}],[\"一个模块暴露的成员有可能对\",{\"1\":{\"1319\":1}}],[\"一个文件时\",{\"1\":{\"1313\":1}}],[\"一个进程至少有一个线程\",{\"1\":{\"1170\":1,\"1554\":1}}],[\"一个进程可以由一个或一个以上的线程组成\",{\"1\":{\"407\":1}}],[\"一个特性字符串\",{\"1\":{\"1088\":3}}],[\"一个柯里化的函数首先会接受一些参数\",{\"1\":{\"1039\":1}}],[\"一个简单的闭包程序\",{\"0\":{\"1025\":1}}],[\"一个变量对应一块小内存\",{\"1\":{\"999\":1}}],[\"一个新变量指向现有的复杂对象\",{\"1\":{\"984\":1}}],[\"一个网页中依次有两段\",{\"1\":{\"957\":1}}],[\"一个在每一项回调用的函数和一个可选的初始值\",{\"1\":{\"946\":1}}],[\"一个程序里面保留着已经不能在内存中访问的值时\",{\"1\":{\"865\":1}}],[\"一个是从数组第一项开始\",{\"1\":{\"946\":1}}],[\"一个是从数组末尾开始找\",{\"1\":{\"856\":1}}],[\"一个是\",{\"1\":{\"796\":1,\"1783\":2}}],[\"一个局部作用域\",{\"1\":{\"784\":1}}],[\"一个海报帧的\",{\"1\":{\"748\":1}}],[\"一个<details>元素的一个内容摘要\",{\"1\":{\"697\":1}}],[\"一个嵌入的浏览上下文\",{\"1\":{\"671\":1}}],[\"一个视口的宽度\",{\"1\":{\"650\":1}}],[\"一个物理像素\",{\"1\":{\"646\":1}}],[\"一个盒子可见框的大小\",{\"1\":{\"545\":1}}],[\"一个值\",{\"1\":{\"544\":1}}],[\"一个元素被拖放\",{\"1\":{\"764\":1}}],[\"一个元素在其父元素中\",{\"1\":{\"553\":1}}],[\"一个元素\",{\"1\":{\"528\":1}}],[\"一个样式名对应一个样式值\",{\"1\":{\"514\":1}}],[\"一个参数\",{\"1\":{\"487\":1,\"854\":2}}],[\"一个线程执行\",{\"1\":{\"408\":1}}],[\"一个线程如何服务于大量的请求\",{\"1\":{\"224\":1}}],[\"一个函数的输入往往被看作是函数的参数\",{\"1\":{\"1033\":1}}],[\"一个函数\",{\"1\":{\"402\":1}}],[\"一个浏览器针对一个网站最多存\",{\"1\":{\"350\":1}}],[\"一个接口示例\",{\"1\":{\"338\":1}}],[\"一个接口一般由如下几个部分组成\",{\"1\":{\"338\":1}}],[\"一个接口就是\",{\"1\":{\"335\":1}}],[\"一个中间件处理完\",{\"1\":{\"309\":1}}],[\"一个项目使用一个数据库\",{\"1\":{\"176\":1}}],[\"一个\",{\"1\":{\"176\":2,\"646\":2,\"697\":1,\"763\":1,\"1283\":1,\"1667\":1}}],[\"一个页面需要引入多个\",{\"1\":{\"31\":1}}],[\"一个页面所用到的\",{\"1\":{\"22\":1}}],[\"一词来自于希伯来语\",{\"1\":{\"146\":1}}],[\"一般浏览器都会忽略这个参数\",{\"1\":{\"2050\":1}}],[\"一般浏览器的\",{\"1\":{\"345\":1}}],[\"一般要求这个对象就是一个纯粹的数据对象\",{\"1\":{\"2050\":1}}],[\"一般平均数\",{\"1\":{\"1753\":1}}],[\"一般增长量\",{\"1\":{\"1729\":1}}],[\"一般增长率\",{\"1\":{\"1728\":1}}],[\"一般两到三次即可求得答案\",{\"1\":{\"1727\":1}}],[\"一般可观察两位\",{\"1\":{\"1711\":1}}],[\"一般出现在段首\",{\"1\":{\"1687\":1}}],[\"一般包括以下五种\",{\"1\":{\"1686\":1}}],[\"一般包括三种\",{\"1\":{\"1686\":1}}],[\"一般用于首屏的性能优化\",{\"1\":{\"1640\":1}}],[\"一般用于文件上传\",{\"1\":{\"1634\":1}}],[\"一般用来启动项目\",{\"1\":{\"77\":1}}],[\"一般组件通常存放在components文件夹\",{\"1\":{\"1457\":1}}],[\"一般写法\",{\"1\":{\"1376\":1}}],[\"一般都传\",{\"1\":{\"1129\":1}}],[\"一般先要获取元素节点\",{\"1\":{\"1114\":1}}],[\"一般需要我们点击允许弹出后\",{\"1\":{\"1088\":1}}],[\"一般通过上下文对象调用函数时\",{\"1\":{\"990\":1,\"996\":1}}],[\"一般通过\",{\"1\":{\"990\":1,\"996\":1}}],[\"一般使用get\",{\"1\":{\"1632\":1}}],[\"一般使用\",{\"1\":{\"990\":1,\"996\":1}}],[\"一般地\",{\"1\":{\"913\":1}}],[\"一般来说\",{\"1\":{\"1207\":1}}],[\"一般来说我们希望整个元素在标准流中表现为一个块盒\",{\"1\":{\"548\":1}}],[\"一般来说我们期望该元素的内部元素参与正常的流布局\",{\"1\":{\"548\":1}}],[\"一般来讲\",{\"1\":{\"826\":1,\"828\":1,\"929\":1,\"1083\":1}}],[\"一般会在\",{\"1\":{\"666\":1}}],[\"一般比较常用的断点\",{\"1\":{\"651\":1}}],[\"一般我们在\",{\"1\":{\"1433\":1}}],[\"一般我们在声明变量的时候就会将变量给初始化\",{\"1\":{\"780\":1}}],[\"一般我们只需要将像素比设置为该值即可得到一个最佳效果\",{\"1\":{\"649\":1}}],[\"一般我们编写网页时必须要去除浏览器的默认样式\",{\"1\":{\"610\":1}}],[\"一般情况\",{\"1\":{\"1969\":1}}],[\"一般情况处理\",{\"0\":{\"1969\":1}}],[\"一般情况伪类下都是使用\",{\"1\":{\"520\":1}}],[\"一般情况下我们采用三位进行分配足够\",{\"1\":{\"1723\":1}}],[\"一般情况下我们会为进行变形的元素添加transition\",{\"1\":{\"619\":1}}],[\"一般情况下与bind阶段相同\",{\"1\":{\"1407\":1}}],[\"一般情况下使用typeof\",{\"1\":{\"967\":1}}],[\"一般情况下系统可以自动识别\",{\"1\":{\"621\":1}}],[\"一般情况下上述字体作为字体族最后一个作为兜底\",{\"1\":{\"621\":1}}],[\"一般情况下侧边栏会定宽\",{\"1\":{\"580\":1}}],[\"一般情况下接口都是由\",{\"1\":{\"337\":1}}],[\"一般情况下\",{\"1\":{\"176\":1,\"191\":1,\"723\":1,\"1198\":1}}],[\"一般不会在beforedestroy操作数据\",{\"1\":{\"1411\":1}}],[\"一般不作为实例变量使用\",{\"1\":{\"405\":1}}],[\"一般不建议存放敏感信息\",{\"1\":{\"366\":1}}],[\"一般在开发阶段使用\",{\"1\":{\"371\":1}}],[\"一般在pc端和手机端的区分\",{\"1\":{\"269\":1}}],[\"一般添加用户的相关信息或其他业务需要的必要信息\",{\"1\":{\"366\":1}}],[\"一般是通过对输入进行变换\",{\"1\":{\"1678\":1}}],[\"一般是左键\",{\"1\":{\"1148\":1}}],[\"一般是从右到左\",{\"1\":{\"419\":1}}],[\"一般是根据用户信息得到权限等\",{\"1\":{\"368\":1}}],[\"一般是放在请求头中\",{\"1\":{\"360\":1}}],[\"一般是在响应体中返回给客户端的\",{\"1\":{\"360\":1}}],[\"一般是指正式的服务器电脑\",{\"1\":{\"71\":1}}],[\"一般是指程序员的电脑\",{\"1\":{\"71\":1}}],[\"一般失效时间较短\",{\"1\":{\"356\":1}}],[\"一般网站\",{\"1\":{\"343\":1}}],[\"一般结束标签\",{\"1\":{\"328\":1}}],[\"一般为\",{\"1\":{\"296\":1}}],[\"一样的缩进式风格\",{\"1\":{\"1247\":1}}],[\"一样\",{\"1\":{\"25\":1,\"545\":1,\"890\":1,\"980\":1,\"1219\":1,\"1281\":1,\"1309\":1,\"1789\":1}}],[\"一开始\",{\"1\":{\"24\":1,\"219\":1}}],[\"一\",{\"0\":{\"2\":1,\"21\":1,\"56\":1,\"116\":1,\"123\":1,\"128\":1,\"142\":1,\"147\":1,\"163\":1,\"170\":1,\"215\":1,\"227\":1,\"231\":1,\"242\":1,\"298\":1,\"334\":1,\"343\":1,\"375\":1,\"427\":1,\"435\":1,\"445\":1,\"460\":1,\"463\":1,\"466\":1,\"469\":1,\"478\":1,\"482\":1,\"490\":1,\"503\":1,\"514\":1,\"539\":1,\"552\":1,\"609\":1,\"640\":1,\"655\":1,\"679\":1,\"690\":1,\"777\":1,\"963\":1,\"1006\":1,\"1044\":1,\"1077\":1,\"1109\":1,\"1136\":1,\"1167\":1,\"1193\":1,\"1247\":1,\"1324\":1,\"1345\":1,\"1481\":1,\"1526\":1,\"1552\":1,\"1568\":1,\"1599\":1,\"1620\":1,\"1644\":1,\"1654\":1,\"1684\":1,\"1709\":1,\"1757\":1,\"1776\":1,\"1783\":1,\"1832\":1,\"1871\":1,\"1885\":1,\"1901\":1,\"1942\":1,\"1960\":1,\"1973\":1,\"1983\":1,\"1997\":1,\"2007\":1,\"2025\":1,\"2039\":1},\"1\":{\"1777\":1}}]],\"version\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
