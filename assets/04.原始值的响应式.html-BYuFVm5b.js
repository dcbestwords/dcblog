import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as o,e as a,a as n,b as s}from"./app-BBpUlT7-.js";const p="/dcblog/assets/image-20230524180340479-Gy2cSoiA.png",c={},l=a(`<h1 id="_4-原始值的响应式方案" tabindex="-1"><a class="header-anchor" href="#_4-原始值的响应式方案"><span>4. 原始值的响应式方案</span></a></h1><blockquote><p>霍春阳《Vue.js设计与实现》的笔记</p></blockquote><p>原始值指的是 <code>Boolean</code>、<code>Number</code>、 <code>BigInt</code>、<code>String</code>、<code>Symbol</code>、<code>undefined</code> 和 <code>null</code> 等类型的值。在 JavaScript 中，原始值是按值传递的，而非按引用传递。这意味着，如果一个函数接收原始值作为参数，那么形参与实参之间没有引用关系，它们是两个完全独立的值，对形参的修改不会影响实参。</p><h2 id="_1-引入ref" tabindex="-1"><a class="header-anchor" href="#_1-引入ref"><span>1. 引入ref</span></a></h2><p>Proxy 的代理目标必须是非原始值，所以为了实现原始值的响应式我们可以使用一个非原始值 去“ <mark>包裹</mark> ”原始值。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token punctuation">{</span> 
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;vue&#39;</span> 
<span class="token punctuation">}</span> 
<span class="token comment">// 可以使用 Proxy 代理 wrapper，间接实现对原始值的拦截 </span>
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span> 
name<span class="token punctuation">.</span>value <span class="token comment">// vue </span>
<span class="token comment">// 修改值可以触发响应 </span>
name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;vue3&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了方便和规范用户的使用，封装一个 <mark>函数</mark> ，将包裹对象的创建工作都封装到该函数中。</p>`,7),i=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// 封装一个 ref 函数 "),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"ref"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"val"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token comment"},"// 在 ref 函数内部创建包裹对象 "),s(`
    `),n("span",{class:"token keyword"},"const"),s(" wrapper "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token literal-property property"},"value"),n("span",{class:"token operator"},":"),s(` val 
    `),n("span",{class:"token punctuation"},"}"),s(` 
    `),n("span",{class:"token comment"},"// 使用 Object.defineProperty 在 wrapper 对象上定义一个不可枚举的属性 __v_isRef，并且值为 true "),s(`
    Object`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"defineProperty"),n("span",{class:"token punctuation"},"("),s("wrapper"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'__v_isRef'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token literal-property property"},"value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true"),s(` 
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token comment"},"// 将包裹对象变成响应式数据 "),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"reactive"),n("span",{class:"token punctuation"},"("),s("wrapper"),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),u=a(`<p>其中高亮部分为包裹对象定义了一个不可枚举且不可写的属性 <code>__v_isRef</code>，用来判断一个数据是否是ref。</p><h2 id="_2-响应丢失问题" tabindex="-1"><a class="header-anchor" href="#_2-响应丢失问题"><span>2. 响应丢失问题</span></a></h2><p>在vue3中，我们经常遇到一种情况：我们使用reactive创建了一个响应式的对象，我们在模板中使用这个对象中的某些属性，我们不希望在模板中频繁使用<code>obj.prop</code>，这时便会用到解构赋值。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> 
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token comment">// 响应式数据 </span>
        <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> 
        <span class="token comment">// 1s 后修改响应式数据的值，不会触发重新渲染 </span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
            obj<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">100</span> 
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> 
        <span class="token keyword">return</span> <span class="token punctuation">{</span> 
            <span class="token operator">...</span>obj 
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的过程可以描述为：创建一个响应式的数据对象 obj，然后使用展开运算符得到一个新的对象 newObj，它是一个普通对象，不具有响应能力。</p><blockquote><p>使用数据代理的方式，当访问<code>newObj.prop</code>时，实际访问的是<code>obj.prop</code></p></blockquote><p><strong>toref函数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">toRef</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token punctuation">{</span> 
        <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> 
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span> 
    <span class="token comment">// 定义 __v_isRef 属性 </span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> <span class="token string">&#39;__v_isRef&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> 
        <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token boolean">true</span> 
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> wrapper 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>toRefs函数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">toRefs</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 
    <span class="token comment">// 使用 for...in 循环遍历对象 </span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token comment">// 逐个调用 toRef 完成转换 </span>
        ret<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span> 
    <span class="token punctuation">}</span> 
    <span class="token keyword">return</span> ret 
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>toRefs</code>返回的对象结构</p><figure><img src="`+p+'" alt="image-20230524180340479" tabindex="0" loading="lazy"><figcaption>image-20230524180340479</figcaption></figure></li></ul><blockquote><p>为<code>toRef</code>添加<code>getter</code></p></blockquote><p><strong>toRef函数</strong></p>',15),r=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"toRef"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("obj"),n("span",{class:"token punctuation"},","),s(" key")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token keyword"},"const"),s(" wrapper "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token keyword"},"get"),s(),n("span",{class:"token function"},"value"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(" obj"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(` 
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(` 
        `),n("span",{class:"token comment"},"// 允许设置值 "),s(`
        `),n("span",{class:"token keyword"},"set"),s(),n("span",{class:"token function"},"value"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"val"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            obj`),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(` val 
        `),n("span",{class:"token punctuation"},"}"),s(` 
    `),n("span",{class:"token punctuation"},"}"),s(` 

    Object`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"defineProperty"),n("span",{class:"token punctuation"},"("),s("wrapper"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'__v_isRef'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token literal-property property"},"value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true"),s(` 
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 

    `),n("span",{class:"token keyword"},"return"),s(` wrapper 
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),d=a(`<h2 id="_3-自动脱ref" tabindex="-1"><a class="header-anchor" href="#_3-自动脱ref"><span>3. 自动脱ref</span></a></h2><p><code>toRefs</code> 会把响应式数据的第一层属性值转换为 <code>ref</code>，因此必须通过 <code>value</code> 属性访问值，所以我们如果使用上面方式return数据的话，我们确实不需要频繁<code>obj.prop</code>，而是变成了频繁<code>prop.value</code>，所以需要自动脱ref，即 <mark>如果读取的属性是一个 ref，则直接将该 ref 对应 的 value 属性值返回</mark> 。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">proxyRefs</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span> 
        <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token keyword">const</span> value <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> 
            <span class="token comment">// 自动脱 ref 实现：如果读取的值是 ref，则返回它的 value 属性值 </span>
            <span class="token keyword">return</span> value<span class="token punctuation">.</span>__v_isRef <span class="token operator">?</span> value<span class="token punctuation">.</span>value <span class="token operator">:</span> value 
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span> 

<span class="token comment">// 调用 proxyRefs 函数创建代理 </span>
<span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token function">proxyRefs</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时也应该有自动为ref设置值的能力，为此添加set的拦截函数。</p>`,4),k=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"proxyRefs"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"const"),s(" value "),n("span",{class:"token operator"},"="),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(" value"),n("span",{class:"token punctuation"},"."),s("__v_isRef "),n("span",{class:"token operator"},"?"),s(" value"),n("span",{class:"token punctuation"},"."),s("value "),n("span",{class:"token operator"},":"),s(` value 
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(` 
        `),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" newValue"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token comment"},"// 通过 target 读取真实值 "),s(`
            `),n("span",{class:"token keyword"},"const"),s(" value "),n("span",{class:"token operator"},"="),s(" target"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(` 
            `),n("span",{class:"token comment"},"// 如果值是 Ref，则设置其对应的 value 属性值 "),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("value"),n("span",{class:"token punctuation"},"."),s("__v_isRef"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                value`),n("span",{class:"token punctuation"},"."),s("value "),n("span",{class:"token operator"},"="),s(` newValue 
                `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" newValue"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token punctuation"},"}"),s(` 
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=a(`<p>我们在编写 Vue.js 组件时，<mark>组件中的 setup 函数所返回的数据会传递给 proxyRefs 函数进行处理</mark> ，所以我们在模板中可以直接访问ref的值而不用<code>.value</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token punctuation">{</span> 
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> 
        <span class="token comment">// 返回的这个对象会传递给 proxyRefs </span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),m=[l,i,u,r,d,k,v];function b(g,h){return t(),o("div",null,m)}const _=e(c,[["render",b],["__file","04.原始值的响应式.html.vue"]]),j=JSON.parse('{"path":"/source_code/vue3/04.%E5%8E%9F%E5%A7%8B%E5%80%BC%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F.html","title":"4. 原始值的响应式方案","lang":"zh-CN","frontmatter":{"description":"4. 原始值的响应式方案 霍春阳《Vue.js设计与实现》的笔记 原始值指的是 Boolean、Number、 BigInt、String、Symbol、undefined 和 null 等类型的值。在 JavaScript 中，原始值是按值传递的，而非按引用传递。这意味着，如果一个函数接收原始值作为参数，那么形参与实参之间没有引用关系，它们是两个完全...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/source_code/vue3/04.%E5%8E%9F%E5%A7%8B%E5%80%BC%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"4. 原始值的响应式方案"}],["meta",{"property":"og:description","content":"4. 原始值的响应式方案 霍春阳《Vue.js设计与实现》的笔记 原始值指的是 Boolean、Number、 BigInt、String、Symbol、undefined 和 null 等类型的值。在 JavaScript 中，原始值是按值传递的，而非按引用传递。这意味着，如果一个函数接收原始值作为参数，那么形参与实参之间没有引用关系，它们是两个完全..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-29T16:36:49.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-08-29T16:36:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4. 原始值的响应式方案\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-29T16:36:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 引入ref","slug":"_1-引入ref","link":"#_1-引入ref","children":[]},{"level":2,"title":"2. 响应丢失问题","slug":"_2-响应丢失问题","link":"#_2-响应丢失问题","children":[]},{"level":2,"title":"3. 自动脱ref","slug":"_3-自动脱ref","link":"#_3-自动脱ref","children":[]}],"git":{"createdTime":1720786104000,"updatedTime":1724949409000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":3}]},"readingTime":{"minutes":3.44,"words":1031},"filePathRelative":"source_code/vue3/04.原始值的响应式.md","localizedDate":"2024年7月12日","excerpt":"\\n<blockquote>\\n<p>霍春阳《Vue.js设计与实现》的笔记</p>\\n</blockquote>\\n<p>原始值指的是 <code>Boolean</code>、<code>Number</code>、 <code>BigInt</code>、<code>String</code>、<code>Symbol</code>、<code>undefined</code> 和 <code>null</code> 等类型的值。在 JavaScript 中，原始值是按值传递的，而非按引用传递。这意味着，如果一个函数接收原始值作为参数，那么形参与实参之间没有引用关系，它们是两个完全独立的值，对形参的修改不会影响实参。</p>","autoDesc":true}');export{_ as comp,j as data};
