import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as t}from"./app-C3nmoAdO.js";const l="/assets/16495810061798-D_XEEiVs.jpg",p="/assets/16495811318201-D8p9NAqo.jpg",n={};function h(k,s){return t(),a("div",null,s[0]||(s[0]=[e('<h2 id="loader" tabindex="-1"><a class="header-anchor" href="#loader"><span>loader</span></a></h2><p><em>loader</em> 让 <em>webpack</em> 能够去处理那些非 <em>JavaScript</em> 文件（<em>webpack</em> 自身只理解 <em>JavaScript</em>）。<em>loader</em> 可以将所有类型的文件转换为 <em>webpack</em> 能够处理的有效模块，然后你就可以利用 <em>webpack</em> 的打包能力，对它们进行处理。</p><p>本质上，<em>webpack loader</em> 将所有类型的文件，转换为应用程序的依赖图可以直接引用的模块。</p><p>在更高层面，在 <em>webpack</em> 的配置中 <em>loader</em> 有两个目标。</p><ul><li><strong>识别</strong>出应该被对应的 <em>loader</em> 进行转换的那些文件。(使用 <em>test</em> 属性)</li><li><strong>转换</strong>这些文件，从而使其能够被添加到依赖图中（并且最终添加到 <em>bundle</em> 中）（<em>use</em> 属性）</li></ul><blockquote><p>有了 <em>loader</em>，<em>webpack</em> 就会把非 <em>js</em> 文件也看成是模块，并且可以引用它</p></blockquote><p>来看一个具体的示例，在 <em>src</em> 下面创建 <em>index.css</em></p><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>代码如下：</p><div class="language-css" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  background: </span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">skyblue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  font-family: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Roboto&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">sans-serif</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>接下来在 <em>index.js</em> 中来引入该 <em>css</em> 文件，如下：</p><p><em>index.js</em></p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> module_1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./module1&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> module_2</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./module2&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> module_3</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./module3&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//引入css模块</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./index.css&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><p>然后输入<code>npm run dev</code>进行打包操作，会发现出现打包失败，在错误提示中提醒我们需要相应的 <em>loader</em>。</p><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>回到项目根目录，安装 <em>css-loader</em> 和 <em>style-loader</em>。其中 <em>css-loader</em> 负责把 <em>css</em> 文件打包到 <em>js</em> 中，<em>style-loader</em> 让 <em>style</em> 样式加入到 <em>index.html</em> 结构中。如下：</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> i</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -D</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> css-loader</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> style-loader</span></span></code></pre></div><p>接下来在 <code>webpack.config.js</code>中添加相应的配置信息，如下：</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  rules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      test</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\.</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">css</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      use</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;style-loader&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;css-loader&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><blockquote><p>webpack 的 loader 执行顺序自后往前</p></blockquote><p>其中 <em>test</em> 属性对应的是一个正则表达式，代表要处理的文件类型，后面的 <em>use</em> 属性代表所要使用的 <em>loader</em> 文件。</p><p>执行命令<code>npm run dev</code> 或者 <code>npm start</code>，可以看到样式打包成功。</p>`,22)]))}const o=i(n,[["render",h],["__file","05_loader.html.vue"]]),c=JSON.parse('{"path":"/Efficiency/webpack/05_loader.html","title":"loader","lang":"zh-CN","frontmatter":{"title":"loader","order":5,"category":["前端"],"tag":["模块化","webpack"],"description":"loader loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。 本质上，webpack loader 将所有类型的文件，转换为应用...","head":[["meta",{"property":"og:url","content":"https://github.com/Efficiency/webpack/05_loader.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"loader"}],["meta",{"property":"og:description","content":"loader loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。 本质上，webpack loader 将所有类型的文件，转换为应用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-03T11:20:13.000Z"}],["meta",{"property":"article:tag","content":"模块化"}],["meta",{"property":"article:tag","content":"webpack"}],["meta",{"property":"article:modified_time","content":"2024-12-03T11:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"loader\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-03T11:20:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"loader","slug":"loader","link":"#loader","children":[]}],"git":{"createdTime":1710854012000,"updatedTime":1733224813000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":2}]},"readingTime":{"minutes":1.57,"words":470},"filePathRelative":"Efficiency/webpack/05_loader.md","localizedDate":"2024年3月19日","excerpt":"<h2>loader</h2>\\n<p><em>loader</em> 让 <em>webpack</em> 能够去处理那些非 <em>JavaScript</em> 文件（<em>webpack</em> 自身只理解 <em>JavaScript</em>）。<em>loader</em> 可以将所有类型的文件转换为 <em>webpack</em> 能够处理的有效模块，然后你就可以利用 <em>webpack</em> 的打包能力，对它们进行处理。</p>","autoDesc":true}');export{o as comp,c as data};
