import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as s,e as n}from"./app-D2A2dDWt.js";const t="/dcblog/assets/16498378583389-Dfify0vx.jpg",p="/dcblog/assets/16498378938740-BJULunIP.jpg",l="/dcblog/assets/16498379067693-CxvMFZ8P.jpg",i="/dcblog/assets/16498379448982-CHC6iRzW.jpg",o="/dcblog/assets/16498409491771-FKNOIYGy.jpg",c="/dcblog/assets/16498410612095-D9-BZc9B.jpg",r="/dcblog/assets/16498413752358-Crzf9yCL.jpg",d={},u=n('<p>babel一词来自于希伯来语，直译为巴别塔</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>巴别塔象征的统一的国度、统一的语言</p><p>而今天的JS世界缺少一座巴别塔，不同版本的浏览器能识别的ES标准并不相同，就导致了开发者面对不同版本的浏览器要使用不同的语言，和古巴比伦一样，前端开发也面临着这样的困境。</p><p>babel的出现，就是用于解决这样的问题，它是一个编译器，可以把不同标准书写的语言，编译为统一的、能被各种浏览器识别的语言</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>由于语言的转换工作灵活多样，babel的做法和postcss、webpack差不多，它本身仅提供一些分析功能，真正的转换需要依托于插件完成 <img src="'+l+'" alt="" loading="lazy"></p><p><strong>babel</strong> 官网地址：https://www.babeljs.cn/</p><figure><img src="'+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="一、babel的安装" tabindex="-1"><a class="header-anchor" href="#一、babel的安装"><span>一、babel的安装</span></a></h2><p>babel可以和构建工具联合使用，也可以独立使用</p><p>如果要独立的使用babel，需要安装下面两个库：</p><ul><li>@babel/core：babel核心库，提供了编译所需的所有api</li><li>@babel/cli：提供一个命令行工具，调用核心库的api完成编译</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>npm i <span class="token operator">-</span><span class="token constant">D</span> @babel<span class="token operator">/</span>core @babel<span class="token operator">/</span>cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="二、使用" tabindex="-1"><a class="header-anchor" href="#二、使用"><span>二、使用</span></a></h2><p>在项目的src目录中创建<code>babelTest.js</code>文件，输入如下简单代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello babel！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在命令行的运行babel命令，将上面js代码中的ES6的语法转换为ES5的语法</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./node_modules/.bin/babel ./src/babelTest.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要<code>node_modules</code>去找<code>babel</code>命令实在太麻烦，我们可以直接使用npm脚本简化：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;babel ./src/babelTest.js&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后面我们直接运行 <code>npm run build</code> 就直接编译了<code>babelTest.js</code>文件</p><p>可以看到此时并没有将我们的 <em>ES 6</em> 语法编译成 <em>ES 5</em> 语法。原因很简单，<em>babel</em> 是基于插件的，做不同的事情需要不同的插件，这样才能让 <em>babel</em> 非常灵活并且强大。</p><p>所以接下来我们安装相应的编译箭头函数的插件，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i babel-plugin-transform-es2015-arrow-functions
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除了安装插件以外，还需要在项目根目录下面创建 <code>babel</code>的配置文件，如下：</p><figure><img src="`+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>文件里面书写如下的配置信息：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;transform-es2015-arrow-functions&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行<code>npm run build</code>，可以看到我们的 <em>ES 6</em> 代码已经成功被编译为了 <em>ES 5</em> 的代码：</p><figure><img src="`+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接下来，我们去修改 <em>babelTest.js</em> 文件，增加其他的 <em>ES 6</em> 语法，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello babel！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">demo</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来执行<code>npm run build</code></p><p>但是<em>class</em> 并没有被编译。这个原因和前面我们遇到的一样，它需要安装另一个插件才能让 <em>babel</em> 工作起来，要不然就什么都不做。所以我们安装相应的插件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev babel-plugin-transform-es2015-classes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后 <em>.babelrc</em> 配置文件也要进行相应的配置，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;transform-es2015-arrow-functions&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;transform-es2015-classes&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行<code>npm run build</code>，结果如下：images</p><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过插件的学习，我们知道了 <em>babel</em> 要去解析转换 <em>ES 6</em> 语法，需要安装对应的插件，我们只是使用到了两个 <em>ES 6</em> 的语法就装了两个插件，当我们需要使用很多 <em>ES 6</em> 语法的时候，那就需要装非常多的插件，这样显得非常麻烦，那么有没有简便点的方法呢？</p><p><em>babel</em> 通过 <em>preset</em> 来解决我们上面提出的问题，<em>preset</em> 叫做预设，意思就是说预先设置一些常用的语法配置，把一批常用的相关的插件打包来满足我们的开发。</p><p><strong>安装预设：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i @babel/preset-env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>babel有多种预设，最常见的预设是<code>@babel/preset-env</code></p><p><code>@babel/preset-env</code>可以让你使用最新的JS语法，而无需针对每种语法转换设置具体的插件</p><p><strong>配置</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;@babel/preset-env&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、webpack-中使用-babel" tabindex="-1"><a class="header-anchor" href="#三、webpack-中使用-babel"><span>三、<em>webpack</em> 中使用 <em>babel</em></span></a></h2><p>回到 <em>webpack-demo</em> 目录，修改 <em>webpack-demo</em> 下的 <em>index.js</em>，加入下面一段 <em>ES 6</em> 代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 测试 ES 6 是否被编译成 ES 5</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello babel!!!&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后运行命令查看结果：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在打包出来的 <em>app.js</em> 文件中进行查看，可以看到我们所写的 <em>ES 6</em> 代码原样输出，<em>webpack</em> 并没有把 <em>ES 6</em> 代码编译成 <em>ES 5</em>。</p><p>要让 <em>ES 6</em> 代码被编译，我们需要借助 <em>babel</em> 的力量，这里我们需要安装 <em>babel-loader</em> 和 <em>babel-core</em> 以及处理 <em>ES 6</em> 语法的预设，<em>babel-loader</em> 的作用就是将 <em>ES 6</em> 代码送给 <em>babel-core</em> 处理，<em>babel-core</em> 就是 <em>babel</em> 工作的核心 <em>api</em>。</p><p>安装 <em>babel-core</em> 和 <em>babel-loader</em> 以及处理 <em>ES 6</em> 的预设：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> babel-loader @babel/core @babel/preset-env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 <em>webpack-demo</em> 目录中新建 <em>.babelrc</em> 文件，增加 <em>babel</em> 配置：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;@babel/preset-env&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来需要在 <em>webpack.config.js</em> 文件中增加配置项，在 <em>rules</em> 规则数字中增加下面代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">use</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行<code>npm run dev</code>命令打包</p><p>在打包好的js代码中我们查看到，原来的 <em>ES 6</em> 代码已经成功转换成 <em>ES 5</em> 代码了：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 测试 ES 6 是否被编译成 ES 5</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello babel!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、优化-babel-loader" tabindex="-1"><a class="header-anchor" href="#四、优化-babel-loader"><span>四、优化 babel-loader</span></a></h2><p>当我们写这个正则表达式<code>/.js$/</code>的时候，表示所有 <em>js</em> 文件都会被送 <em>babel-loader</em> 加载，然后由 <em>babel-core</em> 处理一边，这里包括我们安装的很多第三方包，你会发现 <em>node_modules</em> 文件夹下会有很多的 <em>js</em> 文件，但是这些 <em>js</em> 文件已经由开发者打包好了我们可以直接使用的，并不需要我们再去处理一遍。因此，如果 <em>babel-loader</em> 再去处理的话，会浪费太多的时间，导致 <em>webpack</em> 打包编译很慢，我们现在需要优化它。</p><p>具体的做法是排除不需要再次编译的，让 <em>babel-loader</em> 只处理我们开发的源文件，因此，我们需要修改 <em>webpack.config.js</em> 中的配置：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">use</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">exclude</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;node_modules&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>exclude: path.resolve(__dirname, &#39;node_modules&#39;)</code>这条语句表示排除 <em>node_modules</em> 这个文件夹，因为这个文件夹下放的都是第三方包，并不需要我们再次用 <em>babel</em> 去编译了。</p><p>再次运行<code>npm run dev</code>去打包的时候会发现已经快很多了。</p>`,70),b=[u];function m(v,g){return e(),s("div",null,b)}const f=a(d,[["render",m],["__file","07_babel.html.vue"]]),j=JSON.parse('{"path":"/Efficiency/webpack/07_babel.html","title":"babel","lang":"zh-CN","frontmatter":{"title":"babel","order":7,"description":"babel一词来自于希伯来语，直译为巴别塔 巴别塔象征的统一的国度、统一的语言 而今天的JS世界缺少一座巴别塔，不同版本的浏览器能识别的ES标准并不相同，就导致了开发者面对不同版本的浏览器要使用不同的语言，和古巴比伦一样，前端开发也面临着这样的困境。 babel的出现，就是用于解决这样的问题，它是一个编译器，可以把不同标准书写的语言，编译为统一的、能被...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/Efficiency/webpack/07_babel.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"babel"}],["meta",{"property":"og:description","content":"babel一词来自于希伯来语，直译为巴别塔 巴别塔象征的统一的国度、统一的语言 而今天的JS世界缺少一座巴别塔，不同版本的浏览器能识别的ES标准并不相同，就导致了开发者面对不同版本的浏览器要使用不同的语言，和古巴比伦一样，前端开发也面临着这样的困境。 babel的出现，就是用于解决这样的问题，它是一个编译器，可以把不同标准书写的语言，编译为统一的、能被..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T13:13:32.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-03-19T13:13:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"babel\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-19T13:13:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、babel的安装","slug":"一、babel的安装","link":"#一、babel的安装","children":[]},{"level":2,"title":"二、使用","slug":"二、使用","link":"#二、使用","children":[]},{"level":2,"title":"三、webpack 中使用 babel","slug":"三、webpack-中使用-babel","link":"#三、webpack-中使用-babel","children":[]},{"level":2,"title":"四、优化 babel-loader","slug":"四、优化-babel-loader","link":"#四、优化-babel-loader","children":[]}],"git":{"createdTime":1710854012000,"updatedTime":1710854012000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":1}]},"readingTime":{"minutes":5.21,"words":1562},"filePathRelative":"Efficiency/webpack/07_babel.md","localizedDate":"2024年3月19日","excerpt":"<p>babel一词来自于希伯来语，直译为巴别塔</p>\\n<figure><figcaption></figcaption></figure>\\n<p>巴别塔象征的统一的国度、统一的语言</p>\\n<p>而今天的JS世界缺少一座巴别塔，不同版本的浏览器能识别的ES标准并不相同，就导致了开发者面对不同版本的浏览器要使用不同的语言，和古巴比伦一样，前端开发也面临着这样的困境。</p>\\n<p>babel的出现，就是用于解决这样的问题，它是一个编译器，可以把不同标准书写的语言，编译为统一的、能被各种浏览器识别的语言</p>\\n<figure><figcaption></figcaption></figure>","autoDesc":true}');export{f as comp,j as data};
