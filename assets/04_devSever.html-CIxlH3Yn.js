import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-D5q1vSCD.js";const t={},p=e(`<h2 id="开发服务器" tabindex="-1"><a class="header-anchor" href="#开发服务器"><span>开发服务器</span></a></h2><p>在<strong>开发阶段</strong>，目前遇到的问题是打包、运行、调试过程过于繁琐，回顾一下我们的操作流程：</p><ol><li>编写代码</li><li>控制台运行命令完成打包</li><li>打开页面查看效果</li><li>继续编写代码，回到步骤2</li></ol><p>并且，我们往往希望把最终生成的代码和页面部署到服务器上，来模拟真实环境</p><p>为了解决这些问题，webpack官方制作了一个单独的库：<code>webpack-dev-server</code></p><p>首先需要在项目中安装 <code>webpack-dev-server</code>，安装命令为:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> webpack-dev-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来需要在 <code>webpack.config.js</code>进行如下常见的配置：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">devServer</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment">// 打包后是否自动打开</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8090</span><span class="token punctuation">,</span>     <span class="token comment">// 指定端口号</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>针对<code>webpack-dev-server</code>的配置，参考：https://www.webpackjs.com/configuration/dev-server/</p><p>在 <code>package.json</code> 中添加如下代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">//...其他配置</span>
    <span class="token string-property property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack-dev-server&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加之后我们就可以使用<code>npm start</code>来启动 <code>webpack-dev-server</code>。</p><p>最后需要提出需要注意的一点是，<code>webpack-dev-server</code> 是将资源打包至内存当中，所以可以很快的提供实时刷新功能。其实类似于就是我们之前使用的<code>nodemon</code>的功能，而且更加强大。</p><h2 id="跨域代理" tabindex="-1"><a class="header-anchor" href="#跨域代理"><span>跨域代理</span></a></h2><p>如果你有单独的后端开发服务器 API，并且希望在同域名下发送 API 请求 ，那么代理某些 URL 会很有用。</p><p><code>dev-server</code> 使用了非常强大的 <code>http-proxy-middleware</code> 包</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">devServer</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment">// 打包后是否自动打开</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8090</span><span class="token punctuation">,</span>     <span class="token comment">// 指定端口号</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;/api&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&quot;http://127.0.0.1:3001&quot;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">&quot;^/api&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前端访问代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;/api/user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> json <span class="token operator">=</span> <span class="token keyword">await</span> result<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),o=[p];function c(r,i){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","04_devSever.html.vue"]]),k=JSON.parse('{"path":"/Efficiency/webpack/04_devSever.html","title":"开发服务器","lang":"zh-CN","frontmatter":{"title":"开发服务器","order":4,"description":"开发服务器 在开发阶段，目前遇到的问题是打包、运行、调试过程过于繁琐，回顾一下我们的操作流程： 编写代码 控制台运行命令完成打包 打开页面查看效果 继续编写代码，回到步骤2 并且，我们往往希望把最终生成的代码和页面部署到服务器上，来模拟真实环境 为了解决这些问题，webpack官方制作了一个单独的库：webpack-dev-server 首先需要在项目...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/Efficiency/webpack/04_devSever.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"开发服务器"}],["meta",{"property":"og:description","content":"开发服务器 在开发阶段，目前遇到的问题是打包、运行、调试过程过于繁琐，回顾一下我们的操作流程： 编写代码 控制台运行命令完成打包 打开页面查看效果 继续编写代码，回到步骤2 并且，我们往往希望把最终生成的代码和页面部署到服务器上，来模拟真实环境 为了解决这些问题，webpack官方制作了一个单独的库：webpack-dev-server 首先需要在项目..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T13:13:32.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-03-19T13:13:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"开发服务器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-19T13:13:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"开发服务器","slug":"开发服务器","link":"#开发服务器","children":[]},{"level":2,"title":"跨域代理","slug":"跨域代理","link":"#跨域代理","children":[]}],"git":{"createdTime":1710854012000,"updatedTime":1710854012000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":1}]},"readingTime":{"minutes":1.47,"words":440},"filePathRelative":"Efficiency/webpack/04_devSever.md","localizedDate":"2024年3月19日","excerpt":"<h2>开发服务器</h2>\\n<p>在<strong>开发阶段</strong>，目前遇到的问题是打包、运行、调试过程过于繁琐，回顾一下我们的操作流程：</p>\\n<ol>\\n<li>编写代码</li>\\n<li>控制台运行命令完成打包</li>\\n<li>打开页面查看效果</li>\\n<li>继续编写代码，回到步骤2</li>\\n</ol>\\n<p>并且，我们往往希望把最终生成的代码和页面部署到服务器上，来模拟真实环境</p>\\n<p>为了解决这些问题，webpack官方制作了一个单独的库：<code>webpack-dev-server</code></p>\\n<p>首先需要在项目中安装 <code>webpack-dev-server</code>，安装命令为:</p>","autoDesc":true}');export{u as comp,k as data};
