import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as a,o as e}from"./app-C36VsSPQ.js";const n="/assets/16807652176140-tzYMpvGy.jpg",l="/assets/16807652417568-CltiS3ug.jpg",r="/assets/16807655888550-B29i79V5.jpg",p={};function o(h,i){return e(),t("div",null,i[0]||(i[0]=[a('<h1 id="加密" tabindex="-1"><a class="header-anchor" href="#加密"><span>加密</span></a></h1><h2 id="对称加密" tabindex="-1"><a class="header-anchor" href="#对称加密"><span>对称加密</span></a></h2><p>对称加密是使用相同的密钥来加密和解密数据。简单来说，对称加密是将明文数据使用密钥进行加密，得到密文数据，然后使用相同的密钥对密文数据进行解密，还原为明文数据。</p><p>举个例子，假设 Alice 想要向 Bob 发送一条加密消息。他们可以使用对称加密算法，例如 Advanced Encryption Standard (AES)，来保护消息的机密性。Alice 和 Bob 首先要协商一个密钥，然后 Alice 使用这个密钥将消息加密，并将密文发送给 Bob。Bob 使用相同的密钥对密文进行解密以获取原始的明文消息。</p><p>对称加密的优点是加密和解密速度非常快，适合用于大量数据的加密。然而，对称加密也有一个缺点，那就是密钥的管理问题。由于加密和解密使用相同的密钥，所以必须确保密钥不被泄露或被未经授权的人使用。</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>常见算法：</strong> DES、3DES、TDEA、Blowfish、RC5、IDEA <strong>优点：</strong> 加密、解密速度快，适合对大数据量进行加密 <strong>缺点：</strong> 在网络中需要分发密钥，增加了密钥被窃取的风险</p></blockquote><h2 id="非对称加密" tabindex="-1"><a class="header-anchor" href="#非对称加密"><span>非对称加密</span></a></h2><p>非对称加密与对称加密不同，它需要使用两个不同的密钥：<strong>公钥和私钥</strong>。公钥可以公开发布，任何人都可以获得，而私钥只有密钥持有者才能拥有。非对称加密通常用于保护通信的安全性，例如在网上进行购物、银行转账等操作时，就需要使用非对称加密来保证数据传输的安全性。</p><p>举个例子，假设小明想要给小红发送一封加密的消息。小明可以使用小红的公钥进行加密，然后将加密后的消息发送给小红。小红可以使用自己的私钥进行解密，从而获取原始消息。由于只有小红拥有私钥，因此只有小红能够解密消息，保证了消息传输的安全性。</p><p>另外，非对称加密还可以用于数字签名，数字签名是一种验证数据完整性和真实性的方法。数字签名使用私钥对数据进行签名，然后使用公钥进行验证，从而确保数据没有被篡改或伪造。</p><p>总的来说，非对称加密使用公钥和私钥进行加密和解密，可以保证数据传输的安全性和完整性，是网络通信中常用的加密方式。</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>常见算法：RSA、Rabin、DSA、ECC、Elgamal、D-H 优点：安全（私钥仅被一方保存，不用于网络传输）缺点：仅能一方进行解密</p></blockquote><h2 id="摘要-哈希-散列" tabindex="-1"><a class="header-anchor" href="#摘要-哈希-散列"><span>摘要/哈希/散列</span></a></h2><p>摘要、哈希和散列加密算法的具体实现方式因算法不同而异，但它们的基本原理都是将任意长度的数据转换为固定长度的输出数据。</p><ul><li><p><strong>MD5 摘要算法：</strong> MD5 算法将输入数据分成 512 位的块，然后对每个块进行处理，最终得到 128 位的摘要值。例如，对&quot;Hello World&quot;进行 MD5 摘要加密，得到的摘要值为 5eb63bbbe01eeed093cb22bb8f5acdc3。</p></li><li><p><strong>SHA-256 哈希算法：</strong> SHA-256 算法将输入数据分成 512 位的块，然后对每个块进行处理，最终得到 256 位的哈希值。例如，对&quot;Hello World&quot;进行 SHA-256 哈希加密，得到的哈希值为 b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9。</p></li><li><p><strong>散列算法：</strong> 散列算法将输入数据分成多个块，然后对每个块进行哈希计算。例如，SHA-256 算法可以使用散列算法来提高加密的强度和安全性。对于密码&quot;123456&quot;，可以使用散列算法将其转换为多个块，然后对每个块进行 SHA-256 哈希计算，最终得到的哈希值可以用于保护密码的存储。</p></li></ul><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>常见算法：MD4、MD5、SHA-1、SHA-256、SHA-512 优点：密文占用空间小（定长的短字符串）；难以被破解缺点：无法解密</p></blockquote><p><strong>MD5 加密使用：</strong></p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> md5</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> md5</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;md5&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> origin</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quod.&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> result</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> md5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">origin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div>`,22)]))}const k=s(p,[["render",o],["__file","加密.html.vue"]]),g=JSON.parse('{"path":"/browser_internet/network/cyber_security/%E5%8A%A0%E5%AF%86.html","title":"加密","lang":"zh-CN","frontmatter":{"order":1,"category":["前端"],"tag":["网络安全","加密"],"description":"加密 对称加密 对称加密是使用相同的密钥来加密和解密数据。简单来说，对称加密是将明文数据使用密钥进行加密，得到密文数据，然后使用相同的密钥对密文数据进行解密，还原为明文数据。 举个例子，假设 Alice 想要向 Bob 发送一条加密消息。他们可以使用对称加密算法，例如 Advanced Encryption Standard (AES)，来保护消息的机...","head":[["meta",{"property":"og:url","content":"https://github.com/browser_internet/network/cyber_security/%E5%8A%A0%E5%AF%86.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"加密"}],["meta",{"property":"og:description","content":"加密 对称加密 对称加密是使用相同的密钥来加密和解密数据。简单来说，对称加密是将明文数据使用密钥进行加密，得到密文数据，然后使用相同的密钥对密文数据进行解密，还原为明文数据。 举个例子，假设 Alice 想要向 Bob 发送一条加密消息。他们可以使用对称加密算法，例如 Advanced Encryption Standard (AES)，来保护消息的机..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-03T11:20:13.000Z"}],["meta",{"property":"article:tag","content":"网络安全"}],["meta",{"property":"article:tag","content":"加密"}],["meta",{"property":"article:modified_time","content":"2024-12-03T11:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"加密\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-03T11:20:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"对称加密","slug":"对称加密","link":"#对称加密","children":[]},{"level":2,"title":"非对称加密","slug":"非对称加密","link":"#非对称加密","children":[]},{"level":2,"title":"摘要/哈希/散列","slug":"摘要-哈希-散列","link":"#摘要-哈希-散列","children":[]}],"git":{"createdTime":1710854012000,"updatedTime":1733224813000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":3}]},"readingTime":{"minutes":3.66,"words":1098},"filePathRelative":"browser_internet/network/cyber_security/加密.md","localizedDate":"2024年3月19日","excerpt":"\\n<h2>对称加密</h2>\\n<p>对称加密是使用相同的密钥来加密和解密数据。简单来说，对称加密是将明文数据使用密钥进行加密，得到密文数据，然后使用相同的密钥对密文数据进行解密，还原为明文数据。</p>","autoDesc":true}');export{k as comp,g as data};
