import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as s,d as p,e as a}from"./app-BRsSGiWL.js";const i="/dcblog/assets/16468832378633-Cc9X_rSV.jpg",u="/dcblog/assets/16475080806288-B5zRMVhF.jpg",r={},d=a('<h2 id="一、模块化发展史" tabindex="-1"><a class="header-anchor" href="#一、模块化发展史"><span>一、模块化发展史</span></a></h2><h3 id="_1-第一阶段" tabindex="-1"><a class="header-anchor" href="#_1-第一阶段"><span>1. 第一阶段</span></a></h3><p>在 JavaScript 语言刚刚诞生的时候，它仅仅用于实现页面中的一些小效果。那个时候，一个页面所用到的 JS 可能只有区区几百行的代码。</p><p>在这种情况下，语言本身所存在的一些缺陷往往被大家有意的忽略，因为程序的规模实在太小，只要开发人员小心谨慎，往往不会造成什么问题。</p><p>在这个阶段，也不存在专业的前端工程师，由于前端要做的事情实在太少，因此这一部分工作往往由后端工程师顺带完成</p><p>第一阶段发生的大事件：</p><ul><li>1996年，NetScape将JavaScript语言提交给欧洲的一个标准制定阻止ECMA（欧洲计算机制造商协会）</li><li>1998年，NetScape在与微软浏览器IE的竞争中失利，宣布破产</li></ul><h3 id="_2-第二阶段" tabindex="-1"><a class="header-anchor" href="#_2-第二阶段"><span>2. 第二阶段</span></a></h3><p>ajax的出现，逐渐改变了 JavaScript 在浏览器中扮演的角色。现在，它不仅可以实现小的效果，还可以和服务器之间进行交互，以更好的体验来改变数据。JS代码的数量开始逐渐增长，从最初的几百行，到后来的几万行，前端程序逐渐变得复杂。后端开发者压力逐渐增加，致使一些公司开始招募专业的前端开发者。</p><p>但此时，前端开发者的待遇远不及后端开发者，因为前端开发者承担的开发任务相对于后端开发来说，还是比较简单的，通过短短一个月的时间集训，就可以成为满足前端开发的需要。</p><p>究其根本原因，是因为前端开发还有几个大的问题没有解决，这些问题都严重的制约了前端程序的规模进一步扩大：</p><ol><li><strong>浏览器解释执行JS的速度太慢</strong></li><li><strong>用户端的电脑配置不足</strong></li><li><strong>更多的代码带来了全局变量污染、依赖关系混乱等问题</strong></li></ol><p>上面三个问题，就像是阿喀琉斯之踵，成为前端开发挥之不去的阴影和原罪。在这个阶段，前端开发处在一个非常尴尬的境地，它在传统的开发模式和前后端分离之间无助的徘徊。</p><p>第二阶段的大事件：</p><ol><li>IE浏览器制霸市场后，几乎不再更新</li><li>ES4.0流产，导致JS语言10年间几乎毫无变化</li><li>2008年ES5发布，仅解决了一些 JS API 不足的糟糕局面</li></ol><h3 id="_3-第三阶段" tabindex="-1"><a class="header-anchor" href="#_3-第三阶段"><span>3. 第三阶段</span></a></h3><p>时间继续向前推移，到了2008年，谷歌的 V8 引擎发布，将JS的执行速度推上了一个新的台阶，甚至可以和后端语言媲美。摩尔定律持续发酵，个人电脑的配置开始飞跃，突然间，制约前端发展的两大问题得以解决，此时，只剩下最后一个问题还在负隅顽抗，即 <mark>全局变量污染和依赖混乱</mark> 的问题，解决了它，前端便可以突破一切障碍，未来无可限量。</p><p>于是，全世界的前端开发者在社区中激烈的讨论，想要为这个问题寻求解决之道......</p><p>2008年，有一个名叫 Ryan Dahl 小伙子正在为一件事焦头烂额，它需要在服务器端手写一个高性能的web服务，该服务对于性能要求之高，以至于目前市面上已有的web服务产品都满足不了需求。</p><p>经过分析，它确定，如果要实现高性能，那么必须要尽可能的减少线程，而要减少线程，避免不了要实用异步的处理方案。一开始，他打算自己实用C/C++语言来编写，可是这一过程实在太痛苦。</p><p>就在他一筹莫展的时候，谷歌 V8 引擎的发布引起了他的注意，他突然发现，JS不就是最好的实现web服务的语言吗？它天生就是单线程，并且是基于异步的！有了V8引擎的支撑，它的执行速度完全可以撑起一个服务器。而且V8是鼎鼎大名的谷歌公司发布的，谷歌一定会不断的优化V8，有这种又省钱又省力的好事，我干嘛还要自己去写呢？</p><p>于是，它基于开源的V8引擎，对源代码作了一些修改，便快速的完成了该项目。2009年，Ryan推出了该web服务项目，命名为nodejs。</p><p>从此，JS第一次堂堂正正的入主后端，不再是必须附属于浏览器的“玩具”语言了。也是从此刻开始，人们认识到，JS（ES）是一门真正的语言，它依附于运行环境（运行时）（宿主程序）而执行。</p><figure><img src="'+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>nodejs的诞生，便把JS中的最后一个问题放到了台前，即 <mark>全局变量污染和依赖混乱</mark> 问题。要知道，nodejs是服务器端，如果不解决这个问题，分模块开发就无从实现，而模块化开发是所有后端程序必不可少的内容。</p><p>经过社区的激烈讨论，最终，形成了一个模块化方案，即鼎鼎大名的 <mark>CommonJS</mark> ，该方案，彻底解决了全局变量污染和依赖混乱的问题。该方案一出，立即被nodejs支持，于是，nodejs成为了第一个为JS语言实现模块化的平台，为前端接下来的迅猛发展奠定了实践基础。</p><p>该阶段发生的大事件：</p><ul><li>2008年，V8发布</li><li>IE的市场逐步被 firefox 和 chrome 蚕食，现已无力回天</li><li>2009年，nodejs发布，并附带commonjs模块化标准</li></ul><h3 id="_4-第四阶段" tabindex="-1"><a class="header-anchor" href="#_4-第四阶段"><span>4. 第四阶段</span></a></h3><p>CommonJS的出现打开了前端开发者的思路，既然后端可以使用模块化的JS，作为JS语言的老东家浏览器为什么不行呢？于是，开始有人想办法把CommonJS运用到浏览器中，可是这里面存在诸多的困难。办法总比困难多，有些开发者就想，既然CommonJS运用到浏览器困难，我们干嘛不自己重新定一个模块化的标准出来，难道就一定要用CommonJS标准吗？</p><p>于是很快，AMD规范出炉，它解决的问题和CommonJS一样，但是可以更好的适应浏览器环境；相继的，CMD规范出炉，它对AMD规范进行了改进，这些行为，都受到了ECMA官方的密切关注......，2015年，ES6发布，它提出了官方的模块化解决方案 —— <mark>ES6 模块化</mark></p><p>从此以后，模块化成为了JS本身特有的性质，这门语言终于有了和其他语言较量的资本，成为了可以编写大型应用的正式语言。于此同时，很多开发者、技术厂商早已预见到JS的无穷潜力，于是有了下面的故事</p><ul><li>既然JS也能编写大型应用，那么自然也需要像其他语言那样有解决复杂问题的开发框架 <ul><li>Angular、React、Vue等前端开发框架出现</li><li>Express、Koa等后端开发框架出现</li><li>各种后端数据库驱动出现</li></ul></li><li>要开发大型应用，自然少不了各种实用的第三方库的支持 <ul><li>npm包管理器出现，实用第三方库变得极其方便</li><li>webpack等构建工具出现，专门用于打包和部署</li></ul></li><li>既然JS可以放到服务器环境，为什么不能放到其他终端环境呢？ <ul><li>Electron发布，可以使用JS语言开发桌面应用程序</li><li>RN和Vuex等技术发布，可以使用JS语言编写移动端应用程序</li><li>各种小程序出现，可以使用JS编写依附于其他应用的小程序</li><li>目前还有很多厂商致力于将JS应用到各种其他的终端设备，最终形成大前端生态</li></ul></li></ul><blockquote><p>可以看到，模块化的出现，是JS通向大型应用的基石，学习好模块化，变具备了编写大型应用的基本功。</p></blockquote><h2 id="二、之前的解决方案" tabindex="-1"><a class="header-anchor" href="#二、之前的解决方案"><span>二、之前的解决方案</span></a></h2><h3 id="_1-全局function模式" tabindex="-1"><a class="header-anchor" href="#_1-全局function模式"><span>1. 全局function模式</span></a></h3><p>module1.js</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//数据</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">&#39;atguigu.com&#39;</span>

<span class="token comment">//操作数据的函数</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">foo() </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">bar() </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>module2.js</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> data2 <span class="token operator">=</span> <span class="token string">&#39;other data&#39;</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//与另一个模块中的函数冲突了</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">foo() </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>test1.html</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module1.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module2.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">

  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">&quot;修改后的数据&quot;</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>全局函数模式: 将不同的功能封装成不同的全局函数</p><p>问题: Global被污染了, 很容易引起命名冲突</p></blockquote><h3 id="_2-namespace模式" tabindex="-1"><a class="header-anchor" href="#_2-namespace模式"><span>2. namespace模式</span></a></h3><p>module1.js</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myModule <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&#39;atguigu.com&#39;</span><span class="token punctuation">,</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">foo() </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">bar() </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>module2.js</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myModule2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&#39;atguigu.com2222&#39;</span><span class="token punctuation">,</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">foo() </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">bar() </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>test2.html</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module1.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module2.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  myModule<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  myModule<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  myModule2<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  myModule2<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  myModule<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token string">&#39;other data&#39;</span> <span class="token comment">//能直接修改模块内部的数据</span>
  myModule<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>namespace模式: 简单对象封装</p><p>作用: 减少了全局变量</p><p>问题: 不安全</p></blockquote><h3 id="_3-iife模式" tabindex="-1"><a class="header-anchor" href="#_3-iife模式"><span>3. IIFE模式</span></a></h3><p>module3.js</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">window</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//数据</span>
  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">&#39;atguigu.com&#39;</span>

  <span class="token comment">//操作数据的函数</span>
  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//用于暴露有函数</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">foo() </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//用于暴露有函数</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">bar() </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token function">otherFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//内部调用</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">otherFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//内部私有的函数</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;otherFun()&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//暴露行为</span>
  window<span class="token punctuation">.</span>myModule <span class="token operator">=</span> <span class="token punctuation">{</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>test3.html</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module3.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  myModule<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  myModule<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">//myModule.otherFun()  //myModule.otherFun is not a function</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myModule<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment">//undefined 不能访问模块内部数据</span>
  myModule<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token string">&#39;xxxx&#39;</span> <span class="token comment">//不是修改的模块内部的data</span>
  myModule<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//没有改变</span>

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>IIFE模式: 匿名函数自调用(闭包)</p><p>IIFE : immediately-invoked function expression(立即调用函数表达式)</p><p>作用: 数据是私有的, 外部只能通过暴露的方法操作</p><p>问题: 如果当前这个模块依赖另一个模块怎么办?</p></blockquote><h3 id="_4-iife模式增强" tabindex="-1"><a class="header-anchor" href="#_4-iife模式增强"><span>4. IIFE模式增强</span></a></h3><p>引入jquery到项目中</p><ul><li><p>module4.js</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">window<span class="token punctuation">,</span> $</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//数据</span>
  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">&#39;atguigu.com&#39;</span>

  <span class="token comment">//操作数据的函数</span>
  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//用于暴露有函数</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">foo() </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&#39;background&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//用于暴露有函数</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">bar() </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token function">otherFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//内部调用</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">otherFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//内部私有的函数</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;otherFun()&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//暴露行为</span>
  window<span class="token punctuation">.</span>myModule <span class="token operator">=</span> <span class="token punctuation">{</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> jQuery<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>test4.html</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jquery-1.10.1.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module4.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  myModule<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>IIFE模式增强 : 引入依赖</p><p><strong>这就是现代模块实现的基石</strong></p></blockquote></li></ul><h3 id="_5-页面加载多个js的问题" tabindex="-1"><a class="header-anchor" href="#_5-页面加载多个js的问题"><span>5. 页面加载多个js的问题</span></a></h3><p>页面:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module1.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module2.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module3.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module4.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>一个页面需要引入多个js文件</li><li>问题: <ul><li>请求过多</li><li>依赖模糊</li><li>难以维护</li></ul></li><li>这些问题可以通过现代模块化编码和项目构建来解决</li></ul><h2 id="三、commonjs" tabindex="-1"><a class="header-anchor" href="#三、commonjs"><span>三、CommonJS</span></a></h2><h3 id="_1-下载安装node-js" tabindex="-1"><a class="header-anchor" href="#_1-下载安装node-js"><span>1. 下载安装node.js</span></a></h3><h3 id="_2-创建项目结构" tabindex="-1"><a class="header-anchor" href="#_2-创建项目结构"><span>2. 创建项目结构</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>|-modules
   |-module1.js
   |-module2.js
   |-module3.js
|-app.js
|-package.json
   {
   	&quot;name&quot;: &quot;commonJS-node&quot;,
   	&quot;version&quot;: &quot;1.0.0&quot;
   }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-模块化编码" tabindex="-1"><a class="header-anchor" href="#_3-模块化编码"><span>3. 模块化编码</span></a></h3><p>module1.js</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;moudle1 foo()&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>module2.js</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;module2()&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>module3.js</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>exports<span class="token punctuation">.</span><span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;module3 foo()&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;module3 bar()&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>app.js</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
  1. 定义暴露模块:
    module.exports = value;
    exports.xxx = value;
  2. 引入模块:
    var module = require(模块名或模块路径);
 */</span>
<span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//引用模块</span>
<span class="token keyword">let</span> module1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./modules/module1&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> module2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./modules/module2&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> module3 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./modules/module3&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token comment">//使用模块</span>
module1<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">module2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
module3<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
module3<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;app.js&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-通过node运行app-js" tabindex="-1"><a class="header-anchor" href="#_4-通过node运行app-js"><span>4. 通过node运行app.js</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">node</span> app.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-commonjs的-工作原理" tabindex="-1"><a class="header-anchor" href="#_5-commonjs的-工作原理"><span>5. CommonJS的 工作原理</span></a></h3><p><strong>伪代码</strong></p>`,81),k=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"modulePath"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"//1,根据传递的模块路径，得到模块完整的绝对路径"),s(`
  `),n("span",{class:"token keyword"},"var"),s(" moduleId "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"getModuleId"),n("span",{class:"token punctuation"},"("),s("modulePath"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token comment"},"//2.判断缓存"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("cache"),n("span",{class:"token punctuation"},"["),s("moduleId"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" cache"),n("span",{class:"token punctuation"},"["),s("moduleId"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},"//3.真正运行模块代码的辅助函数"),s(`
  `),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"__require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("exports"),n("span",{class:"token punctuation"},","),s(" require"),n("span",{class:"token punctuation"},","),s(" module"),n("span",{class:"token punctuation"},","),s(" __filename"),n("span",{class:"token punctuation"},","),s(" __dirname")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"//目标模块的代码在这里"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},"//4.准备并运行铺助函数"),s(`
  `),n("span",{class:"token keyword"},"var"),s(" module "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token literal-property property"},"exports"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"var"),s(" exports "),n("span",{class:"token operator"},"="),s(" module"),n("span",{class:"token punctuation"},"."),s("exports"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token comment"},"//得到模块文件的绝对路径"),s(`
  `),n("span",{class:"token keyword"},"var"),s(" __filename "),n("span",{class:"token operator"},"="),s(" moduleId"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token comment"},"//得到模块所在目录的绝对路径"),s(`
  `),n("span",{class:"token keyword"},"var"),s(" __dirname "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"getDirname"),n("span",{class:"token punctuation"},"("),s("__filename"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token function"},"__require"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),s("exports"),n("span",{class:"token punctuation"},","),s(" exports"),n("span",{class:"token punctuation"},","),s(" require"),n("span",{class:"token punctuation"},","),s(" module"),n("span",{class:"token punctuation"},","),s(" __filename"),n("span",{class:"token punctuation"},","),s(" __dirname"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token comment"},"//5.缓存module.exports"),s(`
  cache`),n("span",{class:"token punctuation"},"["),s("moduleId"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" module"),n("span",{class:"token punctuation"},"."),s("exports"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token comment"},"//6.返回module.exports"),s(`
  `),n("span",{class:"token keyword"},"return"),s(" module"),n("span",{class:"token punctuation"},"."),s("exports"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),m=a('<ul><li>模块文件中的<code>this</code>指向<code>exports</code>，<code>exports</code>是<code>module.exports</code>的引用</li><li>最后返回的是<code>module.exports</code></li></ul><p>当使用<code>require(模块路径)</code>导入一个模块时，node会做以下两件事情（不考虑模块缓存）：</p><ol><li>通过模块路径找到本机文件，并读取文件内容</li><li>将文件中的代码放入到一个函数环境中执行，并将执行后<code>module.exports</code>的值作为<code>require</code>函数的返回结果</li></ol><p>正是这两个步骤，使得CommonJS在node端可以良好的被支持。可以认为，<mark>CommonJS是同步的</mark> ，必须要等到加载完文件并执行完代码后才能继续向后执行。</p><blockquote><p>当浏览器遇到<code>CommonJS</code></p></blockquote><p>当想要把<code>CommonJS</code>放到浏览器端时，就遇到了一些挑战</p><p>浏览器要加载JS文件，需要远程从服务器读取，而网络传输的效率远远低于node环境中读取本地文件的效率。由于<code>CommonJS</code>是同步的，这会极大的降低运行性能。</p><p>如果需要读取JS文件内容并把它放入到一个环境中执行，需要浏览器厂商的支持，可是浏览器厂商不愿意提供支持，最大的原因是<code>CommonJS</code>属于社区标准，并非官方标准。</p><blockquote><p>新的规范</p></blockquote><p>基于以上两点原因，浏览器无法支持模块化。可这并不代表模块化不能在浏览器中实现，要在浏览器中实现模块化，只要能解决上面的两个问题就行了。</p><p>解决办法其实很简单：</p><ol><li>远程加载JS浪费了时间？做成 <mark>异步</mark> 即可，加载完成后调用一个回调就行了</li><li>模块中的代码需要放置到函数中执行？编写模块时，直接放函数中就行了</li></ol><p>基于这种简单有效的思路，出现了AMD和CMD规范，有效的解决了浏览器模块化的问题。</p><h2 id="四、amd" tabindex="-1"><a class="header-anchor" href="#四、amd"><span>四、AMD</span></a></h2><h3 id="_1-下载require-js" tabindex="-1"><a class="header-anchor" href="#_1-下载require-js"><span>1. 下载require.js</span></a></h3>',15),v={href:"http://www.requirejs.cn/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/requirejs/requirejs",target:"_blank",rel:"noopener noreferrer"},b=n("li",null,[s("将require.js导入项目: "),n("code",null,"js/libs/require.js ")],-1),h=a(`<h3 id="_2-创建项目结构-1" tabindex="-1"><a class="header-anchor" href="#_2-创建项目结构-1"><span>2. 创建项目结构</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>|-js
|-libs
  |-require.js
|-modules
  |-alerter.js
  |-dataService.js
|-main.js
|-index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-定义模块代码" tabindex="-1"><a class="header-anchor" href="#_3-定义模块代码"><span>3. 定义模块代码</span></a></h3><p>dataService.js</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//没有依赖</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>

  <span class="token keyword">function</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> msg<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>getMsg<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>alerter.js</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//有依赖模块</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;dataService&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jquery&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dataService<span class="token punctuation">,</span> $</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;Tom2&#39;</span>

  <span class="token keyword">function</span> <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&#39;background&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;gray&#39;</span><span class="token punctuation">)</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>dataService<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;, &#39;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>showMsg<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-应用主入口-main-js" tabindex="-1"><a class="header-anchor" href="#_4-应用主入口-main-js"><span>4. 应用主入口-main.js</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//配置</span>
require<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">//基本路径</span>
  <span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token string">&quot;js/&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">//模块标识名与模块路径映射</span>
  <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;alerter&quot;</span><span class="token operator">:</span> <span class="token string">&quot;modules/alerter&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;dataService&quot;</span><span class="token operator">:</span> <span class="token string">&quot;modules/dataService&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//引入使用模块</span>
<span class="token function">require</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token string">&#39;alerter&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">alerter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  alerter<span class="token punctuation">.</span><span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-页面使用模块" tabindex="-1"><a class="header-anchor" href="#_5-页面使用模块"><span>5. 页面使用模块</span></a></h3><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">data-main</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js/main<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js/libs/require.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6-使用第三方基于require-js的框架-jquery" tabindex="-1"><a class="header-anchor" href="#_6-使用第三方基于require-js的框架-jquery"><span>6. 使用第三方基于require.js的框架(jquery)</span></a></h3><ul><li><p>将jquery的库文件导入到项目:</p><ul><li><code>js/libs/jquery-1.10.1.js</code></li></ul></li><li><p>在main.js中配置jquery路径</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;jquery&#39;</span><span class="token operator">:</span> <span class="token string">&#39;libs/jquery-1.10.1&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在alerter.js中使用jquery</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;dataService&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jquery&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dataService<span class="token punctuation">,</span> $</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;jack&#39;</span>
    <span class="token keyword">function</span> <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">background</span> <span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token function">alert</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&#39; &#39;</span><span class="token operator">+</span>dataService<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>showMsg<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="_7-使用第三方不基于require-js的框架-angular-angular-messages" tabindex="-1"><a class="header-anchor" href="#_7-使用第三方不基于require-js的框架-angular-angular-messages"><span>7. 使用第三方不基于require.js的框架(angular/angular-messages)</span></a></h3><ul><li><p>将angular.js和angular-messages.js导入项目</p><ul><li><code>js/libs/angular.js</code></li><li><code>js/libs/angular-messages.js</code></li></ul></li><li><p>在main.js中配置</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  require<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">//基本路径</span>
    <span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token string">&quot;js/&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">//模块标识名与模块路径映射</span>
    <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">//第三方库</span>
      <span class="token string-property property">&#39;jquery&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;libs/jquery-1.10.1&#39;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;angular&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;libs/angular&#39;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;angular-messages&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;libs/angular-messages&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">//自定义模块</span>
      <span class="token string-property property">&quot;alerter&quot;</span><span class="token operator">:</span> <span class="token string">&quot;modules/alerter&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;dataService&quot;</span><span class="token operator">:</span> <span class="token string">&quot;modules/dataService&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">/*
     配置不兼容AMD的模块
     exports : 指定导出的模块名
     deps  : 指定所有依赖的模块的数组
     */</span>
    <span class="token literal-property property">shim</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;angular&#39;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">exports</span> <span class="token operator">:</span> <span class="token string">&#39;angular&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;angular-messages&#39;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">exports</span> <span class="token operator">:</span> <span class="token string">&#39;angular-messages&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">deps</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;angular&#39;</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">//引入使用模块</span>
  <span class="token function">require</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token string">&#39;alerter&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;angular&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;angular-messages&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">alerter<span class="token punctuation">,</span> angular</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    alerter<span class="token punctuation">.</span><span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    angular<span class="token punctuation">.</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token string">&#39;myApp&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;ngMessages&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    angular<span class="token punctuation">.</span><span class="token function">bootstrap</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;myApp&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>页面:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myForm<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  用户名: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ng-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ng-required</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span> <span class="token attr-name">ng-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myForm.username.$dirty&amp;&amp;myForm.username.$invalid<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>用户名是必须的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="五、es6" tabindex="-1"><a class="header-anchor" href="#五、es6"><span>五、ES6</span></a></h2><p>ECMA组织参考了众多社区模块化标准，终于在2015年，随着ES6发布了官方的模块化标准，后成为ES6模块化</p><p>ES6模块化具有以下的特点</p><ol><li>使用依赖 <mark>预声明</mark> 的方式导入模块 <ol><li>依赖延迟声明 <ul><li>优点：某些时候可以提高效率</li><li>缺点：无法在一开始确定模块依赖关系（比较模糊）</li></ul></li><li>依赖预声明 <ul><li>优点：在一开始可以确定模块依赖关系</li><li>缺点：某些时候效率较低</li></ul></li></ol></li><li>灵活的多种导入导出方式</li><li>规范的路径表示法：所有路径必须以./或../开头</li></ol><h3 id="_1-模块的引入" tabindex="-1"><a class="header-anchor" href="#_1-模块的引入"><span>1. 模块的引入</span></a></h3><p><strong>注意：这一部分非模块化标准</strong></p><p>目前，浏览器使用以下方式引入一个ES6模块文件</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>入口文件<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>浏览器对于带有<code>type=&quot;module&quot;</code>的<code>&lt;script&gt;</code>，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，等同于打开了<code>&lt;script&gt;</code>标签的defer属性。</p><h3 id="_2-模块的基本导出和导入" tabindex="-1"><a class="header-anchor" href="#_2-模块的基本导出和导入"><span>2. 模块的基本导出和导入</span></a></h3><p>ES6中的模块导入导出分为两种：</p><ol><li>基本导入导出</li><li>默认导入导出</li></ol><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="基本导出" tabindex="-1"><a class="header-anchor" href="#基本导出"><span>基本导出</span></a></h4><p>类似于 <code>exports.xxx = xxxx</code>，基本导出可以有多个，每个必须有名称，基本导出的语法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> 声明表达式
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">//注意必须是一个声明表达式，下面的做法是错误的</span>
<span class="token comment">//var b = 1;</span>
<span class="token comment">//export b;  //由于不是声明表达式，直接导出b会错误</span>
<span class="token comment">//export 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span>具名符号<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>username<span class="token punctuation">,</span>age<span class="token punctuation">}</span> <span class="token comment">//注意这里的 {} 并不是指对象，而是具名导出的特殊语法</span>

<span class="token comment">// 其实具名导出，就相当于</span>
<span class="token comment">//export var username = &quot;abc&quot;;</span>
<span class="token comment">//export var age = 18;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于基本导出必须具有名称，所以要求导出内容必须跟上 <mark>声明表达式</mark> 或 <mark>具名符号</mark></p><h4 id="基本导入" tabindex="-1"><a class="header-anchor" href="#基本导入"><span>基本导入</span></a></h4><p>由于使用的是 <mark>依赖预加载</mark> ，简单来说浏览器 如果发现代码中有 <code>import</code>语句，会提前加载。因此，导入任何其他模块，导入代码必须放置到所有代码之前，对于基本导出，如果要进行导入，使用下面的代码</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>导入的符号列表<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;模块路径&quot;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意以下细节：</p><ul><li>导入时，可以通过关键字<code>as</code>对导入的符号进行重命名 <ul><li>比如 <code>import {name as username,age as age1} from &#39;模块路径&#39;</code></li></ul></li><li>导入时使用的符号是常量，不可修改 <ul><li>比如 <code>import {age} from &quot;模块路径&quot;</code> 然后再修改age的值的话，会报错，不允许修改模块中变量的值</li></ul></li><li>可以使用*号导入所有的基本导出，形成一个对象 <ul><li>比如 <code>import * as a from &quot;模块路径&quot;</code></li></ul></li></ul><h3 id="_3-默认导出" tabindex="-1"><a class="header-anchor" href="#_3-默认导出"><span>3. 默认导出</span></a></h3><p>每个模块，除了允许有多个基本导出之外，还允许有一个默认导出，默认导出类似于CommonJS中的<code>module.exports</code>，由于只有一个，因此无需具名，具体的语法是</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> 默认导出的数据
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span>默认导出的数据 <span class="token keyword">as</span> <span class="token keyword">default</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于每个模块仅允许有一个默认导出，因此，每个模块不能出现多个默认导出语句。</p><h3 id="_4-默认导入" tabindex="-1"><a class="header-anchor" href="#_4-默认导入"><span>4. 默认导入</span></a></h3><p>需要想要导入一个模块的默认导出，需要使用下面的语法</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> 接收变量名 <span class="token keyword">from</span> <span class="token string">&quot;模块路径&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类似于CommonJS中的</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> 接收变量名 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;模块路径&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于默认导入时变量名是自行定义的，因此没有别名一说，如果希望同时导入某个模块的默认导出和基本导出，可以使用下面的语法</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> 接收默认导出的变量<span class="token punctuation">,</span> <span class="token punctuation">{</span>接收基本导出的变量<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;模块路径&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注：如果使用*号，会将所有基本导出和默认导出聚合到一个对象中，默认导出会作为属性default存在</p>`,57);function j(f,q){const t=o("ExternalLinkIcon");return c(),l("div",null,[d,k,m,n("ul",null,[n("li",null,[s("官网: "),n("a",v,[s("http://www.requirejs.cn/"),p(t)])]),n("li",null,[s("github : "),n("a",g,[s("https://github.com/requirejs/requirejs"),p(t)])]),b]),h])}const _=e(r,[["render",j],["__file","02_module.html.vue"]]),w=JSON.parse('{"path":"/Efficiency/02_module.html","title":"模块化编程","lang":"zh-CN","frontmatter":{"title":"模块化编程","order":2,"icon":"module","description":"一、模块化发展史 1. 第一阶段 在 JavaScript 语言刚刚诞生的时候，它仅仅用于实现页面中的一些小效果。那个时候，一个页面所用到的 JS 可能只有区区几百行的代码。 在这种情况下，语言本身所存在的一些缺陷往往被大家有意的忽略，因为程序的规模实在太小，只要开发人员小心谨慎，往往不会造成什么问题。 在这个阶段，也不存在专业的前端工程师，由于前端要...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/Efficiency/02_module.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"模块化编程"}],["meta",{"property":"og:description","content":"一、模块化发展史 1. 第一阶段 在 JavaScript 语言刚刚诞生的时候，它仅仅用于实现页面中的一些小效果。那个时候，一个页面所用到的 JS 可能只有区区几百行的代码。 在这种情况下，语言本身所存在的一些缺陷往往被大家有意的忽略，因为程序的规模实在太小，只要开发人员小心谨慎，往往不会造成什么问题。 在这个阶段，也不存在专业的前端工程师，由于前端要..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T13:13:32.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-03-19T13:13:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"模块化编程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-19T13:13:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、模块化发展史","slug":"一、模块化发展史","link":"#一、模块化发展史","children":[{"level":3,"title":"1. 第一阶段","slug":"_1-第一阶段","link":"#_1-第一阶段","children":[]},{"level":3,"title":"2. 第二阶段","slug":"_2-第二阶段","link":"#_2-第二阶段","children":[]},{"level":3,"title":"3. 第三阶段","slug":"_3-第三阶段","link":"#_3-第三阶段","children":[]},{"level":3,"title":"4. 第四阶段","slug":"_4-第四阶段","link":"#_4-第四阶段","children":[]}]},{"level":2,"title":"二、之前的解决方案","slug":"二、之前的解决方案","link":"#二、之前的解决方案","children":[{"level":3,"title":"1. 全局function模式","slug":"_1-全局function模式","link":"#_1-全局function模式","children":[]},{"level":3,"title":"2. namespace模式","slug":"_2-namespace模式","link":"#_2-namespace模式","children":[]},{"level":3,"title":"3. IIFE模式","slug":"_3-iife模式","link":"#_3-iife模式","children":[]},{"level":3,"title":"4. IIFE模式增强","slug":"_4-iife模式增强","link":"#_4-iife模式增强","children":[]},{"level":3,"title":"5. 页面加载多个js的问题","slug":"_5-页面加载多个js的问题","link":"#_5-页面加载多个js的问题","children":[]}]},{"level":2,"title":"三、CommonJS","slug":"三、commonjs","link":"#三、commonjs","children":[{"level":3,"title":"1. 下载安装node.js","slug":"_1-下载安装node-js","link":"#_1-下载安装node-js","children":[]},{"level":3,"title":"2. 创建项目结构","slug":"_2-创建项目结构","link":"#_2-创建项目结构","children":[]},{"level":3,"title":"3. 模块化编码","slug":"_3-模块化编码","link":"#_3-模块化编码","children":[]},{"level":3,"title":"4. 通过node运行app.js","slug":"_4-通过node运行app-js","link":"#_4-通过node运行app-js","children":[]},{"level":3,"title":"5. CommonJS的 工作原理","slug":"_5-commonjs的-工作原理","link":"#_5-commonjs的-工作原理","children":[]}]},{"level":2,"title":"四、AMD","slug":"四、amd","link":"#四、amd","children":[{"level":3,"title":"1. 下载require.js","slug":"_1-下载require-js","link":"#_1-下载require-js","children":[]},{"level":3,"title":"2. 创建项目结构","slug":"_2-创建项目结构-1","link":"#_2-创建项目结构-1","children":[]},{"level":3,"title":"3. 定义模块代码","slug":"_3-定义模块代码","link":"#_3-定义模块代码","children":[]},{"level":3,"title":"4. 应用主入口-main.js","slug":"_4-应用主入口-main-js","link":"#_4-应用主入口-main-js","children":[]},{"level":3,"title":"5. 页面使用模块","slug":"_5-页面使用模块","link":"#_5-页面使用模块","children":[]},{"level":3,"title":"6. 使用第三方基于require.js的框架(jquery)","slug":"_6-使用第三方基于require-js的框架-jquery","link":"#_6-使用第三方基于require-js的框架-jquery","children":[]},{"level":3,"title":"7. 使用第三方不基于require.js的框架(angular/angular-messages)","slug":"_7-使用第三方不基于require-js的框架-angular-angular-messages","link":"#_7-使用第三方不基于require-js的框架-angular-angular-messages","children":[]}]},{"level":2,"title":"五、ES6","slug":"五、es6","link":"#五、es6","children":[{"level":3,"title":"1. 模块的引入","slug":"_1-模块的引入","link":"#_1-模块的引入","children":[]},{"level":3,"title":"2. 模块的基本导出和导入","slug":"_2-模块的基本导出和导入","link":"#_2-模块的基本导出和导入","children":[]},{"level":3,"title":"3. 默认导出","slug":"_3-默认导出","link":"#_3-默认导出","children":[]},{"level":3,"title":"4. 默认导入","slug":"_4-默认导入","link":"#_4-默认导入","children":[]}]}],"git":{"createdTime":1710854012000,"updatedTime":1710854012000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":1}]},"readingTime":{"minutes":16.51,"words":4952},"filePathRelative":"Efficiency/02_module.md","localizedDate":"2024年3月19日","excerpt":"<h2>一、模块化发展史</h2>\\n<h3>1. 第一阶段</h3>\\n<p>在 JavaScript 语言刚刚诞生的时候，它仅仅用于实现页面中的一些小效果。那个时候，一个页面所用到的 JS 可能只有区区几百行的代码。</p>\\n<p>在这种情况下，语言本身所存在的一些缺陷往往被大家有意的忽略，因为程序的规模实在太小，只要开发人员小心谨慎，往往不会造成什么问题。</p>\\n<p>在这个阶段，也不存在专业的前端工程师，由于前端要做的事情实在太少，因此这一部分工作往往由后端工程师顺带完成</p>\\n<p>第一阶段发生的大事件：</p>\\n<ul>\\n<li>1996年，NetScape将JavaScript语言提交给欧洲的一个标准制定阻止ECMA（欧洲计算机制造商协会）</li>\\n<li>1998年，NetScape在与微软浏览器IE的竞争中失利，宣布破产</li>\\n</ul>","autoDesc":true}');export{_ as comp,w as data};
