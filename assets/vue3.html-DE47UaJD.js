import{_ as o}from"./image-20230830171859963-B6FhjFnf.js";import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as c,c as i,a as s,b as a,d as e,r as u,e as p}from"./app--IULgkuy.js";const r="/dcblog/assets/icon-BSiV-LMt.png",d="/dcblog/assets/previous-BHqcEejF.png",k="/dcblog/assets/vite-CPg3ucZu.png",v="/dcblog/assets/image-20230830171539700-DGTfcqe5.png",m="/dcblog/assets/lifecycle-BV7UNyk7.png",g="/dcblog/assets/lifecycle.16e4c08e-MuZLBFAS.png",b="/dcblog/assets/prop-drilling-XJXa8UE-.png",h="/dcblog/assets/provide-inject-C0gAIfVn.png",f="/dcblog/assets/left-1-Bc7POHzi.gif",y="/dcblog/assets/right-1-zU5ReCiQ.gif",x="/dcblog/assets/left-2-CBJREwQP.gif",w="/dcblog/assets/right-2-DVUoamfD.gif",_={},j={href:"https://github.com/vuejs/vue-next/graphs/commit-activity",target:"_blank",rel:"noopener noreferrer"},V={href:"https://github.com/vuejs/rfcs/tree/master/active-rfcs",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/vuejs/vue-next/graphs/contributors",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/vuejs/vue-next/releases/tag/v3.0.0",target:"_blank",rel:"noopener noreferrer"},R={href:"https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create",target:"_blank",rel:"noopener noreferrer"},C={href:"https://v3.cn.vuejs.org/guide/installation.html#vite",target:"_blank",rel:"noopener noreferrer"},I={href:"https://vitejs.cn",target:"_blank",rel:"noopener noreferrer"},D={href:"https://v3.cn.vuejs.org/guide/composition-api-introduction.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy",target:"_blank",rel:"noopener noreferrer"},E={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect",target:"_blank",rel:"noopener noreferrer"};function T(N,n){const t=u("ExternalLinkIcon");return c(),i("div",null,[n[28]||(n[28]=s("p",null,[s("img",{src:r,alt:"",style:{width:"300px"}})],-1)),n[29]||(n[29]=s("h2",{id:"vue3简介",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#vue3简介"},[s("span",null,"Vue3简介")])],-1)),s("ul",null,[n[10]||(n[10]=s("li",null,"2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）",-1)),s("li",null,[n[4]||(n[4]=a("耗时2年多、")),s("a",j,[n[0]||(n[0]=a("2600+次提交")),e(t)]),n[5]||(n[5]=a("、")),s("a",V,[n[1]||(n[1]=a("30+个RFC")),e(t)]),n[6]||(n[6]=a("、")),s("a",P,[n[2]||(n[2]=a("600+次PR")),e(t)]),n[7]||(n[7]=a("、")),s("a",q,[n[3]||(n[3]=a("99位贡献者")),e(t)])]),s("li",null,[n[9]||(n[9]=a("github上的tags地址：")),s("a",A,[n[8]||(n[8]=a("https://github.com/vuejs/vue-next/releases/tag/v3.0.0")),e(t)])])]),n[30]||(n[30]=p('<h2 id="vue3带来了什么" tabindex="-1"><a class="header-anchor" href="#vue3带来了什么"><span>Vue3带来了什么</span></a></h2><h3 id="_1-性能的提升" tabindex="-1"><a class="header-anchor" href="#_1-性能的提升"><span>1.性能的提升</span></a></h3><ul><li><p>打包大小减少41%</p></li><li><p>初次渲染快55%, 更新渲染快133%</p></li><li><p>内存减少54%</p><p>......</p></li></ul><h3 id="_2-源码的升级" tabindex="-1"><a class="header-anchor" href="#_2-源码的升级"><span>2.源码的升级</span></a></h3><ul><li><p>使用Proxy代替defineProperty实现响应式</p></li><li><p>重写虚拟DOM的实现和Tree-Shaking</p><p>......</p></li></ul><h3 id="_3-拥抱typescript" tabindex="-1"><a class="header-anchor" href="#_3-拥抱typescript"><span>3.拥抱TypeScript</span></a></h3><ul><li>Vue3可以更好的支持TypeScript</li></ul><h3 id="_4-新的特性" tabindex="-1"><a class="header-anchor" href="#_4-新的特性"><span>4.新的特性</span></a></h3><ol><li><p>Composition API（组合API）</p><ul><li>setup配置</li><li>ref与reactive</li><li>watch与watchEffect</li><li>provide与inject</li><li>......</li></ul></li><li><p>新的内置组件</p><ul><li>Fragment</li><li>Teleport</li><li>Suspense</li></ul></li><li><p>其他改变</p><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除keyCode支持作为 v-on 的修饰符</li><li>......</li></ul></li></ol><h2 id="一、创建vue3-0工程" tabindex="-1"><a class="header-anchor" href="#一、创建vue3-0工程"><span>一、创建Vue3.0工程</span></a></h2><h3 id="_1-使用-vue-cli-创建" tabindex="-1"><a class="header-anchor" href="#_1-使用-vue-cli-创建"><span>1.使用 vue-cli 创建</span></a></h3>',11)),s("p",null,[n[12]||(n[12]=a("官方文档：")),s("a",R,[n[11]||(n[11]=a("https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create")),e(t)])]),n[31]||(n[31]=p(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span>
vue <span class="token parameter variable">--version</span>
<span class="token comment">## 安装或者升级你的@vue/cli</span>
<span class="token function">npm</span> i <span class="token parameter variable">-g</span> @vue/cli
<span class="token comment">## 创建</span>
vue create vue_test
<span class="token comment">## 启动</span>
<span class="token builtin class-name">cd</span> vue_test
<span class="token function">npm</span> run serve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-使用-vite-创建" tabindex="-1"><a class="header-anchor" href="#_2-使用-vite-创建"><span>2.使用 vite 创建</span></a></h3>`,2)),s("p",null,[n[14]||(n[14]=a("官方文档：")),s("a",C,[n[13]||(n[13]=a("https://v3.cn.vuejs.org/guide/installation.html#vite")),e(t)])]),s("p",null,[n[16]||(n[16]=a("vite官网：")),s("a",I,[n[15]||(n[15]=a("https://vitejs.cn")),e(t)])]),n[32]||(n[32]=p('<ul><li>什么是vite？—— 新一代前端构建工具。</li><li>优势如下： <ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li>传统构建 与 vite构建对比图</li></ul><figure><img src="'+d+'" alt="image-20230508115022383" tabindex="0" loading="lazy"><figcaption>image-20230508115022383</figcaption></figure><figure><img src="'+k+`" alt="image-20230508115106933" tabindex="0" loading="lazy"><figcaption>image-20230508115106933</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 创建工程</span>
<span class="token function">npm</span> create vite@latest
<span class="token comment">## 进入工程目录</span>
<span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>project-name<span class="token operator">&gt;</span>
<span class="token comment">## 安装依赖</span>
<span class="token function">npm</span> i
<span class="token comment">## 运行</span>
<span class="token function">npm</span> run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-vue3的main-js" tabindex="-1"><a class="header-anchor" href="#_3-vue3的main-js"><span>3. vue3的main.js</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//引入的不再是Vue构造函数了，引入的是一个名为createApp的工厂函数</span>
<span class="token comment">//且现在的语法与vue2不兼容，直接使用import vue from &#39;vue&#39;，vue为undefined</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>

<span class="token comment">//创建应用实例对象——app(类似于之前Vue2中的vm，但app比vm更“轻”)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>

<span class="token comment">//挂载</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>

<span class="token comment">//createApp(App).mount(&#39;#app&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、常用-composition-api" tabindex="-1"><a class="header-anchor" href="#二、常用-composition-api"><span>二、常用 Composition API</span></a></h2>`,7)),s("p",null,[n[18]||(n[18]=a("官方文档: ")),s("a",D,[n[17]||(n[17]=a("https://v3.cn.vuejs.org/guide/composition-api-introduction.html")),e(t)])]),n[33]||(n[33]=p(`<p><strong>VUE3</strong>和<strong>VUE2</strong>的不同点较多，相较于其他的一些小的改动，Vue3采用的<strong>组合式API(Composition API)</strong> 与Vue2采用的 <strong>选项式API(Options API)</strong> 应该是我们自己在编程的时候，体感变动最大的部分，也是需要我们主要适应的部分。</p><p>两种 API 风格都能够覆盖大部分的应用场景。它们只是同一个底层系统所提供的两套不同的接口。实际上，<strong>选项式 API</strong> 是在<strong>组合式 API</strong> 的基础上实现的！关于 Vue 的基础概念和知识在它们之间都是通用的。</p><p><strong>选项式 API 以“ <mark>组件实例</mark> ”的概念为中心</strong> ，对于有面向对象语言背景的用户来说，这通常与基于类的心智模型更为一致。同时，它将响应性相关的细节抽象出来，并强制按照选项来组织代码，从而对<strong>初学者而言更为友好</strong>。</p><p><strong>组合式 API 的核心思想</strong>是直接在函数作用域内定义响应式状态变量，并将从多个函数中得到的状态组合起来处理复杂问题。这种形式更加自由，也需要你对 Vue 的响应式系统有更深的理解才能高效使用。相应的，它的灵活性也使得组织和重用逻辑的模式变得更加强大。</p><p>简单一句话总结：旧的选项型API在代码里分割了不同的属性: data,computed属性,methods等等。新的合成型API能让我们用方法（function）来分割，相比于旧的API使用属性来分组，这样代码会更加简便和整洁。组合式API目的是为了解决 Vue2 中“<strong>数据和业务逻辑不分离</strong>”的问题</p><h3 id="_1-拉开序幕的setup" tabindex="-1"><a class="header-anchor" href="#_1-拉开序幕的setup"><span>1.拉开序幕的setup</span></a></h3><ol><li><p>理解：Vue3.0中一个新的配置项，值为一个函数。</p></li><li><p>setup是所有<strong style="color:#DD5145;">Composition API（组合API）</strong><i style="color:gray;font-weight:bold;">“ 表演的舞台 ”</i>。</p></li><li><p>组件中所用到的：数据、方法等等，均要配置在setup中。</p></li><li><p>setup函数的两种 <mark>返回值</mark> ：</p><ol><li><p>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//数据</span>
    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span>
    <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span>

    <span class="token comment">//方法</span>
    <span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，我</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁了，你好啊！</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sayHello<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//返回一个对象（常用）</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">,</span>
        age<span class="token punctuation">,</span>
        sayHello<span class="token punctuation">,</span>
        test2<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//返回一个函数（渲染函数）</span>
    <span class="token comment">// return ()=&gt; h(&#39;h1&#39;,&#39;Hello World&#39;)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><span style="color:#aad;">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></p><ul><li>不写<code>&lt;template&gt;</code>标签的时候，可以直接代码渲染</li></ul></li></ol></li><li><p>注意点：</p><ol><li>尽量不要与Vue2.x配置混用 <ul><li>Vue2.x配置（data、methos、computed...）中<strong style="color:#DD5145;">可以访问到</strong>setup中的属性、方法。</li><li>但在setup中<strong style="color:#DD5145;">不能访问到</strong>Vue2.x配置（data、methos、computed...）。</li><li>如果有重名, setup优先。</li></ul></li><li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li></ol></li><li><p><code>&lt;script setup&gt;</code></p><p>在 <code>setup()</code> 函数中手动暴露大量的状态和方法非常繁琐。幸运的是，我们可以通过使用构建工具来简化该操作。当使用单文件组件（SFC）时，我们可以使用 <code>&lt;script setup&gt;</code> 来大幅度地简化代码。</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  state<span class="token punctuation">.</span>count<span class="token operator">++</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    {{ state.count }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>&lt;script setup&gt;</code>中的顶层的导入和变量声明可在同一组件的模板中直接使用。你可以理解为模板中的表达式和 <code>&lt;script setup&gt;</code> 中的代码处在同一个作用域中。</li></ul></li></ol><h3 id="_2-ref函数" tabindex="-1"><a class="header-anchor" href="#_2-ref函数"><span>2.ref函数</span></a></h3><ul><li><p>作用: 定义一个响应式的数据</p></li><li><p>语法: <code>const xxx = ref(initValue)</code></p><ul><li><p>创建一个包含响应式数据的<strong style="color:#DD5145;">引用对象（reference对象，简称ref对象）</strong>。</p></li><li><p>JS中操作数据： <code>xxx.value</code></p></li><li><p>模板中读取数据: 不需要.value，直接：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{xxx}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>备注：</p><ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold;">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li></ul></li></ul><h3 id="_3-reactive函数" tabindex="-1"><a class="header-anchor" href="#_3-reactive函数"><span>3.reactive函数</span></a></h3><ul><li>作用: 定义一个<strong style="color:#DD5145;">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145;">代理对象（Proxy的实例对象，简称proxy对象）</strong></li><li>reactive定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//数据</span>
    <span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>
        <span class="token literal-property property">job</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;前端工程师&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">salary</span><span class="token operator">:</span><span class="token string">&#39;30K&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token punctuation">{</span>
                <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token punctuation">{</span>
                    <span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">666</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">hobby</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;抽烟&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;喝酒&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;烫头&#39;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">//方法</span>
    <span class="token keyword">function</span> <span class="token function">changeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span>
        person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">48</span>
        person<span class="token punctuation">.</span>job<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;UI设计师&#39;</span>
        person<span class="token punctuation">.</span>job<span class="token punctuation">.</span>salary <span class="token operator">=</span> <span class="token string">&#39;60K&#39;</span>
        person<span class="token punctuation">.</span>job<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">999</span>
        person<span class="token punctuation">.</span>hobby<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;学习&#39;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//返回一个对象</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        person<span class="token punctuation">,</span>
        changeInfo
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-vue3-0中的响应式原理" tabindex="-1"><a class="header-anchor" href="#_4-vue3-0中的响应式原理"><span>4.Vue3.0中的响应式原理</span></a></h3><h4 id="vue2-x的响应式" tabindex="-1"><a class="header-anchor" href="#vue2-x的响应式"><span>vue2.x的响应式</span></a></h4><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token function">set</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>存在问题：</p><ul><li>新增属性、删除属性, 界面不会更新。 <ul><li><code>$set()、$delete()</code></li></ul></li><li>直接通过下标修改数组, 界面不会自动更新。 <ul><li><code>.splice()</code></li></ul></li></ul></li></ul><h4 id="vue3-0的响应式" tabindex="-1"><a class="header-anchor" href="#vue3-0的响应式"><span>Vue3.0的响应式</span></a></h4>`,16)),s("ul",null,[s("li",null,[n[27]||(n[27]=a("实现原理: ")),s("ul",null,[n[25]||(n[25]=s("li",null,"通过Proxy（代理）: 拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。",-1)),n[26]||(n[26]=s("li",null,"通过Reflect（反射）: 对源对象的属性进行操作。",-1)),s("li",null,[n[24]||(n[24]=a("MDN文档中描述的Proxy与Reflect： ")),s("ul",null,[s("li",null,[s("p",null,[n[20]||(n[20]=a("Proxy：")),s("a",S,[n[19]||(n[19]=a("https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy")),e(t)])])]),s("li",null,[s("p",null,[n[22]||(n[22]=a("Reflect：")),s("a",E,[n[21]||(n[21]=a("https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect")),e(t)])]),n[23]||(n[23]=p(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token comment">// 拦截读取属性值</span>
    <span class="token function">get</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 拦截设置属性值或添加新属性</span>
    <span class="token function">set</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 拦截删除属性</span>
    <span class="token function">deleteProperty</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

proxy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;tom&#39;</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))])])])])])]),n[34]||(n[34]=p(`<h3 id="_5-reactive对比ref" tabindex="-1"><a class="header-anchor" href="#_5-reactive对比ref"><span>5.reactive对比ref</span></a></h3><ul><li>从定义数据角度对比： <ul><li>ref用来定义：<mark>基本类型数据</mark> 。</li><li>reactive用来定义：<mark>对象（或数组）类型数据</mark> 。</li><li>备注：ref也可以用来定义 <mark>对象（或数组）类型数据</mark> , 它内部会自动通过<code>reactive</code>转为 <mark>代理对象</mark> 。</li></ul></li><li>从原理角度对比： <ul><li>ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li>reactive通过使用 <mark>Proxy</mark> 来实现响应式（数据劫持）, 并通过 <mark>Reflect</mark> 操作 <mark>源对象</mark> 内部的数据。</li></ul></li><li>从使用角度对比： <ul><li>ref定义的数据：操作数据 <mark>需要</mark> <code>.value</code>，读取数据时模板中直接读取 <mark>不需要</mark> <code>.value</code>。</li><li>reactive定义的数据：操作数据与读取数据：<mark>均不需要</mark> <code>.value</code>。</li></ul></li></ul><h3 id="_6-setup的两个注意点" tabindex="-1"><a class="header-anchor" href="#_6-setup的两个注意点"><span>6.setup的两个注意点</span></a></h3><p>setup执行的时机</p><ul><li>在<code>beforeCreate</code>之前执行一次，this是<code>undefined</code>。</li></ul><p>setup的 <mark>参数</mark></p><ul><li><p><code>props</code>：值为对象，包含：组件外部传递过来，且 <mark>组件内部声明接收了</mark> 的属性。</p></li><li><p><code>context</code>：上下文对象</p><ul><li><p><code>attrs</code>: 值为对象，包含：组件外部传递过来，但 <mark>没有在props配置中声明</mark> 的属性, 相当于 <code>this.$attrs</code>。</p></li><li><p><code>slots</code>: 收到的插槽内容, 相当于 <code>this.$slots</code>。</p></li><li><p><code>emit</code>: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</p></li><li><p><code>expose</code>: 函数用于显式地限制该组件暴露出的属性。</p><ul><li><p>我们可以在父组件中引用子组件对象，而在子组件对象中的内容，应该都可以算作子组件的相关属性和函数。就应该能访问的到。但是出于安全性考虑，默认直接访问是关闭的，如果要访问，可以将子组件中想要被父组件访问的内容进行暴露就可以了。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span><span class="token punctuation">{</span>expose<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">let</span> username <span class="token operator">=</span> <span class="token string">&quot;rose&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">++</span>count<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token function-variable function">decrement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">--</span>count<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token function">expose</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        increment<span class="token punctuation">,</span>username
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>count<span class="token punctuation">,</span>username<span class="token punctuation">,</span>increment<span class="token punctuation">,</span>decrement<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ul><blockquote><p><strong>props</strong></p><p><code>defineProps</code> 是一个仅 <code>&lt;script setup&gt;</code> 中可用的编译宏命令，并不需要显式地导入。声明的 props 会自动暴露给模板。<code>defineProps</code> 会返回一个对象，其中包含了可以传递给组件的所有 props:</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- BlogPost.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>{{ title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>emit</strong></p><p>和 <code>defineProps</code> 类似，<code>defineEmits</code> 仅可用于 <code>&lt;script setup&gt;</code> 之中，并且不需要导入，它返回一个等同于 <code>$emit</code> 方法的 emit 函数。它可以被用于在组件的 <code>&lt;script setup&gt;</code> 中抛出事件，因为此处无法直接访问 <code>$emit</code>：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;enlarge-text&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;enlarge-text&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>attrs和slots</strong></p><p>而<code>attrs</code>和<code>slots</code>在 使用<code>&lt;script setup&gt;</code> 时，可以直接在模板中通过 <code>$slots</code> 和 <code>$attrs</code> 来访问，如果代码中需要，也可以使用 <code>useSlots</code> 和 <code>useAttrs</code> 两个辅助函数。</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> useSlots<span class="token punctuation">,</span> useAttrs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> slots <span class="token operator">=</span> <span class="token function">useSlots</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> attrs <span class="token operator">=</span> <span class="token function">useAttrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>expose</strong></p><p>可以通过 <code>defineExpose</code> 编译器宏来显式指定在 <code>&lt;script setup&gt;</code> 组件中要暴露出去的属性：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token function">defineExpose</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
a<span class="token punctuation">,</span>
b
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="_7-slot插槽" tabindex="-1"><a class="header-anchor" href="#_7-slot插槽"><span>7. slot插槽</span></a></h3><p>在<code>vue2</code>中我们有以下两种API访问父组件传递的插槽。</p><ul><li><code>vm.$slots</code>：用来访问父组件传递的 <mark>静态插槽</mark> ，包含对应插槽名称的vnode节点数组</li></ul><figure><img src="`+v+'" alt="image-20230830171539704" tabindex="0" loading="lazy"><figcaption>image-20230830171539704</figcaption></figure><ul><li><code>vm.$scopedSlots</code>：用来访问 <mark>作用域插槽</mark> ，包含一个返回相应 VNode 的函数。</li></ul><figure><img src="'+o+`" alt="image-20230830171859963" tabindex="0" loading="lazy"><figcaption>image-20230830171859963</figcaption></figure><blockquote><p><code>slots</code>是将父组件编译生成的插槽VNode，在渲染子组件时，放置到对应子组件渲染VNode树中。</p><p><code>scopedslots</code>是将父组件中插槽内容编译成一个 <mark>函数</mark> ，在渲染子组件时，传入子组件props（作为参数），生成对应的<code>VNode</code>。通过编译成函数，可以将父组件中定义的插槽内容作为动态的函数参数传递给子组件。子组件可以接收这个函数参数并在合适的时候执行它，生成相应的VNode。</p></blockquote><p>自2.6.0后，所有的 <code>$slots</code> 都会作为函数暴露在 <code>$scopedSlots</code> 中，所以上图中也包含了静态插槽pre；基于此，在vue3中将这两个API进行了统一，合并为：<code>$slots</code>。</p><h3 id="_8-计算属性与监视" tabindex="-1"><a class="header-anchor" href="#_8-计算属性与监视"><span>8.计算属性与监视</span></a></h3><h4 id="_1-computed函数" tabindex="-1"><a class="header-anchor" href="#_1-computed函数"><span>1.computed函数</span></a></h4><ul><li><p>与Vue2.x中computed配置功能一致</p></li><li><p>写法</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>computed<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">...</span>
	<span class="token comment">//计算属性——简写</span>
    <span class="token keyword">let</span> fullName <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> person<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>lastName
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">//计算属性——完整</span>
    <span class="token keyword">let</span> fullName <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> person<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>lastName
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">const</span> nameArr <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>
            person<span class="token punctuation">.</span>firstName <span class="token operator">=</span> nameArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            person<span class="token punctuation">.</span>lastName <span class="token operator">=</span> nameArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-watch函数" tabindex="-1"><a class="header-anchor" href="#_2-watch函数"><span>2.watch函数</span></a></h4><ul><li><p>与Vue2.x中watch配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li><li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//情况一：监视ref定义的响应式数据</span>
<span class="token function">watch</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sum变化了&#39;</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">immediate</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//情况二：监视多个ref定义的响应式数据</span>
<span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>sum<span class="token punctuation">,</span>msg<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sum或msg变化了&#39;</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> 

<span class="token comment">/* 情况三：监视reactive定义的响应式数据
			若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！
			若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 
*/</span>
<span class="token function">watch</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;person变化了&#39;</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">immediate</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">deep</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//此处的deep配置不再奏效</span>

<span class="token comment">//情况四：监视reactive定义的响应式数据中的某个属性</span>
<span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>person<span class="token punctuation">.</span>job<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;person的job变化了&#39;</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">immediate</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">deep</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span> 

<span class="token comment">//情况五：监视reactive定义的响应式数据中的某些属性</span>
<span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>person<span class="token punctuation">.</span>job<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>person<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;person的job变化了&#39;</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">immediate</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">deep</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//特殊情况</span>
<span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>person<span class="token punctuation">.</span>job<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;person的job变化了&#39;</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">deep</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_3-watcheffect函数" tabindex="-1"><a class="header-anchor" href="#_3-watcheffect函数"><span>3.watchEffect函数</span></a></h4><ul><li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p></li><li><p>watchEffect有点像computed：</p><ul><li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span>
<span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> x1 <span class="token operator">=</span> sum<span class="token punctuation">.</span>value
    <span class="token keyword">const</span> x2 <span class="token operator">=</span> person<span class="token punctuation">.</span>age
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;watchEffect配置的回调执行了&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>回调的触发时机</strong></p><p>当你更改了响应式状态，它可能会同时触发 Vue 组件更新和侦听器回调。</p><p>类似于组件更新，用户创建的侦听器回调函数也会被批量处理以避免重复调用。例如，如果我们同步将一千个项目推入被侦听的数组中，我们可能不希望侦听器触发一千次。</p><p>默认情况下，侦听器回调会在父组件更新 (如有) <strong>之后</strong>、所属组件的 DOM 更新<strong>之前</strong>被调用。这意味着如果你尝试在侦听器回调中访问所属组件的 DOM，那么 DOM 将处于更新前的状态。</p><p>如果想在侦听器回调中能访问被 Vue 更新<strong>之后</strong>的所属组件的 DOM，你需要指明 <code>flush: &#39;post&#39;</code> 选项：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">watch</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">flush</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">watchEffect</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">flush</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-ref属性的问题" tabindex="-1"><a class="header-anchor" href="#_4-ref属性的问题"><span>4. ref属性的问题</span></a></h4><p>众所周知，在vue2中，我们可以在一个dom元素上添加ref属性，然后通过组件实例的<code>$refs</code>访问到指定的这个dom元素从而进行一些dom操作。在vue3中已经取消了这个api，为了通过组合式 API 获得该模板引用，我们需要声明一个同名的 ref：</p><p><strong>字符串值</strong></p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token comment">// 声明一个 ref 来存放该元素的引用</span>
<span class="token comment">// 必须和模板里的 ref 同名</span>
<span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>

<span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  input<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>input<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>函数</strong></p><p>除了使用字符串值作名字，<code>ref</code> attribute 还可以绑定为一个函数，会在每次组件更新时都被调用。该函数会收到元素引用作为其第一个参数：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">:ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(el) =&gt; { /* 将 el 赋值给一个数据属性或 ref 变量 */ }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意我们这里需要使用动态的 <code>:ref</code> 绑定才能够传入一个函数。当绑定的元素被卸载时，函数也会被调用一次，此时的 <code>el</code> 参数会是 <code>null</code>。你当然也可以绑定一个组件方法而不是内联函数。</p><p><strong>组件</strong></p><p>模板引用也可以被用在一个子组件上。这种情况下引用中获得的值是组件实例：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">&#39;./Child.vue&#39;</span>

<span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>

<span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// child.value 是 &lt;Child /&gt; 组件的实例</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>child<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果一个子组件使用的是选项式 API 或没有使用 <code>&lt;script setup&gt;</code>，被引用的组件实例和该子组件的 <code>this</code> 完全一致，这意味着父组件对子组件的每一个属性和方法都有完全的访问权。这使得在父组件和子组件之间创建紧密耦合的实现细节变得很容易，当然也因此，应该只在绝对需要时才使用组件引用。大多数情况下，你应该首先使用标准的 props 和 emit 接口来实现父子组件交互。</p><p>有一个例外的情况，使用了 <code>&lt;script setup&gt;</code> 的组件是<strong>默认私有</strong>的：一个父组件无法访问到一个使用了 <code>&lt;script setup&gt;</code> 的子组件中的任何东西，除非子组件在其中通过 <code>defineExpose</code> 宏显式暴露：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token comment">// 像 defineExpose 这样的编译器宏不需要导入</span>
<span class="token function">defineExpose</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  a<span class="token punctuation">,</span>
  b
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当父组件通过模板引用获取到了该组件的实例时，得到的实例类型为 <code>{ a: number, b: number }</code> (ref 都会自动解包，和一般的实例一样)。</p><h3 id="_9-生命周期" tabindex="-1"><a class="header-anchor" href="#_9-生命周期"><span>9.生命周期</span></a></h3><p><strong>vue2.x生命周期</strong></p><p><img src="`+m+'" alt style="width:400px;"></p><p><strong>vue3.x生命周期</strong></p><p><img src="'+g+`" alt style="width:400px;"></p><ul><li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有两个被更名： <ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下： <ul><li><code>beforeCreate</code>===&gt;<code>setup()</code></li><li><code>created</code>===&gt;<code>setup()</code></li><li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li><li><code>mounted</code>===&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> ===&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code> ===&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> ===&gt;<code>onUnmounted</code></li></ul></li></ul><h3 id="_10-自定义hook函数" tabindex="-1"><a class="header-anchor" href="#_10-自定义hook函数"><span>10.自定义hook函数</span></a></h3><ul><li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p></li><li><p>类似于vue2.x中的<code>mixin</code>。</p></li><li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p></li></ul><blockquote><p>组合式函数相对于无渲染组件的主要优势是：组合式函数不会产生额外的组件实例开销。当在整个应用中使用时，由无渲染组件产生的额外组件实例会带来无法忽视的性能开销。</p><p>我们推荐在纯逻辑复用时使用组合式函数，在需要同时复用逻辑和视图布局时使用无渲染组件。</p></blockquote><h3 id="_11-toref" tabindex="-1"><a class="header-anchor" href="#_11-toref"><span>11.toRef</span></a></h3><ul><li><p>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</p></li><li><p>语法：<code>const name = toRef(person,&#39;name&#39;)</code></p></li><li><p>应用: 要将响应式对象中的某个属性单独提供给外部使用时。</p></li><li><p>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></p></li></ul><h2 id="三、其它-composition-api" tabindex="-1"><a class="header-anchor" href="#三、其它-composition-api"><span>三、其它 Composition API</span></a></h2><h3 id="_1-shallowreactive-与-shallowref" tabindex="-1"><a class="header-anchor" href="#_1-shallowreactive-与-shallowref"><span>1.shallowReactive 与 shallowRef</span></a></h3><ul><li><p><code>shallowReactive</code>：只处理对象最外层属性的响应式（浅响应式）。</p></li><li><p><code>shallowRef</code>：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p></li><li><p>什么时候使用?</p><ul><li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; <code>shallowReactive</code>。</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; <code>shallowRef</code>。</li></ul></li></ul><h3 id="_2-readonly-与-shallowreadonly" tabindex="-1"><a class="header-anchor" href="#_2-readonly-与-shallowreadonly"><span>2.readonly 与 shallowReadonly</span></a></h3><ul><li>readonly: 让一个响应式数据变为只读的（<mark>深只读</mark>）。</li><li>shallowReadonly：让一个响应式数据变为只读的（<mark>浅只读</mark>）。</li><li>应用场景: 不希望数据被修改时。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>person <span class="token operator">=</span>  <span class="token function">readonly</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>
sum <span class="token operator">=</span> <span class="token function">shallowReadonly</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-toraw-与-markraw" tabindex="-1"><a class="header-anchor" href="#_3-toraw-与-markraw"><span>3.toRaw 与 markRaw</span></a></h3><ul><li>toRaw： <ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange;">响应式对象</strong>转为<strong style="color:orange;">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw： <ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景: <ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h3 id="_4-customref" tabindex="-1"><a class="header-anchor" href="#_4-customref"><span>4.customRef</span></a></h3><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>keyword<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>{{keyword}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">,</span>customRef<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
	<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;Demo&#39;</span><span class="token punctuation">,</span>
		<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token comment">// let keyword = ref(&#39;hello&#39;) //使用Vue准备好的内置ref</span>
			<span class="token comment">//自定义一个myRef</span>
			<span class="token keyword">function</span> <span class="token function">myRef</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token keyword">let</span> timer
				<span class="token comment">//通过customRef去实现自定义</span>
				<span class="token keyword">return</span> <span class="token function">customRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">track<span class="token punctuation">,</span>trigger</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
					<span class="token keyword">return</span><span class="token punctuation">{</span>
						<span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
							<span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//告诉Vue这个value值是需要被“追踪”的</span>
							<span class="token keyword">return</span> value
						<span class="token punctuation">}</span><span class="token punctuation">,</span>
						<span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">{</span>
							<span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
							timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
								value <span class="token operator">=</span> newValue
								<span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//告诉Vue去更新界面</span>
							<span class="token punctuation">}</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">let</span> keyword <span class="token operator">=</span> <span class="token function">myRef</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">//使用程序员自定义的ref</span>
			<span class="token keyword">return</span> <span class="token punctuation">{</span>
				keyword
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_5-provide-与-inject" tabindex="-1"><a class="header-anchor" href="#_5-provide-与-inject"><span>5.provide 与 inject</span></a></h3><p><strong>prop 逐级透传</strong></p><figure><img src="`+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>provide和inject</strong></p><figure><img src="'+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>作用：实现<strong style="color:#DD5145;">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token operator">...</span><span class="token operator">...</span>
    <span class="token keyword">let</span> car <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;奔驰&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token string">&#39;40万&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;car&#39;</span><span class="token punctuation">,</span>car<span class="token punctuation">)</span>
    <span class="token operator">...</span><span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>后代组件中：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span>context</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token operator">...</span><span class="token operator">...</span>
    <span class="token keyword">const</span> car <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;car&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>car<span class="token punctuation">}</span>
	<span class="token operator">...</span><span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ul><h3 id="_6-响应式数据的判断" tabindex="-1"><a class="header-anchor" href="#_6-响应式数据的判断"><span>6.响应式数据的判断</span></a></h3><ul><li><code>isRef</code>: 检查一个值是否为一个 ref 对象</li><li><code>isReactive</code>: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li><code>isReadonly</code>: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li><code>isProxy</code>: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h2 id="四、composition-api-的优势" tabindex="-1"><a class="header-anchor" href="#四、composition-api-的优势"><span>四、Composition API 的优势</span></a></h2><h3 id="_1-options-api-存在的问题" tabindex="-1"><a class="header-anchor" href="#_1-options-api-存在的问题"><span>1.Options API 存在的问题</span></a></h3><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在<code>data</code>，<code>methods</code>，<code>computed</code>里修改 。</p><div style="overflow:hidden;"><div style="width:64%;height:370px;overflow:hidden;float:left;"><img src="`+f+'" alt style="width:600px;float:left;"></div><div style="width:32%;height:370px;overflow:hidden;float:right;"><img src="'+y+'" alt style="width:560px;"></div></div><h3 id="_2-composition-api-的优势" tabindex="-1"><a class="header-anchor" href="#_2-composition-api-的优势"><span>2.Composition API 的优势</span></a></h3><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><div style="overflow:hidden;"><div style="width:50%;height:340px;overflow:hidden;float:left;"><img src="'+x+'" style="height:360px;"></div><div style="width:49%;height:340px;overflow:hidden;float:right;"><img src="'+w+`" style="height:360px;"></div></div><h2 id="五、新的组件" tabindex="-1"><a class="header-anchor" href="#五、新的组件"><span>五、新的组件</span></a></h2><h3 id="_1-fragment" tabindex="-1"><a class="header-anchor" href="#_1-fragment"><span>1.Fragment</span></a></h3><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个<code>Fragment</code>虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h3 id="_2-teleport" tabindex="-1"><a class="header-anchor" href="#_2-teleport"><span>2.Teleport</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">TeleportProps</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * 必填项。指定目标容器。
   * 可以是选择器或实际元素。
   */</span>
  to<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> HTMLElement
  <span class="token doc-comment comment">/**
   * 当值为 \`true\` 时，内容将保留在其原始位置
   * 而不是移动到目标容器中。
   * 可以动态更改。
   */</span>
  disabled<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的 <mark>组件html结构</mark> 移动到指定位置的技术。</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>移动位置<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isShow<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mask<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dialog<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>我是一个弹窗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isShow = false<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>关闭弹窗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>teleport</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>移动位置处可以使用css选择器</li></ul></li><li><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#some-id<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.some-class<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[data-teleport]<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3-suspense" tabindex="-1"><a class="header-anchor" href="#_3-suspense"><span>3.Suspense</span></a></h3><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p><p>使用步骤：</p><ul><li><p>异步引入组件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>defineAsyncComponent<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./components/Child.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>我是App组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token punctuation">&gt;</span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span><span class="token punctuation">/&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>fallback</span><span class="token punctuation">&gt;</span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>加载中.....<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="六、其他" tabindex="-1"><a class="header-anchor" href="#六、其他"><span>六、其他</span></a></h2><h3 id="_1-全局api的转移" tabindex="-1"><a class="header-anchor" href="#_1-全局api的转移"><span>1.全局API的转移</span></a></h3><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//注册全局组件</span>
Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;MyButton&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;&lt;button @click=&quot;count++&quot;&gt;Clicked {{ count }} times.&lt;/button&gt;&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//注册全局指令</span>
Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;focus&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token parameter">el</span> <span class="token operator">=&gt;</span> el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>Vue3.0中对这些API做出了调整，将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><table><thead><tr><th>2.x 全局 API（<code>Vue</code>）</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><mark>移除</mark></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table><h3 id="_2-其他改变" tabindex="-1"><a class="header-anchor" href="#_2-其他改变"><span>2.其他改变</span></a></h3><p>data选项应始终被声明为一个函数。</p><p>过渡类名的更改：</p><ul><li><p>Vue2.x写法</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.v-enter,
.v-leave-to</span> <span class="token punctuation">{</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.v-leave,
.v-enter-to</span> <span class="token punctuation">{</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Vue3.x写法</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.v-enter-from,
.v-leave-to</span> <span class="token punctuation">{</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.v-leave-from,
.v-enter-to</span> <span class="token punctuation">{</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong style="color:#DD5145;">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145;">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span>
  <span class="token attr-name"><span class="token namespace">v-on:</span>close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleComponentEvent<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleNativeClickEvent<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>子组件中声明自定义事件</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">emits</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong style="color:#DD5145;">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li><li><p>关于<code>defineComponent</code></p><ul><li><p>这个函数，其实就是因为<code>Typescript</code>而存在的</p><blockquote><p>为了让 TypeScript 正确地推导出组件选项内的类型，我们需要通过 <code>defineComponent()</code> 这个全局 API 来定义组件</p></blockquote><p>带给我们唯一的好处就是，可以在编写组件的时候，<code>typescript</code>可以更加清楚的进行类型推断的提示，当然，现在我们使用的<strong>VS Code</strong>已经不需要纠结这个问题，只要你是TS的项目，写没写这个 <code>defineComponent</code>，<strong>VS Code</strong>都会帮我们提示。</p></li></ul></li></ul>`,100))])}const $=l(_,[["render",T],["__file","vue3.html.vue"]]),B=JSON.parse('{"path":"/basic_language/vue/vue3.html","title":"Vue3基础","lang":"zh-CN","frontmatter":{"title":"Vue3基础","icon":"vue","description":"Vue3简介 2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王） 耗时2年多、2600+次提交、30+个RFC、600+次PR、99位贡献者 github上的tags地址：https://github.com/vuejs/vue-next/releases/tag/v3.0.0 Vue3带来了什么 1.性能的提升 打包...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/basic_language/vue/vue3.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"Vue3基础"}],["meta",{"property":"og:description","content":"Vue3简介 2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王） 耗时2年多、2600+次提交、30+个RFC、600+次PR、99位贡献者 github上的tags地址：https://github.com/vuejs/vue-next/releases/tag/v3.0.0 Vue3带来了什么 1.性能的提升 打包..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T13:13:32.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-03-19T13:13:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue3基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-19T13:13:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"Vue3简介","slug":"vue3简介","link":"#vue3简介","children":[]},{"level":2,"title":"Vue3带来了什么","slug":"vue3带来了什么","link":"#vue3带来了什么","children":[{"level":3,"title":"1.性能的提升","slug":"_1-性能的提升","link":"#_1-性能的提升","children":[]},{"level":3,"title":"2.源码的升级","slug":"_2-源码的升级","link":"#_2-源码的升级","children":[]},{"level":3,"title":"3.拥抱TypeScript","slug":"_3-拥抱typescript","link":"#_3-拥抱typescript","children":[]},{"level":3,"title":"4.新的特性","slug":"_4-新的特性","link":"#_4-新的特性","children":[]}]},{"level":2,"title":"一、创建Vue3.0工程","slug":"一、创建vue3-0工程","link":"#一、创建vue3-0工程","children":[{"level":3,"title":"1.使用 vue-cli 创建","slug":"_1-使用-vue-cli-创建","link":"#_1-使用-vue-cli-创建","children":[]},{"level":3,"title":"2.使用 vite 创建","slug":"_2-使用-vite-创建","link":"#_2-使用-vite-创建","children":[]},{"level":3,"title":"3. vue3的main.js","slug":"_3-vue3的main-js","link":"#_3-vue3的main-js","children":[]}]},{"level":2,"title":"二、常用 Composition API","slug":"二、常用-composition-api","link":"#二、常用-composition-api","children":[{"level":3,"title":"1.拉开序幕的setup","slug":"_1-拉开序幕的setup","link":"#_1-拉开序幕的setup","children":[]},{"level":3,"title":"2.ref函数","slug":"_2-ref函数","link":"#_2-ref函数","children":[]},{"level":3,"title":"3.reactive函数","slug":"_3-reactive函数","link":"#_3-reactive函数","children":[]},{"level":3,"title":"4.Vue3.0中的响应式原理","slug":"_4-vue3-0中的响应式原理","link":"#_4-vue3-0中的响应式原理","children":[]},{"level":3,"title":"5.reactive对比ref","slug":"_5-reactive对比ref","link":"#_5-reactive对比ref","children":[]},{"level":3,"title":"6.setup的两个注意点","slug":"_6-setup的两个注意点","link":"#_6-setup的两个注意点","children":[]},{"level":3,"title":"7. slot插槽","slug":"_7-slot插槽","link":"#_7-slot插槽","children":[]},{"level":3,"title":"8.计算属性与监视","slug":"_8-计算属性与监视","link":"#_8-计算属性与监视","children":[]},{"level":3,"title":"9.生命周期","slug":"_9-生命周期","link":"#_9-生命周期","children":[]},{"level":3,"title":"10.自定义hook函数","slug":"_10-自定义hook函数","link":"#_10-自定义hook函数","children":[]},{"level":3,"title":"11.toRef","slug":"_11-toref","link":"#_11-toref","children":[]}]},{"level":2,"title":"三、其它 Composition API","slug":"三、其它-composition-api","link":"#三、其它-composition-api","children":[{"level":3,"title":"1.shallowReactive 与 shallowRef","slug":"_1-shallowreactive-与-shallowref","link":"#_1-shallowreactive-与-shallowref","children":[]},{"level":3,"title":"2.readonly 与 shallowReadonly","slug":"_2-readonly-与-shallowreadonly","link":"#_2-readonly-与-shallowreadonly","children":[]},{"level":3,"title":"3.toRaw 与 markRaw","slug":"_3-toraw-与-markraw","link":"#_3-toraw-与-markraw","children":[]},{"level":3,"title":"4.customRef","slug":"_4-customref","link":"#_4-customref","children":[]},{"level":3,"title":"5.provide 与 inject","slug":"_5-provide-与-inject","link":"#_5-provide-与-inject","children":[]},{"level":3,"title":"6.响应式数据的判断","slug":"_6-响应式数据的判断","link":"#_6-响应式数据的判断","children":[]}]},{"level":2,"title":"四、Composition API 的优势","slug":"四、composition-api-的优势","link":"#四、composition-api-的优势","children":[{"level":3,"title":"1.Options API 存在的问题","slug":"_1-options-api-存在的问题","link":"#_1-options-api-存在的问题","children":[]},{"level":3,"title":"2.Composition API 的优势","slug":"_2-composition-api-的优势","link":"#_2-composition-api-的优势","children":[]}]},{"level":2,"title":"五、新的组件","slug":"五、新的组件","link":"#五、新的组件","children":[{"level":3,"title":"1.Fragment","slug":"_1-fragment","link":"#_1-fragment","children":[]},{"level":3,"title":"2.Teleport","slug":"_2-teleport","link":"#_2-teleport","children":[]},{"level":3,"title":"3.Suspense","slug":"_3-suspense","link":"#_3-suspense","children":[]}]},{"level":2,"title":"六、其他","slug":"六、其他","link":"#六、其他","children":[{"level":3,"title":"1.全局API的转移","slug":"_1-全局api的转移","link":"#_1-全局api的转移","children":[]},{"level":3,"title":"2.其他改变","slug":"_2-其他改变","link":"#_2-其他改变","children":[]}]}],"git":{"createdTime":1710854012000,"updatedTime":1710854012000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":1}]},"readingTime":{"minutes":22.07,"words":6621},"filePathRelative":"basic_language/vue/vue3.md","localizedDate":"2024年3月19日","excerpt":"<p></p>\\n<h2>Vue3简介</h2>\\n<ul>\\n<li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li>\\n<li>耗时2年多、<a href=\\"https://github.com/vuejs/vue-next/graphs/commit-activity\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">2600+次提交</a>、<a href=\\"https://github.com/vuejs/rfcs/tree/master/active-rfcs\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">30+个RFC</a>、<a href=\\"https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">600+次PR</a>、<a href=\\"https://github.com/vuejs/vue-next/graphs/contributors\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">99位贡献者</a></li>\\n<li>github上的tags地址：<a href=\\"https://github.com/vuejs/vue-next/releases/tag/v3.0.0\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li>\\n</ul>","autoDesc":true}');export{$ as comp,B as data};
