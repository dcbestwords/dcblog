import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as a,o as e}from"./app-CBKt5lr9.js";const h="/assets/attributes-DXSW2LRY.png",l="/assets/property-1YRy04xl.png",p={};function k(n,i){return e(),t("div",null,i[0]||(i[0]=[a('<h2 id="一、定义" tabindex="-1"><a class="header-anchor" href="#一、定义"><span>一、定义</span></a></h2><h3 id="_1-attribute" tabindex="-1"><a class="header-anchor" href="#_1-attribute"><span>1. attribute</span></a></h3><p>html 标签的<strong>预定义</strong>和<strong>自定义属性</strong>我们统称为 attribute（html 概念）</p><blockquote><p>只要是 DOM 标签中出现的属性（html 代码），都是<strong>Attribute</strong></p></blockquote><figure><img src="'+h+'" alt="image-20221123100921950" tabindex="0" loading="lazy"><figcaption>image-20221123100921950</figcaption></figure><blockquote><p>有些常用特性（id、class、title 等预定义属性），会被转化为<strong>Property</strong>，而自定义的属性不会</p></blockquote><figure><img src="'+l+`" alt="image-20221123101054215" tabindex="0" loading="lazy"><figcaption>image-20221123101054215</figcaption></figure><ul><li>class 特性在变成属性时，名字会变成“className”</li></ul><p><mark>attribute 的值只能够是字符串</mark> ，使用 setAttribute 函数设置的值总是会被字符串化，例如：</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">el</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAttribute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;disabled&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 等同于</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">el</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAttribute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;disabled&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;false&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><hr><h3 id="_2-property" tabindex="-1"><a class="header-anchor" href="#_2-property"><span>2. property</span></a></h3><p>js 原生对象的直接属性，我们统称为<strong>property</strong>（js 概念）</p><ul><li><p>js 中 property 泛指对象的属性</p></li><li><p>attributes 是属于 property 的一个子集</p></li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> el</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">querySelector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;#my-input&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">el</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">xxx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><p>很多 HTML Attributes 在 DOM 对象上有与之同名的 DOM Propertiess，例如 id=&quot;my-input&quot; 对 应 el.id，type=&quot;text&quot; 对应 el.type，value=&quot;foo&quot; 对应 el.value 等。但 <mark>DOM Properties 与 HTML Attributes 的名字不总是一 模一样的</mark> ，例如：</p><div class="language-html" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;foo&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p>class=&quot;foo&quot; 对应的 DOM Properties 则是 el.className。另 外， <mark>并不是所有 HTML Attributes 都有与之对应的 DOM Properties</mark> ，例 如：</p><div class="language-html" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> aria-valuenow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;75&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p>aria-* 类的 HTML Attributes 就没有与之对应的 DOM Properties。</p><p>类似地，也不是所有 DOM Properties 都有与之对应的 HTML Attributes，例如可以用 el.textContent 来设置元素的文本内容， 但并没有与之对应的 HTML Attributes 来完成同样的工作。</p><blockquote><p>HTML Attributes 的值与 DOM Properties 的值之间是有关联的，大致可以认为：</p><ul><li>HTML Attributes 的作用是设置与之对应的 DOM Pr operties 的初始值</li></ul></blockquote><h2 id="二、布尔值属性与非布尔值属性" tabindex="-1"><a class="header-anchor" href="#二、布尔值属性与非布尔值属性"><span>二、布尔值属性与非布尔值属性</span></a></h2><p>property 的属性值为布尔类型的 我们统称为布尔值属性</p><p>property 的属性值为非布尔类型的 我们统称为非布尔值属性</p><h2 id="三、attribute-和-property-的同步关系-预定义属性" tabindex="-1"><a class="header-anchor" href="#三、attribute-和-property-的同步关系-预定义属性"><span>三、attribute 和 property 的同步关系（预定义属性）</span></a></h2><ol><li><p>非布尔值属性：实时同步</p></li><li><p>布尔值属性（true/false）</p><ul><li><p>property 永远都不会同步给 attribute</p></li><li><p>在没有动过 property 的情况下（保持默认状态），attribute 会同步给 property（只有初始时同步一次）</p></li><li><p>在动过 property 的情况下，attribute 不会同步给 property（此时浏览器页面不会同步对 attribute 的修改）</p></li></ul></li></ol><h2 id="四、操作对象" tabindex="-1"><a class="header-anchor" href="#四、操作对象"><span>四、操作对象</span></a></h2><p>用户操作的是 property（界面的交互）； 浏览器认的也是 property（只认）</p><h2 id="五、attribute-的一些方法" tabindex="-1"><a class="header-anchor" href="#五、attribute-的一些方法"><span>五、attribute 的一些方法</span></a></h2><ol><li>操作类名的添加、删除与切换</li></ol><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> testNode</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">querySelector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;#test&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//classList属于property</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">testNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">classList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;class4&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">testNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">classList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;class1&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">testNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">classList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toggle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;class2&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">testNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">classList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><ol start="2"><li>获取并修改自定义属性的值</li></ol><div class="language-html" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 在自定义属性的名字前加data-  --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;test&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> data-atguigu-qhf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;qhf&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> testNode</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">querySelector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;#test&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">testNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dataset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">atguiguQhf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//驼峰命名</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">testNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dataset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">atguiguQhf</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;111&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div><ol start="3"><li>使标签中的文本可编辑</li></ol><div class="language-html" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;test&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> contenteditable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;true&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;djhaldhaskj&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结"><span>六、总结</span></a></h2><p>布尔值属性最好使用 prop 方法非布尔值属性则使用 attr 方法</p>`,39)]))}const g=s(p,[["render",k],["__file","2_attribute_and_property.html.vue"]]),o=JSON.parse('{"path":"/basic_language/HTML/2_attribute_and_property.html","title":"attribute和property","lang":"zh-CN","frontmatter":{"title":"attribute和property","category":["前端"],"tag":["attribute"],"description":"一、定义 1. attribute html 标签的预定义和自定义属性我们统称为 attribute（html 概念） 只要是 DOM 标签中出现的属性（html 代码），都是Attribute image-20221123100921950image-20221123100921950 有些常用特性（id、class、title 等预定义属性），会被...","head":[["meta",{"property":"og:url","content":"https://github.com/basic_language/HTML/2_attribute_and_property.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"attribute和property"}],["meta",{"property":"og:description","content":"一、定义 1. attribute html 标签的预定义和自定义属性我们统称为 attribute（html 概念） 只要是 DOM 标签中出现的属性（html 代码），都是Attribute image-20221123100921950image-20221123100921950 有些常用特性（id、class、title 等预定义属性），会被..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-03T10:02:36.000Z"}],["meta",{"property":"article:tag","content":"attribute"}],["meta",{"property":"article:modified_time","content":"2024-12-03T10:02:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"attribute和property\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-03T10:02:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、定义","slug":"一、定义","link":"#一、定义","children":[{"level":3,"title":"1. attribute","slug":"_1-attribute","link":"#_1-attribute","children":[]},{"level":3,"title":"2. property","slug":"_2-property","link":"#_2-property","children":[]}]},{"level":2,"title":"二、布尔值属性与非布尔值属性","slug":"二、布尔值属性与非布尔值属性","link":"#二、布尔值属性与非布尔值属性","children":[]},{"level":2,"title":"三、attribute 和 property 的同步关系（预定义属性）","slug":"三、attribute-和-property-的同步关系-预定义属性","link":"#三、attribute-和-property-的同步关系-预定义属性","children":[]},{"level":2,"title":"四、操作对象","slug":"四、操作对象","link":"#四、操作对象","children":[]},{"level":2,"title":"五、attribute 的一些方法","slug":"五、attribute-的一些方法","link":"#五、attribute-的一些方法","children":[]},{"level":2,"title":"六、总结","slug":"六、总结","link":"#六、总结","children":[]}],"git":{"createdTime":1710854012000,"updatedTime":1733220156000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":4}]},"readingTime":{"minutes":2.4,"words":719},"filePathRelative":"basic_language/HTML/2_attribute_and_property.md","localizedDate":"2024年3月19日","excerpt":"<h2>一、定义</h2>\\n<h3>1. attribute</h3>\\n<p>html 标签的<strong>预定义</strong>和<strong>自定义属性</strong>我们统称为 attribute（html 概念）</p>","autoDesc":true}');export{g as comp,o as data};
