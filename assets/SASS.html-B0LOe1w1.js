import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c,a as s,b as l,d as i,e as n}from"./app-BPd7oWPf.js";const o={},u=n(`<h2 id="一、sass简介" tabindex="-1"><a class="header-anchor" href="#一、sass简介"><span>一、Sass简介</span></a></h2><p>Sass 又名 SCSS 是 CSS 预处理器之一，诞生于2007年,采用 Ruby 语言编写的一款 CSS 预处理语言。最初它是为了配合 HAML（一种缩进式 HTML 预编译器）而设计的，因此有着和 HTML 一样的缩进式风格。</p><p>Sass 和 SCSS 其实是同一种东西，我们平时都称之为 Sass，两者之间不同之处有以下两点：</p><ol><li>文件扩展名不同，Sass 是以“.sass”后缀为扩展名，而 SCSS 是以“.scss”后缀为扩展名</li><li>语法书写方式不同，Sass 是以严格的 <strong>缩进式</strong> 语法规则来书写，不带大括号 {} 和分号 ; ，而 SCSS 的语法书写和 CSS 语法书写方式类似。</li></ol><hr><h2 id="二、sass与css写法的差异" tabindex="-1"><a class="header-anchor" href="#二、sass与css写法的差异"><span>二、Sass与CSS写法的差异</span></a></h2><p>由于 Sass 是基于 Ruby 写出来的所以沿用了 Ruby 的书写规范，不带有大括号 &quot; {} &quot;和分号&quot; ; &quot;</p><p>CSS的写法：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">body</span><span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #f36<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sass的写法：</p><div class="language-sass line-numbers-mode" data-ext="sass" data-title="sass"><pre class="language-sass"><code><span class="token selector">body</span>
<span class="token property-line">  <span class="token property">color</span><span class="token punctuation">:</span> #fff</span>
<span class="token property-line">  <span class="token property">background</span><span class="token punctuation">:</span> #f36</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SCSS的写法：</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token selector">body</span><span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$white</span><span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token variable">$f36</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_1-sass语法格式" tabindex="-1"><a class="header-anchor" href="#_1-sass语法格式"><span>1. Sass语法格式</span></a></h3><p>这里说的 Sass 语法是 Sass 的最初语法格式，通过 tab 键控制缩进的一种语法规则，而且这种缩进要求非常严格。另外其不带有任何的分号和大括号。常常把这种格式称为 Sass 老版本，其文件名以“.sass”为扩展名。<br> 假设我们有一段这样的 CSS 代码：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">font</span><span class="token punctuation">:</span> 100% Helvetica<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sass写法</p><div class="language-sass line-numbers-mode" data-ext="sass" data-title="sass"><pre class="language-sass"><code><span class="token variable-line"><span class="token variable">$font-stack</span><span class="token punctuation">:</span> Helvetica, sans-serif</span>
<span class="token variable-line"><span class="token variable">$primary-color</span><span class="token punctuation">:</span> #333</span>
<span class="token selector">body</span>
<span class="token property-line">  <span class="token property">font</span><span class="token punctuation">:</span> 100<span class="token operator">%</span> <span class="token variable">$font-stack</span></span>
<span class="token property-line">  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$primary-color</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p style="color:red;">这种语法格式对于前端人员都不太容易接受，而且容易出错。</p><h3 id="_2-scss语法格式" tabindex="-1"><a class="header-anchor" href="#_2-scss语法格式"><span>2. SCSS语法格式</span></a></h3><p>SCSS 是 Sass 的新语法格式，从外形上来判断他和 CSS 长得几乎是一模一样，其文件名格式常常以“.scss”为扩展名。<br> 上面那段代码用SCSS写法：</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token property"><span class="token variable">$font-stack</span></span><span class="token punctuation">:</span> Helvetica<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>
<span class="token property"><span class="token variable">$primary-color</span></span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>
<span class="token selector">body </span><span class="token punctuation">{</span>
  <span class="token property">font</span><span class="token punctuation">:</span> 100% <span class="token variable">$font-stack</span><span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$primary-color</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 Sass 新的语法规则，而文件扩展名依旧使用的是“.sass”造成编译不出来。在此特别提醒：<span style="color:red;">“.sass”的格式只能使用 Sass 老语法规则（缩进规则），“.scss”使用的是 Sass 的新语法规则，也就是 SCSS 语法规则（类似 CSS 语法格式）。</span></p><hr><h2 id="三、变量" tabindex="-1"><a class="header-anchor" href="#三、变量"><span>三、变量</span></a></h2><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code>$变量名称<span class="token punctuation">:</span> 变量值；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-普通变量与默认变量" tabindex="-1"><a class="header-anchor" href="#_1-普通变量与默认变量"><span>1. 普通变量与默认变量</span></a></h3><p>普通变量定义后可以在全局范围内使用:</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token property"><span class="token variable">$fontSize</span></span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>
<span class="token selector">body</span><span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$fontSize</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认变量仅需在值后面加上 !default:</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token property"><span class="token variable">$baseLineHeight</span></span><span class="token punctuation">:</span>1.5 <span class="token statement keyword">!default</span><span class="token punctuation">;</span>
<span class="token selector">body</span><span class="token punctuation">{</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token variable">$baseLineHeight</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>sass 的默认变量一般是用来设置默认值，然后根据需求来覆盖的，覆盖的方式只需要在默认变量之前重新声明下变量即可。</p><h3 id="_2-变量的调用" tabindex="-1"><a class="header-anchor" href="#_2-变量的调用"><span>2. 变量的调用</span></a></h3>`,34),d={href:"http://www.imooc.com/code/6957",target:"_blank",rel:"noopener noreferrer"},r=n(`<p><strong>全局变量和局部变量</strong></p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token property"><span class="token variable">$color</span></span><span class="token punctuation">:</span> yellow <span class="token statement keyword">!default</span><span class="token punctuation">;</span> <span class="token comment">//定义全局变量</span>
<span class="token selector">.div1</span><span class="token punctuation">{</span>
	<span class="token property">color</span><span class="token punctuation">:</span><span class="token variable">$color</span><span class="token punctuation">;</span>	<span class="token comment">//调用全局变量</span>
<span class="token punctuation">}</span>
<span class="token selector">.div2</span><span class="token punctuation">{</span>
	<span class="token property"><span class="token variable">$color</span></span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>	<span class="token comment">//定义局部变量</span>
	<span class="token selector">p</span><span class="token punctuation">{</span>
		<span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$color</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>什么时候声明变量？</strong></p><p>建议创建变量只适用于感觉确有必要的情况下，不要为了某些骇客行为而声明新变量，基本上没有理由声明一个永远不需要更新或只在单一地方使用变量。只有满足下述标准时方可创建新变量：</p><ol><li>该值至少重复出现了2次；</li><li>该值至少可能被更新一次；</li><li>该值所有的表现都与变量有关。</li></ol><hr><h2 id="四、嵌套" tabindex="-1"><a class="header-anchor" href="#四、嵌套"><span>四、嵌套</span></a></h2><h3 id="属性嵌套" tabindex="-1"><a class="header-anchor" href="#属性嵌套"><span>属性嵌套</span></a></h3><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.box</span><span class="token punctuation">{</span>
	<span class="token property">border-top</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>
	<span class="token property">border-right</span><span class="token punctuation">:</span> 2px solid yellow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在SASS中的写法：</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token selector">.box</span><span class="token punctuation">{</span>
	<span class="token selector">border:</span><span class="token punctuation">{</span>
		<span class="token property">top</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>
		<span class="token property">right</span><span class="token punctuation">:</span> 2px solid yellow<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外还有伪类嵌套和选择器嵌套，因容易出错，所以不做讲解。</p><h2 id="五、混合宏-mixin" tabindex="-1"><a class="header-anchor" href="#五、混合宏-mixin"><span>五、混合宏 mixin</span></a></h2><p>在单独的属性需要统一处理时，变量是个不错的选择。但当你的样式变得越来越复杂，需要重复使用大段样式时混合宏就会变得很有意义。</p><h3 id="_1-声明混合宏" tabindex="-1"><a class="header-anchor" href="#_1-声明混合宏"><span>1. 声明混合宏</span></a></h3><p>不带参数的混合宏：</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token keyword">@mixin</span> <span class="token selector">border-radius</span><span class="token punctuation">{</span>
	<span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">@mixin</span> 是用来声明混合宏的关键词，border-radius 是混合宏的名称，花括号里的是复用的样式代码。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-调用混合宏" tabindex="-1"><a class="header-anchor" href="#_2-调用混合宏"><span>2. 调用混合宏</span></a></h3><p>使用@mixin声明了一个混合宏后，我们使用 @include 来调用声明好的混合宏：</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token keyword">@mixin</span> <span class="token selector">border-radius</span><span class="token punctuation">{</span>	<span class="token comment">//声明混合宏</span>
	<span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">button</span><span class="token punctuation">{</span>
	<span class="token keyword">@include</span> border-radius<span class="token punctuation">;</span>	<span class="token comment">//调用混合宏</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-混合宏的参数-传一个不带值的参数" tabindex="-1"><a class="header-anchor" href="#_3-混合宏的参数-传一个不带值的参数"><span>3. 混合宏的参数－传一个不带值的参数</span></a></h3><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token keyword">@mixin</span> <span class="token function">border-radius</span><span class="token punctuation">(</span><span class="token variable">$radius</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token variable">$radius</span><span class="token punctuation">;</span>		<span class="token comment">//在混合宏&quot;border-radius&quot;中定义了一个不带任何数值的参数&quot;$radius&quot;</span>
<span class="token punctuation">}</span>
<span class="token selector">.box</span><span class="token punctuation">{</span>
	<span class="token keyword">@include</span> <span class="token function">border-radius</span><span class="token punctuation">(</span>10px<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//在调用时候给这个混合宏传一个参数值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-混合宏的参数-传一个带值的参数" tabindex="-1"><a class="header-anchor" href="#_4-混合宏的参数-传一个带值的参数"><span>4. 混合宏的参数－传一个带值的参数</span></a></h3><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token keyword">@mixin</span> <span class="token function">border-radius</span><span class="token punctuation">(</span><span class="token property"><span class="token variable">$radius</span></span><span class="token punctuation">:</span>10px<span class="token punctuation">)</span><span class="token punctuation">{</span>	<span class="token comment">//给混合宏的参数传一个默认值；</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token variable">$radius</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//在调用时只需要调用默认的混合宏&quot;border-radius;&quot;</span>
<span class="token selector">button</span><span class="token punctuation">{</span>
	<span class="token keyword">@include</span> border-radius<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//但有时某些元素的值又不一样，那么可以这样写：</span>
<span class="token selector">button</span><span class="token punctuation">{</span>
	<span class="token keyword">@include</span> <span class="token function">border-radius</span><span class="token punctuation">(</span>50px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-混合宏的参数-传多个参数" tabindex="-1"><a class="header-anchor" href="#_5-混合宏的参数-传多个参数"><span>5. 混合宏的参数－传多个参数</span></a></h3><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token keyword">@mixin</span> <span class="token function">center</span><span class="token punctuation">(</span><span class="token variable">$width</span><span class="token punctuation">,</span><span class="token variable">$height</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token property">width</span><span class="token punctuation">:</span><span class="token variable">$width</span><span class="token punctuation">;</span>
	<span class="token property">height</span><span class="token punctuation">:</span><span class="token variable">$height</span><span class="token punctuation">;</span>
	<span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
	<span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token function">-</span><span class="token punctuation">(</span><span class="token variable">$height</span><span class="token punctuation">)</span>/2<span class="token punctuation">;</span>
	<span class="token property">margin-left</span><span class="token punctuation">:</span><span class="token function">-</span><span class="token punctuation">(</span><span class="token variable">$width</span><span class="token punctuation">)</span>/2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.centerBox</span><span class="token punctuation">{</span>
	<span class="token keyword">@include</span> <span class="token function">center</span><span class="token punctuation">(</span>500px<span class="token punctuation">,</span>250px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="六、扩展-继承" tabindex="-1"><a class="header-anchor" href="#六、扩展-继承"><span>六、扩展／继承</span></a></h2><p>SASS中，通过关键词&quot;<mark>@extend</mark>&quot;来继承已存在的类样式块。</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token selector">.button</span><span class="token punctuation">{</span>
	<span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>
	<span class="token property">padding</span><span class="token punctuation">:</span> 5px 10px<span class="token punctuation">;</span>
	<span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.buttonPrimary</span><span class="token punctuation">{</span>
	<span class="token property">background</span><span class="token punctuation">:</span> #f36<span class="token punctuation">;</span>
	<span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
	<span class="token keyword">@extend</span> .button<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.buttonSecond</span><span class="token punctuation">{</span>
	<span class="token property">background</span><span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span>
	<span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>
	<span class="token keyword">@extend</span> .button<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译以后：</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token selector">.button,.buttonPrimary,.buttonSecond</span><span class="token punctuation">{</span>	<span class="token comment">//在SASS中的继承可以继承类样式块中所有样式代码，并且编译出来会将选择器合并</span>
	<span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>
	<span class="token property">padding</span><span class="token punctuation">:</span> 5px 10px<span class="token punctuation">;</span>
	<span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.buttonPrimary</span><span class="token punctuation">{</span>
	<span class="token property">background</span><span class="token punctuation">:</span> #f36<span class="token punctuation">;</span>
	<span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.buttonSecond</span><span class="token punctuation">{</span>
	<span class="token property">background</span><span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span>
	<span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="七、占位符" tabindex="-1"><a class="header-anchor" href="#七、占位符"><span>七、占位符</span></a></h2><p><mark>%</mark>placeholder 声明的代码如果不被@extend调用的话，不会产生任何代码。取代从前CSS中的代码冗余的情形。</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token selector"><span class="token placeholder">%marginTop5</span></span><span class="token punctuation">{</span>
	<span class="token property">margin-top</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token placeholder">%paddingTop5</span></span><span class="token punctuation">{</span>
	<span class="token property">padding-top</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码没有被 @extend 调用，他并没有产生任何代码块，只是静静的躺在你的某个 SCSS 文件中。只有通过 @extend 调用才会产生代码：</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token selector"><span class="token placeholder">%marginTop5</span> </span><span class="token punctuation">{</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token placeholder">%paddingTop5</span></span><span class="token punctuation">{</span>
  <span class="token property">padding-top</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">button </span><span class="token punctuation">{</span>
  <span class="token keyword">@extend</span> <span class="token placeholder selector">%marginTop5</span><span class="token punctuation">;</span>
  <span class="token keyword">@extend</span> <span class="token placeholder selector">%paddingTop5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.content </span><span class="token punctuation">{</span>
  <span class="token keyword">@extend</span> <span class="token placeholder selector">%marginTop5</span><span class="token punctuation">;</span>
  <span class="token selector">span </span><span class="token punctuation">{</span>
    <span class="token keyword">@extend</span> <span class="token placeholder selector">%paddingTop5</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译出来的CSS：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">button, .content</span> <span class="token punctuation">{</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">button, .content span</span> <span class="token punctuation">{</span>
  <span class="token property">padding-top</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由以上代码可以看出，通过@entend调用的占位符编译出来的代码会将代码合并在一起，让代码变的更为干净易读。同时，也更突出了@extend的强大。</p><hr><h2 id="八、分析" tabindex="-1"><a class="header-anchor" href="#八、分析"><span>八、分析</span></a></h2><p>什么时候该用混合宏 @mixin、什么时候该用继承 @extend、什么时候该用占位符%呢？</p><p><span style="color:red;">混合宏的使用</span>：它不会自动合并相同的样式代码，如果在样式文件中调用同一个混合宏，会产生多个对应的样式代码，造成代码的冗余。不过他并不是一无事处，他可以<span style="color:red;">传参数</span>。如果你的代码块中涉及到变量，建议使用混合宏来创建相同的代码块。</p><p><span style="color:red;">继承</span>：使用继承后，编译出来的 CSS 会将使用继承的代码块合并到一起，通过组合选择器的方式展现，这样编译出来的代码相对于混合宏来说要干净易读。但是它<span style="color:red;">不能传变量参数</span>。如果你的代码块不需要传任何变量参数，而且有一个基类已在文件中存在，那么建议使用继承。</p><p><span style="color:red;">占位符</span>：使用占位符编译出来的 CSS 代码和使用继承基本上是相同的，只是不会在代码中生成占位符 marginTop 的选择器。那么占位符和继承的主要区别的，“<span style="color:red;">占位符是独立定义，不调用的时候是不会在 CSS 中产生任何代码；继承是首先有一个基类存在，不管调用与不调用，基类的样式都将会出现在编译出来的 CSS 代码中。</span>”</p><table><thead><tr><th></th><th>混合宏</th><th>继承</th><th>占位符</th></tr></thead><tbody><tr><td>声明方式</td><td>@mixin</td><td>.class</td><td>%placeholder</td></tr><tr><td>调用方式</td><td>@include</td><td>@extend</td><td>@extend</td></tr><tr><td>使用环境</td><td>相同代码块需要在不同环境传递不同值时，可通过混合宏定义重复使用的代码块。不足之处在于编译出来的CSS代码文件臃肿、代码冗余。</td><td>相同代码块不需要传递不同的值，并且此代码块已在Sass文件中定义，可通过Sass的继承来调用已存在的基类，会将调用相同基类的代码合并在一起。不足之处在于如果基类并不存在于HTML结构时，不管调用与否，在编译出的CSS中都将产生基类对应的样式代码。</td><td>与继承基本类似。不同之处在于相同代码块并没有在基类中存在，而是额外声明。如果不调用已声明的占位符，将不会产生任何样式代码，如果在不同选择器调用占位符，那么编译出的CSS代码将会把相同的代码合并在一起。</td></tr></tbody></table><hr><h2 id="九、注释" tabindex="-1"><a class="header-anchor" href="#九、注释"><span>九、注释</span></a></h2><ol><li><code>/**/</code>;</li><li><code>//</code></li></ol><p>两者的区别在于<code>/**/</code>的写法会在编译出来的CSS中显示，而<code>//</code>则不会。</p><hr><h2 id="十、sass对css扩展的功能" tabindex="-1"><a class="header-anchor" href="#十、sass对css扩展的功能"><span>十、Sass对CSS扩展的功能</span></a></h2><h3 id="_1-sassscript语法" tabindex="-1"><a class="header-anchor" href="#_1-sassscript语法"><span>1. SassScript语法</span></a></h3><p>在Sass中包含以下几种数据类型：</p><ol><li>数字：1、2、10px；</li><li>字符串：bar、&quot;for&quot;;</li><li>颜⾊：blue、#ccc、rgba();</li><li>布尔型：true、false;</li><li>空:null;</li><li>值列表：⽤空格或逗号分开：1.5em 1em、Helvetica,Arial,sans-serif；</li></ol><p>SassScript也支持其他CSS属性值，比如unicode范围，或!important声明。然⽽Sass⼀律将它们视为无引号字符串。</p><p>字符串</p><ul><li>有引号字符串</li><li>无引号字符串</li></ul><p>在编译CSS文件时不会改变其类型，除了使⽤ <mark>#{}</mark> 插值语句时，<mark>有引号字符串将被编译为无引号字符串</mark>,这样方便了在混合指令中选用选择器名。</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token keyword">@mixin</span> <span class="token function">firefox-message</span><span class="token punctuation">(</span><span class="token variable">$selector</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token selector">body.firefox <span class="token variable">#{$selector}</span>:before </span><span class="token punctuation">{</span>
 	<span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;Hi, Firefox users!&quot;</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">@include</span> <span class="token function">firefox-message</span><span class="token punctuation">(</span><span class="token string">&quot;.header&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>被编译为：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">body.firefox .header:before</span> <span class="token punctuation">{</span>
 <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;Hi, Firefox users!&quot;</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="十一、sass中指令的运用" tabindex="-1"><a class="header-anchor" href="#十一、sass中指令的运用"><span>十一、Sass中指令的运用</span></a></h2><p><strong>加法</strong></p><p>在变量或属性中，都可以做加法运算：</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token selector">.box</span><span class="token punctuation">{</span>
	<span class="token property">width</span><span class="token punctuation">:</span>20px+8in<span class="token punctuation">;</span>	<span class="token comment">//加号间不能有空格，绝对单位都能运算，em、rem等相对当前字体都不能运算。能换算的都会换算成px，不能换算的都会报错，有个例外就是不带单位就相当于0.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>减法</strong></p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token property"><span class="token variable">$full-width</span></span><span class="token punctuation">:</span> 960px<span class="token punctuation">;</span>
<span class="token property"><span class="token variable">$side-width</span></span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
<span class="token selector">.content</span><span class="token punctuation">{</span>
	<span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">$full-width</span> <span class="token operator">-</span> side-width<span class="token punctuation">;</span>	<span class="token comment">//减号间要有空格，以免被认作连字符</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>乘法</strong></p><p>乘法运算与加减法略有不同，当一个单位同时声明两个值时会有问题：</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token selector">.box</span><span class="token punctuation">{</span>
	<span class="token property">width</span><span class="token punctuation">:</span>10px*2px<span class="token punctuation">;</span>	<span class="token comment">//报错</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个值单位相同只需为一个数值提供单位：</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token selector">.box</span><span class="token punctuation">{</span>
	<span class="token property">width</span><span class="token punctuation">:</span>10px*2<span class="token punctuation">;</span>	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sass乘法运算与加减法一样，在运算中有不同类型的单位时也会报错。</p><p><strong>除法</strong></p><p>众所周知 &quot; / &quot; 符号在CSS中已经作为一种符号使用，因此在Sass中做除法时直接使用 &quot; / &quot;将不会生效，需要给运算的外面添加一个小括号：</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token selector">.box</span><span class="token punctuation">{</span>
	<span class="token property">width</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>100px/2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，在Sass除法运算中当用变量进行除法运算时 &quot; / &quot;会被识别成除法：</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token property"><span class="token variable">$width</span></span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token property"><span class="token variable">$nums</span></span><span class="token punctuation">:</span> 10<span class="token punctuation">;</span>
<span class="token selector">.item</span><span class="token punctuation">{</span>
	<span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">$width</span>/10<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.list</span><span class="token punctuation">{</span>
	<span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">$width</span>/<span class="token variable">$nums</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>综上所述，&quot; / &quot;被当作除法运算符时，有以下几种情况：</p><ul><li>如果数值或它的任意部分是存储在一个变量中或是函数的返回值。</li><li>如果数值被圆括号包围。</li><li>如果数值是另一个数学表达式的一部分。</li></ul><p>如下：</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token selector">p </span><span class="token punctuation">{</span>
  <span class="token property">font</span><span class="token punctuation">:</span> 10px/8px<span class="token punctuation">;</span>             <span class="token comment">// 纯 CSS，不是除法运算</span>
  <span class="token property"><span class="token variable">$width</span></span><span class="token punctuation">:</span> 1000px<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">$width</span>/2<span class="token punctuation">;</span>            <span class="token comment">// 使用了变量，是除法运算</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">round</span><span class="token punctuation">(</span>1.5<span class="token punctuation">)</span>/2<span class="token punctuation">;</span>        <span class="token comment">// 使用了函数，是除法运算</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>500px/2<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 使用了圆括号，是除法运算</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> 5px <span class="token operator">+</span> 8px/2px<span class="token punctuation">;</span> <span class="token comment">// 使用了加（+）号，是除法运算</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sass的除法运算还有一个情况。在乘法运算中，如果两个值带有相同单位，出来的结果并不是我们需要的结果。但在除法运算中，如果两个值带有相同的单位值时，会得到一个不带单位的数值：</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token selector">.box</span><span class="token punctuation">{</span>
	<span class="token property">width</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>100px/100px<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//得到width:10;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>变量计算</strong></p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token property"><span class="token variable">$content-width</span></span><span class="token punctuation">:</span> 720px<span class="token punctuation">;</span>
<span class="token property"><span class="token variable">$sidebar-width</span></span><span class="token punctuation">:</span> 220px<span class="token punctuation">;</span>
<span class="token property"><span class="token variable">$gutter</span></span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>

<span class="token selector">.container </span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">$content-width</span> <span class="token operator">+</span> <span class="token variable">$sidebar-width</span> <span class="token operator">+</span> <span class="token variable">$gutter</span><span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>数字运算</strong></p><p>利用括号可以进行数学中的运算法则：</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token selector">.box</span><span class="token punctuation">{</span>
	<span class="token property">width</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>220px <span class="token operator">+</span> 720px<span class="token punctuation">)</span> <span class="token operator">-</span> 11 <span class="token operator">*</span> 20 <span class="token punctuation">)</span> <span class="token operator">/</span> 12 <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>颜色运算</strong></p><p>所有算数运算都支持颜色值，并且是分段运算的，红、绿、蓝各颜色分段单独进行运算：</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token selector">p </span><span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #010203 <span class="token operator">+</span> #040506<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>计算公式为 01 + 04 = 05、02 + 05 = 07 和 03 + 06 = 09， 并且被合成为：color: #050709;</p><p>算数也能将数字和颜色值一起运算：</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token selector">p </span><span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #010203 <span class="token operator">*</span> 2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>计算公式为 01 * 2 = 02、02 * 2 = 04 和 03 * 2 = 06， 并且被合成为：color: #020406;</p><p><strong>字符运算</strong></p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token property"><span class="token variable">$content</span></span><span class="token punctuation">:</span> <span class="token string">&quot;Hello&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;Sass!&quot;</span><span class="token punctuation">;</span>
<span class="token selector">.box:before </span><span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot; #{$content}&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有引号的字符串被添加了一个没有引号的字符串 （也就是，带引号的字符串在 + 符号左侧）， 结果会是一个有引号的字符串。 同样的，如果一个没有引号的字符串被添加了一个有引号的字符串 （没有引号的字符串在 + 符号左侧）， 结果将是一个没有引号的字符串。 例如：</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token selector">p:before </span><span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;Foo &quot;</span> <span class="token operator">+</span> Bar<span class="token punctuation">;</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> sans- <span class="token operator">+</span> <span class="token string">&quot;serif&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译出CSS：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">p:before</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;Foo Bar&quot;</span><span class="token punctuation">;</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> sans-serif<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,106);function k(v,m){const a=t("ExternalLinkIcon");return p(),c("div",null,[u,s("p",null,[s("a",d,[l("变量的调用"),i(a)])]),r])}const g=e(o,[["render",k],["__file","SASS.html.vue"]]),S=JSON.parse('{"path":"/basic_language/preprocess/SASS.html","title":"sass 应用","lang":"zh-CN","frontmatter":{"title":"sass 应用","icon":"scss","description":"一、Sass简介 Sass 又名 SCSS 是 CSS 预处理器之一，诞生于2007年,采用 Ruby 语言编写的一款 CSS 预处理语言。最初它是为了配合 HAML（一种缩进式 HTML 预编译器）而设计的，因此有着和 HTML 一样的缩进式风格。 Sass 和 SCSS 其实是同一种东西，我们平时都称之为 Sass，两者之间不同之处有以下两点： 文...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/basic_language/preprocess/SASS.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"sass 应用"}],["meta",{"property":"og:description","content":"一、Sass简介 Sass 又名 SCSS 是 CSS 预处理器之一，诞生于2007年,采用 Ruby 语言编写的一款 CSS 预处理语言。最初它是为了配合 HAML（一种缩进式 HTML 预编译器）而设计的，因此有着和 HTML 一样的缩进式风格。 Sass 和 SCSS 其实是同一种东西，我们平时都称之为 Sass，两者之间不同之处有以下两点： 文..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T13:13:32.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-03-19T13:13:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"sass 应用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-19T13:13:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、Sass简介","slug":"一、sass简介","link":"#一、sass简介","children":[]},{"level":2,"title":"二、Sass与CSS写法的差异","slug":"二、sass与css写法的差异","link":"#二、sass与css写法的差异","children":[{"level":3,"title":"1. Sass语法格式","slug":"_1-sass语法格式","link":"#_1-sass语法格式","children":[]},{"level":3,"title":"2. SCSS语法格式","slug":"_2-scss语法格式","link":"#_2-scss语法格式","children":[]}]},{"level":2,"title":"三、变量","slug":"三、变量","link":"#三、变量","children":[{"level":3,"title":"1. 普通变量与默认变量","slug":"_1-普通变量与默认变量","link":"#_1-普通变量与默认变量","children":[]},{"level":3,"title":"2. 变量的调用","slug":"_2-变量的调用","link":"#_2-变量的调用","children":[]}]},{"level":2,"title":"四、嵌套","slug":"四、嵌套","link":"#四、嵌套","children":[{"level":3,"title":"属性嵌套","slug":"属性嵌套","link":"#属性嵌套","children":[]}]},{"level":2,"title":"五、混合宏 mixin","slug":"五、混合宏-mixin","link":"#五、混合宏-mixin","children":[{"level":3,"title":"1. 声明混合宏","slug":"_1-声明混合宏","link":"#_1-声明混合宏","children":[]},{"level":3,"title":"2. 调用混合宏","slug":"_2-调用混合宏","link":"#_2-调用混合宏","children":[]},{"level":3,"title":"3. 混合宏的参数－传一个不带值的参数","slug":"_3-混合宏的参数-传一个不带值的参数","link":"#_3-混合宏的参数-传一个不带值的参数","children":[]},{"level":3,"title":"4. 混合宏的参数－传一个带值的参数","slug":"_4-混合宏的参数-传一个带值的参数","link":"#_4-混合宏的参数-传一个带值的参数","children":[]},{"level":3,"title":"5. 混合宏的参数－传多个参数","slug":"_5-混合宏的参数-传多个参数","link":"#_5-混合宏的参数-传多个参数","children":[]}]},{"level":2,"title":"六、扩展／继承","slug":"六、扩展-继承","link":"#六、扩展-继承","children":[]},{"level":2,"title":"七、占位符","slug":"七、占位符","link":"#七、占位符","children":[]},{"level":2,"title":"八、分析","slug":"八、分析","link":"#八、分析","children":[]},{"level":2,"title":"九、注释","slug":"九、注释","link":"#九、注释","children":[]},{"level":2,"title":"十、Sass对CSS扩展的功能","slug":"十、sass对css扩展的功能","link":"#十、sass对css扩展的功能","children":[{"level":3,"title":"1. SassScript语法","slug":"_1-sassscript语法","link":"#_1-sassscript语法","children":[]}]},{"level":2,"title":"十一、Sass中指令的运用","slug":"十一、sass中指令的运用","link":"#十一、sass中指令的运用","children":[]}],"git":{"createdTime":1710854012000,"updatedTime":1710854012000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":1}]},"readingTime":{"minutes":11.32,"words":3395},"filePathRelative":"basic_language/preprocess/SASS.md","localizedDate":"2024年3月19日","excerpt":"<h2>一、Sass简介</h2>\\n<p>Sass 又名 SCSS 是 CSS 预处理器之一，诞生于2007年,采用 Ruby 语言编写的一款 CSS 预处理语言。最初它是为了配合 HAML（一种缩进式 HTML 预编译器）而设计的，因此有着和 HTML 一样的缩进式风格。</p>\\n<p>Sass 和 SCSS 其实是同一种东西，我们平时都称之为 Sass，两者之间不同之处有以下两点：</p>\\n<ol>\\n<li>文件扩展名不同，Sass 是以“.sass”后缀为扩展名，而 SCSS 是以“.scss”后缀为扩展名</li>\\n<li>语法书写方式不同，Sass 是以严格的 <strong>缩进式</strong> 语法规则来书写，不带大括号 {} 和分号 ; ，而 SCSS 的语法书写和 CSS 语法书写方式类似。</li>\\n</ol>","autoDesc":true}');export{g as comp,S as data};
