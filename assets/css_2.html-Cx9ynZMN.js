import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as c,c as r,a as e,b as l,d as a,e as n}from"./app-B-7e2hr5.js";const d="/dcblog/assets/box-model-DFEmraRP.png",s="/dcblog/assets/margin-block-C9x8atHI.png",p={},m=n('<hr><h2 id="一、-标准流-normal-flow" tabindex="-1"><a class="header-anchor" href="#一、-标准流-normal-flow"><span>一、 标准流（normal flow）</span></a></h2><p>在 CSS 中，&quot;normal flow&quot;（标准流）是指元素在文档中按照其出现的顺序自然排列的布局方式。它是 CSS 布局模型中的一种默认布局方式，也是大多数元素的默认行为。</p><p>在正常流布局中，元素按照其在 HTML 文档中的出现顺序从上到下排列，每个元素占据一定的空间。元素的位置由其前面的元素决定，可以通过调整元素的外边距、内边距、宽度、高度等属性来影响其布局位置。</p><blockquote><p><strong>包含块</strong>的概念</p><ul><li>每个盒子都有它的包含块，包含块决定了盒子的排列区域</li><li>绝大部分情况下：盒子的包含块，为其 <mark>父元素的内容盒</mark></li><li>当盒子开启 <mark>绝对定位</mark> 以后，它的包含块变为距它 <mark>最近的开启了定位的父元素</mark></li><li>当盒子开启 <mark>固定定位</mark> 时，它的包含块为 <mark>视口</mark></li></ul></blockquote><h3 id="_1-元素在标准流中的特点" tabindex="-1"><a class="header-anchor" href="#_1-元素在标准流中的特点"><span>1. 元素在标准流中的特点</span></a></h3><p><strong>块盒</strong>（block）</p><ul><li>块盒会在页面中 <mark>独占一行</mark> (自上向下垂直排列)</li><li>默认总宽度为 <mark>包含块的宽度</mark> （<code>width:auto</code>）</li><li>默认高度是被内容撑开（子元素）</li><li>内边距（padding）, 外边距（margin）和 边框（border）会将其他元素从当前盒子周围“推开”</li></ul><p><strong>行盒</strong>（inline）</p><ul><li>行盒 <mark>不会独占页面的一行</mark> ，只占自身的大小</li><li>行内元素在页面中自左向右水平排列，如果一行中不能容纳下所有的行内元素，则元素会换到第二行继续自左向右排列（与书写习惯一致）</li><li>行内元素的 <mark>默认宽度和高度都是被内容撑开， 宽高设置不生效</mark></li><li>垂直方向的内边距、外边距以及边框会被应用但是 <mark>不会</mark> 把其他处于 <code>inline</code> 状态的盒子推开。</li><li>水平方向的内边距、外边距以及边框会被应用且 <mark>会</mark> 把其他处于 <code>inline</code> 状态的盒子推开。</li></ul><p><strong>行块盒</strong>（inline-block）</p><ul><li><p>行盒特点</p><ul><li>行块盒 不会独占页面的一行</li><li>行块盒的默认宽度和高度都是<strong>被内容撑开</strong></li></ul></li><li><p>块盒特点</p><ul><li>可以设置宽高</li><li>内边距（padding）, 外边距（margin）和 边框（border）会将其他元素从当前盒子周围“推开”</li></ul></li></ul><h3 id="_2-元素脱离标准流的特点" tabindex="-1"><a class="header-anchor" href="#_2-元素脱离标准流的特点"><span>2. 元素脱离标准流的特点</span></a></h3><p>块盒：</p><ul><li><p>块盒不再独占页面的一行</p></li><li><p>脱离文档流以后，块盒的宽度和高度默认都被内容撑开</p></li></ul><p>行盒：</p><ul><li>行盒脱离文档流以后会变成块盒，特点和块盒一样</li></ul><p>脱离文档流以后，不需要再区分块和行内了，即两者皆具有如下特点：</p><ul><li>可以随意设置宽高，宽高默认由内容决定</li><li>大部分元素在脱标后都会转换成<code>block</code>类型，但元素脱离标准流之后不受其约束，不再给父元素汇报宽高数据，也就是不能将父元素撑开。</li></ul><hr><h2 id="二、-盒模型-box-model" tabindex="-1"><a class="header-anchor" href="#二、-盒模型-box-model"><span>二、 盒模型（box model）</span></a></h2><p>完整的 CSS 盒模型应用于块盒，行盒只使用盒模型中定义的部分内容。CSS将页面中的所有元素都设置为了一个矩形的盒子，将元素设置为矩形的盒子后，对页面的布局就变成将不同的盒子摆放到不同的位置，每一个盒子都由以下几个部分组成：</p><p>内容区（content）、内边距（padding）、边框（border）、外边距（margin）。</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption>盒模型</figcaption></figure><h3 id="_1-内容区-content" tabindex="-1"><a class="header-anchor" href="#_1-内容区-content"><span>1. 内容区（content）</span></a></h3><ul><li>元素中所有的子元素和文本内容都在内容区中排列</li><li>内容区的大小由<code>width</code> 和 <code>height</code>两个属性来设置</li><li><code>width</code> 设置内容区的宽度，<code>height</code> 设置内容区的高度</li></ul><blockquote><p><code>width</code>、包括下面的<code>padding</code>和<code>margin</code>的属性值可以设置为百分比形式</p><ul><li>以上所有的百分比都是相对于 <mark>包含块的宽度</mark> 进行设置的 (包括设置<code>padding-top</code>和<code>margin-top</code>)</li></ul><p><code>height</code>的百分比设置</p><ul><li>当包含块的高度设置为auto，即它的高度取决于子元素的高度，这时高度的百分比设置无效</li><li>当包含块的高度不依赖子元素的高度，则百分比设置相对于包含块的高度进行设置</li></ul></blockquote><h3 id="_2-边框-border" tabindex="-1"><a class="header-anchor" href="#_2-边框-border"><span>2. 边框（border）</span></a></h3><p>边框属于盒子边缘，边框里边属于盒子内部，出了边框则属于盒子的外部</p><ul><li><mark>边框的大小会影响到整个盒子的大小</mark></li></ul><p>要设置边框，需要至少设置三个样式：边框的宽度（border-width）、边框的颜色（border-color）、边框的样式 （border-style）。这三种样式都可以用来指定四个方向的边框：</p><ul><li>四个值：上 右 下 左(顺时针)</li><li>三个值：上 左右 下</li><li>两个值：上下 左右</li><li>一个值：上下左右</li></ul><p>当然一般我们也不会这么蛋疼，都是四个方向统一设置，故可以通过简写属性同时设置边框的所有相关样式，且没有顺序要求。</p><ul><li>eg：<code>border: 10px red solid;</code></li></ul><h3 id="_3-内边距-padding" tabindex="-1"><a class="header-anchor" href="#_3-内边距-padding"><span>3. 内边距（padding）</span></a></h3><p>内容区和边框之间的距离是内边距（不能为负），通常用于将内容推离边框</p><ul><li>一共有四个方向的内边距：<code>padding-top、padding-right、padding-bottom、padding-left</code></li><li><code>padding</code> 内边距的简写属性，可以同时指定四个方向的内边距，规则和<code>border-width</code> 一样</li><li><mark>内边距的设置会影响到盒子的大小</mark></li><li><mark>内容区的背景颜色会延伸到内边距上</mark></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>一个盒子可见框的大小，由<strong>内容区</strong>、<strong>内边距</strong>和<strong>边框</strong>共同决定，所以在计算盒子大小时，需要将这三个区域加到一起计算。</p></div><h3 id="_4-外边距-margin" tabindex="-1"><a class="header-anchor" href="#_4-外边距-margin"><span>4. 外边距（margin）</span></a></h3><p><mark>外边距不会影响盒子可见框的大小</mark>，但是会影响盒子的位置（把其他元素从盒子旁边推开）</p><ul><li>一共有四个方向的外边距：<code>margin-top、margin-right、margin-bottom、margin-left</code></li><li><code>margin</code>的简写属性， 可以同时设置四个方向的外边距 ，用法和<code>padding</code>一样</li></ul><p>元素在页面中是按照自左向右的顺序排列的，所以默认情况下如果我们设置的 <mark>左和上外边距则会移动元素自身，而设置下和右外边距会移动其他元素</mark> 。</p><p>除此之外margin还有两个简写属性<code>margin-block</code>和<code>margin-inline</code></p><ul><li><code>margin-block</code> 定义了元素的逻辑块首和块末外边距</li><li><code>margin-inline</code> 定义了元素的逻辑行首和行末外边距</li></ul><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.inline p</span> <span class="token punctuation">{</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">margin-inline</span><span class="token punctuation">:</span> 20px 40px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> tan<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.block p</span> <span class="token punctuation">{</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">margin-block</span><span class="token punctuation">:</span> 20px 40px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> tan<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.verticalExample</span> <span class="token punctuation">{</span>
    <span class="token property">writing-mode</span><span class="token punctuation">:</span> vertical-rl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>默认情况下设置<code>margin-right</code>不会产生任何效果( <mark>默认情况它总是被浏览器所修改的值</mark> )</p></div><h3 id="_5-盒子尺寸" tabindex="-1"><a class="header-anchor" href="#_5-盒子尺寸"><span>5. 盒子尺寸</span></a></h3><p>默认情况下，盒子可见框的大小由 <mark>内容区、内边距和边框</mark> 共同决定，我们可以使用<code>box-sizing</code> 来设置盒子尺寸的计算方式（设置width和height的作用）</p><ul><li><code>content-box</code> 默认值，宽度和高度用来设置 <mark>内容区</mark> 的大小</li><li><code>border-box</code> 宽度和高度用来设置 <mark>整个盒子可见框</mark> 的大小 <ul><li>此时<code>width</code>和 <code>height</code>指的是内容区、内边距和边框的总大小</li></ul></li></ul><h3 id="_6-盒模型的显示" tabindex="-1"><a class="header-anchor" href="#_6-盒模型的显示"><span>6. 盒模型的显示</span></a></h3><p><mark>display属性</mark> 用于设置元素显示的类型（<code>display: block;</code>），可以分为外部表现和内部表现，外部类型设置元素如何参与标准流布局；内部类型设置子元素的布局。</p><p>外部表现：</p><ul><li><code>inline</code> 将元素设置为行盒</li><li><code>block</code> 将元素设置为块盒</li></ul><blockquote><p>浏览器支持双值语法(css3)，当仅发现外部值时，例如当指定 <code>display: block</code> 或 <code>display: inline</code>，其将内部值设置为 <code>flow</code>。这种行为符合预期；例如，当指定一个元素是块盒后，一般来说我们期望该元素的内部元素参与正常的流布局。</p></blockquote><p>内部表现：</p>',56),u=n("<li><p><code>flow</code> 该元素使用流式布局（块和内联布局）来排布它的内容</p></li><li><p><code>flow-root</code> 该元素生成一个块级元素盒，其会建立一个新的BFC，定义格式化上下文的根元素。</p></li><li><p><code>inline-block</code> 将元素设置为行内块元素 （既可以设置宽度和高度又不会独占一行）</p></li><li><p><code>table</code> 该元素的行为类似于 HTML 中的<code>&lt;table&gt;</code>元素。它定义了一个块级别的盒子</p></li>",4),g=e("code",null,"flex",-1),k={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout",target:"_blank",rel:"noopener noreferrer"},h=e("code",null,"grid",-1),b={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_grid_layout/Basic_concepts_of_grid_layout",target:"_blank",rel:"noopener noreferrer"},_=n("<blockquote><p>当仅发现内部值时，例如当指定 <code>display: flex</code> 或 <code>display: grid</code>，其将外部值设置为 <code>block</code>。这种行为符合预期；例如，当指定一个元素是 <code>display: grid</code>，一般来说我们希望整个元素在标准流中表现为一个块盒</p></blockquote><p>基于css3的双值语法兼容性还存在问题，所以一般情况下我们使用css2中单关键字的预组合的语法：</p><ul><li><code>inline-block</code> 等同于 <code>inline flow-root</code> （所以这种方式可以为元素开启一个新的BFC）</li><li><code>inline-table</code> 等同于 <code>inline table</code></li><li><code>inline-flex</code> 等同于 <code>inline flex</code></li><li><code>inline-grid</code> 等同于 <code>inline grid</code></li></ul><p><code>none</code> 元素不在页面中显示， <mark>不占据页面位置</mark></p><p><mark>visibility</mark> ：显示或隐藏元素而不更改文档的布局（<code>visibility: hidden;</code>）</p><ul><li><code>visible</code> 默认值，元素在页面中正常显示</li><li><code>hidden</code> 元素在页面中隐藏不显示，但是 <mark>依然占据页面的位置</mark></li><li><code>collapse</code> 对于<code>&lt;table&gt;</code> 行、列、列组和行组，与 <code>display: none</code> 用于表格的行/列上的效果相当；对于其他元素，<code>collapse</code> 被视为与 <code>hidden</code> 相同</li></ul>",6);function v(f,x){const i=t("ExternalLinkIcon");return c(),r("div",null,[m,e("ul",null,[u,e("li",null,[e("p",null,[g,l(" 该元素的行为类似块级元素并且根据"),e("a",k,[l("弹性盒模型"),a(i)]),l("布局它的内容。")])]),e("li",null,[e("p",null,[h,l(" 该元素的行为类似块级元素并且根据"),e("a",b,[l("网格模型"),a(i)]),l("布局它的内容")])])]),_])}const w=o(p,[["render",v],["__file","css_2.html.vue"]]),C=JSON.parse('{"path":"/basic_language/CSS/css_2.html","title":"盒模型","lang":"zh-CN","frontmatter":{"title":"盒模型","icon":"box","order":2,"description":"css中的标准流和盒模型","category":["CSS"],"tag":["盒模型","文档流","display","visible"],"head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/basic_language/CSS/css_2.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"盒模型"}],["meta",{"property":"og:description","content":"css中的标准流和盒模型"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-20T08:14:58.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:tag","content":"盒模型"}],["meta",{"property":"article:tag","content":"文档流"}],["meta",{"property":"article:tag","content":"display"}],["meta",{"property":"article:tag","content":"visible"}],["meta",{"property":"article:modified_time","content":"2024-03-20T08:14:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"盒模型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-20T08:14:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、 标准流（normal flow）","slug":"一、-标准流-normal-flow","link":"#一、-标准流-normal-flow","children":[{"level":3,"title":"1. 元素在标准流中的特点","slug":"_1-元素在标准流中的特点","link":"#_1-元素在标准流中的特点","children":[]},{"level":3,"title":"2. 元素脱离标准流的特点","slug":"_2-元素脱离标准流的特点","link":"#_2-元素脱离标准流的特点","children":[]}]},{"level":2,"title":"二、 盒模型（box model）","slug":"二、-盒模型-box-model","link":"#二、-盒模型-box-model","children":[{"level":3,"title":"1. 内容区（content）","slug":"_1-内容区-content","link":"#_1-内容区-content","children":[]},{"level":3,"title":"2. 边框（border）","slug":"_2-边框-border","link":"#_2-边框-border","children":[]},{"level":3,"title":"3. 内边距（padding）","slug":"_3-内边距-padding","link":"#_3-内边距-padding","children":[]},{"level":3,"title":"4. 外边距（margin）","slug":"_4-外边距-margin","link":"#_4-外边距-margin","children":[]},{"level":3,"title":"5. 盒子尺寸","slug":"_5-盒子尺寸","link":"#_5-盒子尺寸","children":[]},{"level":3,"title":"6. 盒模型的显示","slug":"_6-盒模型的显示","link":"#_6-盒模型的显示","children":[]}]}],"git":{"createdTime":1710854012000,"updatedTime":1710922498000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":2}]},"readingTime":{"minutes":8.29,"words":2487},"filePathRelative":"basic_language/CSS/css_2.md","localizedDate":"2024年3月19日","excerpt":"<hr>\\n<h2>一、 标准流（normal flow）</h2>\\n<p>在 CSS 中，\\"normal flow\\"（标准流）是指元素在文档中按照其出现的顺序自然排列的布局方式。它是 CSS 布局模型中的一种默认布局方式，也是大多数元素的默认行为。</p>\\n<p>在正常流布局中，元素按照其在 HTML 文档中的出现顺序从上到下排列，每个元素占据一定的空间。元素的位置由其前面的元素决定，可以通过调整元素的外边距、内边距、宽度、高度等属性来影响其布局位置。</p>\\n<blockquote>\\n<p><strong>包含块</strong>的概念</p>\\n<ul>\\n<li>每个盒子都有它的包含块，包含块决定了盒子的排列区域</li>\\n<li>绝大部分情况下：盒子的包含块，为其 <mark>父元素的内容盒</mark></li>\\n<li>当盒子开启 <mark>绝对定位</mark> 以后，它的包含块变为距它 <mark>最近的开启了定位的父元素</mark></li>\\n<li>当盒子开启 <mark>固定定位</mark> 时，它的包含块为 <mark>视口</mark></li>\\n</ul>\\n</blockquote>"}');export{w as comp,C as data};
