import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as l,o as n}from"./app-CX0dsXe3.js";const e="/dcblog/assets/export-CysK3p9v.jpg",t="/dcblog/assets/module-Sh-PGa6X.jpg",h={};function k(p,i){return n(),a("div",null,i[0]||(i[0]=[l(`<h1 id="node-js-模块化" tabindex="-1"><a class="header-anchor" href="#node-js-模块化"><span>Node.js 模块化</span></a></h1><h2 id="一、介绍" tabindex="-1"><a class="header-anchor" href="#一、介绍"><span>一、介绍</span></a></h2><h3 id="_1-什么是模块化与模块" tabindex="-1"><a class="header-anchor" href="#_1-什么是模块化与模块"><span>1. 什么是模块化与模块 ?</span></a></h3><blockquote><p>将一个复杂的程序文件依据一定规则（规范）拆分成多个文件的过程称之为 <code>模块化</code></p></blockquote><p>其中拆分出的 <span style="color:red;">每个文件就是一个模块</span>，模块的内部数据是私有的，不过模块可以暴露内部数据以便其他模块使用</p><h3 id="_2-什么是模块化项目" tabindex="-1"><a class="header-anchor" href="#_2-什么是模块化项目"><span>2. 什么是模块化项目 ?</span></a></h3><blockquote><p>编码时是按照模块一个一个编码的， 整个项目就是一个模块化的项目</p></blockquote><h3 id="_3-模块化好处" tabindex="-1"><a class="header-anchor" href="#_3-模块化好处"><span>3. 模块化好处</span></a></h3><p>下面是模块化的一些好处：</p><ol><li><p>防止命名冲突</p></li><li><p>高复用性</p></li><li><p>高维护性</p></li></ol><h2 id="二、模块暴露数据" tabindex="-1"><a class="header-anchor" href="#二、模块暴露数据"><span>二、模块暴露数据</span></a></h2><h3 id="_1-模块初体验" tabindex="-1"><a class="header-anchor" href="#_1-模块初体验"><span>1. 模块初体验</span></a></h3><p>可以通过下面的操作步骤，快速体验模块化</p><ol><li><p>创建 me.js</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//声明函数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> tiemo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">	console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;贴膜....&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//暴露数据</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> tiemo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre></div></li><li><p>创建 index.js</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//导入模块</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> tiemo</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;./me.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//调用函数</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tiemo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//=&gt; 贴膜....</span></span></code></pre></div></li></ol><h3 id="_2-暴露数据" tabindex="-1"><a class="header-anchor" href="#_2-暴露数据"><span>2. 暴露数据</span></a></h3><p>模块暴露数据的方式有两种：</p><ol><li><p><code>module.exports</code> = value</p></li><li><p><code>exports.name</code> = value</p></li></ol><blockquote><p>使用时有几点注意：</p><ul><li><code>module.exports</code> 可以暴露 <span style="color:red;">任意</span> 数据</li><li>不能使用 <code>exports = value</code> 的形式暴露数据，模块内部 module 与 exports 的隐式关系 <code>exports = module.exports = {}</code> ，require 返回的是目标模块中 <code>module.exports</code> 的值</li></ul></blockquote><figure><img src="`+e+`" alt="05_NodeJS模块化" tabindex="0" loading="lazy"><figcaption>05_NodeJS模块化</figcaption></figure><h2 id="三、导入-引入-模块" tabindex="-1"><a class="header-anchor" href="#三、导入-引入-模块"><span>三、导入（引入）模块</span></a></h2><p>在模块中使用 require 传入文件路径即可引入文件</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> test</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;./me.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><p>require 使用的一些注意事项：</p><ol><li><p>对于自己创建的模块，导入时路径建议写 <span style="color:red;">相对路径</span>，且不能省略 <code>./</code> 和 <code>../</code></p></li><li><p><code>js</code> 和 <code>json</code> 文件导入时可以不用写后缀，c/c++编写的 <code>node</code> 扩展文件也可以不写后缀，但是一般用不到，直接使用 <strong>node</strong> 的 <code>require()</code> 方法即可将 JSON 文件转换成 JS 对象</p></li><li><p>如果导入其他类型的文件，会以 <code>js</code> 文件进行处理</p></li><li><p>如果导入的路径是个文件夹，则会 <span style="color:red;">首先</span> 检测该文件夹下 <code>package.json</code> 文件中 <code>main</code> 属性对应的文件，</p><p>如果存在则导入，反之如果文件不存在会报错。</p><p>如果 main 属性不存在，或者 package.json 不存在，则会尝试导入文件夹下的 <code>index.js</code> 和 <code>index.json</code>，</p><p>如果还是没找到，就会报错</p></li><li><p>导入 node.js 内置模块时，直接 require 模块的名字即可，无需加 <code>./</code> 和 <code>../</code></p></li></ol><h2 id="四、导入模块的基本流程" tabindex="-1"><a class="header-anchor" href="#四、导入模块的基本流程"><span>四、导入模块的基本流程</span></a></h2><p>这里我们介绍一下 <code>require</code> 导入 <span style="color:red;">自定义模块</span> 的基本流程</p><ol><li>将相对路径转为绝对路径，定位目标文件</li><li>缓存检测</li><li>读取目标文件代码</li><li>包裹为一个函数并执行（自执行函数）。通过 <code>arguments.callee.toString()</code> 查看自执行函数</li><li>缓存模块的值</li><li>返回 <code>module.exports</code> 的值</li></ol><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 伪代码</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //1. 将相对路径转为绝对路径，定位目标文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> absolutePath</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">__dirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //2. 缓存检测</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">caches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">absolutePath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> caches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">absolutePath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //3. 读取文件的代码</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> code</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> fs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">readFileSync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">absolutePath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //4. 包裹为一个函数 然后执行</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> module</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {};</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">exports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">__filename</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">__dirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> test</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;尚硅谷&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //输出</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">arguments</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">callee</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  })(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">__filename</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">__dirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //5. 缓存结果</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  caches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">absolutePath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //6. 返回 module.exports 的值</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+t+'" alt="05_NodeJS模块化" tabindex="0" loading="lazy"><figcaption>05_NodeJS模块化</figcaption></figure><h2 id="五、commonjs-规范" tabindex="-1"><a class="header-anchor" href="#五、commonjs-规范"><span>五、CommonJS 规范</span></a></h2><p><code>module.exports</code> 、<code>exports</code> 以及 <code>require</code> 这些都是 <code>CommonJS</code> 模块化规范中的内容。</p><p>而 Node.js 是实现了 CommonJS 模块化规范，二者关系有点像 JavaScript 与 ECMAScript</p>',32)]))}const o=s(h,[["render",k],["__file","04_nodejs-module.html.vue"]]),c=JSON.parse('{"path":"/Server/nodeJS/04_nodejs-module.html","title":"Node.js 模块化","lang":"zh-CN","frontmatter":{"order":3,"description":"Node.js 模块化 一、介绍 1. 什么是模块化与模块 ? 将一个复杂的程序文件依据一定规则（规范）拆分成多个文件的过程称之为 模块化 其中拆分出的 每个文件就是一个模块，模块的内部数据是私有的，不过模块可以暴露内部数据以便其他模块使用 2. 什么是模块化项目 ? 编码时是按照模块一个一个编码的， 整个项目就是一个模块化的项目 3. 模块化好处 下...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/Server/nodeJS/04_nodejs-module.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"Node.js 模块化"}],["meta",{"property":"og:description","content":"Node.js 模块化 一、介绍 1. 什么是模块化与模块 ? 将一个复杂的程序文件依据一定规则（规范）拆分成多个文件的过程称之为 模块化 其中拆分出的 每个文件就是一个模块，模块的内部数据是私有的，不过模块可以暴露内部数据以便其他模块使用 2. 什么是模块化项目 ? 编码时是按照模块一个一个编码的， 整个项目就是一个模块化的项目 3. 模块化好处 下..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-20T08:14:58.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-20T08:14:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Node.js 模块化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-20T08:14:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、介绍","slug":"一、介绍","link":"#一、介绍","children":[{"level":3,"title":"1. 什么是模块化与模块 ?","slug":"_1-什么是模块化与模块","link":"#_1-什么是模块化与模块","children":[]},{"level":3,"title":"2. 什么是模块化项目 ?","slug":"_2-什么是模块化项目","link":"#_2-什么是模块化项目","children":[]},{"level":3,"title":"3. 模块化好处","slug":"_3-模块化好处","link":"#_3-模块化好处","children":[]}]},{"level":2,"title":"二、模块暴露数据","slug":"二、模块暴露数据","link":"#二、模块暴露数据","children":[{"level":3,"title":"1. 模块初体验","slug":"_1-模块初体验","link":"#_1-模块初体验","children":[]},{"level":3,"title":"2. 暴露数据","slug":"_2-暴露数据","link":"#_2-暴露数据","children":[]}]},{"level":2,"title":"三、导入（引入）模块","slug":"三、导入-引入-模块","link":"#三、导入-引入-模块","children":[]},{"level":2,"title":"四、导入模块的基本流程","slug":"四、导入模块的基本流程","link":"#四、导入模块的基本流程","children":[]},{"level":2,"title":"五、CommonJS 规范","slug":"五、commonjs-规范","link":"#五、commonjs-规范","children":[]}],"git":{"createdTime":1710854012000,"updatedTime":1710922498000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":2}]},"readingTime":{"minutes":2.99,"words":896},"filePathRelative":"Server/nodeJS/04_nodejs-module.md","localizedDate":"2024年3月19日","excerpt":"\\n<h2>一、介绍</h2>\\n<h3>1. 什么是模块化与模块 ?</h3>\\n<blockquote>\\n<p>将一个复杂的程序文件依据一定规则（规范）拆分成多个文件的过程称之为 <code>模块化</code></p>\\n</blockquote>\\n<p>其中拆分出的 <span style=\\"color:red\\">每个文件就是一个模块</span>，模块的内部数据是私有的，不过模块可以暴露内部数据以便其他模块使用</p>\\n<h3>2. 什么是模块化项目 ?</h3>\\n<blockquote>\\n<p>编码时是按照模块一个一个编码的， 整个项目就是一个模块化的项目</p>\\n</blockquote>","autoDesc":true}');export{o as comp,c as data};
