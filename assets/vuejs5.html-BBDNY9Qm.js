import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as o,e as a,a as n,b as s}from"./app-BRsSGiWL.js";const c="/dcblog/assets/image-20230522093515753-DP6G11dd.png",l="/dcblog/assets/image-20230522093616167-5ewiCJ2K.png",p="/dcblog/assets/image-20230522093731842-C3ADS_15.png",i={},u=a(`<h1 id="五、非原始值的响应式方案" tabindex="-1"><a class="header-anchor" href="#五、非原始值的响应式方案"><span>五、非原始值的响应式方案</span></a></h1><blockquote><p>霍春阳《Vue.js设计与实现》的笔记</p></blockquote><h2 id="_1-理解proxy和reflect" tabindex="-1"><a class="header-anchor" href="#_1-理解proxy和reflect"><span>1. 理解Proxy和Reflect</span></a></h2><p>使用 <code>Proxy</code> 可以创建一个代理对象。它能够实现对 <mark>其他对象</mark> 的代理。而代理，指的是对一个对象 <mark>基本语义</mark> 的代理。它允许我们拦截并重新定义对一个对象的基本操作。</p><p><code>Reflect</code>对象的方法与<code>Proxy</code>对象的方法一一对应，只要是<code>Proxy</code>对象的方法，就能在<code>Reflect</code>对象上找到对应的方法。这就让<code>Proxy</code>对象可以方便地调用对应的<code>Reflect</code>方法，完成默认行为，作为修改行为的基础。而且<code>Reflect</code>中的一些函数还能接收第三个参数，即指定接收者 <code>receiver</code>，你可以把它理解为函数调用过程中的 this。</p><h3 id="target-key" tabindex="-1"><a class="header-anchor" href="#target-key"><span>target[key]</span></a></h3><blockquote><p>直接使用存在的问题</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> 
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 
    <span class="token keyword">get</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>

<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>bar<span class="token punctuation">)</span> <span class="token comment">// 1 </span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>foo<span class="token operator">++</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时副作用函数没有重新执行。在 get 拦截函数内，<code>target[key]</code> 相当于 <code>obj.bar</code>。因此，当我们使用 <code>p.bar</code> 访问 <code>bar</code> 属性时，它的 getter 函数内的 this 指向的其实是原始对象 obj， 这说明我们最终访问的其实是 <mark>obj.foo</mark>。在副作用函数内通过原始对象访问它的某个属性是不会建立响应联系的。</p><blockquote><p>将<code>target[key]</code>改成<code>Reflect.get(target, key, receiver)</code></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> 
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 
    <span class="token keyword">get</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token comment">// 现在这里的 this 为代理对象 p </span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们使用代理对象 p 访问 bar 属性时，那么 receiver 就是 p，你可以把它简单地理解为函数调用中的 this，此时访问器属性 bar 的 getter 函 数内的 this 指向代理对象 p。这会在副作用函数与响应式数据之间建立响应联系，从而达到依赖收集的效果。</p><hr><h3 id="理解js对象和proxy工作原理" tabindex="-1"><a class="header-anchor" href="#理解js对象和proxy工作原理"><span>理解JS对象和Proxy工作原理</span></a></h3><p>根据ECMA，在javascript中分为2种对象：<strong>常规对象</strong>和<strong>异质对象</strong>。任何不属于常规对象的都叫异质对象。</p><p><strong>对象必要的内部方法</strong></p><figure><img src="`+c+'" alt="image-20230522093515753" tabindex="0" loading="lazy"><figcaption>image-20230522093515753</figcaption></figure><figure><img src="'+l+'" alt="image-20230522093616167" tabindex="0" loading="lazy"><figcaption>image-20230522093616167</figcaption></figure><p><strong>额外的必要内部方法</strong></p><figure><img src="'+p+'" alt="image-20230522093731842" tabindex="0" loading="lazy"><figcaption>image-20230522093731842</figcaption></figure><p>所以，普通对象必须具有一组被称为<strong>基本内部方法</strong>（essential internal methods）的方法所定义的默认行为，也就是上图。如果改变了默认方法，那么就是异质对象。</p><p>毫无疑问，<code>Proxy</code>是异质对象，它可以直接性改变一些默认方法。当我们在<code>Proxy</code>中没有定义Get拦截器的时候，他会调用对象内部自己的<code>[[Get]]</code>，<strong>代理透明</strong>.</p><p>创建代理对象时指定的拦截函数，实际上是用来 <mark>自定义代理对象本身的内部方法和行为</mark> 的，而不是用来指定被代理对象的内部方法和行为的。</p><h2 id="_2-代理函数的完善" tabindex="-1"><a class="header-anchor" href="#_2-代理函数的完善"><span>2. 代理函数的完善</span></a></h2><p>原有的“读取”操作拦截太过简单，实际上读取包括：</p><ul><li>访问属性<code>obj.foo</code></li><li><code>key in obj</code></li><li><code>for (const key in obj){}</code></li></ul><h3 id="in操作符的拦截" tabindex="-1"><a class="header-anchor" href="#in操作符的拦截"><span><code>in</code>操作符的拦截</span></a></h3><p>访问属性通过前面说的get拦截函数实现。而对于<code>in</code>操作符，我们根据ECMA规范了解到in 操作符的运算结果是通过调用一个叫作 <mark>HasProperty</mark> 的抽象方法得到的，而它的返回值是通过调用对象的内部方法 <mark>[[HasProperty]]</mark> 得到的。我们可以通过 <mark>has 拦截函数</mark> 实现对 in 操作符的代理：</p>',28),r=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" obj "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token literal-property property"},"foo"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token punctuation"},"}"),s(` 
`),n("span",{class:"token keyword"},"const"),s(" p "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token function"},"has"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("target"),n("span",{class:"token punctuation"},","),s(" key")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token function"},"track"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token keyword"},"return"),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"has"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(` 
    `),n("span",{class:"token punctuation"},"}"),s(` 
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),k=a('<hr><h3 id="for-in操作符的拦截" tabindex="-1"><a class="header-anchor" href="#for-in操作符的拦截"><span><code>for...in</code>操作符的拦截</span></a></h3><p>对于<code>for...in</code>操作符，根据ECMA规范其中使用了 <mark>EnumerateObjectProperties</mark> 这个抽象方法，该方法返回 一个迭代器对象。而其内部实现使用了 <mark>Reflect.ownKeys(obj)</mark> 来获取只属于对象自身拥有的键。所以我们使用 <mark>ownKeys 拦截函数</mark> 来拦截 Reflect.ownKeys 操作：</p>',3),d=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" obj "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token literal-property property"},"foo"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token punctuation"},"}"),s(` 
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token constant"},"ITERATE_KEY"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"Symbol"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(` 

`),n("span",{class:"token keyword"},"const"),s(" p "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token function"},"ownKeys"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token comment"},"// 将副作用函数与 ITERATE_KEY 关联 "),s(`
        `),n("span",{class:"token function"},"track"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"ITERATE_KEY"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token keyword"},"return"),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ownKeys"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},")"),s(` 
    `),n("span",{class:"token punctuation"},"}"),s(` 
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=a("<p>在读写属性值时，总是能够明确地知道当前正在操作哪一个属性，所以只需要在该属性与副作用函数之间建立联系即可。而 ownKeys 用来获取一个对象的所有属于自己的键值，这个操作明显不与任何具体的键进行绑定，因此我们只能够构造唯一的 key 作为标识，即 <code>ITERATE_KEY</code>。</p><p>在触发响应的时候应该触发<code>ITERATE_KEY</code>对应的副作用函数，触发响应的情况（ <mark>length变化</mark> ）：</p><ul><li>为对象添加新的属性值</li><li>删除对象已有的属性值</li></ul><p><strong>trigger函数</strong></p>",4),b=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"trigger"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("target"),n("span",{class:"token punctuation"},","),s(" key")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token keyword"},"const"),s(" depsMap "),n("span",{class:"token operator"},"="),s(" bucket"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},")"),s(` 
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("depsMap"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(` 
    `),n("span",{class:"token comment"},"// 取得与 key 相关联的副作用函数 "),s(`
    `),n("span",{class:"token keyword"},"const"),s(" effects "),n("span",{class:"token operator"},"="),s(" depsMap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(` 
    
    `),n("span",{class:"token comment"},"// 取得与 ITERATE_KEY 相关联的副作用函数 "),s(`
    `),n("span",{class:"token keyword"},"const"),s(" iterateEffects "),n("span",{class:"token operator"},"="),s(" depsMap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"ITERATE_KEY"),n("span",{class:"token punctuation"},")"),s(` 

    `),n("span",{class:"token keyword"},"const"),s(" effectsToRun "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(` 
    `),n("span",{class:"token comment"},"// 将与 key 相关联的副作用函数添加到 effectsToRun "),s(`
    effects `),n("span",{class:"token operator"},"&&"),s(" effects"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"effectFn"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("effectFn "),n("span",{class:"token operator"},"!=="),s(" activeEffect"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            effectsToRun`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("effectFn"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token punctuation"},"}"),s(` 
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 
    
    `),n("span",{class:"token comment"},"// 将与 ITERATE_KEY 相关联的副作用函数也添加到 effectsToRun "),s(`
    iterateEffects `),n("span",{class:"token operator"},"&&"),s(" iterateEffects"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"effectFn"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("effectFn "),n("span",{class:"token operator"},"!=="),s(" activeEffect"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            effectsToRun`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("effectFn"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token punctuation"},"}"),s(` 
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 

    effectsToRun`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"effectFn"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("effectFn"),n("span",{class:"token punctuation"},"."),s("options"),n("span",{class:"token punctuation"},"."),s("scheduler"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            effectFn`),n("span",{class:"token punctuation"},"."),s("options"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"scheduler"),n("span",{class:"token punctuation"},"("),s("effectFn"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token function"},"effectFn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token punctuation"},"}"),s(` 
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),m=n("ul",null,[n("li",null,"此时修改一个已存在的属性也会触发副作用函数重新执行，带来不必要的性能开销")],-1),g=n("p",null,[n("mark",null,"此时需要我们在 set 拦截函数内能够区分操作的类型，到底是添加新属性还是设置已有属性")],-1),h=n("p",null,[n("strong",null,"代理函数")],-1),y=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" p "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token comment"},"// 拦截设置操作 "),s(`
    `),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" newVal"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token comment"},"// 如果属性不存在，则说明是在添加新属性，否则是设置已有属性 "),s(`
        `),n("span",{class:"token keyword"},"const"),s(" type "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hasOwnProperty"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s("key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token string"},"'SET'"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'ADD'"),s(` 

        `),n("span",{class:"token comment"},"// 设置属性值 "),s(`
        `),n("span",{class:"token keyword"},"const"),s(" res "),n("span",{class:"token operator"},"="),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" newVal"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(` 

        `),n("span",{class:"token comment"},"// 将 type 作为第三个参数传递给 trigger 函数 "),s(`
        `),n("span",{class:"token function"},"trigger"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" type"),n("span",{class:"token punctuation"},")"),s(` 

        `),n("span",{class:"token keyword"},"return"),s(` res 
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(` 
    `),n("span",{class:"token comment"},"// 省略其他拦截函数 "),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("p",null,[n("strong",null,"trigger函数")],-1),w=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"trigger"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" type")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token keyword"},"const"),s(" depsMap "),n("span",{class:"token operator"},"="),s(" bucket"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},")"),s(` 
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("depsMap"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(` 
    `),n("span",{class:"token keyword"},"const"),s(" effects "),n("span",{class:"token operator"},"="),s(" depsMap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(` 

    `),n("span",{class:"token keyword"},"const"),s(" effectsToRun "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(` 
    effects `),n("span",{class:"token operator"},"&&"),s(" effects"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"effectFn"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("effectFn "),n("span",{class:"token operator"},"!=="),s(" activeEffect"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            effectsToRun`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("effectFn"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token punctuation"},"}"),s(` 
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 

    `),n("span",{class:"token comment"},"// 当操作类型为 ADD 或 DELETE 时，需要触发与 ITERATE_KEY 相关联的副作用函数重新执行"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("type "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'ADD'"),n("span",{class:"token operator"},"||"),s(" type "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'DELETE'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token keyword"},"const"),s(" iterateEffects "),n("span",{class:"token operator"},"="),s(" depsMap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"ITERATE_KEY"),n("span",{class:"token punctuation"},")"),s(` 
        iterateEffects `),n("span",{class:"token operator"},"&&"),s(" iterateEffects"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"effectFn"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("effectFn "),n("span",{class:"token operator"},"!=="),s(" activeEffect"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                effectsToRun`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("effectFn"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 
    `),n("span",{class:"token punctuation"},"}"),s(` 

    effectsToRun`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"effectFn"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("effectFn"),n("span",{class:"token punctuation"},"."),s("options"),n("span",{class:"token punctuation"},"."),s("scheduler"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            effectFn`),n("span",{class:"token punctuation"},"."),s("options"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"scheduler"),n("span",{class:"token punctuation"},"("),s("effectFn"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token function"},"effectFn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token punctuation"},"}"),s(` 
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=a(`<h3 id="代理-delete-操作符" tabindex="-1"><a class="header-anchor" href="#代理-delete-操作符"><span>代理 <code>delete</code> 操作符</span></a></h3><p><mark>deleteProperty拦截函数</mark></p><p><strong>代理函数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span> 
    <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token comment">// 检查被操作的属性是否是对象自己的属性 </span>
        <span class="token keyword">const</span> hadKey <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>key<span class="token punctuation">)</span> 
        <span class="token comment">// 使用 Reflect.deleteProperty 完成属性的删除 </span>
        <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> 

        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&amp;&amp;</span> hadKey<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token comment">// 只有当被删除的属性是对象自己的属性并且成功删除时，才触发更新 </span>
            <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&#39;DELETE&#39;</span><span class="token punctuation">)</span> 
        <span class="token punctuation">}</span> 

        <span class="token keyword">return</span> res 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-合理触发响应" tabindex="-1"><a class="header-anchor" href="#_3-合理触发响应"><span>3. 合理触发响应</span></a></h2><blockquote><p>当为属性设置新的值时，如果值没有发生变化，则不需要触发响应。</p></blockquote><p><strong>代理函数</strong></p>`,7),_=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" p "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" newVal"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token comment"},"// 先获取旧值 "),s(`
        `),n("span",{class:"token keyword"},"const"),s(" oldVal "),n("span",{class:"token operator"},"="),s(" target"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(` 

        `),n("span",{class:"token keyword"},"const"),s(" type "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hasOwnProperty"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s("key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token string"},"'SET'"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'ADD'"),s(` 
        `),n("span",{class:"token keyword"},"const"),s(" res "),n("span",{class:"token operator"},"="),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" newVal"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token comment"},"// // 比较新值与旧值，只有当它们不全等，并且不都是 NaN 的时候才触发响应"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("oldVal "),n("span",{class:"token operator"},"!=="),s(" newVal "),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token punctuation"},"("),s("oldVal "),n("span",{class:"token operator"},"==="),s(" oldVal "),n("span",{class:"token operator"},"||"),s(" newVal "),n("span",{class:"token operator"},"==="),s(`
newVal`),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token function"},"trigger"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" type"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token punctuation"},"}"),s(` 

        `),n("span",{class:"token keyword"},"return"),s(` res 
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(` 
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=a(`<ul><li>添加的不都是 NaN的判断是因为在js中 NaN === NaN会输出false。</li></ul><blockquote><p>封装<code>reactive</code>函数，该函数接收一个对象作为参数，并返回为其创建的响应式数据</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span> 
        <span class="token comment">// 省略前文讲解的拦截函数 </span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>reactive 函数只是对 Proxy 进行了一层封装</li></ul><blockquote><p>原型链继承问题</p></blockquote><p><strong>问题演示</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 
<span class="token keyword">const</span> proto <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> 
<span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> 
<span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span> 
<span class="token comment">// 使用 parent 作为 child 的原型 </span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> parent<span class="token punctuation">)</span> 

<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>bar<span class="token punctuation">)</span> <span class="token comment">// 1 </span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> 
<span class="token comment">// 修改 child.bar 的值 </span>
child<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">// 会导致副作用函数重新执行两次</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当我们创建两个响应式对象，并强制指定一种继承关系，使得其中一个<code>Proxy</code>实例继承了另一个<code>Proxy</code>实例时，被继承的那个实例则存在一个副作用。</li><li><code>child</code>对象上并没有<code>bar</code>这个属性，那么js会沿着原型链依次向上查找，就会找到<code>parent</code>，并执行<code>[[Get]]</code>去获取这个属性，然后这个动作就会被<code>Proxy</code>拦截。这会导致<code>child.bar</code> 和 <code>parent.bar</code> 都与副作用函数建立了响应联系。</li><li>当设置新值时，ECMA规定：如果设置的属性不存在于对象上，那么会取得其原型，并调用原型的 [[Set]] 方法。这会导致set函数被调用两次。</li></ul><p><strong>解决方式</strong></p><p>在 set 拦截函数内区分这两次更新，并把原型上那次副作用函数的重新执行屏蔽。</p><ul><li>receiver 一直是触发对象，即target的代理对象。</li><li>只有当 receiver 是 target 的代理对象时才触发更新。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>child<span class="token punctuation">.</span>raw <span class="token operator">===</span> obj <span class="token comment">// true</span>
parent<span class="token punctuation">.</span>raw <span class="token operator">===</span> proto <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>reactive函数</strong></p>`,13),x=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"reactive"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"obj"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token comment"},"// 代理对象可以通过 raw 属性访问原始数据 "),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("key "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'raw'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(` target 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token function"},"track"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" newVal"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"const"),s(" oldVal "),n("span",{class:"token operator"},"="),s(" target"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(` 
            `),n("span",{class:"token keyword"},"const"),s(" type "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hasOwnProperty"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s("key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token string"},"'SET'"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'ADD'"),s(` 
            `),n("span",{class:"token keyword"},"const"),s(" res "),n("span",{class:"token operator"},"="),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" newVal"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(` 

            `),n("span",{class:"token comment"},"// target === receiver.raw 说明 receiver 就是 target 的代理对象 "),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("target "),n("span",{class:"token operator"},"==="),s(" receiver"),n("span",{class:"token punctuation"},"."),s("raw"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("oldVal "),n("span",{class:"token operator"},"!=="),s(" newVal "),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token punctuation"},"("),s("oldVal "),n("span",{class:"token operator"},"==="),s(" oldVal "),n("span",{class:"token operator"},"||"),s(" newVal "),n("span",{class:"token operator"},"==="),s(" newVal"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                    `),n("span",{class:"token function"},"trigger"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" type"),n("span",{class:"token punctuation"},")"),s(` 
                `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(` res 
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"// 省略其他拦截函数 "),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=a(`<h2 id="_4-浅响应和深响应" tabindex="-1"><a class="header-anchor" href="#_4-浅响应和深响应"><span>4. 浅响应和深响应</span></a></h2><p>我们目前实现的reactive是浅响应的，只处理对象最外层属性的响应式。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> 

<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span> 
<span class="token comment">// 修改 obj.foo.bar 的值，并不能触发响应 </span>
obj<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>Reflect.get</code> 得到 obj.foo 的结果是一个普通对象，即 { bar: 1 }，它并不是一个响应式对象，所以在副作用函数中访问 obj.foo.bar 时，是不能建立响应联系的。</p><h3 id="实现深响应" tabindex="-1"><a class="header-anchor" href="#实现深响应"><span>实现深响应</span></a></h3>`,5),T=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"reactive"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"obj"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("key "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'raw'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(` target 
            `),n("span",{class:"token punctuation"},"}"),s(` 

            `),n("span",{class:"token function"},"track"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token comment"},"// 得到原始值结果 "),s(`
            `),n("span",{class:"token keyword"},"const"),s(" res "),n("span",{class:"token operator"},"="),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"typeof"),s(" res "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'object'"),s(),n("span",{class:"token operator"},"&&"),s(" res "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token comment"},"// 调用 reactive 将结果包装成响应式数据并返回 "),s(`
                `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"reactive"),n("span",{class:"token punctuation"},"("),s("res"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token comment"},"// 返回 res "),s(`
            `),n("span",{class:"token keyword"},"return"),s(` res 
        `),n("span",{class:"token punctuation"},"}"),s(` 
        `),n("span",{class:"token comment"},"// 省略其他拦截函数 "),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("p",null,"然而，并非所有情况下我们都希望深响应，这就催生了 shallowReactive，即浅响应。",-1),P=n("h3",{id:"完成深浅响应",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#完成深浅响应"},[n("span",null,"完成深浅响应")])],-1),S=n("p",null,[n("strong",null,"createReactive函数")],-1),M=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// 封装 createReactive 函数，接收一个参数 isShallow，代表是否为浅响应，默认为 false，即非浅响应 "),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"createReactive"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("obj"),n("span",{class:"token punctuation"},","),s(" isShallow "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token comment"},"// 拦截读取操作 "),s(`
        `),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("key "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'raw'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(` target 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"const"),s(" res "),n("span",{class:"token operator"},"="),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token function"},"track"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(` 

            `),n("span",{class:"token comment"},"// 如果是浅响应，则直接返回原始值 "),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("isShallow"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(` res 
            `),n("span",{class:"token punctuation"},"}"),s(` 

            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"typeof"),s(" res "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'object'"),s(),n("span",{class:"token operator"},"&&"),s(" res "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"reactive"),n("span",{class:"token punctuation"},"("),s("res"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(` res 
        `),n("span",{class:"token punctuation"},"}"),s(` 
        `),n("span",{class:"token comment"},"// 省略其他拦截函数 "),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),V=a(`<p><strong>reactive和shallowReactive函数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">return</span> <span class="token function">createReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> 
<span class="token punctuation">}</span> 
<span class="token keyword">function</span> <span class="token function">shallowReactive</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">return</span> <span class="token function">createReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-只读和浅只读" tabindex="-1"><a class="header-anchor" href="#_5-只读和浅只读"><span>5. 只读和浅只读</span></a></h2><p>我们希望一些数据是只读的，当用户尝试修改只读数据时，会收到一条警告信息。</p><p><strong>createReactive函数</strong></p>`,5),I=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// 增加第三个参数 isReadonly，代表是否只读，默认为 false，即非只读 "),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"createReactive"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("obj"),n("span",{class:"token punctuation"},","),s(" isShallow "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(" isReadonly "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" newVal"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token comment"},"// 如果是只读的，则打印警告信息并返回 "),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("isReadonly"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"warn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"属性 "),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("key"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"}," 是只读的"),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},")"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"const"),s(" oldVal "),n("span",{class:"token operator"},"="),s(" target"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(` 
            `),n("span",{class:"token keyword"},"const"),s(" type "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hasOwnProperty"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s("key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token string"},"'SET'"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'ADD'"),s(` 
            `),n("span",{class:"token keyword"},"const"),s(" res "),n("span",{class:"token operator"},"="),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" newVal"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("target "),n("span",{class:"token operator"},"==="),s(" receiver"),n("span",{class:"token punctuation"},"."),s("raw"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("oldVal "),n("span",{class:"token operator"},"!=="),s(" newVal "),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token punctuation"},"("),s("oldVal "),n("span",{class:"token operator"},"==="),s(" oldVal "),n("span",{class:"token operator"},"||"),s(" newVal "),n("span",{class:"token operator"},"==="),s(" newVal"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                    `),n("span",{class:"token function"},"trigger"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" type"),n("span",{class:"token punctuation"},")"),s(` 
                `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(` res 
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(` 
        `),n("span",{class:"token function"},"deleteProperty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("target"),n("span",{class:"token punctuation"},","),s(" key")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token comment"},"// 如果是只读的，则打印警告信息并返回 "),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("isReadonly"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"warn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"属性 "),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("key"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"}," 是只读的"),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},")"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"const"),s(" hadKey "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hasOwnProperty"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token keyword"},"const"),s(" res "),n("span",{class:"token operator"},"="),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"deleteProperty"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("res "),n("span",{class:"token operator"},"&&"),s(" hadKey"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token function"},"trigger"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'DELETE'"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(` res 
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("key "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'raw'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(` target 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            
            `),n("span",{class:"token comment"},"// 非只读的时候才需要建立响应联系 "),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("isReadonly"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token function"},"track"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 

            `),n("span",{class:"token keyword"},"const"),s(" res "),n("span",{class:"token operator"},"="),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("isShallow"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(` res 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"typeof"),s(" res "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'object'"),s(),n("span",{class:"token operator"},"&&"),s(" res "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token function"},"reactive"),n("span",{class:"token punctuation"},"("),s("res"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(` res 
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token comment"},"// 省略其他拦截函数 "),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"highlight-lines"},[n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),D=n("ul",null,[n("li",null,"如果一个数据是只读的，那就意味着任何方式都无法修改它。因此，没有必要为只读数据建立响应联系。出于这个原因，在副作用函数中读取一个只读属性的值时，不调用 track 函数追踪响应。")],-1),q=n("p",null,"同样的，上面实现的只读属于浅只读，为了实现深只读，应该在 get 拦截函数内递归地调用 readonly 将数据包装成只读的代理对象",-1),K=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"createReactive"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("obj"),n("span",{class:"token punctuation"},","),s(" isShallow "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(" isReadonly "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token comment"},"// 拦截读取操作 "),s(`
        `),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("key "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'raw'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(` target 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("isReadonly"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token function"},"track"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"const"),s(" res "),n("span",{class:"token operator"},"="),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("isShallow"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(` res 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"typeof"),s(" res "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'object'"),s(),n("span",{class:"token operator"},"&&"),s(" res "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token comment"},"// 如果数据为只读，则调用 readonly 对值进行包装 "),s(`
                `),n("span",{class:"token keyword"},"return"),s(" isReadonly "),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token function"},"readonly"),n("span",{class:"token punctuation"},"("),s("res"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"reactive"),n("span",{class:"token punctuation"},"("),s("res"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(` res 
        `),n("span",{class:"token punctuation"},"}"),s(` 
        `),n("span",{class:"token comment"},"// 省略其他拦截函数 "),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=a(`<p><strong>readonly和shallowReadonly函数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">readonly</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">return</span> <span class="token function">createReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span> 
<span class="token keyword">function</span> <span class="token function">shallowReadonly</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">return</span> <span class="token function">createReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment">/* shallow */</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-代理数组" tabindex="-1"><a class="header-anchor" href="#_6-代理数组"><span>6. 代理数组</span></a></h2><h3 id="数组的索引与-length" tabindex="-1"><a class="header-anchor" href="#数组的索引与-length"><span>数组的索引与 length</span></a></h3><p>首先要知道数组属于异质对象，因为数组对象的 <code>[[DefineOwnProperty]]</code> 内部方法与常规对象不同。</p><p>所有对数组元素或属性的“ <mark>读取</mark> ”操作</p><ul><li>通过索引访问数组元素值：<code>arr[0]</code>。</li><li>访问数组的长度：<code>arr.length</code>。</li><li>把数组作为对象，使用 <code>for...in</code> 循环遍历。</li><li>使用 <code>for...of</code> 迭代遍历数组。</li><li>数组的原型方法，如<code>concat/join/every/some/find/findIndex/includes</code> 等，以及其他所有不改变原数组的原型方法。</li></ul><p>对数组元素或属性的 <mark>设置</mark> 操作</p><ul><li>通过索引修改数组元素值：<code>arr[1] = 3</code>。</li><li>修改数组长度：<code>arr.length = 0</code>。</li><li>数组的栈方法：<code>push/pop/shift/unshift</code>。</li><li>修改原数组的原型方法：<code>splice/fill/sort</code> 等。</li></ul><h4 id="响应数组下标的变化" tabindex="-1"><a class="header-anchor" href="#响应数组下标的变化"><span>响应数组下标的变化</span></a></h4><p>我们给数组中不存在的元素赋值，那就是新增，反之就只是更新。 比如<code>arr.lenght = 2;arr[2] = 2</code></p><p><strong>createReactive函数</strong></p><p>新增 <mark>对数组类型的判断</mark></p>`,13),Y=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"createReactive"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("obj"),n("span",{class:"token punctuation"},","),s(" isShallow "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(" isReadonly "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token comment"},"// 拦截设置操作 "),s(`
        `),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" newVal"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("isReadonly"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"warn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"属性 "),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("key"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"}," 是只读的"),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},")"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"const"),s(" oldVal "),n("span",{class:"token operator"},"="),s(" target"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(` 
            `),n("span",{class:"token comment"},"// 如果属性不存在，则说明是在添加新的属性，否则是设置已有属性 "),s(`
            `),n("span",{class:"token keyword"},"const"),s(" type "),n("span",{class:"token operator"},"="),s(" Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isArray"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token comment"},"// 如果代理目标是数组，则检测被设置的索引值是否小于数组长度， "),s(`
            `),n("span",{class:"token comment"},"// 如果是，则视作 SET 操作，否则是 ADD 操作 "),s(`
            `),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token function"},"Number"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"<"),s(" target"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token string"},"'SET'"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'ADD'"),s(` 
            `),n("span",{class:"token operator"},":"),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hasOwnProperty"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token string"},"'SET'"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'ADD'"),s(` 

            `),n("span",{class:"token keyword"},"const"),s(" res "),n("span",{class:"token operator"},"="),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" newVal"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("target "),n("span",{class:"token operator"},"==="),s(" receiver"),n("span",{class:"token punctuation"},"."),s("raw"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("oldVal "),n("span",{class:"token operator"},"!=="),s(" newVal "),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token punctuation"},"("),s("oldVal "),n("span",{class:"token operator"},"==="),s(" oldVal "),n("span",{class:"token operator"},"||"),s(" newVal "),n("span",{class:"token operator"},"==="),s(" newVal"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                    `),n("span",{class:"token function"},"trigger"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" type"),n("span",{class:"token punctuation"},")"),s(` 
                `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(` res 
        `),n("span",{class:"token punctuation"},"}"),s(` 
        `),n("span",{class:"token comment"},"// 省略其他拦截函数 "),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),O=n("ul",null,[n("li",null,[s("使用proxy进行响应式时，"),n("code",null,"代理对象[index]"),s("可以正常触发get代理")])],-1),z=n("p",null,[n("strong",null,"trigger函数")],-1),N=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"trigger"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" type")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token comment"},"// 省略部分内容 "),s(`

    `),n("span",{class:"token comment"},"// 当操作类型为 ADD 并且目标对象是数组时，应该取出并执行那些与 length属性相关联的副作用函数 "),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("type "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'ADD'"),s(),n("span",{class:"token operator"},"&&"),s(" Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isArray"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token comment"},"// 取出与 length 相关联的副作用函数 "),s(`
        `),n("span",{class:"token keyword"},"const"),s(" lengthEffects "),n("span",{class:"token operator"},"="),s(" depsMap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'length'"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token comment"},"// 将这些副作用函数添加到 effectsToRun 中，待执行 "),s(`
        lengthEffects `),n("span",{class:"token operator"},"&&"),s(" lengthEffects"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"effectFn"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("effectFn "),n("span",{class:"token operator"},"!=="),s(" activeEffect"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                effectsToRun`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("effectFn"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 
    `),n("span",{class:"token punctuation"},"}"),s(` 

    `),n("span",{class:"token comment"},"// 省略部分内容 "),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=n("h4",{id:"响应length的变化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#响应length的变化"},[n("span",null,"响应length的变化")])],-1),L=n("p",null,[s("当修改 length 属性值时，只有那些 "),n("mark",null,"索引值大于或等于新的 length 属性值"),s(" 的元素才需要触发响应。")],-1),G=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"createReactive"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("obj"),n("span",{class:"token punctuation"},","),s(" isShallow "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(" isReadonly "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token comment"},"// 拦截设置操作 "),s(`
        `),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" newVal"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("isReadonly"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"warn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"属性 "),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("key"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"}," 是只读的"),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},")"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"const"),s(" oldVal "),n("span",{class:"token operator"},"="),s(" target"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(` 

            `),n("span",{class:"token keyword"},"const"),s(" type "),n("span",{class:"token operator"},"="),s(" Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isArray"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token function"},"Number"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"<"),s(" target"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token string"},"'SET'"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'ADD'"),s(` 
            `),n("span",{class:"token operator"},":"),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hasOwnProperty"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"?"),s(`
                  `),n("span",{class:"token string-property property"},"'SET'"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'ADD'"),s(` 

            `),n("span",{class:"token keyword"},"const"),s(" res "),n("span",{class:"token operator"},"="),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" newVal"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("target "),n("span",{class:"token operator"},"==="),s(" receiver"),n("span",{class:"token punctuation"},"."),s("raw"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("oldVal "),n("span",{class:"token operator"},"!=="),s(" newVal "),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token punctuation"},"("),s("oldVal "),n("span",{class:"token operator"},"==="),s(" oldVal "),n("span",{class:"token operator"},"||"),s(" newVal "),n("span",{class:"token operator"},"==="),s(" newVal"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                    `),n("span",{class:"token comment"},"// 增加第四个参数，即触发响应的新值（新的索引值）"),s(`
                    `),n("span",{class:"token function"},"trigger"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" type"),n("span",{class:"token punctuation"},","),s(" newVal"),n("span",{class:"token punctuation"},")"),s(` 
                `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(` res 
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(` 
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=n("p",null,[n("strong",null,"trigger函数")],-1),J=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// 为 trigger 函数增加第四个参数，newVal，即新值 "),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"trigger"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" type"),n("span",{class:"token punctuation"},","),s(" newVal")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token comment"},"// 省略其他代码 "),s(`
    `),n("span",{class:"token comment"},"// 如果操作目标是数组，并且修改了数组的 length 属性 "),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isArray"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"&&"),s(" key "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'length'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token comment"},"// 对于索引大于或等于新的 length 值的元素， "),s(`
        `),n("span",{class:"token comment"},"// 需要把所有相关联的副作用函数取出并添加到 effectsToRun 中待执行 "),s(`
        depsMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("effects"),n("span",{class:"token punctuation"},","),s(" key")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("key "),n("span",{class:"token operator"},">="),s(" newVal"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                effects`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"effectFn"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("effectFn "),n("span",{class:"token operator"},"!=="),s(" activeEffect"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                        effectsToRun`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("effectFn"),n("span",{class:"token punctuation"},")"),s(` 
                    `),n("span",{class:"token punctuation"},"}"),s(` 
                `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 
    `),n("span",{class:"token punctuation"},"}"),s(` 
	`),n("span",{class:"token comment"},"// 省略其他代码"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),$=n("h3",{id:"遍历数组",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#遍历数组"},[n("span",null,"遍历数组")])],-1),Z=n("h4",{id:"响应使用for-in遍历数组",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#响应使用for-in遍历数组"},[n("span",null,[s("响应使用"),n("code",null,"for...in"),s("遍历数组")])])],-1),H=n("p",null,"我们应该尽量避免使用 for...in 循环遍历数组。但既然在语法上是可行的，那么这里也需要考虑。",-1),Q=n("p",null,[n("strong",null,"createReactive函数")],-1),U=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"createReactive"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("obj"),n("span",{class:"token punctuation"},","),s(" isShallow "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(" isReadonly "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token comment"},"// 省略其他拦截函数 "),s(`
        `),n("span",{class:"token function"},"ownKeys"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token comment"},"// 如果操作目标 target 是数组，则使用 length 属性作为 key 并建立响应联系 "),s(`
            `),n("span",{class:"token function"},"track"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isArray"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token string"},"'length'"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token constant"},"ITERATE_KEY"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ownKeys"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token punctuation"},"}"),s(` 
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),W=n("h4",{id:"响应使用for-of遍历数组",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#响应使用for-of遍历数组"},[n("span",null,[s("响应使用"),n("code",null,"for...of"),s("遍历数组")])])],-1),X=n("p",null,[n("code",null,"for ... of"),s("是用来遍历可迭代对象的，其中调用了数组内部的迭代器，通过"),n("code",null,"length"),s("判断元素是否存在，当元素存在时在next方法中返回元素本身。因此，只需要在副作用函数与数组长度和索引之间建立响应式联系，就是能够响应"),n("code",null,"for...of"),s("。 而这一点，在上面已经实现，因此我们无需再修改代码就可以实现响应。")],-1),nn=n("p",null,"需要指出的是，无论是使用 for...of 循环，还是调用 values 等方法，它们都会读取数组的 Symbol.iterator 属性。为了避免发生意外的错误，以及性能上的考虑，我们不应该在副作用函数与 Symbol.iterator 这类 symbol 值之间建立响应联系，我们应该在get的时候再判断一些，如果碰到这种，就无需追踪了",-1),sn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"createReactive"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("obj"),n("span",{class:"token punctuation"},","),s(" isShallow "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(" isReadonly "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token comment"},"// 拦截读取操作 "),s(`
        `),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("key "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'raw'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(` target 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token comment"},"// 添加判断，如果 key 的类型是 symbol，则不进行追踪 "),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("isReadonly "),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token keyword"},"typeof"),s(" key "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token string"},"'symbol'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token function"},"track"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 

            `),n("span",{class:"token keyword"},"const"),s(" res "),n("span",{class:"token operator"},"="),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("isShallow"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(` res 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"typeof"),s(" res "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'object'"),s(),n("span",{class:"token operator"},"&&"),s(" res "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(" isReadonly "),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token function"},"readonly"),n("span",{class:"token punctuation"},"("),s("res"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"reactive"),n("span",{class:"token punctuation"},"("),s("res"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(` res 
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(` 
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),an=a(`<h3 id="数组的查找方法" tabindex="-1"><a class="header-anchor" href="#数组的查找方法"><span>数组的查找方法</span></a></h3><h4 id="includes的边界考虑" tabindex="-1"><a class="header-anchor" href="#includes的边界考虑"><span>includes的边界考虑</span></a></h4><p>在数组的API中，有一些是查找的方法，这一类方法有个共同特点就是不会改变原数据，本质上都是一个循环遍历。 前文讲到，只要在副作用函数与数组长度和索引之间建立响应式联系，就能够响应数组，但是具体到某些方法，我们还是需要特殊处理，就是所谓的 <mark>边界条件</mark> 。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">)</span> 

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于我们的<code>reactive</code>是会进行递归处理的，arr内部的元素经过<code>reactive</code>处理后，得到的是一个代理对象，而在 includes 方法内部也会通过 arr 访问数组元素，从而也得到一个代理对象，问题是这两个代理对象是不同的。（ <mark>每次调用 reactive 函数时都会创建一个新的代理对象</mark> ）</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//reactive的递归处理</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> res <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">return</span> isReadonly <span class="token operator">?</span> <span class="token function">readonly</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">reactive</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> 
<span class="token punctuation">}</span>

<span class="token comment">// 每次调用 reactive 时，都会创建新的代理对象 </span>
<span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">return</span> <span class="token function">createReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>我们把原始对象和对应的<code>reactive</code>对象存储起来，如果存在我们就不再重新生成<code>reactive</code>对象，这样即避免了错误，又能提高效率。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 定义一个 Map 实例，存储原始对象到代理对象的映射 </span>
<span class="token keyword">const</span> reactiveMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 优先通过原始对象 obj 寻找之前创建的代理对象，如果找到了，直接返回已有的代理对象 </span>
    <span class="token keyword">const</span> existionProxy <span class="token operator">=</span> reactiveMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>existionProxy<span class="token punctuation">)</span> <span class="token keyword">return</span> existionProxy 

    <span class="token comment">// 否则，创建新的代理对象 </span>
    <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token function">createReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> 
    <span class="token comment">// 存储到 Map 中，从而避免重复创建 </span>
    reactiveMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span> 
    <span class="token keyword">return</span> proxy 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>但是此时有一个新的问题出现，<code>console.log(arr.includes(obj)) // false</code>，因为 includes 内部的 this 指向 的是代理对象 arr，并且在获取数组元素时得到的值也是代理对象， 所以拿原始对象 obj 去查找肯定找不到，因此返回false。</li></ul><blockquote><p>重写includes方法</p></blockquote><p><strong>createReactive函数</strong></p>`,11),tn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" arrayInstrumentations "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token function-variable function"},"includes"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"function"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token comment"},"/* ... */"),n("span",{class:"token punctuation"},"}"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(` 
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"createReactive"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("obj"),n("span",{class:"token punctuation"},","),s(" isShallow "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(" isReadonly "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token comment"},"// 拦截读取操作 "),s(`
        `),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("key "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'raw'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(` target 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            
            `),n("span",{class:"token comment"},"// 如果操作的目标对象是数组，并且 key 存在于arrayInstrumentations 上， "),s(`
            `),n("span",{class:"token comment"},"// 那么返回定义在 arrayInstrumentations 上的值 "),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isArray"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"&&"),s(`
                arrayInstrumentations`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hasOwnProperty"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("arrayInstrumentations"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 

            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("isReadonly "),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token keyword"},"typeof"),s(" key "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token string"},"'symbol'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token function"},"track"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"const"),s(" res "),n("span",{class:"token operator"},"="),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("isShallow"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(` res 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"typeof"),s(" res "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'object'"),s(),n("span",{class:"token operator"},"&&"),s(" res "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(" isReadonly "),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token function"},"readonly"),n("span",{class:"token punctuation"},"("),s("res"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"reactive"),n("span",{class:"token punctuation"},"("),s("res"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(` res 
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(` 
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),en=a(`<p><strong>includes函数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> originMethod <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>includes 
<span class="token keyword">const</span> arrayInstrumentations <span class="token operator">=</span> <span class="token punctuation">{</span> 
    <span class="token function-variable function">includes</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token comment">// this 是代理对象，先在代理对象中查找，将结果存储到 res 中 </span>
        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">originMethod</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span> 

        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token comment">// res 为 false 说明没找到，通过 this.raw 拿到原始数组，再去其中查找并更新 res 值 </span>
            res <span class="token operator">=</span> <span class="token function">originMethod</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>raw<span class="token punctuation">,</span> args<span class="token punctuation">)</span> 
        <span class="token punctuation">}</span> 
        <span class="token comment">// 返回最终结果 </span>
        <span class="token keyword">return</span> res 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="其他方法" tabindex="-1"><a class="header-anchor" href="#其他方法"><span>其他方法</span></a></h4><blockquote><p>除了 includes 方法之外，还需要做类似处理的数组方法有 <code>indexOf</code> 和<code>lastIndexOf</code>，因为它们都属于根据给定的值返回查找结果的方法。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arrayInstrumentations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token string">&#39;includes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;indexOf&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lastIndexOf&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">method</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    <span class="token keyword">const</span> originMethod <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>method<span class="token punctuation">]</span> 
    arrayInstrumentations<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token comment">// this 是代理对象，先在代理对象中查找，将结果存储到 res 中 </span>
        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">originMethod</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span> 

        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">||</span> res <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token comment">// res 为 false 说明没找到，通过 this.raw 拿到原始数组，再去其中查找，并更新 res 值 </span>
            res <span class="token operator">=</span> <span class="token function">originMethod</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>raw<span class="token punctuation">,</span> args<span class="token punctuation">)</span> 
        <span class="token punctuation">}</span> 
        <span class="token comment">// 返回最终结果 </span>
        <span class="token keyword">return</span> res 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="隐式修改数组长度的原型方法" tabindex="-1"><a class="header-anchor" href="#隐式修改数组长度的原型方法"><span>隐式修改数组长度的原型方法</span></a></h3><p>上面我们学习了如何处理数组中的一些遍历方法，这些方法大部分都是不会更改数组本身的，因此我们只需要处理一些边际情况就可以了，但是数组中还有一些其他方法会修改原始数据，比如最常用的<code>push</code>方法。</p><p><code>push</code>的执行流程：</p><ol><li>判断数组的length加上参数的length有没有超过范围</li><li>遍历参数，设置数组内的值，然后length+1</li><li>return length</li></ol><p>可以看到，在<code>push</code>的时候，即会读取数组的length，又会修改数组的length，如果我们只是执行一次，应该不会出什么问题，但如果我们执行了多次，那就会出现爆栈。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
<span class="token comment">// 第一个副作用函数 </span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span> 

<span class="token comment">// 第二个副作用函数 </span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第一个副作用函数执行，arr.push会读取length属性，从而与 length 属性建立响应联系；当第二个副作用函数执行时，同样会再建立与length的属性，但于此同时还会设置length的值，于是，响应系统尝试把与 length 属性相关联的副作用函数全部取出并执行，其中就包括第一个副作用函数。问题就出在这里，可以发现，第二个副作用函数还未执行完毕，就要再次执行第一个副作用函数了。等到再次执行第一个副作用函数时又会出现上述情况，循环往复，导致调用栈溢出。</li></ul><blockquote><p>在push的时候禁止追踪，push完再追踪</p></blockquote><p><strong>重写push方法</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 一个标记变量，代表是否进行追踪。默认值为 true，即允许追踪 </span>
<span class="token keyword">let</span> shouldTrack <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token comment">// 重写数组的 push 方法 </span>
<span class="token punctuation">[</span><span class="token string">&#39;push&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">method</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 取得原始 push 方法 </span>
    <span class="token keyword">const</span> originMethod <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>method<span class="token punctuation">]</span> 
    <span class="token comment">// 重写 </span>
    arrayInstrumentations<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token comment">// 在调用原始方法之前，禁止追踪 </span>
        shouldTrack <span class="token operator">=</span> <span class="token boolean">false</span> 
        <span class="token comment">// push 方法的默认行为 </span>
        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">originMethod</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span> 
        <span class="token comment">// 在调用原始方法之后，恢复原来的行为，即允许追踪 </span>
        shouldTrack <span class="token operator">=</span> <span class="token boolean">true</span> 
        <span class="token keyword">return</span> res 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>track函数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 当禁止追踪时，直接返回 </span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activeEffect <span class="token operator">||</span> <span class="token operator">!</span>shouldTrack<span class="token punctuation">)</span> <span class="token keyword">return</span> 
    <span class="token comment">// 省略部分代码 </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了 <code>push</code> 方法之外，<code>pop</code>、<code>shift</code>、<code>unshift</code> 以及 <code>splice</code> 等方法都需要做类似的处理。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> shouldTrack <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token comment">// 重写数组的 push、pop、shift、unshift 以及 splice 方法 </span>
<span class="token punctuation">[</span><span class="token string">&#39;push&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shift&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;unshift&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;splice&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">method</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span> 
    <span class="token keyword">const</span> originMethod <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">;</span>
    arrayInstrumentations<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        shouldTrack <span class="token operator">=</span> <span class="token boolean">false</span> 
        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">originMethod</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span> 
        shouldTrack <span class="token operator">=</span> <span class="token boolean">true</span> 
        <span class="token keyword">return</span> res 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-代理set和map" tabindex="-1"><a class="header-anchor" href="#_7-代理set和map"><span>7. 代理Set和Map</span></a></h2><p><strong>Set 类型的原型属性和方法</strong></p><table><thead><tr><th>属性/方法</th><th>描述</th></tr></thead><tbody><tr><td><code>size</code></td><td>返回集合中元素的数量</td></tr><tr><td><code>add(value)</code></td><td>向集合中添加给定的值</td></tr><tr><td><code>delete(value)</code></td><td>从集合中删除给定的值</td></tr><tr><td>values()</td><td>对于 Set 集合类型来说，keys() 与 values() 等价</td></tr><tr><td>keys()</td><td>返回一个迭代器对象。可用于 for...of 循环，迭代 器对象产生的值为集合中的元素值。</td></tr><tr><td>clear()</td><td>清空集合</td></tr><tr><td>has(value)</td><td>判断集合中是否存在给定的值</td></tr><tr><td>entries()</td><td>返回一个迭代器对象。迭代过程中为集合中的每一 个元素产生一个数组值 [value, value]</td></tr><tr><td>forEach(callback[, thisArg])</td><td>forEach 函数会遍历集合中的所有元素，并对每一个元素调用 callback 函数。 forEach 函数接收可选的第二个参数 thisArg，用于指定 callback 函数执行时的 this 值</td></tr></tbody></table><p><strong>Map 类型的原型属性和方法</strong></p><table><thead><tr><th>属性/方法</th><th>描述</th></tr></thead><tbody><tr><td><code>size</code></td><td>返回 Map 数据中的键值对数量</td></tr><tr><td><code>get(key)</code></td><td>读取指定 key 对应的值</td></tr><tr><td><code>set(key, value)</code></td><td>为 Map 设置新的键值对</td></tr><tr><td>values()</td><td>返回一个迭代器对象。迭代过程中会产生键值对的 value 值</td></tr><tr><td>keys()</td><td>返回一个迭代器对象。迭代过程中会产生键值对的 key 值</td></tr><tr><td>clear()</td><td>清空Map</td></tr><tr><td>delete(key)</td><td>删除指定 key 的键值对</td></tr><tr><td>has(key)</td><td>判断 Map 中是否存在指定 key 的键值对</td></tr><tr><td>entries()</td><td>返回一个迭代器对象。迭代过程中会产生由 [key, value] 组成的数组值</td></tr><tr><td><code>forEach(callback[, thisArg])</code></td><td>forEach 函数会遍历 Map 数据的所有键值对，并对每一个键值对调用 callback 函 数。forEach 函数接收可选的第二个参数 thisArg，用于指定 callback 函数执行时的 this 值</td></tr></tbody></table><h3 id="如何代理-set-和-map" tabindex="-1"><a class="header-anchor" href="#如何代理-set-和-map"><span>如何代理 Set 和 Map</span></a></h3><p>在数组中，<code>Array.length</code>是一个属性值，是可以直接通过<code>[[GET]]</code>获取，但是如果你通过<code>Proxy</code>去获取<code>Set.size</code>，那么就会被报错。因为在ECMA中，<code>Set.size</code>其实是一个访问器属性。 它内部使用<code>RequireInternalSlot(this, [[SetData]])</code>检查this（这里指代理对象）是否存在内部槽<code>[[SetData]]</code>，很显然，代理对象不存在 <code>[[SetData]]</code> 这 个内部槽，所以抛出了这个错误。</p><blockquote><p>首先我们封装一个获取变量类型的函数，然后当数据是<code>Set</code>并且获取size的时候，让this指向本身，自然能够正确执行。</p></blockquote>`,28),on=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" s "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token keyword"},"const"),s(" p "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"("),s("s"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("key "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'size'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token comment"},"// 如果读取的是 size 属性 "),s(`
            `),n("span",{class:"token comment"},"// 通过指定第三个参数 receiver 为原始对象 target 从而修复问题 "),s(`
            `),n("span",{class:"token keyword"},"return"),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" target"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token punctuation"},"}"),s(` 
        `),n("span",{class:"token comment"},"// 读取其他属性的默认行为 "),s(`
        `),n("span",{class:"token keyword"},"return"),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(` 
    `),n("span",{class:"token punctuation"},"}"),s(` 
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("s"),n("span",{class:"token punctuation"},"."),s("size"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// 3"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),cn=n("p",null,"此时，当使用delete方法删除数据的时候会报错，因为访问 p.size 与访问 p.delete 是不同的。size 是属性，是一个访问器属性，而 delete 是一个方法。当访问 p.delete 时，delete 方法并没有执行，所以修改 receiver并不会改变其执行时的this。",-1),ln=n("blockquote",null,[n("p",null,"调用delete时，将其与原始对象绑定")],-1),pn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" s "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token keyword"},"const"),s(" p "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"("),s("s"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("key "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'size'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" target"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token punctuation"},"}"),s(` 
        `),n("span",{class:"token comment"},"// 将方法与原始数据对象 target 绑定后返回 "),s(`
        `),n("span",{class:"token keyword"},"return"),s(" target"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"bind"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},")"),s(` 
    `),n("span",{class:"token punctuation"},"}"),s(` 
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 

`),n("span",{class:"token comment"},"// 调用 delete 方法删除值为 1 的元素，正确执行 "),s(`
p`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"delete"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),un=a(`<blockquote><p>将其封装到createReactive函数中（暂不考虑与之前代码的冲突）</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createReactive</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> isShallow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> isReadonly <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span> 
        <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;size&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> target<span class="token punctuation">)</span> 
            <span class="token punctuation">}</span> 
            <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> 
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="建立响应式" tabindex="-1"><a class="header-anchor" href="#建立响应式"><span>建立响应式</span></a></h3><blockquote><p>在访问 <code>size</code> 属性时调用 <code>track</code> 函数进行依赖追踪，然后在 <code>add</code> 方法执行时调用<code>trigger</code> 函数触发响应（我们需要自定义add方法）</p></blockquote><p><strong>createReactive函数</strong></p>`,5),rn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"createReactive"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("obj"),n("span",{class:"token punctuation"},","),s(" isShallow "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(" isReadonly "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" receiver"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("key "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'raw'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(` target
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("key "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'size'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token comment"},"// 调用 track 函数建立响应联系 "),s(`
                `),n("span",{class:"token function"},"track"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"ITERATE_KEY"),n("span",{class:"token punctuation"},")"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(" Reflect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" target"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token comment"},"// 返回定义在 mutableInstrumentations 对象下的方法"),s(`
            `),n("span",{class:"token keyword"},"return"),s(" mutableInstrumentations"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(` 
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),kn=a(`<p><strong>mutableInstrumentations对象</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 定义一个对象，将自定义的 add 方法定义到该对象下 </span>
<span class="token keyword">const</span> mutableInstrumentations <span class="token operator">=</span> <span class="token punctuation">{</span> 
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token comment">// this 仍然指向的是代理对象，通过 raw 属性获取原始数据对象 </span>
        <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>raw 
        <span class="token comment">// 通过原始数据对象执行 add 方法添加具体的值， </span>
        <span class="token comment">// 注意，这里不再需要 .bind 了，因为是直接通过 target 调用并执行的 </span>
        <span class="token keyword">const</span> res <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> 
        <span class="token comment">// 调用 trigger 函数触发响应，并指定操作类型为 ADD </span>
        <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&#39;ADD&#39;</span><span class="token punctuation">)</span> 
        <span class="token comment">// 返回操作结果 </span>
        <span class="token keyword">return</span> res 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><mark>指定了操作类型为 ADD</mark></li></ul><blockquote><p>如果调用 <code>add</code> 方法添加的元素已经存在于 <code>Set</code> 集合中了， 就不再需要触发响应了</p></blockquote><p><strong>mutableInstrumentations对象</strong></p>`,5),dn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" mutableInstrumentations "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token keyword"},"const"),s(" target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s(`raw 
        `),n("span",{class:"token comment"},"// 先判断值是否已经存在 "),s(`
        `),n("span",{class:"token keyword"},"const"),s(" hadKey "),n("span",{class:"token operator"},"="),s(" target"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"has"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token comment"},"// 只有在值不存在的情况下，才需要触发响应 "),s(`
        `),n("span",{class:"token keyword"},"const"),s(" res "),n("span",{class:"token operator"},"="),s(" target"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("hadKey"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token function"},"trigger"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'ADD'"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token punctuation"},"}"),s(` 
        `),n("span",{class:"token keyword"},"return"),s(` res 
    `),n("span",{class:"token punctuation"},"}"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),vn=a(`<blockquote><p>delete 方法的实现同上</p></blockquote><p><strong>mutableInstrumentations对象</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mutableInstrumentations <span class="token operator">=</span> <span class="token punctuation">{</span> 
    <span class="token keyword">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>raw 
        <span class="token keyword">const</span> hadKey <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> 
        <span class="token keyword">const</span> res <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> 
        <span class="token comment">// 当要删除的元素确实存在时，才触发响应 </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hadKey<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">&#39;DELETE&#39;</span><span class="token punctuation">)</span> 
        <span class="token punctuation">}</span> 
        <span class="token keyword">return</span> res 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>delete 方法只有在要删除的元素确实在集合中存在时，才需要触发响应，这一点恰好与 add 方法相反</li></ul><h3 id="避免污染原始数据" tabindex="-1"><a class="header-anchor" href="#避免污染原始数据"><span>避免污染原始数据</span></a></h3><p>有了实现 add、delete 等方法的经验，我们可以对应实现Map的get 和 set 这两个方法。</p><blockquote><p>当调用 <code>get</code> 方法读 取数据时，需要调用 <code>track</code> 函数追踪依赖建立响应联系；当调用 <code>set</code> 方法设置数据时，需要调用 <code>trigger</code> 方法触发响应</p></blockquote><p><strong>mutableInstrumentation对象</strong></p>`,8),bn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" mutableInstrumentations "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token comment"},"// 获取原始对象 "),s(`
        `),n("span",{class:"token keyword"},"const"),s(" target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s(`raw 
        `),n("span",{class:"token comment"},"// 判断读取的 key 是否存在 "),s(`
        `),n("span",{class:"token keyword"},"const"),s(" had "),n("span",{class:"token operator"},"="),s(" target"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"has"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token comment"},"// 追踪依赖，建立响应联系 "),s(`
        `),n("span",{class:"token function"},"track"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token comment"},"// 如果存在，则返回结果。这里要注意的是，如果得到的结果 res 仍然是可代理的数据， "),s(`
        `),n("span",{class:"token comment"},"// 则要返回使用 reactive 包装后的响应式数据 "),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("had"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"const"),s(" res "),n("span",{class:"token operator"},"="),s(" target"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"typeof"),s(" res "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'object'"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token function"},"reactive"),n("span",{class:"token punctuation"},"("),s("res"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},":"),s(` res 
        `),n("span",{class:"token punctuation"},"}"),s(` 
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token keyword"},"const"),s(" target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s(`raw 
        `),n("span",{class:"token keyword"},"const"),s(" had "),n("span",{class:"token operator"},"="),s(" target"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"has"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token comment"},"// 获取旧值 "),s(`
        `),n("span",{class:"token keyword"},"const"),s(" oldValue "),n("span",{class:"token operator"},"="),s(" target"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token comment"},"// 设置新值 "),s(`
        target`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token comment"},"// 如果不存在，则说明是 ADD 类型的操作，意味着新增 "),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("had"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token function"},"trigger"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'ADD'"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("oldValue "),n("span",{class:"token operator"},"!=="),s(" value "),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token punctuation"},"("),s("oldValue "),n("span",{class:"token operator"},"==="),s(" oldValue "),n("span",{class:"token operator"},"&&"),s(" value "),n("span",{class:"token operator"},"==="),s(" value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token comment"},"// 如果不存在，并且值变了，则是 SET 类型的操作，意味着修改 "),s(`
            `),n("span",{class:"token function"},"trigger"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'SET'"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token punctuation"},"}"),s(` 
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),mn=a(`<p>此时上述的代码就会出现 <mark>污染原始数据</mark> 的情况</p><blockquote><p>污染原始数据问题</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 原始 Map 对象 m </span>
<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment">// p1 是 m 的代理对象 </span>
<span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// p2 是另外一个代理对象 </span>
p1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;p2&#39;</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token comment">// 为 p1 设置一个键值对，值是代理对象 p2 </span>

<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;p2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment">// 注意，这里我们通过原始数据 m 访问 p2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> 
<span class="token comment">// 注意，这里我们通过原始数据 m 为 p2 设置一个键值对 foo --&gt; 1 </span>
m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;p2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过原始数据 m 来读取数据值，然后又通过原始数据 m 设置数据值，此时发现副作用函数重新执行了。即原始数据也具备响应式，这显然是不合理的。</p><p><mark>原因</mark> ：我们把 value 原封不动地设置到了原始数据上<code>target.set(key, value)</code>，如果 value 是响应式数据，就意味着设置到原始对象上的也是响应式数据，我们 <mark>把响应式数据设置到原始数据上的行为称为数据污染</mark> 。</p><blockquote><p>调用 target.set 函数时对值进行检查，响应式数据先通过raw获取原始数据，再进行设置</p></blockquote>`,6),gn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" mutableInstrumentations "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token keyword"},"const"),s(" target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s(`raw 
        `),n("span",{class:"token keyword"},"const"),s(" had "),n("span",{class:"token operator"},"="),s(" target"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"has"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token keyword"},"const"),s(" oldValue "),n("span",{class:"token operator"},"="),s(" target"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(`
        
        `),n("span",{class:"token comment"},"// 获取原始数据，由于 value 本身可能已经是原始数据，所以此时value.raw 不存在，则直接使用 value "),s(`
        `),n("span",{class:"token keyword"},"const"),s(" rawValue "),n("span",{class:"token operator"},"="),s(" value"),n("span",{class:"token punctuation"},"."),s("raw "),n("span",{class:"token operator"},"||"),s(` value 
        target`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},","),s(" rawValue"),n("span",{class:"token punctuation"},")"),s(` 

        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("had"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token function"},"trigger"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'ADD'"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("oldValue "),n("span",{class:"token operator"},"!=="),s(" value "),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token punctuation"},"("),s("oldValue "),n("span",{class:"token operator"},"==="),s(" oldValue "),n("span",{class:"token operator"},"&&"),s(`
                                          value `),n("span",{class:"token operator"},"==="),s(" value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token function"},"trigger"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'SET'"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token punctuation"},"}"),s(` 
    `),n("span",{class:"token punctuation"},"}"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),hn=a(`<p>这里存在一个问题，raw 属性可能与用户自定义的 raw 属性冲突，所以在一个严谨的实现中，我们需要使用唯一的标识来作为访问原始数据的键，例如使用 Symbol 类型来代替。</p><h3 id="处理foreach" tabindex="-1"><a class="header-anchor" href="#处理foreach"><span>处理forEach</span></a></h3><p>遍历操作只与键值对的数量有关，因此任何会修改 Map 对象键值对数量的操作都应该触发副作用函数重新执行。</p><blockquote><p>让副作用函数与 <code>ITERATE_KEY</code> 建立响应联系</p></blockquote><p><strong>mutableInstrumentations对象</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mutableInstrumentations <span class="token operator">=</span> <span class="token punctuation">{</span> 
    <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token comment">// 取得原始数据对象 </span>
        <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>raw 
        <span class="token comment">// 与 ITERATE_KEY 建立响应联系 </span>
        <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token constant">ITERATE_KEY</span><span class="token punctuation">)</span> 
        <span class="token comment">// 通过原始数据对象调用 forEach 方法，并把 callback 传递过去 </span>
        target<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接通过原始数据对象调用 forEach 方法，并把 callback 传递过去，这意味着，传递给 callback 回调函数的参数将是非响应式数据。</p><blockquote><p>将callback 函数的参数转换成响应式的</p></blockquote><p><strong>mutableInstrumentations对象</strong></p>`,9),yn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" mutableInstrumentations "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"callback"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token comment"},"// wrap 函数用来把可代理的值转换为响应式数据"),s(`
        `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"wrap"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"val"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"typeof"),s(" val "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'object'"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token function"},"reactive"),n("span",{class:"token punctuation"},"("),s("val"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},":"),s(` val
        `),n("span",{class:"token keyword"},"const"),s(" target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s(`raw 
        `),n("span",{class:"token function"},"track"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"ITERATE_KEY"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token comment"},"// 通过原始数据对象调用 forEach 方法"),s(`
        target`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("v"),n("span",{class:"token punctuation"},","),s(" k")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token comment"},"// 手动调用 callback，用 wrap 函数包裹 value 和 key 后再传给callback，这样就实现了深响应 "),s(`
            `),n("span",{class:"token function"},"callback"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"wrap"),n("span",{class:"token punctuation"},"("),s("v"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"wrap"),n("span",{class:"token punctuation"},"("),s("k"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),fn=n("blockquote",null,[n("p",null,"添加自定义forEach 函数的第三个参数")],-1),wn=n("p",null,[n("strong",null,"mutableInstrumentations对象")],-1),jn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" mutableInstrumentations "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token comment"},"// 接收第二个参数 "),s(`
    `),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("callback"),n("span",{class:"token punctuation"},","),s(" thisArg")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"wrap"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"val"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"typeof"),s(" val "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'object'"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token function"},"reactive"),n("span",{class:"token punctuation"},"("),s("val"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},":"),s(` val 
        `),n("span",{class:"token keyword"},"const"),s(" target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s(`raw 
        `),n("span",{class:"token function"},"track"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"ITERATE_KEY"),n("span",{class:"token punctuation"},")"),s(` 

        target`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("v"),n("span",{class:"token punctuation"},","),s(" k")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token comment"},"// 通过 .call 调用 callback，并传递 thisArg "),s(`
            `),n("span",{class:"token function"},"callback"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),s("thisArg"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"wrap"),n("span",{class:"token punctuation"},"("),s("v"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"wrap"),n("span",{class:"token punctuation"},"("),s("k"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},")"),s(` 
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 
    `),n("span",{class:"token punctuation"},"}"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_n=n("blockquote",null,[n("p",null,[s("当使用 "),n("code",null,"forEach"),s(" 遍历 "),n("code",null,"Map"),s(" 类型的数据时，它既关心键，又关心值。所以使用"),n("code",null,"set"),s("修改值时同样应该触发副作用函数重新执行。")])],-1),En=n("p",null,[n("strong",null,"trigger函数")],-1),xn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"trigger"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" type"),n("span",{class:"token punctuation"},","),s(" newVal")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
	`),n("span",{class:"token comment"},"// 省略部分内容 "),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("type "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'ADD'"),s(),n("span",{class:"token operator"},"||"),s(" type "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'DELETE'"),s(),n("span",{class:"token operator"},"||"),s(` 
        `),n("span",{class:"token comment"},"// 如果操作类型是 SET，并且目标对象是 Map 类型的数据， "),s(`
        `),n("span",{class:"token comment"},"// 也应该触发那些与 ITERATE_KEY 相关联的副作用函数重新执行 "),s(`
        `),n("span",{class:"token punctuation"},"("),s(` 
            type `),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'SET'"),s(),n("span",{class:"token operator"},"&&"),s(` 
            `),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},"."),s("prototype"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toString"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"call"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'[object Map]'"),s(` 
        `),n("span",{class:"token punctuation"},")"),s(` 
    `),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token keyword"},"const"),s(" iterateEffects "),n("span",{class:"token operator"},"="),s(" depsMap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"ITERATE_KEY"),n("span",{class:"token punctuation"},")"),s(` 
        iterateEffects `),n("span",{class:"token operator"},"&&"),s(" iterateEffects"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"effectFn"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("effectFn "),n("span",{class:"token operator"},"!=="),s(" activeEffect"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                effectsToRun`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("effectFn"),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(` 
    `),n("span",{class:"token punctuation"},"}"),s(` 
    `),n("span",{class:"token comment"},"// 省略部分内容 "),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Rn=a(`<h3 id="迭代器方法" tabindex="-1"><a class="header-anchor" href="#迭代器方法"><span>迭代器方法</span></a></h3><p>以目前的实现，我们直接使用<code>for...of</code>遍历代理对象是行不通的，因为一个对象能否迭代，取决于该对象是否实现了迭代协议，即<code>Symbol.iterator</code> 方法，很明显代理对象没有。</p><p>但实际上循环代理对象时，内部会试图从代理对象 p 上读取 <code>p[Symbol.iterator]</code> 属性，我们使用上文类似的方法添加这个方法。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mutableInstrumentations <span class="token operator">=</span> <span class="token punctuation">{</span> 
    <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token comment">// 获取原始数据对象 target </span>
        <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>raw 
        <span class="token comment">// 获取原始迭代器方法 </span>
        <span class="token keyword">const</span> itr <span class="token operator">=</span> target<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
        <span class="token comment">// 将其返回 </span>
        <span class="token keyword">return</span> itr 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果迭代产生的值也是可以被代理s的，那么也应该将其包装成响应式数据，并添加<code>track</code>函数</p></blockquote>`,5),Tn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" mutableInstrumentations "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token punctuation"},"["),s("Symbol"),n("span",{class:"token punctuation"},"."),s("iterator"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token keyword"},"const"),s(" target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s(`raw 
        `),n("span",{class:"token keyword"},"const"),s(" itr "),n("span",{class:"token operator"},"="),s(" target"),n("span",{class:"token punctuation"},"["),s("Symbol"),n("span",{class:"token punctuation"},"."),s("iterator"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(` 

        `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"wrap"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"val"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"typeof"),s(" val "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'object'"),s(),n("span",{class:"token operator"},"&&"),s(" val "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token function"},"reactive"),n("span",{class:"token punctuation"},"("),s("val"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},":"),s(` val 

        `),n("span",{class:"token comment"},"// 调用 track 函数建立响应联系 "),s(`
        `),n("span",{class:"token function"},"track"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"ITERATE_KEY"),n("span",{class:"token punctuation"},")"),s(`
        
        `),n("span",{class:"token comment"},"// 返回自定义的迭代器 "),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token comment"},"// 调用原始迭代器的 next 方法获取 value 和 done "),s(`
                `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" value"),n("span",{class:"token punctuation"},","),s(" done "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(" itr"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(` 
                `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                    `),n("span",{class:"token comment"},"// 如果 value 不是 undefined，则对其进行包裹 "),s(`
                    `),n("span",{class:"token literal-property property"},"value"),n("span",{class:"token operator"},":"),s(" value "),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token function"},"wrap"),n("span",{class:"token punctuation"},"("),s("value"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"wrap"),n("span",{class:"token punctuation"},"("),s("value"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},":"),s("value"),n("span",{class:"token punctuation"},","),s(` 
                    done 
                `),n("span",{class:"token punctuation"},"}"),s(` 
            `),n("span",{class:"token punctuation"},"}"),s(` 
        `),n("span",{class:"token punctuation"},"}"),s(` 
    `),n("span",{class:"token punctuation"},"}"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),An=n("blockquote",null,[n("p",null,[n("code",null,"p.entries"),s(" 与 "),n("code",null,"p[Symbol.iterator]"),s(" 等价，将公共代码抽离进行复用")])],-1),Pn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" mutableInstrumentations "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token comment"},"// 共用 iterationMethod 方法 "),s(`
    `),n("span",{class:"token punctuation"},"["),s("Symbol"),n("span",{class:"token punctuation"},"."),s("iterator"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},":"),s(" iterationMethod"),n("span",{class:"token punctuation"},","),s(` 
    `),n("span",{class:"token literal-property property"},"entries"),n("span",{class:"token operator"},":"),s(` iterationMethod 
`),n("span",{class:"token punctuation"},"}"),s(` 

`),n("span",{class:"token comment"},"// 抽离为独立的函数，便于复用 "),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"iterationMethod"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token keyword"},"const"),s(" target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s(`raw 
    `),n("span",{class:"token keyword"},"const"),s(" itr "),n("span",{class:"token operator"},"="),s(" target"),n("span",{class:"token punctuation"},"["),s("Symbol"),n("span",{class:"token punctuation"},"."),s("iterator"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(` 
    `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"wrap"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"val"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"typeof"),s(" val "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'object'"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token function"},"reactive"),n("span",{class:"token punctuation"},"("),s("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(` val 
    `),n("span",{class:"token function"},"track"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"ITERATE_KEY"),n("span",{class:"token punctuation"},")"),s(` 
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" value"),n("span",{class:"token punctuation"},","),s(" done "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(" itr"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token literal-property property"},"value"),n("span",{class:"token operator"},":"),s(" value "),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token function"},"wrap"),n("span",{class:"token punctuation"},"("),s("value"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"wrap"),n("span",{class:"token punctuation"},"("),s("value"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},":"),s(" value"),n("span",{class:"token punctuation"},","),s(` 
                done 
            `),n("span",{class:"token punctuation"},"}"),s(` 
        `),n("span",{class:"token punctuation"},"}"),s(` 
    `),n("span",{class:"token punctuation"},"}"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Sn=a(`<p>但这里运行就会出错，因为这样<code>p.entries</code>返回值是一个带有<code>next</code>方法的对象，它实现了 <mark>迭代器协议</mark> ，但是没有实现 <mark>可迭代协议</mark> （一个对象实现了 <code>Symbol.iterator</code> 方法），所以为上面返回值添加可迭代协议。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">iterationMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 省略部分代码</span>
    <span class="token comment">// 迭代器协议</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> 
        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span> <span class="token operator">=</span> itr<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
            <span class="token keyword">return</span> <span class="token punctuation">{</span> 
                <span class="token literal-property property">value</span><span class="token operator">:</span> value <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token function">wrap</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">wrap</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">:</span> value<span class="token punctuation">,</span> 
                done 
            <span class="token punctuation">}</span> 
        <span class="token punctuation">}</span> 
        <span class="token comment">// 实现可迭代协议 </span>
        <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token keyword">return</span> <span class="token keyword">this</span> 
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="values-与-keys-方法" tabindex="-1"><a class="header-anchor" href="#values-与-keys-方法"><span>values 与 keys 方法</span></a></h3><blockquote><p>values 方法的实现与 entries 方法类似，只是得到的仅仅是Map数据的值，而不是键值对。</p></blockquote>`,4),Mn=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" mutableInstrumentations "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token comment"},"// 共用 iterationMethod 方法 "),s(`
    `),n("span",{class:"token punctuation"},"["),s("Symbol"),n("span",{class:"token punctuation"},"."),s("iterator"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},":"),s(" iterationMethod"),n("span",{class:"token punctuation"},","),s(` 
    `),n("span",{class:"token literal-property property"},"entries"),n("span",{class:"token operator"},":"),s(" iterationMethod"),n("span",{class:"token punctuation"},","),s(` 
    `),n("span",{class:"token literal-property property"},"values"),n("span",{class:"token operator"},":"),s(` valuesIterationMethod 
`),n("span",{class:"token punctuation"},"}"),s(` 

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"valuesIterationMethod"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token comment"},"// 获取原始数据对象 target "),s(`
    `),n("span",{class:"token keyword"},"const"),s(" target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s(`raw 
    `),n("span",{class:"token comment"},"// 通过 target.values 获取原始迭代器方法 "),s(`
    `),n("span",{class:"token keyword"},"const"),s(" itr "),n("span",{class:"token operator"},"="),s(" target"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"values"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(` 
    `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"wrap"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"val"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"typeof"),s(" val "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'object'"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token function"},"reactive"),n("span",{class:"token punctuation"},"("),s("val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(` val 
    `),n("span",{class:"token function"},"track"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"ITERATE_KEY"),n("span",{class:"token punctuation"},")"),s(` 

    `),n("span",{class:"token comment"},"// 将其返回 "),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" value"),n("span",{class:"token punctuation"},","),s(" done "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(" itr"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token comment"},"// value 是值，而非键值对，所以只需要包裹 value 即可 "),s(`
                `),n("span",{class:"token literal-property property"},"value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"wrap"),n("span",{class:"token punctuation"},"("),s("value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(` 
                done 
            `),n("span",{class:"token punctuation"},"}"),s(` 
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(` 
        `),n("span",{class:"token punctuation"},"["),s("Symbol"),n("span",{class:"token punctuation"},"."),s("iterator"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"this"),s(` 
        `),n("span",{class:"token punctuation"},"}"),s(` 
    `),n("span",{class:"token punctuation"},"}"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Vn=a("<ul><li>将上面高亮部分替换为： <code>const itr = target.keys()</code>即实现<code>keys</code>方法的代理</li></ul><blockquote><p>使用 <code>for...of</code> 循环遍历 <code>p.keys</code>，然后调用 <code>p.set(&#39;key2&#39;, &#39;value3&#39;)</code>会导致副作用函数重新应该执行</p></blockquote><p><mark>原因</mark> ：前面设置了Map数据中，即使操作类型为 SET，也会触发那些与 ITERATE_KEY 相关联的副作用函数重新执行。</p><p>这对于 values 或 entries 等方法来说是必需的，但对于 keys 方法来说则没有必要，因为 keys 方法只关心 Map 类型数据的键的变 化，而不关心值的变化。</p>",4),In=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token constant"},"MAP_KEY_ITERATE_KEY"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"Symbol"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(` 
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"keysIterationMethod"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
    `),n("span",{class:"token comment"},"// 获取原始数据对象 target "),s(`
    `),n("span",{class:"token keyword"},"const"),s(" target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s(`raw 
    `),n("span",{class:"token comment"},"// 获取原始迭代器方法 "),s(`
    `),n("span",{class:"token keyword"},"const"),s(" itr "),n("span",{class:"token operator"},"="),s(" target"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"keys"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(` 
    `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"wrap"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"val"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"typeof"),s(" val "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'object'"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token function"},"reactive"),n("span",{class:"token punctuation"},"("),s("val"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},":"),s(` val 
    `),n("span",{class:"token comment"},"// 调用 track 函数追踪依赖，在副作用函数与 MAP_KEY_ITERATE_KEY 之间建立响应联系 "),s(`
    `),n("span",{class:"token function"},"track"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"MAP_KEY_ITERATE_KEY"),n("span",{class:"token punctuation"},")"),s(` 
    `),n("span",{class:"token comment"},"// 将其返回 "),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(` 
        `),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" value"),n("span",{class:"token punctuation"},","),s(" done "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(" itr"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(` 
                `),n("span",{class:"token literal-property property"},"value"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"wrap"),n("span",{class:"token punctuation"},"("),s("value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(` 
                done 
            `),n("span",{class:"token punctuation"},"}"),s(` 
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(` 
        `),n("span",{class:"token punctuation"},"["),s("Symbol"),n("span",{class:"token punctuation"},"."),s("iterator"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(` 
            `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"this"),s(` 
        `),n("span",{class:"token punctuation"},"}"),s(` 
    `),n("span",{class:"token punctuation"},"}"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Dn=a(`<p><strong>trigger函数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> type<span class="token punctuation">,</span> newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 省略其他代码 </span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> 
        <span class="token comment">// 操作类型为 ADD 或 DELETE </span>
        <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&#39;ADD&#39;</span> <span class="token operator">||</span> type <span class="token operator">===</span> <span class="token string">&#39;DELETE&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> 
        <span class="token comment">// 并且是 Map 类型的数据 </span>
        <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Map]&#39;</span> 
    <span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token comment">// 则取出那些与 MAP_KEY_ITERATE_KEY 相关联的副作用函数并执行 </span>
        <span class="token keyword">const</span> iterateEffects <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">MAP_KEY_ITERATE_KEY</span><span class="token punctuation">)</span> 
        iterateEffects <span class="token operator">&amp;&amp;</span> iterateEffects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
            <span class="token keyword">if</span> <span class="token punctuation">(</span>effectFn <span class="token operator">!==</span> activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                effectsToRun<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span> 
            <span class="token punctuation">}</span> 
        <span class="token punctuation">}</span><span class="token punctuation">)</span> 
    <span class="token punctuation">}</span> 
    <span class="token comment">// 省略其他代码 </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),qn=[u,r,k,d,v,b,m,g,h,y,f,w,j,_,E,x,R,T,A,P,S,M,V,I,D,q,K,F,Y,O,z,N,C,L,G,B,J,$,Z,H,Q,U,W,X,nn,sn,an,tn,en,on,cn,ln,pn,un,rn,kn,dn,vn,bn,mn,gn,hn,yn,fn,wn,jn,_n,En,xn,Rn,Tn,An,Pn,Sn,Mn,Vn,In,Dn];function Kn(Fn,Yn){return e(),o("div",null,qn)}const Nn=t(i,[["render",Kn],["__file","vuejs5.html.vue"]]),Cn=JSON.parse('{"path":"/source_code/vue3/vuejs5.html","title":"五、非原始值的响应式方案","lang":"zh-CN","frontmatter":{"description":"五、非原始值的响应式方案 霍春阳《Vue.js设计与实现》的笔记 1. 理解Proxy和Reflect 使用 Proxy 可以创建一个代理对象。它能够实现对 其他对象 的代理。而代理，指的是对一个对象 基本语义 的代理。它允许我们拦截并重新定义对一个对象的基本操作。 Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/source_code/vue3/vuejs5.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"五、非原始值的响应式方案"}],["meta",{"property":"og:description","content":"五、非原始值的响应式方案 霍春阳《Vue.js设计与实现》的笔记 1. 理解Proxy和Reflect 使用 Proxy 可以创建一个代理对象。它能够实现对 其他对象 的代理。而代理，指的是对一个对象 基本语义 的代理。它允许我们拦截并重新定义对一个对象的基本操作。 Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T13:13:32.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-03-19T13:13:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"五、非原始值的响应式方案\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-19T13:13:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 理解Proxy和Reflect","slug":"_1-理解proxy和reflect","link":"#_1-理解proxy和reflect","children":[{"level":3,"title":"target[key]","slug":"target-key","link":"#target-key","children":[]},{"level":3,"title":"理解JS对象和Proxy工作原理","slug":"理解js对象和proxy工作原理","link":"#理解js对象和proxy工作原理","children":[]}]},{"level":2,"title":"2. 代理函数的完善","slug":"_2-代理函数的完善","link":"#_2-代理函数的完善","children":[{"level":3,"title":"in操作符的拦截","slug":"in操作符的拦截","link":"#in操作符的拦截","children":[]},{"level":3,"title":"for...in操作符的拦截","slug":"for-in操作符的拦截","link":"#for-in操作符的拦截","children":[]},{"level":3,"title":"代理 delete 操作符","slug":"代理-delete-操作符","link":"#代理-delete-操作符","children":[]}]},{"level":2,"title":"3. 合理触发响应","slug":"_3-合理触发响应","link":"#_3-合理触发响应","children":[]},{"level":2,"title":"4. 浅响应和深响应","slug":"_4-浅响应和深响应","link":"#_4-浅响应和深响应","children":[{"level":3,"title":"实现深响应","slug":"实现深响应","link":"#实现深响应","children":[]},{"level":3,"title":"完成深浅响应","slug":"完成深浅响应","link":"#完成深浅响应","children":[]}]},{"level":2,"title":"5. 只读和浅只读","slug":"_5-只读和浅只读","link":"#_5-只读和浅只读","children":[]},{"level":2,"title":"6. 代理数组","slug":"_6-代理数组","link":"#_6-代理数组","children":[{"level":3,"title":"数组的索引与 length","slug":"数组的索引与-length","link":"#数组的索引与-length","children":[]},{"level":3,"title":"遍历数组","slug":"遍历数组","link":"#遍历数组","children":[]},{"level":3,"title":"数组的查找方法","slug":"数组的查找方法","link":"#数组的查找方法","children":[]},{"level":3,"title":"隐式修改数组长度的原型方法","slug":"隐式修改数组长度的原型方法","link":"#隐式修改数组长度的原型方法","children":[]}]},{"level":2,"title":"7. 代理Set和Map","slug":"_7-代理set和map","link":"#_7-代理set和map","children":[{"level":3,"title":"如何代理 Set 和 Map","slug":"如何代理-set-和-map","link":"#如何代理-set-和-map","children":[]},{"level":3,"title":"建立响应式","slug":"建立响应式","link":"#建立响应式","children":[]},{"level":3,"title":"避免污染原始数据","slug":"避免污染原始数据","link":"#避免污染原始数据","children":[]},{"level":3,"title":"处理forEach","slug":"处理foreach","link":"#处理foreach","children":[]},{"level":3,"title":"迭代器方法","slug":"迭代器方法","link":"#迭代器方法","children":[]},{"level":3,"title":"values 与 keys 方法","slug":"values-与-keys-方法","link":"#values-与-keys-方法","children":[]}]}],"git":{"createdTime":1710854012000,"updatedTime":1710854012000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":1}]},"readingTime":{"minutes":31.36,"words":9407},"filePathRelative":"source_code/vue3/vuejs5.md","localizedDate":"2024年3月19日","excerpt":"\\n<blockquote>\\n<p>霍春阳《Vue.js设计与实现》的笔记</p>\\n</blockquote>\\n<h2>1. 理解Proxy和Reflect</h2>\\n<p>使用 <code>Proxy</code> 可以创建一个代理对象。它能够实现对 <mark>其他对象</mark> 的代理。而代理，指的是对一个对象 <mark>基本语义</mark> 的代理。它允许我们拦截并重新定义对一个对象的基本操作。</p>\\n<p><code>Reflect</code>对象的方法与<code>Proxy</code>对象的方法一一对应，只要是<code>Proxy</code>对象的方法，就能在<code>Reflect</code>对象上找到对应的方法。这就让<code>Proxy</code>对象可以方便地调用对应的<code>Reflect</code>方法，完成默认行为，作为修改行为的基础。而且<code>Reflect</code>中的一些函数还能接收第三个参数，即指定接收者 <code>receiver</code>，你可以把它理解为函数调用过程中的 this。</p>","autoDesc":true}');export{Nn as comp,Cn as data};
