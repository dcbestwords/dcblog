import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-qRgzBIvm.js";const e={},p=t(`<h1 id="get-函数" tabindex="-1"><a class="header-anchor" href="#get-函数"><span><strong>_.get() 函数</strong></span></a></h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>补充函数的 TODO 部分，模拟 lodash 中的 _.get() 函数。</p><h2 id="测试用例" tabindex="-1"><a class="header-anchor" href="#测试用例"><span>测试用例</span></a></h2><p>输入：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">toutiao</span><span class="token operator">:</span> <span class="token string">&quot;FE Coder&quot;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;byted&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;selector.to.toutiao&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;target[0]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;target[2].name&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：<code>[&#39;FE coder&#39;, 1, &#39;byted&#39;]</code></p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span>代码</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">object<span class="token punctuation">,</span> <span class="token operator">...</span>path</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 如果object是null，则直接返回undefined即可</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>object <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 对path逐个处理，并依靠map方法，返回处理结果</span>
    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 第1步，先处理下标\`[*]\`情况，并转换为数组</span>
        <span class="token comment">// a[3].b.c =&gt; a.3.b.c =&gt; [a, 3, b, c]</span>
        <span class="token keyword">const</span> keys <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\[(\\d+)\\]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;.$1&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> result <span class="token operator">=</span> object<span class="token punctuation">;</span>
        <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> length <span class="token operator">=</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

        <span class="token comment">// 逐级获取object的下标结果</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>result <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> result <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            result <span class="token operator">=</span> result<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 最终返回结果，只有遍历完keys，才返回result，否则，视为中途出错，返回undefined</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>index <span class="token operator">&amp;&amp;</span> index <span class="token operator">==</span> length<span class="token punctuation">)</span> <span class="token operator">?</span> result <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),o=[p];function c(l,r){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","mock_get.html.vue"]]),d=JSON.parse(`{"path":"/source_code/lodash/mock_get.html","title":"_.get() 函数","lang":"zh-CN","frontmatter":{"description":"_.get() 函数 题目描述 补充函数的 TODO 部分，模拟 lodash 中的 _.get() 函数。 测试用例 输入： 输出：['FE coder', 1, 'byted'] 代码","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/source_code/lodash/mock_get.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"_.get() 函数"}],["meta",{"property":"og:description","content":"_.get() 函数 题目描述 补充函数的 TODO 部分，模拟 lodash 中的 _.get() 函数。 测试用例 输入： 输出：['FE coder', 1, 'byted'] 代码"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T13:13:32.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-03-19T13:13:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"_.get() 函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-19T13:13:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]},{"level":2,"title":"测试用例","slug":"测试用例","link":"#测试用例","children":[]},{"level":2,"title":"代码","slug":"代码","link":"#代码","children":[]}],"git":{"createdTime":1710854012000,"updatedTime":1710854012000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":1}]},"readingTime":{"minutes":0.69,"words":206},"filePathRelative":"source_code/lodash/mock_get.md","localizedDate":"2024年3月19日","excerpt":"\\n<h2>题目描述</h2>\\n<p>补充函数的 TODO 部分，模拟 lodash 中的 _.get() 函数。</p>\\n<h2>测试用例</h2>\\n<p>输入：</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> obj <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">selector</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">to</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">toutiao</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"FE Coder\\"</span><span class=\\"token punctuation\\">}</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">target</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'byted'</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'selector.to.toutiao'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'target[0]'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'target[2].name'</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}`);export{k as comp,d as data};
