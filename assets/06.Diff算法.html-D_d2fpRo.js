import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as o,e as a,a as n,b as s}from"./app-DX_yn-pD.js";const l="/dcblog/assets/1725592553504-BN_Y68D2.png",p="/dcblog/assets/image-20240906111809019--k4CsfQs.png",c="/dcblog/assets/image-20240906155514474-DEnCHOZI.png",i="/dcblog/assets/1725609798094-D8ZBtKRg.png",u="/dcblog/assets/image-20240906202007944-D88mjORf.png",d="/dcblog/assets/image-20240906202728791-p-4EiDqg.png",r="/dcblog/assets/image-20240907101753827-JKiZ-BGi.png",k="/dcblog/assets/image-20240907103016658-rpCm_LTt.png",m="/dcblog/assets/image-20240907104247784-CEHvlT-6.png",v="/dcblog/assets/image-20240907104406866-BuusosfV.png",h="/dcblog/assets/image-20240907144701736-CAMoDJW8.png",b={},g=a(`<h1 id="_6-diff算法" tabindex="-1"><a class="header-anchor" href="#_6-diff算法"><span>6. Diff算法</span></a></h1><blockquote><p>无论是哪种Diff算法，都遵循同样的处理规则：</p><ul><li>判断是否有节点需要移动，以及应该如何移动；（可复用的节点）</li><li>找出那些需要被添加或移除的节点。（其他的节点）</li></ul></blockquote><h2 id="一、简单diff" tabindex="-1"><a class="header-anchor" href="#一、简单diff"><span>一、简单Diff</span></a></h2><h3 id="_1-不考虑dom复用" tabindex="-1"><a class="header-anchor" href="#_1-不考虑dom复用"><span>1. 不考虑dom复用</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> oldChildren <span class="token operator">=</span> n1<span class="token punctuation">.</span>children
<span class="token keyword">const</span> newChildren <span class="token operator">=</span> n2<span class="token punctuation">.</span>children
<span class="token comment">// 旧的一组子节点的长度</span>
<span class="token keyword">const</span> oldLen <span class="token operator">=</span> oldChildren<span class="token punctuation">.</span>length
<span class="token comment">// 新的一组子节点的长度</span>
<span class="token keyword">const</span> newLen <span class="token operator">=</span> newChildren<span class="token punctuation">.</span>length
<span class="token comment">// 两组子节点的公共长度，即两者中较短的那一组子节点的长度</span>
<span class="token keyword">const</span> commonLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>oldLen<span class="token punctuation">,</span> newLen<span class="token punctuation">)</span>
<span class="token comment">// 遍历 commonLength 次</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> commonLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">patch</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> newChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 如果 newLen &gt; oldLen，说明有新子节点需要挂载</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>newLen <span class="token operator">&gt;</span> oldLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> commonLength<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> newChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldLen <span class="token operator">&gt;</span> newLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果 oldLen &gt; newLen，说明有旧子节点需要卸载</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> commonLength<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oldLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">unmount</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-考虑dom复用" tabindex="-1"><a class="header-anchor" href="#_2-考虑dom复用"><span>2. 考虑dom复用</span></a></h3><p>在patch时，很多时候新旧节点之间存在相同的子节点，二者仅仅是顺序不同，为了提高性能，我们需要复用这些节点，<mark>通过 DOM 的移动来完成子节点的更新</mark> 。</p><table><thead><tr><th>问题</th><th>回答</th></tr></thead><tbody><tr><td>如何确定哪些节点可复用</td><td>新旧节点中key值相同</td></tr><tr><td>如何判断一个节点是否需要移动</td><td>节点在旧 children 中的索引小于最大索引值lastIndex</td></tr><tr><td>一个节点该移动到哪里</td><td>新 children 的顺序就是更新后真实 DOM 节点应有的顺序</td></tr><tr><td>如何确定新增节点</td><td>新节点没有在旧的一组子节点中找到可复用的节点</td></tr><tr><td>如何确定卸载节点</td><td>遍历完旧的children依然存在新children中没有的节点</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> oldChildren <span class="token operator">=</span> n1<span class="token punctuation">.</span>children
<span class="token keyword">const</span> newChildren <span class="token operator">=</span> n2<span class="token punctuation">.</span>children
<span class="token comment">// 用来存储寻找过程中遇到的最大索引值</span>
<span class="token keyword">let</span> lastIndex <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> newVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span>  
    <span class="token comment">// 在第一层循环中定义变量 find，代表是否在旧的一组子节点中找到可复用的节点，</span>
    <span class="token comment">// 初始值为 false，代表没找到</span>
    <span class="token keyword">let</span> find <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> oldVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        <span class="token comment">// 如果找到了具有相同 key 值的两个节点，说明可以复用，但仍然需要调用patch函数更新</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span>key <span class="token operator">===</span> oldVNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 一旦找到可复用的节点，则将变量 find 的值设为 true</span>
            find <span class="token operator">=</span> <span class="token boolean">true</span>
            <span class="token function">patch</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
            
            <span class="token comment">// 如果当前找到的节点在旧 children 中的索引小于最大索引值lastIndex，</span>
            <span class="token comment">// 说明该节点对应的真实 DOM 需要移动</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 先获取 newVNode 的前一个 vnode，即 prevVNode</span>
                <span class="token keyword">const</span> prevVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
                <span class="token comment">// 如果 prevVNode 不存在，则说明当前 newVNode 是第一个节点，它不需要移动</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>prevVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 由于我们要将 newVNode 对应的真实 DOM 移动到prevVNode 对应真实 DOM后面</span>
                    <span class="token comment">// 所以我们需要获取 prevVNode 所对应真实 DOM 的下一个兄弟节点，并将其作为锚点</span>
                    <span class="token keyword">const</span> anchor <span class="token operator">=</span> prevVNode<span class="token punctuation">.</span>el<span class="token punctuation">.</span>nextSibling
                    <span class="token comment">// 调用 insert 方法将 newVNode 对应的真实 DOM 插入到锚点元素前面，</span>
                    <span class="token comment">// 也就是 prevVNode 对应真实 DOM 的后面</span>
                    <span class="token function">insert</span><span class="token punctuation">(</span>newVNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果当前找到的节点在旧 children 中的索引不小于最大索引值，</span>
                <span class="token comment">// 则更新 lastIndex 的值</span>
                lastIndex <span class="token operator">=</span> j
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 如果代码运行到这里，find 仍然为 false，</span>
    <span class="token comment">// 说明当前 newVNode 没有在旧的一组子节点中找到可复用的节点</span>
    <span class="token comment">// 也就是说，当前 newVNode 是新增节点，需要挂载</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>find<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 为了将节点挂载到正确位置，我们需要先获取锚点元素</span>
        <span class="token comment">// 首先获取当前 newVNode 的前一个 vnode 节点</span>
        <span class="token keyword">const</span> prevVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">let</span> anchor <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>prevVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果有前一个 vnode 节点，则使用它的下一个兄弟节点作为锚点元素</span>
            anchor <span class="token operator">=</span> prevVNode<span class="token punctuation">.</span>el<span class="token punctuation">.</span>nextSibling
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果没有前一个 vnode 节点，说明即将挂载的新节点是第一个子节点</span>
            <span class="token comment">// 这时我们使用容器元素的 firstChild 作为锚点</span>
            anchor <span class="token operator">=</span> container<span class="token punctuation">.</span>firstChild
        <span class="token punctuation">}</span>
        <span class="token comment">// 挂载 newVNode</span>
        <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 遍历旧的一组子节点</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oldChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> oldVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token comment">// 拿旧子节点 oldVNode 去新的一组子节点中寻找具有相同 key 值的节点</span>
    <span class="token keyword">const</span> has <span class="token operator">=</span> newChildren<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>
        <span class="token parameter">vnode</span> <span class="token operator">=&gt;</span> vnode<span class="token punctuation">.</span>key <span class="token operator">===</span> oldVNode<span class="token punctuation">.</span>key
    <span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>has<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果没有找到具有相同 key 值的节点，则说明需要删除该节点</span>
        <span class="token comment">// 调用 unmount 函数将其卸载</span>
        <span class="token function">unmount</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果找到了具有相同 key 值的两个节点，说明可以复用，但仍然需要调用patch函数更新，因为新的虚拟节点子节点的内容可能发生改变。</li><li>移动节点指的是，移动一个虚拟节点所对应的真实 DOM 节点，并不是移动虚拟节点本身。</li></ul><p>简单 Diff 算法的核心逻辑是，拿新的一组子节点中的节点去旧的一组子节点中寻找可复用的节点。如果找到了，则记录该节点的位置索引。我们把这个位置索引称为最大索引。在整个更新过程中，如果一 个节点的索引值小于最大索引，则说明该节点对应的真实 DOM 元素需要移动。</p><h2 id="二、双端diff" tabindex="-1"><a class="header-anchor" href="#二、双端diff"><span>二、双端Diff</span></a></h2><h3 id="_1-简单diff存在的问题" tabindex="-1"><a class="header-anchor" href="#_1-简单diff存在的问题"><span>1. 简单Diff存在的问题</span></a></h3><p>简单 Diff 算法的问题在于，它对 DOM 的移动操作并不是最优的。如下图所示的节点，如果使用简单Diff来更新，会发生两次DOM移动操作。</p><figure><img src="`+l+'" alt="image-20240906111147956" tabindex="0" loading="lazy"><figcaption>image-20240906111147956</figcaption></figure><p>然而我们很容易的可以看出，其实只需要一步 DOM 节点的移动操作就可以完成更新，即只需要把真实 DOM 节点 p-3 移动到真实 DOM 节点 p-1 前面。</p><figure><img src="'+p+'" alt="image-20240906111809019" style="zoom:80%;"></figure><h3 id="_2-双端diff的理想情况" tabindex="-1"><a class="header-anchor" href="#_2-双端diff的理想情况"><span>2. 双端Diff的理想情况</span></a></h3><p>顾名思义，双端 Diff 算法是一种同时对新旧两组子节点的两个端点进行比较的算法。因此我们需要四个索引值，分别指向新旧两组子节点的端点，如图所示。</p><figure><img src="'+c+'" alt="image-20240906155514474" tabindex="0" loading="lazy"><figcaption>image-20240906155514474</figcaption></figure><p>理想情况下假设双端 Diff 算法的每一轮比较都会命中四个步骤中的一种，此时其过程如下图所示</p><figure><img src="'+i+`" alt="双端Diff的过程" tabindex="0" loading="lazy"><figcaption>双端Diff的过程</figcaption></figure><p>对应的代码实现如下</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">patchKeyedChildren</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> oldChildren <span class="token operator">=</span> n1<span class="token punctuation">.</span>children
    <span class="token keyword">const</span> newChildren <span class="token operator">=</span> n2<span class="token punctuation">.</span>children
    <span class="token comment">// 四个索引值</span>
    <span class="token keyword">let</span> oldStartIdx <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">let</span> oldEndIdx <span class="token operator">=</span> oldChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">let</span> newStartIdx <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">let</span> newEndIdx <span class="token operator">=</span> newChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token comment">// 四个索引指向的 vnode 节点</span>
    <span class="token keyword">let</span> oldStartVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>oldStartIdx<span class="token punctuation">]</span>
    <span class="token keyword">let</span> oldEndVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>oldEndIdx<span class="token punctuation">]</span>
    <span class="token keyword">let</span> newStartVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>newStartIdx<span class="token punctuation">]</span>
    <span class="token keyword">let</span> newEndVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>newEndIdx<span class="token punctuation">]</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIdx <span class="token operator">&lt;=</span> oldEndIdx <span class="token operator">&amp;&amp;</span> newStartIdx <span class="token operator">&lt;=</span> newEndIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartVNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartVNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 第一步：oldStartVNode 和 newStartVNode 比较（不用移动）</span>
            <span class="token comment">// 1. patch</span>
            <span class="token function">patch</span><span class="token punctuation">(</span>oldStartVNode<span class="token punctuation">,</span> newStartVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
            <span class="token comment">// 2. 更新相关索引，指向下一个位置</span>
            oldStartVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span>
            newStartVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndVNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndVNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 第二步：oldEndVNode 和 newEndVNode 比较（不用移动）</span>
            <span class="token function">patch</span><span class="token punctuation">(</span>oldEndVNode<span class="token punctuation">,</span> newEndVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
            oldEndVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span>
            newEndVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartVNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndVNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 第三步：oldStartVNode 和 newEndVNode 比较（需要移动）</span>
            <span class="token function">patch</span><span class="token punctuation">(</span>oldStartVNode<span class="token punctuation">,</span> newEndVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
            <span class="token comment">// 将oldStartVNode移动到oldEndVNode的后面</span>
            <span class="token function">insert</span><span class="token punctuation">(</span>oldStartVNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> container<span class="token punctuation">,</span>oldEndVNode<span class="token punctuation">.</span>el<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span>
            oldStartVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span>
            newEndVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndVNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartVNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 第四步：oldEndVNode 和 newStartVNode 比较（需要移动）</span>
            <span class="token function">patch</span><span class="token punctuation">(</span>oldEndVNode<span class="token punctuation">,</span> newStartVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
            <span class="token comment">// oldEndVNode.el 移动到 oldStartVNode.el 前面</span>
            <span class="token function">insert</span><span class="token punctuation">(</span>oldEndVNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> container<span class="token punctuation">,</span> oldStartVNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>
            <span class="token comment">// 移动 DOM 完成后，更新索引值，并指向下一个位置</span>
            oldEndVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span>
            newStartVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-双端diff的非理想情况" tabindex="-1"><a class="header-anchor" href="#_3-双端diff的非理想情况"><span>3. 双端Diff的非理想情况</span></a></h3><p>双端 Diff 算法的每一轮比较不一定都会命中四个步骤中的一种，如下图所示，四次比较都不能命中从而进行复用，此时的做法应该是：<mark>拿新的一组子节点中的头部节点去旧的一组子节点中寻找，如果存在说明此节点可复用，将其移动到旧子节点首节点的前面；如果没有找到，说明此节点为新增节点，将其挂载到头部。</mark></p><figure><img src="`+u+'" alt="可复用的情况" tabindex="0" loading="lazy"><figcaption>可复用的情况</figcaption></figure><figure><img src="'+d+'" alt="新增的情况" tabindex="0" loading="lazy"><figcaption>新增的情况</figcaption></figure><p>另外还存在一个问题是按照这四个步骤遍历完之后，新旧节点中可能存在还未处理的节点，如果存在新子节点未处理，说明需要对其进行挂载；而存在旧子节点未处理，说明需要对其进行卸载。</p>',29),w=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"patchKeyedChildren"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("n1"),n("span",{class:"token punctuation"},","),s(" n2"),n("span",{class:"token punctuation"},","),s(" container")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" oldChildren "),n("span",{class:"token operator"},"="),s(" n1"),n("span",{class:"token punctuation"},"."),s(`children
    `),n("span",{class:"token keyword"},"const"),s(" newChildren "),n("span",{class:"token operator"},"="),s(" n2"),n("span",{class:"token punctuation"},"."),s(`children
    `),n("span",{class:"token comment"},"// 四个索引值"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" oldStartIdx "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" oldEndIdx "),n("span",{class:"token operator"},"="),s(" oldChildren"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" newStartIdx "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" newEndIdx "),n("span",{class:"token operator"},"="),s(" newChildren"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),s(`
    `),n("span",{class:"token comment"},"// 四个索引指向的 vnode 节点"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" oldStartVNode "),n("span",{class:"token operator"},"="),s(" oldChildren"),n("span",{class:"token punctuation"},"["),s("oldStartIdx"),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" oldEndVNode "),n("span",{class:"token operator"},"="),s(" oldChildren"),n("span",{class:"token punctuation"},"["),s("oldEndIdx"),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" newStartVNode "),n("span",{class:"token operator"},"="),s(" newChildren"),n("span",{class:"token punctuation"},"["),s("newStartIdx"),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" newEndVNode "),n("span",{class:"token operator"},"="),s(" newChildren"),n("span",{class:"token punctuation"},"["),s("newEndIdx"),n("span",{class:"token punctuation"},"]"),s(`

    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("oldStartIdx "),n("span",{class:"token operator"},"<="),s(" oldEndIdx "),n("span",{class:"token operator"},"&&"),s(" newStartIdx "),n("span",{class:"token operator"},"<="),s(" newEndIdx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 增加两个判断分支，如果头尾部节点为 undefined，则说明该节点已经被处理过了，直接跳到下一个位置"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("oldStartVNode"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            oldStartVNode `),n("span",{class:"token operator"},"="),s(" oldChildren"),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"++"),s("oldStartIdx"),n("span",{class:"token punctuation"},"]"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("oldEndVNode"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            oldEndVNode `),n("span",{class:"token operator"},"="),s(" oldChildren"),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"--"),s("oldEndIdx"),n("span",{class:"token punctuation"},"]"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("oldStartVNode"),n("span",{class:"token punctuation"},"."),s("key "),n("span",{class:"token operator"},"==="),s(" newStartVNode"),n("span",{class:"token punctuation"},"."),s("key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// 省略部分代码"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("oldEndVNode"),n("span",{class:"token punctuation"},"."),s("key "),n("span",{class:"token operator"},"==="),s(" newEndVNode"),n("span",{class:"token punctuation"},"."),s("key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// 省略部分代码"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("oldStartVNode"),n("span",{class:"token punctuation"},"."),s("key "),n("span",{class:"token operator"},"==="),s(" newEndVNode"),n("span",{class:"token punctuation"},"."),s("key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// 省略部分代码"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("oldEndVNode"),n("span",{class:"token punctuation"},"."),s("key "),n("span",{class:"token operator"},"==="),s(" newStartVNode"),n("span",{class:"token punctuation"},"."),s("key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// 省略部分代码"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"const"),s(" idxInOld "),n("span",{class:"token operator"},"="),s(" oldChildren"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"findIndex"),n("span",{class:"token punctuation"},"("),s(`
                `),n("span",{class:"token parameter"},"node"),s(),n("span",{class:"token operator"},"=>"),s(" node"),n("span",{class:"token punctuation"},"."),s("key "),n("span",{class:"token operator"},"==="),s(" newStartVNode"),n("span",{class:"token punctuation"},"."),s(`key
            `),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token comment"},"// 1. 存在可复用的节点"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("idxInOld "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"const"),s(" vnodeToMove "),n("span",{class:"token operator"},"="),s(" oldChildren"),n("span",{class:"token punctuation"},"["),s("idxInOld"),n("span",{class:"token punctuation"},"]"),s(`
                `),n("span",{class:"token function"},"patch"),n("span",{class:"token punctuation"},"("),s("vnodeToMove"),n("span",{class:"token punctuation"},","),s(" newStartVNode"),n("span",{class:"token punctuation"},","),s(" container"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token function"},"insert"),n("span",{class:"token punctuation"},"("),s("vnodeToMove"),n("span",{class:"token punctuation"},"."),s("el"),n("span",{class:"token punctuation"},","),s(" container"),n("span",{class:"token punctuation"},","),s(" oldStartVNode"),n("span",{class:"token punctuation"},"."),s("el"),n("span",{class:"token punctuation"},")"),s(`
                oldChildren`),n("span",{class:"token punctuation"},"["),s("idxInOld"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"undefined"),s(`
                newStartVNode `),n("span",{class:"token operator"},"="),s(" newChildren"),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"++"),s("newStartIdx"),n("span",{class:"token punctuation"},"]"),s(`
            `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token comment"},"// 2. 新增节点"),s(`
                `),n("span",{class:"token comment"},"// 将 newStartVNode 作为新节点挂载到头部，使用当前头部节点oldStartVNode.el 作为锚点"),s(`
                `),n("span",{class:"token function"},"patch"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(" newStartVNode"),n("span",{class:"token punctuation"},","),s(" container"),n("span",{class:"token punctuation"},","),s(" oldStartVNode"),n("span",{class:"token punctuation"},"."),s("el"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            newStartVNode `),n("span",{class:"token operator"},"="),s(" newChildren"),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"++"),s("newStartIdx"),n("span",{class:"token punctuation"},"]"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token comment"},"// 循环结束后检查索引值的情况，"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("oldEndIdx "),n("span",{class:"token operator"},"<"),s(" oldStartIdx "),n("span",{class:"token operator"},"&&"),s(" newStartIdx "),n("span",{class:"token operator"},"<="),s(" newEndIdx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 如果满足条件，则说明有新的节点遗留，需要挂载它们"),s(`
        `),n("span",{class:"token comment"},"// 3. 新增节点"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(" newStartIdx"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<="),s(" newEndIdx"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token function"},"patch"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(" newChildren"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" container"),n("span",{class:"token punctuation"},","),s(" oldStartVNode"),n("span",{class:"token punctuation"},"."),s("el"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("newEndIdx "),n("span",{class:"token operator"},"<"),s(" newStartIdx "),n("span",{class:"token operator"},"&&"),s(" oldStartIdx "),n("span",{class:"token operator"},"<="),s(" oldEndIdx"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 4. 卸载节点（移除操作）"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(" oldStartIdx"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<="),s(" oldEndIdx"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token function"},"unmount"),n("span",{class:"token punctuation"},"("),s("oldChildren"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," ")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=a('<p>vue2中使用的就是这种双端Diff的算法</p><h2 id="三、快速diff" tabindex="-1"><a class="header-anchor" href="#三、快速diff"><span>三、快速Diff</span></a></h2><h3 id="_1-特殊情况" tabindex="-1"><a class="header-anchor" href="#_1-特殊情况"><span>1. 特殊情况</span></a></h3><p>快速 Diff 算法借鉴了纯文本 Diff 算法中预处理的步骤，对Diff过程两组子节点中 <mark>相同的前置和后置节点</mark> 优先进行处理，因为这部分前后的相对位置不变，不需要进行移动，只需要在两者之间打补丁即可。</p><figure><img src="'+r+`" alt="相同的前置节点和后置节点" tabindex="0" loading="lazy"><figcaption>相同的前置节点和后置节点</figcaption></figure><p>在所有旧子节点处理完毕，而新子节点中还存在未被处理的节点，则这些遗留的节点应该作为新增节点被 <mark>挂载</mark> 。</p><p>在所有新子节点处理完毕，而旧子节点中还存在未被处理的节点，则这些遗留的节点应该被 <mark>卸载</mark> 。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">patchKeyedChildren</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> newChildren <span class="token operator">=</span> n2<span class="token punctuation">.</span>children
    <span class="token keyword">const</span> oldChildren <span class="token operator">=</span> n1<span class="token punctuation">.</span>children

    <span class="token comment">// 1. 更新相同的前置节点</span>
    <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">let</span> oldVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
    <span class="token keyword">let</span> newVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newVNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">patch</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
        j<span class="token operator">++</span>
        oldVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        newVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 2. 更新相同的后置节点</span>
    <span class="token comment">// 由于新旧两组子节点的数量可能不同，所以我们需要两个索引</span>
    <span class="token keyword">let</span> oldEnd <span class="token operator">=</span> oldChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">let</span> newEnd <span class="token operator">=</span> newChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>
    oldVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>oldEnd<span class="token punctuation">]</span>
    newVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>newEnd<span class="token punctuation">]</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newVNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">patch</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
        oldEnd<span class="token operator">--</span>
        newEnd<span class="token operator">--</span>
        oldVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>oldEnd<span class="token punctuation">]</span>
        newVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>newEnd<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 3. 需被挂载的节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> oldEnd <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> newEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 锚点的索引</span>
        <span class="token keyword">const</span> anchorIndex <span class="token operator">=</span> newEnd <span class="token operator">+</span> <span class="token number">1</span> 
        <span class="token comment">// 锚点元素</span>
        <span class="token keyword">const</span> anchor <span class="token operator">=</span> anchorIndex <span class="token operator">&lt;</span> newChildren<span class="token punctuation">.</span>length 
        <span class="token operator">?</span> newChildren<span class="token punctuation">[</span>anchorIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>el 
        <span class="token operator">:</span> <span class="token keyword">null</span>
        <span class="token comment">// 采用 while 循环，调用 patch 函数逐个挂载新增节点</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> newEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> newChildren<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> 
    <span class="token comment">// 4. 需被卸载的节点</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> newEnd <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> oldEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// j -&gt; oldEnd 之间的节点应该被卸载</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> oldEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">unmount</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-一般情况处理" tabindex="-1"><a class="header-anchor" href="#_2-一般情况处理"><span>2. 一般情况处理</span></a></h3><p>在特殊情况下，给出的例子比较理想化，当 处理完相同的前置节点或后置节点后，新旧两组子节点中总会有一组子节点全部被处理完毕。在这种情况下，只需要简单地挂载、卸载节点即可。但一般情况下情况会更加复杂，如图所示：</p><figure><img src="`+k+'" alt="一般情况" tabindex="0" loading="lazy"><figcaption>一般情况</figcaption></figure><p>在处理完相同的前置和后置节点之后，剩下的依然是两组子节点序列。按照通用思路思考，接下来需要找出可复用的节点，是否需要移动，移动到什么位置以及需要进行挂载和删除的其他节点。</p><p>这里大体的思路是：</p><ul><li><p>构造source数组：表示新子节点在旧子节点中的位置索引，长度为新子节点中尚未处理的节点数。</p><figure><img src="'+m+'" alt="source数组" tabindex="0" loading="lazy"><figcaption>source数组</figcaption></figure></li><li><p>构造最长递增子序列：依据source数组构造最长递增子序列，此序列表示其中节点的相对位置没有发生变化。</p><figure><img src="'+v+'" alt="seq为最长递增子序列的索引数组" tabindex="0" loading="lazy"><figcaption>seq为最长递增子序列的索引数组</figcaption></figure></li></ul><p>即找出更新前后顺序没有发生变化的节点，移动剩下的节点从而完成最小的移动次数。</p>',15),y=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"patchKeyedChildren"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("n1"),n("span",{class:"token punctuation"},","),s(" n2"),n("span",{class:"token punctuation"},","),s(" container")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" newChildren "),n("span",{class:"token operator"},"="),s(" n2"),n("span",{class:"token punctuation"},"."),s(`children
    `),n("span",{class:"token keyword"},"const"),s(" oldChildren "),n("span",{class:"token operator"},"="),s(" n1"),n("span",{class:"token punctuation"},"."),s(`children

    `),n("span",{class:"token keyword"},"let"),s(" j "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" oldVNode "),n("span",{class:"token operator"},"="),s(" oldChildren"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" newVNode "),n("span",{class:"token operator"},"="),s(" newChildren"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("oldVNode"),n("span",{class:"token punctuation"},"."),s("key "),n("span",{class:"token operator"},"==="),s(" newVNode"),n("span",{class:"token punctuation"},"."),s("key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token function"},"patch"),n("span",{class:"token punctuation"},"("),s("oldVNode"),n("span",{class:"token punctuation"},","),s(" newVNode"),n("span",{class:"token punctuation"},","),s(" container"),n("span",{class:"token punctuation"},")"),s(`
        j`),n("span",{class:"token operator"},"++"),s(`
        oldVNode `),n("span",{class:"token operator"},"="),s(" oldChildren"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(`
        newVNode `),n("span",{class:"token operator"},"="),s(" newChildren"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"let"),s(" oldEnd "),n("span",{class:"token operator"},"="),s(" oldChildren"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" newEnd "),n("span",{class:"token operator"},"="),s(" newChildren"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),s(`
    oldVNode `),n("span",{class:"token operator"},"="),s(" oldChildren"),n("span",{class:"token punctuation"},"["),s("oldEnd"),n("span",{class:"token punctuation"},"]"),s(`
    newVNode `),n("span",{class:"token operator"},"="),s(" newChildren"),n("span",{class:"token punctuation"},"["),s("newEnd"),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("oldVNode"),n("span",{class:"token punctuation"},"."),s("key "),n("span",{class:"token operator"},"==="),s(" newVNode"),n("span",{class:"token punctuation"},"."),s("key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token function"},"patch"),n("span",{class:"token punctuation"},"("),s("oldVNode"),n("span",{class:"token punctuation"},","),s(" newVNode"),n("span",{class:"token punctuation"},","),s(" container"),n("span",{class:"token punctuation"},")"),s(`
        oldEnd`),n("span",{class:"token operator"},"--"),s(`
        newEnd`),n("span",{class:"token operator"},"--"),s(`
        oldVNode `),n("span",{class:"token operator"},"="),s(" oldChildren"),n("span",{class:"token punctuation"},"["),s("oldEnd"),n("span",{class:"token punctuation"},"]"),s(`
        newVNode `),n("span",{class:"token operator"},"="),s(" newChildren"),n("span",{class:"token punctuation"},"["),s("newEnd"),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("j "),n("span",{class:"token operator"},">"),s(" oldEnd "),n("span",{class:"token operator"},"&&"),s(" j "),n("span",{class:"token operator"},"<="),s(" newEnd"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"const"),s(" anchorIndex "),n("span",{class:"token operator"},"="),s(" newEnd "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),s(` 
        `),n("span",{class:"token keyword"},"const"),s(" anchor "),n("span",{class:"token operator"},"="),s(" anchorIndex "),n("span",{class:"token operator"},"<"),s(" newChildren"),n("span",{class:"token punctuation"},"."),s(`length 
        `),n("span",{class:"token operator"},"?"),s(" newChildren"),n("span",{class:"token punctuation"},"["),s("anchorIndex"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),s(`el 
        `),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"null"),s(`
        `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("j "),n("span",{class:"token operator"},"<="),s(" newEnd"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token function"},"patch"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(" newChildren"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" container"),n("span",{class:"token punctuation"},","),s(" anchor"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(` 
    `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("j "),n("span",{class:"token operator"},">"),s(" newEnd "),n("span",{class:"token operator"},"&&"),s(" j "),n("span",{class:"token operator"},"<="),s(" oldEnd"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("j "),n("span",{class:"token operator"},"<="),s(" oldEnd"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token function"},"unmount"),n("span",{class:"token punctuation"},"("),s("oldChildren"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 构造 source 数组"),s(`
        `),n("span",{class:"token comment"},"// 长度为新的一组子节点中剩余未处理节点的数量，默认值为-1"),s(`
        `),n("span",{class:"token keyword"},"const"),s(" count "),n("span",{class:"token operator"},"="),s(" newEnd "),n("span",{class:"token operator"},"-"),s(" j "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),s(`
        `),n("span",{class:"token keyword"},"const"),s(" source "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),s("count"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fill"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`

        `),n("span",{class:"token keyword"},"const"),s(" oldStart "),n("span",{class:"token operator"},"="),s(` j
        `),n("span",{class:"token keyword"},"const"),s(" newStart "),n("span",{class:"token operator"},"="),s(` j
        `),n("span",{class:"token comment"},"// 用来标志是否需要进行移动"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" moved "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),s(`
        `),n("span",{class:"token comment"},"// 记录最大索引值"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" pos "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),s(`

        `),n("span",{class:"token comment"},"// 构建索引表，key为新子节点的key，value为其索引"),s(`
        `),n("span",{class:"token keyword"},"const"),s(" keyIndex "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"for"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(" newStart"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<="),s(" newEnd"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            keyIndex`),n("span",{class:"token punctuation"},"["),s("newChildren"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),s("key"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(` i
        `),n("span",{class:"token punctuation"},"}"),s(`

        `),n("span",{class:"token comment"},"// 新增 patched 变量，代表更新过的节点数量"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" patched "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),s(`
        `),n("span",{class:"token comment"},"// 遍历旧的一组子节点中剩余未处理的节点"),s(`
        `),n("span",{class:"token keyword"},"for"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(" oldStart"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<="),s(" oldEnd"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            oldVNode `),n("span",{class:"token operator"},"="),s(" oldChildren"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(`
            `),n("span",{class:"token comment"},"// 如果更新过的节点数量小于等于需要更新的节点数量，则执行更新"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("patched "),n("span",{class:"token operator"},"<="),s(" count"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token comment"},"// 与旧子节点具有相同key的新子节点的索引"),s(`
                `),n("span",{class:"token keyword"},"const"),s(" k "),n("span",{class:"token operator"},"="),s(" keyIndex"),n("span",{class:"token punctuation"},"["),s("oldVNode"),n("span",{class:"token punctuation"},"."),s("key"),n("span",{class:"token punctuation"},"]"),s(`
                `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"typeof"),s(" k "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token string"},"'undefined'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    newVNode `),n("span",{class:"token operator"},"="),s(" newChildren"),n("span",{class:"token punctuation"},"["),s("k"),n("span",{class:"token punctuation"},"]"),s(`
                    `),n("span",{class:"token function"},"patch"),n("span",{class:"token punctuation"},"("),s("oldVNode"),n("span",{class:"token punctuation"},","),s(" newVNode"),n("span",{class:"token punctuation"},","),s(" container"),n("span",{class:"token punctuation"},")"),s(`
                    `),n("span",{class:"token comment"},"// k - newStart表示相对索引，newStart的索引表示为0"),s(`
                    source`),n("span",{class:"token punctuation"},"["),s("k "),n("span",{class:"token operator"},"-"),s(" newStart"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(` i
                    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("k "),n("span",{class:"token operator"},"<"),s(" pos"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                        `),n("span",{class:"token comment"},"// 需要进行移动"),s(`
                        moved `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"true"),s(`
                    `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                        pos `),n("span",{class:"token operator"},"="),s(` k
                    `),n("span",{class:"token punctuation"},"}"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    `),n("span",{class:"token comment"},"// 没找到，将旧子节点进行卸载"),s(`
                    `),n("span",{class:"token function"},"unmount"),n("span",{class:"token punctuation"},"("),s("oldVNode"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token comment"},"// 如果更新过的节点数量大于需要更新的节点数量，则卸载多余的节点"),s(`
                `),n("span",{class:"token function"},"unmount"),n("span",{class:"token punctuation"},"("),s("oldVNode"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`

        `),n("span",{class:"token comment"},"// 进行节点的移动"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("moved"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// 获取最长递增子序列的索引数组"),s(`
            `),n("span",{class:"token keyword"},"const"),s(" seq "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"lis"),n("span",{class:"token punctuation"},"("),s("sources"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token comment"},"// s 指向最长递增子序列的最后一个元素"),s(`
            `),n("span",{class:"token keyword"},"let"),s(" s "),n("span",{class:"token operator"},"="),s(" seq"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),s(`
            `),n("span",{class:"token comment"},"// i 指向新的一组子节点的最后一个元素"),s(`
            `),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(" count "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),s(`
            `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},">="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("source"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    `),n("span",{class:"token comment"},"// 说明索引为 i 的节点是全新的节点，应该将其挂载"),s(`
                    `),n("span",{class:"token comment"},"// 该节点在新 children 中的真实位置索引"),s(`
                    `),n("span",{class:"token keyword"},"const"),s(" pos "),n("span",{class:"token operator"},"="),s(" i "),n("span",{class:"token operator"},"+"),s(` newStart
                    `),n("span",{class:"token keyword"},"const"),s(" newVNode "),n("span",{class:"token operator"},"="),s(" newChildren"),n("span",{class:"token punctuation"},"["),s("pos"),n("span",{class:"token punctuation"},"]"),s(`
                    `),n("span",{class:"token comment"},"// 该节点的下一个节点的位置索引"),s(`
                    `),n("span",{class:"token keyword"},"const"),s(" nextPos "),n("span",{class:"token operator"},"="),s(" pos "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),s(`  
                    `),n("span",{class:"token comment"},"// 锚点"),s(`
                    `),n("span",{class:"token keyword"},"const"),s(" anchor "),n("span",{class:"token operator"},"="),s(" nextPos "),n("span",{class:"token operator"},"<"),s(" newChildren"),n("span",{class:"token punctuation"},"."),s(`length
                          `),n("span",{class:"token operator"},"?"),s(" newChildren"),n("span",{class:"token punctuation"},"["),s("nextPos"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),s(`el
                          `),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"null"),s(`
                    `),n("span",{class:"token comment"},"// 挂载"),s(`
                    `),n("span",{class:"token function"},"patch"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(" newVNode"),n("span",{class:"token punctuation"},","),s(" container"),n("span",{class:"token punctuation"},","),s(" anchor"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"!=="),s(" seq"),n("span",{class:"token punctuation"},"["),s("s"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    `),n("span",{class:"token comment"},"// 说明该节点需要移动"),s(`
                    `),n("span",{class:"token comment"},"// 该节点在新的一组子节点中的真实位置索引"),s(`
                    `),n("span",{class:"token keyword"},"const"),s(" pos "),n("span",{class:"token operator"},"="),s(" i "),n("span",{class:"token operator"},"+"),s(` newStart
                    `),n("span",{class:"token keyword"},"const"),s(" newVNode "),n("span",{class:"token operator"},"="),s(" newChildren"),n("span",{class:"token punctuation"},"["),s("pos"),n("span",{class:"token punctuation"},"]"),s(`
                    `),n("span",{class:"token comment"},"// 该节点的下一个节点的位置索引"),s(`
                    `),n("span",{class:"token keyword"},"const"),s(" nextPos "),n("span",{class:"token operator"},"="),s(" pos "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),s(`  
                    `),n("span",{class:"token comment"},"// 锚点"),s(`
                    `),n("span",{class:"token keyword"},"const"),s(" anchor "),n("span",{class:"token operator"},"="),s(" nextPos "),n("span",{class:"token operator"},"<"),s(" newChildren"),n("span",{class:"token punctuation"},"."),s(`length
                          `),n("span",{class:"token operator"},"?"),s(" newChildren"),n("span",{class:"token punctuation"},"["),s("nextPos"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),s(`el
                          `),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"null"),s(`
                    `),n("span",{class:"token comment"},"// 移动"),s(`
                    `),n("span",{class:"token function"},"insert"),n("span",{class:"token punctuation"},"("),s("newVNode"),n("span",{class:"token punctuation"},"."),s("el"),n("span",{class:"token punctuation"},","),s(" container"),n("span",{class:"token punctuation"},","),s(" anchor"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    `),n("span",{class:"token comment"},"// 当 i === seq[s] 时，说明该位置的节点不需要移动"),s(`
                    `),n("span",{class:"token comment"},"// 并让 s 指向下一个位置"),s(`
                    s`),n("span",{class:"token operator"},"--"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," ")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=n("p",null,"在构造source数组时，为了提高性能，先遍历新子节点构造出索引表；然后遍历旧子节点根据相同的key值可以从索引表中取出对应的节点的索引，从而可以得出新子节点在旧子节点中的位置索引。",-1),V=n("figure",null,[n("img",{src:h,alt:"索引表",tabindex:"0",loading:"lazy"}),n("figcaption",null,"索引表")],-1),C=n("p",null,"判断是否需要进行移动的方式与简单Diff相同——节点在旧 children 中的索引小于最大索引值。",-1),x=[g,w,f,y,N,V,C];function E(_,S){return t(),o("div",null,x)}const I=e(b,[["render",E],["__file","06.Diff算法.html.vue"]]),L=JSON.parse('{"path":"/source_code/vue3/06.Diff%E7%AE%97%E6%B3%95.html","title":"6. Diff算法","lang":"zh-CN","frontmatter":{"description":"6. Diff算法 无论是哪种Diff算法，都遵循同样的处理规则： 判断是否有节点需要移动，以及应该如何移动；（可复用的节点） 找出那些需要被添加或移除的节点。（其他的节点） 一、简单Diff 1. 不考虑dom复用 2. 考虑dom复用 在patch时，很多时候新旧节点之间存在相同的子节点，二者仅仅是顺序不同，为了提高性能，我们需要复用这些节点，通过...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/source_code/vue3/06.Diff%E7%AE%97%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"6. Diff算法"}],["meta",{"property":"og:description","content":"6. Diff算法 无论是哪种Diff算法，都遵循同样的处理规则： 判断是否有节点需要移动，以及应该如何移动；（可复用的节点） 找出那些需要被添加或移除的节点。（其他的节点） 一、简单Diff 1. 不考虑dom复用 2. 考虑dom复用 在patch时，很多时候新旧节点之间存在相同的子节点，二者仅仅是顺序不同，为了提高性能，我们需要复用这些节点，通过..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-08T09:14:46.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-09-08T09:14:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6. Diff算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-08T09:14:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、简单Diff","slug":"一、简单diff","link":"#一、简单diff","children":[{"level":3,"title":"1. 不考虑dom复用","slug":"_1-不考虑dom复用","link":"#_1-不考虑dom复用","children":[]},{"level":3,"title":"2. 考虑dom复用","slug":"_2-考虑dom复用","link":"#_2-考虑dom复用","children":[]}]},{"level":2,"title":"二、双端Diff","slug":"二、双端diff","link":"#二、双端diff","children":[{"level":3,"title":"1. 简单Diff存在的问题","slug":"_1-简单diff存在的问题","link":"#_1-简单diff存在的问题","children":[]},{"level":3,"title":"2. 双端Diff的理想情况","slug":"_2-双端diff的理想情况","link":"#_2-双端diff的理想情况","children":[]},{"level":3,"title":"3. 双端Diff的非理想情况","slug":"_3-双端diff的非理想情况","link":"#_3-双端diff的非理想情况","children":[]}]},{"level":2,"title":"三、快速Diff","slug":"三、快速diff","link":"#三、快速diff","children":[{"level":3,"title":"1. 特殊情况","slug":"_1-特殊情况","link":"#_1-特殊情况","children":[]},{"level":3,"title":"2. 一般情况处理","slug":"_2-一般情况处理","link":"#_2-一般情况处理","children":[]}]}],"git":{"createdTime":1725786886000,"updatedTime":1725786886000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":1}]},"readingTime":{"minutes":13.14,"words":3941},"filePathRelative":"source_code/vue3/06.Diff算法.md","localizedDate":"2024年9月8日","excerpt":"\\n<blockquote>\\n<p>无论是哪种Diff算法，都遵循同样的处理规则：</p>\\n<ul>\\n<li>判断是否有节点需要移动，以及应该如何移动；（可复用的节点）</li>\\n<li>找出那些需要被添加或移除的节点。（其他的节点）</li>\\n</ul>\\n</blockquote>\\n<h2>一、简单Diff</h2>\\n<h3>1. 不考虑dom复用</h3>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> oldChildren <span class=\\"token operator\\">=</span> n1<span class=\\"token punctuation\\">.</span>children\\n<span class=\\"token keyword\\">const</span> newChildren <span class=\\"token operator\\">=</span> n2<span class=\\"token punctuation\\">.</span>children\\n<span class=\\"token comment\\">// 旧的一组子节点的长度</span>\\n<span class=\\"token keyword\\">const</span> oldLen <span class=\\"token operator\\">=</span> oldChildren<span class=\\"token punctuation\\">.</span>length\\n<span class=\\"token comment\\">// 新的一组子节点的长度</span>\\n<span class=\\"token keyword\\">const</span> newLen <span class=\\"token operator\\">=</span> newChildren<span class=\\"token punctuation\\">.</span>length\\n<span class=\\"token comment\\">// 两组子节点的公共长度，即两者中较短的那一组子节点的长度</span>\\n<span class=\\"token keyword\\">const</span> commonLength <span class=\\"token operator\\">=</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">min</span><span class=\\"token punctuation\\">(</span>oldLen<span class=\\"token punctuation\\">,</span> newLen<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">// 遍历 commonLength 次</span>\\n<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> commonLength<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">patch</span><span class=\\"token punctuation\\">(</span>oldChildren<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> newChildren<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> container<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">// 如果 newLen &gt; oldLen，说明有新子节点需要挂载</span>\\n<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>newLen <span class=\\"token operator\\">&gt;</span> oldLen<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> commonLength<span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> newLen<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">patch</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> newChildren<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> container<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>oldLen <span class=\\"token operator\\">&gt;</span> newLen<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 如果 oldLen &gt; newLen，说明有旧子节点需要卸载</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> commonLength<span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> oldLen<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">unmount</span><span class=\\"token punctuation\\">(</span>oldChildren<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{I as comp,L as data};
