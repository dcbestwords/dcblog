import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as e,o as t}from"./app-C7WL2zGO.js";const n="/assets/20210927145456-Db2DZjJw.png",p="/assets/20211008163458-C9rmq_uP.png",l="/assets/20211008164017-E_gSF0w9.png",o="/assets/202301121041726-DbDI-k1C.png",h="/assets/202301121029498-CKWuLPQd.png",r="/assets/202301121100790-DJN15nE-.png",d="/assets/202301132143345-CaRx5Xdl.png",c="/assets/202301121145973-BrzGozXC.png",g="/assets/202301131908971-BsoWnb_O.png",k="/assets/202301121310570-0RElJBNO.png",m={};function u(y,i){return t(),s("div",null,i[0]||(i[0]=[e('<h2 id="一、分层模型" tabindex="-1"><a class="header-anchor" href="#一、分层模型"><span>一、分层模型</span></a></h2><h3 id="_1-分层的意义" tabindex="-1"><a class="header-anchor" href="#_1-分层的意义"><span>1. 分层的意义</span></a></h3><p>当遇到一个复杂问题的时候，可以使用分层的思想把问题简单化</p><p>比如，你有半杯 82 年的可乐，想分享给你的朋友王富贵，但你们已经 10 年没有联系了。要完成这件事，你可能要考虑：</p><ul><li><p>我用什么装可乐？</p><p>可能的方案：塑料瓶、玻璃瓶、煤气罐</p></li><li><p>怎么保证可乐始终处于低温？</p><p>可能的方案：保温杯、小冰箱、冰盒</p></li><li><p>如何保证可乐不被运输的人偷喝？</p><p>可能的方案：封条、在上面写「毒药」</p></li><li><p>如何获取王富贵的地址？</p><p>可能的方案：报案失踪、联系私人侦探、联系物流公司的朋友</p></li><li><p>如何运输？</p><p>可能的方案：自行车、汽车、火车、高铁、飞机、火箭</p></li></ul><p>这就形成了一个分层结构</p><img src="'+n+'" alt="image-20210927145456656" style="zoom:50%;"><p>从常理出发，我们可以得出以下结论：</p><ul><li>每层相对独立，只需解决自己的问题</li><li>每层无须考虑上层的交付，仅需把自己的结果交给下层即可</li><li>每层有多种方案可供选择，选择不同的方案不会对上下层造成影响</li><li>每一层会在上一层的基础上增加一些额外信息</li></ul><h3 id="_2-五层网络模型" tabindex="-1"><a class="header-anchor" href="#_2-五层网络模型"><span>2. 五层网络模型</span></a></h3><p>网络要解决的问题是：<strong>两个程序之间如何交换数据</strong>。</p><p>这是一个非常复杂的问题，因为两个程序有可能出现在不同的设备上。</p><p>面对复杂的问题，可以使用分层的方式来简化。</p><p>经过不断的演化，网络最终形成了五层模型：</p><figure><img src="http://mdrs.yuanjin.tech/img/20211008163417.png" alt="image-20211008163417521" tabindex="0" loading="lazy"><figcaption>image-20211008163417521</figcaption></figure><h3 id="_3-数据的传输" tabindex="-1"><a class="header-anchor" href="#_3-数据的传输"><span>3. 数据的传输</span></a></h3><figure><img src="'+p+'" alt="image-20211008163458168" tabindex="0" loading="lazy"><figcaption>image-20211008163458168</figcaption></figure><h3 id="_4-四层、五层、七层" tabindex="-1"><a class="header-anchor" href="#_4-四层、五层、七层"><span>4. 四层、五层、七层</span></a></h3><figure><img src="'+l+'" alt="image-20211008164017299" tabindex="0" loading="lazy"><figcaption>image-20211008164017299</figcaption></figure><h2 id="二、应用层协议" tabindex="-1"><a class="header-anchor" href="#二、应用层协议"><span>二、应用层协议</span></a></h2><h3 id="_1-url" tabindex="-1"><a class="header-anchor" href="#_1-url"><span>1. URL</span></a></h3><p>URL（uniform resource locator，统一资源定位符）用于定位网络服务</p><figure><img src="'+o+'" alt="image-20230112104100679" tabindex="0" loading="lazy"><figcaption>image-20230112104100679</figcaption></figure><p>URL 是一个固定格式的字符串</p><figure><img src="'+h+'" alt="image-20230112102913056" tabindex="0" loading="lazy"><figcaption>image-20230112102913056</figcaption></figure><p>它表达了：</p><p>从网络中 <mark>哪台计算机（domain）</mark> 中的 <mark>哪个程序（port）</mark> 寻找 <mark>哪个服务（path）</mark> ，并注明了获取服务的 <mark>具体细节（query）</mark> ，以及要用什么样的 <mark>协议通信（schema）</mark></p><p>这里面包含了一些细节：</p><ul><li>当协议是<code>http</code>端口为<code>80</code>时，端口可以省略</li><li>当协议是<code>https</code>端口为<code>443</code>时，端口可以省略</li><li><code>schema</code>、<code>domain</code>、<code>path</code>是必填的，其他的根据具体的要求填写</li></ul><h3 id="_2-http" tabindex="-1"><a class="header-anchor" href="#_2-http"><span>2. HTTP</span></a></h3><p>超文本传输协议（Hyper Text Transfer Protocol，<em>HTTP</em>）是一个广泛运用于互联网的应用层协议。</p><p>99%的情况下，前端开发者接触的都是 HTTP 协议。</p><p>该协议规定了两个方面的内容：</p><ul><li><strong>传递消息的模式</strong></li><li><strong>传递消息的格式</strong></li></ul><h4 id="_1-传递消息的模式" tabindex="-1"><a class="header-anchor" href="#_1-传递消息的模式"><span>1. 传递消息的模式</span></a></h4><figure><img src="'+r+'" alt="image-20230112110047746" tabindex="0" loading="lazy"><figcaption>image-20230112110047746</figcaption></figure><p>HTTP 使用了一种极为简单的消息传递模式，「<strong>请求-响应</strong>」模式</p><p>发起请求的称之为客户端，接收请求并完成响应的称之为服务器。</p><p>「请求-响应」完成后，一次交互结束。</p><h4 id="_2-传递消息的格式" tabindex="-1"><a class="header-anchor" href="#_2-传递消息的格式"><span>2. 传递消息的格式</span></a></h4><figure><img src="'+d+`" alt="image-20230113214343300" tabindex="0" loading="lazy"><figcaption>image-20230113214343300</figcaption></figure><p>HTTP 的消息格式是一种纯文本的格式，文本分为三个部分：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>请求行</span></span>
<span class="line"><span>请求头</span></span>
<span class="line"><span></span></span>
<span class="line"><span>请求体</span></span></code></pre></div><p><strong>具体每一部分写什么内容，要看具体的服务要求</strong></p><h4 id="_3-试一试" tabindex="-1"><a class="header-anchor" href="#_3-试一试"><span>3. 试一试</span></a></h4><p>有非常多的工具可以发送 http 请求，这里推荐一个非常直观的工具</p><ol><li><p>安装<code>vscode</code>插件<code>REST Clinet</code></p><figure><img src="`+c+`" alt="image-20230112114542925" tabindex="0" loading="lazy"><figcaption>image-20230112114542925</figcaption></figure></li><li><p>新建文件<code>xxx.http</code></p></li><li><p>编写请求文本</p><div class="language-http" data-highlighter="shiki" data-ext="http" data-title="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">POST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /api/user/login </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">HTTP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Host</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> study.duyiedu.com</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Content-Type</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> application/json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;loginId&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;admin&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;loginPwd&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;123123&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div></li><li><p>发送请求</p></li></ol><h4 id="_4-熟悉关键信息" tabindex="-1"><a class="header-anchor" href="#_4-熟悉关键信息"><span>4. 熟悉关键信息</span></a></h4><h5 id="请求方法" tabindex="-1"><a class="header-anchor" href="#请求方法"><span>请求方法</span></a></h5><p>请求行中的第一个单词是请求方法</p><p><strong>在 HTTP 协议中，请求方法仅有语义的区别</strong>，只是表达了这次请求的「愿望」。</p><blockquote><p>关于请求方法的协议原文见 <a href="https://www.rfc-editor.org/rfc/rfc7231.html" target="_blank" rel="noopener noreferrer">HTTP/1.1 规范 RFC7231-Chapter4</a></p><figure><img src="`+g+`" alt="image-20230113190854930" tabindex="0" loading="lazy"><figcaption>image-20230113190854930</figcaption></figure></blockquote><p>比如<code>GET</code>表达了客户端想要获取一些东西，<code>POST</code>表达了客户端想要提交一些东西</p><p>常见的请求方法有：</p><ul><li><code>GET</code>：获取</li><li><code>POST</code>：提交</li><li><code>PUT</code>：修改</li><li><code>DELETE</code>：删除</li></ul><p><strong>具体在开发中应该选择什么请求方法，一定是看服务方的要求</strong></p><p>通常情况下：</p><ul><li>获取数据一般使用<code>GET</code></li><li>提交数据一般使用<code>POST</code></li><li>各种静态资源的获取，一般使用<code>GET</code></li></ul><h5 id="请求头-host" tabindex="-1"><a class="header-anchor" href="#请求头-host"><span>请求头 - <code>Host</code></span></a></h5><p><code>Host</code>标注了<code>URL</code>地址中的<code>Domain + Port</code></p><p>示例：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Host: study.duyiedu.com</span></span></code></pre></div><h5 id="请求头-content-type" tabindex="-1"><a class="header-anchor" href="#请求头-content-type"><span>请求头 - <code>Content-Type</code></span></a></h5><p><code>Content-Type</code>标注了附带的请求体是什么格式</p><p>比如，请求体的数据为<code>loginId:admin, loginPwd:123456</code>，请求体可以用不同的格式发出</p><div class="language-http" data-highlighter="shiki" data-ext="http" data-title="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Content-Type</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> application/x-www-form-urlencoded</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">loginId=admin&amp;loginPwd=123123</span></span></code></pre></div><div class="language-http" data-highlighter="shiki" data-ext="http" data-title="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Content-Type</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> application/json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;loginId&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;admin&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;loginPwd&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;123123&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre></div><div class="language-http" data-highlighter="shiki" data-ext="http" data-title="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Content-Type</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> multipart/form-data; boundary=----WebKitFormBoundaryraPtlntBIqy4X2Ho</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">------WebKitFormBoundaryraPtlntBIqy4X2Ho</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Content-Disposition</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> form-data; name=&quot;loginId&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">admin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">------WebKitFormBoundaryraPtlntBIqy4X2Ho</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Content-Disposition</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> form-data; name=&quot;loginPwd&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">123456</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">------WebKitFormBoundaryraPtlntBIqy4X2Ho--</span></span></code></pre></div><ul><li>一般用于文件上传，boundary 指的是中间的分割符</li></ul><h5 id="响应码" tabindex="-1"><a class="header-anchor" href="#响应码"><span>响应码</span></a></h5><p>响应码（状态码、消息码）是响应行中的一个数字，后面往往跟上一个对应的单词，用于表达服务器对这个响应的整体「<strong>态度</strong>」</p><p>常见的响应码有：</p><figure><img src="`+k+'" alt="image-20230112131000507" tabindex="0" loading="lazy"><figcaption>image-20230112131000507</figcaption></figure><p>常见的状态码有：</p><ol><li><p>200 OK：一切正常。</p></li><li><p>301 Moved Permanently：资源已被永久重定向。</p><p><code>你的请求我收到了，但是呢，你要的东西不在这个地址了，我已经永远的把它移动到了一个新的地址，麻烦你取请求新的地址，地址我放到了响应头的Location中了</code></p><blockquote><p>试试请求：www.douyutv.com</p></blockquote></li><li><p>302 Found：资源已被临时重定向。</p><p><code>你的请求我收到了，但是呢，你要的东西不在这个地址了，我临时的把它移动到了一个新的地址，麻烦你取请求新的地址，地址我放到了请求头的Location中了</code></p></li><li><p>304 Not Modified：文档内容未被修改。</p><p><code>你的请求我收到了，你要的东西跟之前是一样的，没有任何的变化，所以我就不给你结果了，你自己就用以前的吧。啥？你没有缓存以前的内容，关我啥事</code></p></li><li><p>400 Bad Request：语义有误，当前请求无法被服务器理解。</p><p><code>你给我发的是个啥啊，我听都听不懂</code></p></li><li><p>403 Forbidden：服务器拒绝执行。</p><p><code>你的请求我已收到，但是我就是不给你东西</code></p></li><li><p>404 Not Found：资源不存在。</p><p><code>你的请求我收到了，但我没有你要的东西</code></p></li><li><p>500 Internal Server Error：服务器内部错误。</p><p><code>你的请求我已收到，但这道题我不会，解不出来，先睡了</code></p></li></ol><h5 id="响应头-content-type" tabindex="-1"><a class="header-anchor" href="#响应头-content-type"><span>响应头 - <code>Content-Type</code></span></a></h5><p><code>Content-Type</code>标注了附带的响应体是什么格式</p><p>常见的值有：</p><ol><li><code>text/plain</code>: 普通的纯文本</li><li><code>text/html</code>：html 文档</li><li><code>text/javascript</code> 或 <code>application/javascript</code>：js 代码</li><li><code>text/css</code>：css 代码</li><li><code>image/jpeg</code>：jpg 图片</li><li><code>attachment</code>：附件</li><li>其他<code>MIME</code>类型</li></ol><h2 id="三、答疑环节" tabindex="-1"><a class="header-anchor" href="#三、答疑环节"><span>三、答疑环节</span></a></h2><h3 id="长连接" tabindex="-1"><a class="header-anchor" href="#长连接"><span>长连接</span></a></h3><p>复用创建好的 TCP 连接，节省创建连接的开销</p><h3 id="url-编码" tabindex="-1"><a class="header-anchor" href="#url-编码"><span>URL 编码</span></a></h3><p>在 http 的请求和响应中，行和头的部分不允许出现非 ASCII 字符。当出现非 ASCII 字符时（比如 query 携带中文参数），浏览器会自动进行 URL 编码。</p><h3 id="ssr-和-csr" tabindex="-1"><a class="header-anchor" href="#ssr-和-csr"><span>SSR 和 CSR</span></a></h3><p>分别指代服务端渲染和客户端渲染。两者之间的差别在于将数据拼接 HTML 字符串这件事放在服务端还是客户端。</p><p>SSR 每次请求都会在服务端将页面渲染好再交给客户端，可以减少浏览器的请求次数，一般用于首屏的性能优化。而 CSR 则相反，虽然首屏加载较慢，但一旦这些请求完成之后，用户和页面之间交互时用户的体验就会好很多。</p><blockquote><p>前端进行 SSR</p></blockquote>',88)]))}const b=a(m,[["render",u],["__file","networkModel.html.vue"]]),_=JSON.parse('{"path":"/browser_internet/network/networkModel.html","title":"网络分层模型和应用协议","lang":"zh-CN","frontmatter":{"title":"网络分层模型和应用协议","order":1,"category":["前端"],"tag":["分层模型"],"description":"一、分层模型 1. 分层的意义 当遇到一个复杂问题的时候，可以使用分层的思想把问题简单化 比如，你有半杯 82 年的可乐，想分享给你的朋友王富贵，但你们已经 10 年没有联系了。要完成这件事，你可能要考虑： 我用什么装可乐？ 可能的方案：塑料瓶、玻璃瓶、煤气罐 怎么保证可乐始终处于低温？ 可能的方案：保温杯、小冰箱、冰盒 如何保证可乐不被运输的人偷喝？...","head":[["meta",{"property":"og:url","content":"https://github.com/browser_internet/network/networkModel.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"网络分层模型和应用协议"}],["meta",{"property":"og:description","content":"一、分层模型 1. 分层的意义 当遇到一个复杂问题的时候，可以使用分层的思想把问题简单化 比如，你有半杯 82 年的可乐，想分享给你的朋友王富贵，但你们已经 10 年没有联系了。要完成这件事，你可能要考虑： 我用什么装可乐？ 可能的方案：塑料瓶、玻璃瓶、煤气罐 怎么保证可乐始终处于低温？ 可能的方案：保温杯、小冰箱、冰盒 如何保证可乐不被运输的人偷喝？..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://mdrs.yuanjin.tech/img/20211008163417.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-03T11:20:13.000Z"}],["meta",{"property":"article:tag","content":"分层模型"}],["meta",{"property":"article:modified_time","content":"2024-12-03T11:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"网络分层模型和应用协议\\",\\"image\\":[\\"http://mdrs.yuanjin.tech/img/20211008163417.png\\"],\\"dateModified\\":\\"2024-12-03T11:20:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、分层模型","slug":"一、分层模型","link":"#一、分层模型","children":[{"level":3,"title":"1. 分层的意义","slug":"_1-分层的意义","link":"#_1-分层的意义","children":[]},{"level":3,"title":"2. 五层网络模型","slug":"_2-五层网络模型","link":"#_2-五层网络模型","children":[]},{"level":3,"title":"3. 数据的传输","slug":"_3-数据的传输","link":"#_3-数据的传输","children":[]},{"level":3,"title":"4. 四层、五层、七层","slug":"_4-四层、五层、七层","link":"#_4-四层、五层、七层","children":[]}]},{"level":2,"title":"二、应用层协议","slug":"二、应用层协议","link":"#二、应用层协议","children":[{"level":3,"title":"1. URL","slug":"_1-url","link":"#_1-url","children":[]},{"level":3,"title":"2. HTTP","slug":"_2-http","link":"#_2-http","children":[]}]},{"level":2,"title":"三、答疑环节","slug":"三、答疑环节","link":"#三、答疑环节","children":[{"level":3,"title":"长连接","slug":"长连接","link":"#长连接","children":[]},{"level":3,"title":"URL 编码","slug":"url-编码","link":"#url-编码","children":[]},{"level":3,"title":"SSR 和 CSR","slug":"ssr-和-csr","link":"#ssr-和-csr","children":[]}]}],"git":{"createdTime":1710854012000,"updatedTime":1733224813000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":2}]},"readingTime":{"minutes":6.54,"words":1961},"filePathRelative":"browser_internet/network/networkModel.md","localizedDate":"2024年3月19日","excerpt":"<h2>一、分层模型</h2>\\n<h3>1. 分层的意义</h3>\\n<p>当遇到一个复杂问题的时候，可以使用分层的思想把问题简单化</p>\\n<p>比如，你有半杯 82 年的可乐，想分享给你的朋友王富贵，但你们已经 10 年没有联系了。要完成这件事，你可能要考虑：</p>","autoDesc":true}');export{b as comp,_ as data};
