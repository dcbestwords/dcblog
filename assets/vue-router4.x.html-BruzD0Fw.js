import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as i,c as l,a as n,b as s,d as a,w as u,e as t}from"./app-DX_yn-pD.js";const r="/dcblog/assets/createRouter-CAZ2ipjy.png",d="/dcblog/assets/history-BkbO5FB1.jpg",k="/dcblog/assets/2023-09-15-022139-DxizPX2c.png",v={},m=n("h1",{id:"新版vue-router原理解析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#新版vue-router原理解析"},[n("span",null,"新版vue-Router原理解析")])],-1),b=t(`<h2 id="一、createrouter结构解析" tabindex="-1"><a class="header-anchor" href="#一、createrouter结构解析"><span>一、createRouter结构解析</span></a></h2><h3 id="_1-准备工作" tabindex="-1"><a class="header-anchor" href="#_1-准备工作"><span>1. 准备工作</span></a></h3><p>在开始之前，我们肯定是需要去看一下 vue-router 对应的源码，源码可以在 github 上面找到，地址如下：</p><p>https://github.com/vuejs/router</p><p>vue-router 整体项目采用的是 monorepo 的代码管理风格，使用 pnpm + workspace 的方式来搭建的 monorepo 项目，源码目录如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>├── .github
├── .vscode
├── packages             // 项目分包
│   ├── docs             // vue router API文档
│   ├── playground       // 本地项目效果预览
│   └── router           // vue router源码
├── scripts              // 工程脚本
├── .gitignore
├── .npmrc               // 项目的配置文件
├── .prettierignore
├── .prettierrc
├── LICENSE
├── README.md
├── netlify.toml
├── package.json
├── pnpm-lock.yaml       // 依赖版本控制
└── pnpm-workspace.yaml  // 工作空间根目录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中关于 router 的源码位于 packages/router/src，结构如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>├── history
├── matcher
├── types
├── utils
├── RouterLink.ts
├── RouterView.ts
├── config.ts
├── devtools.ts
├── encoding.ts
├── errors.ts
├── global.d.ts
├── globalExtensions.ts
├── index.ts
├── injectionSymbols.ts
├── location.ts
├── navigationGuards.ts
├── query.ts
├── router.ts
├── scrollBehavior.ts
├── useApi.ts
└── warning.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作为一个项目的入口，我们自然会去 index.ts，这个 index.ts 整体比较简单，就是单纯的将其他文件的工具方法或者类型导出而已，其中就包含了非常重要的一个方法 <code>createRouter</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> createRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./router&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来我们就可以顺藤摸瓜，到 router.ts 里面去查看 createRouter 的源码。</p><h3 id="_2-整体结构分析" tabindex="-1"><a class="header-anchor" href="#_2-整体结构分析"><span>2. 整体结构分析</span></a></h3><p>在分析 createRouter 方法之前，我们首先需要回忆一下，整个 createRouter 是如何使用的</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue-router&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 调用 createRouter 方法的时候，传入一个配置对象</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  history<span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      path<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
      name<span class="token operator">:</span> <span class="token string">&#39;home&#39;</span><span class="token punctuation">,</span>
      component<span class="token operator">:</span> HomeView
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      path<span class="token operator">:</span> <span class="token string">&#39;/about&#39;</span><span class="token punctuation">,</span>
      name<span class="token operator">:</span> <span class="token string">&#39;about&#39;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../views/AboutView.vue&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> router
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),g={href:"https://router.vuejs.org/zh/api/interfaces/RouterOptions.html",target:"_blank",rel:"noopener noreferrer"},h=n("li",null,"注意：该配置对象在官方中对应的类型 RouterOptions",-1),y=n("li",null,[s("返回值是一个对象，该对象对应的类型就是 Router，既然是对象，那么上面会有一些属性以及方法 "),n("ul",null,[n("li",null,"属性：currentRoute、listening、options"),n("li",null,"方法：addRoute、getRoutes、push、repalce、go、beforeEach...")])],-1),f=t(`<p>接下来我们会在项目中的 main.ts 中引入这个对象：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&quot;./router&quot;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span> <span class="token comment">// 注册插件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们到 packages/router/src/router.ts 中，找到 createRouter 方法，该方法的整体结构如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRouter</span><span class="token punctuation">(</span>options<span class="token operator">:</span> RouterOptions<span class="token punctuation">)</span><span class="token operator">:</span> Router <span class="token punctuation">{</span>
    <span class="token comment">/*
     * 1. 各种变量的定义
     */</span>
    <span class="token keyword">const</span> matcher <span class="token operator">=</span> <span class="token operator">...</span>
    <span class="token keyword">const</span> parseQuery <span class="token operator">=</span> <span class="token operator">...</span>
    <span class="token keyword">const</span> stringifyQuery <span class="token operator">=</span> <span class="token operator">...</span>
    <span class="token keyword">const</span> routerHistory <span class="token operator">=</span> <span class="token operator">...</span>
    
    <span class="token comment">/*
     * 2. 导航守卫
     */</span>
    <span class="token keyword">const</span> beforeGuards <span class="token operator">=</span> <span class="token operator">...</span>
    <span class="token keyword">const</span> beforeResolveGuards <span class="token operator">=</span> <span class="token operator">...</span>
    <span class="token keyword">const</span> afterGuards <span class="token operator">=</span> <span class="token operator">...</span>
    
    <span class="token comment">/*
     * 3. 当前路由初始化
     */</span>
    <span class="token keyword">const</span> currentRoute <span class="token operator">=</span> <span class="token operator">...</span>
    <span class="token keyword">let</span> pendingLocation<span class="token operator">:</span> RouteLocation <span class="token operator">=</span> <span class="token operator">...</span>
    
    <span class="token comment">/*
     * 4. params 相关处理
     */</span>
    <span class="token keyword">const</span> normalizeParams <span class="token operator">=</span> <span class="token operator">...</span>
    <span class="token keyword">const</span> encodeParams <span class="token operator">=</span> <span class="token operator">...</span>
    <span class="token keyword">const</span> decodeParams <span class="token operator">=</span> <span class="token operator">...</span>
    
    <span class="token comment">/*
     * 5. 各种方法的定义
     * 这些方法里面有供内部使用的方法，也有暴露出去给外部使用的方法
     */</span>
    <span class="token keyword">function</span> <span class="token function">addRoute</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">removeRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">hasRoute</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">locationAsObject</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">checkCanceledNavigation</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">handleRedirectRecord</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>   
    <span class="token keyword">function</span> <span class="token function">pushWithRedirect</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">checkCanceledNavigationAndReject</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">runWithContext</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">navigate</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">triggerAfterEach</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">finalizeNavigation</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">setupListeners</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">triggerError</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">isReady</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">markAsReady</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">handleScroll</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    
    
    <span class="token comment">/*
     * 6. 向外部返回的对象
     * 该对象会包含部分上面所定义的方法，必须要有一个 install 方法
     */</span>
    <span class="token keyword">const</span> router<span class="token operator">:</span> Router <span class="token operator">=</span> <span class="token punctuation">{</span>
      currentRoute<span class="token punctuation">,</span>
      listening<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  
      addRoute<span class="token punctuation">,</span>
      removeRoute<span class="token punctuation">,</span>
      hasRoute<span class="token punctuation">,</span>
      getRoutes<span class="token punctuation">,</span>
      resolve<span class="token punctuation">,</span>
      options<span class="token punctuation">,</span>
  
      push<span class="token punctuation">,</span>
      replace<span class="token punctuation">,</span>
      go<span class="token punctuation">,</span>
      <span class="token function-variable function">back</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function-variable function">forward</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  
      beforeEach<span class="token operator">:</span> beforeGuards<span class="token punctuation">.</span>add<span class="token punctuation">,</span>
      beforeResolve<span class="token operator">:</span> beforeResolveGuards<span class="token punctuation">.</span>add<span class="token punctuation">,</span>
      afterEach<span class="token operator">:</span> afterGuards<span class="token punctuation">.</span>add<span class="token punctuation">,</span>
  
      onError<span class="token operator">:</span> errorListeners<span class="token punctuation">.</span>add<span class="token punctuation">,</span>
      isReady<span class="token punctuation">,</span>
      
      <span class="token function">install</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> router<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的代码，我们能够将 <code>createRouter</code> 这个核心方法的整体结构搞清楚，内部声明了一些变量以及方法，最终会导出一个对象，该对象身上会包含一部分上面所声明的变量以及方法。</p><p><code>createRouter</code> 整体工作流程如下图所示：</p><img src="`+r+`" style="zoom:50%;"><h3 id="_3-创建-matcher" tabindex="-1"><a class="header-anchor" href="#_3-创建-matcher"><span>3. 创建 matcher</span></a></h3><p>createRouter 方法内部的第一句代码就是创建 matcher</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> matcher <span class="token operator">=</span> <span class="token function">createRouterMatcher</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>routes<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>createRouterMatcher</code> 方法位于 matcher 目录下面的 index.ts，我们首先看一下该方法的方法签名：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRouterMatcher</span><span class="token punctuation">(</span>
  <span class="token comment">// routes 是一个只读数组，里面存放的就是开发者所写的一条一条的路由记录</span>
  <span class="token comment">// 每一条路由记录是一个对象 [{ path: &#39;/&#39;,name: &#39;home&#39;, component: HomeView }, {...}]</span>
  routes<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>RouteRecordRaw<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token comment">// globalOptions 就是用户调用 createRouter 方法时传入的一整个配置对象 {history: ..., routes : [...]} </span>
  globalOptions<span class="token operator">:</span> PathParserOptions
<span class="token punctuation">)</span><span class="token operator">:</span> RouterMatcher
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们来看一下整个 <code>createRouterMathcer</code> 方法究竟在干什么？</p><p>下面是整个 <code>creatRouterMatcher</code> 方法的整体结构：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRouterMatcher</span><span class="token punctuation">(</span>routes<span class="token punctuation">,</span> globalOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/*
   * 做一些初始化工作
   */</span>
  <span class="token operator">...</span>
  
  <span class="token comment">/*
   * 内部定义的方法
   */</span>
  <span class="token keyword">function</span> <span class="token function">getRecordMatcher</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">addRoute</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">removeRoute</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">getRoutes</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">insertMatcher</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
  
  <span class="token comment">/*
   * 遍历 routes 数组
   * 利用内部的 addRoute 方法来添加路由
   * 也就是，整个路由的初始化添加工作是在 createRouterMatcher 方法里面完成的
   */</span>
  routes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>route <span class="token operator">=&gt;</span> <span class="token function">addRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">)</span>
 
  <span class="token comment">/*
   * 向外部返回一个对象，这也就是 createRouter 方法中的 matcher 对象    
   * 是一个包含了内部方法的对象   
   */</span>                        
  <span class="token keyword">return</span> <span class="token punctuation">{</span> addRoute<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> removeRoute<span class="token punctuation">,</span> getRoutes<span class="token punctuation">,</span> getRecordMatcher <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目前通过阅读 <code>createRouter</code> 以及 <code>createRouterMatcher</code> 方法，我们能够发现这是一种非常常见的模式。一个方法返回一个对象，这个对象里面会包含部分方法内部所定义的方法，这里其实就用到了闭包。</p><p>最终外部（ <code>createRouter</code> 调用的地方）会拿到这个对象：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> mathcer <span class="token operator">=</span> <span class="token punctuation">{</span> addRoute<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> removeRoute<span class="token punctuation">,</span> getRoutes<span class="token punctuation">,</span> getRecordMatcher <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们可以看到，在 createRouter 内部同样定义了诸如 addRoute、removeRoute 以及 getRoutes 等方法，那么我们可以很自然的想到，这些方法的内部，肯定是调用了返回的 matcher 对象的同名方法。</p><h3 id="_4-处理导航守卫" tabindex="-1"><a class="header-anchor" href="#_4-处理导航守卫"><span>4. 处理导航守卫</span></a></h3><p>接下来有一段代码是处理导航守卫：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> beforeGuards <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useCallbacks</span><span class="token generic class-name"><span class="token operator">&lt;</span>NavigationGuardWithThis<span class="token operator">&lt;</span><span class="token keyword">undefined</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> beforeResolveGuards <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useCallbacks</span><span class="token generic class-name"><span class="token operator">&lt;</span>NavigationGuardWithThis<span class="token operator">&lt;</span><span class="token keyword">undefined</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> afterGuards <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useCallbacks</span><span class="token generic class-name"><span class="token operator">&lt;</span>NavigationHookAfter<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们首先回忆一下，导航守卫是如何使用的：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        
router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在源码中，挂在 router 对象的 beforeEach 方法对应如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>beforeEach<span class="token operator">:</span> beforeGuards<span class="token punctuation">.</span>add<span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也就是说，实际上在调用 beforeGuards 的 add 方法，而这个 beforeGuards 又是通过调用 <code>useCallbacks( )</code> 方法所得到的</p><p>useCallBack 方法位于 utils 目录下面的 callback.ts：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useCallbacks</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里声明了一个 handlers 的列表</span>
  <span class="token keyword">let</span> handlers<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token comment">// 接收守卫回调函数</span>
  <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>handler<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token comment">// 放入到 handlers 列表里面</span>
    handlers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>
    <span class="token comment">// 向外部返回一个方法，该方法的作用就是将添加到 handlers 列表里面对应的守卫回调删除掉</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> i <span class="token operator">=</span> handlers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> handlers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 清空 handlers 列表</span>
  <span class="token keyword">function</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    handlers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 向外部返回一个对象</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    add<span class="token punctuation">,</span>
    <span class="token function-variable function">list</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> handlers<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    reset<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们重点来关心一下 add 方法会返回的一个方法，这个方法是将添加进去的守卫回调删除，为什么这么做？实际上这个是我们 JS 中非常常见的一种模式</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> callbacks <span class="token operator">=</span> <span class="token function">useCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> remove <span class="token operator">=</span> callbacks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种模式非常的常见，特别是在 JS 中处理事件监听器或者需要清晰资源的时候，你可以一次性的提供添加和取消操作，使代码更加便于管理。</p><h3 id="_5-currentroute声明" tabindex="-1"><a class="header-anchor" href="#_5-currentroute声明"><span>5. currentRoute声明</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> currentRoute <span class="token operator">=</span> <span class="token generic-function"><span class="token function">shallowRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>RouteLocationNormalizedLoaded<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个 <code>currentRoute</code> 最终是要暴露给外部使用的。</p><p>首先关于 START_LOCATION_NORMALIZED，这是 vue-router 里面的一个常量，对应的代码如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token operator">:</span> RouteLocationNormalizedLoaded <span class="token operator">=</span> <span class="token punctuation">{</span>
  path<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  params<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  query<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  hash<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  fullPath<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
  matched<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  meta<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  redirectedFrom<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个常量里面，就对 path、name、params、query... 进行了一个初始化操作。</p><p>另外需要注意，这里首先 currentRoute 是一个响应式的变量，但是这里在创建这个响应式变量的时候，使用的是 shallowRef，而非 ref。</p><ul><li>ref：创建一个深度响应式的变量</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span>value<span class="token punctuation">.</span>count<span class="token operator">++</span> <span class="token comment">// 存在响应式的，依赖于 obj 的组件会重新渲染</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>shallowRef：是创建一个不会进行深度转换的响应变量</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">shallowRef</span><span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span>value<span class="token punctuation">.</span>count<span class="token operator">++</span> <span class="token comment">// 这里不存在响应式，这里的变化不会导致组件重新渲染</span>
obj<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>count<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span> <span class="token comment">// 这样子才会触发响应式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 START_LOCATION_NORMALIZED 内部会存在一些深层次的嵌套，如果使用 ref 的话，那么这些深层次的嵌套也会变为响应式，但是这是没有必要的，所以这里使用 shallowRef会节约不必要的性能开销。</p><h3 id="_6-处理-params" tabindex="-1"><a class="header-anchor" href="#_6-处理-params"><span>6. 处理 params</span></a></h3><p>接下来是关于 params 的处理：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> normalizeParams <span class="token operator">=</span> <span class="token function">applyToParams</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> paramValue <span class="token operator">=&gt;</span> <span class="token string">&#39;&#39;</span> <span class="token operator">+</span> paramValue<span class="token punctuation">)</span>
<span class="token keyword">const</span> encodeParams <span class="token operator">=</span> <span class="token function">applyToParams</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> encodeParam<span class="token punctuation">)</span>
<span class="token keyword">const</span> decodeParams <span class="token operator">=</span> <span class="token function">applyToParams</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> decode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里其实这三行是三个函数，分别负责：</p><ul><li>标准化参数</li><li>编码参数</li><li>解码参数</li></ul><p>这里三个函数都用到了 <code>applyToParams</code>，因此这里我们自然会去追 applyToParams 的源码，该方法的源码位于 utils/index.ts 里面：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">applyToParams</span><span class="token punctuation">(</span>
  <span class="token comment">// 函数</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token comment">// 要处理的参数</span>
  params<span class="token operator">:</span> RouteParamsRaw <span class="token operator">|</span> <span class="token keyword">undefined</span>
<span class="token punctuation">)</span><span class="token operator">:</span> RouteParams <span class="token punctuation">{</span>
  
  <span class="token comment">// 初始化了一个新的参数对象</span>
  <span class="token keyword">const</span> newParams<span class="token operator">:</span> RouteParams <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token comment">// 去遍历传递过来的参数</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 拿到参数每一项的值</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> params<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token comment">// 如果值为数组通过 map 遍历后用 fn 来处理</span>
    <span class="token comment">// 如果不是数组，那么直接用 fn 来处理</span>
    newParams<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
      <span class="token operator">?</span> value<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token function">fn</span><span class="token punctuation">(</span>value <span class="token keyword">as</span> Exclude<span class="token operator">&lt;</span>RouteParamValueRaw<span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> newParams
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么通过阅读 <code>applyToParams</code> 源码，我们就知道上面的三个方法是干嘛的了。</p><p>举个例子：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 假设这是我们的 params</span>
<span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>

<span class="token comment">// 通过 applyToParams 方法将所有的参数转为大写</span>
<span class="token keyword">const</span> newParams <span class="token operator">=</span> <span class="token function">applyToParams</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>v<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token comment">// { id: &#39;123&#39;, name: [&#39;ALICE&#39;, &#39;BOB&#39;] }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们来看一下上面的三个方法：</p><ul><li><strong>标准化参数</strong>：负责将参数值转为字符串，假设有一个参数对象 <code>{id: 123}</code> ，通过 normalizeParams 方法处理之后就会变为 <code>{id: &#39;123&#39; }</code></li><li><strong>编码参数</strong>：负责对参数里面的一些特殊字符（空格、制表符）进行编码 <ul><li><code>{id: &#39;hello world&#39;}</code> 通过 encodeParam 进行编码操作，最终得到的是 <code>{ id: &#39;hello%20world&#39;}</code></li></ul></li><li><strong>解码参数</strong>：就是上面编码的逆操作</li></ul><h3 id="_7-定义各种方法" tabindex="-1"><a class="header-anchor" href="#_7-定义各种方法"><span>7. 定义各种方法</span></a></h3><p>之后就是各种方法的定义了，这些方法有一些是内部方法，有一些是会随着 router 对象暴露出去给开发者使用的方法。</p><p>整体的方法比较多，后面涉及哪个再来分析哪个。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">addRoute</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">removeRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">hasRoute</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">locationAsObject</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">checkCanceledNavigation</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">handleRedirectRecord</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>   
<span class="token keyword">function</span> <span class="token function">pushWithRedirect</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">checkCanceledNavigationAndReject</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">runWithContext</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">navigate</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">triggerAfterEach</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">finalizeNavigation</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">setupListeners</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">triggerError</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">isReady</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">markAsReady</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">handleScroll</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-router对象" tabindex="-1"><a class="header-anchor" href="#_8-router对象"><span>8. router对象</span></a></h3><p>这个 router 对象，最终是要暴露给开发者使用的，里面有一堆方法，是在 <code>createRouter</code> 内部所定义的。</p><p>但是有一个方法例外，那就是 <code>install</code> 方法，该方法是属于 router 对象内部所定义的方法</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> router<span class="token operator">:</span> Router <span class="token operator">=</span> <span class="token punctuation">{</span>
      currentRoute<span class="token punctuation">,</span>
      listening<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  
      addRoute<span class="token punctuation">,</span>
      removeRoute<span class="token punctuation">,</span>
      hasRoute<span class="token punctuation">,</span>
      getRoutes<span class="token punctuation">,</span>
      
      <span class="token comment">// ...</span>
      
      <span class="token function">install</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据 vue 官方的设计，如果要注册一个插件到 vue 应用里面，需要有这么一个 install 方法。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>myPlugin<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>编写插件：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> myPlugin <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">install</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 一些配置</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,68),w={href:"https://cn.vuejs.org/guide/reusability/plugins.html#introduction",target:"_blank",rel:"noopener noreferrer"},R=t(`<p>接下来我们就来看一下 router 内部的 install 方法的具体实现，install 方法的整体结构如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token function">install</span><span class="token punctuation">(</span>app<span class="token operator">:</span> App<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">this</span>
    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;RouterLink&#39;</span><span class="token punctuation">,</span> RouterLink<span class="token punctuation">)</span>
    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;RouterView&#39;</span><span class="token punctuation">,</span> RouterView<span class="token punctuation">)</span>

    app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$router <span class="token operator">=</span> router
    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">,</span> <span class="token string">&#39;$route&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">unref</span><span class="token punctuation">(</span>currentRoute<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
   
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      isBrowser <span class="token operator">&amp;&amp;</span>
      <span class="token operator">!</span>started <span class="token operator">&amp;&amp;</span>
      currentRoute<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token constant">START_LOCATION_NORMALIZED</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      started <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token function">push</span><span class="token punctuation">(</span>routerHistory<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>err <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Unexpected error when starting the router:&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> reactiveRoute <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> RouteLocationNormalizedLoaded
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>reactiveRoute<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> currentRoute<span class="token punctuation">.</span>value<span class="token punctuation">[</span>key <span class="token keyword">as</span> <span class="token keyword">keyof</span> RouteLocationNormalized<span class="token punctuation">]</span><span class="token punctuation">,</span>
        enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>routerKey<span class="token punctuation">,</span> router<span class="token punctuation">)</span>
    app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>routeLocationKey<span class="token punctuation">,</span> <span class="token function">shallowReactive</span><span class="token punctuation">(</span>reactiveRoute<span class="token punctuation">)</span><span class="token punctuation">)</span>
    app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>routerViewLocationKey<span class="token punctuation">,</span> currentRoute<span class="token punctuation">)</span>

    <span class="token keyword">const</span> unmountApp <span class="token operator">=</span> app<span class="token punctuation">.</span>unmount
    installedApps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>
    app<span class="token punctuation">.</span><span class="token function-variable function">unmount</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      installedApps<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>installedApps<span class="token punctuation">.</span>size <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pendingLocation <span class="token operator">=</span> <span class="token constant">START_LOCATION_NORMALIZED</span>
        removeHistoryListener <span class="token operator">&amp;&amp;</span> <span class="token function">removeHistoryListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        removeHistoryListener <span class="token operator">=</span> <span class="token keyword">null</span>
        currentRoute<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token constant">START_LOCATION_NORMALIZED</span>
        started <span class="token operator">=</span> <span class="token boolean">false</span>
        ready <span class="token operator">=</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
      <span class="token function">unmountApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们来一句一句进行解析：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">this</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里定义了一个变量 router，把 this 的值赋给它，注意 this 的指向，这里的 this 指向包含 install 方法的对象，也就是外部所定义的 router 对象。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;RouterLink&#39;</span><span class="token punctuation">,</span> RouterLink<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;RouterView&#39;</span><span class="token punctuation">,</span> RouterView<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这两句非常简单，就是在调用 app.component 方法来注册组件在整个应用里面。每一个组件有一个专门的 ts 文件所对应。代码如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> RouterLink <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./RouterLink&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> RouterView <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./RouterView&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$router <span class="token operator">=</span> router
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这一句其实就是将 router 对象赋值给 <code>$router</code>，回头在外部就可以通过 <code>this.$router</code> 获取到整个 router 对象</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">,</span> <span class="token string">&#39;$route&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">unref</span><span class="token punctuation">(</span>currentRoute<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为 <code>app.config.globalProperties</code> 这个对象添加了一个新的属性叫做 <code>$route</code>，外部就可以通过 <code>this.$route</code> 获取当前的路由位置</p><p>当外部获取的时候，内部会触发一个 getter，返回 <code>currentRoute</code> 对应的值。</p><p>需要注意，这里使用到了 unref，vue3 里面提供了一个名为 unref 的辅助函数，该辅助函数用于处理可能是 ref 的值。</p><ul><li>如果你的参数是一个响应式的值（ref），则返回对应的值</li><li>如果你的参数不是一个 ref，那么则返回原本的参数</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>
  isBrowser <span class="token operator">&amp;&amp;</span>
  <span class="token operator">!</span>started <span class="token operator">&amp;&amp;</span>
  currentRoute<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token constant">START_LOCATION_NORMALIZED</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里整个 if 其实就是在判断应用是否是第一次启动</span>
  <span class="token comment">// 如果是第一次启动，那么将 started 修改为 true，下一次就不会进来了</span>
  <span class="token comment">// 也就是说，这段代码只会在第一次初始化的时候执行</span>
  started <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token comment">// 将 routerHistory.location 进行一个 push 操作</span>
  <span class="token comment">// 至于 routerHistory.location 是什么？push 又是如何操作的？</span>
  <span class="token comment">// 后面再来追</span>
  <span class="token function">push</span><span class="token punctuation">(</span>routerHistory<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>err <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Unexpected error when starting the router:&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里解释一下为什么要做这么一个判断？</p><p>在大多数情况下，我们的单页应用就只有一个 vue-router 实例，但是在一些特殊情况下，我们可能一个页面里面有多个 vue 应用，每个 vue 应用对应一个 vue-router</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>既然有多个 vue 应用，那么不同的 vue 应用可以都挂载 vue-router 实例：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  history<span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  routes<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// routes...</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app1 <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App1<span class="token punctuation">)</span><span class="token punctuation">;</span>
app1<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span>
app1<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app2 <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App2<span class="token punctuation">)</span><span class="token punctuation">;</span>
app2<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span>
app2<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然挂载 vue-router 挂了多次，但是 <code>push(routerHistory.location)</code> 这个操作只会在第一次挂载 vue-router 对象的时候执行，因此需要这么一个判断的代码，判断其是否是第一次启动应用。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> reactiveRoute <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> RouteLocationNormalizedLoaded
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>reactiveRoute<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> currentRoute<span class="token punctuation">.</span>value<span class="token punctuation">[</span>key <span class="token keyword">as</span> <span class="token keyword">keyof</span> RouteLocationNormalized<span class="token punctuation">]</span><span class="token punctuation">,</span>
    enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这边首先创建了一个对象，注意这个对象的类型为 <code>RouteLocationNormalizedLoaded</code> 这个类型，这里和 START_LOCATION_NORMALIZED 这个常量的类型是一致的。</p><p>下面的 for 循环就是在遍历 START_LOCATION_NORMALIZED 这个常量对象，取出来每一个值赋值给 reactiveRoute 对象，但是这里不是简单的赋值，而是将每个值变为了一个 getter 返回的值，getter 所返回的值又和 currentRoute 进行了关联。简单来讲，就是 currentRoute 对应的值发生改变的话，那么这个 reactiveRoute 也会发生改变。</p><p>举个例子：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 假设 currentRoute 对应了如下的值</span>
<span class="token keyword">let</span> currentRoute <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  path<span class="token operator">:</span> <span class="token string">&#39;/user/123&#39;</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span>
  params<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;123&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 接下来执行了源码中对应部分的代码：</span>
<span class="token keyword">const</span> reactiveRoute <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> RouteLocationNormalizedLoaded
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token constant">START_LOCATION_NORMALIZED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>reactiveRoute<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> currentRoute<span class="token punctuation">.</span>value<span class="token punctuation">[</span>key <span class="token keyword">as</span> <span class="token keyword">keyof</span> RouteLocationNormalized<span class="token punctuation">]</span><span class="token punctuation">,</span>
    enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 之后修改 currentRoute，reactiveRoute 也会发生改变</span>
currentRoute<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>
  path<span class="token operator">:</span> <span class="token string">&#39;/user/123/profile&#39;</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span>
  params<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;123&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reactiveRoute<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token comment">// &#39;/user/123/profile&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>routerKey<span class="token punctuation">,</span> router<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>routeLocationKey<span class="token punctuation">,</span> <span class="token function">shallowReactive</span><span class="token punctuation">(</span>reactiveRoute<span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>routerViewLocationKey<span class="token punctuation">,</span> currentRoute<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这三行代码是使用到了 vue 里面的依赖注入功能，这里针对路由对象、响应式的路由值、当前路由进行注册，回头在子组件中就可以通过 inject 来访问这些注册的值。举个例子：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// router/index.ts</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> router
<span class="token comment">// main.ts</span>
<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&quot;router&quot;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
   <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token comment">// 这里就是在使用 provide 来注册整个 router 对象</span>
  	 <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;router&#39;</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>                        
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册之后，可以在其他文件或者组件里面通过 inject 很轻松的拿到这个 router 对象， 从而避免了层层传递值。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>inject<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 通过 inject 拿到所注入的 router 对象</span>
    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;router&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上在源码的 <code>useApi.ts</code> 里面，提供了 <code>useRouter</code> 以及 <code>useRoute</code> 这两个方法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Router <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">inject</span><span class="token punctuation">(</span>routerKey<span class="token punctuation">)</span><span class="token operator">!</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> RouteLocationNormalizedLoaded <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">inject</span><span class="token punctuation">(</span>routeLocationKey<span class="token punctuation">)</span><span class="token operator">!</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意后面的 ！是属于 ts 里面的语法，表示一个东西一定存在，类似于断言。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> unmountApp <span class="token operator">=</span> app<span class="token punctuation">.</span>unmount
installedApps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function-variable function">unmount</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  installedApps<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>installedApps<span class="token punctuation">.</span>size <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pendingLocation <span class="token operator">=</span> <span class="token constant">START_LOCATION_NORMALIZED</span>
    removeHistoryListener <span class="token operator">&amp;&amp;</span> <span class="token function">removeHistoryListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    removeHistoryListener <span class="token operator">=</span> <span class="token keyword">null</span>
    currentRoute<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token constant">START_LOCATION_NORMALIZED</span>
    started <span class="token operator">=</span> <span class="token boolean">false</span>
    ready <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token function">unmountApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里重写了 vue 的 unmount 卸载方法，首先将 vue 原本的 unmount 卸载方法存储到 unmountApp 里面（后面要使用，所以这里暂时存一份），然后 app.unmount = function(){ ... } 这一块代码就是在重写 unmount 方法了，也就是说，当 vue 应用进行卸载的时候，会先执行重写的方法，但是 vue 卸载的时候，本身的卸载方法也是需要执行的，所以最后有一句 unmountApp( ) 表示执行原本 vue 应用的卸载方法。</p><h2 id="二、history-基础知识" tabindex="-1"><a class="header-anchor" href="#二、history-基础知识"><span>二、history 基础知识</span></a></h2><p>history 是浏览器环境中所支持的一个对象，该对象用于管理当前创建最近访问过的 URL 历史记录，所有的 URL 会被存储在一个名为 histroy 的对象里面，回头就可以通过 JS 脚本调用 history 对象的方法从而控制浏览器前进或者后退。</p><p>例如打开浏览器，新创建一个标签页会话，然后在控制台输入 history，那么就能够看到这个对象</p><img src="`+d+`" style="zoom:67%;"><ul><li><p>length：表示历史记录堆栈中 URL 的数量，这包括了当前页面以及之前访问过的页面的记录。需要注意，这个属性是一个只读属性，不能够通过代码去修改的。</p></li><li><p>scrollRestoration：对应的值有两个</p><ul><li>auto：默认值，回到上一个历史记录的时候，浏览器会尝试自动滚动到上一次所滚动的地方</li><li>manual：需要开发者自己来处理这个滚动恢复</li></ul></li><li><p>state：这个属性表示当前历史记录条目的 state 状态对象，这个状态对象的值可以由 pushState 或者 replaceState 来创建，如果没有通过这两个方法进行创建的话，那么默认值为 null</p></li></ul><p>之所以要复习这个 history 对象，是因为我们的单页应用主要就是和这个 history 对象打交道。</p><p>所谓单页应用，本质上只有一张 html 页面，要做到视图的变化，就需要需要前端路由去映射不同的模块。</p><p>目前比较流行的单页方式有两种：</p><ul><li>hash 模式</li><li>html5 模式</li></ul><h3 id="_1-hash模式" tabindex="-1"><a class="header-anchor" href="#_1-hash模式"><span>1. hash模式</span></a></h3><p>hash 模式的原理在于一个 URL 的 hash 部分的变化，不会引起和服务器之间的交互，那么我们就可以让 hash 部分的值和视图模块相对应：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>example.com/#/index  // 首页视图
example.com/#/list   // 列表视图
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>hash 值的改变不会导致向服务器发送请求，但是 history 列表是会发生改变，那么用户就可以通过浏览器的前进和后退去控制视图的变化，开发者也可以通过 history 提供的相关方法 forward、back、go 来进行不同视图之间的跳转。</p><p>hash 改变之后，会触发 <code>hashchange</code> 的事件，所以我们一般会去监听这个事件，从而根据 hash 值的变化来进行视图的切换：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;hashchange&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取新的哈希值</span>
  <span class="token keyword">const</span> hash <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>

  <span class="token comment">// 根据新的哈希值来更新页面内容</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&#39;#/page1&#39;</span><span class="token operator">:</span>
      <span class="token comment">// 加载 page1 的内容</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&#39;#/page2&#39;</span><span class="token operator">:</span>
      <span class="token comment">// 加载 page2 的内容</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token comment">// 更多的情况...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-html5模式" tabindex="-1"><a class="header-anchor" href="#_2-html5模式"><span>2. html5模式</span></a></h3><p>html5模式用到 history 相关的 API 来通过另外一种方式实现这个单页应用：</p><p><code>pushState</code>：用于在浏览器堆栈里面添加一个新的状态，这个方法接收 3 个参数</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> title<span class="token punctuation">,</span> url<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>state：要推入的状态对象，一般要求这个对象就是一个纯粹的数据对象（能够被 JSON.stringify 转为字符串的对象）</li><li>title：新页面的标题，一般浏览器都会忽略这个参数，所以一般传递一个空字符串或者 null 即可</li><li>url：新的历史记录的 url</li></ul><p>例如，我们在控制台输入如下的代码：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>history.pushState<span class="token punctuation">(</span><span class="token punctuation">{</span>page:<span class="token string">&#39;page1&#39;</span><span class="token punctuation">}</span>, <span class="token string">&#39;&#39;</span>, <span class="token string">&#39;/page1&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>假设浏览器的 url 原本是 www.test.com 的话，那么执行了上面的代码之后，就会变化 www.test.com/page1 ，并且不会和服务器之间进行通信，但是 history 堆栈会发生响应的变化，这就为我们通过这种方式来实现单页应用创建了良好的条件。</p><p><code>replaceState</code>：该方法和 pushState 方法是类似的，但是不会推入新的状态，而是替换。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>history<span class="token punctuation">.</span><span class="token function">repalceState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">page</span><span class="token operator">:</span><span class="token string">&#39;page1&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/page1&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>popState</code>：当浏览器页面进行前进后退的时候，会触发 popState 事件，你可以监听这个事件，然后从事件对象中获取之前传递给 pushState 或者 repalceState 的 state 状态对象。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;state: &#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们来举一个例子，下面是基于 html5 history api 所实现的一个简单单页应用：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>My Single Page App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">navigate</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span> |
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/about<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">navigate</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token string">&#39;/about&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 渲染函数</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">switch</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&#39;/&#39;</span><span class="token operator">:</span>
      content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&lt;h2&gt;Welcome to Home Page&lt;/h2&gt;&#39;</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&#39;/about&#39;</span><span class="token operator">:</span>
      content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&lt;h2&gt;About Page&lt;/h2&gt;&#39;</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&lt;h2&gt;Page Not Found&lt;/h2&gt;&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 导航函数：保证用户点击页面中的 a 标签的时候，能够进行正常跳转</span>
<span class="token keyword">function</span> <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> route</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 阻止默认事件</span>
  history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 推入新的状态</span>
  <span class="token function">render</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 渲染对应的视图</span>
<span class="token punctuation">}</span>

<span class="token comment">// 监听 popstate 事件</span>
<span class="token comment">// 保证用户点击浏览器本身的前进后退按钮的时候，视图能够进行切换</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 初始化</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">;</span>
  history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>html5 模式相比 hash 模式，外观上更加的简洁美观，没有 # 号了，但是也有一个缺点，就是当你刷新页面的时候，会发现服务器会返回 404，原因很简单，例如前面我们所举的例子，URL 变为了 www.test.com/page1 ，刷新的时候会将整个这个 URL 提交给服务器，但是服务器后端无法找到对应的资源，所以会报错。</p><p>为了解决这个问题，就需要我们在服务器上面做一些配置，使得针对所有的路由请求，服务器都返回一份相同的 html 文件（通常就是 index.html），因此对于这个 URL www.test.com/page1 ，哪怕服务器找不到，也给你返回 index.html，之后再使用前端路由来接管渲染相应的内容。</p><p>具体的配置方法取决于你的服务器软件。</p><p>例如你使用的 express.js，那么你可以添加如下的配置：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  response<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;public&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你使用的是 nginx，那么你需要添加如下的配置：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>location <span class="token operator">/</span> <span class="token punctuation">{</span>
  try_files $uri <span class="token operator">/</span>index<span class="token punctuation">.</span>html<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-location-对象" tabindex="-1"><a class="header-anchor" href="#_3-location-对象"><span>3. location 对象</span></a></h3><p>location 对象也是浏览器环境中的一个原生对象，通过这个对象可以获取到和 location 相关的众多信息。</p><p>例如：</p><ul><li><p><em>hash</em>：如果 <em>URL</em> 中包含有 #，该方法将返回该符号之后的内容。 例如：<em>http://www.example.com/index.html#welcome</em> 的 <em>hash</em> 是 #welcome。</p></li><li><p><em>host</em>：服务器的名字，例如 <em>www.example.com</em> 。</p></li><li><p><em>hostname</em>：通常等于 <em>host</em>，有时会省略前面的 <em>www</em>。</p></li><li><p><em>href</em>：当前页面载入的完整 <em>URL</em>。</p></li><li><p><em>pathname</em>：<em>URL</em> 中主机名之后的部分。 例如：<em>http://www.example.com/html/js/jsbasic/2010/0319/88.html</em> 的 <em>pathname</em> 是 <em>/html/js/jsbasic/2010/0319/88.html</em>。</p></li><li><p><em>port</em>：<em>URL</em> 中声明的请求端口。默认情况下，大多数 <em>URL</em> 没有端口信息（默认为 <em>80</em> 端口），所以该属性通常是空白的。 例如 <em>http://www.example.com:8080/index.html</em> 这样的 <em>URL</em> 的 <em>port</em> 属性为 &#39;<em>8080</em>&#39;。</p></li><li><p><em>protocol</em>：<em>URL</em> 中使用的协议，即双斜杠 // 之前的部分。 例如 <em>http://www.example.com</em> 中的 <em>protocol</em> 属性等于 &#39;http:&#39;，<em>ftp://www.example.com</em> 的 <em>protocol</em> 属性等于&#39;ftp:&#39;。</p></li><li><p><em>search</em>：执行 <em>GET</em> 请求的 <em>URL</em> 中的问号 ? 后的部分，又称查询字符串。 例如 <em>http://www.example.com/search.html?tern=sunchis</em> 中 <em>search</em> 属性为 <em>?term=sunchis</em>。</p></li></ul><p>除了上面的属性以外，该对象还支持一些方法：</p><ul><li>assign 方法：载入一个新的文档</li><li>reload方法：重新载入当前文档</li><li>replace 方法：用新的文档替换当前文档</li></ul><p>不过对于开发单页应用来讲，上面的方法一般不会用到，因为单页应用的特点就是一个页面，没有刷新的，也就是说至此至终都是一个文档，不会载入新的文档。</p><h2 id="三、createwebhistory结构拆解" tabindex="-1"><a class="header-anchor" href="#三、createwebhistory结构拆解"><span>三、createWebHistory结构拆解</span></a></h2><p>首先我们还是来回忆一下 <code>createWebHistory</code> 方法是如何使用的。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  history<span class="token operator">:</span> <span class="token function">createWebHistroy</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">BASE_URL</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个 <code>createWebHistroy(import.meta.env.BASE_URL)</code> 方法调用之后，返回的是一个对象，然后把这个对象作为传入到 createRouter 里面的配置对象的 history 对应的键值。</p><p><code>createWebHistroy</code> 方法所对应的源码位于 history/html5.ts 文件里面。</p><h3 id="_1-整体结构分析" tabindex="-1"><a class="header-anchor" href="#_1-整体结构分析"><span>1. 整体结构分析</span></a></h3><p>整体方法的结构如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span>base<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> RouterHistory <span class="token punctuation">{</span>
  <span class="token comment">// 1. 针对 base 做一个标准化操作</span>
  <span class="token comment">// 前加/，后去掉/</span>
  base <span class="token operator">=</span> <span class="token function">normalizeBase</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span>

  <span class="token comment">// 2. 创建导航对象</span>
  <span class="token comment">// {</span>
  <span class="token comment">//   location: currentLocation,</span>
  <span class="token comment">//   state: historyState,</span>
  <span class="token comment">//   push,</span>
  <span class="token comment">//   replace</span>
  <span class="token comment">// }</span>
  <span class="token keyword">const</span> historyNavigation <span class="token operator">=</span> <span class="token function">useHistoryStateNavigation</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span>
  
  <span class="token comment">// 3. 创建监听对象</span>
  <span class="token keyword">const</span> historyListeners <span class="token operator">=</span> <span class="token function">useHistoryListeners</span><span class="token punctuation">(</span>
    base<span class="token punctuation">,</span>
    historyNavigation<span class="token punctuation">.</span>state<span class="token punctuation">,</span>
    historyNavigation<span class="token punctuation">.</span>location<span class="token punctuation">,</span>
    historyNavigation<span class="token punctuation">.</span>replace
  <span class="token punctuation">)</span>
  <span class="token keyword">function</span> <span class="token function">go</span><span class="token punctuation">(</span>delta<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> triggerListeners <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>triggerListeners<span class="token punctuation">)</span> historyListeners<span class="token punctuation">.</span><span class="token function">pauseListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 4. 将上面的对象合并到 routerHistory 的对象里面</span>
  <span class="token keyword">const</span> routerHistory<span class="token operator">:</span> RouterHistory <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span>
      <span class="token comment">// it&#39;s overridden right after</span>
      location<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
      base<span class="token punctuation">,</span>
      go<span class="token punctuation">,</span>
      createHref<span class="token operator">:</span> <span class="token function">createHref</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    historyNavigation<span class="token punctuation">,</span>
    historyListeners
  <span class="token punctuation">)</span>

  <span class="token comment">// 5. 为 routerHistory 添加 location 和 state 属性</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>routerHistory<span class="token punctuation">,</span> <span class="token string">&#39;location&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> historyNavigation<span class="token punctuation">.</span>location<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>routerHistory<span class="token punctuation">,</span> <span class="token string">&#39;state&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> historyNavigation<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// 6. 返回 routerHistory</span>
  <span class="token keyword">return</span> routerHistory
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先该方法接收一个可选的 base 参数，在上面的示例中，我们传入的是 <code>import.meta.env.BASE_URL</code></p><ul><li><code>import.meta</code>：表示 JS 的元素行，它包含了和当前 JS 模块相关的元数据。在 vite 项目中，<code>import.meta.env</code> 用于访问项目的环境变量</li><li><code>BASE_URL</code>：这是一个非常常见的环境变量，它通常用于表示一个应用程序的基础 URL。</li></ul><p>例如你将整个应用部署到 /app/ 目录下面，那么你就可以将 BASE_URL 设置为 /app/，之后当你创建一个 /home 的路由的时候，那么这个路由的完整路径就会被映射为 /app/home。</p><p>关于这个 BASE_URL 默认是可以在 vite.config.ts 里面进行配置的，如果你没有配置，那么默认会是 /</p>`,93),x={href:"https://cn.vitejs.dev/config/shared-options.html#base",target:"_blank",rel:"noopener noreferrer"},L=t(`<h3 id="_2-标准化base" tabindex="-1"><a class="header-anchor" href="#_2-标准化base"><span>2. 标准化base</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>base <span class="token operator">=</span> <span class="token function">normalizeBase</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>normalizeBase</code> 方法究竟在做什么：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">normalizeBase</span><span class="token punctuation">(</span>base<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token comment">// 判断是否传入了 base</span>
  <span class="token comment">// 如果没有传递，给一个初始值 /</span>
  <span class="token comment">// 另外还对浏览器环境下的 base 标签进行了判断</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>base<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isBrowser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// respect &lt;base&gt; tag</span>
      <span class="token keyword">const</span> baseEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;base&#39;</span><span class="token punctuation">)</span>
      base <span class="token operator">=</span> <span class="token punctuation">(</span>baseEl <span class="token operator">&amp;&amp;</span> baseEl<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;href&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;/&#39;</span>
      <span class="token comment">// strip full URL origin</span>
      base <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\w+:\\/\\/[^\\/]+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      base <span class="token operator">=</span> <span class="token string">&#39;/&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 也就是说，经历上面的 if，base 一定是有值的</span>

  <span class="token comment">// 如果 base 的第一个字符不为 / 或者 # </span>
  <span class="token comment">// 那么就手动的添加一个 /</span>
  <span class="token comment">// 例如，传入的 base 为 app/，经过下面这行代码处理之后，就会变为 /app/</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>base<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">&amp;&amp;</span> base<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span> base <span class="token operator">=</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> base

  <span class="token comment">// 又使用 removeTrailingSlash 方法对 base 做了某种处理</span>
  <span class="token comment">// 然后返回处理值</span>
  <span class="token comment">// /app/ --&gt; removeTrailingSlash(base) --&gt; /app</span>
  <span class="token keyword">return</span> <span class="token function">removeTrailingSlash</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>removeTrailingSlash</code> 方法对应的源码如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token constant">TRAILING_SLASH_RE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/$</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">removeTrailingSlash</span> <span class="token operator">=</span> <span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">TRAILING_SLASH_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，我们就将 <code>normalizeBase</code> 方法搞清楚了，就是对传入的 base 做一个标准化的初始操作，不管你传入的是什么牛鬼蛇神，这边都进行一个统一处理，拿到一个相对比较统一的值。</p><h3 id="_3-后续操作" tabindex="-1"><a class="header-anchor" href="#_3-后续操作"><span>3. 后续操作</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> historyNavigation <span class="token operator">=</span> <span class="token function">useHistoryStateNavigation</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span>
<span class="token keyword">const</span> historyListeners <span class="token operator">=</span> <span class="token function">useHistoryListeners</span><span class="token punctuation">(</span>
  base<span class="token punctuation">,</span>
  historyNavigation<span class="token punctuation">.</span>state<span class="token punctuation">,</span>
  historyNavigation<span class="token punctuation">.</span>location<span class="token punctuation">,</span>
  historyNavigation<span class="token punctuation">.</span>replace
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码分别调用了 <code>useHistoryStateNavigation</code> 和 <code>useHistoryListeners</code> 方法，这个可以说是整个 createWebHistory 方法的核心，这两个方法分别会返回一个对象，也就是说 <code>historyNavigation</code> 和 <code>historyListeners</code> 是两个对象，这两个对象分别会被合并到 <code>routerHistory</code> 对象里面：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> routerHistory<span class="token operator">:</span> RouterHistory <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// 覆盖右边对象的部分属性</span>
    location<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    base<span class="token punctuation">,</span>
    go<span class="token punctuation">,</span>
    createHref<span class="token operator">:</span> <span class="token function">createHref</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  historyNavigation<span class="token punctuation">,</span>
  historyListeners
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>合并后最终导出的就是这个 routerHistory 对象：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">return</span> routerHistory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关于 <code>useHistoryStateNavigation</code> 和 <code>useHistoryListeners</code> 方法具体做了什么，我们放在后面来解析，这里先放一放。</p><p>注意上面在进行对象合并的时候，第一个对象里面有一个 go 方法，对应的源码如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">go</span><span class="token punctuation">(</span>delta<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> triggerListeners <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>triggerListeners<span class="token punctuation">)</span> historyListeners<span class="token punctuation">.</span><span class="token function">pauseListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的源码，第一句 if 我们可以先放一放，我们看第二句，我们发现第二句其实就是在调用原生的 history 对应的 go 方法，然后把 delta 传进去。并且这个方法会被合并到 routerHistory 上面随着 routerHistory 暴露出去。</p><p>我们回忆一下，createRouter 所创建的 router 对象就有 go 方法</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">go</span> <span class="token operator">=</span> <span class="token punctuation">(</span>delta<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> routerHistory<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span>
<span class="token keyword">const</span> router<span class="token operator">:</span> Router <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  go<span class="token punctuation">,</span>
  <span class="token function-variable function">back</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">forward</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>routerHistory<span class="token punctuation">,</span> <span class="token string">&#39;location&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> historyNavigation<span class="token punctuation">.</span>location<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>routerHistory<span class="token punctuation">,</span> <span class="token string">&#39;state&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> historyNavigation<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后仍然是给要暴露出去的 routerHistory 添加属性，这里添加了两个属性：</p><ul><li>location：对应的值为 historyNavigation.location.value</li><li>state：对应的值我哦 historyNavigation.state.value</li></ul><h2 id="四、usehistorystatenavigation结构解析" tabindex="-1"><a class="header-anchor" href="#四、usehistorystatenavigation结构解析"><span>四、useHistoryStateNavigation结构解析</span></a></h2><h3 id="_1-整体结构" tabindex="-1"><a class="header-anchor" href="#_1-整体结构"><span>1. 整体结构</span></a></h3><p>该方法的整体结构如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">useHistoryStateNavigation</span><span class="token punctuation">(</span>base<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 从原生的 window 对象里面解构出 history 和 location</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> history<span class="token punctuation">,</span> location <span class="token punctuation">}</span> <span class="token operator">=</span> window

  <span class="token comment">// 两个私有的变量，之后会随着返回的对象暴露给外部</span>
  <span class="token comment">// 这里实际上也是用到了闭包</span>
  <span class="token keyword">const</span> currentLocation<span class="token operator">:</span> ValueContainer<span class="token operator">&lt;</span>HistoryLocation<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>value<span class="token operator">:</span> <span class="token function">createCurrentLocation</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token comment">// 创建一个舍去base的url的字符串</span>
  <span class="token keyword">const</span> historyState<span class="token operator">:</span> ValueContainer<span class="token operator">&lt;</span>StateEntry<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> history<span class="token punctuation">.</span>state <span class="token punctuation">}</span>
 
  <span class="token comment">// 看你是否是第一次进入页面，如果是第一次，那么此时是没有任何状态的</span>
  <span class="token comment">// 那么我们就维护一个初始化的状态</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>historyState<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 内部方法，供内部使用</span>
  <span class="token keyword">function</span> <span class="token function">changeLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 暴露给外部的方法</span>
  <span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span>to<span class="token operator">:</span> HistoryLocation<span class="token punctuation">,</span> data<span class="token operator">?</span><span class="token operator">:</span> HistoryState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 暴露给外部的方法</span>
  <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span>to<span class="token operator">:</span> HistoryLocation<span class="token punctuation">,</span> data<span class="token operator">?</span><span class="token operator">:</span> HistoryState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    location<span class="token operator">:</span> currentLocation<span class="token punctuation">,</span>
    state<span class="token operator">:</span> historyState<span class="token punctuation">,</span>

    push<span class="token punctuation">,</span>
    replace<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法会为我们返回一个对象，该对象主要是负责路由的历史状态和当前位置的管理，这个方法接收一个 base 作为参数，返回的对象会包含 state、location、push 和 repalce 这么几个成员。</p><h3 id="_2-代码拆解" tabindex="-1"><a class="header-anchor" href="#_2-代码拆解"><span>2. 代码拆解</span></a></h3><p>接下来我们进入到代码拆解环节</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> currentLocation<span class="token operator">:</span> ValueContainer<span class="token operator">&lt;</span>HistoryLocation<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>value<span class="token operator">:</span> <span class="token function">createCurrentLocation</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>currentLocation</code> 最终对应的值为一个对象 <code>{ value: xxx }</code> ，xxx 这个值来源于 <code>createCurrentLocation(base, location)</code>，接下来我们就会去看这个方法的源码：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 接收两个参数</span>
<span class="token comment">// 1. base</span>
<span class="token comment">// 2. location 注意这个 location 是原生的 location 对象</span>
<span class="token keyword">function</span> <span class="token function">createCurrentLocation</span><span class="token punctuation">(</span>
  base<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  location<span class="token operator">:</span> Location
<span class="token punctuation">)</span><span class="token operator">:</span> HistoryLocation <span class="token punctuation">{</span>
  <span class="token comment">// 从原生locaton 对象里面解构出来一些值</span>
  <span class="token comment">// 假设我们的完整的 url 为 https://example.com/home/page?query=searchterm#section1</span>
  <span class="token comment">// pathname ---&gt; /home/page</span>
  <span class="token comment">// search ---&gt; ?query=searchterm</span>
  <span class="token comment">// hash ---&gt; #section1</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> pathname<span class="token punctuation">,</span> search<span class="token punctuation">,</span> hash <span class="token punctuation">}</span> <span class="token operator">=</span> location
  
  <span class="token comment">// 整个这一段是在查看 base 里面是否有 #</span>
  <span class="token comment">// 如果有，那么会进入到 if 里面进行单独的处理</span>
  <span class="token keyword">const</span> hashPos <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hashPos <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> slicePos <span class="token operator">=</span> hash<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>hashPos<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token operator">?</span> base<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>hashPos<span class="token punctuation">)</span><span class="token punctuation">.</span>length
      <span class="token operator">:</span> <span class="token number">1</span>
    <span class="token keyword">let</span> pathFromHash <span class="token operator">=</span> hash<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>slicePos<span class="token punctuation">)</span>
    <span class="token comment">// prepend the starting slash to hash so the url starts with /#</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pathFromHash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> pathFromHash <span class="token operator">=</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> pathFromHash
    <span class="token keyword">return</span> <span class="token function">stripBase</span><span class="token punctuation">(</span>pathFromHash<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">stripBase</span><span class="token punctuation">(</span>pathname<span class="token punctuation">,</span> base<span class="token punctuation">)</span>
  <span class="token keyword">return</span> path <span class="token operator">+</span> search <span class="token operator">+</span> hash
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了简化代码，我们先忽略 if，那么这段代码就变为了：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 接收两个参数</span>
<span class="token comment">// 1. base</span>
<span class="token comment">// 2. location 注意这个 location 是原生的 location 对象</span>
<span class="token keyword">function</span> <span class="token function">createCurrentLocation</span><span class="token punctuation">(</span>base<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>location<span class="token operator">:</span> Location<span class="token punctuation">)</span><span class="token operator">:</span> HistoryLocation <span class="token punctuation">{</span>
  <span class="token comment">// 从原生locaton 对象里面解构出来一些值</span>
  <span class="token comment">// 假设我们的完整的 url 为 https://example.com/home/page?query=searchterm#section1</span>
  <span class="token comment">// pathname ---&gt; /home/page</span>
  <span class="token comment">// search ---&gt; ?query=searchterm</span>
  <span class="token comment">// hash ---&gt; #section1</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> pathname<span class="token punctuation">,</span> search<span class="token punctuation">,</span> hash <span class="token punctuation">}</span> <span class="token operator">=</span> location
  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">stripBase</span><span class="token punctuation">(</span>pathname<span class="token punctuation">,</span> base<span class="token punctuation">)</span>
  <span class="token keyword">return</span> path <span class="token operator">+</span> search <span class="token operator">+</span> hash
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来调用了 stripBase 对 pathname 进行一个处理，返回 <code>path + search + hash</code> 的拼接，返回的值是一个字符串类型，而这里标注的是 HistoryLocation，这个 HistoryLocation 其实就是 string 的一个别名</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">HistoryLocation</span> <span class="token operator">=</span> <span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关键点就来到 stripBase，看一下这个方法做了什么：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">stripBase</span><span class="token punctuation">(</span>pathname<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> base<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token comment">// no base or base is not found at the beginning</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>base <span class="token operator">||</span> <span class="token operator">!</span>pathname<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> pathname
  <span class="token keyword">return</span> pathname<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;/&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法主要负责从一个路径中移除 base 部分的字符串，例如：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> base <span class="token operator">=</span> <span class="token string">&quot;/app&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pathname <span class="token operator">=</span> <span class="token string">&quot;/app/home&quot;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">stripBase</span><span class="token punctuation">(</span>pathname<span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// /home</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 stripBase 方法搞清楚后，那么 <code>createCurrentLocation</code> 这个方法也就清晰，假设 base 为 / ，location 对应的 url 假设为 https://example.com/home/page?query=searchterm#section1 那么最终通过 createCurrentLocation 处理，得到的结果如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">createCurrentLocation</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  pathname<span class="token operator">:</span> <span class="token string">&quot;/home/page&quot;</span><span class="token punctuation">,</span>
  search<span class="token operator">:</span> <span class="token string">&quot;?query=searchterm&quot;</span><span class="token punctuation">,</span>
  hash<span class="token operator">:</span> <span class="token string">&quot;#section1&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// home/page?query=searchterm#section1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设 base 为 /home，location 对应的 url 不变，那么最终通过 createCurrentLocation 处理，得到的结果如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">createCurrentLocation</span><span class="token punctuation">(</span><span class="token string">&quot;/home&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  pathname<span class="token operator">:</span> <span class="token string">&quot;/home/page&quot;</span><span class="token punctuation">,</span>
  search<span class="token operator">:</span> <span class="token string">&quot;?query=searchterm&quot;</span><span class="token punctuation">,</span>
  hash<span class="token operator">:</span> <span class="token string">&quot;#section1&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// /page?query=searchterm#section1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，我们可以很清晰的知道这个 createCurrentLocation 是在干嘛了，就是创建一个 url 的字符串，但是这个 url 字符串是去除了 base 部分。</p><p>至于 if 里面的逻辑，主要是检查 base 里面是否有 #， 如果有 # ， 那么需要单独处理，例如：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 当你的 base 里面还有 # 的时候</span>
<span class="token comment">// 那么从 location 里面解构出来的 hash 部分的值是有问题</span>
<span class="token comment">// 真正 hash 部分的值应该为 #section1，但是得到的却是 #/home/page#section1</span>
<span class="token comment">// 所以需要把这一块进行一个处理</span>
<span class="token comment">// 经过 if 里面的处理，最终得到的字符串为 /page#section1</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">createCurrentLocation</span><span class="token punctuation">(</span><span class="token string">&quot;#/home&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  hash<span class="token operator">:</span> <span class="token string">&quot;#/home/page#section1&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// /page#section1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们来总结一下 <code>createCurrentLocation</code> 调用的时候， <mark>传入 base 和 url 对应的 location，返回一个字符串，这个字符串始终是去除了 base 部分的。</mark></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> historyState<span class="token operator">:</span> ValueContainer<span class="token operator">&lt;</span>StateEntry<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> history<span class="token punctuation">.</span>state <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这句代码表示从原生 history 对象上面去拿 state 状态对象。这里我们可以稍微研究一下类型的值。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// ValueContainer 就是一个泛型对象，T 是什么类型取决于你传入的值</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">ValueContainer<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// StateEntry</span>
<span class="token keyword">interface</span> <span class="token class-name">StateEntry</span> <span class="token keyword">extends</span> <span class="token class-name">HistoryState</span> <span class="token punctuation">{</span>
  back<span class="token operator">:</span> HistoryLocation <span class="token operator">|</span> <span class="token keyword">null</span>
  current<span class="token operator">:</span> HistoryLocation
  forward<span class="token operator">:</span> HistoryLocation <span class="token operator">|</span> <span class="token keyword">null</span>
  position<span class="token operator">:</span> <span class="token builtin">number</span>
  replaced<span class="token operator">:</span> <span class="token builtin">boolean</span>
  scroll<span class="token operator">:</span> _ScrollPositionNormalized <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// HistoryState</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">HistoryState</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> HistoryStateValue
  <span class="token punctuation">[</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> HistoryStateValue
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// HistoryStateValue</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">HistoryStateValue</span> <span class="token operator">=</span>
  <span class="token operator">|</span> <span class="token builtin">string</span>
  <span class="token operator">|</span> <span class="token builtin">number</span>
  <span class="token operator">|</span> <span class="token builtin">boolean</span>
  <span class="token operator">|</span> <span class="token keyword">null</span>
  <span class="token operator">|</span> <span class="token keyword">undefined</span>
  <span class="token operator">|</span> HistoryState
  <span class="token operator">|</span> HistoryStateArray
<span class="token comment">// HistoryStateArray</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">HistoryStateArray</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span>HistoryStateValue<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 判断你是否是首次渲染，因为第一次是没有 historyState 状态对象的</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>historyState<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">changeLocation</span><span class="token punctuation">(</span>
      currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        back<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        current<span class="token operator">:</span> currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
        forward<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token comment">// the length is off by one, we need to decrease it</span>
        position<span class="token operator">:</span> history<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
        replaced<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token comment">// don&#39;t add a scroll as the user may have an anchor, and we want</span>
        <span class="token comment">// scrollBehavior to be triggered without a saved position</span>
        scroll<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token boolean">true</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 内部方法</span>
<span class="token keyword">function</span> <span class="token function">changeLocation</span><span class="token punctuation">(</span>to<span class="token operator">:</span> HistoryLocation<span class="token punctuation">,</span>state<span class="token operator">:</span> StateEntry<span class="token punctuation">,</span>replace<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...   </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>if 主要是判断是否是首次刷新，如果 historyState.value 值为 null，那么说明是第一次，那么就会调用 <code>changeLocation</code> 方法。</p><p><code>changeLocation</code> 方法接收三个参数：</p><ul><li>to：第一个参数刚才所得到的不包含 base 的 url 后面的字符串</li><li>state：第二个参数是一个对象，这个对象的类型为 stateEntry</li><li>repalce：表示是否是替换模式，这里默认传递了 true，表示使用替换模式</li></ul><p>接下来我们就需要看一下 <code>changeLocation</code> 内部在做什么：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">changeLocation</span><span class="token punctuation">(</span>
  to<span class="token operator">:</span> HistoryLocation<span class="token punctuation">,</span>
  state<span class="token operator">:</span> StateEntry<span class="token punctuation">,</span>
  replace<span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token comment">// 判断 base 里面是否包含 # 号</span>
  <span class="token keyword">const</span> hashIndex <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 拼接 url，所拼接的这个 url 回头会作为 pushState 或者 repalceState 方法的第三个参数传入</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span>
    hashIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span>
      <span class="token operator">?</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>host <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;base&#39;</span><span class="token punctuation">)</span>
          <span class="token operator">?</span> base
          <span class="token operator">:</span> base<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>hashIndex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> to
      <span class="token operator">:</span> <span class="token function">createBaseLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> base <span class="token operator">+</span> to
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据 replace 是 true 还是 false</span>
    <span class="token comment">// 来决定调用 replaceState 还是 pushState</span>
    <span class="token comment">// 不管调用哪个，浏览器搜索栏的 url 都会发生变化</span>
    history<span class="token punctuation">[</span>replace <span class="token operator">?</span> <span class="token string">&#39;replaceState&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;pushState&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>
    <span class="token comment">// 将 state 状态对象的值赋值给 historyState.value，从而进行一个初始化</span>
    historyState<span class="token punctuation">.</span>value <span class="token operator">=</span> state
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Error with push/replace State&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Force the navigation, this also resets the call count</span>
    location<span class="token punctuation">[</span>replace <span class="token operator">?</span> <span class="token string">&#39;replace&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;assign&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，整个 changeLocation 方法所做的事情，就非常清晰了，该方法就是根据传入的 to（url 字符串，不包含 base 部分），以及 state 状态值，来 <mark>调用原生 history 对象的 pushState 或者 repalceState 方法来修改 location</mark> ，执行该行代码后，页面搜索栏的 url 就会发生变化，并且这一次变化是会被记录到 history 堆栈里面的。</p><p>最后还剩下两个方法，repalce 以及 push，这两个方法是会随着返回的对象暴露出去的。</p><p>首先我们来看 repalce 方法，对应源码如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span>to<span class="token operator">:</span> HistoryLocation<span class="token punctuation">,</span> data<span class="token operator">?</span><span class="token operator">:</span> HistoryState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建了一个状态对象</span>
  <span class="token keyword">const</span> state<span class="token operator">:</span> StateEntry <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    history<span class="token punctuation">.</span>state<span class="token punctuation">,</span>
    <span class="token function">buildState</span><span class="token punctuation">(</span>
      historyState<span class="token punctuation">.</span>value<span class="token punctuation">.</span>back<span class="token punctuation">,</span>
      <span class="token comment">// keep back and forward entries but override current position</span>
      to<span class="token punctuation">,</span>
      historyState<span class="token punctuation">.</span>value<span class="token punctuation">.</span>forward<span class="token punctuation">,</span>
      <span class="token boolean">true</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    data<span class="token punctuation">,</span>
    <span class="token punctuation">{</span> position<span class="token operator">:</span> historyState<span class="token punctuation">.</span>value<span class="token punctuation">.</span>position <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>

  <span class="token comment">// 调用上面写好的 changeLocation 去改变 location</span>
  <span class="token function">changeLocation</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token comment">// 更新新的 currentLocation 对应的值</span>
  currentLocation<span class="token punctuation">.</span>value <span class="token operator">=</span> to
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里调用了一个 <code>buildState</code> 方法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">buildState</span><span class="token punctuation">(</span>
  back<span class="token operator">:</span> HistoryLocation <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  current<span class="token operator">:</span> HistoryLocation<span class="token punctuation">,</span>
  forward<span class="token operator">:</span> HistoryLocation <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  replaced<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  computeScroll<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">)</span><span class="token operator">:</span> StateEntry <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    back<span class="token punctuation">,</span>
    current<span class="token punctuation">,</span>
    forward<span class="token punctuation">,</span>
    replaced<span class="token punctuation">,</span>
    position<span class="token operator">:</span> window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
    scroll<span class="token operator">:</span> computeScroll <span class="token operator">?</span> <span class="token function">computeScrollPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 buildState 方法就是根据传入的参数，返回一个标准的 StateEntry 的状态对象</p><p>下面是 push 方法相关的源码：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span>to<span class="token operator">:</span> HistoryLocation<span class="token punctuation">,</span> data<span class="token operator">?</span><span class="token operator">:</span> HistoryState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 创建一个状态对象</span>
  <span class="token keyword">const</span> currentState <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    historyState<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
    history<span class="token punctuation">.</span>state <span class="token keyword">as</span> Partial<span class="token operator">&lt;</span>StateEntry<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      forward<span class="token operator">:</span> to<span class="token punctuation">,</span>
      scroll<span class="token operator">:</span> <span class="token function">computeScrollPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>

  <span class="token comment">// 通过刚才创建的状态对象调用 changeLocation 来修改 location</span>
  <span class="token function">changeLocation</span><span class="token punctuation">(</span>currentState<span class="token punctuation">.</span>current<span class="token punctuation">,</span> currentState<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>

  <span class="token comment">// 由创建一个状态对象</span>
  <span class="token keyword">const</span> state<span class="token operator">:</span> StateEntry <span class="token operator">=</span> <span class="token function">assign</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">buildState</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">,</span> to<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> position<span class="token operator">:</span> currentState<span class="token punctuation">.</span>position <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    data
  <span class="token punctuation">)</span>

  <span class="token comment">// 再次调用 changeLocation 方法来修改 location</span>
  <span class="token function">changeLocation</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token comment">// 更新新的 currentLocation 对应的值</span>
  currentLocation<span class="token punctuation">.</span>value <span class="token operator">=</span> to
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>面试题：为什么useHistoryStateNavigation 内部的 push 方法要调用两次 changeLocation ？</p></blockquote><p>仔细观察两次所调用的 <code>changeLocation</code>，你会发现一个事情，第三个参数是不一样的，第一次是 true，第二次是 false，也就是说，第一次是通过 repalce 的方式（history.repalceState）来修改的 location，第二次是通过 push 的方式（history.pushState）来修改的 lcoation。</p><p>因此这个问题就变成了为什么在 push 之前要先 replace 一次 ？</p><p>两次 <code>changeLocation</code> 调用的目录是不一样的。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">changeLocation</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> state<span class="token punctuation">,</span> replace</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  window<span class="token punctuation">.</span>history<span class="token punctuation">[</span>replace <span class="token operator">?</span> <span class="token string">&#39;replaceState&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;pushState&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> to<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 假设在调用 push 函数之前，浏览器的历史记录栈只有一个条目，这个条目表示的路由是 &#39;/home&#39;。</span>
<span class="token comment">// [ &#39;/home&#39; ]  &lt;-- 当前历史记录条目</span>
<span class="token comment">// 历史记录条目的状态对象如下</span>
<span class="token comment">// {</span>
<span class="token comment">//  current: &#39;/home&#39;,</span>
<span class="token comment">//  back: null,</span>
<span class="token comment">//  forward: null,</span>
<span class="token comment">//  // ...其他属性</span>
<span class="token comment">// }</span>
<span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> currentState <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">current</span><span class="token operator">:</span> <span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">forward</span><span class="token operator">:</span> to<span class="token punctuation">,</span>
    <span class="token literal-property property">scroll</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 第一次构建状态对象和调用 changeLocation,更改forward</span>
  <span class="token comment">// [ &#39;/home&#39; ]  &lt;-- 当前历史记录条目</span>
  <span class="token comment">// 历史记录条目的状态对象如下</span>
  <span class="token comment">// {</span>
  <span class="token comment">//  current: &#39;/home&#39;,</span>
  <span class="token comment">//  back: null,</span>
  <span class="token comment">//  forward: /about,</span>
  <span class="token comment">//  // ...其他属性</span>
  <span class="token comment">// }</span>
  <span class="token function">changeLocation</span><span class="token punctuation">(</span>currentState<span class="token punctuation">.</span>current<span class="token punctuation">,</span> currentState<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>

  <span class="token comment">// 第二次构建状态对象和调用 changeLocation，跳转路由</span>
  <span class="token comment">// [ &#39;/home&#39;, &#39;/about&#39; ]  &lt;-- 当前历史记录条目</span>
  <span class="token comment">// 历史记录条目的状态对象如下</span>
  <span class="token comment">// {</span>
  <span class="token comment">//  current: &#39;/about&#39;,</span>
  <span class="token comment">//  back: /home,</span>
  <span class="token comment">//  forward: null,</span>
  <span class="token comment">//  // ...其他属性</span>
  <span class="token comment">// }</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">current</span><span class="token operator">:</span> to<span class="token punctuation">,</span>
    <span class="token literal-property property">back</span><span class="token operator">:</span> currentState<span class="token punctuation">.</span>current<span class="token punctuation">,</span>
    <span class="token literal-property property">forward</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  <span class="token function">changeLocation</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/about&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们定义了一个简化版的 changeLocation 方法和 push 方法。push 方法接收一个参数 to，这个参数表示我们希望跳转到的新的路由，在上面的示例中为 /about。</p><p>当我们调用 <code>push(&#39;/about&#39;)</code>时，首先会构建第一个状态对象 currentState，然后调用 changeLocation 来进行 location 的修改，注意这一次修改使用的是 repalce 的模式，之所以有这么一次修改，就为了让当前的这个状态对象的 forward对应正确的目标路由。</p><p>之后第二次构建状态对象 state，再次调用 changeLocation 来修改 location，这一次使用的就是 push 模式，正常的推入新的状态对象即可。</p><p>也就是说，之所以第一次调用 changeLocation，就是为了让用户从 /about 回到 /home 之后，forward 里面有值，能够再次点击前进按钮回到 /about。换个说法，你从新路由（2）回退到当前路由（1）的时候，可以使用 forward 方法重新前进到新路由（回到2）。</p><h2 id="五、usehistorylisteners结构解析" tabindex="-1"><a class="header-anchor" href="#五、usehistorylisteners结构解析"><span>五、useHistoryListeners结构解析</span></a></h2><p>首先我们还是来看一下该方法的一个调用：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> historyListeners <span class="token operator">=</span> <span class="token function">useHistoryListeners</span><span class="token punctuation">(</span>
  base<span class="token punctuation">,</span>
  historyNavigation<span class="token punctuation">.</span>state<span class="token punctuation">,</span>
  historyNavigation<span class="token punctuation">.</span>location<span class="token punctuation">,</span>
  historyNavigation<span class="token punctuation">.</span>replace
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在调用这个 useHistoryListeners 传入了 4 个参数，第一个参数是 base，而后面三个参数则是使用的是上一句代码所得到的 historyNavigation 这个对象上面的属性。</p><h3 id="_1-整体结构-1" tabindex="-1"><a class="header-anchor" href="#_1-整体结构-1"><span>1. 整体结构</span></a></h3><p>接下来我们来看一下 useHistoryListeners 这个方法内部的整体结构，源码如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">useHistoryListeners</span><span class="token punctuation">(</span>
  base<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  historyState<span class="token operator">:</span> ValueContainer<span class="token operator">&lt;</span>StateEntry<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  currentLocation<span class="token operator">:</span> ValueContainer<span class="token operator">&lt;</span>HistoryLocation<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  replace<span class="token operator">:</span> RouterHistory<span class="token punctuation">[</span><span class="token string">&#39;replace&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 三个私有变量</span>
  <span class="token keyword">let</span> listeners<span class="token operator">:</span> NavigationCallback<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> teardowns<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> pauseState<span class="token operator">:</span> HistoryLocation <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>

  <span class="token comment">// popstate 事件的事件处理函数</span>
  <span class="token keyword">const</span> popStateHandler<span class="token operator">:</span> <span class="token function-variable function">PopStateListener</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>state<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span>state<span class="token operator">:</span> StateEntry <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 会暴露给外部的方法</span>
  <span class="token keyword">function</span> <span class="token function">pauseListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 会暴露给外部的方法</span>
  <span class="token keyword">function</span> <span class="token function">listen</span><span class="token punctuation">(</span>callback<span class="token operator">:</span> NavigationCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 是 beforeunload 事件的事件处理函数</span>
  <span class="token keyword">function</span> <span class="token function">beforeUnloadListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 会暴露给外部的方法</span>
  <span class="token keyword">function</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 绑定了两个事件：popstate 和 beforeunload</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> popStateHandler<span class="token punctuation">)</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;beforeunload&#39;</span><span class="token punctuation">,</span> beforeUnloadListener<span class="token punctuation">,</span> <span class="token punctuation">{</span>passive<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    pauseListeners<span class="token punctuation">,</span>
    listen<span class="token punctuation">,</span>
    destroy<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，整体的结构也是比较清晰的，基本上和前面是类似的，调用方法后，会向外部返回一个对象，该对象上面会有方法内部的一些新定义的方法。</p><h3 id="_2-代码拆解-1" tabindex="-1"><a class="header-anchor" href="#_2-代码拆解-1"><span>2. 代码拆解</span></a></h3><p>接下来我们还是来逐行进行拆解。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> listeners<span class="token operator">:</span> NavigationCallback<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> teardowns<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> pauseState<span class="token operator">:</span> HistoryLocation <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的三句代码，就是声明了三个变量，需要注意一下这三个变量的类型</p><ul><li>listeners：对应的是 NavigationCallback 类型的数组</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// NavigationCallback 类型信息如下，注意这是一个函数</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">NavigationCallback</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>
    to<span class="token operator">:</span> HistoryLocation<span class="token punctuation">,</span>
    from<span class="token operator">:</span> HistoryLocation<span class="token punctuation">,</span>
    information<span class="token operator">:</span> NavigationInformation
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>listeners 通常会存放一组像 NavigationCallback 这样的回调函数，这些回调函数会在路由发生变化的时候被调用，这些回调函数往往是为了执行一些副作用。</p><ul><li>teardowns：仍然是一个数组，数组里面的每一项的元素类型为 ( ) =&gt; void，这个类型也是一个函数，表示一个空函数。</li><li>pauseState：这个变量所对应的类型就是 HistoryLocation（string 的别名类型）或者 null</li></ul><p>接下来 <em>popStateHandler</em> 作为 popstate 事件处理方法，里面具体的逻辑我们先放一放，先看后面的。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 该方法是最终会暴露给外部的方法</span>
<span class="token keyword">function</span> <span class="token function">pauseListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  pauseState <span class="token operator">=</span> currentLocation<span class="token punctuation">.</span>value
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> currentLocation<span class="token operator">:</span> ValueContainer<span class="token operator">&lt;</span>HistoryLocation<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>value<span class="token operator">:</span> <span class="token function">createCurrentLocation</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个方法本身所做的事情也非常的简单，就是将当前的路由值（去除了 base 部分的 url 后面部分）赋值给 pauseState。</p><p>在 vue-router 中，pauseState 主要是用来暂停或者停止处理路由事件的变量（相当于是一个开关），因此这个函数实际上是标记了一个暂停点，这个暂停点表示在当前的这个路由位置的时候，暂停处理路由事件。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">listen</span><span class="token punctuation">(</span>callback<span class="token operator">:</span> NavigationCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// set up the listener and prepare teardown callbacks</span>
  listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token function-variable function">teardown</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> index <span class="token operator">=</span> listeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> listeners<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  teardowns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>teardown<span class="token punctuation">)</span>
  <span class="token keyword">return</span> teardown
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法接收一个 NavigationCallback 类型的 callback 回调函数，首先将这个 callback 推入到 listeners 数组里面。</p><p>然后声明了一个名为 teardown 的方法，这个方法的作用是从 listeners 数组里面准确的删除刚才所推入的 callback，这个和我们之前解析的 useCallbacks 是相同的套路。</p><p>不过这个 teardown 删除方法还被推入到了 teardowns，并且向外部返回 teardown 删除函数。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">beforeUnloadListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> history <span class="token punctuation">}</span> <span class="token operator">=</span> window
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>history<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token keyword">return</span>
  history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>
    <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> history<span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> scroll<span class="token operator">:</span> <span class="token function">computeScrollPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39;&#39;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 绑定 beforeunload 事件</span>
<span class="token comment">// 该事件会在页面卸载之前触发</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;beforeunload&#39;</span><span class="token punctuation">,</span> beforeUnloadListener<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  passive<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，<code>beforeUnloadListener</code> 是页面卸载之前会做的事情。首先会检查 <code>window.history.state</code> 是否存在。</p><ul><li>如果不存在，那么就不需要做任何的处理</li><li>没有进入到上面的 if，说明 state 状态对象是存在，那么就在页面卸载之前保存当前的滚动位置，然后在用户下一次访问这个页面的时候，可以恢复到之前的滚动位置。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> teardown <span class="token keyword">of</span> teardowns<span class="token punctuation">)</span> <span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  teardowns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> popStateHandler<span class="token punctuation">)</span>
  window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;beforeunload&#39;</span><span class="token punctuation">,</span> beforeUnloadListener<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>destroy 顾名思义是销毁的意思，因此这里是一个销毁函数，这个方法会暴露给外部，供外部来使用。</p><p>该方法首先会遍历 teardowns 数组，拿到每一个 teardown 并执行，执行每一个 teardown 删除方法意味着将之前推入到 listeners 里面的 callback 删除掉了。之后将 teardowns 数组也清空，最后卸载事件。</p><p>上面的代码的意思搞定之后，接下来就让我们来看一下 <code>popStateHandler</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> popStateHandler<span class="token operator">:</span> <span class="token function-variable function">PopStateListener</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>state<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span>state<span class="token operator">:</span> StateEntry <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> to <span class="token operator">=</span> <span class="token function">createCurrentLocation</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> location<span class="token punctuation">)</span>
  <span class="token keyword">const</span> from<span class="token operator">:</span> HistoryLocation <span class="token operator">=</span> currentLocation<span class="token punctuation">.</span>value
  <span class="token keyword">const</span> fromState<span class="token operator">:</span> StateEntry <span class="token operator">=</span> historyState<span class="token punctuation">.</span>value
  <span class="token keyword">let</span> delta <span class="token operator">=</span> <span class="token number">0</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    currentLocation<span class="token punctuation">.</span>value <span class="token operator">=</span> to
    historyState<span class="token punctuation">.</span>value <span class="token operator">=</span> state

    <span class="token keyword">if</span> <span class="token punctuation">(</span>pauseState <span class="token operator">&amp;&amp;</span> pauseState <span class="token operator">===</span> from<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      pauseState <span class="token operator">=</span> <span class="token keyword">null</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    delta <span class="token operator">=</span> fromState <span class="token operator">?</span> state<span class="token punctuation">.</span>position <span class="token operator">-</span> fromState<span class="token punctuation">.</span>position <span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">replace</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>listener <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">listener</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      delta<span class="token punctuation">,</span>
      type<span class="token operator">:</span> NavigationType<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>
      direction<span class="token operator">:</span> delta
        <span class="token operator">?</span> delta <span class="token operator">&gt;</span> <span class="token number">0</span>
          <span class="token operator">?</span> NavigationDirection<span class="token punctuation">.</span>forward
          <span class="token operator">:</span> NavigationDirection<span class="token punctuation">.</span>back
        <span class="token operator">:</span> NavigationDirection<span class="token punctuation">.</span><span class="token builtin">unknown</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> popStateHandler<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次 popstate 事件触发，则会执行 <code>popStateHandler</code>。</p><ul><li>popstate 事件什么时候触发？</li><li>触发之后会执行 popStateHandler，那么这个 popStateHandler 究竟做了什么？</li></ul><blockquote><p>popstate 事件什么时候触发？</p></blockquote><p>popstate 会在当前的历史条目发生变化的时候触发，也就是说，当用户点击浏览器的前进或者后退，或者使用 history 相关的 back、forward、go 之类的方法的时候，popstate 就会触发。（而通过标签、pushState或replaceState并不会触发这个事件）</p><p>另外还有一个重要的信息，当 popstate 事件触发的时候，事件处理函数会收到一个事件对象，这个事件对象上面会有一个 state 属性，这个 state 属性就是之前在使用 history.pushState 或者 history.replaceState 方法时所推入的状态。</p><p>下面是关于 popstate 的一个简单使用案例：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>page1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>page2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>page3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./temp.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;popstate&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>
    <span class="token string">&quot;location: &quot;</span> <span class="token operator">+</span> document<span class="token punctuation">.</span>location <span class="token operator">+</span> <span class="token string">&quot;, state: &quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>state<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

btn1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;title 1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/page=1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

btn2<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;title 2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/page=2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

btn3<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;title 3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/page=3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>触发之后会执行 popStateHandler，那么这个 popStateHandler 究竟做了什么？</p></blockquote><p>目前 popstate 事件触发之后，对应的回调是 popStateHandler，所以我们需要看一下这个 popStateHandler 究竟在做什么？</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> to <span class="token operator">=</span> <span class="token function">createCurrentLocation</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> location<span class="token punctuation">)</span>
<span class="token keyword">const</span> from<span class="token operator">:</span> HistoryLocation <span class="token operator">=</span> currentLocation<span class="token punctuation">.</span>value
<span class="token keyword">const</span> fromState<span class="token operator">:</span> StateEntry <span class="token operator">=</span> historyState<span class="token punctuation">.</span>value
<span class="token keyword">let</span> delta <span class="token operator">=</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里定义了 4 个变量：</p><ul><li>to：通过向 createCurrentLocation 传入 base 以及 location，拿到一个最新的 url，注意这个 url 是去除了 base 部分</li><li>form：拿到之前的 url</li><li>fromState：拿到之前的状态对象</li><li>delta：主要是用来计算要前进还是后退</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  currentLocation<span class="token punctuation">.</span>value <span class="token operator">=</span> to
  historyState<span class="token punctuation">.</span>value <span class="token operator">=</span> state

  <span class="token keyword">if</span> <span class="token punctuation">(</span>pauseState <span class="token operator">&amp;&amp;</span> pauseState <span class="token operator">===</span> from<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pauseState <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  delta <span class="token operator">=</span> fromState <span class="token operator">?</span> state<span class="token punctuation">.</span>position <span class="token operator">-</span> fromState<span class="token punctuation">.</span>position <span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">replace</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先会做一个 state 是否存在的判断，state 是触发 popstate 事件的时候随着事件对象传入的。</p><ul><li>state 存在 <ul><li>首先做的第一件事情就是更新当前的 currentLocation 和 historyState 这两个值</li><li>接下来判断暂停状态是否存在并且是否等于 from <ul><li>如果存在暂停状态并且暂停状态等于之前的 url，这里就清空暂停状态，直接返回</li><li>如果没有进入上面的 if，那么就做 delta 值的计算，关于这个值的计算又需要判断是否存在之前的状态对象 <ul><li>如果存在，通过两个状态对象之间的 position 插值来计算 delta</li><li>如果不存在之前的状态对象，那么值设置为 0</li></ul></li></ul></li></ul></li><li>state 不存在：使用 replace 直接跳转到新的 url 即可</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>listener <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">listener</span><span class="token punctuation">(</span>currentLocation<span class="token punctuation">.</span>value<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    delta<span class="token punctuation">,</span>
    type<span class="token operator">:</span> NavigationType<span class="token punctuation">.</span>pop<span class="token punctuation">,</span>
    direction<span class="token operator">:</span> delta
      <span class="token operator">?</span> delta <span class="token operator">&gt;</span> <span class="token number">0</span>
        <span class="token operator">?</span> NavigationDirection<span class="token punctuation">.</span>forward
        <span class="token operator">:</span> NavigationDirection<span class="token punctuation">.</span>back
      <span class="token operator">:</span> NavigationDirection<span class="token punctuation">.</span><span class="token builtin">unknown</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遍历 listeners 数组，拿到存储在里面的每一个 callback 回调函数，只不过这里命名为了 listener，然后执行这些回调函数。注意之前计算出来的 delta 值会作为第三个参数的值的一部分传入。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">return</span> <span class="token punctuation">{</span>
  pauseListeners<span class="token punctuation">,</span>
  listen<span class="token punctuation">,</span>
  destroy<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后就是向外部返回这么一个对象，也就是外部所拿到的 historyListeners 对象。</p><h2 id="六、routerlink组件解析" tabindex="-1"><a class="header-anchor" href="#六、routerlink组件解析"><span>六、RouterLink组件解析</span></a></h2><p>首先我们还是回忆一下 router-link 这个组件是如何使用的：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/contact<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Contact<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ name: &#39;user&#39;, params: { username: &#39;erina&#39; }}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>User<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们会传递一个 to 属性，这个 to 属性可以是一个字符串也可以是一个对象</p><p>routerlink 对应的源码文件是 src/RouterLink.ts，核心的实现位于 <em>RouterLinkImpl</em> 这一段代码。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> RouterLinkImpl <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> RouterLink<span class="token operator">:</span> _RouterLinkI <span class="token operator">=</span> RouterLinkImpl <span class="token keyword">as</span> <span class="token builtin">any</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来看一下 RouterLinkImpl 具体的实现：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> RouterLinkImpl <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;RouterLink&#39;</span><span class="token punctuation">,</span>
  compatConfig<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token constant">MODE</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  props<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  useLink<span class="token punctuation">,</span>

  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token punctuation">{</span> slots <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里 RouterLinkImpl 的整体结构就是一个标准的 vue3 组件。</p><h3 id="_1-compatconfig" tabindex="-1"><a class="header-anchor" href="#_1-compatconfig"><span>1. compatConfig</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>compatConfig<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token constant">MODE</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>compatConfig 是一个配置对象，用于配置 vue3 相关的兼容性选项。</p><ul><li>MODE：用于指定兼容模式对应的值 <ul><li>3: 表示启用完全的 Vue3 模式，不支持 Vue2 的特性和语法</li><li>2 | 3 ：Vue2 和 Vue3 的混合模式，同时支持 Vue2 和 Vue3 的语法</li><li>2: 启用完全的 Vue2 模式，不支持 Vue3 的特性和语法</li></ul></li><li><code>GLOBAL_MOUNT</code>：指定全局挂载的值。可以是以下选项之一： <ul><li><code>true</code>：表示在 Vue 3 中自动全局挂载 Vue 2 的实例，使 Vue 2 的组件可以在 Vue 3 的应用程序中使用。</li><li><code>false</code>：表示禁用全局挂载，需要手动挂载 Vue 2 的实例。</li></ul></li><li><code>COMPAT_UTILS</code>：指定兼容性工具的值。可以是以下选项之一： <ul><li><code>&quot;auto&quot;</code>：表示自动检测并根据需要引入适当的兼容性工具。</li><li><code>true</code>：表示强制引入兼容性工具，无论是否需要。</li><li><code>false</code>：表示禁用兼容性工具。</li></ul></li><li><code>PRESERVE_ATTRIBUTE_CASE</code>：指定保留属性大小写的值。可以是以下选项之一： <ul><li><code>true</code>：表示在 Vue 3 中维持属性的原始大小写。</li><li><code>false</code>：表示在 Vue 3 中将属性转换为小写。</li></ul></li></ul>`,144),_={href:"https://v3-migration.vuejs.org/zh/migration-build.html#%E5%85%BC%E5%AE%B9%E6%80%A7%E9%85%8D%E7%BD%AE",target:"_blank",rel:"noopener noreferrer"},S=t(`<h3 id="_2-props" tabindex="-1"><a class="header-anchor" href="#_2-props"><span>2. props</span></a></h3><p>完整的 props 列表如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>props<span class="token operator">:</span> <span class="token punctuation">{</span>
  to<span class="token operator">:</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Object<span class="token punctuation">]</span> <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span>RouteLocationRaw<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  replace<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
  activeClass<span class="token operator">:</span> String<span class="token punctuation">,</span>
  exactActiveClass<span class="token operator">:</span> String<span class="token punctuation">,</span>
  custom<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
  ariaCurrentValue<span class="token operator">:</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> String <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span>RouterLinkProps<span class="token punctuation">[</span><span class="token string">&#39;ariaCurrentValue&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;page&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面罗列出了完整的 props 列表，其中 to 是必须要传递的，其他的都是可选属性。</p><ul><li>to：目标路由地址，可以是一个字符串，也可以是一个具有多个属性的对象。</li><li>repalce：是一个布尔值，用于指定使用哪一种模式来进行路由导航，有 repalce 模式 以及 push 模式</li><li>activeClass：当前激活状态下所对应的样式类</li><li>exactActiveClass：这个也是激活状态下所对应的样式类，只不过判断是否激活的条件更加的严格，需要完全匹配。</li><li>custom：这是一个布尔值，用于指定是否要自定义 RouterLink 的渲染方式，默认情况下 RouterLink 是会被渲染为一个 a 标记，但是支持自定义渲染方式</li><li>ariaCurrentValue：主要是设置 aria-current 的值，这个值是和 web 可访问性相关的属性值。</li></ul><h3 id="_3-uselink" tabindex="-1"><a class="header-anchor" href="#_3-uselink"><span>3. useLink</span></a></h3><p>useLink 是一个方法，整体的结构如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useLink</span><span class="token punctuation">(</span>props<span class="token operator">:</span> UseLinkOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>routerKey<span class="token punctuation">)</span><span class="token operator">!</span>
  <span class="token keyword">const</span> currentRoute <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>routeLocationKey<span class="token punctuation">)</span><span class="token operator">!</span>

  <span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> router<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">unref</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> activeRecordIndex <span class="token operator">=</span> <span class="token generic-function"><span class="token function">computed</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span>

  <span class="token keyword">const</span> isActive <span class="token operator">=</span> <span class="token generic-function"><span class="token function">computed</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span>
  <span class="token keyword">const</span> isExactActive <span class="token operator">=</span> <span class="token generic-function"><span class="token function">computed</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span>

  <span class="token keyword">function</span> <span class="token function">navigate</span><span class="token punctuation">(</span>e<span class="token operator">:</span> MouseEvent <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> MouseEvent<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span> <span class="token operator">|</span> NavigationFailure<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
   <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    route<span class="token punctuation">,</span>
    href<span class="token operator">:</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> route<span class="token punctuation">.</span>value<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">,</span>
    isActive<span class="token punctuation">,</span>
    isExactActive<span class="token punctuation">,</span>
    navigate<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们一个部分一个部分来进行解析。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>routerKey<span class="token punctuation">)</span><span class="token operator">!</span>
<span class="token keyword">const</span> currentRoute <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>routeLocationKey<span class="token punctuation">)</span><span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这两句代码就是通过 vue 的依赖注入功能拿到对应的 router 以及当前路由的信息。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> router<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">unref</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>props.to 是用户要跳转的目标路由，将这个目标路由传递给 router.resolve 方法，这个方法一看就知道是根据目标路由来做信息解析，而且内部肯定会使用 matcher.resolve，除了使用 matcher.resolve 来进行解析以外， router.resolve 方法本身也会做一定的信息解析工作，这里我们只关注最终返回的值：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> matchedRoute <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>matcherLocation<span class="token punctuation">,</span> currentLocation<span class="token punctuation">)</span>
<span class="token keyword">return</span> <span class="token function">assign</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    fullPath<span class="token punctuation">,</span>
    <span class="token comment">// keep the hash encoded so fullPath is effectively path + encodedQuery +</span>
    <span class="token comment">// hash</span>
    hash<span class="token punctuation">,</span>
    query<span class="token operator">:</span>
      <span class="token comment">// if the user is using a custom query lib like qs, we might have</span>
      <span class="token comment">// nested objects, so we keep the query as is, meaning it can contain</span>
      <span class="token comment">// numbers at \`$route.query\`, but at the point, the user will have to</span>
      <span class="token comment">// use their own type anyway.</span>
      <span class="token comment">// https://github.com/vuejs/router/issues/328#issuecomment-649481567</span>
      stringifyQuery <span class="token operator">===</span> originalStringifyQuery
        <span class="token operator">?</span> <span class="token function">normalizeQuery</span><span class="token punctuation">(</span>rawLocation<span class="token punctuation">.</span>query<span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rawLocation<span class="token punctuation">.</span>query <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> LocationQuery<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  matchedRoute<span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    redirectedFrom<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    href<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>紧接着声明了三个计算属性：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> activeRecordIndex <span class="token operator">=</span> <span class="token generic-function"><span class="token function">computed</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span>
<span class="token keyword">const</span> isActive <span class="token operator">=</span> <span class="token generic-function"><span class="token function">computed</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span>
<span class="token keyword">const</span> isExactActive <span class="token operator">=</span> <span class="token generic-function"><span class="token function">computed</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>activeRecordIndex 是一个 number 类型的值，另外两个是布尔值。</p><p>activeRecordIndex 对应的源码说明如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> activeRecordIndex <span class="token operator">=</span> <span class="token generic-function"><span class="token function">computed</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 从 route 对象中获取 matched 属性，该属性是一个数组，包含了当前路由匹配的所有路由记录。</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> matched <span class="token punctuation">}</span> <span class="token operator">=</span> route<span class="token punctuation">.</span>value
  <span class="token comment">// 获取 matched 数组的长度。</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> length <span class="token punctuation">}</span> <span class="token operator">=</span> matched
  <span class="token comment">// 获取 matched 数组中最后一个元素，即当前路由匹配的路由记录。</span>
  <span class="token keyword">const</span> routeMatched<span class="token operator">:</span> RouteRecord <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> matched<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token comment">// 获取当前路由 currentRoute 的匹配路由数组。</span>
  <span class="token keyword">const</span> currentMatched <span class="token operator">=</span> currentRoute<span class="token punctuation">.</span>matched
  <span class="token comment">// 如果 routeMatched 不存在或者 currentMatched 数组为空，则返回 -1，表示当前路由没有匹配到任何路由记录。</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>routeMatched <span class="token operator">||</span> <span class="token operator">!</span>currentMatched<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
  <span class="token comment">// 使用 findIndex 方法在 currentMatched 数组中查找与 routeMatched 相同的路由记录，并返回其索引位置。</span>
  <span class="token comment">// isSameRouteRecord 是一个用于比较两个路由记录是否相同的函数。</span>
  <span class="token keyword">const</span> index <span class="token operator">=</span> currentMatched<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>
    <span class="token function">isSameRouteRecord</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> routeMatched<span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
  <span class="token comment">// 如果找到了相同的路由记录，则直接返回该索引位置。</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> index
  <span class="token comment">// 获取匹配路由数组中倒数第二个元素的原始路径，作为可能的父级路由记录路径。</span>
  <span class="token keyword">const</span> parentRecordPath <span class="token operator">=</span> <span class="token function">getOriginalPath</span><span class="token punctuation">(</span>
    matched<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">as</span> RouteRecord <span class="token operator">|</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">)</span>
  <span class="token comment">// 如果 length 大于 1，表示存在嵌套路由。</span>
	<span class="token comment">// 如果 routeMatched 的原始路径与 parentRecordPath 相同，并且当前路由不是父级路由的路径的最后一个子路由。</span>
	<span class="token comment">// 在上述情况下，返回匹配路由数组中倒数第二个元素（即父级路由记录）在 currentMatched 数组中的索引位置。</span>
	<span class="token comment">// 否则，返回之前计算的 index。</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getOriginalPath</span><span class="token punctuation">(</span>routeMatched<span class="token punctuation">)</span> <span class="token operator">===</span> parentRecordPath <span class="token operator">&amp;&amp;</span> currentMatched<span class="token punctuation">[</span>currentMatched<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>path <span class="token operator">!==</span> parentRecordPath
      <span class="token operator">?</span> currentMatched<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>
          <span class="token function">isSameRouteRecord</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> matched<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
      <span class="token operator">:</span> index
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>activeRecordIndex 是得到一个索引值，以便在渲染链接的时候进行一些特定的处理，例如添加活动样式类，自定义样式类等，它考虑了嵌套路由的情况，并且根据一些条件来确定当前路由的位置。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> isActive <span class="token operator">=</span> <span class="token generic-function"><span class="token function">computed</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  <span class="token comment">// 如果当前路由的索引位置大于 -1 并且参数对象相等，则返回 true，表示当前链接处于活动状态；否则返回 false，表示当前链接不处于活动状态。</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token comment">// 判断当前路由的索引位置是否大于 -1，表示当前路由匹配到了路由记录。</span>
    activeRecordIndex<span class="token punctuation">.</span>value <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span>
  	<span class="token comment">// 调用 includesParams 函数，比较当前路由的参数对象和目标路由的参数对象是否相等。</span>
    <span class="token function">includesParams</span><span class="token punctuation">(</span>currentRoute<span class="token punctuation">.</span>params<span class="token punctuation">,</span> route<span class="token punctuation">.</span>value<span class="token punctuation">.</span>params<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码的作用是为 router-link 组件提供一个计算属性 isActive，用于判断当前链接是否处于活动状态，它通过比较当前路由的索引位置和参数对象来确定链接的活动状态，以便在渲染链接的时候添加或者移除活动状态类。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> isExactActive <span class="token operator">=</span> <span class="token generic-function"><span class="token function">computed</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    activeRecordIndex<span class="token punctuation">.</span>value <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span>
  	<span class="token comment">// 判断当前路由的索引位置是否等于当前路由的匹配路由数组长度减 1，表示当前路由是匹配路由数组中的最后一个路由记录。</span>
    activeRecordIndex<span class="token punctuation">.</span>value <span class="token operator">===</span> currentRoute<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>
  	<span class="token comment">// 调用 isSameRouteLocationParams 函数，比较当前路由的参数对象和目标路由的参数对象是否完全相等。</span>
    <span class="token function">isSameRouteLocationParams</span><span class="token punctuation">(</span>currentRoute<span class="token punctuation">.</span>params<span class="token punctuation">,</span> route<span class="token punctuation">.</span>value<span class="token punctuation">.</span>params<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>isExactActive 计算属性用于判断当前链接是否处于精确的活动状态。</p><p>接下来是一个 navigate 方法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">navigate</span><span class="token punctuation">(</span>
  e<span class="token operator">:</span> MouseEvent <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> MouseEvent
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span> <span class="token operator">|</span> NavigationFailure<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">guardEvent</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> router<span class="token punctuation">[</span><span class="token function">unref</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>replace<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;replace&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;push&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>
      <span class="token function">unref</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>to<span class="token punctuation">)</span>
      <span class="token comment">// avoid uncaught errors are they are logged anyway</span>
    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>noop<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 navigate 方法对应的就是用户点击 a 标签之后所对应的事件处理函数。</p><ul><li>首先看 guardEvent(e) 是否有效 <ul><li>如果有效，那么就通过 router 的 repalce 或者 push 方法进行路由导航</li></ul></li><li>如果没有效 <ul><li>不执行导航操作，直接返回一个已经解析的空的 Promise 对象</li></ul></li></ul><p>guardEvent 具体所做的事情如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">guardEvent</span><span class="token punctuation">(</span>e<span class="token operator">:</span> MouseEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果用户在点击链接时按住了 meta 键、alt 键、ctrl 键或 shift 键，那么这个函数就会返回 undefined，从而不处理这个事件。</span>
  <span class="token comment">// 这是因为在很多浏览器中，按住这些键点击一个链接会有特殊的行为，比如在新的标签页中打开链接。</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>metaKey <span class="token operator">||</span> e<span class="token punctuation">.</span>altKey <span class="token operator">||</span> e<span class="token punctuation">.</span>ctrlKey <span class="token operator">||</span> e<span class="token punctuation">.</span>shiftKey<span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token comment">// 如果事件的 defaultPrevented 属性为 true，那么这个函数也会返回 undefined。</span>
  <span class="token comment">// 这表示这个事件已经被其他的事件处理器处理过，并且已经阻止了默认行为。</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>defaultPrevented<span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token comment">// 如果事件的 button 属性不等于 0，那么这个函数同样会返回 undefined。</span>
  <span class="token comment">// button 属性表示触发事件的鼠标按钮，0 代表左键，1 代表中键，2 代表右键。</span>
  <span class="token comment">// 因此，这一行代码的效果是，如果用户使用中键或右键点击链接，那么不处理这个事件。</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>button <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>button <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token comment">// 如果点击的元素有 target=&quot;_blank&quot; 属性，那么这个函数也会返回 undefined。</span>
  <span class="token comment">// 这是因为 target=&quot;_blank&quot; 表示链接应该在新的标签页中打开，所以不需要使用 Vue Router 来处理导航。</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>currentTarget <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>getAttribute<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> target <span class="token operator">=</span> e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b_blank\\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 如果前面的所有条件都不满足（也就是说，这个事件应该被处理），那么这个函数会调用 e.preventDefault() 来阻止事件的默认行为，然后返回 true。</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>preventDefault<span class="token punctuation">)</span> e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>guardEvent 方法主要是确定是否应该处理一个点击事件，在一些情况下的点击事件不需要被处理，那究竟要不要被处理，在 guardEvent 里面进行各种判断。</p><h3 id="_4-setup" tabindex="-1"><a class="header-anchor" href="#_4-setup"><span>4. setup</span></a></h3><p>最后是 setup 方法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token punctuation">{</span> slots <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 调用 useLink，得到一个对象 {route, href, isActive, isExactActive, navigate}</span>
  <span class="token keyword">const</span> link <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token function">useLink</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> options <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>routerKey<span class="token punctuation">)</span><span class="token operator">!</span>

  <span class="token comment">// 这里是在计算具体要挂上去的样式类</span>
  <span class="token keyword">const</span> elClass <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token function">getLinkClass</span><span class="token punctuation">(</span>
      props<span class="token punctuation">.</span>activeClass<span class="token punctuation">,</span>
      options<span class="token punctuation">.</span>linkActiveClass<span class="token punctuation">,</span>
      <span class="token string">&#39;router-link-active&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> link<span class="token punctuation">.</span>isActive<span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token function">getLinkClass</span><span class="token punctuation">(</span>
      props<span class="token punctuation">.</span>exactActiveClass<span class="token punctuation">,</span>
      options<span class="token punctuation">.</span>linkExactActiveClass<span class="token punctuation">,</span>
      <span class="token string">&#39;router-link-exact-active&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> link<span class="token punctuation">.</span>isExactActive<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 拿到插槽内容</span>
    <span class="token keyword">const</span> children <span class="token operator">=</span> slots<span class="token punctuation">.</span>default <span class="token operator">&amp;&amp;</span> slots<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span>
    <span class="token keyword">return</span> props<span class="token punctuation">.</span>custom
      <span class="token operator">?</span> children
      <span class="token operator">:</span> <span class="token function">h</span><span class="token punctuation">(</span>
          <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token string-property property">&#39;aria-current&#39;</span><span class="token operator">:</span> link<span class="token punctuation">.</span>isExactActive
              <span class="token operator">?</span> props<span class="token punctuation">.</span>ariaCurrentValue
              <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
            href<span class="token operator">:</span> link<span class="token punctuation">.</span>href<span class="token punctuation">,</span>
            onClick<span class="token operator">:</span> link<span class="token punctuation">.</span>navigate<span class="token punctuation">,</span>
            <span class="token keyword">class</span><span class="token operator">:</span> elClass<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          children
        <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>getLinkClass 是一个函数，最终会返回一个字符串</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> getLinkClass <span class="token operator">=</span> <span class="token punctuation">(</span>
  propClass<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  globalClass<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  defaultClass<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=&gt;</span>
  propClass <span class="token operator">!=</span> <span class="token keyword">null</span>
    <span class="token operator">?</span> propClass
    <span class="token operator">:</span> globalClass <span class="token operator">!=</span> <span class="token keyword">null</span>
    <span class="token operator">?</span> globalClass
    <span class="token operator">:</span> defaultClass
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据一定的优先级顺序来获取类名，首先检查 propsClass，如果存在就使用它，如果不存在就检查 globalClass，如果存在就使用它，否则就使用 defaultClass</p><h2 id="七、routerview源码解析" tabindex="-1"><a class="header-anchor" href="#七、routerview源码解析"><span>七、RouterView源码解析</span></a></h2><p>RouterView的核心实现位于 RouterViewImpl.ts 文件，整体的结构如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> RouterViewImpl <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;RouterView&#39;</span><span class="token punctuation">,</span>
  inheritAttrs<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  props<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  compatConfig<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token constant">MODE</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token punctuation">{</span> attrs<span class="token punctuation">,</span> slots <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token function">watch</span><span class="token punctuation">(</span> <span class="token operator">...</span> <span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们重点是看 setup 里面的代码，有关 setup 里面的代码，核心又可以分为三个部分：</p><ul><li>depth 深度</li><li>watch</li><li>return</li></ul><h3 id="_1-depth-深度" tabindex="-1"><a class="header-anchor" href="#_1-depth-深度"><span>1. depth 深度</span></a></h3><p>在 vue router 中，之所以要计算深度，是为了实现嵌套路由的功能。</p><p>所谓嵌套路由，指的是一个路由视图内部又可以包含另一个路由视图。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 布局组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- depth = 0 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 在布局组件的 router-view 中 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Some Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- depth = 1 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的这种情况下，每一个 router-view 都需要知道它在整个视图树里面的位置，以便能够渲染出正确的所对应的路由组件，这就是深度的作用，表示当前的 router-view 在整个嵌套的 router-view 中的位置。</p><p>最顶层的 router-view 默认深度为 0，子 router-view对应的深度为 1，依此类推。</p><p>接下来我们来看一下有关深度的核心代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token punctuation">{</span> attrs<span class="token punctuation">,</span> slots <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token comment">// 获取从父级所注入的路由对象</span>
  <span class="token comment">// 这里获取到的就是之前在 router.ts 中所注入的 app.provide(routerViewLocationKey, currentRoute)</span>
  <span class="token comment">// 这里的感叹号是 TS 里面里面的语法，叫做非空断言操作符，相当于告诉 TS 这里的 routerViewLocationKey 一定不为空</span>
  <span class="token keyword">const</span> injectedRoute <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>routerViewLocationKey<span class="token punctuation">)</span><span class="token operator">!</span>
  <span class="token comment">// 这里 routeToDisplay 是一个计算属性</span>
  <span class="token comment">// 该计算属性会优先的使用 props.route，如果 props.route 不存在，那么这里就使用 injectedRoute.value</span>
  <span class="token comment">// 这里我们就可以通过 props 来手动指定一个路由对象，如果没有手动指定，那么就使用从父级注入的路由对象</span>
  <span class="token keyword">const</span> routeToDisplay <span class="token operator">=</span> <span class="token generic-function"><span class="token function">computed</span><span class="token generic class-name"><span class="token operator">&lt;</span>RouteLocationNormalizedLoaded<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>route <span class="token operator">||</span> injectedRoute<span class="token punctuation">.</span>value
  <span class="token punctuation">)</span>
  
  <span class="token comment">// 获取从父级的 router-view 所注入的深度</span>
  <span class="token comment">// 如果父级的 router-view 注入了的话，就能够获取到</span>
  <span class="token comment">// 如果没有父级注入（说明这是一个最顶层的 router-view），那么深度的默认值为 0</span>
  <span class="token keyword">const</span> injectedDepth <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>viewDepthKey<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
 
  <span class="token comment">// 这里定义了一个名为 depth 的计算属性，主要用于计算当前 router-view 的深度</span>
  <span class="token keyword">const</span> depth <span class="token operator">=</span> <span class="token generic-function"><span class="token function">computed</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 首先获取到从父级注入的深度值，如果是最顶层那么这个值为 0</span>
    <span class="token keyword">let</span> initialDepth <span class="token operator">=</span> <span class="token function">unref</span><span class="token punctuation">(</span>injectedDepth<span class="token punctuation">)</span>
    
    <span class="token comment">// 将当前路由对象的 matched 属性解构出来，matched 数组里面包含了所有匹配的路由记录</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> matched <span class="token punctuation">}</span> <span class="token operator">=</span> routeToDisplay<span class="token punctuation">.</span>value
    
    <span class="token comment">// 这里定义了一个变量 matchedRoute，这其实是一个临时变量，用于临时存储匹配的路由记录</span>
    <span class="token keyword">let</span> matchedRoute<span class="token operator">:</span> RouteLocationMatched <span class="token operator">|</span> <span class="token keyword">undefined</span>
    
    <span class="token comment">// 首先 while 的条件是当前深度所对应的路由记录存在并且匹配上的路由没有 components</span>
    <span class="token comment">// 这里就会进入到 while 循环</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>
      <span class="token punctuation">(</span>matchedRoute <span class="token operator">=</span> matched<span class="token punctuation">[</span>initialDepth<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
      <span class="token operator">!</span>matchedRoute<span class="token punctuation">.</span>components
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 深度加一</span>
      <span class="token comment">// 因为能够进入此循环，说明当前找不到对应的组件</span>
      <span class="token comment">// 因此我们需要去检查下一层的路由记录</span>
      initialDepth<span class="token operator">++</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 返回计算后的深度</span>
    <span class="token keyword">return</span> initialDepth
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  
  <span class="token comment">// 这里又是一个计算属性</span>
  <span class="token comment">// 这里就是根据前面计算出来的深度，然后从 matched 里面获取对应深度的路由记录</span>
  <span class="token keyword">const</span> matchedRouteRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">computed</span><span class="token generic class-name"><span class="token operator">&lt;</span>RouteLocationMatched <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> routeToDisplay<span class="token punctuation">.</span>value<span class="token punctuation">.</span>matched<span class="token punctuation">[</span>depth<span class="token punctuation">.</span>value<span class="token punctuation">]</span>
  <span class="token punctuation">)</span>

  <span class="token comment">// 向下一层 router-view 注入深度</span>
  <span class="token comment">// 注意这里在注入的时候，深度 +1</span>
  <span class="token function">provide</span><span class="token punctuation">(</span>
    viewDepthKey<span class="token punctuation">,</span>
    <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> depth<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
  
  <span class="token comment">// 除了提供深度以外，这里还提供了 matchedRouteRef 以及 routeToDisplay</span>
  <span class="token function">provide</span><span class="token punctuation">(</span>matchedRouteKey<span class="token punctuation">,</span> matchedRouteRef<span class="token punctuation">)</span>
  <span class="token function">provide</span><span class="token punctuation">(</span>routerViewLocationKey<span class="token punctuation">,</span> routeToDisplay<span class="token punctuation">)</span>

  <span class="token keyword">const</span> viewRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span>ComponentPublicInstance<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结一下，上面有关 depth 的核心代码，主要就是针对深度 depth 做了一个计算，计算出来之后需要将这个 depth 深度值提供给下一层 router-view，除此以外，还需要根据计算出来的 depth 深度获取到 matched 数组里面对应深度的匹配路由。</p><h3 id="_2-watch" tabindex="-1"><a class="header-anchor" href="#_2-watch"><span>2. watch</span></a></h3><p>关于 watch 我们首先需要回忆一下 vue 里面 watch 的用法：</p><p>在 vue 里面 watch 接收三个参数：</p><ul><li>源（source）：这是我们想要观察的数据源，这个数据源可以是一个字符串，也可以是一个函数，例如在下面的源码中：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>viewRef<span class="token punctuation">.</span>value<span class="token punctuation">,</span> matchedRouteRef<span class="token punctuation">.</span>value<span class="token punctuation">,</span> props<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里所观察的数据就是 viewRef.value（组件实例）， matchedRouteRef.value（当前匹配的路由记录），props.name（路由名称）</p><ul><li>事件处理（handler）：这里表示当监视的数据发生变化的时候，会执行这里的 handler，handler 回调通常接收两个参数：第一个是当前新的值，第二个是之前旧的值。在下面的源码中：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">(</span><span class="token punctuation">[</span>instance<span class="token punctuation">,</span> to<span class="token punctuation">,</span> name<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>oldInstance<span class="token punctuation">,</span> from<span class="token punctuation">,</span> oldName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>选项（options）：这是一个可选参数，用于提供一些配置选项。 <ul><li>deep：监视的深度</li><li>immediate：立即执行 handler</li><li>flush：指定何时执行 handler</li></ul></li></ul><p>在下面的源码中：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span> flush<span class="token operator">:</span> <span class="token string">&#39;post&#39;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个选项表示 handler 应该在 DOM 更新之后执行。</p><p>接下来我们来对 watch 部分代码进行拆解</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token function">watch</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>viewRef<span class="token punctuation">.</span>value<span class="token punctuation">,</span> matchedRouteRef<span class="token punctuation">.</span>value<span class="token punctuation">,</span> props<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">[</span>instance<span class="token punctuation">,</span> to<span class="token punctuation">,</span> name<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>oldInstance<span class="token punctuation">,</span> from<span class="token punctuation">,</span> oldName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 首先获取检查 to 是否存在</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 进来之后首先将 instance 保存到 to.instances[name]</span>
      <span class="token comment">// 这样之后就可以通过 to.instances[name] 访问到这里的 instance</span>
      to<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> instance
      
      <span class="token comment">// 接下来下面这段代码主要目的是在组件实例被复用（路由发生了变化，但是组件实例没有发生变化）的情况下</span>
      <span class="token comment">// 复制旧的路由记录所对应的离开守卫以及更新守卫到新的路由记录里面</span>
      <span class="token comment">// 判断条件如下：</span>
      <span class="token comment">// 1. 旧的路由存在</span>
      <span class="token comment">// 2. 并且旧的路由记录和新的路由记录是不相同</span>
      <span class="token comment">// 3. 组件实例存在</span>
      <span class="token comment">// 4. 当前的组件实例和之前对应的组件实例相同</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">&amp;&amp;</span> from <span class="token operator">!==</span> to <span class="token operator">&amp;&amp;</span> instance <span class="token operator">&amp;&amp;</span> instance <span class="token operator">===</span> oldInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 检查新的路由记录 to 的离开守卫是否为空</span>
        <span class="token comment">// 如果为空，就将旧的路由记录 from 所对应的离开守卫（leaveGuards）复制到新的路由记录里面 to.leaveGuards</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>to<span class="token punctuation">.</span>leaveGuards<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          to<span class="token punctuation">.</span>leaveGuards <span class="token operator">=</span> from<span class="token punctuation">.</span>leaveGuards
        <span class="token punctuation">}</span>
        <span class="token comment">// 检查新的路由记录 to 的更新守卫是否为空</span>
        <span class="token comment">// 如果为空，就将旧的路由记录 from 所对应的更新守卫（updateGuards）复制到新的路由记录里面 to.updateGuards</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>to<span class="token punctuation">.</span>updateGuards<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          to<span class="token punctuation">.</span>updateGuards <span class="token operator">=</span> from<span class="token punctuation">.</span>updateGuards
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 总结一下，上面这段代码主要目的是为了处理组件实例被复用的情况下，旧的路由守卫的复用问题</span>
    <span class="token punctuation">}</span>

  	<span class="token comment">// 接下来下面这段代码主要目的是为了在特定条件下触发 beforeRouteEnter 守卫中的 next 回调函数</span>
    <span class="token comment">// 这一行首先需要确认如下几个条件：</span>
  	<span class="token comment">// 1. 组件实例 instance 存在</span>
  	<span class="token comment">// 2. 并且新的路由记录 to 存在</span>
  	<span class="token comment">// 3. 旧的路由记录 from 不存在或者新的路由记录 to 和旧的路由记录 from 不是同一个记录，又或者旧的组件实例 oldInstance 不存在</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      instance <span class="token operator">&amp;&amp;</span>
      to <span class="token operator">&amp;&amp;</span>
      <span class="token punctuation">(</span><span class="token operator">!</span>from <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isSameRouteRecord</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>oldInstance<span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 下面两行代码主要就是在执行 beforeRouteEnter 守卫中的 next 回调函数</span>
      <span class="token comment">// 有关 beforeRouteEnter 守卫所对应的回调函数，是通过 next(callback) 的方式来注册的</span>
      <span class="token comment">// 这些所注册的回调函数会保存在 to.enterCallbacks[name] 里面</span>
      <span class="token punctuation">;</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>enterCallbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>callback <span class="token operator">=&gt;</span>
        <span class="token function">callback</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  	<span class="token comment">// 总结一下，这段代码的目的就是为了在进入新的路由之前，执行一些特定的操作</span>
  	<span class="token comment">// 这些特定的操作是定义在 beforeRouteEnter 守卫的 next 的回调函数中的</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> flush<span class="token operator">:</span> <span class="token string">&#39;post&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-return" tabindex="-1"><a class="header-anchor" href="#_3-return"><span>3. return</span></a></h3><p>最后是关于 setup 中的 return 部分的代码。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这一段代码主要目的是为了获取一些路由信息，以及准备渲染的相应的组件</span>
  <span class="token comment">// 这里前面三个值是对应的路由信息，最后一个是对应的要渲染的组件</span>
  <span class="token keyword">const</span> route <span class="token operator">=</span> routeToDisplay<span class="token punctuation">.</span>value
  <span class="token keyword">const</span> currentName <span class="token operator">=</span> props<span class="token punctuation">.</span>name
  <span class="token keyword">const</span> matchedRoute <span class="token operator">=</span> matchedRouteRef<span class="token punctuation">.</span>value
  <span class="token comment">// 获取要渲染的组件</span>
  <span class="token comment">// 首先看 matchedRoute 是否存在，matchedRoute 存在的情况下并且 components 属性中有对应的 currentName 的组件</span>
  <span class="token comment">// 那么这个组件就是我们要渲染的组件</span>
  <span class="token keyword">const</span> ViewComponent <span class="token operator">=</span>
    matchedRoute <span class="token operator">&amp;&amp;</span> matchedRoute<span class="token punctuation">.</span>components<span class="token operator">!</span><span class="token punctuation">[</span>currentName<span class="token punctuation">]</span>

  <span class="token comment">// 接下来紧接着就去看有没有找到要渲染的组件</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ViewComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果没有找到，那么就渲染默认插槽，并将对应的组件和路由信息作为插槽的参数</span>
    <span class="token keyword">return</span> <span class="token function">normalizeSlot</span><span class="token punctuation">(</span>slots<span class="token punctuation">.</span>default<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component<span class="token operator">:</span> ViewComponent<span class="token punctuation">,</span> route <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 接下来需要处理 路由所对应的 props</span>
  <span class="token comment">// 在 vue-router，是可以通过 props 选项将当前路由的参数传递给路由组件</span>
  <span class="token comment">// 这个 props 选项值可以是一个布尔值、对象或者是一个函数，这段代码的主要目的就是处理不同类型的 props </span>
  
  <span class="token comment">// 这行代码就是从匹配的路由记录中获取 props 选项</span>
  <span class="token keyword">const</span> routePropsOption <span class="token operator">=</span> matchedRoute<span class="token punctuation">.</span>props<span class="token punctuation">[</span>currentName<span class="token punctuation">]</span>
  <span class="token comment">// 接下来对 props 进行各种判断</span>
  <span class="token comment">// 首先判断 props 是否存在</span>
  <span class="token keyword">const</span> routeProps <span class="token operator">=</span> routePropsOption
  	<span class="token comment">// 接下来判断是否为布尔值 true，如果是的话，那么 props 就是当前的路由参数 route.params</span>
    <span class="token operator">?</span> routePropsOption <span class="token operator">===</span> <span class="token boolean">true</span>
      <span class="token operator">?</span> route<span class="token punctuation">.</span>params
  		<span class="token comment">// 接下来看 props 是否为函数，如果是函数，那么这里就是执行该函数，props 就是函数执行后的返回值</span>
      <span class="token operator">:</span> <span class="token keyword">typeof</span> routePropsOption <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>
      <span class="token operator">?</span> <span class="token function">routePropsOption</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>
  		<span class="token comment">// 如果不是函数，那么这里就是对象，那么这个对象就是我的 props</span>
      <span class="token operator">:</span> routePropsOption
    <span class="token operator">:</span> <span class="token keyword">null</span>
  <span class="token comment">// 因此这里总结一下，上面的这段代码主要就是根据路由配置中的 props 选项来确定组件的 props</span>
  <span class="token comment">// 但是 vue-router 在设计的时候，props 的形式是多样的，所以需要根据不同的类型来处理 props</span>

  <span class="token comment">// 这里定义了一个 onVnodeUnmounted 的钩子函数，该钩子函数会在组件被卸载时调用</span>
  <span class="token keyword">const</span> onVnodeUnmounted<span class="token operator">:</span> VNodeProps<span class="token punctuation">[</span><span class="token string">&#39;onVnodeUnmounted&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> vnode <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这行代码会检查虚拟节点所关联的组件实例是否已经被卸载</span>
    <span class="token comment">// 在 vue 中，每一个虚拟节点 vnode 都可能关联一个组件实例，这个组件实例可以通过 vnode.component 进行访问</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>component<span class="token operator">!</span><span class="token punctuation">.</span>isUnmounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 进入此 if，说明所对应的组件实例已经被卸载</span>
      <span class="token comment">// 需要将对应的组件实例从路由记录中删除掉，从而清除对已卸载的组件的引用，避免内存泄漏</span>
      matchedRoute<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>currentName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 下面这段代码主要是创建一个表示 ViewComponent 的虚拟 DOM，并且设置了相关的 props、attrs、事件监听器以及 ref</span>
  <span class="token comment">// 这个虚拟 DOM 随后会被 Vue 渲染为真实的 DOM</span>
  <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>
    ViewComponent<span class="token punctuation">,</span>
    <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> routeProps<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      onVnodeUnmounted<span class="token punctuation">,</span>
      ref<span class="token operator">:</span> viewRef<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>

	<span class="token comment">// 最后向外部返回上面所生成的虚拟 DOM</span>
  <span class="token comment">// 因为我们是可以提供一个 default 插槽，所以如果有插槽的情况，通过插槽来决定如何使用 component 和 route</span>
  <span class="token comment">// 如果没有插槽，那么就直接使用 component</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token function">normalizeSlot</span><span class="token punctuation">(</span>slots<span class="token punctuation">.</span>default<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component<span class="token operator">:</span> component<span class="token punctuation">,</span> route <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">||</span>
    component
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="八、导航守卫流程解析" tabindex="-1"><a class="header-anchor" href="#八、导航守卫流程解析"><span>八、导航守卫流程解析</span></a></h2><p>首先我们对导航守卫进行一个回顾。在 vue-router 中，导航守卫可以分为三大类：</p><ul><li>全局守卫：挂载在全局路由实例上面，每一个导航的更新都会触发 <ul><li>前置守卫：beforeEach</li><li>解析守卫：beforeResolve</li><li>后置守卫：afterEach</li></ul></li><li>路由独享守卫：挂载在路由配置表上面的，当进入指定路由的时候会触发 <ul><li>进入路由时：beforeEnter</li></ul></li><li>组件内守卫：定义在组件上面的，属于组件级别的守卫，当加载或者更新指定组件时候会触发 <ul><li>组件渲染：beforeRouteEnter</li><li>组件路由更新：beforeRouteUpdate</li><li>离开组件：beforeRouteLeave</li></ul></li></ul><p>完整的解析流程如下图所示：</p><figure><img src="`+k+`" alt="image-20230915102139386" tabindex="0" loading="lazy"><figcaption>image-20230915102139386</figcaption></figure><ol><li>导航触发，触发的形式包括 router.push、router.replace、router.go 等等</li><li>在卸载的组件里面调用 beforeRouteLeave 守卫</li><li>调用全局的 beforeEach 守卫，开启守卫的第一道拦截</li><li>审视新的组件，判断新旧组件是否一致，如果一致的话，在重用的组件里调用 beforeRouteUpdate 守卫 <ul><li>例如假设有一个带有动态参数的路径 /user/:id，在 user/1 跳转到 user/2 的时候，这里渲染的组件肯定是相同的，假设是 useerDetails 组件，那么这个组件就会被复用，此时 beforeRouteUpdate 就会被调用</li></ul></li><li>调用路由配置表中的 beforeEnter</li><li>接下来在组件的 setup 或者 beforeCreate 生命周期会调用组件级守卫 beforeRouteEnter，在组件渲染前触发一个钩子</li><li>执行解析守卫 beforeResolve</li><li>在导航被确认之后，就是组件的 this 对象生成后，会调用全局后置守卫 afterEach 进行拦截</li><li>触发 DOM 更新</li><li>销毁组件前（执行 Unmounted），会调用 beforeRouteLeave 守卫</li></ol><h3 id="_1-导航守卫相关源码" tabindex="-1"><a class="header-anchor" href="#_1-导航守卫相关源码"><span>1. 导航守卫相关源码</span></a></h3><p>当导航触发的时候，有一个名为 navigate 的方法会被调用，这个 navigate 方法就处理了导航守卫的相关逻辑，navigate 方法位于 router.ts 文件下面，整体结构如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">navigate</span><span class="token punctuation">(</span>to<span class="token operator">:</span> RouteLocationNormalized<span class="token punctuation">,</span> from<span class="token operator">:</span> RouteLocationNormalizedLoaded<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> guards<span class="token operator">:</span> Lazy<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>leavingRecords<span class="token punctuation">,</span> updatingRecords<span class="token punctuation">,</span> enteringRecords<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">extractChangingRecords</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span>

  guards <span class="token operator">=</span> <span class="token function">extractComponentsGuards</span><span class="token punctuation">(</span>
    leavingRecords<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39;beforeRouteLeave&#39;</span><span class="token punctuation">,</span>
    to<span class="token punctuation">,</span>
    from
  <span class="token punctuation">)</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> record <span class="token keyword">of</span> leavingRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    record<span class="token punctuation">.</span>leaveGuards<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>guard <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> canceledNavigationCheck <span class="token operator">=</span> <span class="token function">checkCanceledNavigationAndReject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
    to<span class="token punctuation">,</span>
    from
  <span class="token punctuation">)</span>

  guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
       <span class="token comment">// ...</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
       <span class="token comment">// ...</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
       <span class="token comment">// ...</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
       <span class="token comment">// ...</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>err <span class="token operator">=&gt;</span>
       <span class="token comment">// ...</span>
      <span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的方法中，我们看到这里链式调用了 promise，每一个 promise 的处理就是处理一种类型的导航守卫。</p><p>接下来我们来逐步解析方法的各个部分。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> guards<span class="token operator">:</span> Lazy<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里声明了一个名为 guards 的数组，你可以把这个数组看作是一个队列，这个队列里面会存放要处理的守卫回调（guard），并且这些守卫回调不是简单的放进去，而是会被转为 promise 存放进去。</p><h4 id="extractchangingrecords" tabindex="-1"><a class="header-anchor" href="#extractchangingrecords"><span>extractChangingRecords</span></a></h4><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>leavingRecords<span class="token punctuation">,</span> updatingRecords<span class="token punctuation">,</span> enteringRecords<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">extractChangingRecords</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>extract 是“提取”的意思，该方法表示从当前路由和目标路由中提取离开的路由记录（leavingRecords）、更新的路由记录（updatingRecords）以及新进入的路由记录（enteringRecords）</p><p>extractChangingRecords 方法的源码如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">extractChangingRecords</span><span class="token punctuation">(</span>to<span class="token operator">:</span> RouteLocationNormalized<span class="token punctuation">,</span> from<span class="token operator">:</span> RouteLocationNormalizedLoaded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 接下来声明了 3 个数组</span>
  
  <span class="token comment">// 存放要离开的路由记录</span>
  <span class="token keyword">const</span> leavingRecords<span class="token operator">:</span> RouteRecordNormalized<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token comment">// 存放要更新的路由记录</span>
  <span class="token keyword">const</span> updatingRecords<span class="token operator">:</span> RouteRecordNormalized<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token comment">// 存放新进入的路由记录</span>
  <span class="token keyword">const</span> enteringRecords<span class="token operator">:</span> RouteRecordNormalized<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token comment">// 这里是在去 to 和 from 所对应的 matched 数组的最大值</span>
  <span class="token comment">// 因为这里 to 和 from 对应的 matched 都需要遍历，但是两者的长度可能是不一致</span>
  <span class="token comment">// 为了能够全部遍历，这里取最大值</span>
  <span class="token comment">// 假设 from 的 matched 的长度为 3， to 的 matched 的长度为 5，这里就应该以 5 为基础</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>from<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length<span class="token punctuation">,</span> to<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 首先或者 from 里面对应的 matched 的当前项目</span>
    <span class="token keyword">const</span> recordFrom <span class="token operator">=</span> from<span class="token punctuation">.</span>matched<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token comment">// 一定要判断一下是否存在</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>recordFrom<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 判断是否和 to 中存在相同的路由记录，如果存在，说明该路由记录需要更新，所以将其添加到更新的数组里面</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>record <span class="token operator">=&gt;</span> <span class="token function">isSameRouteRecord</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> recordFrom<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        updatingRecords<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>recordFrom<span class="token punctuation">)</span>
      <span class="token comment">// 如果不存在相同的路由记录，那么说明该路由正在离开，将其添加到离开的数组</span>
      <span class="token keyword">else</span> leavingRecords<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>recordFrom<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">const</span> recordTo <span class="token operator">=</span> to<span class="token punctuation">.</span>matched<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token comment">// 如果 recordTo 存在，那么表示该路由记录在目标路由中存在</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>recordTo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>from<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>record <span class="token operator">=&gt;</span> <span class="token function">isSameRouteRecord</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> recordTo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果不存在相同的路由记录，那么说明该路由记录正在进入，将其添加到进入的数组里面</span>
        enteringRecords<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>recordTo<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">[</span>leavingRecords<span class="token punctuation">,</span> updatingRecords<span class="token punctuation">,</span> enteringRecords<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后总结一下，这段代码所做的事情就是根据当前路由和目标路由的差异，提取要离开、更新以及新进入的路由记录，这些提取出来的路由记录会用于后续的操作。</p><h4 id="extractcomponentsguards" tabindex="-1"><a class="header-anchor" href="#extractcomponentsguards"><span>extractComponentsGuards</span></a></h4><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>guards <span class="token operator">=</span> <span class="token function">extractComponentsGuards</span><span class="token punctuation">(</span>
  leavingRecords<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string">&#39;beforeRouteLeave&#39;</span><span class="token punctuation">,</span>
  to<span class="token punctuation">,</span>
  from
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法从名字上面基本上就能够猜到它是做什么的：提取组件上面的守卫函数</p><p>该方法的源码如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">extractComponentsGuards</span><span class="token punctuation">(</span>
  <span class="token comment">// 根据 to 和 from 提取出来的路由记录，值为以下三者之一：</span>
  <span class="token comment">// leavingRecords、updatingRecords、enteringRecords</span>
  matched<span class="token operator">:</span> RouteRecordNormalized<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 守卫的类型，值可以是 beforeRouteEnter、beforeRouteUpdate 以及 beforeRouteLeave</span>
  guardType<span class="token operator">:</span> GuardType<span class="token punctuation">,</span>
  <span class="token comment">// 目标路由</span>
  to<span class="token operator">:</span> RouteLocationNormalized<span class="token punctuation">,</span>
  <span class="token comment">// 当前路由，或者说离开的路由</span>
  from<span class="token operator">:</span> RouteLocationNormalizedLoaded
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> guards<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token comment">// 外层 for 循环是对入参 matched 进行遍历，保证 leavingRecords、updatingRecords 或者 enteringRecords</span>
  <span class="token comment">// 里面所有的 record 都能够得到出来</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> record <span class="token keyword">of</span> matched<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 内层 for 循环对某个 record 里面的所有组件进行遍历</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> name <span class="token keyword">in</span> record<span class="token punctuation">.</span>components<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      
      <span class="token comment">// 获取到对应的组件</span>
      <span class="token keyword">let</span> rawComponent <span class="token operator">=</span> record<span class="token punctuation">.</span>components<span class="token punctuation">[</span>name<span class="token punctuation">]</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>guardType <span class="token operator">!==</span> <span class="token string">&#39;beforeRouteEnter&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>record<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>

      <span class="token comment">// 判断是否是路由级别的组件</span>
      <span class="token comment">// 不管下面进入 if 还是 else，最后都会构建守卫回调对应的 promise 链</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRouteComponent</span><span class="token punctuation">(</span>rawComponent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        guard <span class="token operator">&amp;&amp;</span> guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> record<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token comment">// ...</span>
        guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
          componentPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolved <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...</span>
            <span class="token keyword">const</span> guard <span class="token operator">=</span> options<span class="token punctuation">[</span>guardType<span class="token punctuation">]</span>
            <span class="token keyword">return</span> guard <span class="token operator">&amp;&amp;</span> <span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> record<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> guards
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 extractComponentsGuards 方法的最后，都会做一件事情，就是将导航守卫函数转为 promise 推入到队列里面</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>guard <span class="token operator">&amp;&amp;</span> guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> record<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里对应了一个方法 <code>guardToPromiseFn</code>，该方法的作用就是将导航守卫转为 promise 然后推入到数组里面。</p><h4 id="guardtopromisefn" tabindex="-1"><a class="header-anchor" href="#guardtopromisefn"><span>guardToPromiseFn</span></a></h4><p>该方法的源码如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>
  guard<span class="token operator">:</span> NavigationGuard<span class="token punctuation">,</span>
  to<span class="token operator">:</span> RouteLocationNormalized<span class="token punctuation">,</span>
  from<span class="token operator">:</span> RouteLocationNormalizedLoaded
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>
  guard<span class="token operator">:</span> NavigationGuard<span class="token punctuation">,</span>
  to<span class="token operator">:</span> RouteLocationNormalized<span class="token punctuation">,</span>
  from<span class="token operator">:</span> RouteLocationNormalizedLoaded<span class="token punctuation">,</span>
  record<span class="token operator">:</span> RouteRecordNormalized<span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>
  guard<span class="token operator">:</span> NavigationGuard<span class="token punctuation">,</span>
  to<span class="token operator">:</span> RouteLocationNormalized<span class="token punctuation">,</span>
  from<span class="token operator">:</span> RouteLocationNormalizedLoaded<span class="token punctuation">,</span>
  record<span class="token operator">?</span><span class="token operator">:</span> RouteRecordNormalized<span class="token punctuation">,</span>
  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  
  <span class="token comment">// 这段代码是获取一个回调函数的数组，这个回调就是用户传递给 next 方法的回调函数</span>
  <span class="token comment">// 如果数组不存在，那么就给一个新数组，并将其赋值给 enterCallbacks</span>
  <span class="token keyword">const</span> enterCallbackArray <span class="token operator">=</span>
    record <span class="token operator">&amp;&amp;</span>
    <span class="token comment">// name is defined if record is because of the function overload</span>
    <span class="token punctuation">(</span>record<span class="token punctuation">.</span>enterCallbacks<span class="token punctuation">[</span>name<span class="token operator">!</span><span class="token punctuation">]</span> <span class="token operator">=</span> record<span class="token punctuation">.</span>enterCallbacks<span class="token punctuation">[</span>name<span class="token operator">!</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token comment">// 接下来向外部返回了一个 promise</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      
      <span class="token comment">// 声明 next 方法，该 next 方法就是开发者在使用导航守卫时，所传入的第三个参数</span>
      <span class="token keyword">const</span> next<span class="token operator">:</span> <span class="token function-variable function">NavigationGuardNext</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
        valid<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> RouteLocationRaw <span class="token operator">|</span> NavigationGuardNextCallback <span class="token operator">|</span> Error
      <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 这里调用了导航守卫 guard，传入了合适的参数</span>
      <span class="token comment">// 将调用的结果存储到 guardReturn 里面</span>
      <span class="token keyword">const</span> guardReturn <span class="token operator">=</span> <span class="token function">guard</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>
        record <span class="token operator">&amp;&amp;</span> record<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>name<span class="token operator">!</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        to<span class="token punctuation">,</span>
        from<span class="token punctuation">,</span>
        __DEV__ <span class="token operator">?</span> <span class="token function">canOnlyBeCalledOnce</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span> <span class="token operator">:</span> next
      <span class="token punctuation">)</span>
      
      <span class="token comment">// 接下来将调用结果包装为一个 promise</span>
      <span class="token keyword">let</span> guardCall <span class="token operator">=</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>guardReturn<span class="token punctuation">)</span>

      <span class="token comment">// 如果导航守卫的参数的个数小于 3，那么说明导航守卫内部没有使用 next 回调</span>
      <span class="token comment">// 直接将 guardCall 设置为 guardCall.then(next)</span>
      <span class="token comment">// 这样可以保证内部没有使用 next 也能够正常工作</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>guard<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> guardCall <span class="token operator">=</span> guardCall<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> guard<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ....</span>
      <span class="token punctuation">}</span>
      guardCall<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>err <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们可以来看一下 next 方法的实现，首先我们还是回顾一下 next 方法的用法：</p><ul><li>next( ) ：表示无任何拦截</li><li>next(new Error(&#39;error message&#39;)) ：表示拦截成功，终止路由跳转</li><li>next(true || false) ：true 允许跳转，false 表示终止跳转</li><li>next(&#39;/index&#39;) 或者 next({path: &#39;/index&#39;}) ：这种情况会导致死循环，也会被拦截下来</li><li>next(callback) ：执行回调函数</li></ul><p>next 部分的源码如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> next<span class="token operator">:</span> <span class="token function-variable function">NavigationGuardNext</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  valid<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> RouteLocationRaw <span class="token operator">|</span> NavigationGuardNextCallback <span class="token operator">|</span> Error
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果参数是 false，进行路由拦截，抛出异常</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>valid <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">reject</span><span class="token punctuation">(</span>
      <span class="token generic-function"><span class="token function">createRouterError</span><span class="token generic class-name"><span class="token operator">&lt;</span>NavigationFailure<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
        ErrorTypes<span class="token punctuation">.</span><span class="token constant">NAVIGATION_ABORTED</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          from<span class="token punctuation">,</span>
          to<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>valid <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果参数是一个 Error，进行路由拦截</span>
    <span class="token function">reject</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRouteLocation</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果参数是一个路由路径，会进行重定向，此时也需要抛出异常并拦截</span>
    <span class="token function">reject</span><span class="token punctuation">(</span>
      <span class="token generic-function"><span class="token function">createRouterError</span><span class="token generic class-name"><span class="token operator">&lt;</span>NavigationRedirectError<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
        ErrorTypes<span class="token punctuation">.</span><span class="token constant">NAVIGATION_GUARD_REDIRECT</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          from<span class="token operator">:</span> to<span class="token punctuation">,</span>
          to<span class="token operator">:</span> valid<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果是回调函数，将这个回调函数添加到 record.enterCallbacks[name]，等待导航确认后再执行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      enterCallbackArray <span class="token operator">&amp;&amp;</span>
      <span class="token comment">// since enterCallbackArray is truthy, both record and name also are</span>
      record<span class="token operator">!</span><span class="token punctuation">.</span>enterCallbacks<span class="token punctuation">[</span>name<span class="token operator">!</span><span class="token punctuation">]</span> <span class="token operator">===</span> enterCallbackArray <span class="token operator">&amp;&amp;</span>
      <span class="token keyword">typeof</span> valid <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      enterCallbackArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="runguardqueue" tabindex="-1"><a class="header-anchor" href="#runguardqueue"><span>runGuardQueue</span></a></h4><p>该方法看名字我们就知道，是用来执行整个导航守卫队列的</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 这里接收一个参数，这个参数是导航守卫队列</span>
<span class="token keyword">function</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token operator">:</span> Lazy<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 使用 reduce 方法对 guards 数组进行一个迭代，逐个执行导航守卫，并将它们串联起来形成一个 promise 链</span>
  <span class="token keyword">return</span> guards<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span>promise<span class="token punctuation">,</span> guard<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">runWithContext</span><span class="token punctuation">(</span>guard<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 这是 reduce 方法的初始化值，表示初始值是一个已决的 Promise</span>
    <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-导航守卫执行流程" tabindex="-1"><a class="header-anchor" href="#_2-导航守卫执行流程"><span>2. 导航守卫执行流程</span></a></h3><h4 id="beforerouteleave" tabindex="-1"><a class="header-anchor" href="#beforerouteleave"><span>beforeRouteLeave</span></a></h4><p>该导航守卫会在组件失活的时候被调用，对应的代码片段如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 首先从组件中提取 beforeRouteLeave 类型的导航守卫</span>
<span class="token comment">// 将其放入到 guards 队列里面</span>
guards <span class="token operator">=</span> <span class="token function">extractComponentsGuards</span><span class="token punctuation">(</span>
  leavingRecords<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token string">&#39;beforeRouteLeave&#39;</span><span class="token punctuation">,</span>
  to<span class="token punctuation">,</span>
  from
<span class="token punctuation">)</span>

<span class="token comment">// 将 record.leaveGuards 里面的守卫回调也放入到 guards 数组里面</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> record <span class="token keyword">of</span> leavingRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  record<span class="token punctuation">.</span>leaveGuards<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>guard <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 执行</span>
<span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="beforeeach" tabindex="-1"><a class="header-anchor" href="#beforeeach"><span>beforeEach</span></a></h4><p>这是全局前置守卫，对应的执行代码如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 首先将队列清空</span>
  guards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token comment">// 拿到所有 beforeEach 类型的守卫回调</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> guard <span class="token keyword">of</span> beforeGuards<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 转为 promise 推入到 guards 数组里面</span>
    guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span>

  <span class="token comment">// 执行</span>
  <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="beforerouteupdate" tabindex="-1"><a class="header-anchor" href="#beforerouteupdate"><span>beforeRouteUpdate</span></a></h4><p>接下来是 beforeRouteUpdate 类型的守卫回调</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这种类型的守卫回调是属于组件级别的</span>
  <span class="token comment">// 所以先从组件上面去提取对应守卫回调，这里要从组件提取，就调用前面介绍过的 extractComponentsGuards</span>
  guards <span class="token operator">=</span> <span class="token function">extractComponentsGuards</span><span class="token punctuation">(</span>
    updatingRecords<span class="token punctuation">,</span>
    <span class="token string">&#39;beforeRouteUpdate&#39;</span><span class="token punctuation">,</span>
    to<span class="token punctuation">,</span>
    from
  <span class="token punctuation">)</span>

  <span class="token comment">// 将 record.updateGuards 里面的回调也推入到 guards 数组里面</span>
  <span class="token comment">// 注意仍然是转为了 promise 后才推入进去的</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> record <span class="token keyword">of</span> updatingRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    record<span class="token punctuation">.</span>updateGuards<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>guard <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span>

  <span class="token comment">// 执行</span>
  <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="beforeenter" tabindex="-1"><a class="header-anchor" href="#beforeenter"><span>beforeEnter</span></a></h4><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 首先清空队列</span>
  guards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token comment">// beforeEnter 是路由独享守卫</span>
  <span class="token comment">// 遍历 enteringRecords</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> record <span class="token keyword">of</span> enteringRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 查看当前遍历到的 record 项是否存在 beforeEnter</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 接下里会判断是否是数组，如果是数组，就多了一次遍历而已</span>
      <span class="token comment">// 总之最后仍然是将对应的守卫回调转为 promise 推入到 guards 数组</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> beforeEnter <span class="token keyword">of</span> record<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">)</span>
          guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>beforeEnter<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span>

  <span class="token comment">// 执行</span>
  <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="beforerouterenter" tabindex="-1"><a class="header-anchor" href="#beforerouterenter"><span>beforeRouterEnter</span></a></h4><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  to<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>record <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>record<span class="token punctuation">.</span>enterCallbacks <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// 从组件上面去提取 beforeRouteEnter 类型的守卫回调</span>
  guards <span class="token operator">=</span> <span class="token function">extractComponentsGuards</span><span class="token punctuation">(</span>
    enteringRecords<span class="token punctuation">,</span>
    <span class="token string">&#39;beforeRouteEnter&#39;</span><span class="token punctuation">,</span>
    to<span class="token punctuation">,</span>
    from
  <span class="token punctuation">)</span>
  guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span>

  <span class="token comment">// 执行</span>
  <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="beforeresolve" tabindex="-1"><a class="header-anchor" href="#beforeresolve"><span>beforeResolve</span></a></h4><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 清空队列</span>
  guards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token comment">// 将所有 beforeResolve 类型的守卫回调转为 promise 后推入到 guards 数组</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> guard <span class="token keyword">of</span> beforeResolveGuards<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span>

  <span class="token comment">// 执行</span>
  <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="aftereach" tabindex="-1"><a class="header-anchor" href="#aftereach"><span>afterEach</span></a></h4><p>afterEach 作为全局后置守卫，它的触发是在 navigate 方法调用完毕后</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token function">navigate</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token operator">:</span> NavigationFailure <span class="token operator">|</span> NavigationRedirectError<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>failure<span class="token operator">:</span> NavigationFailure <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
 <span class="token comment">// ...</span>

  <span class="token function">triggerAfterEach</span><span class="token punctuation">(</span>
    toLocation <span class="token keyword">as</span> RouteLocationNormalizedLoaded<span class="token punctuation">,</span>
    from<span class="token punctuation">,</span>
    failure
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>noop<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，afterEach 的执行就是在 triggerAfterEach 方法里面。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">triggerAfterEach</span><span class="token punctuation">(</span>
  to<span class="token operator">:</span> RouteLocationNormalizedLoaded<span class="token punctuation">,</span>
  from<span class="token operator">:</span> RouteLocationNormalizedLoaded<span class="token punctuation">,</span>
  failure<span class="token operator">?</span><span class="token operator">:</span> NavigationFailure <span class="token operator">|</span> <span class="token keyword">void</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  afterGuards
    <span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>guard <span class="token operator">=&gt;</span> <span class="token function">runWithContext</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">guard</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> failure<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,126);function E(C,N){const o=p("RouteLink"),e=p("ExternalLinkIcon");return i(),l("div",null,[m,n("blockquote",null,[n("p",null,[s("本文章内容vue-Router的版本为4.x，3.x的基本原理可以参考"),a(o,{to:"/source_code/vue_related/vue-router.html"},{default:u(()=>[s("vue-router原理解析")]),_:1})])]),b,n("ul",null,[n("li",null,[s("关于传入 createRouter 方法的配置对象所支持的配置项可以参阅："),n("a",g,[s("https://router.vuejs.org/zh/api/interfaces/RouterOptions.html"),a(e)])]),h,y]),f,n("p",null,[s("有关 vue 应用中如何扩展插件，可以参阅："),n("a",w,[s("https://cn.vuejs.org/guide/reusability/plugins.html#introduction"),a(e)])]),R,n("p",null,[s("可以参考 vite 官方文档："),n("a",x,[s("https://cn.vitejs.dev/config/shared-options.html#base"),a(e)])]),L,n("p",null,[s("关于这种兼容性的配置，可以参阅 "),n("a",_,[s("这里"),a(e)]),s("。")]),S])}const q=c(v,[["render",E],["__file","vue-router4.x.html.vue"]]),T=JSON.parse('{"path":"/source_code/vue_related/vue-router4.x.html","title":"新版vue-Router原理解析","lang":"zh-CN","frontmatter":{"description":"新版vue-Router原理解析 本文章内容vue-Router的版本为4.x，3.x的基本原理可以参考 一、createRouter结构解析 1. 准备工作 在开始之前，我们肯定是需要去看一下 vue-router 对应的源码，源码可以在 github 上面找到，地址如下： https://github.com/vuejs/router vue-ro...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/source_code/vue_related/vue-router4.x.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"新版vue-Router原理解析"}],["meta",{"property":"og:description","content":"新版vue-Router原理解析 本文章内容vue-Router的版本为4.x，3.x的基本原理可以参考 一、createRouter结构解析 1. 准备工作 在开始之前，我们肯定是需要去看一下 vue-router 对应的源码，源码可以在 github 上面找到，地址如下： https://github.com/vuejs/router vue-ro..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-29T16:36:49.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-08-29T16:36:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"新版vue-Router原理解析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-29T16:36:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、createRouter结构解析","slug":"一、createrouter结构解析","link":"#一、createrouter结构解析","children":[{"level":3,"title":"1. 准备工作","slug":"_1-准备工作","link":"#_1-准备工作","children":[]},{"level":3,"title":"2. 整体结构分析","slug":"_2-整体结构分析","link":"#_2-整体结构分析","children":[]},{"level":3,"title":"3. 创建 matcher","slug":"_3-创建-matcher","link":"#_3-创建-matcher","children":[]},{"level":3,"title":"4. 处理导航守卫","slug":"_4-处理导航守卫","link":"#_4-处理导航守卫","children":[]},{"level":3,"title":"5. currentRoute声明","slug":"_5-currentroute声明","link":"#_5-currentroute声明","children":[]},{"level":3,"title":"6. 处理 params","slug":"_6-处理-params","link":"#_6-处理-params","children":[]},{"level":3,"title":"7. 定义各种方法","slug":"_7-定义各种方法","link":"#_7-定义各种方法","children":[]},{"level":3,"title":"8. router对象","slug":"_8-router对象","link":"#_8-router对象","children":[]}]},{"level":2,"title":"二、history 基础知识","slug":"二、history-基础知识","link":"#二、history-基础知识","children":[{"level":3,"title":"1. hash模式","slug":"_1-hash模式","link":"#_1-hash模式","children":[]},{"level":3,"title":"2. html5模式","slug":"_2-html5模式","link":"#_2-html5模式","children":[]},{"level":3,"title":"3. location 对象","slug":"_3-location-对象","link":"#_3-location-对象","children":[]}]},{"level":2,"title":"三、createWebHistory结构拆解","slug":"三、createwebhistory结构拆解","link":"#三、createwebhistory结构拆解","children":[{"level":3,"title":"1. 整体结构分析","slug":"_1-整体结构分析","link":"#_1-整体结构分析","children":[]},{"level":3,"title":"2. 标准化base","slug":"_2-标准化base","link":"#_2-标准化base","children":[]},{"level":3,"title":"3. 后续操作","slug":"_3-后续操作","link":"#_3-后续操作","children":[]}]},{"level":2,"title":"四、useHistoryStateNavigation结构解析","slug":"四、usehistorystatenavigation结构解析","link":"#四、usehistorystatenavigation结构解析","children":[{"level":3,"title":"1. 整体结构","slug":"_1-整体结构","link":"#_1-整体结构","children":[]},{"level":3,"title":"2. 代码拆解","slug":"_2-代码拆解","link":"#_2-代码拆解","children":[]}]},{"level":2,"title":"五、useHistoryListeners结构解析","slug":"五、usehistorylisteners结构解析","link":"#五、usehistorylisteners结构解析","children":[{"level":3,"title":"1. 整体结构","slug":"_1-整体结构-1","link":"#_1-整体结构-1","children":[]},{"level":3,"title":"2. 代码拆解","slug":"_2-代码拆解-1","link":"#_2-代码拆解-1","children":[]}]},{"level":2,"title":"六、RouterLink组件解析","slug":"六、routerlink组件解析","link":"#六、routerlink组件解析","children":[{"level":3,"title":"1. compatConfig","slug":"_1-compatconfig","link":"#_1-compatconfig","children":[]},{"level":3,"title":"2. props","slug":"_2-props","link":"#_2-props","children":[]},{"level":3,"title":"3. useLink","slug":"_3-uselink","link":"#_3-uselink","children":[]},{"level":3,"title":"4. setup","slug":"_4-setup","link":"#_4-setup","children":[]}]},{"level":2,"title":"七、RouterView源码解析","slug":"七、routerview源码解析","link":"#七、routerview源码解析","children":[{"level":3,"title":"1. depth 深度","slug":"_1-depth-深度","link":"#_1-depth-深度","children":[]},{"level":3,"title":"2. watch","slug":"_2-watch","link":"#_2-watch","children":[]},{"level":3,"title":"3. return","slug":"_3-return","link":"#_3-return","children":[]}]},{"level":2,"title":"八、导航守卫流程解析","slug":"八、导航守卫流程解析","link":"#八、导航守卫流程解析","children":[{"level":3,"title":"1. 导航守卫相关源码","slug":"_1-导航守卫相关源码","link":"#_1-导航守卫相关源码","children":[]},{"level":3,"title":"2. 导航守卫执行流程","slug":"_2-导航守卫执行流程","link":"#_2-导航守卫执行流程","children":[]}]}],"git":{"createdTime":1724949409000,"updatedTime":1724949409000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":1}]},"readingTime":{"minutes":67.89,"words":20366},"filePathRelative":"source_code/vue_related/vue-router4.x.md","localizedDate":"2024年8月29日","excerpt":"\\n<blockquote>\\n<p>本文章内容vue-Router的版本为4.x，3.x的基本原理可以参考<a href=\\"/dcblog/source_code/vue_related/vue-router.html\\" target=\\"_blank\\">vue-router原理解析</a></p>\\n</blockquote>\\n<h2>一、createRouter结构解析</h2>\\n<h3>1. 准备工作</h3>\\n<p>在开始之前，我们肯定是需要去看一下 vue-router 对应的源码，源码可以在 github 上面找到，地址如下：</p>\\n<p>https://github.com/vuejs/router</p>","autoDesc":true}');export{q as comp,T as data};
