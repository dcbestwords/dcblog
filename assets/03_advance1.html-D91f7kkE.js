import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c,a as n,b as s,d as l,e as a}from"./app-BRsSGiWL.js";const i="/dcblog/assets/prototype-e6loyGol.png",u="/dcblog/assets/memory-structure-ZysbyuG3.png",r="/dcblog/assets/16588161791751-DxBkCKhw.jpg",k="/dcblog/assets/closure0-BWPLhMzJ.png",d="/dcblog/assets/closure1-BS3YOFn1.png",v="/dcblog/assets/16588246930073-B3YSVYIv.jpg",m="/dcblog/assets/pipe-CM4RFcZh.jpg",b={},g=a('<h2 id="一、原型与原型链" tabindex="-1"><a class="header-anchor" href="#一、原型与原型链"><span>一、原型与原型链</span></a></h2><h3 id="_1-成分组成" tabindex="-1"><a class="header-anchor" href="#_1-成分组成"><span>1. 成分组成</span></a></h3><ul><li><strong>构造函数</strong>：所有函数都有一个特别的属性, 它默认指向一个Object空对象(即称为: 原型对象)(Object不满足) <ul><li><code>prototype</code> : 显式原型属性</li></ul></li><li><strong>实例对象</strong>：所有实例对象都有一个特别的属性: <ul><li><code>__proto__</code> : 隐式原型属性</li></ul></li><li><strong>原型对象</strong>：原型对象中有一个属性constructor, 它指向函数对象，同时其作为Object的实例对象，也有一个__proto__属性指向它的原型对象 <ul><li>constructor：指向构造函数本身</li></ul></li></ul><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-显式原型与隐式原型的关系" tabindex="-1"><a class="header-anchor" href="#_2-显式原型与隐式原型的关系"><span>2. 显式原型与隐式原型的关系</span></a></h3><ul><li><p>函数的prototype: 定义函数时被自动赋值, 值默认为{}(空对象), 即为原型对象</p><p><code>this.prototype = {}</code></p></li><li><p>实例对象的_<em>proto</em>_: 在创建实例对象时被自动添加, 并赋值为构造函数的prototype值(两变量指向同一原型对象)</p><p><code>this.__proto__ = Fn.prototype</code></p></li><li><p>对象的隐式原型的值为其对应构造函数的显式原型的值</p></li></ul><h3 id="_3-原型链" tabindex="-1"><a class="header-anchor" href="#_3-原型链"><span>3. 原型链</span></a></h3><ul><li>访问一个对象的属性时，会先在自身属性中查找，找到返回；如果没有, 再沿着__proto__这条链向上查找, 找到返回;如果最终没找到, 返回<strong>undefined</strong></li><li>别名:隐式原型链</li><li>作用: 查找对象的属性(方法)</li><li>当给对象属性赋值时不会使用原型链, 而只是在当前对象中进行操作</li></ul><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><ul><li>Object原型的隐式原型为null</li><li>Function的隐式原型(图中未画)指向自己的原型</li></ul></blockquote><ul><li>所有函数都是Function的实例(包含Function)，所以函数对象也有__proto__属性</li><li>Object的原型对象是原型链尽头</li><li>方法一般定义在原型中, 属性一般通过构造函数定义在对象本身上（继承）</li><li>Object函数的显式原型和隐式原型指向的对象不同</li></ul><h3 id="_4-出现原因" tabindex="-1"><a class="header-anchor" href="#_4-出现原因"><span>4. 出现原因</span></a></h3><p>隐式原型和原型出现的根本原因在于JS没有记录类型的元数据，因此，JS只能通过对象的隐式原型找到创建它的函数的原型，从而确定其类型。</p><h2 id="二、执行上下文与执行上下文栈" tabindex="-1"><a class="header-anchor" href="#二、执行上下文与执行上下文栈"><span>二、执行上下文与执行上下文栈</span></a></h2><h3 id="_1-声明提前现象" tabindex="-1"><a class="header-anchor" href="#_1-声明提前现象"><span>1. 声明提前现象</span></a></h3><ul><li><p>变量提升: 在变量定义语句之前, 就可以访问到这个变量(未赋值：<code>undefined</code>)</p></li><li><p>函数提升: 在函数定义语句之前, 就可以访问并执行该函数</p><ul><li>变量和函数分别成为window全局执行上下文的属性和方法</li><li>本质上还是先声明，再执行代码</li></ul></li><li><p>函数提升比变量提升的优先级高</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 <span class="token keyword">var</span> a
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span> <span class="token comment">// &#39;function&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">1</span>	<span class="token comment">//var c</span>
 <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
  <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">3</span>
 <span class="token punctuation">}</span>
<span class="token comment">// c=1</span>
 <span class="token function">c</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>声明提前的出现就是下面提到的执行上下文引起的。</p></blockquote><h3 id="_2-执行上下文的理解" tabindex="-1"><a class="header-anchor" href="#_2-执行上下文的理解"><span>2. 执行上下文的理解</span></a></h3><p>代码（全局代码、函数代码） <mark>执行前进行的准备工作</mark></p><p><mark>执行上下文</mark> ：当代码执行进入一个环境时，就会为该环境创建一个执行上下文，它会在你运行代码前做一些准备工作，如确定作用域，创建局部变量对象等。</p><ul><li>JavaScript 中执行环境 <ul><li>全局环境</li><li>函数环境</li><li>eval 函数环境 （已不推荐使用）</li></ul></li></ul><p><mark>执行上下文栈</mark> （函数调用栈Call Stack）: 用来管理产生的多个执行上下文（n+1）</p><ul><li>由js引擎在代码执行前就创建</li><li>用来确定函数嵌套时代码的执行顺序</li></ul><h3 id="_3-生命周期" tabindex="-1"><a class="header-anchor" href="#_3-生命周期"><span>3. 生命周期</span></a></h3><ul><li>创建阶段（<strong>进入</strong>执行上下文）：函数被调用时，进入函数环境，为其创建一个执行上下文，此时进入创建阶段。</li><li>执行阶段（代码<strong>执行</strong>）：执行函数中代码时，此时执行上下文进入执行阶段。</li></ul><h3 id="_4-执行上下文创建和执行的过程" tabindex="-1"><a class="header-anchor" href="#_4-执行上下文创建和执行的过程"><span>4. 执行上下文创建和执行的过程</span></a></h3><p><mark>创建阶段</mark> 要做的事情主要如下：</p><ol><li><p>创建<strong>变量对象</strong>（<em>VO：variable object</em>）</p><ul><li>确定函数的形参（<strong>并赋值</strong>）</li><li>函数环境会初始化创建 <code>Arguments</code>对象（<strong>并赋值</strong>）</li><li>确定普通字面量形式的函数声明（<strong>并赋值</strong>）</li><li>变量声明，函数表达式声明（<strong>未赋值</strong>）</li></ul></li></ol><blockquote><p>我们可以将整个上下文环境看作是一个对象。该对象拥有 <em>3</em> 个属性，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>executionContextObj <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">variableObject</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 变量对象，里面包含 Arguments 对象，形式参数，函数和局部变量</span>
     <span class="token literal-property property">scopeChain</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 作用域链，包含内部上下文所有变量对象的列表</span>
     <span class="token keyword">this</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 上下文中 this 的指向对象</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在函数的建立阶段，首先会建立 <code>Arguments</code> 对象。然后确定形式参数，检查当前上下文中的函数声明，每找到一个函数声明，就在 <code>variableObject</code> 下面用函数名建立一个属性，属性值就指向该函数在内存中的地址的一个引用。</p><p>如果上述函数名已经存在于 <code>variableObject</code>（简称 <em>VO</em>） 下面，那么对应的属性值会被新的引用给覆盖。最后，是确定当前上下文中的局部变量，如果遇到和函数名同名的变量，则会忽略该变量。</p></blockquote><ol start="2"><li><p>确定 <em>this</em> 指向（<strong><em>this</em> 由调用者确定</strong>）</p></li><li><p>确定作用域（<strong>词法环境决定，哪里声明定义，就在哪里确定</strong>）</p></li></ol><p><mark>执行阶段</mark> 要做的事情主要如下（不分顺序，按代码执行顺序走）：</p><ol><li>变量对象赋值 <ul><li>变量赋值</li><li>函数表达式赋值</li></ul></li><li>调用内部函数</li><li>顺序执行其它代码</li></ol>`,32),f=n("p",null,[s("在"),n("code",null,"es6"),s("中引入了块作用域的概念，通过 "),n("strong",null,"let"),s(" 声明的变量 ，在编译阶段会存放到 "),n("mark",null,"词法环境"),s(" 中。")],-1),h={href:"https://juejin.cn/post/6908314735708635150#heading-3",target:"_blank",rel:"noopener noreferrer"},y=a(`<hr><p><strong>实例1：</strong></p><blockquote><p>原代码</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">privateB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>建立阶段的变量对象</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>fooExecutionContext <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">variavleObject</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">arguments</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token number">0</span> <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token literal-property property">length</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 确定 Arguments 对象</span>
        <span class="token literal-property property">i</span> <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// 确定形式参数</span>
        <span class="token literal-property property">c</span> <span class="token operator">:</span> pointer to <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 确定函数引用</span>
        <span class="token literal-property property">a</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token comment">// 局部变量 初始值为 undefined</span>
        <span class="token literal-property property">b</span> <span class="token operator">:</span> <span class="token keyword">undefined</span>  <span class="token comment">// 局部变量 初始值为 undefined</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">scopeChain</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">this</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>执行阶段</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>fooExecutionContext <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">variavleObject</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">arguments</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token number">0</span> <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token literal-property property">length</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">i</span> <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
        <span class="token literal-property property">c</span> <span class="token operator">:</span> pointer to <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">a</span> <span class="token operator">:</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span><span class="token comment">// a 变量被赋值为 Hello</span>
        <span class="token literal-property property">b</span> <span class="token operator">:</span> pointer to <span class="token keyword">function</span> <span class="token function">privateB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// b 变量被赋值为 privateB() 函数</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">scopeChain</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">this</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>实例2：</strong></p><blockquote><p>原代码</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;good&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token keyword">typeof</span> foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>建立阶段的变量对象</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>fooExecutionContext <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">variavleObject</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">arguments</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">length</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">foo</span> <span class="token operator">:</span> pointer to <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">bar</span> <span class="token operator">:</span> <span class="token keyword">undefined</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">scopeChain</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">this</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>执行阶段</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
    <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">// foo 被重新赋值 变成了一个字符串</span>
    <span class="token keyword">var</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;good&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token keyword">typeof</span> foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Hello string</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、作用域与作用域链" tabindex="-1"><a class="header-anchor" href="#三、作用域与作用域链"><span>三、作用域与作用域链</span></a></h2><p><strong>作用域就是一个独立的地盘，让变量不会外泄、暴露出去</strong>。也就是说作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。</p><h3 id="_1-概念理解" tabindex="-1"><a class="header-anchor" href="#_1-概念理解"><span>1. 概念理解</span></a></h3><ul><li>作用域: 一块代码区域, 在编码时就确定了, 不会再变化</li><li>作用域链: 多个嵌套的作用域形成的由内向外的结构, 用于查找变量</li></ul><h3 id="_2-分类" tabindex="-1"><a class="header-anchor" href="#_2-分类"><span>2. 分类</span></a></h3><ul><li><p>全局作用域</p><ul><li>最外层函数和在最外层函数外面定义的变量拥有全局作用域</li><li>所有未定义直接赋值的变量自动声明为拥有全局作用域(包括内部函数中的变量)</li><li>所有 <em>window</em> 对象的属性拥有全局作用域</li></ul></li><li><p>函数作用域</p></li><li><p>在ES6之前，js没有块作用域，es6之后一对大括号可以形成一个块作用域</p></li></ul><blockquote><p><strong>作用域是分层的，内层作用域可以访问外层作用域的变量，反之则不行</strong>。</p></blockquote><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-作用" tabindex="-1"><a class="header-anchor" href="#_3-作用"><span>3. 作用</span></a></h3><ul><li>作用域: 隔离变量, 不同作用域定义同名的变量不会发生冲突</li><li>作用域链: 自由变量（当前作用域未定义）的值需要一层一层向上寻找，直到找到全局作用域还是没找到，就宣布放弃。这种一层一层的关系，就是作用域链 。</li></ul><h3 id="_4-区别作用域与执行上下文" tabindex="-1"><a class="header-anchor" href="#_4-区别作用域与执行上下文"><span>4. 区别作用域与执行上下文</span></a></h3><p><em>JavaScript</em> 属于解释型语言，<em>JavaScript</em> 的执行分为：解释和执行两个阶段，这两个阶段所做的事并不一样。</p><p><strong>解释阶段</strong></p><ul><li>词法分析</li><li>语法分析</li><li>作用域规则确定</li></ul><p><strong>执行阶段</strong></p><ul><li>创建执行上下文</li><li>执行函数代码</li><li>垃圾回收</li></ul><p><strong>区别</strong></p><ul><li>作用域: <mark>静态的, 编码时就确定了</mark> (不是在运行时), 一旦确定就不会变化了</li><li>执行上下文: 动态的, 执行代码时动态创建, 当执行结束消失</li><li>联系: 执行上下文环境从属于所在的作用域（先有作用域）</li></ul><h3 id="_5-面试题" tabindex="-1"><a class="header-anchor" href="#_5-面试题"><span>5. 面试题</span></a></h3><ul><li><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
 <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
  
 <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
  
 <span class="token function">show</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
 <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//fn的函数定义</span>

 <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">fn2</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn2<span class="token punctuation">)</span>
   <span class="token comment">//console.log(this.fn2)</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 obj<span class="token punctuation">.</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>原型链实现对象继承；作用域描述代码的作用范围，作用域链实现变量的查找顺序；执行上下文对象保存运行环境的信息（预处理：声名提前问题）。</p></li></ul><h2 id="四、闭包" tabindex="-1"><a class="header-anchor" href="#四、闭包"><span>四、闭包</span></a></h2><h3 id="_1-概念理解-1" tabindex="-1"><a class="header-anchor" href="#_1-概念理解-1"><span>1. 概念理解</span></a></h3><blockquote><p>闭包不是一种具体的技术，而是一种现象，是指在定义函数时，周围环境中的信息可以在函数中使用。换句话说，执行函数时，只要在函数中使用了外部的数据，就创建了闭包。</p><p>而作用域链，正是实现闭包的手段。（所以闭包在创建代码时就产生了）</p></blockquote><figure><img src="`+k+'" alt="image-20230330171740243" tabindex="0" loading="lazy"><figcaption>image-20230330171740243</figcaption></figure><p>函数 <em>b</em> 中的 <em>y</em> 变量并没有被放在闭包中，<strong>所以要不要放入闭包取决于该变量有没有被引用</strong>，当然，此时的你可能会有这样的一个新问题，那么多闭包，那岂不是占用内存空间么？</p><p>其实，如果是像这样自动形成的闭包，是会被销毁掉的，当我们执行完引用变量的函数c，此时闭包就自动销毁，垃圾回收器会自动回收没有引用的变量，不会有任何内存占用的情况。</p><figure><img src="'+d+`" alt="image-20230330173503276" tabindex="0" loading="lazy"><figcaption>image-20230330173503276</figcaption></figure><p>通过chrome工具得知: 闭包本质是内部函数中的一个对象, 这个对象中包含引用的变量属性，所以当函数对象成为垃圾对象时，其包含的变量也会一并释放。</p><p>当然这些都是自动产生闭包的情况，有时我们会根据需求手动的来制造一个闭包。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> food <span class="token operator">=</span> <span class="token string">&#39;鸡翅&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>food<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> look <span class="token operator">=</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">look</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 鸡翅</span>
<span class="token function">look</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 鸡翅</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>eat</code> 函数返回一个函数，并在这个内部函数中访问 <code>food</code> 这个局部变量。按理说当 <code>eat</code> 调用完毕 <code>food</code> 就应该被销毁掉，但是我们向外部返回了 <code>eat</code> 内部的匿名函数，而这个匿名函数又引用了 <code>food</code>，所以闭包依然存在，垃圾回收器也不会对其进行回收，这也是为什么在外面调用这个匿名函数时，仍然能够打印出 <code>food</code> 变量的值。</p><h3 id="_2-作用" tabindex="-1"><a class="header-anchor" href="#_2-作用"><span>2. 作用</span></a></h3><ul><li><strong>通过闭包可以让外部环境访问到函数内部的局部变量。</strong></li><li><strong>通过闭包可以让局部变量持续保存下来，不随着它的上下文环境一起销毁。</strong></li></ul><h3 id="_3-一个简单的闭包程序" tabindex="-1"><a class="header-anchor" href="#_3-一个简单的闭包程序"><span>3. 一个简单的闭包程序</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 1. 将函数作为另一个函数的返回值</span>
<span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a<span class="token operator">++</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> fn2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span>
<span class="token comment">//闭包死亡(包含闭包的函数对象成为垃圾对象)</span>
<span class="token comment">//f = null </span>

<span class="token comment">// 2. 将函数作为实参传递给另一个函数调用</span>
<span class="token keyword">function</span> <span class="token function">showDelay</span><span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">showDelay</span><span class="token punctuation">(</span><span class="token string">&#39;atguigu&#39;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>闭包应用:</p><ul><li>模块化: 封装一些数据以及操作数据的函数, 只向外暴露一个包含n个方法的对象或函数(类) <ul><li><code>return {}</code></li><li><code>window.module={}</code> //匿名函数自定义</li></ul></li><li>循环遍历加监听</li><li>JS框架(jQuery)大量使用了闭包</li></ul></li><li><p>缺点:</p><ul><li>函数执行完后, 函数内的局部变量没有释放,占用内存的时间可能会过长</li><li>可能导致内存泄露</li><li>解决: <ul><li>及时释放 : f = null; //让内部函数对象成为垃圾对象</li></ul></li></ul></li><li><p>面试题</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token comment">//代码片段一</span>
 <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;The Window&quot;</span><span class="token punctuation">;</span>
 <span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span> <span class="token operator">:</span> <span class="token string">&quot;My Object&quot;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">getNameFunc</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token function">alert</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//?  the window</span>

 <span class="token comment">//代码片段二</span>
 <span class="token keyword">var</span> name2 <span class="token operator">=</span> <span class="token string">&quot;The Window&quot;</span><span class="token punctuation">;</span>
 <span class="token keyword">var</span> object2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name2</span> <span class="token operator">:</span> <span class="token string">&quot;My Object&quot;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">getNameFunc</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">return</span> that<span class="token punctuation">.</span>name2<span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token function">alert</span><span class="token punctuation">(</span>object2<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//?  my object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="五、内存溢出与内存泄露" tabindex="-1"><a class="header-anchor" href="#五、内存溢出与内存泄露"><span>五、内存溢出与内存泄露</span></a></h2><h3 id="_1-什么是内存泄露" tabindex="-1"><a class="header-anchor" href="#_1-什么是内存泄露"><span>1. 什么是内存泄露</span></a></h3><p>程序的运行需要内存。只要程序提出要求，操作系统或者运行时（<em>runtime</em>）就必须供给内存。</p><p>对于持续运行的服务进程（<em>daemon</em>），必须及时释放不再用到的内存。否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃。</p><p>也就是说，不再用到的内存，如果没有及时释放，就叫做内存泄漏（<em>memory leak</em>）。</p><h3 id="_2-javascript-中的垃圾回收" tabindex="-1"><a class="header-anchor" href="#_2-javascript-中的垃圾回收"><span>2. JavaScript 中的垃圾回收</span></a></h3><p>浏览器的 <em>Javascript</em> 具有自动垃圾回收机制（<em>GC</em>：<em>Garbage Collecation</em>），也就是说，执行环境会负责管理代码执行过程中使用的内存。其原理是：<strong>垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存</strong>。</p><p>但是这个过程不是实时的，因为其开销比较大并且 <em>GC</em> 时停止响应其他操作，所以垃圾回收器会按照固定的时间间隔周期性的执行。</p><p>不再使用的变量也就是生命周期结束的变量，当然只可能是局部变量，全局变量的生命周期直至浏览器卸载页面才会结束。局部变量只在函数的执行过程中存在，而在这个过程中会为局部变量在栈或堆上分配相应的空间，以存储它们的值，然后在函数中使用这些变量，直至函数结束，而闭包中由于内部函数的原因，外部函数并不能算是结束。</p><p>下面是一段示例代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们首先声明了两个函数，分别叫做 <em>fn1</em> 和 <em>fn2</em>。</p><p>当 <em>fn1</em> 被调用时，进入 <em>fn1</em> 的环境，会开辟一块内存存放对象 <em>{name: &#39;zhangsan&#39;, age: 10}</em>。而当调用结束后，出了 <em>fn1</em> 的环境，那么该块内存会被 <em>JavaScript</em> 引擎中的垃圾回收器自动释放；</p><p>在 <em>fn2</em> 被调用的过程中，返回的对象被全局变量 <em>b</em> 所指向，所以该块内存并不会被释放。</p><p>这里问题就出现了：到底哪个变量是没有用的？</p><p>所以垃圾收集器必须跟踪到底哪个变量没用，对于不再有用的变量打上标记，以备将来收回其内存。</p><p>用于标记的无用变量的策略可能因实现而有所区别，通常情况下有两种实现方式：<strong>标记清除</strong>和<strong>引用计数</strong>。</p><p>引用计数不太常用，标记清除较为常用。</p><h3 id="_3-标记清除" tabindex="-1"><a class="header-anchor" href="#_3-标记清除"><span>3. 标记清除</span></a></h3><p><em>JavaScript</em> 中最常用的垃圾回收方式就是标记清除。</p><p>当变量进入环境时，例如，在函数中声明一个变量，就将这个变量标记为“进入环境”。</p><p>从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。</p><p>而当变量离开环境时，则将其标记为“离开环境”。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">;</span> <span class="token comment">// 被标记 ，进入环境 </span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span> <span class="token punctuation">;</span> <span class="token comment">// 被标记 ，进入环境</span>
<span class="token punctuation">}</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行完毕 之后 a、b 又被标离开环境，被回收。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>垃圾回收器在运行的时候会给存储在内存中的所有变量都加上标记（当然，可以使用任何标记方式）。</p><p>然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记（闭包）。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。</p><p>最后，垃圾回收器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。</p><p>到目前为止，<em>IE9+、Firefox、Opera、Chrome、Safari</em> 的 <em>JS</em> 实现使用的都是标记清除的垃圾回收策略或类似的策略，只不过垃圾收集的时间间隔互不相同。</p><h3 id="_4-引用计数" tabindex="-1"><a class="header-anchor" href="#_4-引用计数"><span>4. 引用计数</span></a></h3><p>引用计数的含义是跟踪记录每个值被引用的次数。</p><p>当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是 <em>1</em>。如果同一个值又被赋给另一个变量，则该值的引用次数加 <em>1</em>。</p><p>相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减 <em>1</em>。当这个值的引用次数变成 <em>0</em> 时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。</p><p>这样，当垃圾回收器下次再运行时，它就会释放那些引用次数为 <em>0</em> 的值所占用的内存。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>	<span class="token comment">// a 指向对象的引用次数为 1</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>	<span class="token comment">// a 指向对象的引用次数加 1，为 2</span>
    <span class="token keyword">var</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span>	<span class="token comment">// a 指向对象的引用次数再加 1，为 3</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>	<span class="token comment">// a 指向对象的引用次数减 1，为 2</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>Netscape Navigator3</em> 是最早使用引用计数策略的浏览器，但很快它就遇到一个严重的问题：<strong>循环引用</strong>。</p><p>循环引用指的是对象 <em>A</em> 中包含一个指向对象B的指针，而对象 <em>B</em> 中也包含一个指向对象 <em>A</em> 的引用。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    a<span class="token punctuation">.</span>pro <span class="token operator">=</span> b<span class="token punctuation">;</span>
    b<span class="token punctuation">.</span>pro <span class="token operator">=</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码 <em>a</em> 和 <em>b</em> 的引用次数都是 <em>2</em>，<em>fn</em> 执行完毕后，两个对象都已经离开环境，在标记清除方式下是没有问题的，但是在引用计数策略下，因为 <em>a</em> 和 <em>b</em> 的引用次数不为 <em>0</em>，所以不会被垃圾回收器回收内存，如果 <em>fn</em> 函数被大量调用，就会造成内存泄露。在 <em>IE7</em> 与 <em>IE8</em> 上，内存直线上升。</p><h3 id="_5-真题解答" tabindex="-1"><a class="header-anchor" href="#_5-真题解答"><span>5. 真题解答</span></a></h3><ul><li>请介绍一下 <em>JavaScript</em> 中的垃圾回收站机制</li></ul><blockquote><p>参考答案：</p><p><em>JavaScript</em> 具有自动垃圾回收机制。垃圾收集器会按照固定的时间间隔周期性的执行。</p><p><em>JavaScript</em> 常见的垃圾回收方式：<strong>标记清除</strong>、<strong>引用计数</strong>方式。</p><p>1、标记清除方式：</p><ul><li><p>工作原理：当变量进入环境时，将这个变量标记为“进入环境”。当变量离开环境时，则将其标记为“离开环境”。标记“离开环境”的就回收内存。</p></li><li><p>工作流程：</p></li><li><p>垃圾回收器，在运行的时候会给存储在内存中的所有变量都加上标记；</p></li><li><p>去掉环境中的变量以及被环境中的变量引用的变量的标记；</p></li><li><p>被加上标记的会被视为准备删除的变量；</p></li><li><p>垃圾回收器完成内存清理工作，销毁那些带标记的值并回收他们所占用的内存空间。</p></li></ul><p>2、引用计数方式：</p><ul><li><p>工作原理：跟踪记录每个值被引用的次数。</p></li><li><p>工作流程：</p></li><li><p>声明了一个变量并将一个引用类型的值赋值给这个变量，这个引用类型值的引用次数就是 <em>1</em>；</p></li><li><p>同一个值又被赋值给另一个变量，这个引用类型值的引用次数加 <em>1</em>；</p></li><li><p>当包含这个引用类型值的变量又被赋值成另一个值了，那么这个引用类型值的引用次数减 <em>1</em>；</p></li><li><p>当引用次数变成 <em>0</em> 时，说明没办法访问这个值了；</p></li><li><p>当垃圾收集器下一次运行时，它就会释放引用次数是 <em>0</em> 的值所占的内存。</p></li></ul></blockquote><h2 id="六、高阶函数" tabindex="-1"><a class="header-anchor" href="#六、高阶函数"><span>六、高阶函数</span></a></h2><h3 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念"><span>1. 概念</span></a></h3><p>高阶函数（higher-order-function）并不是 JavaScript 语言所特有的东西，它适用于整个计算机领域，甚至数学领域。</p><p>它的定义非常简单。</p><p>根据维基百科的定义，无论是在数学领域，还是在计算机领域，凡是<strong>满足以下任一条件的函数</strong>，均是高阶函数：</p><ul><li>接受一个或多个函数作为输入</li><li>输出一个函数</li></ul><p>在大部分计算机语言中，一个函数的输入往往被看作是函数的参数，而一个函数的输出，往往被看作是函数的返回值，因此，上面作为高阶函数条件的两个点，放到计算机领域，可以说成是：</p><p>（1）接受一个或多个函数作为参数</p><p>（2）返回一个函数</p><p>所以我们之前一直使用的数组中的很多方法，其实都是高阶函数，比如<code>forEach,filter，map</code>等等。</p><h3 id="_2-函数防抖与函数节流" tabindex="-1"><a class="header-anchor" href="#_2-函数防抖与函数节流"><span>2. 函数防抖与函数节流</span></a></h3><p>JavaScript 中的函数大多数情况下都是由用户主动调用触发的，除非是函数本身的实现不合理，否则一般不会遇到跟性能相关的问题。</p><p>但是在一些少数情况下，函数的触发不是由用户直接控制的。在这些场景下，函数有可能被非常频繁地调用，而造成大的性能问题。解决性能问题的处理办法就有<strong>函数防抖</strong>和<strong>函数节流</strong>，其核心就是限制某一个方法的频繁触发。</p><p>下面是函数被频繁调用的常见的几个场景：</p><ul><li>mousemove 事件。如果要实现一个拖拽功能，需要一路监听 mousemove 事件，在回调中获取元素当前位置，然后重置 DOM 的位置来进行样式改变。如果不加以控制，每移动一定像素而触发的回调数量非常惊人，回调中又伴随着 DOM 操作，继而引发浏览器的重排与重绘，性能差的浏览器可能就会直接假死。</li><li>window.onresize 事件。为 window 对象绑定了 resize 事件，当浏览器窗口大小被拖动而改变的时候，这个事件触发的频率非常之高。如果在 window.onresize 事件函数里有一些跟 DOM 节点相关的操作，而跟 DOM 节点相关的操作往往是非常消耗性能的，这时候浏览器可能就会吃不消而造成卡顿现象。</li><li>射击游戏的 mousedown/keydown 事件（单位时间只能发射一颗子弹）</li><li>搜索联想（keyup,keydown,input事件）</li><li>监听滚动事件判断是否到页面底部自动加载更多（scroll事件）</li></ul><h4 id="函数防抖-debounce" tabindex="-1"><a class="header-anchor" href="#函数防抖-debounce"><span>函数防抖（debounce）</span></a></h4><blockquote><p>函数防抖，就是指触发事件后在规定时间内函数只能执行一次，如果在规定时间内又触发了事件，则会 <mark>重新计算函数执行时间</mark>。</p></blockquote><p>简单的说，<strong>当一个动作连续触发，则只执行最后一次</strong>。 如：坐公交，司机需要等最后一个人进入才能关门。每次进入一个人，司机就会多等待几秒再关门。</p><p><strong>应用场景</strong></p><ul><li>搜索框搜索输入。只需用户最后一次输入完，再发送请求</li><li>手机号、邮箱验证输入检测</li><li>窗口大小Resize。只需窗口调整完成后，计算窗口大小。防止重复渲染。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>
    timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数节流-throttle" tabindex="-1"><a class="header-anchor" href="#函数节流-throttle"><span>函数节流（throttle）</span></a></h4><blockquote><p>限制一个函数在规定时间内只能执行一次。 如，乘坐地铁，过闸机时，每个人进入后3秒后门关闭，等待下一个人进入。</p></blockquote><p>简单的说，<strong>当一个动作连续触发，间隔一段时间执行一次</strong>。</p><p><strong>应用场景</strong></p><ul><li>滚动加载，加载更多或滚到底部监听</li><li>谷歌搜索框，搜索联想功能</li><li>高频点击提交，表单重复提交</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">throttle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
      flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h4><p>防抖：连续触发事件回调都会重新开始计算delay</p><p>节流：触发事件回调后开始delay然后开始下一次触发调用</p><figure><img src="`+v+`" alt="16588246930073" tabindex="0" loading="lazy"><figcaption>16588246930073</figcaption></figure><h3 id="_3-分时函数" tabindex="-1"><a class="header-anchor" href="#_3-分时函数"><span>3.分时函数</span></a></h3><p>某些函数是用户主动调用，但因为一些客观的原因，这些函数会严重地影响页面性能。这个这个问题的解决方案之一就是使用数组分块技术（又被称之为分时函数），数组分块是一种使用定时器分割循环的技术，为要处理的项目创建一个队列，然后使用定时器取出下一个要处理的项目进行处理，接着再设置另一个定时器。</p><p>即将一个大任务分成若干个小任务，然后按照一定的时间间隔依次执行每个小任务，而不是一次性全部执行。分时函数常常在处理非常大的数据集合（比如渲染海量节点）时非常有用，可以提高浏览器的响应速度，并防止出现卡顿、崩溃等问题。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">timeChunk</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> count<span class="token punctuation">,</span> interval</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// 该分时函数接收 4 个参数：数据、创建节点逻辑的函数、每一批创建的节点数量、每个执行任务之间的时间间隔</span>
<span class="token comment">// 该分时函数将返回一个计时函数，根据数据是否已经创建完节点来决定是否停止</span>
  <span class="token keyword">let</span> obj<span class="token punctuation">,</span> t<span class="token punctuation">;</span>
  <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">start</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建规定数量的节点</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>count <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> obj <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">fn</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    t <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> interval <span class="token operator">||</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-柯里化" tabindex="-1"><a class="header-anchor" href="#_4-柯里化"><span>4. 柯里化</span></a></h3><p>柯里化（currying）又称部分求值。一个柯里化的函数首先会接受一些参数，接受了这些参数之后，该函数并不会立即求值，而是继续返回另外一个函数，刚才传入的参数在函数形成的闭包中被保存起来。待到函数被真正需要求值的时候，之前传入的所有参数都会被一次性用于求值。</p><p>比如，有一个函数<code>f(x, y, z) = (x + y) * z</code>，若固定了 x = 2，你将通过柯里化函数得到一个新的函数，这个新的函数是<code>g(y, z) = (2 + y) * z</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 柯里化函数
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">function</span><span class="token punctuation">}</span></span> <span class="token parameter">func</span> 最终要执行的函数
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">args</span> 要固定的参数
 */</span>
<span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 返回一个接收剩余参数的函数</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>inArgs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将固定的参数和剩余参数拼接</span>
        <span class="token keyword">const</span> allArgs <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>inArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>allArgs<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> func<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 若拼接后的参数集 大于等于 原本函数的参数数量，则执行原本的函数</span>
            <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">...</span>allArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token comment">// 否则，继续柯里化，固定目前的参数</span>
            <span class="token keyword">return</span> <span class="token function">curry</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token operator">...</span>allArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>柯里化函数的使用：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token operator">*</span> z<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 通过柯里化函数，固定函数 f 的第一个参数 x=2，得到一个新函数 g(y, z)</span>
<span class="token keyword">const</span> g <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (2+3)*5 输出：25</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (2+6)*4 输出：32</span>
<span class="token comment">// 通过柯里化函数，固定函数f的前两个参数 x=2 y=3，得到一个新函数 k(z)</span>
<span class="token keyword">const</span> k <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">k</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (2+3)*5 输出：25</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">k</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (2+3)*4 输出：20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-函数管道" tabindex="-1"><a class="header-anchor" href="#_5-函数管道"><span>5. 函数管道</span></a></h3><p>有的时候，我们可以面临这样一种场景：</p><ol><li>需要连续调用多个函数才能得到结果</li><li>前一个函数的返回结果，将作为参数传递给下一个函数</li></ol><p>遇到这种情况，我们就可以使用<strong>函数管道，将要依次调用的函数组装起来</strong>，形成一个完整的调用通道。</p><figure><img src="`+m+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 函数管道
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">}</span></span> <span class="token parameter">functions</span> 要连接的函数数组
 */</span>
<span class="token keyword">function</span> <span class="token function">pipe</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>functions</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> midData <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token comment">//midData用于保存每次调用的结果</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> func <span class="token keyword">of</span> functions<span class="token punctuation">)</span><span class="token punctuation">{</span>
            midData <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>midData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> midData<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>reduce方法实现的版本</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 函数管道
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">}</span></span> <span class="token parameter">functions</span> 要连接的函数数组
 */</span>
<span class="token keyword">function</span> <span class="token function">pipe</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>functions</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> functions<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> func</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于函数管道强烈依赖一个前提条件，即管道中的函数必须只能有一个参数，因此，如果遇到了管道中需要用到多参函数的场景，我们可以利用上一节讲解的柯里化来固定已知参数。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//连接函数管道</span>
<span class="token keyword">const</span> camel <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>firstUpper<span class="token punctuation">,</span> otherLower<span class="token punctuation">,</span> removeEmpty<span class="token punctuation">,</span> <span class="token function">curry</span><span class="token punctuation">(</span>cutString<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">camel</span><span class="token punctuation">(</span><span class="token string">&quot; my firST nAme &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：myFirstName</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">camel</span><span class="token punctuation">(</span><span class="token string">&quot; user nick name &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：userNickName</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,144);function _(w,j){const t=e("ExternalLinkIcon");return o(),c("div",null,[g,n("blockquote",null,[f,n("p",null,[s("具体内容参考"),n("a",h,[s("浏览器原理系列-JS执行上下文详解 - 掘金 (juejin.cn)"),l(t)])])]),y])}const S=p(b,[["render",_],["__file","03_advance1.html.vue"]]),O=JSON.parse('{"path":"/basic_language/javaScript/03_advance1.html","title":"JS进阶","lang":"zh-CN","frontmatter":{"title":"JS进阶","order":3,"description":"一、原型与原型链 1. 成分组成 构造函数：所有函数都有一个特别的属性, 它默认指向一个Object空对象(即称为: 原型对象)(Object不满足) prototype : 显式原型属性 实例对象：所有实例对象都有一个特别的属性: __proto__ : 隐式原型属性 原型对象：原型对象中有一个属性constructor, 它指向函数对象，同时其作为...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/basic_language/javaScript/03_advance1.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"JS进阶"}],["meta",{"property":"og:description","content":"一、原型与原型链 1. 成分组成 构造函数：所有函数都有一个特别的属性, 它默认指向一个Object空对象(即称为: 原型对象)(Object不满足) prototype : 显式原型属性 实例对象：所有实例对象都有一个特别的属性: __proto__ : 隐式原型属性 原型对象：原型对象中有一个属性constructor, 它指向函数对象，同时其作为..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T13:13:32.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-03-19T13:13:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JS进阶\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-19T13:13:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、原型与原型链","slug":"一、原型与原型链","link":"#一、原型与原型链","children":[{"level":3,"title":"1. 成分组成","slug":"_1-成分组成","link":"#_1-成分组成","children":[]},{"level":3,"title":"2. 显式原型与隐式原型的关系","slug":"_2-显式原型与隐式原型的关系","link":"#_2-显式原型与隐式原型的关系","children":[]},{"level":3,"title":"3. 原型链","slug":"_3-原型链","link":"#_3-原型链","children":[]},{"level":3,"title":"4. 出现原因","slug":"_4-出现原因","link":"#_4-出现原因","children":[]}]},{"level":2,"title":"二、执行上下文与执行上下文栈","slug":"二、执行上下文与执行上下文栈","link":"#二、执行上下文与执行上下文栈","children":[{"level":3,"title":"1.  声明提前现象","slug":"_1-声明提前现象","link":"#_1-声明提前现象","children":[]},{"level":3,"title":"2.  执行上下文的理解","slug":"_2-执行上下文的理解","link":"#_2-执行上下文的理解","children":[]},{"level":3,"title":"3.  生命周期","slug":"_3-生命周期","link":"#_3-生命周期","children":[]},{"level":3,"title":"4.  执行上下文创建和执行的过程","slug":"_4-执行上下文创建和执行的过程","link":"#_4-执行上下文创建和执行的过程","children":[]}]},{"level":2,"title":"三、作用域与作用域链","slug":"三、作用域与作用域链","link":"#三、作用域与作用域链","children":[{"level":3,"title":"1. 概念理解","slug":"_1-概念理解","link":"#_1-概念理解","children":[]},{"level":3,"title":"2. 分类","slug":"_2-分类","link":"#_2-分类","children":[]},{"level":3,"title":"3. 作用","slug":"_3-作用","link":"#_3-作用","children":[]},{"level":3,"title":"4. 区别作用域与执行上下文","slug":"_4-区别作用域与执行上下文","link":"#_4-区别作用域与执行上下文","children":[]},{"level":3,"title":"5. 面试题","slug":"_5-面试题","link":"#_5-面试题","children":[]}]},{"level":2,"title":"四、闭包","slug":"四、闭包","link":"#四、闭包","children":[{"level":3,"title":"1. 概念理解","slug":"_1-概念理解-1","link":"#_1-概念理解-1","children":[]},{"level":3,"title":"2. 作用","slug":"_2-作用","link":"#_2-作用","children":[]},{"level":3,"title":"3. 一个简单的闭包程序","slug":"_3-一个简单的闭包程序","link":"#_3-一个简单的闭包程序","children":[]}]},{"level":2,"title":"五、内存溢出与内存泄露","slug":"五、内存溢出与内存泄露","link":"#五、内存溢出与内存泄露","children":[{"level":3,"title":"1. 什么是内存泄露","slug":"_1-什么是内存泄露","link":"#_1-什么是内存泄露","children":[]},{"level":3,"title":"2. JavaScript 中的垃圾回收","slug":"_2-javascript-中的垃圾回收","link":"#_2-javascript-中的垃圾回收","children":[]},{"level":3,"title":"3. 标记清除","slug":"_3-标记清除","link":"#_3-标记清除","children":[]},{"level":3,"title":"4. 引用计数","slug":"_4-引用计数","link":"#_4-引用计数","children":[]},{"level":3,"title":"5. 真题解答","slug":"_5-真题解答","link":"#_5-真题解答","children":[]}]},{"level":2,"title":"六、高阶函数","slug":"六、高阶函数","link":"#六、高阶函数","children":[{"level":3,"title":"1.  概念","slug":"_1-概念","link":"#_1-概念","children":[]},{"level":3,"title":"2. 函数防抖与函数节流","slug":"_2-函数防抖与函数节流","link":"#_2-函数防抖与函数节流","children":[]},{"level":3,"title":"3.分时函数","slug":"_3-分时函数","link":"#_3-分时函数","children":[]},{"level":3,"title":"4. 柯里化","slug":"_4-柯里化","link":"#_4-柯里化","children":[]},{"level":3,"title":"5. 函数管道","slug":"_5-函数管道","link":"#_5-函数管道","children":[]}]}],"git":{"createdTime":1710854012000,"updatedTime":1710854012000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":1}]},"readingTime":{"minutes":24.41,"words":7323},"filePathRelative":"basic_language/javaScript/03_advance1.md","localizedDate":"2024年3月19日","excerpt":"<h2>一、原型与原型链</h2>\\n<h3>1. 成分组成</h3>\\n<ul>\\n<li><strong>构造函数</strong>：所有函数都有一个特别的属性, 它默认指向一个Object空对象(即称为: 原型对象)(Object不满足)\\n<ul>\\n<li><code>prototype</code> : 显式原型属性</li>\\n</ul>\\n</li>\\n<li><strong>实例对象</strong>：所有实例对象都有一个特别的属性:\\n<ul>\\n<li><code>__proto__</code> : 隐式原型属性</li>\\n</ul>\\n</li>\\n<li><strong>原型对象</strong>：原型对象中有一个属性constructor, 它指向函数对象，同时其作为Object的实例对象，也有一个__proto__属性指向它的原型对象\\n<ul>\\n<li>constructor：指向构造函数本身</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{S as comp,O as data};
