import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,e as i,a as n,b as a,d as e,o as l,r as c}from"./app-CULaNOg7.js";const r="/dcblog/assets/1-BrCnQGfE.png",u="/dcblog/assets/2-BEz33SW5.png",d={},k={href:"https://juejin.cn/post/7129298214959710244",target:"_blank",rel:"noopener noreferrer"},m={href:"https://juejin.cn/post/6924218259302694919",target:"_blank",rel:"noopener noreferrer"},h={href:"https://juejin.cn/post/6949896020788690958?searchId=20230811111548ACA1EEA9D9BEB39C4741#heading-14",target:"_blank",rel:"noopener noreferrer"},v={href:"http://www.vueusejs.com/core/useVirtualList/",target:"_blank",rel:"noopener noreferrer"};function g(b,s){const t=c("ExternalLinkIcon");return l(),p("div",null,[s[5]||(s[5]=i(`<h2 id="一、页面死循环卡死时如何上报错误" tabindex="-1"><a class="header-anchor" href="#一、页面死循环卡死时如何上报错误"><span>一、页面死循环卡死时如何上报错误</span></a></h2><h3 id="_1-设置最大执行时间限制" tabindex="-1"><a class="header-anchor" href="#_1-设置最大执行时间限制"><span>1. 设置最大执行时间限制</span></a></h3><p>在死循环代码周围设置一个定时器，如果循环超过设定的时间仍未完成，可以抛出一个自定义的异常，然后在try-catch块中捕获该异常。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> maxExecutionTime <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// 设置最大执行时间为1秒</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Execution time exceeded&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> maxExecutionTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 页面的js逻辑</span>

  <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理异常</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-心跳检测" tabindex="-1"><a class="header-anchor" href="#_2-心跳检测"><span>2. 心跳检测</span></a></h3><p>在死循环代码中插入一个定时器，定时发送请求作为心跳检测，如果超过预定时间没有收到响应，就判断页面卡死，并进行错误上报。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 定时发送请求作为心跳检测</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 发送一个请求，如Ajax请求或者通过图片请求来模拟心跳</span>
  <span class="token comment">// 如果超过预定时间没有收到响应，即可判断页面卡死</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、中间层方案" tabindex="-1"><a class="header-anchor" href="#二、中间层方案"><span>二、中间层方案</span></a></h2><h4 id="_1-1-node作为中间层模式" tabindex="-1"><a class="header-anchor" href="#_1-1-node作为中间层模式"><span>1.1 Node作为中间层模式</span></a></h4><p>以Node作为中间层，当客户端打开一个网站时，先请求到node服务器这一层，通过node服务器转发请求到后端的服务器，获取数据，然后返给node的模板引擎，根据视图模板渲染好模板字符串页面，再返回给客户端，直接展示页面，如图：</p><figure><img src="`+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在前后端分离的天然选择下，node中间层可以承担更多的责任。</p><ul><li>代理：在开发环境下，我们可以利用代理来，解决最常见的跨域问题；在线上环境下，我们可以利用代理，转发请求到多个服务端。</li><li>缓存：缓存其实是更靠近前端的需求，用户的动作触发数据的更新，node中间层可以直接处理一部分缓存需求。</li><li>限流：node中间层，可以针对接口或者路由做响应的限流。</li><li>日志：相比其他服务端语言，node中间层的日志记录，能更方便快捷的定位问题（是在浏览器端还是服务端）。</li><li>监控：擅长高并发的请求处理，做监控也是合适的选项。</li><li>鉴权：有一个中间层去鉴权，也是一种单一职责的实现。</li><li>路由：前端更需要掌握页面路由的权限和逻辑。</li><li>服务端渲染：node中间层的解决方案更灵活，比如SSR、模板直出、利用一些JS库做预渲染等等。</li></ul><h4 id="_1-2-负载均衡器-nginx" tabindex="-1"><a class="header-anchor" href="#_1-2-负载均衡器-nginx"><span>1.2 负载均衡器-Nginx</span></a></h4><p>Nginx是一个高性能的WEB服务器和反向代理服务器，最常用的软件负载均衡器。</p><p>当访问量比较大时，频繁的请求，会给服务带来很大压力，通过负载均衡、分流，减轻服务器的压力；另一方面，网站部署在多台服务器，当某台服务器故障的时候，可以马上切换到其它服务器，还能保证网站能正常访问，这就是负载均衡的优势。</p><figure><img src="'+u+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="三、前端鉴权方案" tabindex="-1"><a class="header-anchor" href="#三、前端鉴权方案"><span>三、前端鉴权方案</span></a></h2>',18)),n("p",null,[n("a",k,[s[0]||(s[0]=a("一文教你搞定所有前端鉴权与后端鉴权方案 - 掘金 (juejin.cn)")),e(t)])]),s[6]||(s[6]=n("h2",{id:"四、扫码登录方案",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#四、扫码登录方案"},[n("span",null,"四、扫码登录方案")])],-1)),n("p",null,[n("a",m,[s[1]||(s[1]=a("微信扫码登录背后的实现原理？ - 掘金 (juejin.cn)")),e(t)])]),s[7]||(s[7]=n("h2",{id:"五、首屏性能提升方案",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#五、首屏性能提升方案"},[n("span",null,"五、首屏性能提升方案")])],-1)),n("p",null,[n("a",h,[s[2]||(s[2]=a("性能优化之首屏加载🚀 - 掘金 (juejin.cn)")),e(t)])]),s[8]||(s[8]=n("h2",{id:"六、长列表无限滚动方案",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#六、长列表无限滚动方案"},[n("span",null,"六、长列表无限滚动方案")])],-1)),n("ul",null,[n("li",null,[n("p",null,[n("a",v,[s[3]||(s[3]=a("useVirtualList")),e(t)])])]),s[4]||(s[4]=n("li",null,[n("p",null,[a("使用"),n("code",null,"IntersectionObserver")])],-1))])])}const y=o(d,[["render",g],["__file","solution.html.vue"]]),j=JSON.parse(`{"path":"/algorithm/solution/solution.html","title":"解决方案","lang":"zh-CN","frontmatter":{"title":"解决方案","description":"一、页面死循环卡死时如何上报错误 1. 设置最大执行时间限制 在死循环代码周围设置一个定时器，如果循环超过设定的时间仍未完成，可以抛出一个自定义的异常，然后在try-catch块中捕获该异常。 2. 心跳检测 在死循环代码中插入一个定时器，定时发送请求作为心跳检测，如果超过预定时间没有收到响应，就判断页面卡死，并进行错误上报。 二、中间层方案 1.1 ...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/algorithm/solution/solution.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"解决方案"}],["meta",{"property":"og:description","content":"一、页面死循环卡死时如何上报错误 1. 设置最大执行时间限制 在死循环代码周围设置一个定时器，如果循环超过设定的时间仍未完成，可以抛出一个自定义的异常，然后在try-catch块中捕获该异常。 2. 心跳检测 在死循环代码中插入一个定时器，定时发送请求作为心跳检测，如果超过预定时间没有收到响应，就判断页面卡死，并进行错误上报。 二、中间层方案 1.1 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T13:13:32.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-03-19T13:13:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"解决方案\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-19T13:13:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、页面死循环卡死时如何上报错误","slug":"一、页面死循环卡死时如何上报错误","link":"#一、页面死循环卡死时如何上报错误","children":[{"level":3,"title":"1. 设置最大执行时间限制","slug":"_1-设置最大执行时间限制","link":"#_1-设置最大执行时间限制","children":[]},{"level":3,"title":"2. 心跳检测","slug":"_2-心跳检测","link":"#_2-心跳检测","children":[]}]},{"level":2,"title":"二、中间层方案","slug":"二、中间层方案","link":"#二、中间层方案","children":[]},{"level":2,"title":"三、前端鉴权方案","slug":"三、前端鉴权方案","link":"#三、前端鉴权方案","children":[]},{"level":2,"title":"四、扫码登录方案","slug":"四、扫码登录方案","link":"#四、扫码登录方案","children":[]},{"level":2,"title":"五、首屏性能提升方案","slug":"五、首屏性能提升方案","link":"#五、首屏性能提升方案","children":[]},{"level":2,"title":"六、长列表无限滚动方案","slug":"六、长列表无限滚动方案","link":"#六、长列表无限滚动方案","children":[]}],"git":{"createdTime":1710854012000,"updatedTime":1710854012000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":1}]},"readingTime":{"minutes":2.95,"words":885},"filePathRelative":"algorithm/solution/solution.md","localizedDate":"2024年3月19日","excerpt":"<h2>一、页面死循环卡死时如何上报错误</h2>\\n<h3>1. 设置最大执行时间限制</h3>\\n<p>在死循环代码周围设置一个定时器，如果循环超过设定的时间仍未完成，可以抛出一个自定义的异常，然后在try-catch块中捕获该异常。</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> counter <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> maxExecutionTime <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1000</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 设置最大执行时间为1秒</span>\\n\\n<span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> timer <span class=\\"token operator\\">=</span> <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">clearTimeout</span><span class=\\"token punctuation\\">(</span>timer<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Error</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Execution time exceeded'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> maxExecutionTime<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 页面的js逻辑</span>\\n\\n  <span class=\\"token function\\">clearTimeout</span><span class=\\"token punctuation\\">(</span>timer<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span>error<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 处理异常</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">error</span><span class=\\"token punctuation\\">(</span>error<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}`);export{y as comp,j as data};
