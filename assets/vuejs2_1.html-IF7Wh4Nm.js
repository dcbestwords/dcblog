import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as n}from"./app-CNnDLuiA.js";const h="/assets/image-20230922182344463-BZYySIJC.png",t="/assets/317625317825476-BgsEpNus.png",l="/assets/image-20230922172952626-Dfh1hUYF.png",k="/assets/IMG_0107-CqRo7dhe.png",p="/assets/1782631879236-DxWQyVeT.png",d="/assets/image-20240316094656477-S2ezDbpF.png",r="/assets/image-20230922184232782-BDT_mM30.png",c="/assets/image-20240316153703286-DQunDZ-e.png",o="/assets/1728631786925-BJWXURuN.png",g="/assets/image-20240316161744870-BKlgGLZ9.png",B="/assets/image-20240316154022019-Cx2ERD0d.png",A="/assets/IMG_0106-BYDzrm7A.png",y="/assets/123123141-BWde1RWd.png",F="/assets/image-20240324215104187-MlvWG9ZZ.png",u="/assets/new_vue-B2Y7C_Re.png",m="/assets/image-20240316152343097-CFUqA5Cw.png",v="/assets/image-20240316201127650-CgeihsXd.png",C="/assets/image-20240318102542437-CHXU38O1.png",E={};function b(f,i){return n(),a("div",null,i[0]||(i[0]=[e('<h2 id="一、组件挂载" tabindex="-1"><a class="header-anchor" href="#一、组件挂载"><span>一、组件挂载</span></a></h2><figure><img src="'+h+'" alt="image-20230922182344463" tabindex="0" loading="lazy"><figcaption>image-20230922182344463</figcaption></figure><h2 id="二、生成-vnode" tabindex="-1"><a class="header-anchor" href="#二、生成-vnode"><span>二、生成 vnode</span></a></h2><p><code>_render</code>函数的总流程大致如下：</p><figure><img src="'+t+`" alt="render2.jpg" tabindex="0" loading="lazy"><figcaption>render2.jpg</figcaption></figure><h3 id="_1-组件占位符-vnode-数据结构" tabindex="-1"><a class="header-anchor" href="#_1-组件占位符-vnode-数据结构"><span>1. 组件占位符 VNode 数据结构</span></a></h3><p>假设组件标签如下</p><div class="language-vue" data-highlighter="shiki" data-ext="vue" data-title="vue" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">HelloWorld</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;js_hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">flag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">flag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> msg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Welcome to Your Vue.js App&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span></code></pre></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line highlighted"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 组件占位符 VNode 特有的属性</span></span>
<span class="line highlighted"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    componentInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">undefined</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 子组件的 Vue 实例，子组件Vue实例创建完成后赋值</span></span>
<span class="line highlighted"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    componentOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 组件占位符 VNode 特有的属性</span></span>
<span class="line highlighted"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      propsData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 根据子组件定义的 props 属性，获取传入子组件的值</span></span>
<span class="line highlighted"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">          flag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">          msg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Welcome to Your Vue.js App&quot;</span></span>
<span class="line highlighted"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line highlighted"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      listeners</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">undefined</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 自定义事件</span></span>
<span class="line highlighted"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      tag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;HelloWorld&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 组件名</span></span>
<span class="line highlighted"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      children</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">undefined</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 插槽内容</span></span>
<span class="line highlighted"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      Ctor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: ƒ </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 构建子组件 Vue实例 的构造函数</span></span>
<span class="line highlighted"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {…}, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 父组件的 Vue实例,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 组件标签上的属性或者 render 函数的第二个参数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      attrs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 组件标签上的属性，不包含子组件中定义的 props 属性</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">          id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;js_hello&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">undefined</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 有 .native 修饰符的事件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      hook</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {…}  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 钩子函数，在 patch 的不同时机触发</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    elm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">DOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 组件根元素，在 patch 过程创建</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    tag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;vue-component-2-HelloWorld&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>组件占位符 VNode 里面存储子组件 Vue 实例的构造函数、以及存储传给子组件的数据。他的作用其实就是一个占位符。当子组件的 DOM 创建完成，会将 DOM 赋值给组件占位符 VNode 的<code>elm</code> 属性。而渲染时使用的就是这个<code>elm</code>。</p><figure><img src="`+l+'" alt="image-20230922172952626" tabindex="0" loading="lazy"><figcaption>image-20230922172952626</figcaption></figure><ul><li><code>vm.$vnode = parentVnode</code>组件实例的<code>$vnode</code>属性指向组件的占位符 VNode</li><li><code>vm.$options._parentVnode = parentVnode;</code></li><li><code>vnode.parent = parentVnode</code>组件渲染 VNode 的<code>parent</code>属性指向组件的占位符 VNode</li></ul><figure><img src="'+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-渲染-vnode-数据结构" tabindex="-1"><a class="header-anchor" href="#_2-渲染-vnode-数据结构"><span>2. 渲染 VNode 数据结构</span></a></h3><p>假设组件内容如下</p><div class="language-vue" data-highlighter="shiki" data-ext="vue" data-title="vue" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;{{ msg }}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    children</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [{  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 子元素</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        context</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {},</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        data</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 组件标签上的属性或者 render 函数的第二个参数</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            staticClass</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;hello&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        elm</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> undefined</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 根的 DOM 元素</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        parent</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> undefined</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 组件的组件占位符VNode，只有组件 根VNode 才有</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        tag</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;h1&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        children</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          text</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Welcome to Your Vue.js App&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          context</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> undefined</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          data</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> undefined</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          elm</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> undefined</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          parent</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> undefined</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          tag</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> undefined</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {}, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 当前组件的Vue实例</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 组件标签上的属性或者 render 函数的第二个参数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        staticClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;hello&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    elm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">undefined</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 根的 DOM 元素</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    parent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {}, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 组件的组件占位符VNode，只有组件 根VNode 才有</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    tag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;div&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>组件占位符 VNode 和渲染 VNode 的区别:</p><ul><li>组件占位符 VNode，是一个占位符；描述的是 <mark>组件标签</mark> 。存储传递给子组件的信息<code>componentOptions</code></li><li>渲染 VNode，描述普通标签。存储标签信息。</li></ul><blockquote><p>vue 中将<code>template</code>编译为<code>render</code>函数并挂载到组件实例的<code>$options</code>中，其中<code>render</code>函数使用了如下方式进行包裹以便在模板中可以直接访问组件实例的属性和方法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> \${</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">code</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div></blockquote><h2 id="三、data" tabindex="-1"><a class="header-anchor" href="#三、data"><span>三、data</span></a></h2><p>在组件实例化（ <mark>new vue | vm</mark> ）时会进行组件的初始化（ <mark>_init</mark> ），初始化阶段操作的主要对象是<code>vm.$options</code>，即用户自定义的配置对象，会将 <code>data</code>、<code>props</code>、<code>computed</code>、<code>watch</code> 设置为 <mark>响应式对象</mark> ，另外为了方便用户的操作，将配置项中的部分内容挂载到组件实例上。</p><p><code>vm._data</code></p><p><code>vm._props</code></p><p><code>vm._computedWatchers</code></p><p><code>vm[key]=methods[key]</code></p><figure><img src="`+p+`" alt="observer.jpg" tabindex="0" loading="lazy"><figcaption>observer.jpg</figcaption></figure><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_data</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;"> typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;function&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> data</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {};</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">proxy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`_data\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 代理到组件属性</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">observe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* asRootData */</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 添加响应式</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> dataDef</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">dataDef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">defineProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">prototype</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;$data&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">dataDef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><p>在 Vue 的设计中，<code>_</code> 开头的属性被认为是私有的，可能会修改，而 <code>$</code> 开头的属性则被认为是内部的，可以被外部调用但不应被外部赋值。为了保护 <code>_data</code>，不让外部直接操作，所以通过 <code>Object.defineProperty</code> 来创建 <code>$data</code>，只允许获取 <code>_data</code>，而无法设置它。</p><figure><img src="`+d+'" alt="image-20240316094656477" tabindex="0" loading="lazy"><figcaption>image-20240316094656477</figcaption></figure><h2 id="四、props" tabindex="-1"><a class="header-anchor" href="#四、props"><span>四、props</span></a></h2><h3 id="_1-子组件获取传入的props数据" tabindex="-1"><a class="header-anchor" href="#_1-子组件获取传入的props数据"><span>1. 子组件获取传入的<code>props</code>数据</span></a></h3><p>在执行父组件的<code>render</code>函数时，会为子组件创建组件占位符 VNode，此时会根据子组件中<code>props</code>的定义从组件标签的属性中匹配传入的数据，并存储在组件占位符 VNode 中。</p><figure><img src="'+r+`" alt="image-20230922184232782" tabindex="0" loading="lazy"><figcaption>image-20230922184232782</figcaption></figure><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> value</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> validateProp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">propsOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">propsData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">defineReactive</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">proxy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`_props\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> propsDef</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">propsDef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">defineProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">prototype</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;$props&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">propsDef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><figure><img src="`+c+'" alt="image-20240316153703286" tabindex="0" loading="lazy"><figcaption>image-20240316153703286</figcaption></figure><h3 id="_2-props-的初始化" tabindex="-1"><a class="header-anchor" href="#_2-props-的初始化"><span>2. props 的初始化</span></a></h3><figure><img src="'+o+`" alt="initprops.jpg" tabindex="0" loading="lazy"><figcaption>initprops.jpg</figcaption></figure><h3 id="_3-props-更新" tabindex="-1"><a class="header-anchor" href="#_3-props-更新"><span>3. props 更新</span></a></h3><p>初始化子组件的 Vue 实例时，通过<code>Object.defineProperty</code>给传入的<code>prop</code>数据添加拦截，如果传入的是一个对象类型，由于父组件已经对对象的属性添加了拦截，所以不会再次在子组件添加拦截。</p><p>和<code>data</code>的区别就是，<code>data</code>中的属性如果不是基本数据类型会为这个属性创建<code>Observer</code>实例；而<code>props</code>的数据不会；有一种情况除外，就是<code>prop</code>默认值是对象类型，会给这个默认值创建<code>Observer</code>实例。</p><blockquote><p><mark>注意</mark> ：当父组件传递给子组件的 prop 是一个固定值而不是绑定值时，例如 <code>msg=&quot;hello&quot;</code>，Vue 并不会检测到这个 prop 数据的变化。</p><p>Vue 的响应式系统只会追踪和响应通过 <mark>数据绑定</mark> 传递的 prop 数据的变化。对于直接传递的固定值，Vue 认为它是静态的，不会进行追踪和更新。</p></blockquote><p>接下来从两个方面分别说一下依赖收集和派发更新</p><ul><li>传给子组件的是基本数据类型</li><li>传给子组件的是对象</li></ul><h4 id="传给子组件的是基本数据类型" tabindex="-1"><a class="header-anchor" href="#传给子组件的是基本数据类型"><span>传给子组件的是基本数据类型</span></a></h4><p>父组件创建 VNode 时，收集当前 Render Watcher 到响应式属性的<code>dep.subs</code>中。创建 子组件 VNode 时，也会收集当前 Render Watcher 到<code>prop</code>数据的<code>dep.subs</code>中。</p><p>当父组件修改数据时，触发父组件的视图更新，获取最新的<code>prop</code>数据；在创建父组件 DOM 树的过程中，赋值给子组件的<code>vm._props</code>；从而被<code>prop</code>数据的<code>setter</code>捕获，触发子组件视图更新。</p><p><mark>也就是说，如果传给子组件的是基本数据类型，他们的更新原理是父组件驱动子组件更新</mark></p><h4 id="传给子组件的是对象" tabindex="-1"><a class="header-anchor" href="#传给子组件的是对象"><span>传给子组件的是对象</span></a></h4><p>父组件创建 VNode 时，收集当前 Render Watcher 到响应式属性的<code>dep.subs</code>中。创建 子组件 VNode 时，也会收集当前 Render Watcher 到<code>prop</code>数据的<code>dep.subs</code>中。和上面不同的是，当子组件使用的是<code>prop</code>数据的内部属性时，会将 Render Watcher 添加到父组件对应内部属性的<code>dep.subs</code>中。</p><p>当父组件修改属性的内部属性时，不会触发父组件更新，因为父组件没有使用这个内部属性，而使用的是整个对象。但是会触发子组件更新，因为子组件的 Render Watcher 被收集到了这个内部属性的<code>dep.subs</code>里面了。</p><p><mark>也就是说如果传给子组件的是一个对象，并且子组件使用了这个内部属性，子组件的 Render Watcher 会被这个内部属性的 dep.subs 收集</mark></p><p>如果父组件直接修改这个对象的引用，则和传入基本数据类型的更新流程一致。</p><h2 id="五、computed" tabindex="-1"><a class="header-anchor" href="#五、computed"><span>五、computed</span></a></h2><h3 id="_1-初始化" tabindex="-1"><a class="header-anchor" href="#_1-初始化"><span>1. 初始化</span></a></h3><h4 id="组件computed的初始化" tabindex="-1"><a class="header-anchor" href="#组件computed的初始化"><span>组件<code>computed</code>的初始化</span></a></h4><p>对于组件<code>computed</code>的初始化，就是在创建组件构造函数（ <mark>vue.extend</mark> ）时，通过<code>Object.defineProperty</code>方法将组件中所有计算属性添加到 <mark>组件构造函数的原型对象</mark> 上，并设置存取描述符。</p><blockquote><p>与<code>data</code>和 <code>props</code>不同，同一个构造函数不同的组件实例之间<code>computed</code>属性是不会变的，所以将<code>computed</code>定义在了构造函数的原型对象上，而<code>data</code>和<code>props</code>则定义在具体的组件实例上。</p></blockquote><p>当创建组件实例时，为每个计算属性创建一个<code>Computed Watcher</code>，并将计算属性复制给<code>Watcher</code>实例的<code>getter</code>属性（ <mark>initComputed</mark> ）；并且开发环境下会判断<code>computed</code>中的<code>key</code>和<code>data</code>、<code>props</code>中的<code>key</code>是否重复。</p><blockquote><p>将所有创建的<code>watcher</code>放在<code>vm._computedWatchers</code></p></blockquote><h4 id="根实例computed的初始化" tabindex="-1"><a class="header-anchor" href="#根实例computed的初始化"><span>根实例<code>computed</code>的初始化</span></a></h4><p>对于根实例<code>computed</code>的初始化，就比较简单了，就是获取计算属性，并给<code>computed</code>的每个<code>key</code>创建一个<code>Computed Watcher</code>，通过<code>Object.defineProperty</code>方法将所有计算属性挂载到组件实例上，并设置存取描述符。</p><h4 id="computed-watcher-和-render-watcher的区别" tabindex="-1"><a class="header-anchor" href="#computed-watcher-和-render-watcher的区别"><span><code>Computed Watcher</code> 和 <code>Render Watcher</code>的区别</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Watcher类内部代码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lazy</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> !!</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lazy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dirty</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lazy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lazy</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> undefined</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre></div><ul><li><p><code>Computed Watcher</code>的<code>lazy</code>为<code>true</code>，并且<code>dirty</code>也为<code>true</code>；</p></li><li><p>因为 <code>lazy</code>为<code>true</code>，所以在创建<code>Computed Watcher</code>过程中并不会执行<code>this.get()</code> 方法；也就不会立即获取计算属性的返回值。</p></li></ul><figure><img src="`+g+`" alt="image-20240316161744870" tabindex="0" loading="lazy"><figcaption>image-20240316161744870</figcaption></figure><h3 id="_2-响应" tabindex="-1"><a class="header-anchor" href="#_2-响应"><span>2. 响应</span></a></h3><h4 id="依赖收集" tabindex="-1"><a class="header-anchor" href="#依赖收集"><span>依赖收集</span></a></h4><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createComputedGetter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> computedGetter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> watcher</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_computedWatchers</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_computedWatchers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">watcher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 只做一次依赖收集</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">watcher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dirty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // dirty变为false，执行定义的get函数，收集依赖</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        watcher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">evaluate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Dep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 将render watcher 添加到依赖属性的dep中，当依赖属性修改后，通过render watcher的get方法去触发组件更新</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        watcher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">depend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 之前获取的计算属性的值保存在watcher.value中</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> watcher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将<code>Computed Watcher</code>添加到响应式变量的<code>dep.subs</code>中，第一次获取计算属性时，执行上述函数收集依赖（当响应式数据变化时可以更新计算属性）</li><li>将组件的<code>Render Watcher</code>添加到该计算属性所有依赖属性的<code>dep.subs</code>中（当响应式数据变化时可以更新当前组件）</li></ul><h4 id="通知更新" tabindex="-1"><a class="header-anchor" href="#通知更新"><span>通知更新</span></a></h4><p>当计算属性依赖的响应式属性修改时，会触发依赖属性的<code>setter</code>方法通知所有<code>Watcher</code>更新，其中就包括<code>Computed Watcher</code>和<code>Render Watcher</code>；调用<code>Computed Watcher</code>的<code>update</code>方法将<code>dirty</code>设为<code>true</code>。而<code>Render Watcher</code>会执行<code>Watcher</code>实例的<code>run</code>方法，从而重新执行组件的<code>render</code>函数，获取计算属性的值，从而更新计算属性的返回值并返回。</p><h2 id="六、watch" tabindex="-1"><a class="header-anchor" href="#六、watch"><span>六、watch</span></a></h2><h3 id="_1-初始化-1" tabindex="-1"><a class="header-anchor" href="#_1-初始化-1"><span>1. 初始化</span></a></h3><p><code>watch</code>的初始化过程最终目的就是给每个<code>watch</code>创建一个 <code>User Watcher</code>，在创建过程中会对被监听的属性做依赖收集。</p><h3 id="_2-响应-1" tabindex="-1"><a class="header-anchor" href="#_2-响应-1"><span>2. 响应</span></a></h3><h4 id="依赖收集-1" tabindex="-1"><a class="header-anchor" href="#依赖收集-1"><span>依赖收集</span></a></h4><p>在初始化过程中会为每个<code>watch</code>创建一个<code>User Watcher</code>，而创建过程中会对被监听属性做依赖收集</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> watcher</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Watcher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">expOrFn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">cb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// vm 组件实例</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// expOrFn 被监听的属性名（xxx、&#39;xxx.yyy&#39;）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// cb 回调函数</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// options { user: true, deep: [自定义配置项], async: [自定义配置项] }</span></span></code></pre></div><p>实例化一个<code>Watcher</code>时会判断<code>expOrFn</code>参数的数据类型，对于<code>User Watcher</code>而言，<code>expOrFn</code>就是被监听的属性名，是一个字符串，所以会执行<code>parsePath</code>方法，根据<code>.</code>将字符串切割成字符串数组，并返回一个函数，这个函数会赋值给<code>User Watcher</code>的<code>getter</code>属性；函数内部会依次获取数组中所有元素对应的属性值并返回该属性值。</p><p>假设被监听的属性名是<code>a.b.c</code>，则此函数会依次获取<code>this.a</code>、<code>this.a.b</code>、<code>this.a.b.c</code>的属性值，从而触发被监听属性的<code>getter</code>方法，将<code>User Watcher</code>添加到此属性的<code>dep.subs</code>中。</p><h4 id="通知更新-1" tabindex="-1"><a class="header-anchor" href="#通知更新-1"><span>通知更新</span></a></h4><p>当修改被监听属性的属性值时，触发属性的<code>setter</code>，通知 <code>dep.subs</code>中所有 <code>Watcher</code> 更新，执行<code>watcher.update</code>方法</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">active</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> value</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            value</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> !==</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ||</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            isObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">||</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">deep</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 当添加自定义 watcher 的时候能在回调函数的参数中拿到新旧值的原因</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> oldValue</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> value</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">oldValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                    handleError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`callback for watcher &quot;</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">expression</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">oldValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于<code>User Watcher</code>的<code>run</code>方法，首先会调用<code>this.get()</code>重新让被监听属性做依赖收集，并获取最新值；如果最新值与旧老值不相等，调用回调函数，并将新旧值作为参数传入。</p><h3 id="_3-computed-和-watch-的区别" tabindex="-1"><a class="header-anchor" href="#_3-computed-和-watch-的区别"><span>3. Computed 和 watch 的区别</span></a></h3><h4 id="computed" tabindex="-1"><a class="header-anchor" href="#computed"><span>computed</span></a></h4><ul><li>本质是一个具备缓存的 Watcher，只有依赖属性发生变化时才会更新视图，而且结果是在下次使用时获取</li><li>不支持异步，当<code>computed</code>内有异步操作时无效，无法监听数据的变化</li><li>当需要进行数值计算，并且依赖于其它数据时，应该使用<code>computed</code>，因为可以利用<code>computed</code>的缓存特性，避免每次获取值时都要重新计算</li></ul><h4 id="watch" tabindex="-1"><a class="header-anchor" href="#watch"><span>watch</span></a></h4><ul><li>没有缓存性，更多的是观察的作用，某些数据变化时会执行回调</li><li>watch 支持异步；可以设置异步返回前的中间状态</li><li>可以在初始化时执行回调</li><li>可以深度监听对象属性</li><li>可以设置回调的执行时机，通过设置<code>sync</code>属性可以在当前队列执行，默认是下一队列</li><li>通过<code>vm.$watch</code>注册的监听，会返回一个<code>unWatch</code>函数，调用该函数可以取消监听</li></ul><h3 id="_4-computed-的响应原理" tabindex="-1"><a class="header-anchor" href="#_4-computed-的响应原理"><span>4. computed 的响应原理</span></a></h3><p>在初始化阶段，会为每个计算属性创建一个<code>Computed Watcher</code>，通过<code>Object.defineProperty</code>将所有计算属性添加到<code>组件实例 / 组件构造函数的原型对象</code>上，并为所有计算属性添加存取描述符。</p><p>当获取计算属性时，触发计算属性的<code>getter</code>，计算<code>computed</code>的值，并将<code>dirty</code>置为<code>false</code>，这样做的目的是再次获取计算属性时直接返回缓存值；在计算<code>computed</code>值的过程中会将<code>Computed Watcher</code>、<code>Render Watcher</code>添加到依赖属性的<code>Dep</code>中</p><p>当依赖属性发生变化会触发<code>Computed Watcher</code>的更新，将<code>dirty</code>置为<code>true</code>，在下次获取计算属性时，会重新计算<code>computed</code>的值。也会触发当前<code>Render Watcher</code>的更新，从而获取最新的计算属性的值</p><h3 id="_5-watch-的响应原理" tabindex="-1"><a class="header-anchor" href="#_5-watch-的响应原理"><span>5. watch 的响应原理</span></a></h3><p>在初始化阶段，会为每个<code>watch</code>创建一个<code>User Watcher</code>，如果<code>watch</code>的<code>immediate</code>为<code>true</code>，会马上执行一次回调；创建<code>User Watcher</code>过程中会获取一次被监听属性的值，从而触发被监听属性的<code>getter</code>方法，将<code>User Watcher</code>添加到被监听属性的<code>Dep</code>实例中。</p><p>当被监听属性发生改变时，通知<code>User Watcher</code>更新，如果<code>watch</code>的<code>sync</code>为<code>true</code>，会马上执行<code>watch</code>的回调；否则会将<code>User Watcher</code>的<code>update</code>方法通过<code>nextTick</code>放到缓存队列中，在下一个的事件循环中，会重新获取被监听属性的属性值，并判断新旧值是否相等、是否设置了<code>deep</code>为<code>true</code>、被监听属性是否是对象类型，如果成立就执行回调。</p><h2 id="七、methods" tabindex="-1"><a class="header-anchor" href="#七、methods"><span>七、methods</span></a></h2><p><code>initMethods</code>时直接遍历所有定义的 method，将其挂载到组件实例上。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;"> typeof</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> methods</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">!==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;function&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> noop</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> bind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">methods</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><figure><img src="`+B+'" alt="image-20240316154022019" tabindex="0" loading="lazy"><figcaption>image-20240316154022019</figcaption></figure><h2 id="八、patch" tabindex="-1"><a class="header-anchor" href="#八、patch"><span>八、patch</span></a></h2><figure><img src="'+A+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当组件挂载时，创建<code>Render Watcher</code>，执行<code>render</code>函数获取组件的 <mark>渲染 VNode</mark> ；然后执行<code>_update</code>函数，<code>_update</code>函数内执行<code>patch</code>函数创建节点并插入到 DOM 中（<code>vm.$el = vm.__patch__()</code>）；如果组件中有子组件，调用组件占位符 VNode 的<code>init</code>钩子函数，为子组件创建<code>Vue</code>实例，执行子组件的<code>$mount</code>方法创建<code>Render Watcher</code>，并对子组件执行上述流程。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">prevVnode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 首次渲染时</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$el</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">__patch__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$el</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">vnode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">hydrating</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* removeOnly */</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 新的dom节点</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 更新页面时</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$el</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">__patch__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">prevVnode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">vnode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>等子组件执行完成之后将子组件的 DOM 树挂载到组件占位符 VNode 的<code>elm</code>上，并将其插入到父元素中或相邻元素前后。这样父子组件的 DOM 树就关联起来了。</p><figure><img src="`+y+'" alt="patch.jpg" tabindex="0" loading="lazy"><figcaption>patch.jpg</figcaption></figure><figure><img src="'+F+'" alt="image-20240324215104187" tabindex="0" loading="lazy"><figcaption>image-20240324215104187</figcaption></figure><p>先有 vue 的组件实例，然后生成整个页面的虚拟 dom 树（此时子组件对应的是占位符 vnode），当进行 diff 操作时，创建子组件，调用 init 钩子函数，根据占位符 vnode 的信息（<code>vnode.componentOptions.Ctor</code>），生成子组件实例赋值给<code>vnode.componentInstance</code>，并执行子组件的挂载，在<code>vm._update</code>的阶段会将生成的新的<code>vnode</code>挂载到<code>vm._node</code>，在根据新的 vnode 生成 dom 树后将其挂载到<code>vnode.elm</code>。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>vm --&gt; vm._vnode --&gt; vm._vnode.children[i] --&gt; vm._vnode.children[i].componentInstance</span></span></code></pre></div><h2 id="九、总览" tabindex="-1"><a class="header-anchor" href="#九、总览"><span>九、总览</span></a></h2><figure><img src="'+u+'" alt="new vue" tabindex="0" loading="lazy"><figcaption>new vue</figcaption></figure><h3 id="_1-options" tabindex="-1"><a class="header-anchor" href="#_1-options"><span>1. $options</span></a></h3><figure><img src="'+m+`" alt="image-20240316152343097" tabindex="0" loading="lazy"><figcaption>image-20240316152343097</figcaption></figure><ul><li><code>parent</code>:当前实例的父组件，帮助<code>initLifecycle</code>确认组件之间的父子关系（<code>$parent、$children、$root</code>）</li><li><code>propsData</code>：父组件实际传递的<code>props</code>值，帮助<code>initProps</code>定义 prop 的响应式（<code>vm.prop</code>）</li><li><code>_componentTag</code>：当前组件的名称</li><li><code>_parentListeners</code>：父组件注册的自定义事件，提供了可供用户访问的公共属性<code>vm.$listeners</code>（<code>initRender</code>）</li><li><code>_parentVnode</code>：当前组件的占位符节点，提供了可供用户访问的公共属性<code>vm.$vnode</code>（<code>initRender</code>）</li><li><code>_propKeys</code>：储存所有 <code>props</code> 的 <code>key</code> 值。当一个 prop 发生变化时，Vue 需要知道哪些组件需要更新。而这个 <code>_propKeys</code> 数组就可以很好地帮助我们找到哪些组件是依赖于这个 prop 的。</li></ul><blockquote><p><code>initInternalComponent</code> 初始化组件的配置项</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> initInternalComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> opts</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$options</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 组件配置项</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> parentVnode</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_parentVnode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 组件占位符vnode</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  opts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">parent</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">parent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 父组件实例</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  opts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_parentVnode</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> parentVnode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> vnodeComponentOptions</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> parentVnode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">componentOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 占位符节点的配置项</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  opts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">propsData</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> vnodeComponentOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">propsData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  opts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_parentListeners</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> vnodeComponentOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">listeners</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  opts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_renderChildren</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> vnodeComponentOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">children</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  opts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_componentTag</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> vnodeComponentOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    opts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">render</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    opts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">staticRenderFns</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">staticRenderFns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="_2-实例属性" tabindex="-1"><a class="header-anchor" href="#_2-实例属性"><span>2. 实例属性</span></a></h3><figure><img src="`+v+'" alt="image-20240316201127650" tabindex="0" loading="lazy"><figcaption>image-20240316201127650</figcaption></figure><ul><li><p><code>$parent、$root、$children、$vnode、$listeners</code>：见上节</p></li><li><p><code>$attrs</code>：组件占位符节点<code>data.attrs</code>的供用户访问版</p></li><li><p><code>$createElement</code>：<code>(a, b, c, d) =&gt; createElement(vm, a, b, c, d, true)</code></p></li><li><p><code>$slots</code>：用来访问父组件传递的 <mark>静态插槽</mark> ，包含对应插槽名称的 vnode 节点数组</p><blockquote><p>上述 api 均来自<code>initRender</code></p></blockquote></li><li><p><code>$scopedSlots</code>：用来访问 <mark>作用域插槽</mark> ，包含一个返回相应 VNode 的函数。（<code>vm._render</code>）</p><ul><li>自 2.6.0 后，所有的 <code>$slots</code> 都会作为函数暴露在 <code>$scopedSlots</code> 中</li></ul></li></ul><h3 id="_3-虚拟-dom" tabindex="-1"><a class="header-anchor" href="#_3-虚拟-dom"><span>3. 虚拟 dom</span></a></h3><p>渲染 vnode，即 vnode 是一个树形结构，children 中包含着它的子节点。</p><figure><img src="'+C+'" alt="image-20240318102542437" tabindex="0" loading="lazy"><figcaption>image-20240318102542437</figcaption></figure><ul><li><code>compomnentInstance和componentOptions</code>是组件占位符特有的属性</li><li><code>child</code>指向 vnode 的<code>compomnentInstance</code>，所以也是当 vnode 为组件占位符时才有值</li></ul><h2 id="十、单文件组件" tabindex="-1"><a class="header-anchor" href="#十、单文件组件"><span>十、单文件组件</span></a></h2><p>当我们使用 webpack 或者 vue-cli 进行单文件组件的开发时，使用 vue-loader 来进行解析，具体过程可以参考<a href="https://juejin.cn/post/7028410359207690247" target="_blank" rel="noopener noreferrer">一文读懂 vue-loader 原理 </a></p>',125)]))}const x=s(E,[["render",b],["__file","vuejs2_1.html.vue"]]),V=JSON.parse('{"path":"/source_code/vue2/vuejs2_1.html","title":"Vue2源码（功能篇）","lang":"zh-CN","frontmatter":{"title":"Vue2源码（功能篇）","star":true,"order":1,"category":["源码解析"],"tag":["vue"],"description":"一、组件挂载 image-20230922182344463image-20230922182344463 二、生成 vnode _render函数的总流程大致如下： render2.jpgrender2.jpg 1. 组件占位符 VNode 数据结构 假设组件标签如下 组件占位符 VNode 里面存储子组件 Vue 实例的构造函数、以及存储传给子组件...","head":[["meta",{"property":"og:url","content":"https://github.com/source_code/vue2/vuejs2_1.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"Vue2源码（功能篇）"}],["meta",{"property":"og:description","content":"一、组件挂载 image-20230922182344463image-20230922182344463 二、生成 vnode _render函数的总流程大致如下： render2.jpgrender2.jpg 1. 组件占位符 VNode 数据结构 假设组件标签如下 组件占位符 VNode 里面存储子组件 Vue 实例的构造函数、以及存储传给子组件..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-03T11:20:13.000Z"}],["meta",{"property":"article:tag","content":"vue"}],["meta",{"property":"article:modified_time","content":"2024-12-03T11:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue2源码（功能篇）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-03T11:20:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、组件挂载","slug":"一、组件挂载","link":"#一、组件挂载","children":[]},{"level":2,"title":"二、生成 vnode","slug":"二、生成-vnode","link":"#二、生成-vnode","children":[{"level":3,"title":"1. 组件占位符 VNode 数据结构","slug":"_1-组件占位符-vnode-数据结构","link":"#_1-组件占位符-vnode-数据结构","children":[]},{"level":3,"title":"2. 渲染 VNode 数据结构","slug":"_2-渲染-vnode-数据结构","link":"#_2-渲染-vnode-数据结构","children":[]}]},{"level":2,"title":"三、data","slug":"三、data","link":"#三、data","children":[]},{"level":2,"title":"四、props","slug":"四、props","link":"#四、props","children":[{"level":3,"title":"1. 子组件获取传入的props数据","slug":"_1-子组件获取传入的props数据","link":"#_1-子组件获取传入的props数据","children":[]},{"level":3,"title":"2. props 的初始化","slug":"_2-props-的初始化","link":"#_2-props-的初始化","children":[]},{"level":3,"title":"3. props 更新","slug":"_3-props-更新","link":"#_3-props-更新","children":[]}]},{"level":2,"title":"五、computed","slug":"五、computed","link":"#五、computed","children":[{"level":3,"title":"1. 初始化","slug":"_1-初始化","link":"#_1-初始化","children":[]},{"level":3,"title":"2. 响应","slug":"_2-响应","link":"#_2-响应","children":[]}]},{"level":2,"title":"六、watch","slug":"六、watch","link":"#六、watch","children":[{"level":3,"title":"1. 初始化","slug":"_1-初始化-1","link":"#_1-初始化-1","children":[]},{"level":3,"title":"2. 响应","slug":"_2-响应-1","link":"#_2-响应-1","children":[]},{"level":3,"title":"3. Computed 和 watch 的区别","slug":"_3-computed-和-watch-的区别","link":"#_3-computed-和-watch-的区别","children":[]},{"level":3,"title":"4. computed 的响应原理","slug":"_4-computed-的响应原理","link":"#_4-computed-的响应原理","children":[]},{"level":3,"title":"5. watch 的响应原理","slug":"_5-watch-的响应原理","link":"#_5-watch-的响应原理","children":[]}]},{"level":2,"title":"七、methods","slug":"七、methods","link":"#七、methods","children":[]},{"level":2,"title":"八、patch","slug":"八、patch","link":"#八、patch","children":[]},{"level":2,"title":"九、总览","slug":"九、总览","link":"#九、总览","children":[{"level":3,"title":"1. $options","slug":"_1-options","link":"#_1-options","children":[]},{"level":3,"title":"2. 实例属性","slug":"_2-实例属性","link":"#_2-实例属性","children":[]},{"level":3,"title":"3. 虚拟 dom","slug":"_3-虚拟-dom","link":"#_3-虚拟-dom","children":[]}]},{"level":2,"title":"十、单文件组件","slug":"十、单文件组件","link":"#十、单文件组件","children":[]}],"git":{"createdTime":1710854012000,"updatedTime":1733224813000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":5}]},"readingTime":{"minutes":14.92,"words":4476},"filePathRelative":"source_code/vue2/vuejs2_1.md","localizedDate":"2024年3月19日","excerpt":"<h2>一、组件挂载</h2>\\n<figure><figcaption>image-20230922182344463</figcaption></figure>\\n<h2>二、生成 vnode</h2>","autoDesc":true}');export{x as comp,V as data};
