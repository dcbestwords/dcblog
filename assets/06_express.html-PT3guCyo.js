import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,e as p,a as s,b as e,d as t,o as l,r as i}from"./app-DWSfyW7-.js";const u="/dcblog/assets/Middleware-m_DDsLq5.jpg",r={},d={href:"http://www.expressjs.com.cn/en/4x/api.html#res.download",target:"_blank",rel:"noopener noreferrer"},k={href:"http://www.expressjs.com.cn/en/4x/api.html#res.end",target:"_blank",rel:"noopener noreferrer"},v={href:"http://www.expressjs.com.cn/en/4x/api.html#res.json",target:"_blank",rel:"noopener noreferrer"},m={href:"http://www.expressjs.com.cn/en/4x/api.html#res.jsonp",target:"_blank",rel:"noopener noreferrer"},b={href:"http://www.expressjs.com.cn/en/4x/api.html#res.redirect",target:"_blank",rel:"noopener noreferrer"},g={href:"http://www.expressjs.com.cn/en/4x/api.html#res.render",target:"_blank",rel:"noopener noreferrer"},h={href:"http://www.expressjs.com.cn/en/4x/api.html#res.send",target:"_blank",rel:"noopener noreferrer"},x={href:"http://www.expressjs.com.cn/en/4x/api.html#res.sendFile",target:"_blank",rel:"noopener noreferrer"},f={href:"http://www.expressjs.com.cn/en/4x/api.html#res.sendStatus",target:"_blank",rel:"noopener noreferrer"};function j(_,n){const a=i("ExternalLinkIcon");return l(),c("div",null,[n[19]||(n[19]=p(`<h1 id="express" tabindex="-1"><a class="header-anchor" href="#express"><span>express</span></a></h1><h2 id="一、express-介绍" tabindex="-1"><a class="header-anchor" href="#一、express-介绍"><span>一、express 介绍</span></a></h2><blockquote><p>express 是一个基于 Node.js 平台的极简、灵活的 WEB 应用开发框架，官方网址： https://www.expressjs.com.cn/</p></blockquote><p>简单来说，express 是一个封装好的工具包，封装了很多功能，便于我们开发 WEB 应用(HTTP 服务)</p><h2 id="二、express-使用" tabindex="-1"><a class="header-anchor" href="#二、express-使用"><span>二、express 使用</span></a></h2><h3 id="_1-express-下载" tabindex="-1"><a class="header-anchor" href="#_1-express-下载"><span>1. express 下载</span></a></h3><p>express 本身是一个 npm 包，所以可以通过 npm 安装</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> init
<span class="token function">npm</span> i express
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-express-初体验" tabindex="-1"><a class="header-anchor" href="#_2-express-初体验"><span>2. express 初体验</span></a></h3><p>大家可以按照这个步骤进行操作：</p><ol><li>创建 JS 文件，键入如下代码</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//1. 导入 express</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2. 创建应用对象</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//3. 创建路由规则</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;hello express server&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//4. 监听端口 启动服务</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务已经启动, 端口监听为 3000...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>命令行下执行该脚本</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">node</span> <span class="token operator">&lt;</span>文件名<span class="token operator">&gt;</span>
<span class="token comment"># 或者</span>
nodemon <span class="token operator">&lt;</span>文件名<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>然后在浏览器就可以访问 http://127.0.0.1:3000/home 👌</li></ol><h2 id="三、express-路由" tabindex="-1"><a class="header-anchor" href="#三、express-路由"><span>三、express 路由</span></a></h2><h3 id="_1-什么是路由" tabindex="-1"><a class="header-anchor" href="#_1-什么是路由"><span>1. 什么是路由</span></a></h3><blockquote><p>官方定义： <span style="color:red;">路由确定了应用程序如何响应客户端对特定端点的请求</span></p></blockquote><h3 id="_2-路由的使用" tabindex="-1"><a class="header-anchor" href="#_2-路由的使用"><span>2. 路由的使用</span></a></h3><p>一个路由的组成有 <code>请求方法</code>， <code>路径</code> 和 <code>回调函数</code> 组成</p><p>express 中提供了一系列方法，可以很方便的使用路由，使用格式如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token operator">&lt;</span>method<span class="token operator">&gt;</span><span class="token punctuation">(</span>path，callback<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>代码示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//导入 express</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//创建应用对象</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//创建 get 路由</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;网站首页&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//首页路由</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;我才是真正的首页&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//创建 post 路由</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;登录成功&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//匹配所有的请求方法</span>
app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">&#39;/search&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;1 秒钟为您找到相关结果约 100,000,000 个&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//自定义 404 路由</span>
app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//监听端口 启动服务</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务已经启动, 端口监听为 3000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>路径的匹配可以使用正则表达式</li></ul><h3 id="_3-获取请求参数" tabindex="-1"><a class="header-anchor" href="#_3-获取请求参数"><span>3. 获取请求参数</span></a></h3><p>express 框架封装了一些 API 来方便获取请求报文中的数据，并且兼容原生 HTTP 模块的获取方式</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//导入 express</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//创建应用对象</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//获取请求的路由规则</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/request&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// 1. 获取报文的方式与原生 HTTP 获取方式是兼容的</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>httpVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
    <span class="token comment">// 2. express 独有的获取报文的方式</span>
    <span class="token comment">// 获取路径</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">)</span>
    <span class="token comment">//获取查询字符串</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 『相对重要』对象形式返回所有的查询字符串</span>
	<span class="token comment">// 获取指定的请求头</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;host&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;请求报文的获取&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//启动服务</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;启动成功....&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-获取路由参数" tabindex="-1"><a class="header-anchor" href="#_4-获取路由参数"><span>4. 获取路由参数</span></a></h3><p>路由参数指的是 <span style="color:red;">URL 路径中的参数（数据）</span></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/:id.html&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;商品详情, 商品 id 为&#39;</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、express-响应设置" tabindex="-1"><a class="header-anchor" href="#四、express-响应设置"><span>四、express 响应设置</span></a></h2><p>express 框架封装了一些 API 来方便给客户端响应数据，并且兼容原生 HTTP 模块的获取方式</p>`,33)),s("table",null,[n[18]||(n[18]=s("thead",null,[s("tr",null,[s("th",null,"方法"),s("th",null,"描述")])],-1)),s("tbody",null,[s("tr",null,[s("td",null,[s("a",d,[n[0]||(n[0]=e("res.download()")),t(a)])]),n[1]||(n[1]=s("td",null,"提示要下载的文件。",-1))]),s("tr",null,[s("td",null,[s("a",k,[n[2]||(n[2]=e("res.end（）")),t(a)])]),n[3]||(n[3]=s("td",null,"结束响应过程。",-1))]),s("tr",null,[s("td",null,[s("a",v,[n[4]||(n[4]=e("res.json（）")),t(a)])]),n[5]||(n[5]=s("td",null,"发送JSON响应。",-1))]),s("tr",null,[s("td",null,[s("a",m,[n[6]||(n[6]=e("res.jsonp（）")),t(a)])]),n[7]||(n[7]=s("td",null,"发送带有JSONP支持的JSON响应。",-1))]),s("tr",null,[s("td",null,[s("a",b,[n[8]||(n[8]=e("res.redirect（）")),t(a)])]),n[9]||(n[9]=s("td",null,"重定向请求。",-1))]),s("tr",null,[s("td",null,[s("a",g,[n[10]||(n[10]=e("res.render（）")),t(a)])]),n[11]||(n[11]=s("td",null,"渲染视图模板。",-1))]),s("tr",null,[s("td",null,[s("a",h,[n[12]||(n[12]=e("res.send（）")),t(a)])]),n[13]||(n[13]=s("td",null,"发送各种类型的响应。",-1))]),s("tr",null,[s("td",null,[s("a",x,[n[14]||(n[14]=e("res.sendFile（）")),t(a)])]),n[15]||(n[15]=s("td",null,"将文件作为八位字节流发送。",-1))]),s("tr",null,[s("td",null,[s("a",f,[n[16]||(n[16]=e("res.sendStatus（）")),t(a)])]),n[17]||(n[17]=s("td",null,"设置响应状态代码，并将其字符串表示形式发送为响应正文。",-1))])])]),n[20]||(n[20]=p(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//获取请求的路由规则</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/response&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  	<span class="token comment">//1. express 中设置响应的方式兼容 HTTP 模块的方式</span>
  	res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>
  	res<span class="token punctuation">.</span>statusMessage <span class="token operator">=</span> <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">;</span>
  	res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;xyz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;响应体&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token comment">//2. express 的响应方法</span>
  	res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置响应状态码</span>
  	res<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;yyy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置响应头</span>
  	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;中文响应不乱码&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置响应体</span>
  	<span class="token comment">//连贯操作</span>
  	res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;yyy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;你好朋友&#39;</span><span class="token punctuation">)</span>
  	
    <span class="token comment">//3. 其他响应</span>
  	res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">&#39;http://atguigu.com&#39;</span><span class="token punctuation">)</span><span class="token comment">//重定向</span>
  	res<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span><span class="token string">&#39;./package.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//下载响应</span>
  	res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//响应 JSON</span>
  	res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">&#39;/home.html&#39;</span><span class="token punctuation">)</span> <span class="token comment">//响应文件内容</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、express-中间件" tabindex="-1"><a class="header-anchor" href="#五、express-中间件"><span>五、express 中间件</span></a></h2><h3 id="_1-什么是中间件" tabindex="-1"><a class="header-anchor" href="#_1-什么是中间件"><span>1. 什么是中间件</span></a></h3><p><code>中间件（Middleware）本质是一个回调函数</code>，一个中间件处理完，再传递给下一个中间件。App实例在运行过程中，会调用一系列的中间件。每个中间件可以从App实例，接收三个参数，依次为<code>request对象（代表HTTP请求）</code>、<code>response对象（代表HTTP回应）</code>，<code>next回调函数（代表下一个中间件）</code>。每个中间件都可以对HTTP请求（request对象）进行加工，并且决定是否调用next方法，将request对象再传给下一个中间件。</p><h3 id="_2-中间件的作用" tabindex="-1"><a class="header-anchor" href="#_2-中间件的作用"><span>2. 中间件的作用</span></a></h3><p><code>中间件的作用</code> 就是 <code>使用函数封装公共操作，简化代码</code></p><h3 id="_3-中间件的类型" tabindex="-1"><a class="header-anchor" href="#_3-中间件的类型"><span>3. 中间件的类型</span></a></h3><ul><li>全局中间件</li><li>路由中间件</li></ul><h3 id="_4-定义全局中间件" tabindex="-1"><a class="header-anchor" href="#_4-定义全局中间件"><span>4. 定义全局中间件</span></a></h3><p><code>每一个请求</code> 到达服务端之后 <code>都会执行全局中间件函数</code></p><h4 id="声明中间件函数" tabindex="-1"><a class="header-anchor" href="#声明中间件函数"><span>声明中间件函数</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">recordMiddleware</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//实现功能代码</span>
  <span class="token comment">//.....</span>
    
  <span class="token comment">//执行next函数(当如果希望执行完中间件函数之后，仍然继续执行路由中的回调函数，必须调用next)</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="08_express框架" tabindex="0" loading="lazy"><figcaption>08_express框架</figcaption></figure><p>应用中间件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>recordMiddleware<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>声明时可以直接将匿名函数传递给 <code>use</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;定义第一个中间件&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="多个全局中间件" tabindex="-1"><a class="header-anchor" href="#多个全局中间件"><span>多个全局中间件</span></a></h4><p>express 允许使用 app.use() 定义多个全局中间件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;定义第一个中间件&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;定义第二个中间件&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="定义路由中间件" tabindex="-1"><a class="header-anchor" href="#定义路由中间件"><span>定义路由中间件</span></a></h4><p>如果<span style="color:red;">只需要对某一些路由进行功能封装</span>，则就需要路由中间件</p><p>调用格式如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/路径&#39;</span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">中间件函数</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/路径&#39;</span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">中间件函数1</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">中间件函数2</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-静态资源中间件" tabindex="-1"><a class="header-anchor" href="#_5-静态资源中间件"><span>5. 静态资源中间件</span></a></h3><p>express 内置处理静态资源的中间件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//引入express框架</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//创建服务对象</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//静态资源中间件的设置，将当前文件夹下的public目录作为网站的根目录</span>
<span class="token comment">//当然这个目录中都是一些静态资源</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">&#39;./public&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">//如果访问的内容经常变化，还是需要设置路由</span>
<span class="token comment">//但是，在这里有一个问题，如果public目录下有index.html文件，单独也有index.html的路由</span>
<span class="token comment">//则谁书写在前，优先执行谁</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/index.html&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	respsonse<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;首页&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//监听端口</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;3000 端口启动....&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意事项:</p><ol><li>index.html 文件为默认打开的资源</li><li>如果静态资源与路由规则同时匹配，谁先匹配谁就响应</li><li>路由响应动态资源，静态资源中间件响应静态资源</li></ol></blockquote><h3 id="_6-获取请求体数据" tabindex="-1"><a class="header-anchor" href="#_6-获取请求体数据"><span>6. 获取请求体数据</span></a></h3><p>Express 自从 4.16.0 版本开始，内置了 body 解析，我们只需要将内置的中间件引入，就可以在req的对象上添加body。</p><p><strong>使用方法:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 解析 JSON 格式的请求体的中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 解析 querystring 格式请求体的中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>request.body</code> 来获取请求体数据</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	<span class="token comment">//获取请求体数据</span>
	<span class="token comment">//console.log(request.body);</span>
	<span class="token comment">//用户名</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
 	<span class="token comment">//密码</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>userpass<span class="token punctuation">)</span><span class="token punctuation">;</span>
  	response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;获取请求体数据&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取到的请求体数据：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>Object<span class="token operator">:</span> <span class="token keyword">null</span> prototype<span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">userpass</span><span class="token operator">:</span> <span class="token string">&#39;123456&#39;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="六、router" tabindex="-1"><a class="header-anchor" href="#六、router"><span>六、Router</span></a></h2><h3 id="_1-什么是-router" tabindex="-1"><a class="header-anchor" href="#_1-什么是-router"><span>1. 什么是 Router</span></a></h3><p>express 中的 Router 是一个完整的中间件和路由系统，可以看做是一个小型的 app 对象。</p><h3 id="_2-router-作用" tabindex="-1"><a class="header-anchor" href="#_2-router-作用"><span>2. Router 作用</span></a></h3><p>对路由进行模块化，更好的管理路由</p><h3 id="_3-router-使用" tabindex="-1"><a class="header-anchor" href="#_3-router-使用"><span>3. Router 使用</span></a></h3><p>创建独立的 JS 文件（homeRouter.js）</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//1. 导入 express</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2. 创建路由器对象</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//3. 在 router 对象身上添加路由</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;首页&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/cart&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;购物车&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//4. 暴露</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主文件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//5.引入子路由文件</span>
<span class="token keyword">const</span> homeRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./routes/homeRouter&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//6.设置和使用中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>homeRouter<span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;3000 端口启动....&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="七、ejs-模板引擎" tabindex="-1"><a class="header-anchor" href="#七、ejs-模板引擎"><span>七、EJS 模板引擎</span></a></h2><p><strong style="color:red;">在服务端进行网页与数据的拼接</strong></p><h3 id="_1-什么是模板引擎" tabindex="-1"><a class="header-anchor" href="#_1-什么是模板引擎"><span>1. 什么是模板引擎</span></a></h3><p>模板引擎是分离 <span style="color:red;">用户界面和业务数据</span> 的一种技术</p><h3 id="_2-什么是-ejs" tabindex="-1"><a class="header-anchor" href="#_2-什么是-ejs"><span>2. 什么是 EJS</span></a></h3><p>EJS 是一个高效的 Javascript 的模板引擎 官网: https://ejs.co/ 中文站： https://ejs.bootcss.com/</p><h3 id="_3-ejs-初体验" tabindex="-1"><a class="header-anchor" href="#_3-ejs-初体验"><span>3. EJS 初体验</span></a></h3><h4 id="下载安装ejs" tabindex="-1"><a class="header-anchor" href="#下载安装ejs"><span>下载安装EJS</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i ejs 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//1.引入ejs</span>
<span class="token keyword">const</span> ejs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;ejs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2.定义数据</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;王二麻子&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">//3.ejs解析模板返回结构</span>
<span class="token comment">//&lt;%= %&gt; 是ejs解析内容的标记，作用是输出当前表达式的执行结构</span>
<span class="token comment">//&quot;&lt;%= %&gt;&quot;可以直接输出变量或表达式的值，变量或表达式的值将作为一个字符串在浏览器中输出。</span>
<span class="token keyword">let</span> html <span class="token operator">=</span> ejs<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>‘<span class="token operator">&lt;</span><span class="token operator">%=</span> person<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span>’<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">person</span><span class="token operator">:</span>person<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//4.输出结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-ejs-常用语法" tabindex="-1"><a class="header-anchor" href="#_4-ejs-常用语法"><span>4. EJS 常用语法</span></a></h3><p>执行JS代码</p><div class="language-ejs line-numbers-mode" data-ext="ejs" data-title="ejs"><pre class="language-ejs"><code><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> code </span><span class="token delimiter punctuation">%&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出转义的数据到模板上</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">%=</span> code <span class="token operator">%</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出非转义的数据到模板上</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> code <span class="token operator">%</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-ejs line-numbers-mode" data-ext="ejs" data-title="ejs"><pre class="language-ejs"><code><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token string">&#39;脚本&#39;</span> 标签，用于流程控制，无输出。
<span class="token operator">&lt;</span><span class="token operator">%</span>_ 删除其前面的空格符
<span class="token operator">&lt;</span><span class="token operator">%=</span> 输出数据到模板（输出是转义 <span class="token constant">HTML</span> 标签）
<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> 输出非转义的数据到模板
<span class="token operator">&lt;</span><span class="token operator">%</span># 注释标签，不执行、不输出内容
<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">%</span> 输出字符串 <span class="token string">&#39;&lt;%&#39;</span>
</span><span class="token delimiter punctuation">%&gt;</span></span> 一般结束标签
-%&gt; 删除紧随其后的换行符
_%&gt; 将结束标签后面的空格符删除
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-在express中使用ejs" tabindex="-1"><a class="header-anchor" href="#_5-在express中使用ejs"><span>5. 在express中使用ejs</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 导入 express</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 创建应用对象</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 1. 设置模板引擎</span>
app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;view engine&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ejs&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// pug  twing</span>
<span class="token comment">// 2. 设置模板文件的存放位置</span>
<span class="token comment">// 模板文件: 具有模板语法内容的文件</span>
app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;views&#39;</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./views&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 创建路由</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 3. render 响应</span>
  <span class="token comment">// res.render(&#39;模板的文件名&#39;,&#39;数据&#39;)</span>
  <span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;home&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 4. 会去找views目录下的home.ejs文件</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 监听端口，启动服务</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务器已启动~~~~&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>views/home.ejs</code></p><div class="language-ejs line-numbers-mode" data-ext="ejs" data-title="ejs"><pre class="language-ejs"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>
    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript">title </span><span class="token delimiter punctuation">%&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="八、express脚手架" tabindex="-1"><a class="header-anchor" href="#八、express脚手架"><span>八、express脚手架</span></a></h2><h3 id="_1-安装express-generator" tabindex="-1"><a class="header-anchor" href="#_1-安装express-generator"><span>1. 安装express-generator</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-g</span> express-generator
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可通过express -h查看命令行的指令含义</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>express <span class="token parameter variable">-h</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Options:
    <span class="token parameter variable">--version</span>        输出版本号
-e, <span class="token parameter variable">--ejs</span>            添加对 ejs 模板引擎的支持
    <span class="token parameter variable">--pug</span>            添加对 pug 模板引擎的支持
    <span class="token parameter variable">--hbs</span>            添加对 handlebars 模板引擎的支持
-H, <span class="token parameter variable">--hogan</span>          添加对 hogan.js 模板引擎的支持
-v, <span class="token parameter variable">--view</span> <span class="token operator">&lt;</span>engine<span class="token operator">&gt;</span>  添加对视图引擎（view） <span class="token operator">&lt;</span>engine<span class="token operator">&gt;</span> 的支持 <span class="token punctuation">(</span>ejs<span class="token operator">|</span>hbs<span class="token operator">|</span>hjs<span class="token operator">|</span>jade<span class="token operator">|</span>pug<span class="token operator">|</span>twig<span class="token operator">|</span>vash<span class="token punctuation">)</span> （默认是 jade 模板引擎）
    --no-view        创建不带视图引擎的项目
-c, <span class="token parameter variable">--css</span> <span class="token operator">&lt;</span>engine<span class="token operator">&gt;</span>   添加样式表引擎 <span class="token operator">&lt;</span>engine<span class="token operator">&gt;</span> 的支持 <span class="token punctuation">(</span>less<span class="token operator">|</span>stylus<span class="token operator">|</span>compass<span class="token operator">|</span>sass<span class="token punctuation">)</span> （默认是普通的 css 文件）
    <span class="token parameter variable">--git</span>            添加 .gitignore
-f, <span class="token parameter variable">--force</span>          强制在非空目录下创建
-h, <span class="token parameter variable">--help</span>           输出使用方法
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-创建应用" tabindex="-1"><a class="header-anchor" href="#_2-创建应用"><span>2. 创建应用</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>express <span class="token parameter variable">-e</span> myapp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入app，并安装依赖</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> myapp
<span class="token function">npm</span> i
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，myapp文件夹下的结构如下所示：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>myapp
 ├── bin
 │   └── www
 │
 ├── node_modules
 │
 ├── public
 │   ├── images
 │   ├── javascripts
 │   └── stylesheets
 │       └── style.css
 ├── routes
 │   ├── index.js
 │   └── users.js
 ├── views
 │   ├── error.ejs
 │   └── index.ejs
 ├── package.json
 └── app.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>bin: 启动目录，里面包含了一个启动文件www ，默认监听端口是 3000 (直接node www执行即可)</li><li>node_modules：依赖的模块包</li><li>public：存放静态资源</li><li>routes：路由操作</li><li>views：存放ejs模板引擎</li><li>app.js：主文件</li><li>package.json：项目描述文件</li></ul><p>我们后续主要对<code>routes（路由）、views（模板）、public（静态资源）</code>作修改。</p>`,83))])}const y=o(r,[["render",j],["__file","06_express.html.vue"]]),T=JSON.parse('{"path":"/Server/nodeJS/06_express.html","title":"express","lang":"zh-CN","frontmatter":{"order":5,"description":"express 一、express 介绍 express 是一个基于 Node.js 平台的极简、灵活的 WEB 应用开发框架，官方网址： https://www.expressjs.com.cn/ 简单来说，express 是一个封装好的工具包，封装了很多功能，便于我们开发 WEB 应用(HTTP 服务) 二、express 使用 1. expres...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/Server/nodeJS/06_express.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"express"}],["meta",{"property":"og:description","content":"express 一、express 介绍 express 是一个基于 Node.js 平台的极简、灵活的 WEB 应用开发框架，官方网址： https://www.expressjs.com.cn/ 简单来说，express 是一个封装好的工具包，封装了很多功能，便于我们开发 WEB 应用(HTTP 服务) 二、express 使用 1. expres..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-20T08:14:58.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-03-20T08:14:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"express\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-20T08:14:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、express 介绍","slug":"一、express-介绍","link":"#一、express-介绍","children":[]},{"level":2,"title":"二、express 使用","slug":"二、express-使用","link":"#二、express-使用","children":[{"level":3,"title":"1. express 下载","slug":"_1-express-下载","link":"#_1-express-下载","children":[]},{"level":3,"title":"2. express 初体验","slug":"_2-express-初体验","link":"#_2-express-初体验","children":[]}]},{"level":2,"title":"三、express 路由","slug":"三、express-路由","link":"#三、express-路由","children":[{"level":3,"title":"1. 什么是路由","slug":"_1-什么是路由","link":"#_1-什么是路由","children":[]},{"level":3,"title":"2. 路由的使用","slug":"_2-路由的使用","link":"#_2-路由的使用","children":[]},{"level":3,"title":"3. 获取请求参数","slug":"_3-获取请求参数","link":"#_3-获取请求参数","children":[]},{"level":3,"title":"4. 获取路由参数","slug":"_4-获取路由参数","link":"#_4-获取路由参数","children":[]}]},{"level":2,"title":"四、express 响应设置","slug":"四、express-响应设置","link":"#四、express-响应设置","children":[]},{"level":2,"title":"五、express 中间件","slug":"五、express-中间件","link":"#五、express-中间件","children":[{"level":3,"title":"1. 什么是中间件","slug":"_1-什么是中间件","link":"#_1-什么是中间件","children":[]},{"level":3,"title":"2. 中间件的作用","slug":"_2-中间件的作用","link":"#_2-中间件的作用","children":[]},{"level":3,"title":"3. 中间件的类型","slug":"_3-中间件的类型","link":"#_3-中间件的类型","children":[]},{"level":3,"title":"4. 定义全局中间件","slug":"_4-定义全局中间件","link":"#_4-定义全局中间件","children":[]},{"level":3,"title":"5. 静态资源中间件","slug":"_5-静态资源中间件","link":"#_5-静态资源中间件","children":[]},{"level":3,"title":"6. 获取请求体数据","slug":"_6-获取请求体数据","link":"#_6-获取请求体数据","children":[]}]},{"level":2,"title":"六、Router","slug":"六、router","link":"#六、router","children":[{"level":3,"title":"1. 什么是 Router","slug":"_1-什么是-router","link":"#_1-什么是-router","children":[]},{"level":3,"title":"2. Router 作用","slug":"_2-router-作用","link":"#_2-router-作用","children":[]},{"level":3,"title":"3. Router 使用","slug":"_3-router-使用","link":"#_3-router-使用","children":[]}]},{"level":2,"title":"七、EJS 模板引擎","slug":"七、ejs-模板引擎","link":"#七、ejs-模板引擎","children":[{"level":3,"title":"1. 什么是模板引擎","slug":"_1-什么是模板引擎","link":"#_1-什么是模板引擎","children":[]},{"level":3,"title":"2. 什么是 EJS","slug":"_2-什么是-ejs","link":"#_2-什么是-ejs","children":[]},{"level":3,"title":"3. EJS 初体验","slug":"_3-ejs-初体验","link":"#_3-ejs-初体验","children":[]},{"level":3,"title":"4. EJS 常用语法","slug":"_4-ejs-常用语法","link":"#_4-ejs-常用语法","children":[]},{"level":3,"title":"5. 在express中使用ejs","slug":"_5-在express中使用ejs","link":"#_5-在express中使用ejs","children":[]}]},{"level":2,"title":"八、express脚手架","slug":"八、express脚手架","link":"#八、express脚手架","children":[{"level":3,"title":"1. 安装express-generator","slug":"_1-安装express-generator","link":"#_1-安装express-generator","children":[]},{"level":3,"title":"2. 创建应用","slug":"_2-创建应用","link":"#_2-创建应用","children":[]}]}],"git":{"createdTime":1710854012000,"updatedTime":1710922498000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":2}]},"readingTime":{"minutes":9.66,"words":2897},"filePathRelative":"Server/nodeJS/06_express.md","localizedDate":"2024年3月19日","excerpt":"\\n<h2>一、express 介绍</h2>\\n<blockquote>\\n<p>express 是一个基于 Node.js 平台的极简、灵活的 WEB 应用开发框架，官方网址： https://www.expressjs.com.cn/</p>\\n</blockquote>\\n<p>简单来说，express 是一个封装好的工具包，封装了很多功能，便于我们开发 WEB 应用(HTTP 服务)</p>\\n<h2>二、express 使用</h2>\\n<h3>1. express 下载</h3>\\n<p>express 本身是一个 npm 包，所以可以通过 npm 安装</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">npm</span> init\\n<span class=\\"token function\\">npm</span> i express\\n</code></pre></div>","autoDesc":true}');export{y as comp,T as data};
