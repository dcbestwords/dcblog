import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,o as l,c as i,a as e,b as o,d as n,e as s}from"./app-BPd7oWPf.js";const d="/dcblog/assets/compare-B1tKe4co.png",p="/dcblog/assets/software-DrpeNEJk.png",c={},h=s('<h1 id="nodejs简介" tabindex="-1"><a class="header-anchor" href="#nodejs简介"><span>nodejs简介</span></a></h1><h2 id="一、定义" tabindex="-1"><a class="header-anchor" href="#一、定义"><span>一、定义</span></a></h2><p>Node.js是一个基于 <strong>Chrome V8 引擎</strong>的 JavaScript 运行环境。Node.js 使用了一个<strong>事件驱动</strong>、<strong>非阻塞式 I/O</strong>的模型，使其轻量又高效。Node.js 的包管理工具 npm 是全球最大的开源库生态系统。</p><p>Node.js 不是一门语言，也不是 JavaScript 的框架，也不是像Nginx一样的Web服务器 ，<strong>Node.js 是 JavaScript 在服务器端的运行环境（平台）</strong>。</p><h2 id="二、node-js-的组成" tabindex="-1"><a class="header-anchor" href="#二、node-js-的组成"><span>二、Node.js 的组成</span></a></h2><p>在 Node.js 里运行 JavaScript，跟在 Chrome 里运行 JavaScript 有什么不同？</p><p>二者采用的是同样的 JS 引擎。在 Node.js 里写 JS，和在前端写 JS，几乎没有不同。在写法上的区别在于：Node.js 没有浏览器、页面标签相关的 API，但是新增了一些 Node.js 相关的 API。通俗来说，对于开发者而言，在前端写 JS 是用于控制浏览器；而 Node.js 环境写 JS 可以控制整个计算机。</p><p>我们知道，JavaScript 的组成分为三个部分：</p><ul><li>ECMAScript</li><li>DOM：标签元素相关的API</li><li>BOM：浏览器相关的API</li></ul><p>ECMAScript 是 JS 的语法；DOM 和 BOM 浏览器端为 JS 提供的 API。</p><p>而 Node.js 的组成分为：</p><ul><li><strong>ECMAScript</strong>。ECMAScript 的所有语法在 Node 环境中都可以使用。</li><li><strong>Node 环境</strong>提供的一些<strong>附加 API</strong>(包括文件、网络等相关的 API)。</li></ul><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="三、node-js-的应用" tabindex="-1"><a class="header-anchor" href="#三、node-js-的应用"><span>三、Node.js 的应用</span></a></h2><p>Node.js 拥有强大的开发者社区，现在已经发展出比较成熟的技术体系，以及庞大的生态。它被广泛地应用在 Web 服务、开发工作流、客户端应用等诸多领域。其中，在 <strong>Web 服务</strong>领域，业界对 Node.js 的接受程度最高。</p><h3 id="_1-bff-中间层" tabindex="-1"><a class="header-anchor" href="#_1-bff-中间层"><span>1. BFF 中间层</span></a></h3>',16),g={href:"https://mp.weixin.qq.com/s/IYddaaw2ps1wR2VT1dZWPg",target:"_blank",rel:"noopener noreferrer"},_=s('<blockquote><p>BFF 模式下，整体分工很清晰，<strong>后端通过 Java/C++ 等语言负责服务实现，理想情况下给前端提供的是基于领域模型的 RPC 接口，前端则在 BFF 层直接调用服务端 RPC 接口拿到数据</strong>，按需加工消费数据，并实现人机交互。基于 BFF 模式的研发，很适合拥有前端技术背景的全栈型工程师。这种模式的好处很明显，后端可以专注于业务领域，更多从领域模型的视角去思考问题，页面视角的数据则交给前端型全栈工程师去搞定。<strong>领域模型与页面数据是两种思维模式，通过 BFF 可以很好地解耦开，让彼此更专业高效</strong>。</p></blockquote><p>在 Web 服务里，搭建一个中间层，前端访问中间层的接口，中间层再访问后台的 Java/C++ 服务。这类服务的特点是不需要太强的服务器运算能力，但对程序的灵活性有较高的要求。这两个特点，正好和 Node.js 的优势相吻合。Node.js 非常适合用来做 BFF 层，优势如下：</p><ul><li>对于前端来说：让前端<strong>有能力自由组装后台数据</strong>，这样可以减少大量的业务沟通成本，加快业务的迭代速度；并且，前端同学能够<strong>自主决定</strong>与后台的通讯方式。</li><li>对于后台和运维来说，好处是：安全性（不会把主服务器暴露在外面）、降低主服务器的复杂度等。</li></ul><h3 id="_2-服务端渲染" tabindex="-1"><a class="header-anchor" href="#_2-服务端渲染"><span>2. 服务端渲染</span></a></h3><p><strong>客户端渲染</strong>（CSR / Client side render）：前端通过一大堆接口请求数据，然后通过 JS 动态处理和生成页面结构和展示。优点是<strong>前后端分离</strong>、减小服务器压力、局部刷新。缺点是不利于 SEO（你的页面是通过 Ajax 异步进行内容的获取，而抓取工具并不会等待异步完成）、首屏渲染慢。</p><p><strong>服务端渲染</strong>（SSR / Server Side Render）：服务器返回的不是接口数据，而是一整个页面（或整个楼层）的 HTML 字符串，浏览器直接显示即可。也就是说，在服务器端直接就渲染好了，然后一次性打包返回给前端。优点是<strong>有利于 SEO、首屏渲染很快</strong>。</p><p><strong>总结： 搜索引擎优化 + 首屏速度优化 = 服务端渲染</strong>。</p><p>备注：这里的「服务端渲染」只是让 Node.js 做中间层，并不是传统意义上的服务端渲染。</p><p>参考链接：</p>',9),j={href:"https://ssr.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},u=e("li",null,"https://blog.csdn.net/u012036171/article/details/88833200",-1),m=e("li",null,"https://juejin.im/post/5c068fd8f265da61524d2abc",-1),N={href:"https://www.zhihu.com/question/59578433/answer/326694511",target:"_blank",rel:"noopener noreferrer"},S=s('<p>历史回顾：</p><p>（1）一开始，页面很简单，html 是后端渲染的（比如PHP、ASP、JSP等方式）。后端发现页面中的 js 好麻烦（虽然简单，但是坑多），于是让公司招聘专门写 js 的人，简称「前端切图仔」。</p><p>（2）随着 Node.js 和前端 MVC 的兴起，以及前端越来越复杂，慢慢演变成了「前后端分离」。</p><p>（3）前端的 SPA 应用流行之后，发现 SEO 问题很大，而且首屏渲染速度很慢，但是自己选的路再难走也要走下去，于是用 Node.js 在服务端渲染被看成是一条出路。</p><p>（4）以前在一起的时候，是后端做部分前端的工作；现在在一起的时候，是前端做部分后端的工作。</p><h3 id="_3-做小型服务、小型网站的后端-基于-express、koa-框架" tabindex="-1"><a class="header-anchor" href="#_3-做小型服务、小型网站的后端-基于-express、koa-框架"><span>3. 做小型服务、小型网站的后端（基于 Express、Koa 框架）</span></a></h3><p>现在很多公司的后台管理系统，都是用 Node.js 来开发接口，毕竟，后台管理系统对性能和并发的要求不是太高。有了 Node.js 之后，通过 JS 直接操作 DB，做增删改查，生成接口，极大降低了前端同学的学习门槛。</p><p>当然，有时候做 Node.js 开发，是因为：后台人力不够，所以把后台开发的一部分工作量，转移给前端同学。</p><h3 id="_4-做项目构建工具" tabindex="-1"><a class="header-anchor" href="#_4-做项目构建工具"><span>4. 做项目构建工具</span></a></h3><p>前端正在广泛使用的构建工具 gulp、Webpack，就是基于 Node.js 来实现的。</p><h3 id="_5-做-pc-客户端软件-基于-electron-框架" tabindex="-1"><a class="header-anchor" href="#_5-做-pc-客户端软件-基于-electron-框架"><span>5. 做 PC 客户端软件（基于 Electron 框架）</span></a></h3><p>Electron 框架就是基于 Node.js 的，可以用来开发客户端软件。</p><p>Electron 原名为 Atom Shell，是由 GitHub 开发的一个开源框架。Electron 以 Node.js 作为运行时（runtime），以 chromium 作为渲染引擎，使开发者可以使用 JS 这种前端技术栈开来发跨平台的桌面GUI应用程序。</p><p>我们常用的代码编辑器 VS Code ， 就是基于 Electron 框架来开发的。其他使用 Electron 进行开发的知名应用还有：Skype、GitHub Desktop、Slack、WhatsApp等。</p>',14),f={href:"https://www.twitch.tv/",target:"_blank",rel:"noopener noreferrer"},b=e("h3",{id:"_6-知名度较高的-node-js-开源项目",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_6-知名度较高的-node-js-开源项目"},[e("span",null,"6. 知名度较高的 Node.js 开源项目")])],-1),v=e("figure",null,[e("img",{src:p,alt:"image-20221102140856507",tabindex:"0",loading:"lazy"}),e("figcaption",null,"image-20221102140856507")],-1),x=e("li",null,"express：Node.js 中著名的 web 服务框架。",-1),J=e("li",null,"Koa：下一代的 Node.js 的 Web 服务框架。所谓的“下一代”是相对于 Express 而言的。",-1),k={href:"https://eggjs.org/zh-cn/",target:"_blank",rel:"noopener noreferrer"},C=e("li",null,"mocha：是现在最流行的 JavaScript 测试框架，在浏览器和 Node 环境都可以使用。",-1),E=e("li",null,"PM2：node 多进程管理。",-1),I=e("li",null,"jade：非常优秀的模板引擎，不仅限于 js 语言。",-1),P=e("li",null,"CoffeeScript：用简洁的方式展示 JavaScript 优秀的部分。",-1),F=e("li",null,"Atom：编辑器。",-1),A=e("li",null,"VS Code：最酷炫的编辑器。",-1),B=e("li",null,"socket.io：实时通信框架。",-1),w=s('<h2 id="四、node-js-的特点" tabindex="-1"><a class="header-anchor" href="#四、node-js-的特点"><span>四、Node.js 的特点</span></a></h2><ul><li>异步、非阻塞 IO 模型</li><li>事件循环</li><li>单线程</li><li>总结：轻量和高效</li></ul><p>Node.js 的性能和效率非常高。</p><p>传统的 Java 语言是一个请求开启一个线程，当请求处理完毕后就关闭这个线程。而 Node.js 则完全没有采用这种模型，它本质上就是一个单线程。</p><p>你可能会疑问：一个线程如何服务于大量的请求、如何处理高并发的呢？这是因为，Node.js 采用的是异步的、非阻塞的模型。</p><p>这里所谓的“单线程”，指的是 Node 的主线程只有一个。为了确保主线程不被阻塞，主线程是用于接收客户端请求。但不会处理具体的任务。而 Node 的背后还有一个线程池，线程池会处理长时间运行的任务（比如 IO 操作、网络操作）。线程池里的任务是通过队列和事件循环的机制来执行。</p><h2 id="五、使用-node-js-时的劣势" tabindex="-1"><a class="header-anchor" href="#五、使用-node-js-时的劣势"><span>五、使用 Node.js 时的劣势</span></a></h2><ul><li>程序运行不稳定，可能会出现服务不可用的情况</li><li>程序运行效率较低，每秒的请求数维持在一个较低的水平</li><li>前端同学对服务器端的技术不太熟悉。</li></ul>',8);function y(O,V){const t=a("ExternalLinkIcon");return l(),i("div",null,[h,e("p",null,[o("BFF，即 Backend For Frontend（服务于前端的后端）。玉伯在《"),e("a",g,[o("从前端技术进化到体验科技"),n(t)]),o("》这篇文章中点出了 BFF 层的概念：")]),_,e("ul",null,[e("li",null,[e("a",j,[o("Vue 服务端渲染的概念"),n(t)])]),u,m,e("li",null,[e("a",N,[o("方应杭"),n(t)])])]),S,e("p",null,[o("还有一个例子是：电子游戏直播网站 "),e("a",f,[o("Twitch"),n(t)]),o("，号称是国外游戏直播的鼻祖，它在 PC 端的客户端软件，就是用 Electron 框架的。你会发现，Twitch 的网站视觉，和 PC 端的视觉，几乎是一样的。如果两端都采用 JS 语言，就可以极大的复用现有的工程。")]),b,v,e("ul",null,[x,J,e("li",null,[e("a",k,[o("Egg"),n(t)]),o("：2016 年，阿里巴巴研发了知名的 Egg.js 开源项目，号称企业级 Web 服务框架。Egg.js 是基于 Koa 开发的。")]),C,E,I,P,F,A,B]),w])}const T=r(c,[["render",y],["__file","01_Introduction.html.vue"]]),D=JSON.parse('{"path":"/Server/nodeJS/01_Introduction.html","title":"nodejs简介","lang":"zh-CN","frontmatter":{"order":1,"description":"nodejs简介 一、定义 Node.js是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O的模型，使其轻量又高效。Node.js 的包管理工具 npm 是全球最大的开源库生态系统。 Node.js 不是一门语言，也不是 JavaScript 的框架，也不是像Nginx一样的We...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/Server/nodeJS/01_Introduction.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"nodejs简介"}],["meta",{"property":"og:description","content":"nodejs简介 一、定义 Node.js是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O的模型，使其轻量又高效。Node.js 的包管理工具 npm 是全球最大的开源库生态系统。 Node.js 不是一门语言，也不是 JavaScript 的框架，也不是像Nginx一样的We..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-20T08:14:58.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-03-20T08:14:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"nodejs简介\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-20T08:14:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、定义","slug":"一、定义","link":"#一、定义","children":[]},{"level":2,"title":"二、Node.js 的组成","slug":"二、node-js-的组成","link":"#二、node-js-的组成","children":[]},{"level":2,"title":"三、Node.js 的应用","slug":"三、node-js-的应用","link":"#三、node-js-的应用","children":[{"level":3,"title":"1. BFF 中间层","slug":"_1-bff-中间层","link":"#_1-bff-中间层","children":[]},{"level":3,"title":"2. 服务端渲染","slug":"_2-服务端渲染","link":"#_2-服务端渲染","children":[]},{"level":3,"title":"3. 做小型服务、小型网站的后端（基于 Express、Koa 框架）","slug":"_3-做小型服务、小型网站的后端-基于-express、koa-框架","link":"#_3-做小型服务、小型网站的后端-基于-express、koa-框架","children":[]},{"level":3,"title":"4. 做项目构建工具","slug":"_4-做项目构建工具","link":"#_4-做项目构建工具","children":[]},{"level":3,"title":"5. 做 PC 客户端软件（基于 Electron 框架）","slug":"_5-做-pc-客户端软件-基于-electron-框架","link":"#_5-做-pc-客户端软件-基于-electron-框架","children":[]},{"level":3,"title":"6. 知名度较高的 Node.js 开源项目","slug":"_6-知名度较高的-node-js-开源项目","link":"#_6-知名度较高的-node-js-开源项目","children":[]}]},{"level":2,"title":"四、Node.js 的特点","slug":"四、node-js-的特点","link":"#四、node-js-的特点","children":[]},{"level":2,"title":"五、使用 Node.js 时的劣势","slug":"五、使用-node-js-时的劣势","link":"#五、使用-node-js-时的劣势","children":[]}],"git":{"createdTime":1710854012000,"updatedTime":1710922498000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":2}]},"readingTime":{"minutes":7.47,"words":2240},"filePathRelative":"Server/nodeJS/01_Introduction.md","localizedDate":"2024年3月19日","excerpt":"\\n<h2>一、定义</h2>\\n<p>Node.js是一个基于 <strong>Chrome V8 引擎</strong>的 JavaScript 运行环境。Node.js 使用了一个<strong>事件驱动</strong>、<strong>非阻塞式 I/O</strong>的模型，使其轻量又高效。Node.js 的包管理工具 npm 是全球最大的开源库生态系统。</p>\\n<p>Node.js 不是一门语言，也不是 JavaScript 的框架，也不是像Nginx一样的Web服务器 ，<strong>Node.js 是 JavaScript 在服务器端的运行环境（平台）</strong>。</p>","autoDesc":true}');export{T as comp,D as data};
