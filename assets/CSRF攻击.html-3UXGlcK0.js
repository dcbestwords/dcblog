import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,b as r,o as i}from"./app-D9I0nIqZ.js";const n="/dcblog/assets/16807497307680-CxV_l2HV.jpg",s={};function a(c,e){return i(),o("div",null,e[0]||(e[0]=[r('<h1 id="csrf攻击" tabindex="-1"><a class="header-anchor" href="#csrf攻击"><span>CSRF攻击</span></a></h1><p><strong>跨站请求伪造（Cross-site request forgery）</strong>，也被称为 <strong>one-click attack</strong> 或者 <strong>session riding</strong>，通常缩写为 <strong>CSRF</strong> 或者 <strong>XSRF</strong>， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨站脚本（XSS）相比，<strong>XSS 利用的是用户对指定网站的信任</strong>，<strong>CSRF 利用的是网站对用户网页浏览器的信任</strong>。</p><p>假设你正在使用一个银行网页进行转账操作，攻击者可以通过以下步骤进行CSRF攻击：</p><p>1、攻击者创建一个恶意网站，并在其中嵌入一个针对银行应用程序的攻击脚本。</p><p>2、攻击者向你发送一封包含恶意网站链接的电子邮件,图片或者社交媒体消息，并诱导你点击链接。</p><p>3、当你打开恶意网站时，攻击脚本会向银行应用程序发送一个伪造的转账请求，请求中包含转账金额和接收方账户信息。</p><p>4、如果你已经在银行应用程序中登录，攻击脚本可以利用你的身份信息来伪造合法的请求，银行应用程序会认为请求是合法的，并将转账请求发送到服务器进行处理。</p><p>5、如果攻击成功，攻击者就可以利用你的银行账户进行转账操作，从而窃取你的资金。</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="防御手段" tabindex="-1"><a class="header-anchor" href="#防御手段"><span>防御手段</span></a></h2><ul><li><p>验证来源：在服务器端对请求进行验证，判断请求的来源是否合法，如果请求不是来自同一域名下的站点，则拒绝请求。</p></li><li><p>Token验证：在用户登录时，为用户生成一个随机的Token，并将Token存储在Cookie或者LocalStorage中，每次用户提交请求时，将Token作为参数发送到服务器端，服务器端验证Token是否合法，如果不合法，则拒绝请求。不过这种方式其实还是不安全，很容易被XSS攻击，窃取Cookie和LocalStorage中的数据</p></li><li><p><code>SameSite Cookie</code>属性：在设置Cookie时，可以将SameSite属性设置为Strict或者Lax，防止 <mark>跨站点</mark> Cookie攻击。</p></li></ul><blockquote><p>SameSite属性是一个用于设置cookie的属性，它用于控制跨站点请求时是否发送cookie。SameSite属性有三个可选值，分别是&quot;Strict&quot;、&quot;Lax&quot;和&quot;None&quot;。</p><ol><li>SameSite=Strict： <ul><li>设置为Strict时，浏览器将只在请求与当前网站的域名完全匹配时发送cookie。</li><li>当前网站的域名必须与请求的域名完全匹配，包括协议和端口。</li><li>这种设置可以提供最高级别的安全性，防止所有的跨站点请求中的cookie泄露。</li></ul></li><li>SameSite=Lax： <ul><li>Lax将在导航的GET请求和跨站点POST请求中发送cookie，但对于所有的第三方请求（如图片、链接等）则不会发送cookie。</li><li>通过在用户导航到目标网站时发送cookie，并在来自第三方网站的POST请求时发送cookie，提供了基本的防御措施，以防止跨站点请求伪造攻击（CSRF）等。</li></ul></li><li>SameSite=None： <ul><li>None允许在所有情况下都发送cookie，无论是跨站点的导航、POST请求还是第三方请求。</li><li>同时需要配合Secure属性，即只有在安全的HTTPS连接下才会发送cookie。否则，浏览器将忽略这个设置。</li><li>这种设置通常用于需要在不同域名之间共享cookie的场景，如单点登录（SSO）。</li></ul></li></ol></blockquote><ul><li><p>验证码：在表单中添加验证码，要求用户在提交表单前必须输入正确的验证码，从而防止攻击者构造伪造的表单进行攻击。</p></li><li><p>HTTP Referer：在服务器端验证请求的Referer头部，确保请求来自合法的来源。但是Referer头部可以被伪造，不是一种可靠的防御方式。</p></li></ul>',13)]))}const S=t(s,[["render",a],["__file","CSRF攻击.html.vue"]]),g=JSON.parse('{"path":"/browser_internet/network/cyber_security/CSRF%E6%94%BB%E5%87%BB.html","title":"CSRF攻击","lang":"zh-CN","frontmatter":{"description":"CSRF攻击 跨站请求伪造（Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/browser_internet/network/cyber_security/CSRF%E6%94%BB%E5%87%BB.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"CSRF攻击"}],["meta",{"property":"og:description","content":"CSRF攻击 跨站请求伪造（Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T13:13:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-19T13:13:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CSRF攻击\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-19T13:13:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"防御手段","slug":"防御手段","link":"#防御手段","children":[]}],"git":{"createdTime":1710854012000,"updatedTime":1710854012000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":1}]},"readingTime":{"minutes":3.31,"words":992},"filePathRelative":"browser_internet/network/cyber_security/CSRF攻击.md","localizedDate":"2024年3月19日","excerpt":"\\n<p><strong>跨站请求伪造（Cross-site request forgery）</strong>，也被称为 <strong>one-click attack</strong> 或者 <strong>session riding</strong>，通常缩写为 <strong>CSRF</strong> 或者 <strong>XSRF</strong>， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨站脚本（XSS）相比，<strong>XSS 利用的是用户对指定网站的信任</strong>，<strong>CSRF 利用的是网站对用户网页浏览器的信任</strong>。</p>","autoDesc":true}');export{S as comp,g as data};
