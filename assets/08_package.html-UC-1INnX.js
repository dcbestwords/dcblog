import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as p,a as s,b as o,d as c,r as i,e as l}from"./app--IULgkuy.js";const u="/dcblog/assets/1645076523410-a913585e-1cb0-42eb-8ea4-ab6f952a21dd-DCUa-zpa.png",r="/dcblog/assets/v2-90e0f2c5b41f5487014996f87098169e720w-BHQQ6_IQ.png",d={},k={href:"https://juejin.cn/post/6844904038543130637#heading-21",target:"_blank",rel:"noopener noreferrer"};function v(m,n){const a=i("ExternalLinkIcon");return t(),p("div",null,[s("p",null,[s("a",k,[n[0]||(n[0]=o("原链接 | 掘金")),c(a)])]),n[1]||(n[1]=l(`<h2 id="webpack-构建流程" tabindex="-1"><a class="header-anchor" href="#webpack-构建流程"><span>webpack 构建流程</span></a></h2><p>Webpack 的运行流程是一个串行的过程,从启动到结束会依次执行以下流程 :</p><ol><li>初始化参数：从配置文件和 Shell 语句中读取与合并参数,得出最终的参数。</li><li>开始编译：用上一步得到的参数初始化 <code>Compiler</code> 对象，加载所有配置的插件，执行对象的 <code>run</code> 方法开始执行编译。</li><li>确定入口：根据配置中的 <code>entry</code> 找出所有的入口文件。</li><li>编译模块：从入口文件出发,调用所有配置的 <code>Loader</code> 对模块进行翻译,再找出该模块依赖的模块,再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理。</li><li>完成模块编译：在经过第 4 步使用 <code>Loader</code> 翻译完所有模块后,得到了每个模块被翻译后的最终内容以及它们之间的依赖关系。</li><li>输出资源：根据入口和模块之间的依赖关系,组装成一个个包含多个模块的 <code>Chunk</code>,再把每个 <code>Chunk</code> 转换成一个单独的文件加入到输出列表,这步是可以修改输出内容的最后机会。</li><li>输出完成：在确定好输出内容后,根据配置确定输出的路径和文件名,把文件内容写入到文件系统。</li></ol><p>在以上过程中,<code>Webpack</code> 会在特定的时间点广播出特定的事件,插件在监听到感兴趣的事件后会执行特定的逻辑,并且插件可以调用 <code>Webpack</code> 提供的 API 改变 <code>Webpack</code> 的运行结果。</p><h2 id="简易复现" tabindex="-1"><a class="header-anchor" href="#简易复现"><span>简易复现</span></a></h2><blockquote><p><code>compiler.js</code></p><p><strong>模块数组modules</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        filename<span class="token punctuation">,</span> <span class="token comment">// 文件路径,可以作为每个模块的唯一标识符</span>
        dependecies<span class="token punctuation">,</span> <span class="token comment">// 依赖对象,保存着依赖模块路径</span>
        code<span class="token punctuation">,</span> <span class="token comment">// 文件内容</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        filename<span class="token punctuation">,</span> <span class="token comment">// 文件路径,可以作为每个模块的唯一标识符</span>
        dependecies<span class="token punctuation">,</span> <span class="token comment">// 依赖对象,保存着依赖模块路径</span>
        code<span class="token punctuation">,</span> <span class="token comment">// 文件内容</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token operator">...</span><span class="token operator">...</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>依赖关系图示例</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
       <span class="token string-property property">&#39;./src/index.js&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
         <span class="token literal-property property">dependecies</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;./hello.js&#39;</span><span class="token operator">:</span> <span class="token string">&#39;./src/hello.js&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
         <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token string">&#39;&quot;use strict&quot;;\\n\\nvar _hello = require(&quot;./hello.js&quot;);\\n\\ndocument.write((0, _hello.say)(&quot;webpack&quot;));&#39;</span>
       <span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token string-property property">&#39;./src/hello.js&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
         <span class="token literal-property property">dependecies</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
         <span class="token literal-property property">code</span><span class="token operator">:</span>
           <span class="token string">&#39;&quot;use strict&quot;;\\n\\nObject.defineProperty(exports, &quot;__esModule&quot;, {\\n  value: true\\n});\\nexports.say = say;\\n\\nfunction say(name) {\\n  return &quot;hello &quot;.concat(name);\\n}&#39;</span>
       <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据生成的关系依赖图输出<code>bundle.js</code>文件</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Parser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./Parser&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Compiler</span> <span class="token punctuation">{</span>
  <span class="token comment">// options: webpack的配置对象</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> entry<span class="token punctuation">,</span> output <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>entry <span class="token operator">=</span> entry<span class="token punctuation">;</span> <span class="token comment">// 入口</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>output <span class="token operator">=</span> output<span class="token punctuation">;</span> <span class="token comment">// 出口</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>modules <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 模块</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 构建启动</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>modules<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>modules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> dependecies <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 判断有依赖对象,递归解析所有依赖项</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>dependecies<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> dependency <span class="token keyword">in</span> dependecies<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>modules<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>dependecies<span class="token punctuation">[</span>dependency<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 生成依赖关系图</span>
    <span class="token keyword">const</span> dependencyGraph <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modules<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token parameter">graph<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token operator">...</span>graph<span class="token punctuation">,</span>
        <span class="token comment">// 使用文件路径作为每个模块的唯一标识符,保存对应模块的依赖对象和文件内容</span>
        <span class="token punctuation">[</span>item<span class="token punctuation">.</span>filename<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">dependecies</span><span class="token operator">:</span> item<span class="token punctuation">.</span>dependecies<span class="token punctuation">,</span>
          <span class="token literal-property property">code</span><span class="token operator">:</span> item<span class="token punctuation">.</span>code<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>dependencyGraph<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">build</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> getAst<span class="token punctuation">,</span> getDependecies<span class="token punctuation">,</span> getCode <span class="token punctuation">}</span> <span class="token operator">=</span> Parser<span class="token punctuation">;</span>
    <span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">getAst</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> dependecies <span class="token operator">=</span> <span class="token function">getDependecies</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token function">getCode</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      filename<span class="token punctuation">,</span> <span class="token comment">// 文件路径,可以作为每个模块的唯一标识符</span>
      dependecies<span class="token punctuation">,</span> <span class="token comment">// 依赖对象,保存着依赖模块路径</span>
      code<span class="token punctuation">,</span> <span class="token comment">// 文件内容</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 重写 require函数,输出bundle</span>
  <span class="token function">generate</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 输出文件路径</span>
    <span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>output<span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>output<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> bundle <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(function(graph){
      function require(moduleId){ 
        function localRequire(relativePath){
          return require(graph[moduleId].dependecies[relativePath])
        }
        var exports = {};
        (function(require,exports,code){
          eval(code)
        })(localRequire,exports,graph[moduleId].code);
        return exports;
      }
      require(&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>entry<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;)
    })(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token comment">// 把文件内容写入到文件系统</span>
    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> bundle<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Compiler<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>前提：已经准备好生成的 <mark>依赖关系图</mark></li><li>目标：生成一个 IIFE (匿名闭包)，可以执行所有书写的js脚本</li><li>困难：代码中含有<code>require</code>，<code>export</code>，浏览器无法识别</li><li>做法：自定义require和export传递给代码执行器（作为参数）</li></ul><blockquote><p><code>Parser.js</code></p><ul><li>AST树（用于解析依赖）</li><li>依赖模块（包含依赖的路径）</li><li>转换过的代码</li></ul></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@babel/parser&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> traverse <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@babel/traverse&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> transformFromAst <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@babel/core&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Parser <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//解析入口文件,获取 AST</span>
  <span class="token function-variable function">getAst</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 读取入口文件</span>
    <span class="token keyword">const</span> content <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将文件内容转为AST抽象语法树</span>
    <span class="token keyword">return</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">//找出所有依赖模块</span>
  <span class="token function-variable function">getDependecies</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">ast<span class="token punctuation">,</span> filename</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> dependecies <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 遍历所有的 import 模块,存入dependecies</span>
    <span class="token function">traverse</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token comment">// 类型为 ImportDeclaration 的 AST 节点 (即为import 语句)</span>
      <span class="token comment">// node.source.value 当前导入声明的来源</span>
      <span class="token function">ImportDeclaration</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> node <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> dirname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 保存依赖模块路径,之后生成依赖关系图需要用到</span>
        <span class="token keyword">const</span> filepath <span class="token operator">=</span> <span class="token string">&#39;./&#39;</span> <span class="token operator">+</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dirname<span class="token punctuation">,</span> node<span class="token punctuation">.</span>source<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dependecies<span class="token punctuation">[</span>node<span class="token punctuation">.</span>source<span class="token punctuation">.</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> filepath<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> dependecies<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">//将 AST 语法树转换为浏览器可执行代码</span>
  <span class="token function-variable function">getCode</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">ast</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> code <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">transformFromAst</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@babel/preset-env&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> code<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Parser<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loader和plugin的区别" tabindex="-1"><a class="header-anchor" href="#loader和plugin的区别"><span>Loader和Plugin的区别</span></a></h2><p><code>Loader</code> 本质就是一个函数，在该函数中对接收到的内容进行转换，返回转换后的结果。 因为 Webpack 只认识 JavaScript，所以 Loader 就成了翻译官，对其他类型的资源进行转译的预处理工作。</p><p><mark>src/raw-loader.js</mark></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\u2028</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;\\\\u2028&#39;</span> <span class="token punctuation">)</span> <span class="token comment">// 为了安全起见, ES6模板字符串的问题</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\u2029</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;\\\\u2029&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">export default </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>json<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Plugin</code> 就是插件，基于事件流框架 <code>Tapable</code>，插件可以扩展 Webpack 的功能，在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/*
    必须是一个类
    必须要有一个 apply 函数
    要调用 complier API 来影响打包结果
*/</span>

<span class="token keyword">class</span> <span class="token class-name">LicenseWebpackPlugin</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">parmas</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parmas<span class="token punctuation">)</span> 
    <span class="token punctuation">}</span>
    <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">complier</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        complier<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>emit<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span><span class="token string">&#39;LicenseWebpackPlugin&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compliation<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>compliation<span class="token punctuation">.</span>assets<span class="token punctuation">)</span>
            compliation<span class="token punctuation">.</span>assets<span class="token punctuation">[</span><span class="token string">&#39;LICENSE&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
                <span class="token function-variable function">source</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
The MIT License (MIT)

Copyright (c) 2013-present, Yuxi (Evan) You

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &quot;Software&quot;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
</span><span class="token template-punctuation string">\`</span></span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> LicenseWebpackPlugin<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Loader</code> 在 module.rules 中配置，作为模块的解析规则，类型为数组。每一项都是一个 <code>Object</code>，内部包含了 <code>test</code>(类型文件)、<code>loader</code>、<code>options</code> (参数)等属性。</p><p><code>Plugin</code> 在 plugins 中单独配置，类型为数组，每一项是一个 Plugin 的 <mark>实例</mark> ，参数都通过构造函数传入。</p><h2 id="文件监听原理" tabindex="-1"><a class="header-anchor" href="#文件监听原理"><span>文件监听原理</span></a></h2><p>原理：轮询判断文件的最后编辑时间是否变化，变化后根据配置的时间执行重新打包</p><p>Webpack开启监听模式，有两种方式：</p><ul><li>启动 webpack 命令时，带上 <code>--watch</code> 参数</li><li>在配置 webpack.config.js 中设置 <code>watch:true</code></li></ul><h2 id="webpack-的热更新原理" tabindex="-1"><a class="header-anchor" href="#webpack-的热更新原理"><span>Webpack 的热更新原理</span></a></h2><p>HMR的核心就是客户端从服务端拉取更新后的文件，准确的说是 <code>chunk diff</code> (chunk 需要更新的部分)，实际上 WDS 与浏览器之间维护了一个 <code>Websocket</code>（下图4），当本地资源发生变化时，WDS 会向浏览器推送更新，并带上重新构建后的 hash。然后客户端会向 WDS 发起 Ajax 请求来获取更改内容(文件列表、hash)，这样客户端就可以再借助这些信息继续向 WDS 发起 jsonp 请求获取该chunk的增量更新。</p><figure><img src="`+u+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li><p><code>watch①</code>：在 webpack 的 watch 模式下，文件系统中某一个文件发生修改，webpack 监听到文件变化，根据配置文件对模块 <mark>重新编译打包</mark> ，并将打包后的代码通过简单的 JavaScript 对象保存在内存中。</p></li><li><p><code>watch③</code>：webpack-dev-server 对文件变化的一个监控，变化后会通知浏览器端对应用进行 <mark>刷新</mark> 。</p></li><li><p><code>socket④</code>：WDS 与浏览器之间维护了一个 <code>Websocket</code>，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，最主要信息还是新模块的 hash 值。</p><ul><li>webpack-dev-server 修改了webpack 配置中的 entry 属性，在里面添加了 webpack-dev-client 的代码，这样在最后的 bundle.js 文件中就会有接收 websocket 消息的代码了。</li></ul></li></ul><figure><img src="'+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="文件指纹是什么" tabindex="-1"><a class="header-anchor" href="#文件指纹是什么"><span>文件指纹是什么</span></a></h2><p>文件指纹是打包后输出的文件名的后缀。</p><ul><li><code>Hash</code>：和整个项目的构建相关，只要项目文件有修改，整个项目构建的 hash 值就会更改</li><li><code>Chunkhash</code>：和 Webpack 打包的 chunk 有关，不同的 entry 会生出不同的 chunkhash</li><li><code>Contenthash</code>：根据文件内容来定义 hash，文件内容不变，则 contenthash 不变</li></ul><p>设置指纹</p><ul><li>js：output中 filename直接设置</li><li>css：借助插件MiniCssExtractPlugin设置filename。</li><li>图片：file-loader的name</li></ul>',32))])}const h=e(d,[["render",v],["__file","08_package.html.vue"]]),f=JSON.parse('{"path":"/Efficiency/webpack/08_package.html","title":"webpack打包原理","lang":"zh-CN","frontmatter":{"title":"webpack打包原理","order":8,"description":"原链接 | 掘金 webpack 构建流程 Webpack 的运行流程是一个串行的过程,从启动到结束会依次执行以下流程 : 初始化参数：从配置文件和 Shell 语句中读取与合并参数,得出最终的参数。 开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译。 确定入口：根据配置中的 entr...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/Efficiency/webpack/08_package.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"webpack打包原理"}],["meta",{"property":"og:description","content":"原链接 | 掘金 webpack 构建流程 Webpack 的运行流程是一个串行的过程,从启动到结束会依次执行以下流程 : 初始化参数：从配置文件和 Shell 语句中读取与合并参数,得出最终的参数。 开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译。 确定入口：根据配置中的 entr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T13:13:32.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-03-19T13:13:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"webpack打包原理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-19T13:13:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"webpack 构建流程","slug":"webpack-构建流程","link":"#webpack-构建流程","children":[]},{"level":2,"title":"简易复现","slug":"简易复现","link":"#简易复现","children":[]},{"level":2,"title":"Loader和Plugin的区别","slug":"loader和plugin的区别","link":"#loader和plugin的区别","children":[]},{"level":2,"title":"文件监听原理","slug":"文件监听原理","link":"#文件监听原理","children":[]},{"level":2,"title":"Webpack 的热更新原理","slug":"webpack-的热更新原理","link":"#webpack-的热更新原理","children":[]},{"level":2,"title":"文件指纹是什么","slug":"文件指纹是什么","link":"#文件指纹是什么","children":[]}],"git":{"createdTime":1710854012000,"updatedTime":1710854012000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":1}]},"readingTime":{"minutes":7.35,"words":2206},"filePathRelative":"Efficiency/webpack/08_package.md","localizedDate":"2024年3月19日","excerpt":"<p><a href=\\"https://juejin.cn/post/6844904038543130637#heading-21\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">原链接 | 掘金</a></p>\\n<h2>webpack 构建流程</h2>\\n<p>Webpack 的运行流程是一个串行的过程,从启动到结束会依次执行以下流程 :</p>\\n<ol>\\n<li>初始化参数：从配置文件和 Shell 语句中读取与合并参数,得出最终的参数。</li>\\n<li>开始编译：用上一步得到的参数初始化 <code>Compiler</code> 对象，加载所有配置的插件，执行对象的 <code>run</code> 方法开始执行编译。</li>\\n<li>确定入口：根据配置中的 <code>entry</code> 找出所有的入口文件。</li>\\n<li>编译模块：从入口文件出发,调用所有配置的 <code>Loader</code> 对模块进行翻译,再找出该模块依赖的模块,再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理。</li>\\n<li>完成模块编译：在经过第 4 步使用 <code>Loader</code> 翻译完所有模块后,得到了每个模块被翻译后的最终内容以及它们之间的依赖关系。</li>\\n<li>输出资源：根据入口和模块之间的依赖关系,组装成一个个包含多个模块的 <code>Chunk</code>,再把每个 <code>Chunk</code> 转换成一个单独的文件加入到输出列表,这步是可以修改输出内容的最后机会。</li>\\n<li>输出完成：在确定好输出内容后,根据配置确定输出的路径和文件名,把文件内容写入到文件系统。</li>\\n</ol>","autoDesc":true}');export{h as comp,f as data};
