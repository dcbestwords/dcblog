import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o,c as l,e as a,a as s,b as e,d as c,r as i}from"./app--IULgkuy.js";const r="/dcblog/assets/16495724443983-CMh4e-Sz.jpg",u="/dcblog/assets/16495730791263-B19fUsYi.jpg",d="/dcblog/assets/16495732600677-CkjBogMg.jpg",k="/dcblog/assets/16495743331507-WrcBMthx.jpg",m={},b={href:"https://www.webpackjs.com/concepts/",target:"_blank",rel:"noopener noreferrer"};function v(g,n){const t=i("ExternalLinkIcon");return o(),l("div",null,[n[3]||(n[3]=a('<p>webpack是基于模块化的打包（构建）工具，它把一切视为模块</p><p>它通过一个开发时态的 <mark>入口模块</mark> 为起点，分析出所有的依赖关系，然后经过一系列的过程（压缩、合并），最终生成运行时态的文件。</p><p>webpack的特点：</p><ul><li><strong>为前端工程化而生</strong>：webpack致力于解决前端工程化，特别是浏览器端工程化中遇到的问题，让开发者集中注意力编写业务代码，而把工程化过程中的问题全部交给webpack来处理</li><li><strong>简单易用</strong>：支持零配置，可以不用写任何一行额外的代码就使用webpack</li><li><strong>强大的生态</strong>：webpack是非常灵活、可以扩展的，webpack本身的功能并不多，但它提供了一些可以扩展其功能的机制，使得一些第三方库可以融于到webpack中</li><li><strong>基于nodejs</strong>：由于webpack在构建的过程中需要 <mark>读取文件</mark> ，因此它是运行在<code>node</code>环境中的</li><li><strong>基于模块化</strong>：webpack在构建过程中要分析依赖关系，方式是通过模块化导入语句进行分析的，它支持各种模块化标准，包括但不限于CommonJS、ES6 Module</li></ul><p>构建其实是工程化、自动化思想在前端开发中的体现，将一系列流程用代码去实现，让代码自动化地执行这一系列复杂的流程。</p><p>构建可以实现如下内容：</p><ul><li>代码转换：将 <em>TypeScript</em>/<em>ES6</em> 编译成 <em>JavaScript</em>、将 <em>SCSS</em> 编译成 <em>CSS</em> 等。</li><li>文件优化：压缩 <em>JavaScript</em>、<em>CSS</em>、<em>HTML</em> 代码，压缩合并图片等。</li><li>代码分割：提取多个页面的公共代码，提取首屏不需要执行部分代码让其异步加载。</li><li>模块合并：在采用模块化的项目里会有很多个模块和文件，需要通过构建功能将模块分类合并成一个文件。</li><li>自动刷新：监听本地源代码变化，自动重新构建、刷新浏览器。</li><li>代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。</li><li>自动发布：更新代码后，自动构建出线上发布代码并传输给发布系统。</li></ul><p>官网上有这么一段话来介绍 <em>webpack</em>：</p><blockquote><p><em>webpack</em> 是一个现代 <em>JavaScript</em> 应用程序的模块打包器（<em>module bundler</em>）。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。</p></blockquote><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',10)),s("p",null,[n[1]||(n[1]=s("em",null,"webpack",-1)),n[2]||(n[2]=e(" 官方文档地址：")),s("a",b,[n[0]||(n[0]=e("https://www.webpackjs.com/concepts/")),c(t)])]),n[4]||(n[4]=a(`<h2 id="一、webpack的安装" tabindex="-1"><a class="header-anchor" href="#一、webpack的安装"><span>一、webpack的安装</span></a></h2><p>webpack通过npm安装，它提供了两个包：</p><ul><li>webpack：核心包，包含了webpack构建过程中要用到的所有api</li><li>webpack-cli：提供一个简单的cli命令，它调用了webpack核心包的api，来完成构建过程</li></ul><p>安装方式：</p><ul><li>全局安装：可以全局使用webpack命令，但是无法为不同项目对应不同的webpack版本</li><li><strong>本地安装</strong>：推荐，每个项目都使用自己的webpack版本进行构建</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>npm i <span class="token operator">-</span><span class="token constant">D</span> webpack webpack<span class="token operator">-</span>cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="二、使用" tabindex="-1"><a class="header-anchor" href="#二、使用"><span>二、使用</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>webpack
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例：</strong></p><ul><li>对应目录： <img src="`+u+`" alt="" loading="lazy"></li></ul><p>其中 <strong>src</strong> 目录用来存放源文件</p><ul><li><em>index.js</em> 文件内容</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> module_1 <span class="token keyword">from</span> <span class="token string">&#39;./module1&#39;</span>
<span class="token keyword">import</span> module_2 <span class="token keyword">from</span> <span class="token string">&#39;./module2&#39;</span>
<span class="token keyword">import</span> module_3 <span class="token keyword">from</span> <span class="token string">&#39;./module3&#39;</span>

<span class="token function">module_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">module_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">module_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>各个 <em>module.js</em> 文件内容</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// module1.js 文件内容</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">module_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;这是module_1模块&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// module2.js 文件内容</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">module_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;这是module_2模块&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// module3.js 文件内容</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">module_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;这是module_3模块&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，在当前工程目录下执行<code>webpack</code>会以<code>./src/index.js</code>作为入口文件分析依赖关系，打包到<code>./dist/main.js</code>文件中</p><p>执行<strong>webpack</strong>，出现下面的提示：</p><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们也可以通过 webpack 的配置文件，来精确控制 webpack 的打包</p><ul><li>在根目录下创建 <code>webpack.config.js</code> 配置文件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span><span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span> <span class="token comment">// development production生成文件的方式</span>
    <span class="token literal-property property">devtool</span><span class="token operator">:</span><span class="token string">&quot;source-map&quot;</span><span class="token punctuation">,</span> <span class="token comment">// ** 方便调试 **</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 入口文件</span>
    <span class="token comment">// 出口文件</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 必须是绝对路径</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;app.js&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中：</p><ul><li>entry:源文件的入口文件</li><li>output:webpack打包之后生成文件的路径 <ul><li>path:打包生成文件的绝对路径</li><li>filename:生成文件的名字</li></ul></li><li>mode:打包模式，development 开发模式 production 生成模式，这会影响最终生成文件的内容格式</li><li>devtool:由于经过webpack打包之后，源文件并不易读，因此当运行发生错误的时候，我们更加希望能看到源代码中的错误，而不是转换后代码的错误。也就是说<strong>错误的时候会直接帮我们提示在真正代码的位置中出现的问题，而不是编译之后的代码</strong></li></ul><p>我们还可以在<code>package.json</code>文件的脚本中修改运行webpack的执行命令</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">...</span>
<span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;dev&quot;</span><span class="token operator">:</span><span class="token string">&quot;webpack&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后要运行webpack，我们可以直接执行 <code>npm run dev</code> 命令</p><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',27))])}const y=p(m,[["render",v],["__file","02_Introduction.html.vue"]]),h=JSON.parse('{"path":"/Efficiency/webpack/02_Introduction.html","title":"webpack 简介","lang":"zh-CN","frontmatter":{"title":"webpack 简介","order":2,"description":"webpack是基于模块化的打包（构建）工具，它把一切视为模块 它通过一个开发时态的 入口模块 为起点，分析出所有的依赖关系，然后经过一系列的过程（压缩、合并），最终生成运行时态的文件。 webpack的特点： 为前端工程化而生：webpack致力于解决前端工程化，特别是浏览器端工程化中遇到的问题，让开发者集中注意力编写业务代码，而把工程化过程中的问题...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/Efficiency/webpack/02_Introduction.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"webpack 简介"}],["meta",{"property":"og:description","content":"webpack是基于模块化的打包（构建）工具，它把一切视为模块 它通过一个开发时态的 入口模块 为起点，分析出所有的依赖关系，然后经过一系列的过程（压缩、合并），最终生成运行时态的文件。 webpack的特点： 为前端工程化而生：webpack致力于解决前端工程化，特别是浏览器端工程化中遇到的问题，让开发者集中注意力编写业务代码，而把工程化过程中的问题..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T13:13:32.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-03-19T13:13:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"webpack 简介\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-19T13:13:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、webpack的安装","slug":"一、webpack的安装","link":"#一、webpack的安装","children":[]},{"level":2,"title":"二、使用","slug":"二、使用","link":"#二、使用","children":[]}],"git":{"createdTime":1710854012000,"updatedTime":1710854012000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":1}]},"readingTime":{"minutes":4.18,"words":1254},"filePathRelative":"Efficiency/webpack/02_Introduction.md","localizedDate":"2024年3月19日","excerpt":"<p>webpack是基于模块化的打包（构建）工具，它把一切视为模块</p>\\n<p>它通过一个开发时态的 <mark>入口模块</mark> 为起点，分析出所有的依赖关系，然后经过一系列的过程（压缩、合并），最终生成运行时态的文件。</p>\\n<p>webpack的特点：</p>\\n<ul>\\n<li><strong>为前端工程化而生</strong>：webpack致力于解决前端工程化，特别是浏览器端工程化中遇到的问题，让开发者集中注意力编写业务代码，而把工程化过程中的问题全部交给webpack来处理</li>\\n<li><strong>简单易用</strong>：支持零配置，可以不用写任何一行额外的代码就使用webpack</li>\\n<li><strong>强大的生态</strong>：webpack是非常灵活、可以扩展的，webpack本身的功能并不多，但它提供了一些可以扩展其功能的机制，使得一些第三方库可以融于到webpack中</li>\\n<li><strong>基于nodejs</strong>：由于webpack在构建的过程中需要 <mark>读取文件</mark> ，因此它是运行在<code>node</code>环境中的</li>\\n<li><strong>基于模块化</strong>：webpack在构建过程中要分析依赖关系，方式是通过模块化导入语句进行分析的，它支持各种模块化标准，包括但不限于CommonJS、ES6 Module</li>\\n</ul>","autoDesc":true}');export{y as comp,h as data};
