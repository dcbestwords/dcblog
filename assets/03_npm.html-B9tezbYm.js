import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as n}from"./app-CJfNTzN_.js";const t="/assets/1-CWfWU3Kd.jpg",l="/assets/npm-Beji2EQ-.jpg",h="/assets/npm_init-BCA_ElJz.jpg",p="/assets/yarn-D2p4O-tb.jpg",k={};function d(r,s){return n(),a("div",null,s[0]||(s[0]=[e('<figure><img src="'+t+'" alt="06_包管理工具" tabindex="0" loading="lazy"><figcaption>06_包管理工具</figcaption></figure><h2 id="一、概念介绍" tabindex="-1"><a class="header-anchor" href="#一、概念介绍"><span>一、概念介绍</span></a></h2><h3 id="_1-包是什么" tabindex="-1"><a class="header-anchor" href="#_1-包是什么"><span>1. 包是什么</span></a></h3><blockquote><p>『包』英文单词是 <code>package</code> ，代表了一组特定功能的源码集合，就是将一些预先设计好的功能或者说 API 封装到一个文件夹，提供给开发者使用。</p></blockquote><h3 id="_2-包管理工具" tabindex="-1"><a class="header-anchor" href="#_2-包管理工具"><span>2. 包管理工具</span></a></h3><p>管理『包』的应用软件，可以对「包」进行 <code>下载安装</code> ， <code>更新</code> ， <code>删除</code>， <code>上传</code>等操作</p><p>借助包管理工具，可以快速开发项目，提升开发效率</p><p>包管理工具是一个通用的概念，很多编程语言都有包管理工具，所以 <span style="color:red;">掌握好包管理工具非常重要</span></p><h3 id="_3-包加载的基本流程" tabindex="-1"><a class="header-anchor" href="#_3-包加载的基本流程"><span>3. 包加载的基本流程</span></a></h3><p>nodejs 对 npm 支持非常良好</p><p>当使用 nodejs 导入模块时，如果模块路径不是以 ./ 或 ../ 开头，则 node 会认为导入的模块来自于 node_modules 目录，例如：</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> _</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;lodash&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><ol><li>优先在当前文件夹下 node_modules 中寻找同名的文件夹 <ul><li>找到该第三方包中的<code>package.json</code>文件，并且找到里面的<code>main</code>属性对应的入口模块，该入口模块即为加载的第三方模块。</li><li>如果在要加载的第三方包中没有找到<code>package.json</code>文件或者是<code>package.json</code>文件中没有<code>main</code>属性，则默认加载第三方包中的<code>index.js</code>文件。</li><li>如果在加载第三方模块的文件的同级目录没有找到<code>node_modules</code>文件夹，或者以上所有情况都没有找到，则跳到第 2 步继续查找。</li></ul></li><li>在上级目录中下的 node_modules 中寻找同名的文件夹，直至找到磁盘根目录，如果一直找到该模块的磁盘根路径都没有找到，则会报错：<code>can not find module xxx</code>。</li></ol><h3 id="_3-常用的包管理工具" tabindex="-1"><a class="header-anchor" href="#_3-常用的包管理工具"><span>3. 常用的包管理工具</span></a></h3><p>下面列举了前端常用的包管理工具</p><ul><li><code>npm</code></li><li>yarn</li><li>cnpm</li></ul><h2 id="二、npm" tabindex="-1"><a class="header-anchor" href="#二、npm"><span>二、npm</span></a></h2><blockquote><p>npm 全称 <code>Node Package Manager</code> ，翻译为中文意思是『Node 的包管理工具』</p></blockquote><p>npm 是 node.js 官方内置的包管理工具，是 <span style="color:red;">必须要掌握住的工具</span></p><h3 id="_1-npm-的安装" tabindex="-1"><a class="header-anchor" href="#_1-npm-的安装"><span>1. npm 的安装</span></a></h3><p>node.js 在安装时会 <code>自动安装 npm</code> ，所以如果你已经安装了 node.js，可以直接使用 npm</p><p>可以通过 <code>npm -v</code> 查看版本号测试，如果显示版本号说明安装成功，反之安装失败</p><figure><img src="'+l+'" alt="06_包管理工具" tabindex="0" loading="lazy"><figcaption>06_包管理工具</figcaption></figure><blockquote><p>查看版本时可能与上图版本号不一样，不过不影响正常使用</p></blockquote><h3 id="_2-npm-基本使用" tabindex="-1"><a class="header-anchor" href="#_2-npm-基本使用"><span>2. npm 基本使用</span></a></h3><h4 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h4><p>创建一个空目录，然后以此目录作为工作目录 <span style="color:red;">启动命令行工具</span>，执行 <code>npm init</code></p><figure><img src="'+h+`" alt="06_包管理工具" tabindex="0" loading="lazy"><figcaption>06_包管理工具</figcaption></figure><p><code>npm init</code> 命令的作用是将文件夹初始化为一个『包』， <code>交互式创建 package.json 文件</code></p><p><code>package.json</code> 是包的配置文件，每个包都必须要有 <code>package.json</code></p><p><code>package.json</code> 内容示例：</p><div class="language-json" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;01_npm&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;version&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.0.0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;description&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;main&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;index.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;echo </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Error: no test specified</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &amp;&amp; exit 1&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;author&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;license&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ISC&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>属性翻译</p><div class="language-json" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	&quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1-npm&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, 		</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">#包的名字</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	&quot;version&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.0.0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, 	</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">#包的版本</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	&quot;description&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, 		</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">#包的描述</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	&quot;main&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;index.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, 	</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">#包的入口文件</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	&quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: { 		    </span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">#脚本配置</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">		&quot;test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;echo </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Error: no test specified</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &amp;&amp; exit 1&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	},</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	&quot;author&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, 			</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">#作者</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	&quot;license&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ISC&quot;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> 		#开源证书</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><blockquote><p>初始化的过程中还有一些注意事项：</p><ol><li>package name (<code>包名</code>) 不能使用中文、大写，默认值是<code>文件夹的名称</code>，所以文件夹名称也不能使用中文和大写</li><li>version (<code>版本号</code>)要求 <code>x.x.x</code> 的形式定义，<code>x</code> 必须是数字，默认值是 <code>1.0.0</code></li><li>ISC 证书与 MIT 证书功能上是相同的，关于开源证书扩展阅读 http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html</li><li><code>package.json</code> 可以手动创建与修改</li><li>使用 <code>npm init -y</code> 或者 <code>npm init --yes</code> 极速创建 <code>package.json</code></li></ol></blockquote><h4 id="搜索包" tabindex="-1"><a class="header-anchor" href="#搜索包"><span>搜索包</span></a></h4><p>搜索包的方式有两种</p><ol><li><p>命令行 『npm s/search 关键字』</p></li><li><p><code>网站搜索</code> 网址是 <code>https://www.npmjs.com/</code>（推荐）</p></li></ol><h4 id="下载安装包" tabindex="-1"><a class="header-anchor" href="#下载安装包"><span>下载安装包</span></a></h4><p>我们可以通过 <code>npm install</code> 和 <code>npm i</code> 命令安装包</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 格式</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">包</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">名&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">包</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">名&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 示例</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uniq</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uniq</span></span></code></pre></div><p>运行之后文件夹下会增加两个资源</p><ul><li><code>node_modules 文件夹</code> 存放下载的包</li><li><code>package-lock.json 包的锁文件</code>，用来锁定包的版本</li></ul><blockquote><p>安装 uniq 之后， uniq 就是当前这个包的一个 <code>依赖包</code> ，有时会简称为 <code>依赖</code></p><p>比如我们创建一个包名字为 A，A 中安装了包名字是 B，我们就说 <span style="color:red;">B 是 A 的一个依赖包</span>，也会说 <span style="color:red;">A 依赖 B</span></p><p>如果本地安装的包带有 CLI，npm 会将它的 CLI 脚本文件放置到<code>node_modules/.bin</code>下，使用命令<code>npx 命令名</code>即可调用</p></blockquote><h3 id="_3-配置镜像源" tabindex="-1"><a class="header-anchor" href="#_3-配置镜像源"><span>3. 配置镜像源</span></a></h3><p>由于 npm 默认的下载地址在国外，有时候会被墙，导致无法下载或者下载很慢。因此，我们可以尝试切换成，从其他的镜像源下载 npm 包。</p><p>切换镜像源，有下面这几种方式：</p><ul><li>方式 1：临时切换镜像源。</li><li>方式 2：切换镜像源</li><li>方式 3：通过 NRM 切换镜像源（最为推荐的方式）。</li><li>方式 4：cnpm</li></ul><h4 id="直接配置" tabindex="-1"><a class="header-anchor" href="#直接配置"><span>直接配置</span></a></h4><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> express</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --registry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://registry.npmmirror.com/</span></span></code></pre></div><p>安装指定包的时候，追加 <code>--registry</code>参数。</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> registry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://registry.npmmirror.com/</span></span></code></pre></div><p>执行上述命令后，以后下载所有 npm 包的时候，都会改为使用淘宝的镜像源。</p><h4 id="工具配置" tabindex="-1"><a class="header-anchor" href="#工具配置"><span>工具配置</span></a></h4><p>使用 <code>nrm</code> 配置 npm 的镜像地址</p><ol><li><p>安装 nrm</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> i</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -g</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nrm</span></span></code></pre></div></li><li><p>查看可选的源</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nrm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls</span></span></code></pre></div></li><li><p>修改镜像</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nrm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> use</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> taobao</span></span></code></pre></div></li><li><p>检查是否配置成功（选做）</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list</span></span></code></pre></div><p>检查 registry 地址是否为 <code>https://registry.npmmirror.com/</code> , 如果 <code>是</code> 则表明成功</p></li></ol><h4 id="使用-cnpm-替换-npm" tabindex="-1"><a class="header-anchor" href="#使用-cnpm-替换-npm"><span>使用 cnpm 替换 npm</span></a></h4><h3 id="_4-生产环境与开发环境" tabindex="-1"><a class="header-anchor" href="#_4-生产环境与开发环境"><span>4. 生产环境与开发环境</span></a></h3><p><code>开发环境</code> 是程序员 <span style="color:red;">专门用来写代码</span> 的环境，一般是指程序员的电脑，开发环境的项目一般 <span style="color:red;">只能程序员自己访问</span></p><p><code>生产环境</code> 是项目 <span style="color:red;">代码正式运行</span> 的环境，一般是指正式的服务器电脑，生产环境的项目一般 <span style="color:red;">每个客户都可以访问</span></p><p>如何优雅的让 node 知道处于什么环境，是极其重要的</p><p>比如，我们有如下的 js 代码：</p><p><strong>index.js:</strong></p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;没有环境变量&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">env</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">NODE_ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">env</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">NODE_ENV</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;development&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;开发环境&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">env</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">NODE_ENV</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;production&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;生产环境&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">env</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">NODE_ENV</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;test&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;测试环境&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre></div><p>这段代码的意思，就是检测系统环境的<code>NODE_ENV</code>值，来判定 node 程序处于何种环境</p><p>当然，不同系统环境，配置环境变量各不相同，所以，我们必须使用第三方包来帮助我们进行配置</p><p>下载第三方包 <code>cross-env</code>，这种使用命令行的，肯定是开发依赖，所以，我们直接下载开发依赖即可</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> i</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -D</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cross-env</span></span></code></pre></div><p>在<code>package.json</code>中加入如下代码</p><div class="language-json" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;start&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;cross-env NODE_ENV=development node index.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;build&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;cross-env NODE_ENV=production node index.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;cross-env NODE_ENV=test node index.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span></code></pre></div><h3 id="_5-生产依赖与开发依赖" tabindex="-1"><a class="header-anchor" href="#_5-生产依赖与开发依赖"><span>5. 生产依赖与开发依赖</span></a></h3><p>我们可以在安装时设置选项来区分 <code>依赖的类型</code>，目前分为两类：</p><table><thead><tr><th>类型</th><th>命令</th><th>补充</th></tr></thead><tbody><tr><td>生产依赖</td><td>npm i -S uniq <br>npm i --save uniq</td><td>-S 等效于 --save，<code>-S 是默认选项</code><br>包信息保存在 package.json 中 <code>dependencies</code> 属性</td></tr><tr><td>开发依赖</td><td>npm i -D less<br>npm i --save-dev less</td><td>-D 等效于 --save-dev<br>包信息保存在 package.json 中 <code>devDependencies</code> 属性</td></tr></tbody></table><blockquote><p>举个例子方便大家理解，比如说做蛋炒饭需要<code>大米</code>，<code>油</code>，<code>葱</code>，<code>鸡蛋</code>，<code>锅</code>，<code>煤气</code>，<code>铲子</code>等</p><p>其中<code>锅</code>， <code>煤气</code>， <code>铲子</code>属于开发依赖，只在制作阶段使用</p><p>而 <code>大米</code>， <code>油</code>， <code>葱</code>， <code>鸡蛋</code>属于生产依赖，在制作与最终食用都会用到</p><p>所以 <code>开发依赖</code> 是只在开发阶段使用的依赖包，而 <code>生产依赖</code> 是开发阶段和最终上线运行阶段都用到的依赖包</p></blockquote><h3 id="_6-全局安装" tabindex="-1"><a class="header-anchor" href="#_6-全局安装"><span>6. 全局安装</span></a></h3><p>我们可以执行安装选项 -g 进行全局安装</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> i</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -g</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nodemon</span></span></code></pre></div><p>全局安装完成之后就可以在命令行的任何位置运行 <code>nodemon</code> 命令</p><p>该命令的作用是 <code>自动重启 node 应用程序</code></p><blockquote><p>说明：</p><ul><li>全局安装的命令不受工作目录位置影响</li><li>可以通过 <code>npm root -g</code> 可以查看全局安装包的位置</li><li><span style="color:red;">不是所有的包都适合全局安装</span>，只有全局类的工具才适合，可以通过<span style="color:red;">查看包的官方文档来确定安装方式</span>，这里先不必太纠结</li></ul></blockquote><h3 id="_7-安装包依赖" tabindex="-1"><a class="header-anchor" href="#_7-安装包依赖"><span>7. 安装包依赖</span></a></h3><p>在项目协作中有一个常用的命令就是 <code>npm i</code>，通过该命令可以依据 <code>package.json</code> 和 <code>package-lock.json</code> 的依赖声明安装项目依赖</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> i</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span></span></code></pre></div><blockquote><p>node_modules 文件夹大多数情况都不会存入版本库</p></blockquote><h3 id="_8-安装指定版本的包" tabindex="-1"><a class="header-anchor" href="#_8-安装指定版本的包"><span>8. 安装指定版本的包</span></a></h3><p>项目中可能会遇到版本不匹配的情况，有时就需要安装指定版本的包，可以使用下面的命令的</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 格式</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">包名@版本</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">号&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 示例</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jquery@1.11.2</span></span></code></pre></div><h3 id="_9-删除依赖" tabindex="-1"><a class="header-anchor" href="#_9-删除依赖"><span>9. 删除依赖</span></a></h3><p>项目中可能需要删除某些不需要的包，可以使用下面的命令</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 局部删除</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remove</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uniq</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> r</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uniq</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 全局删除</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remove</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -g</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nodemon</span></span></code></pre></div><h3 id="_10-配置命令别名" tabindex="-1"><a class="header-anchor" href="#_10-配置命令别名"><span>10. 配置命令别名</span></a></h3><p>通过配置命令别名可以更简单的执行命令</p><p>配置 package.json 中的 <code>scripts</code> 属性</p><div class="language-json" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">	...</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	&quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">		&quot;server&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;node server.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">		&quot;start&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;node index.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	},</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">	...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>配置完成之后，可以使用别名执行命令</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> server</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> start</span></span></code></pre></div><p>不过 <code>start</code> 别名比较特别，使用时可以省略 <code>run</code></p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> start</span></span></code></pre></div><blockquote><p>补充说明：</p><ul><li><code>npm start</code> 是项目中常用的一个命令，一般用来启动项目</li><li><code>npm run</code> 有自动向上级目录查找的特性，跟 <code>require</code> 函数也一样</li><li>对于陌生的项目，我们可以通过查看 <code>scripts</code> 属性来参考项目的一些操作</li></ul></blockquote><h3 id="_11-npx" tabindex="-1"><a class="header-anchor" href="#_11-npx"><span>11. npx</span></a></h3><p>npm 从 5.2 版开始，增加了 npx 命令，具体使用参考<a href="https://www.ruanyifeng.com/blog/2019/02/npx.html" target="_blank" rel="noopener noreferrer">npx 使用教程 - 阮一峰的网络日志 </a></p><h2 id="三、cnpm" tabindex="-1"><a class="header-anchor" href="#三、cnpm"><span>三、cnpm</span></a></h2><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h3><p>cnpm 是一个淘宝构建的<code>npmjs.com</code>的完整镜像，也称为『淘宝镜像』，网址https://npmmirror.com/ cnpm 服务部署在国内 <span style="color:red;">阿里云服务器上</span>，可以提高包的下载速度</p><p>官方也提供了一个全局工具包 <code>cnpm</code> ，操作命令与 npm 大体相同</p><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><p>我们可以通过 npm 来安装 cnpm 工具</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -g</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cnpm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --registry=https://registry.npmmirror.com</span></span></code></pre></div><h3 id="操作命令" tabindex="-1"><a class="header-anchor" href="#操作命令"><span>操作命令</span></a></h3><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>初始化</td><td>cnpm init / cnpm init</td></tr><tr><td>安装包</td><td>cnpm i uniq<br>cnpm i -S uniq<br>cnpm i -D uniq<br>cnpm i -g nodemon</td></tr><tr><td>安装项目依赖</td><td>cnpm i</td></tr><tr><td>删除</td><td>cnpm r uniq</td></tr></tbody></table><blockquote><p>虽然 cnpm 可以提高速度，但是 npm 也可以通过淘宝镜像进行加速，所以 <span style="color:red;">npm 的使用率还是高于 cnpm</span></p></blockquote><h2 id="四、yarn" tabindex="-1"><a class="header-anchor" href="#四、yarn"><span>四、yarn</span></a></h2><figure><img src="`+p+'" alt="06_包管理工具" tabindex="0" loading="lazy"><figcaption>06_包管理工具</figcaption></figure><h3 id="yarn-介绍" tabindex="-1"><a class="header-anchor" href="#yarn-介绍"><span>yarn 介绍</span></a></h3><blockquote><p>yarn 是由 Facebook 在 2016 年推出的新的 Javascript 包管理工具，官方网址：<a href="https://yarnpkg.com/" target="_blank" rel="noopener noreferrer">https://yarnpkg.com/</a></p></blockquote><h3 id="yarn-特点" tabindex="-1"><a class="header-anchor" href="#yarn-特点"><span>yarn 特点</span></a></h3><p>yarn 官方宣称的一些特点</p><ul><li>速度超快：yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。 同时利用并行下载以最大化资源利用率，因此安装速度更快</li><li>超级安全：在执行代码之前，yarn 会通过算法校验每个安装包的完整性</li><li>超级可靠：使用详细、简洁的锁文件格式和明确的安装算法，yarn 能够保证在不同系统上无差异的工作</li></ul><h3 id="yarn-安装" tabindex="-1"><a class="header-anchor" href="#yarn-安装"><span>yarn 安装</span></a></h3><p>我们可以使用 npm 安装 yarn</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> i</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -g</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yarn</span></span></code></pre></div><h3 id="yarn-常用命令" tabindex="-1"><a class="header-anchor" href="#yarn-常用命令"><span>yarn 常用命令</span></a></h3><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>初始化</td><td>yarn init / yarn init -y</td></tr><tr><td>安装包</td><td>yarn add uniq 生产依赖<br>yarn add less --dev 开发依赖<br>yarn global add nodemon 全局安装</td></tr><tr><td>删除包</td><td>yarn remove uniq 删除项目依赖包<br>yarn global remove nodemon 全局删除包</td></tr><tr><td>安装项目依赖</td><td>yarn</td></tr><tr><td>运行命令别名</td><td>yarn &lt;别名&gt; # 不需要添加 <code>run</code></td></tr></tbody></table><blockquote><p>思考题：</p><p>这里有个小问题就是 <span style="color:red;">全局安装的包不可用</span>，yarn 全局安装包的位置可以通过 <code>yarn global bin</code>来查看，</p><p>那你有没有办法使 yarn 全局安装的包能够正常运行？</p><ul><li>配置 path 环境</li></ul></blockquote><h3 id="yarn-配置淘宝镜像" tabindex="-1"><a class="header-anchor" href="#yarn-配置淘宝镜像"><span>yarn 配置淘宝镜像</span></a></h3><p>可以通过如下命令配置淘宝镜像</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> registry</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://registry.npmmirror.com/</span></span></code></pre></div><p>可以通过 <code>yarn config list</code> 查看 yarn 的配置项</p><h3 id="npm-和-yarn-选择" tabindex="-1"><a class="header-anchor" href="#npm-和-yarn-选择"><span>npm 和 yarn 选择</span></a></h3><p>大家可以根据不同的场景进行选择</p><ol><li><p>个人项目</p><p>如果是个人项目，<span style="color:red;">哪个工具都可以</span>，可以根据自己的喜好来选择</p></li><li><p>公司项目如果是公司要根据项目代码来选择，可以 <span style="color:red;">通过锁文件判断</span> 项目的包管理工具</p><ul><li>npm 的锁文件为 <code>package-lock.json</code></li><li>yarn 的锁文件为 <code>yarn.lock</code></li></ul></li></ol><blockquote><p>包管理工具 <span style="color:red;">不要混着用，切记，切记，切记</span></p></blockquote><h2 id="五、管理发布包" tabindex="-1"><a class="header-anchor" href="#五、管理发布包"><span>五、管理发布包</span></a></h2><h3 id="创建与发布" tabindex="-1"><a class="header-anchor" href="#创建与发布"><span>创建与发布</span></a></h3><p>我们可以将自己开发的工具包发布到 npm 服务上，方便自己和其他开发者使用，操作步骤如下：</p><ol><li><p>创建文件夹，并创建文件 index.js， 在文件中声明函数，使用 module.exports 暴露</p></li><li><p>npm 初始化工具包，package.json 填写包的信息 (包的名字是唯一的)</p></li><li><p>注册账号 <a href="https://yarnpkg.com/" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/signup</a></p></li><li><p>激活账号 （ <span style="color:red;">一定要激活账号</span> ）</p></li><li><p>修改为官方的官方镜像 (命令行中运行 <code>nrm use npm</code> )</p></li><li><p>命令行下 <code>npm login</code> 填写相关用户信息</p></li><li><p>命令行下 <code>npm publish</code> 提交包 👌</p></li></ol><h3 id="更新包" tabindex="-1"><a class="header-anchor" href="#更新包"><span>更新包</span></a></h3><p>后续可以对自己发布的包进行更新，操作步骤如下</p><ol><li><p>更新包中的代码</p></li><li><p>测试代码是否可用</p></li><li><p>修改 <code>package.json</code> 中的版本号</p></li><li><p>发布更新</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> publish</span></span></code></pre></div></li></ol><h3 id="删除包" tabindex="-1"><a class="header-anchor" href="#删除包"><span>删除包</span></a></h3><p>执行如下命令删除包</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> unpublish</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --force</span></span></code></pre></div><blockquote><p>删除包需要满足一定的条件， <a href="https://docs.npmjs.com/policies/unpublish" target="_blank" rel="noopener noreferrer">https://docs.npmjs.com/policies/unpublish</a></p><ul><li>你是包的作者</li><li>发布小于 24 小时</li><li>大于 24 小时后，没有其他包依赖，并且每周小于 300 下载量，并且只有一个维护者</li></ul></blockquote><h2 id="六、扩展内容" tabindex="-1"><a class="header-anchor" href="#六、扩展内容"><span>六、扩展内容</span></a></h2><p>在很多语言中都有包管理工具，比如：</p><table><thead><tr><th>语言</th><th>包管理工具</th></tr></thead><tbody><tr><td>PHP</td><td>composer</td></tr><tr><td>Python</td><td>pip</td></tr><tr><td>Java</td><td>maven</td></tr><tr><td>Go</td><td>go mod</td></tr><tr><td>JavaScript</td><td>npm/yarn/cnpm/other</td></tr><tr><td>Ruby</td><td>rubyGems</td></tr></tbody></table><p>除了编程语言领域有包管理工具之外，操作系统层面也存在包管理工具，不过这个包指的是『<code>软件包</code>』</p><table><thead><tr><th>操作系统</th><th>包管理工具</th><th>网址</th></tr></thead><tbody><tr><td>Centos</td><td>yum</td><td>https://packages.debian.org/stable/</td></tr><tr><td>Ubuntu</td><td>apt</td><td>https://packages.ubuntu.com/</td></tr><tr><td>MacOS</td><td>homebrew</td><td>https://brew.sh/</td></tr><tr><td>Windows</td><td>chocolatey</td><td>https://chocolatey.org/</td></tr></tbody></table>',148)]))}const g=i(k,[["render",d],["__file","03_npm.html.vue"]]),y=JSON.parse('{"path":"/Efficiency/03_npm.html","title":"包管理工具","lang":"zh-CN","frontmatter":{"title":"包管理工具","order":1,"icon":"npm fa-brands","category":["前端"],"tag":["包管理工具"],"description":"06_包管理工具06_包管理工具 一、概念介绍 1. 包是什么 『包』英文单词是 package ，代表了一组特定功能的源码集合，就是将一些预先设计好的功能或者说 API 封装到一个文件夹，提供给开发者使用。 2. 包管理工具 管理『包』的应用软件，可以对「包」进行 下载安装 ， 更新 ， 删除， 上传等操作 借助包管理工具，可以快速开发项目，提升开发...","head":[["meta",{"property":"og:url","content":"https://github.com/Efficiency/03_npm.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"包管理工具"}],["meta",{"property":"og:description","content":"06_包管理工具06_包管理工具 一、概念介绍 1. 包是什么 『包』英文单词是 package ，代表了一组特定功能的源码集合，就是将一些预先设计好的功能或者说 API 封装到一个文件夹，提供给开发者使用。 2. 包管理工具 管理『包』的应用软件，可以对「包」进行 下载安装 ， 更新 ， 删除， 上传等操作 借助包管理工具，可以快速开发项目，提升开发..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-03T11:20:13.000Z"}],["meta",{"property":"article:tag","content":"包管理工具"}],["meta",{"property":"article:modified_time","content":"2024-12-03T11:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"包管理工具\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-03T11:20:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、概念介绍","slug":"一、概念介绍","link":"#一、概念介绍","children":[{"level":3,"title":"1. 包是什么","slug":"_1-包是什么","link":"#_1-包是什么","children":[]},{"level":3,"title":"2. 包管理工具","slug":"_2-包管理工具","link":"#_2-包管理工具","children":[]},{"level":3,"title":"3. 包加载的基本流程","slug":"_3-包加载的基本流程","link":"#_3-包加载的基本流程","children":[]},{"level":3,"title":"3. 常用的包管理工具","slug":"_3-常用的包管理工具","link":"#_3-常用的包管理工具","children":[]}]},{"level":2,"title":"二、npm","slug":"二、npm","link":"#二、npm","children":[{"level":3,"title":"1. npm 的安装","slug":"_1-npm-的安装","link":"#_1-npm-的安装","children":[]},{"level":3,"title":"2. npm 基本使用","slug":"_2-npm-基本使用","link":"#_2-npm-基本使用","children":[]},{"level":3,"title":"3. 配置镜像源","slug":"_3-配置镜像源","link":"#_3-配置镜像源","children":[]},{"level":3,"title":"4. 生产环境与开发环境","slug":"_4-生产环境与开发环境","link":"#_4-生产环境与开发环境","children":[]},{"level":3,"title":"5. 生产依赖与开发依赖","slug":"_5-生产依赖与开发依赖","link":"#_5-生产依赖与开发依赖","children":[]},{"level":3,"title":"6. 全局安装","slug":"_6-全局安装","link":"#_6-全局安装","children":[]},{"level":3,"title":"7. 安装包依赖","slug":"_7-安装包依赖","link":"#_7-安装包依赖","children":[]},{"level":3,"title":"8. 安装指定版本的包","slug":"_8-安装指定版本的包","link":"#_8-安装指定版本的包","children":[]},{"level":3,"title":"9. 删除依赖","slug":"_9-删除依赖","link":"#_9-删除依赖","children":[]},{"level":3,"title":"10. 配置命令别名","slug":"_10-配置命令别名","link":"#_10-配置命令别名","children":[]},{"level":3,"title":"11. npx","slug":"_11-npx","link":"#_11-npx","children":[]}]},{"level":2,"title":"三、cnpm","slug":"三、cnpm","link":"#三、cnpm","children":[{"level":3,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":3,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":3,"title":"操作命令","slug":"操作命令","link":"#操作命令","children":[]}]},{"level":2,"title":"四、yarn","slug":"四、yarn","link":"#四、yarn","children":[{"level":3,"title":"yarn 介绍","slug":"yarn-介绍","link":"#yarn-介绍","children":[]},{"level":3,"title":"yarn 特点","slug":"yarn-特点","link":"#yarn-特点","children":[]},{"level":3,"title":"yarn 安装","slug":"yarn-安装","link":"#yarn-安装","children":[]},{"level":3,"title":"yarn 常用命令","slug":"yarn-常用命令","link":"#yarn-常用命令","children":[]},{"level":3,"title":"yarn 配置淘宝镜像","slug":"yarn-配置淘宝镜像","link":"#yarn-配置淘宝镜像","children":[]},{"level":3,"title":"npm 和 yarn 选择","slug":"npm-和-yarn-选择","link":"#npm-和-yarn-选择","children":[]}]},{"level":2,"title":"五、管理发布包","slug":"五、管理发布包","link":"#五、管理发布包","children":[{"level":3,"title":"创建与发布","slug":"创建与发布","link":"#创建与发布","children":[]},{"level":3,"title":"更新包","slug":"更新包","link":"#更新包","children":[]},{"level":3,"title":"删除包","slug":"删除包","link":"#删除包","children":[]}]},{"level":2,"title":"六、扩展内容","slug":"六、扩展内容","link":"#六、扩展内容","children":[]}],"git":{"createdTime":1710854012000,"updatedTime":1733224813000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":3}]},"readingTime":{"minutes":12.31,"words":3693},"filePathRelative":"Efficiency/03_npm.md","localizedDate":"2024年3月19日","excerpt":"<figure><figcaption>06_包管理工具</figcaption></figure>\\n<h2>一、概念介绍</h2>\\n<h3>1. 包是什么</h3>\\n<blockquote>\\n<p>『包』英文单词是 <code>package</code> ，代表了一组特定功能的源码集合，就是将一些预先设计好的功能或者说 API 封装到一个文件夹，提供给开发者使用。</p>\\n</blockquote>","autoDesc":true}');export{g as comp,y as data};
