import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as t,o as e}from"./app-DfUFj-hx.js";const n={};function h(l,s){return e(),a("div",null,s[0]||(s[0]=[t(`<h2 id="开发服务器" tabindex="-1"><a class="header-anchor" href="#开发服务器"><span>开发服务器</span></a></h2><p>在<strong>开发阶段</strong>，目前遇到的问题是打包、运行、调试过程过于繁琐，回顾一下我们的操作流程：</p><ol><li>编写代码</li><li>控制台运行命令完成打包</li><li>打开页面查看效果</li><li>继续编写代码，回到步骤 2</li></ol><p>并且，我们往往希望把最终生成的代码和页面部署到服务器上，来模拟真实环境</p><p>为了解决这些问题，webpack 官方制作了一个单独的库：<code>webpack-dev-server</code></p><p>首先需要在项目中安装 <code>webpack-dev-server</code>，安装命令为:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> i</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -D</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> webpack-dev-server</span></span></code></pre></div><p>接下来需要在 <code>webpack.config.js</code>进行如下常见的配置：</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">devServer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 打包后是否自动打开</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8090</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 指定端口号</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>针对<code>webpack-dev-server</code>的配置，参考：https://www.webpackjs.com/configuration/dev-server/</p><p>在 <code>package.json</code> 中添加如下代码：</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //...其他配置</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;dev&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;webpack&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;start&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;webpack-dev-server&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span></code></pre></div><p>添加之后我们就可以使用<code>npm start</code>来启动 <code>webpack-dev-server</code>。</p><p>最后需要提出需要注意的一点是，<code>webpack-dev-server</code> 是将资源打包至内存当中，所以可以很快的提供实时刷新功能。其实类似于就是我们之前使用的<code>nodemon</code>的功能，而且更加强大。</p><h2 id="跨域代理" tabindex="-1"><a class="header-anchor" href="#跨域代理"><span>跨域代理</span></a></h2><p>如果你有单独的后端开发服务器 API，并且希望在同域名下发送 API 请求 ，那么代理某些 URL 会很有用。</p><p><code>dev-server</code> 使用了非常强大的 <code>http-proxy-middleware</code> 包</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">devServer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 打包后是否自动打开</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8090</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 指定端口号</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    proxy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;/api&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          target</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;http://127.0.0.1:3001&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          changeOrigin</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          pathRewrite</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;^/api&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},</span></span></code></pre></div><p>前端访问代码：</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fetch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;/api/user&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> json</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">json</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">json</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre></div>`,20)]))}const r=i(n,[["render",h],["__file","04_devSever.html.vue"]]),d=JSON.parse('{"path":"/Efficiency/webpack/04_devSever.html","title":"开发服务器","lang":"zh-CN","frontmatter":{"title":"开发服务器","order":4,"category":["前端"],"tag":["模块化","webpack"],"description":"开发服务器 在开发阶段，目前遇到的问题是打包、运行、调试过程过于繁琐，回顾一下我们的操作流程： 编写代码 控制台运行命令完成打包 打开页面查看效果 继续编写代码，回到步骤 2 并且，我们往往希望把最终生成的代码和页面部署到服务器上，来模拟真实环境 为了解决这些问题，webpack 官方制作了一个单独的库：webpack-dev-server 首先需要在...","head":[["meta",{"property":"og:url","content":"https://github.com/Efficiency/webpack/04_devSever.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"开发服务器"}],["meta",{"property":"og:description","content":"开发服务器 在开发阶段，目前遇到的问题是打包、运行、调试过程过于繁琐，回顾一下我们的操作流程： 编写代码 控制台运行命令完成打包 打开页面查看效果 继续编写代码，回到步骤 2 并且，我们往往希望把最终生成的代码和页面部署到服务器上，来模拟真实环境 为了解决这些问题，webpack 官方制作了一个单独的库：webpack-dev-server 首先需要在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-03T11:20:13.000Z"}],["meta",{"property":"article:tag","content":"模块化"}],["meta",{"property":"article:tag","content":"webpack"}],["meta",{"property":"article:modified_time","content":"2024-12-03T11:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"开发服务器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-03T11:20:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"开发服务器","slug":"开发服务器","link":"#开发服务器","children":[]},{"level":2,"title":"跨域代理","slug":"跨域代理","link":"#跨域代理","children":[]}],"git":{"createdTime":1710854012000,"updatedTime":1733224813000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":2}]},"readingTime":{"minutes":1.49,"words":448},"filePathRelative":"Efficiency/webpack/04_devSever.md","localizedDate":"2024年3月19日","excerpt":"<h2>开发服务器</h2>\\n<p>在<strong>开发阶段</strong>，目前遇到的问题是打包、运行、调试过程过于繁琐，回顾一下我们的操作流程：</p>\\n<ol>\\n<li>编写代码</li>\\n<li>控制台运行命令完成打包</li>\\n<li>打开页面查看效果</li>\\n<li>继续编写代码，回到步骤 2</li>\\n</ol>","autoDesc":true}');export{r as comp,d as data};
