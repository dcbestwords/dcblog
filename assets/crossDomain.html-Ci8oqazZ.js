import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c as i,a as n,b as s,d as l,e as a}from"./app-B3AKQzFo.js";const c="/dcblog/assets/202301121634016-DYw93LNN.png",r="/dcblog/assets/202301121636551-BGMQbt4I.png",d="/dcblog/assets/202301122010888-B0F7Wa0b.png",u="/dcblog/assets/202301122025029-DtITlTos.png",g="/dcblog/assets/202301122045614-CZjDS5hp.png",m="/dcblog/assets/202301122046532-DmWm9DUU.png",h="/dcblog/assets/202301122054396-ChcNk448.png",k="/dcblog/assets/202301122056031-Dll6r4Z0.png",b="/dcblog/assets/202301122105697-CTPc2j3F.png",v="/dcblog/assets/202301151333985-BAm1tAdr.png",f="/dcblog/assets/202301151337612-CCFIM0w3.png",_="/dcblog/assets/202301151338609-DN9NRWMZ.png",y="/dcblog/assets/202301151453393-DWX9IapB.png",x="/dcblog/assets/202301151506803-N4B2iiY_.png",S="/dcblog/assets/202301151514837-C6GepmwK.png",C={},w=a(`<h2 id="一、同源策略及跨域问题" tabindex="-1"><a class="header-anchor" href="#一、同源策略及跨域问题"><span>一、同源策略及跨域问题</span></a></h2><p><strong>同源策略</strong>是一套浏览器<strong>安全机制</strong>，当一个<strong>源</strong>的文档和脚本，与另一个<strong>源</strong>的资源进行通信时，同源策略就会对这个通信做出不同程度的限制。</p><p>简单来说，同源策略对 <strong>同源资源</strong> <strong>放行</strong>，对 <strong>异源资源</strong> <strong>限制</strong></p><p>因此限制造成的开发问题，称之为<strong>跨域（异源）问题</strong></p><blockquote><p>跨域是因为<strong style="color:red;">浏览器</strong>的安全机制带来的问题</p></blockquote><h3 id="_1-同源和异源" tabindex="-1"><a class="header-anchor" href="#_1-同源和异源"><span>1. 同源和异源</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>源(origin) = 协议 + 域名 + 端口
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如:</p><p><code>https://study.duyiedu.com/api/movie</code>的源为<code>https://study.duyiedu.com</code></p><p><code>http://localhost:7001/index.html</code>的源为<code>http://localhost:7001</code></p><p>两个URL地址的源<strong>完全相同</strong>，则称之为<strong>同源</strong>，否则称之为<strong>异源（跨域）</strong></p><figure><img src="`+c+'" alt="image-20230112163455982" tabindex="0" loading="lazy"><figcaption>image-20230112163455982</figcaption></figure><h3 id="_2-跨域出现的场景" tabindex="-1"><a class="header-anchor" href="#_2-跨域出现的场景"><span>2. 跨域出现的场景</span></a></h3><p>跨域可能出现在三种场景：</p><ul><li><p><strong>网络通信</strong></p><p>a元素的跳转；加载css、js、图片等；AJAX等等</p></li><li><p>JS API</p><p><code>window.open</code>、<code>window.parent</code>、<code>iframe.contentWindow</code>等等</p></li><li><p>存储</p><p><code>WebStorage</code>、<code>IndexedDB</code>等等</p></li></ul><p>对于不同的跨域场景，以及每个场景中不同的跨域方式，同源策略都有不同的限制。</p><p>本文重点讨论<strong>网络通信</strong>中<code>AJAX</code>的跨域问题</p><h3 id="_3-网络中的跨域" tabindex="-1"><a class="header-anchor" href="#_3-网络中的跨域"><span>3. 网络中的跨域</span></a></h3><p>当浏览器运行页面后，会发出很多的网络请求，例如CSS、JS、图片、AJAX等等</p><p>请求页面的源称之为<strong>页面源</strong>，在该页面中发出的请求称之为<strong>目标源</strong>。</p><p>当页面源和目标源一致时，则为<strong>同源请求</strong>，否则为<strong>异源请求（跨域请求）</strong></p><figure><img src="'+r+'" alt="image-20230112163616513" tabindex="0" loading="lazy"><figcaption>image-20230112163616513</figcaption></figure><h3 id="_4-浏览器如何限制异源请求" tabindex="-1"><a class="header-anchor" href="#_4-浏览器如何限制异源请求"><span>4. 浏览器如何限制异源请求？</span></a></h3><p>浏览器出于多方面的考量，制定了非常繁杂的规则来限制各种跨域请求，但总体的原则非常简单：</p><ul><li>对标签发出的跨域请求轻微限制</li><li>对AJAX发出的跨域请求<strong>严厉限制</strong></li></ul><figure><img src="'+d+'" alt="image-20230112201027855" tabindex="0" loading="lazy"><figcaption>image-20230112201027855</figcaption></figure><h2 id="二、解决方案" tabindex="-1"><a class="header-anchor" href="#二、解决方案"><span>二、解决方案</span></a></h2><h3 id="_1-cors" tabindex="-1"><a class="header-anchor" href="#_1-cors"><span>1. CORS</span></a></h3><p>CORS（Cross-Origin Resource Sharing）是最正统的跨域解决方案，同时也是浏览器推荐的解决方案。</p><p>CORS是一套规则，用于帮助浏览器判断是否校验通过。</p><figure><img src="'+u+'" alt="image-20230112202539003" tabindex="0" loading="lazy"><figcaption>image-20230112202539003</figcaption></figure><p>CORS的基本理念是：</p><ul><li>只要服务器明确表示<strong>允许</strong>，则校验<strong>通过</strong></li><li>服务器明确拒绝或没有表示，则校验不通过</li></ul><p><strong>所以，使用CORS解决跨域，必须要保证服务器是「自己人」</strong></p><h4 id="请求分类" tabindex="-1"><a class="header-anchor" href="#请求分类"><span>请求分类</span></a></h4><p>CORS将请求分为两类：<mark>简单请求</mark> 和 <mark>预检请求</mark>。</p><p>对不同种类的请求它的规则有所区别。</p><p>所以要理解CORS，首先要理解它是如何划分请求的。</p><h5 id="简单请求" tabindex="-1"><a class="header-anchor" href="#简单请求"><span>简单请求</span></a></h5><blockquote><p>完整判定逻辑：https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests</p></blockquote><p>简单来说，只要全部满足下列条件，就是简单请求：</p>',41),O=n("li",null,[n("p",null,[s("请求方法是"),n("code",null,"GET"),s("、"),n("code",null,"POST"),s("、"),n("code",null,"HEAD"),s("之一")])],-1),z={href:"https://fetch.spec.whatwg.org/#cors-safelisted-request-header",target:"_blank",rel:"noopener noreferrer"},N=n("blockquote",null,[n("p",null,"浏览器默认自带的头部字段都是满足安全规范的，只要开发者不改动和新增头部，就不会打破此条规则")],-1),j=n("li",null,[n("p",null,[s("如果有"),n("code",null,"Content-Type"),s("，必须是下列值中的一个")]),n("ul",null,[n("li",null,[n("code",null,"text/plain")]),n("li",null,[n("code",null,"multipart/form-data")]),n("li",null,[n("code",null,"application/x-www-form-urlencoded")])])],-1),A=a(`<h5 id="预检请求-preflight" tabindex="-1"><a class="header-anchor" href="#预检请求-preflight"><span>预检请求(preflight)</span></a></h5><p>只要不是简单请求，均为预检请求</p><h5 id="练习" tabindex="-1"><a class="header-anchor" href="#练习"><span>练习</span></a></h5><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 下面的跨域请求哪些是简单请求，哪些是预检请求</span>

<span class="token comment">// 1</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://douyin.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 简单</span>

<span class="token comment">// 2</span>
<span class="token comment">// 预检（新增头部）</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://douyin.com&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3</span>
<span class="token comment">// 简单</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://douyin.com&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 4</span>
<span class="token comment">// 预检（MIME类型）</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://douyin.com&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;content-type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="对简单请求的验证" tabindex="-1"><a class="header-anchor" href="#对简单请求的验证"><span>对简单请求的验证</span></a></h4><figure><img src="`+g+'" alt="image-20230112204546583" tabindex="0" loading="lazy"><figcaption>image-20230112204546583</figcaption></figure><h4 id="对预检请求的验证" tabindex="-1"><a class="header-anchor" href="#对预检请求的验证"><span>对预检请求的验证</span></a></h4><ol><li>发送预检请求</li></ol><figure><img src="'+m+`" alt="image-20230112204634493" tabindex="0" loading="lazy"><figcaption>image-20230112204634493</figcaption></figure><ol start="2"><li>发送真实请求（和简单请求一致）</li></ol><h4 id="细节1-关于cookie" tabindex="-1"><a class="header-anchor" href="#细节1-关于cookie"><span>细节1 - 关于cookie</span></a></h4><p>默认情况下，ajax的跨域请求并不会附带cookie，这样一来，某些需要权限的操作就无法进行</p><p>不过可以通过简单的配置就可以实现附带cookie</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// xhr</span>
<span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token comment">// fetch api</span>
<span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">&quot;include&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一来，该跨域的ajax请求就是一个<em>附带身份凭证的请求</em></p><p>当一个请求需要附带cookie时，无论它是简单请求，还是预检请求，都会在请求头中添加<code>cookie</code>字段</p><p>而服务器响应时，需要明确告知客户端：服务器允许这样的凭据</p><p>告知的方式也非常的简单，只需要在响应头中添加：<code>Access-Control-Allow-Credentials: true</code>即可</p><p>对于一个附带身份凭证的请求，若服务器没有明确告知，浏览器仍然视为跨域被拒绝。</p><p>另外要特别注意的是：<strong>对于附带身份凭证的请求，服务器不得设置 <code>Access-Control-Allow-Origin 的值为*</code></strong>。这就是为什么不推荐使用*的原因</p><h4 id="细节2-关于跨域获取响应头" tabindex="-1"><a class="header-anchor" href="#细节2-关于跨域获取响应头"><span>细节2 - 关于跨域获取响应头</span></a></h4><p>在跨域访问时，JS只能拿到一些最基本的响应头，如：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma，如果要访问其他头，则需要服务器设置本响应头。</p><p><code>Access-Control-Expose-Headers</code>头让服务器把允许浏览器访问的头放入白名单，例如：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Access-Control-Expose-Headers: authorization, a, b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样JS就能够访问指定的响应头了。</p><h3 id="_2-jsonp" tabindex="-1"><a class="header-anchor" href="#_2-jsonp"><span>2. JSONP</span></a></h3><p>在很久很久以前...并没有CORS方案</p><figure><img src="`+h+'" alt="image-20230112205454350" tabindex="0" loading="lazy"><figcaption>image-20230112205454350</figcaption></figure><p>在那个年代，古人靠着非凡的智慧来解决这一问题</p><figure><img src="'+k+'" alt="image-20230112205613983" tabindex="0" loading="lazy"><figcaption>image-20230112205613983</figcaption></figure><p>虽然可以解决问题，但JSONP有着明显的缺陷：</p><ul><li><p>仅能使用GET请求</p></li><li><p>容易产生安全隐患</p><blockquote><p>恶意攻击者可能利用<code>callback=恶意函数</code>的方式实现<code>XSS</code>攻击</p></blockquote></li><li><p>容易被非法站点恶意调用</p></li></ul><p><strong>因此，除非是某些特殊的原因，否则永远不应该使用JSONP</strong></p><h3 id="_3-代理" tabindex="-1"><a class="header-anchor" href="#_3-代理"><span>3. 代理</span></a></h3><p>CORS和JSONP均要求服务器是「自己人」</p><p>那如果不是呢？</p><img src="'+b+'" alt="image-20230112210551647" style="zoom:50%;"><p>那就找一个中间人（代理）</p><figure><img src="'+v+'" alt="image-20230115133326930" tabindex="0" loading="lazy"><figcaption>image-20230115133326930</figcaption></figure><p>比如，前端小王想要请求获取王者荣耀英雄数据，但直接请求腾讯服务器会造成跨域</p><figure><img src="'+f+'" alt="image-20230115133732560" tabindex="0" loading="lazy"><figcaption>image-20230115133732560</figcaption></figure><p>由于腾讯服务器不是「自己人」，小王决定用代理解决</p><figure><img src="'+_+'" alt="image-20230115133817554" tabindex="0" loading="lazy"><figcaption>image-20230115133817554</figcaption></figure><h3 id="_4-如何选择" tabindex="-1"><a class="header-anchor" href="#_4-如何选择"><span>4. 如何选择</span></a></h3><p>最重要的，是要保持<strong>生产环境和开发环境一致</strong></p><p>下面是一张决策图</p><figure><img src="'+y+'" alt="image-20230115145335319" tabindex="0" loading="lazy"><figcaption>image-20230115145335319</figcaption></figure><p>具体的几种场景</p><figure><img src="'+x+'" alt="image-20230115150610750" tabindex="0" loading="lazy"><figcaption>image-20230115150610750</figcaption></figure><figure><img src="'+S+'" alt="image-20230115151406797" tabindex="0" loading="lazy"><figcaption>image-20230115151406797</figcaption></figure>',50);function D(T,R){const e=o("ExternalLinkIcon");return p(),i("div",null,[w,n("ul",null,[O,n("li",null,[n("p",null,[s("头部字段满足CORS安全规范，详见 "),n("a",z,[s("W3C"),l(e)])]),N]),j]),A])}const P=t(C,[["render",D],["__file","crossDomain.html.vue"]]),B=JSON.parse('{"path":"/browser_internet/network/crossDomain.html","title":"跨域问题及解决方案","lang":"zh-CN","frontmatter":{"title":"跨域问题及解决方案","order":3,"description":"一、同源策略及跨域问题 同源策略是一套浏览器安全机制，当一个源的文档和脚本，与另一个源的资源进行通信时，同源策略就会对这个通信做出不同程度的限制。 简单来说，同源策略对 同源资源 放行，对 异源资源 限制 因此限制造成的开发问题，称之为跨域（异源）问题 跨域是因为浏览器的安全机制带来的问题 1. 同源和异源 例如: https://study.duyi...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/browser_internet/network/crossDomain.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"跨域问题及解决方案"}],["meta",{"property":"og:description","content":"一、同源策略及跨域问题 同源策略是一套浏览器安全机制，当一个源的文档和脚本，与另一个源的资源进行通信时，同源策略就会对这个通信做出不同程度的限制。 简单来说，同源策略对 同源资源 放行，对 异源资源 限制 因此限制造成的开发问题，称之为跨域（异源）问题 跨域是因为浏览器的安全机制带来的问题 1. 同源和异源 例如: https://study.duyi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T13:13:32.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-03-19T13:13:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"跨域问题及解决方案\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-19T13:13:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、同源策略及跨域问题","slug":"一、同源策略及跨域问题","link":"#一、同源策略及跨域问题","children":[{"level":3,"title":"1. 同源和异源","slug":"_1-同源和异源","link":"#_1-同源和异源","children":[]},{"level":3,"title":"2. 跨域出现的场景","slug":"_2-跨域出现的场景","link":"#_2-跨域出现的场景","children":[]},{"level":3,"title":"3. 网络中的跨域","slug":"_3-网络中的跨域","link":"#_3-网络中的跨域","children":[]},{"level":3,"title":"4. 浏览器如何限制异源请求？","slug":"_4-浏览器如何限制异源请求","link":"#_4-浏览器如何限制异源请求","children":[]}]},{"level":2,"title":"二、解决方案","slug":"二、解决方案","link":"#二、解决方案","children":[{"level":3,"title":"1. CORS","slug":"_1-cors","link":"#_1-cors","children":[]},{"level":3,"title":"2. JSONP","slug":"_2-jsonp","link":"#_2-jsonp","children":[]},{"level":3,"title":"3. 代理","slug":"_3-代理","link":"#_3-代理","children":[]},{"level":3,"title":"4. 如何选择","slug":"_4-如何选择","link":"#_4-如何选择","children":[]}]}],"git":{"createdTime":1710854012000,"updatedTime":1710854012000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":1}]},"readingTime":{"minutes":5.37,"words":1612},"filePathRelative":"browser_internet/network/crossDomain.md","localizedDate":"2024年3月19日","excerpt":"<h2>一、同源策略及跨域问题</h2>\\n<p><strong>同源策略</strong>是一套浏览器<strong>安全机制</strong>，当一个<strong>源</strong>的文档和脚本，与另一个<strong>源</strong>的资源进行通信时，同源策略就会对这个通信做出不同程度的限制。</p>\\n<p>简单来说，同源策略对 <strong>同源资源</strong> <strong>放行</strong>，对 <strong>异源资源</strong> <strong>限制</strong></p>\\n<p>因此限制造成的开发问题，称之为<strong>跨域（异源）问题</strong></p>","autoDesc":true}');export{P as comp,B as data};
