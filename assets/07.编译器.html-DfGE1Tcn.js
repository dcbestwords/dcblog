import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as p,e as a,a as n,b as s}from"./app-B-7e2hr5.js";const o="/dcblog/assets/image-20240816140012658-DUvNkzqS.png",c="/dcblog/assets/image-20240816140132689-imHNOyEX.png",l="/dcblog/assets/image-20240816140455521-C-9wbs9D.png",i="/dcblog/assets/image-20240816171801874-722ALdfP.png",u="/dcblog/assets/imageonline-co-gifimage-BV2Ezmd-.gif",r="/dcblog/assets/image-20240818162152462-DZv04dyC.png",k={},d=a('<h1 id="_7-编译器" tabindex="-1"><a class="header-anchor" href="#_7-编译器"><span>7. 编译器</span></a></h1><p>编译器将 <mark>源代码</mark> 翻译为 <mark>目标代码</mark> 的过程叫作编译（compile）。完整的编译过程通常包含词法分析、语法分析、语义分析、中间代码生成、优化、目标代码生成等步骤。</p><figure><img src="'+o+'" alt="image-20240816140012658" tabindex="0" loading="lazy"><figcaption>image-20240816140012658</figcaption></figure><p>Vue.js 模板编译器的目标代码其实就是渲染函数。具体而言包含以下几部分：</p><figure><img src="'+c+'" alt="image-20240816140132689" tabindex="0" loading="lazy"><figcaption>image-20240816140132689</figcaption></figure><p>其中关键函数包含已下三种：</p><figure><img src="'+l+`" alt="image-20240816140455521" tabindex="0" loading="lazy"><figcaption>image-20240816140455521</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> templateAST <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>  <span class="token comment">// 解析器</span>
<span class="token keyword">const</span> jsAST <span class="token operator">=</span> <span class="token function">transform</span><span class="token punctuation">(</span>templateAST<span class="token punctuation">)</span> <span class="token comment">// 转换器</span>
<span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>jsAST<span class="token punctuation">)</span>		 <span class="token comment">// 生成器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="一、-解析器" tabindex="-1"><a class="header-anchor" href="#一、-解析器"><span>一、 解析器</span></a></h2><p>将用户编写的模板解析为模板AST</p><h3 id="_1-分阶段实现" tabindex="-1"><a class="header-anchor" href="#_1-分阶段实现"><span>1. 分阶段实现</span></a></h3><blockquote><p>利用状态机在 <mark>不同状态之间的迁移</mark> 完成词法分析，形成 <mark>Token列表</mark></p></blockquote><figure><img src="`+i+`" alt="状态迁移过程" tabindex="0" loading="lazy"><figcaption>状态迁移过程</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 定义状态机的状态</span>
<span class="token keyword">const</span> State <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">initial</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 初始状态</span>
    <span class="token literal-property property">tagOpen</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 标签开始状态</span>
    <span class="token literal-property property">tagName</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// 标签名称状态</span>
    <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment">// 文本状态</span>
    <span class="token literal-property property">tagEnd</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// 结束标签状态</span>
    <span class="token literal-property property">tagEndName</span><span class="token operator">:</span>  <span class="token comment">// 结束标签名称状态</span>
<span class="token punctuation">}</span>
    <span class="token comment">// 一个辅助函数，用于判断是否是字母</span>
    <span class="token keyword">function</span> <span class="token function">isAlpha</span><span class="token punctuation">(</span><span class="token parameter">char</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> char <span class="token operator">&gt;=</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">&lt;=</span> <span class="token string">&#39;z&#39;</span> <span class="token operator">||</span> char <span class="token operator">&gt;=</span> <span class="token string">&#39;A&#39;</span> <span class="token operator">&amp;&amp;</span> char <span class="token operator">&lt;=</span> <span class="token string">&#39;Z&#39;</span>
    <span class="token punctuation">}</span>
<span class="token comment">// 接收模板字符串作为参数，并将模板切割为 Token 返回</span>
<span class="token keyword">function</span> <span class="token function">tokenize</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 状态机的当前状态：初始状态</span>
    <span class="token keyword">let</span> currentState <span class="token operator">=</span> State<span class="token punctuation">.</span>initial
    <span class="token comment">// 用于缓存字符</span>
    <span class="token keyword">const</span> chars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment">// 生成的 Token 会存储到 tokens 数组中，并作为函数的返回值返回</span>
    <span class="token keyword">const</span> tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment">// 使用 while 循环开启自动机，只要模板字符串没有被消费尽，自动机就会一直运行</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 查看第一个字符，注意，这里只是查看，没有消费该字符</span>
        <span class="token keyword">const</span> char <span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token comment">// switch 语句匹配当前状态</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>currentState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 状态机当前处于初始状态</span>
            <span class="token keyword">case</span> State<span class="token punctuation">.</span>initial<span class="token operator">:</span>
                <span class="token comment">// 遇到字符 &lt;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 1. 状态机切换到标签开始状态</span>
                    currentState <span class="token operator">=</span> State<span class="token punctuation">.</span>tagOpen
                    <span class="token comment">// 2. 消费字符 &lt;</span>
                    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAlpha</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 1. 遇到字母，切换到文本状态</span>
                    currentState <span class="token operator">=</span> State<span class="token punctuation">.</span>text
                    <span class="token comment">// 2. 将当前字母缓存到 chars 数组</span>
                    chars<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>
                    <span class="token comment">// 3. 消费当前字符</span>
                    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span>
                <span class="token comment">// 状态机当前处于标签开始状态</span>
            <span class="token keyword">case</span> State<span class="token punctuation">.</span>tagOpen<span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAlpha</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 1. 遇到字母，切换到标签名称状态</span>
                    currentState <span class="token operator">=</span> State<span class="token punctuation">.</span>tagName
                    <span class="token comment">// 2. 将当前字符缓存到 chars 数组</span>
                    chars<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>
                    <span class="token comment">// 3. 消费当前字符</span>
                    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 1. 遇到字符 /，切换到结束标签状态</span>
                    currentState <span class="token operator">=</span> State<span class="token punctuation">.</span>tagEnd
                    <span class="token comment">// 2. 消费字符 /</span>
                    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span>
                <span class="token comment">// 状态机当前处于标签名称状态</span>
            <span class="token keyword">case</span> State<span class="token punctuation">.</span>tagName<span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAlpha</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 1. 遇到字母，由于当前处于标签名称状态，所以不需要切换状态，</span>
                    <span class="token comment">// 但需要将当前字符缓存到 chars 数组</span>
                    chars<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>
                    <span class="token comment">// 2. 消费当前字符</span>
                    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 1.遇到字符 &gt;，切换到初始状态</span>
                    currentState <span class="token operator">=</span> State<span class="token punctuation">.</span>initial
                    <span class="token comment">// 2. 同时创建一个标签 Token，并添加到 tokens 数组中</span>
                    <span class="token comment">// 注意，此时 chars 数组中缓存的字符就是标签名称</span>
                    tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;tag&#39;</span><span class="token punctuation">,</span>
                        <span class="token literal-property property">name</span><span class="token operator">:</span> chars<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>
                    <span class="token comment">// 3. chars 数组的内容已经被消费，清空它</span>
                    chars<span class="token punctuation">.</span>length <span class="token operator">=</span>   <span class="token comment">// 4. 同时消费当前字符 &gt;</span>
                        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span>
                <span class="token comment">// 状态机当前处于文本状态</span>
            <span class="token keyword">case</span> State<span class="token punctuation">.</span>text<span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAlpha</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 1. 遇到字母，保持状态不变，但应该将当前字符缓存到 chars 数组</span>
                    chars<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>
                    <span class="token comment">// 2. 消费当前字符</span>
                    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 1. 遇到字符 &lt;，切换到标签开始状态</span>
                    currentState <span class="token operator">=</span> State<span class="token punctuation">.</span>tagOpen
                    <span class="token comment">// 2. 从 文本状态 --&gt; 标签开始状态，此时应该创建文本 Token，</span>
                    并添加到 tokens 数组
                    <span class="token comment">// 注意，此时 chars 数组中的字符就是文本内容</span>
                    tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span>
                        <span class="token literal-property property">content</span><span class="token operator">:</span> chars<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>
                    <span class="token comment">// 3. chars 数组的内容已经被消费，清空它</span>
                    chars<span class="token punctuation">.</span>length <span class="token operator">=</span>   <span class="token comment">// 4. 消费当前字符</span>
                        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span>
                <span class="token comment">// 状态机当前处于标签结束状态</span>
            <span class="token keyword">case</span> State<span class="token punctuation">.</span>tagEnd<span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAlpha</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 1. 遇到字母，切换到结束标签名称状态</span>
                    currentState <span class="token operator">=</span> State<span class="token punctuation">.</span>tagEndName
                    <span class="token comment">// 2. 将当前字符缓存到 chars 数组</span>
                    chars<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>
                    <span class="token comment">// 3. 消费当前字符</span>
                    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span>
                <span class="token comment">// 状态机当前处于结束标签名称状态</span>
            <span class="token keyword">case</span> State<span class="token punctuation">.</span>tagEndName<span class="token operator">:</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAlpha</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 1. 遇到字母，不需要切换状态，但需要将当前字符缓存到 chars数组</span>
                    chars<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>
                    <span class="token comment">// 2. 消费当前字符</span>
                    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 1. 遇到字符 &gt;，切换到初始状态</span>
                    currentState <span class="token operator">=</span> State<span class="token punctuation">.</span>initial
                    <span class="token comment">// 2. 从 结束标签名称状态 --&gt; 初始状态，应该保存结束标签名称Token</span>
                    <span class="token comment">// 注意，此时 chars 数组中缓存的内容就是标签名称</span>
                    tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;tagEnd&#39;</span><span class="token punctuation">,</span>
                        <span class="token literal-property property">name</span><span class="token operator">:</span> chars<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>
                    <span class="token comment">// 3. chars 数组的内容已经被消费，清空它</span>
                    chars<span class="token punctuation">.</span>length <span class="token operator">=</span>   <span class="token comment">// 4. 消费当前字符</span>
                        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 最后，返回 tokens</span>
    <span class="token keyword">return</span> tokens
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>严格按照状态迁移过程编写，但其中可优化的点很多</p><blockquote><p>根据Token列表构造AST</p></blockquote><p>一棵用于描述 HTML 的 AST 将拥有与 HTML 标签非常相似的树型结构，根据 Token 列表构建 AST 的过程，其实就是对 Token 列表进行扫 描的过程。从第一个 Token 开始，顺序地扫描整个 Token 列表，直到列表中的所有 Token 处理完毕。</p><figure><img src="`+u+`" alt="imageonline-co-gifimage" tabindex="0" loading="lazy"><figcaption>imageonline-co-gifimage</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// parse 函数接收模板作为参数</span>
<span class="token keyword">function</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 首先对模板进行标记化，得到 tokens</span>
    <span class="token keyword">const</span> tokens <span class="token operator">=</span> <span class="token function">tokenize</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
    <span class="token comment">// 创建 Root 根节点</span>
    <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Root&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 创建 elementStack 栈，起初只有 Root 根节点</span>
    <span class="token keyword">const</span> elementStack <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>
    <span class="token comment">// 开启一个 while 循环扫描 tokens，直到所有 Token 都被扫描完毕为止</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取当前栈顶节点作为父节点 parent</span>
        <span class="token keyword">const</span> parent <span class="token operator">=</span> elementStack<span class="token punctuation">[</span>elementStack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token comment">// 当前扫描的 Token</span>
        <span class="token keyword">const</span> t <span class="token operator">=</span> tokens<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">&#39;tag&#39;</span><span class="token operator">:</span>
                <span class="token comment">// 如果当前 Token 是开始标签，则创建 Element 类型的 AST 节点</span>
                <span class="token keyword">const</span> elementNode <span class="token operator">=</span> <span class="token punctuation">{</span>
                    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Element&#39;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">tag</span><span class="token operator">:</span> t<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
                    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 将其添加到父级节点的 children 中</span>
                parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>elementNode<span class="token punctuation">)</span>
                <span class="token comment">// 将当前节点压入栈</span>
                elementStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>elementNode<span class="token punctuation">)</span>
                <span class="token keyword">break</span>
            <span class="token keyword">case</span> <span class="token string">&#39;text&#39;</span><span class="token operator">:</span>
                <span class="token comment">// 如果当前 Token 是文本，则创建 Text 类型的 AST 节点</span>
                <span class="token keyword">const</span> textNode <span class="token operator">=</span> <span class="token punctuation">{</span>
                    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Text&#39;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">content</span><span class="token operator">:</span> t<span class="token punctuation">.</span>content
                <span class="token punctuation">}</span>
                <span class="token comment">// 将其添加到父节点的 children 中</span>
                parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>textNode<span class="token punctuation">)</span>
                <span class="token keyword">break</span>
            <span class="token keyword">case</span> <span class="token string">&#39;tagEnd&#39;</span><span class="token operator">:</span>
                <span class="token comment">// 遇到结束标签，将栈顶节点弹出</span>
                elementStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 消费已经扫描过的 token</span>
        tokens<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 最后返回 AST</span>
    <span class="token keyword">return</span> root
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>实例测试：<code>&lt;div&gt;&lt;p&gt;Vue&lt;/p&gt;&lt;p&gt;Template&lt;/p&gt;&lt;/div&gt;</code></p></blockquote><p><strong>Tokens</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> tokens <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;tag&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// div 开始标签节点</span>
    <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;tag&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;p&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// p 开始标签节点</span>
    <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&quot;Vue&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 文本节点</span>
    <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;tagEnd&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;p&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// p 结束标签节点</span>
    <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;tag&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;p&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// p 开始标签节点</span>
    <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&quot;Template&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 文本节点</span>
    <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;tagEnd&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;p&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// p 结束标签节点</span>
    <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;tagEnd&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">}</span> <span class="token comment">// div 结束标签节点</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>AST</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// AST 的逻辑根节点</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Root&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token comment">// 模板的 div 根节点</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Element&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token comment">// div 节点的第一个子节点 p</span>
                <span class="token punctuation">{</span>
                    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Element&#39;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span>
                    <span class="token comment">// p 节点的文本节点</span>
                    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                        <span class="token punctuation">{</span>
                            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Text&#39;</span><span class="token punctuation">,</span>
                            <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;Vue&#39;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">]</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token comment">// div 节点的第二个子节点 p</span>
                <span class="token punctuation">{</span>
                    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Element&#39;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span>
                    <span class="token comment">// p 节点的文本节点</span>
                    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                        <span class="token punctuation">{</span>
                            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Text&#39;</span><span class="token punctuation">,</span>
                            <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;Template&#39;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">]</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、转换器" tabindex="-1"><a class="header-anchor" href="#二、转换器"><span>二、转换器</span></a></h2><p>编译的目标是将模板编译为渲染函数，而渲染函数是用JavaScript代码描述的，所以需要将模板 AST 转换为用于描述渲染函数的 JavaScript AST。</p><p>如上例所用模板，其对应的渲染函数为：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Template&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则转换后的JavaScript AST应该如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> FunctionDeclNode <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;FunctionDecl&#39;</span> <span class="token punctuation">,</span><span class="token comment">// 代表该节点是函数声明</span>
    <span class="token comment">// 函数的名称是一个标识符，标识符本身也是一个节点</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;render&#39;</span> <span class="token comment">// name 用来存储标识符的名称，在这里它就是渲染函数的名称 render</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 参数，目前渲染函数还不需要参数，所以这里是一个空数组</span>
    <span class="token comment">// 渲染函数的函数体只有一个语句，即 return 语句</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ReturnStatement&#39;</span><span class="token punctuation">,</span>
            <span class="token comment">// 最外层的 h 函数调用</span>
            <span class="token keyword">return</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;CallExpression&#39;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">callee</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;h&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token literal-property property">arguments</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                    <span class="token comment">// 第一个参数是字符串字面量 &#39;div&#39;</span>
                    <span class="token punctuation">{</span>
                        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;StringLiteral&#39;</span><span class="token punctuation">,</span>
                        <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token comment">// 第二个参数是一个数组</span>
                    <span class="token punctuation">{</span>
                        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ArrayExpression&#39;</span><span class="token punctuation">,</span>
                        <span class="token literal-property property">elements</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                            <span class="token comment">// 数组的第一个元素是 h 函数的调用</span>
                            <span class="token punctuation">{</span>
                                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;CallExpression&#39;</span><span class="token punctuation">,</span>
                                <span class="token literal-property property">callee</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;h&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                                <span class="token literal-property property">arguments</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                                    <span class="token comment">// 该 h 函数调用的第一个参数是字符串字面量</span>
                                    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;StringLiteral&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;p&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                                    <span class="token comment">// 第二个参数也是一个字符串字面量</span>
                                    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;StringLiteral&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;Vue&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                                <span class="token punctuation">]</span>
                            <span class="token punctuation">}</span><span class="token punctuation">,</span>
                            <span class="token comment">// 数组的第二个元素也是 h 函数的调用</span>
                            <span class="token punctuation">{</span>
                                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;CallExpression&#39;</span><span class="token punctuation">,</span>
                                <span class="token literal-property property">callee</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;h&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                                <span class="token literal-property property">arguments</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                                    <span class="token comment">// 该 h 函数调用的第一个参数是字符串字面量</span>
                                    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;StringLiteral&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;p&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                                    <span class="token comment">// 第二个参数也是一个字符串字面量</span>
                                    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;StringLiteral&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;Template&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                                <span class="token punctuation">]</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">]</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">]</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-深度优先遍历" tabindex="-1"><a class="header-anchor" href="#_1-深度优先遍历"><span>1. 深度优先遍历</span></a></h3><p>为了对 AST 进行转换，我们需要能访问 AST 的每一个节点，这样才有机会对特定节点进行修改、替换、删除等操作。因此首先需要编写一个深度优先的遍历算法，实现对 AST 中节点的访问。</p>`,32),v=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"traverseNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"ast"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 当前节点，ast 本身就是 Root 节点"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" currentNode "),n("span",{class:"token operator"},"="),s(` ast
    
    `),n("span",{class:"token comment"},"// Todo：需要进行的操作"),s(`
    `),n("span",{class:"token comment"},"// 操作1"),s(`
    `),n("span",{class:"token comment"},"// 操作2"),s(`
    `),n("span",{class:"token comment"},"// ..."),s(`
    
    `),n("span",{class:"token comment"},"// 如果有子节点，则递归地调用 traverseNode 函数进行遍历"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" children "),n("span",{class:"token operator"},"="),s(" currentNode"),n("span",{class:"token punctuation"},"."),s(`children
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("children"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" children"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token function"},"traverseNode"),n("span",{class:"token punctuation"},"("),s("children"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),m=n("h3",{id:"_2-插件化架构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-插件化架构"},[n("span",null,"2. 插件化架构")])],-1),b=n("p",null,[s("如上述代码光标处所示，如果将所有需要进行的转换操作全部写与"),n("code",null,"traverseNode"),s("函数中，显得过于臃肿和耦合，为此利用回调函数的机制将此部分提取出去进行解耦。")],-1),g=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// 接收第二个参数 context"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"traverseNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("ast"),n("span",{class:"token punctuation"},","),s(" context")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" currentNode "),n("span",{class:"token operator"},"="),s(` ast
    `),n("span",{class:"token comment"},"// context.nodeTransforms 是一个数组，其中每一个元素都是一个函数"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" transforms "),n("span",{class:"token operator"},"="),s(" context"),n("span",{class:"token punctuation"},"."),s(`nodeTransforms
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" transforms"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 将当前节点 currentNode 和 context 都传递给 nodeTransforms 中注册的回调函数"),s(`
        transforms`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"("),s("currentNode"),n("span",{class:"token punctuation"},","),s(" context"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" children "),n("span",{class:"token operator"},"="),s(" currentNode"),n("span",{class:"token punctuation"},"."),s(`children
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("children"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" children"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token function"},"traverseNode"),n("span",{class:"token punctuation"},"("),s("children"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" context"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"transform"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"ast"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 在 transform 函数内创建 context 对象"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" context "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 注册 nodeTransforms 数组,用来保存需要进行的转换操作"),s(`
        `),n("span",{class:"token literal-property property"},"nodeTransforms"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
            transformElement`),n("span",{class:"token punctuation"},","),s(` 
            transformText
        `),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token comment"},"// 调用 traverseNode 完成转换"),s(`
    `),n("span",{class:"token function"},"traverseNode"),n("span",{class:"token punctuation"},"("),s("ast"),n("span",{class:"token punctuation"},","),s(" context"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=a(`<p><code>Context</code>指的是上下文对象，是程序在 <mark>某个范围内的全局变量</mark> 。为其添加额外的上下文信息。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">ast</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token comment">// 增加 currentNode，用来存储当前正在转换的节点</span>
        <span class="token literal-property property">currentNode</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token comment">// 增加 childIndex，用来存储当前节点在父节点的 children 中的位置索引</span>
        <span class="token literal-property property">childIndex</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token comment">// 增加 parent，用来存储当前转换节点的父节点</span>
        <span class="token literal-property property">parent</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token comment">// 用于替换节点的函数，接收新节点作为参数</span>
        <span class="token function">replaceNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 为了替换节点，需要修改 AST</span>
            <span class="token comment">// 找到当前节点在父节点的 children 中的位置：context.childIndex</span>
            <span class="token comment">// 然后使用新节点替换即可</span>
            context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>children<span class="token punctuation">[</span>context<span class="token punctuation">.</span>childIndex<span class="token punctuation">]</span> <span class="token operator">=</span> node
            <span class="token comment">// 由于当前节点已经被新节点替换掉了，因此我们需要将 currentNode 更新为新节点</span>
            context<span class="token punctuation">.</span>currentNode <span class="token operator">=</span> node
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 用于删除当前节点</span>
        <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 调用数组的 splice 方法，根据当前节点的索引删除当前节点</span>
                context<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>childIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token comment">// 将 context.currentNode 置空</span>
                context<span class="token punctuation">.</span>currentNode <span class="token operator">=</span> <span class="token keyword">null</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">nodeTransforms</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            transformElement<span class="token punctuation">,</span>
            transformText
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token function">traverseNode</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在合适的地方设置转换上下文对象中的数据</p>`,3),h=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"traverseNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("ast"),n("span",{class:"token punctuation"},","),s(" context")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 设置当前转换的节点信息 context.currentNode"),s(`
    context`),n("span",{class:"token punctuation"},"."),s("currentNode "),n("span",{class:"token operator"},"="),s(` ast
    `),n("span",{class:"token keyword"},"const"),s(" transforms "),n("span",{class:"token operator"},"="),s(" context"),n("span",{class:"token punctuation"},"."),s(`nodeTransforms
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" transforms"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        transforms`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"("),s("context"),n("span",{class:"token punctuation"},"."),s("currentNode"),n("span",{class:"token punctuation"},","),s(" context"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token comment"},"// 由于任何转换函数都可能移除当前节点，因此每个转换函数执行完毕后，"),s(`
        `),n("span",{class:"token comment"},"// 都应该检查当前节点是否已经被移除，如果被移除了，直接返回即可"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("context"),n("span",{class:"token punctuation"},"."),s("currentNode"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" children "),n("span",{class:"token operator"},"="),s(" context"),n("span",{class:"token punctuation"},"."),s("currentNode"),n("span",{class:"token punctuation"},"."),s(`children
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("children"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" children"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// 递归地调用 traverseNode 转换子节点之前，将当前节点设置为父节点"),s(`
            context`),n("span",{class:"token punctuation"},"."),s("parent "),n("span",{class:"token operator"},"="),s(" context"),n("span",{class:"token punctuation"},"."),s(`currentNode
            `),n("span",{class:"token comment"},"// 设置位置索引"),s(`
            context`),n("span",{class:"token punctuation"},"."),s("childIndex "),n("span",{class:"token operator"},"="),s(` i
            `),n("span",{class:"token comment"},"// 递归地调用时，将 context 透传"),s(`
            `),n("span",{class:"token function"},"traverseNode"),n("span",{class:"token punctuation"},"("),s("children"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" context"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("p",null,"在转换 AST 节点的过程中，往往需要根据其子节点的情况来决定如何对当前节点进行转换。这就要求父节点的转换操作必须等待其所有子节点全部转换完毕后再执行。为此做出如下设计：",-1),w=n("figure",null,[n("img",{src:r,alt:"image-20240818162152462",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20240818162152462")],-1),x=n("p",null,"对节点的访问分为两个阶段，即进入阶段和退出阶段：",-1),S=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"traverseNode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("ast"),n("span",{class:"token punctuation"},","),s(" context")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    context`),n("span",{class:"token punctuation"},"."),s("currentNode "),n("span",{class:"token operator"},"="),s(` ast
    `),n("span",{class:"token comment"},"// 1. 增加退出阶段的回调函数数组"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" exitFns "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" transforms "),n("span",{class:"token operator"},"="),s(" context"),n("span",{class:"token punctuation"},"."),s(`nodeTransforms
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" transforms"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 2. 转换函数可以返回另外一个函数，该函数即作为退出阶段的回调函数"),s(`
        `),n("span",{class:"token keyword"},"const"),s(" onExit "),n("span",{class:"token operator"},"="),s(" transforms"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"("),s("context"),n("span",{class:"token punctuation"},"."),s("currentNode"),n("span",{class:"token punctuation"},","),s(" context"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("onExit"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// 将退出阶段的回调函数添加到 exitFns 数组中"),s(`
            exitFns`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("onExit"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("context"),n("span",{class:"token punctuation"},"."),s("currentNode"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" children "),n("span",{class:"token operator"},"="),s(" context"),n("span",{class:"token punctuation"},"."),s("currentNode"),n("span",{class:"token punctuation"},"."),s(`children
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("children"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" children"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            context`),n("span",{class:"token punctuation"},"."),s("parent "),n("span",{class:"token operator"},"="),s(" context"),n("span",{class:"token punctuation"},"."),s(`currentNode
            context`),n("span",{class:"token punctuation"},"."),s("childIndex "),n("span",{class:"token operator"},"="),s(` i
            `),n("span",{class:"token function"},"traverseNode"),n("span",{class:"token punctuation"},"("),s("children"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" context"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token comment"},"// 在节点处理的最后阶段执行缓存到 exitFns 中的回调函数"),s(`
    `),n("span",{class:"token comment"},"// 注意，这里我们要反序执行"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(" exitFns"),n("span",{class:"token punctuation"},"."),s(`length
    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        exitFns`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=a(`<p>在编写转换函数时，可以将转换逻辑编 写在退出阶段的回调函数中，从而保证在对当前访问的节点进行转换之前，其子节点一定全部处理完毕。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">transformElement</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 进入节点</span>

    <span class="token comment">// 返回一个会在退出节点时执行的回调函数</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在这里编写退出节点的逻辑，当这里的代码运行时，当前转换节点的子节点一定处理完毕了</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-ast的转换" tabindex="-1"><a class="header-anchor" href="#_3-ast的转换"><span>3. AST的转换</span></a></h3><p>用来创建 JavaScript AST 节点的辅助函数</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 用来创建 StringLiteral 节点</span>
<span class="token keyword">function</span> <span class="token function">createStringLiteral</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;StringLiteral&#39;</span><span class="token punctuation">,</span>
        value
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 用来创建 Identifier 节点</span>
<span class="token keyword">function</span> <span class="token function">createIdentifier</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span>
        name
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 用来创建 ArrayExpression 节点</span>
<span class="token keyword">function</span> <span class="token function">createArrayExpression</span><span class="token punctuation">(</span><span class="token parameter">elements</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ArrayExpression&#39;</span><span class="token punctuation">,</span>
        elements
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 用来创建 CallExpression 节点</span>
<span class="token keyword">function</span> <span class="token function">createCallExpression</span><span class="token punctuation">(</span><span class="token parameter">callee<span class="token punctuation">,</span> arguments</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;CallExpression&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">callee</span><span class="token operator">:</span> <span class="token function">createIdentifier</span><span class="token punctuation">(</span>callee<span class="token punctuation">)</span><span class="token punctuation">,</span>
        arguments
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转换操作</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 转换文本节点</span>
<span class="token keyword">function</span> <span class="token function">transformText</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果不是文本节点，则什么都不做</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&#39;Text&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 文本节点对应的 JavaScript AST 节点其实就是一个字符串字面量，</span>
    <span class="token comment">// 因此只需要使用 node.content 创建一个 StringLiteral 类型的节点即可</span>
    <span class="token comment">// 最后将文本节点对应的 JavaScript AST 节点添加到 node.jsNode 属性下</span>
    node<span class="token punctuation">.</span>jsNode <span class="token operator">=</span> <span class="token function">createStringLiteral</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
<span class="token punctuation">}</span>


<span class="token comment">// 转换标签节点</span>
<span class="token keyword">function</span> <span class="token function">transformElement</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将转换代码编写在退出阶段的回调函数中，</span>
    <span class="token comment">// 这样可以保证该标签节点的子节点全部被处理完毕</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果被转换的节点不是元素节点，则什么都不做</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&#39;Element&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 1. 创建 h 函数调用语句,</span>
        <span class="token comment">// h 函数调用的第一个参数是标签名称，因此我们以 node.tag 来创建一个字符串字面量节点作为第一个参数</span>
        <span class="token keyword">const</span> callExp <span class="token operator">=</span> <span class="token function">createCallExpression</span><span class="token punctuation">(</span><span class="token string">&#39;h&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
            <span class="token function">createStringLiteral</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment">// 2. 处理 h 函数调用的参数</span>
        node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span>   <span class="token comment">// 如果当前标签节点只有一个子节点，则直接使用子节点的 jsNode 作为参数</span>
            <span class="token operator">?</span> callExp<span class="token punctuation">.</span>arguments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>jsNode<span class="token punctuation">)</span>
        <span class="token comment">// 如果当前标签节点有多个子节点，则创建一个 ArrayExpression 节点作为参数</span>
        <span class="token operator">:</span> callExp<span class="token punctuation">.</span>arguments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
            <span class="token comment">// 数组的每个元素都是子节点的 jsNode</span>
            <span class="token function">createArrayExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>jsNode<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
        <span class="token comment">// 3. 将当前标签节点对应的 JavaScript AST 添加到 jsNode 属性下</span>
        node<span class="token punctuation">.</span>jsNode <span class="token operator">=</span> callExp
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 转换 Root 根节点</span>
<span class="token keyword">function</span> <span class="token function">transformRoot</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将逻辑编写在退出阶段的回调函数中，保证子节点全部被处理完毕</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果不是根节点，则什么都不做</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&#39;Root&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// node 是根节点，根节点的第一个子节点就是模板的根节点，</span>
        <span class="token comment">// 当然，这里我们暂时不考虑模板存在多个根节点的情况</span>
        <span class="token keyword">const</span> vnodeJSAST <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>jsNode
        <span class="token comment">// 创建 render 函数的声明语句节点，将 vnodeJSAST 作为 render 函数体的返回语句</span>
        node<span class="token punctuation">.</span>jsNode <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;FunctionDecl&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;render&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ReturnStatement&#39;</span><span class="token punctuation">,</span>
                    <span class="token keyword">return</span><span class="token operator">:</span> vnodeJSAST
                <span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在转换标签节点时，我们需要将转换逻辑编写在退出阶段的回调函数内，这样才能保证其子节点全部被处理完毕；</p><p>无论是文本节点还是标签节点，它们转换后的 JavaScript AST 节点 都存储在节点的 <code>node.jsNode</code> 属性下。</p><h2 id="三、生成器" tabindex="-1"><a class="header-anchor" href="#三、生成器"><span>三、生成器</span></a></h2><p>根据 JavaScript AST 生成渲染函数代码，代码生成本质上是字符串拼接的艺术。与 AST 转换一样，代码生成也需要上下文对象。该上下文对象用来维护代码生成过程中程序的运行状态。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token comment">// 存储最终生成的渲染函数代码</span>
        <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
        <span class="token comment">// 在生成代码时，通过调用 push 函数完成代码的拼接</span>
        <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span>code <span class="token operator">+=</span> code
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 当前缩进的级别，初始值为 0，即没有缩进</span>
        <span class="token literal-property property">currentIndent</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token comment">// 该函数用来换行，即在代码字符串的后面追加 \\n 字符，</span>
        <span class="token comment">// 另外，换行时应该保留缩进，所以我们还要追加 currentIndent *  个空格字符</span>
        <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span>code <span class="token operator">+=</span> <span class="token string">&#39;\\n&#39;</span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>currentIndent<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 用来缩进，即让 currentIndent 自增后，调用换行函数</span>
        <span class="token function">indent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span>currentIndent<span class="token operator">++</span>
            context<span class="token punctuation">.</span><span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 取消缩进，即让 currentIndent 自减后，调用换行函数</span>
        <span class="token function">deIndent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span>currentIndent<span class="token operator">--</span>
            context<span class="token punctuation">.</span><span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">genNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
    <span class="token keyword">return</span> context<span class="token punctuation">.</span>code
<span class="token punctuation">}</span>


<span class="token keyword">function</span> <span class="token function">genNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">&#39;FunctionDecl&#39;</span><span class="token operator">:</span>
            <span class="token function">genFunctionDecl</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
        <span class="token keyword">case</span> <span class="token string">&#39;ReturnStatement&#39;</span><span class="token operator">:</span>
            <span class="token function">genReturnStatement</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
        <span class="token keyword">case</span> <span class="token string">&#39;CallExpression&#39;</span><span class="token operator">:</span>
            <span class="token function">genCallExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
        <span class="token keyword">case</span> <span class="token string">&#39;StringLiteral&#39;</span><span class="token operator">:</span>
            <span class="token function">genStringLiteral</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
        <span class="token keyword">case</span> <span class="token string">&#39;ArrayExpression&#39;</span><span class="token operator">:</span>
            <span class="token function">genArrayExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>各自的生成函数代码</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">genFunctionDecl</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从 context 对象中取出工具函数</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> push<span class="token punctuation">,</span> indent<span class="token punctuation">,</span> deIndent <span class="token punctuation">}</span> <span class="token operator">=</span> context
    <span class="token comment">// node.id 是一个标识符，用来描述函数的名称，即 node.id.name</span>
    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">function </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>node<span class="token punctuation">.</span>id<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token comment">// 调用 genNodeList 为函数的参数生成代码</span>
    <span class="token function">genNodeList</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>params<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">) </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">{</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token comment">// 缩进</span>
    <span class="token function">indent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 为函数体生成代码，这里递归地调用了 genNode 函数</span>
    node<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> <span class="token function">genNode</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// 取消缩进</span>
    <span class="token function">deIndent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">}</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">genNodeList</span><span class="token punctuation">(</span><span class="token parameter">nodes<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> push <span class="token punctuation">}</span> <span class="token operator">=</span> context
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> node <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token function">genNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">genArrayExpression</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> push <span class="token punctuation">}</span> <span class="token operator">=</span> context
    <span class="token comment">// 追加方括号</span>
    <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;[&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 调用 genNodeList 为数组元素生成代码</span>
    <span class="token function">genNodeList</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>elements<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
    <span class="token comment">// 补全方括号</span>
    <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;]&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">genReturnStatement</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> push <span class="token punctuation">}</span> <span class="token operator">=</span> context
    <span class="token comment">// 追加 return 关键字和空格</span>
    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">return </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token comment">// 调用 genNode 函数递归地生成返回值代码</span>
    <span class="token function">genNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>return<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">genStringLiteral</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> push <span class="token punctuation">}</span> <span class="token operator">=</span> context
    <span class="token comment">// 对于字符串字面量，只需要追加与 node.value 对应的字符串即可</span>
    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>node<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">genCallExpression</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> push <span class="token punctuation">}</span> <span class="token operator">=</span> context
    <span class="token comment">// 取得被调用函数名称和参数列表</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> callee<span class="token punctuation">,</span> <span class="token literal-property property">arguments</span><span class="token operator">:</span> args <span class="token punctuation">}</span> <span class="token operator">=</span> node
    <span class="token comment">// 生成函数调用代码</span>
    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>callee<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token comment">// 调用 genNodeList 生成参数代码</span>
    <span class="token function">genNodeList</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
    <span class="token comment">// 补全括号</span>
    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依然使用之前的实例，最终生成的代码字符串如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Template&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),N=[d,v,m,b,g,y,h,f,w,x,S,j];function T(_,E){return e(),p("div",null,N)}const I=t(k,[["render",T],["__file","07.编译器.html.vue"]]),L=JSON.parse('{"path":"/source_code/vue3/07.%E7%BC%96%E8%AF%91%E5%99%A8.html","title":"7. 编译器","lang":"zh-CN","frontmatter":{"description":"7. 编译器 编译器将 源代码 翻译为 目标代码 的过程叫作编译（compile）。完整的编译过程通常包含词法分析、语法分析、语义分析、中间代码生成、优化、目标代码生成等步骤。 image-20240816140012658image-20240816140012658 Vue.js 模板编译器的目标代码其实就是渲染函数。具体而言包含以下几部分： im...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/source_code/vue3/07.%E7%BC%96%E8%AF%91%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"7. 编译器"}],["meta",{"property":"og:description","content":"7. 编译器 编译器将 源代码 翻译为 目标代码 的过程叫作编译（compile）。完整的编译过程通常包含词法分析、语法分析、语义分析、中间代码生成、优化、目标代码生成等步骤。 image-20240816140012658image-20240816140012658 Vue.js 模板编译器的目标代码其实就是渲染函数。具体而言包含以下几部分： im..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-08T09:14:46.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-09-08T09:14:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"7. 编译器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-08T09:14:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、 解析器","slug":"一、-解析器","link":"#一、-解析器","children":[{"level":3,"title":"1. 分阶段实现","slug":"_1-分阶段实现","link":"#_1-分阶段实现","children":[]}]},{"level":2,"title":"二、转换器","slug":"二、转换器","link":"#二、转换器","children":[{"level":3,"title":"1.  深度优先遍历","slug":"_1-深度优先遍历","link":"#_1-深度优先遍历","children":[]},{"level":3,"title":"2. 插件化架构","slug":"_2-插件化架构","link":"#_2-插件化架构","children":[]},{"level":3,"title":"3. AST的转换","slug":"_3-ast的转换","link":"#_3-ast的转换","children":[]}]},{"level":2,"title":"三、生成器","slug":"三、生成器","link":"#三、生成器","children":[]}],"git":{"createdTime":1725786886000,"updatedTime":1725786886000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":1}]},"readingTime":{"minutes":15.47,"words":4641},"filePathRelative":"source_code/vue3/07.编译器.md","localizedDate":"2024年9月8日","excerpt":"\\n<p>编译器将 <mark>源代码</mark> 翻译为 <mark>目标代码</mark> 的过程叫作编译（compile）。完整的编译过程通常包含词法分析、语法分析、语义分析、中间代码生成、优化、目标代码生成等步骤。</p>\\n<figure><figcaption>image-20240816140012658</figcaption></figure>\\n<p>Vue.js 模板编译器的目标代码其实就是渲染函数。具体而言包含以下几部分：</p>\\n<figure><figcaption>image-20240816140132689</figcaption></figure>\\n<p>其中关键函数包含已下三种：</p>","autoDesc":true}');export{I as comp,L as data};
