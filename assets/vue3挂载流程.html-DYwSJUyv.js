import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o,c,e as t,a,b as s,d as l,w as u,r as i}from"./app--IULgkuy.js";const r={};function k(d,n){const p=i("RouteLink");return o(),c("div",null,[n[11]||(n[11]=t(`<h2 id="一、整体渲染流程" tabindex="-1"><a class="header-anchor" href="#一、整体渲染流程"><span>一、整体渲染流程</span></a></h2><p>众所周知vue的渲染从其入口函数，即<code>createApp(APP).mount(&#39;#app&#39;)</code>开始，整体的大概流程如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 1.创建app</span>
app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token constant">APP</span><span class="token punctuation">)</span>
app <span class="token operator">=</span> <span class="token function">ensureRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token constant">APP</span><span class="token punctuation">)</span>
<span class="token function">createRenderer</span><span class="token punctuation">(</span>rendererOptions<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token constant">APP</span><span class="token punctuation">)</span>
<span class="token function">baseCreateRenderer</span><span class="token punctuation">(</span>rendererOptions<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token constant">APP</span><span class="token punctuation">)</span> <span class="token comment">// 为了实现重载额外包了一层</span>
<span class="token function">createAppAPI</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>

<span class="token comment">// 2. 执行app的挂载</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
    vnode <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span><span class="token constant">APP</span><span class="token punctuation">)</span>
    <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span>container<span class="token punctuation">)</span>
		<span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
		<span class="token function">processComponent</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">mountComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        instance <span class="token operator">=</span> vnode<span class="token punctuation">.</span>component <span class="token operator">=</span> <span class="token function">createComponentInstance</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token function">setupComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> setupComponent
            <span class="token function">initProps</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> instance <span class="token punctuation">.</span>vnode<span class="token punctuation">.</span>props<span class="token punctuation">)</span>
            <span class="token function">initSlots</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> instance <span class="token punctuation">.</span>vnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span>
            <span class="token function">setupStatefulComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
            instance<span class="token punctuation">.</span>proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>ctx<span class="token punctuation">,</span> PublicInstanceProxyHandlers<span class="token punctuation">)</span>
            setupContext <span class="token operator">=</span> <span class="token function">createSetupContext</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
            setupResult <span class="token operator">=</span> setup <span class="token operator">&amp;&amp;</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token function">shallowReadonly</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">,</span> setupContext<span class="token punctuation">)</span>
            <span class="token function">handleSetupResult</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> setupResult<span class="token punctuation">)</span>
            instance<span class="token punctuation">.</span>setupState <span class="token operator">=</span> <span class="token function">proxyRefs</span><span class="token punctuation">(</span>setupResult<span class="token punctuation">)</span>
            <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>setupResult<span class="token punctuation">,</span> shallowUnwrapHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
        <span class="token function">setupRenderEffect</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span>
        instance<span class="token punctuation">.</span>update <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span>componentUpdateFn<span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token function-variable function">scheduler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">queueJob</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、createapp" tabindex="-1"><a class="header-anchor" href="#二、createapp"><span>二、createApp</span></a></h2><p><code>createApp</code>主要完成了如下三个功能：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> createApp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 创建渲染器  2. 创建app</span>
    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">ensureRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> 

    <span class="token keyword">const</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token operator">=</span> app
    <span class="token comment">// 3. 重写mount（添加初始化container等功能）</span>
    app<span class="token punctuation">.</span><span class="token function-variable function">mount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 省略部分代码</span>
        
        <span class="token comment">// 执行原始mount</span>
        <span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> app <span class="token comment">// 返回app</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">ensureRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span> renderer <span class="token operator">||</span> <span class="token punctuation">(</span> renderer <span class="token operator">=</span> <span class="token function">createRenderer</span><span class="token punctuation">(</span>rendererOptions<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于mount的重写主要用于添加一些平台相关的额外功能，比如根据<code>#app</code>获取到具体的dom元素等</li><li><code>ensureRenderer</code>确保渲染器只会进行一次初始化，其中<code>rendererOptions</code>是一些web平台的dom操作集合对象，在分析渲染器时，我们知道vue为了实现跨平台，将其中一些依赖于特定平台的操作进行了封装。</li></ul><p>在<code>createRenderer</code>定义了一大堆函数，但对于我们理解整体流程来说，最重要的是它返回的对象，因为可以看出vue通过调用其返回对象中的createApp方法，从而创建了app对象。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">baseCreateRenderer</span><span class="token punctuation">(</span> <span class="token parameter">options<span class="token punctuation">,</span> createHydrationFns</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 省略部分代码</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        render<span class="token punctuation">,</span>
        hydrate<span class="token punctuation">,</span>
        <span class="token literal-property property">createApp</span><span class="token operator">:</span> <span class="token function">createAppAPI</span><span class="token punctuation">(</span>render<span class="token punctuation">,</span> hydrate<span class="token punctuation">)</span> <span class="token comment">// 创建app的方法。这里会调用render方法</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>hydrate</code>是服务端渲染使用的变量这里不用管，<code>createAppAPI(render)</code>主要完成的功能如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createAppAPI</span><span class="token punctuation">(</span><span class="token parameter">render</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token parameter">rootComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">_component</span><span class="token operator">:</span> rootComponent<span class="token punctuation">,</span>
      <span class="token function">mount</span><span class="token punctuation">(</span><span class="token parameter">rootContainer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>rootComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> rootContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> app<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>传入的render在执行<code>app.mount</code>的时候调用</li><li>创建app实例并返回</li></ul><h2 id="二、mount" tabindex="-1"><a class="header-anchor" href="#二、mount"><span>二、mount</span></a></h2><h3 id="_1-mountcomponent" tabindex="-1"><a class="header-anchor" href="#_1-mountcomponent"><span>1. mountComponent</span></a></h3>`,14)),a("p",null,[n[1]||(n[1]=s("从上述代码可以看出原始的mount函数主要完成的功能为 ")),n[2]||(n[2]=a("mark",null,"创建vnode并使用render函数进行渲染",-1)),n[3]||(n[3]=s(" 。其中render函数内部会调用")),n[4]||(n[4]=a("code",null,"patch",-1)),n[5]||(n[5]=s("函数，根据")),n[6]||(n[6]=a("code",null,"vnode.type",-1)),n[7]||(n[7]=s("进行不同的处理。初始渲染时执行的是")),n[8]||(n[8]=a("code",null,"mountComponent(vnode, container, null)",-1)),n[9]||(n[9]=s("（")),l(p,{to:"/source_code/vue3/05.%E6%B8%B2%E6%9F%93%E5%99%A8.html#_2-mountcomponent"},{default:u(()=>n[0]||(n[0]=[s("mountComponent")])),_:1}),n[10]||(n[10]=s("），mountComponent主要实现的功能如下："))]),n[12]||(n[12]=t(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token parameter">initialVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parentComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 先创建一个组件instance</span>
    <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span>initialVNode<span class="token punctuation">.</span>component <span class="token operator">=</span> <span class="token function">createComponentInstance</span><span class="token punctuation">(</span>
        initialVNode<span class="token punctuation">,</span>
        parentComponent
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. 给 instance 加工加工</span>
    <span class="token function">setupComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 设置渲染副作用</span>
    <span class="token function">setupRenderEffect</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> initialVNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>setupComponent</code>类似于组件实例的初始化，在instance上添加额外的属性</li><li><code>setupRenderEffect</code>类似于vue2中设置render Watcher</li></ul><h3 id="_2-setupcomponent" tabindex="-1"><a class="header-anchor" href="#_2-setupcomponent"><span>2. setupComponent</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">setupComponent</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> props<span class="token punctuation">,</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> instance<span class="token punctuation">.</span>vnode<span class="token punctuation">;</span>
    <span class="token function">initProps</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解析props和attrs</span>
    <span class="token function">initSlots</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化slots</span>
    <span class="token function">setupStatefulComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">setupStatefulComponent</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 创建渲染上下文</span>
    instance<span class="token punctuation">.</span>proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>ctx<span class="token punctuation">,</span> PublicInstanceProxyHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. 调用 setup</span>
    <span class="token keyword">const</span> Component <span class="token operator">=</span> instance<span class="token punctuation">.</span>type<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token operator">=</span> Component<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>setup<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置当前 currentInstance 的值</span>
        <span class="token function">setCurrentInstance</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> setupContext <span class="token operator">=</span> <span class="token function">createSetupContext</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { attrs, emit, slots, expose}</span>
        <span class="token keyword">const</span> setupResult <span class="token operator">=</span> setup <span class="token operator">&amp;&amp;</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token function">shallowReadonly</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">,</span> setupContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setCurrentInstance</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 3. 处理 setupResult</span>
        <span class="token function">handleSetupResult</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> setupResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 给 instance 设置 render</span>
        <span class="token comment">// 包含模板/渲染函数规范化以及对2.x选项式的兼容</span>
        <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>初始化props时根据组件内部声明的props选项将传入组件的属性挂载到<code>instance.props</code>或<code>instance.attrs</code></p></li><li><p>父组件环境下在编译时会将使用子组件时传入的插槽编译为一个children对象，其中包含返回vnode的函数。在初始化slots时将children对象中的函数取出并挂载到<code>instance.slots</code></p></li><li><p>渲染上下文指的是在我们在编写template模板中会使用的数据，实际上是对<code>instance.ctx</code> 对象的代理</p></li><li><p><code>setupContext</code>中使用的expose函数本质上依然是将传入的对象挂载到<code>instance.exposed</code>中</p></li><li><p><code>handleSetupResult</code>实现的功能是根据setup函数返回值的类型进行不同处理</p><ul><li><p>如果返回值是函数，将此函数作为render挂载到<code>instance.render</code></p></li><li><p>如果返回值是对象，将此对象挂载到<code>instance.setupState</code>，因为此对象中的数据在模板中也需要可以直接进行访问。（在渲染上下文中对其进行处理）</p><blockquote><p>之所以返回对象中ref类型的响应式数据在模板中可以直接使用而不用<code>xx.value</code>，是因为在挂载时使用<code>proxyRefs</code>进行了解构。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>instance<span class="token punctuation">.</span>setupState <span class="token operator">=</span> <span class="token function">proxyRefs</span><span class="token punctuation">(</span>setupResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote></li></ul></li></ul><h3 id="_3-setuprendereffect" tabindex="-1"><a class="header-anchor" href="#_3-setuprendereffect"><span>3. setupRenderEffect</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">setupRenderEffect</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> initialVNode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">componentUpdateFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">.</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 组件初始化的时候会执行这里</span>
            <span class="token comment">// 调用 render 函数触发依赖收集，响应式的值变更后会再次触发这个函数</span>
            <span class="token keyword">const</span> proxyToUse <span class="token operator">=</span> instance<span class="token punctuation">.</span>proxy<span class="token punctuation">;</span> <span class="token comment">// 渲染上下文</span>
            <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>subTree <span class="token operator">=</span> <span class="token function">normalizeVNode</span><span class="token punctuation">(</span>
                instance<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>proxyToUse<span class="token punctuation">,</span> proxyToUse<span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 触发beforeMount钩子函数</span>

            <span class="token comment">// patch组件内实际的内容</span>
            <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 把 root element 赋值给 组件的vnode.el ，为后续调用 $el 的时候获取值</span>
            initialVNode<span class="token punctuation">.</span>el <span class="token operator">=</span> subTree<span class="token punctuation">.</span>el<span class="token punctuation">;</span>
            instance<span class="token punctuation">.</span>isMounted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 响应式的值变更后会执行此处逻辑</span>
            <span class="token comment">// 主要就是拿到新的 vnode ，然后和之前的 vnode 进行对比</span>
            
            <span class="token comment">// 拿到最新的 subTree</span>
            <span class="token keyword">const</span> <span class="token punctuation">{</span> next<span class="token punctuation">,</span> vnode <span class="token punctuation">}</span> <span class="token operator">=</span> instance<span class="token punctuation">;</span>

            <span class="token comment">// 如果有 next 的话， 说明需要更新组件的数据（props，slots 等）</span>
            <span class="token comment">// 先更新组件的数据，然后更新完成后，再继续对比当前组件的子元素</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                next<span class="token punctuation">.</span>el <span class="token operator">=</span> vnode<span class="token punctuation">.</span>el<span class="token punctuation">;</span>
                <span class="token function">updateComponentPreRender</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">const</span> proxyToUse <span class="token operator">=</span> instance<span class="token punctuation">.</span>proxy<span class="token punctuation">;</span>
            <span class="token keyword">const</span> nextTree <span class="token operator">=</span> <span class="token function">normalizeVNode</span><span class="token punctuation">(</span>
                instance<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>proxyToUse<span class="token punctuation">,</span> proxyToUse<span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 替换之前的 subTree</span>
            <span class="token keyword">const</span> prevTree <span class="token operator">=</span> instance<span class="token punctuation">.</span>subTree<span class="token punctuation">;</span>
            instance<span class="token punctuation">.</span>subTree <span class="token operator">=</span> nextTree<span class="token punctuation">;</span>

            <span class="token comment">// 触发 beforeUpdated hook</span>

            <span class="token comment">// 用旧的 vnode 和新的 vnode 交给 patch 来处理</span>
            <span class="token function">patch</span><span class="token punctuation">(</span>prevTree<span class="token punctuation">,</span> nextTree<span class="token punctuation">,</span> prevTree<span class="token punctuation">.</span>el<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 触发 updated hook</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    instance<span class="token punctuation">.</span>update <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span>componentUpdateFn<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">scheduler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">queueJob</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 vue3.2 版本里面设置副作用函数使用的是 <code>new ReactiveEffect</code>，至于为什么不直接用 effect ，是因为需要一个 scope 参数来收集所有的 effect，而 effect 这个函数是对外暴露的 API ，设计上要保持简洁和稳定性，不适合频繁改变其参数和行为。所以会使用 <code>new ReactiveEffect</code>，因为 它是一个内部类，具有更高的灵活性来适应内部需求，包括接受额外的参数。</li><li>执行<code>instance.render</code>函数会生成组件实际内容的vnode，然后调用<code>patch</code>将其挂载</li><li>当组件更新是因为内部数据变更引起的自更新时，next的值为null；而父组件传入子组件的props发生变化导致的被动更新时，next的值为新的子组件vnode。</li><li>当在组件标签上使用ref获取组件实例时，实际获取的是<code>exposeProxy</code>，因此使用<code>ref.value.xxx</code>使用子组件的属性或者方法时，只能使用子组件通过expose暴露出来的方法和公共方法。（即<code>$el,$props</code>这些）</li></ul><blockquote><p>本质上和vue2区别不大，主要实现就两部分：</p><ul><li>封装一个函数，其中先<code>render</code>再<code>patch</code></li><li>将函数设置为副作用（vue2中的watcher）</li></ul><p>设置副作用的时候函数会自动执行一次，将其与模板中所用到的响应式数据绑定</p></blockquote><h2 id="三、总结" tabindex="-1"><a class="header-anchor" href="#三、总结"><span>三、总结</span></a></h2><p>总体来说整体流程与vue2区别不大，首先会实例化应用（createApp和new vue），然后创建组件vnode并执行挂载，挂载过程中会将包含<code>render</code>和<code>patch</code>的函数与响应式数据相关联，并在执行patch函数时挂载子节点和子组件。</p>`,11))])}const b=e(r,[["render",k],["__file","vue3挂载流程.html.vue"]]),f=JSON.parse(`{"path":"/source_code/vue3/vue3%E6%8C%82%E8%BD%BD%E6%B5%81%E7%A8%8B.html","title":"vue3挂载流程","lang":"zh-CN","frontmatter":{"title":"vue3挂载流程","description":"一、整体渲染流程 众所周知vue的渲染从其入口函数，即createApp(APP).mount('#app')开始，整体的大概流程如下所示： 二、createApp createApp主要完成了如下三个功能： 对于mount的重写主要用于添加一些平台相关的额外功能，比如根据#app获取到具体的dom元素等 ensureRenderer确保渲染器只会进行...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/source_code/vue3/vue3%E6%8C%82%E8%BD%BD%E6%B5%81%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"vue3挂载流程"}],["meta",{"property":"og:description","content":"一、整体渲染流程 众所周知vue的渲染从其入口函数，即createApp(APP).mount('#app')开始，整体的大概流程如下所示： 二、createApp createApp主要完成了如下三个功能： 对于mount的重写主要用于添加一些平台相关的额外功能，比如根据#app获取到具体的dom元素等 ensureRenderer确保渲染器只会进行..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-12T13:12:46.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-09-12T13:12:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vue3挂载流程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-12T13:12:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、整体渲染流程","slug":"一、整体渲染流程","link":"#一、整体渲染流程","children":[]},{"level":2,"title":"二、createApp","slug":"二、createapp","link":"#二、createapp","children":[]},{"level":2,"title":"二、mount","slug":"二、mount","link":"#二、mount","children":[{"level":3,"title":"1. mountComponent","slug":"_1-mountcomponent","link":"#_1-mountcomponent","children":[]},{"level":3,"title":"2. setupComponent","slug":"_2-setupcomponent","link":"#_2-setupcomponent","children":[]},{"level":3,"title":"3. setupRenderEffect","slug":"_3-setuprendereffect","link":"#_3-setuprendereffect","children":[]}]},{"level":2,"title":"三、总结","slug":"三、总结","link":"#三、总结","children":[]}],"git":{"createdTime":1726146766000,"updatedTime":1726146766000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":1}]},"readingTime":{"minutes":6.13,"words":1840},"filePathRelative":"source_code/vue3/vue3挂载流程.md","localizedDate":"2024年9月12日","excerpt":"<h2>一、整体渲染流程</h2>\\n<p>众所周知vue的渲染从其入口函数，即<code>createApp(APP).mount('#app')</code>开始，整体的大概流程如下所示：</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 1.创建app</span>\\napp <span class=\\"token operator\\">=</span> <span class=\\"token function\\">createApp</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">APP</span><span class=\\"token punctuation\\">)</span>\\napp <span class=\\"token operator\\">=</span> <span class=\\"token function\\">ensureRenderer</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createApp</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">APP</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token function\\">createRenderer</span><span class=\\"token punctuation\\">(</span>rendererOptions<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createApp</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">APP</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token function\\">baseCreateRenderer</span><span class=\\"token punctuation\\">(</span>rendererOptions<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createApp</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">APP</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 为了实现重载额外包了一层</span>\\n<span class=\\"token function\\">createAppAPI</span><span class=\\"token punctuation\\">(</span>render<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span>App<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\">// 2. 执行app的挂载</span>\\napp<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">mount</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'#app'</span><span class=\\"token punctuation\\">)</span>\\n    vnode <span class=\\"token operator\\">=</span> <span class=\\"token function\\">createVNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">APP</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">render</span><span class=\\"token punctuation\\">(</span>vnode<span class=\\"token punctuation\\">,</span>container<span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token function\\">patch</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> vnode<span class=\\"token punctuation\\">,</span> container<span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token function\\">processComponent</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> vnode<span class=\\"token punctuation\\">,</span> container<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token function\\">mountComponent</span><span class=\\"token punctuation\\">(</span>vnode<span class=\\"token punctuation\\">,</span> container<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        instance <span class=\\"token operator\\">=</span> vnode<span class=\\"token punctuation\\">.</span>component <span class=\\"token operator\\">=</span> <span class=\\"token function\\">createComponentInstance</span><span class=\\"token punctuation\\">(</span>vnode<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token function\\">setupComponent</span><span class=\\"token punctuation\\">(</span>instance<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">-</span> setupComponent\\n            <span class=\\"token function\\">initProps</span><span class=\\"token punctuation\\">(</span>instance<span class=\\"token punctuation\\">,</span> instance <span class=\\"token punctuation\\">.</span>vnode<span class=\\"token punctuation\\">.</span>props<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token function\\">initSlots</span><span class=\\"token punctuation\\">(</span>instance<span class=\\"token punctuation\\">,</span> instance <span class=\\"token punctuation\\">.</span>vnode<span class=\\"token punctuation\\">.</span>children<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token function\\">setupStatefulComponent</span><span class=\\"token punctuation\\">(</span>instance<span class=\\"token punctuation\\">)</span>\\n            instance<span class=\\"token punctuation\\">.</span>proxy <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Proxy</span><span class=\\"token punctuation\\">(</span>instance<span class=\\"token punctuation\\">.</span>ctx<span class=\\"token punctuation\\">,</span> PublicInstanceProxyHandlers<span class=\\"token punctuation\\">)</span>\\n            setupContext <span class=\\"token operator\\">=</span> <span class=\\"token function\\">createSetupContext</span><span class=\\"token punctuation\\">(</span>instance<span class=\\"token punctuation\\">)</span>\\n            setupResult <span class=\\"token operator\\">=</span> setup <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">setup</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">shallowReadonly</span><span class=\\"token punctuation\\">(</span>instance<span class=\\"token punctuation\\">.</span>props<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> setupContext<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token function\\">handleSetupResult</span><span class=\\"token punctuation\\">(</span>instance<span class=\\"token punctuation\\">,</span> setupResult<span class=\\"token punctuation\\">)</span>\\n            instance<span class=\\"token punctuation\\">.</span>setupState <span class=\\"token operator\\">=</span> <span class=\\"token function\\">proxyRefs</span><span class=\\"token punctuation\\">(</span>setupResult<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Proxy</span><span class=\\"token punctuation\\">(</span>setupResult<span class=\\"token punctuation\\">,</span> shallowUnwrapHandlers<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">-</span>\\n        <span class=\\"token function\\">setupRenderEffect</span><span class=\\"token punctuation\\">(</span>instance<span class=\\"token punctuation\\">,</span> vnode<span class=\\"token punctuation\\">,</span> container<span class=\\"token punctuation\\">)</span>\\n        instance<span class=\\"token punctuation\\">.</span>update <span class=\\"token operator\\">=</span> <span class=\\"token function\\">effect</span><span class=\\"token punctuation\\">(</span>componentUpdateFn<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token function-variable function\\">scheduler</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token function\\">queueJob</span><span class=\\"token punctuation\\">(</span>instance<span class=\\"token punctuation\\">.</span>update<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}`);export{b as comp,f as data};
