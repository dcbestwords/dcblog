import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as i,e as l}from"./app-CEU2DLTe.js";const o="/dcblog/assets/16495715870144-C1c61yKX.jpg",n={},a=l('<h2 id="一、浏览器端的模块化" tabindex="-1"><a class="header-anchor" href="#一、浏览器端的模块化"><span>一、浏览器端的模块化</span></a></h2><p>问题：</p><ul><li>效率问题：精细的模块划分带来了更多的JS文件，更多的JS文件带来了更多的请求，降低了页面访问效率</li><li>兼容性问题：浏览器目前仅支持ES6的模块化标准，并且还存在兼容性问题</li><li>工具问题：浏览器不支持npm下载的第三方包</li></ul><p>这些仅仅是前端工程化的一个缩影</p><p>当开发一个具有规模的程序，你将遇到非常多的非业务问题，这些问题包括：执行效率、兼容性、代码的可维护性可扩展性、团队协作、测试等等等等，我们将这些问题称之为工程问题。工程问题与业务无关，但它深刻的影响到开发进度，如果没有一个好的工具解决这些问题，将使得开发进度变得极其缓慢，同时也让开发者陷入技术的泥潭。</p><h2 id="二、根本原因" tabindex="-1"><a class="header-anchor" href="#二、根本原因"><span>二、根本原因</span></a></h2><p>思考：上面提到的问题，为什么在node端没有那么明显，反而到了浏览器端变得如此严重呢？</p><p>答：在node端，运行的JS文件在本地，因此可以本地读取文件，它的效率比浏览器远程传输文件高的多</p><p><strong>根本原因</strong>：在浏览器端，开发时态（devtime）和运行时态（runtime）的侧重点不一样</p><p><strong>开发时态，devtime：</strong></p><ol><li>模块划分越细越好</li><li>支持多种模块化标准</li><li>支持npm或其他包管理器下载的模块</li><li>能够解决其他工程化的问题</li></ol><p><strong>运行时态，runtime：</strong></p><ol><li>文件越少越好</li><li>文件体积越小越好</li><li>代码内容越乱越好</li><li>所有浏览器都要兼容</li><li>能够解决其他运行时的问题，主要是执行效率问题</li></ol><p>这种差异在小项目中表现的并不明显，可是一旦项目形成规模，就越来越明显，如果不解决这些问题，前端项目形成规模只能是空谈。</p><blockquote><p>开发人员和浏览器喜欢的代码是不同的</p></blockquote><h2 id="三、解决办法" tabindex="-1"><a class="header-anchor" href="#三、解决办法"><span>三、解决办法</span></a></h2><p>既然开发时态和运行时态面临的局面有巨大的差异，因此，我们需要有一个工具，这个工具能够让开发者专心的在开发时态写代码，然后利用这个工具将开发时态编写的代码转换为运行时态需要的东西。</p><p>这样的工具，叫做<strong>构建工具</strong></p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这样一来，开发者就可以专注于开发时态的代码结构，而不用担心运行时态遇到的问题了。</p><h2 id="四、常见的构建工具" tabindex="-1"><a class="header-anchor" href="#四、常见的构建工具"><span>四、常见的构建工具</span></a></h2><ul><li><strong>webpack</strong></li><li>vite</li><li>grunt</li><li>gulp</li><li>browserify</li><li>fis</li><li>其他</li></ul>',22),p=[a];function r(c,s){return t(),i("div",null,p)}const h=e(n,[["render",r],["__file","01_problem.html.vue"]]),g=JSON.parse('{"path":"/Efficiency/webpack/01_problem.html","title":"浏览器端实现模块化的问题","lang":"zh-CN","frontmatter":{"title":"浏览器端实现模块化的问题","order":1,"description":"一、浏览器端的模块化 问题： 效率问题：精细的模块划分带来了更多的JS文件，更多的JS文件带来了更多的请求，降低了页面访问效率 兼容性问题：浏览器目前仅支持ES6的模块化标准，并且还存在兼容性问题 工具问题：浏览器不支持npm下载的第三方包 这些仅仅是前端工程化的一个缩影 当开发一个具有规模的程序，你将遇到非常多的非业务问题，这些问题包括：执行效率、兼...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/Efficiency/webpack/01_problem.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"浏览器端实现模块化的问题"}],["meta",{"property":"og:description","content":"一、浏览器端的模块化 问题： 效率问题：精细的模块划分带来了更多的JS文件，更多的JS文件带来了更多的请求，降低了页面访问效率 兼容性问题：浏览器目前仅支持ES6的模块化标准，并且还存在兼容性问题 工具问题：浏览器不支持npm下载的第三方包 这些仅仅是前端工程化的一个缩影 当开发一个具有规模的程序，你将遇到非常多的非业务问题，这些问题包括：执行效率、兼..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T13:13:32.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-03-19T13:13:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"浏览器端实现模块化的问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-19T13:13:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、浏览器端的模块化","slug":"一、浏览器端的模块化","link":"#一、浏览器端的模块化","children":[]},{"level":2,"title":"二、根本原因","slug":"二、根本原因","link":"#二、根本原因","children":[]},{"level":2,"title":"三、解决办法","slug":"三、解决办法","link":"#三、解决办法","children":[]},{"level":2,"title":"四、常见的构建工具","slug":"四、常见的构建工具","link":"#四、常见的构建工具","children":[]}],"git":{"createdTime":1710854012000,"updatedTime":1710854012000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":1}]},"readingTime":{"minutes":2.39,"words":717},"filePathRelative":"Efficiency/webpack/01_problem.md","localizedDate":"2024年3月19日","excerpt":"<h2>一、浏览器端的模块化</h2>\\n<p>问题：</p>\\n<ul>\\n<li>效率问题：精细的模块划分带来了更多的JS文件，更多的JS文件带来了更多的请求，降低了页面访问效率</li>\\n<li>兼容性问题：浏览器目前仅支持ES6的模块化标准，并且还存在兼容性问题</li>\\n<li>工具问题：浏览器不支持npm下载的第三方包</li>\\n</ul>\\n<p>这些仅仅是前端工程化的一个缩影</p>\\n<p>当开发一个具有规模的程序，你将遇到非常多的非业务问题，这些问题包括：执行效率、兼容性、代码的可维护性可扩展性、团队协作、测试等等等等，我们将这些问题称之为工程问题。工程问题与业务无关，但它深刻的影响到开发进度，如果没有一个好的工具解决这些问题，将使得开发进度变得极其缓慢，同时也让开发者陷入技术的泥潭。</p>","autoDesc":true}');export{h as comp,g as data};
