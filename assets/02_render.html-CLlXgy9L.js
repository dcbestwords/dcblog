import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as a,o}from"./app-C36VsSPQ.js";const l={};function n(i,e){return o(),t("div",null,e[0]||(e[0]=[a('<h1 id="浏览器是如何工作的" tabindex="-1"><a class="header-anchor" href="#浏览器是如何工作的"><span>浏览器是如何工作的</span></a></h1><h2 id="一、浏览器是如何渲染页面的" tabindex="-1"><a class="header-anchor" href="#一、浏览器是如何渲染页面的"><span>一、浏览器是如何渲染页面的</span></a></h2><p>当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。</p><hr><p>整个渲染流程分为多个阶段，分别是： HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画。每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。</p><p>这样，整个渲染流程就形成了一套组织严密的生产流水线。</p><hr><p>渲染的第一步是 <mark>解析 HTML</mark> 。解析过程中遇到 CSS 解析 CSS，遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS 文件和 外部的 JS 文件。</p><p>如果主线程解析到<code>link</code>位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的 HTML。这是因为下载和解析 CSS 的工作是在预解析线程中进行的。这就是 CSS 不会阻塞 HTML 解析的根本原因。</p><p>如果主线程解析到<code>script</code>位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML。这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停。这就是 JS 会阻塞 HTML 解析的根本原因。</p><p>第一步完成后，会得到 DOM 树和 CSSOM 树，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在 CSSOM 树中。</p><hr><p>渲染的下一步是 <mark>样式计算</mark> 。主线程会遍历得到的 DOM 树，依次为树中的每个节点计算出它最终的样式，称之为 Computed Style。在这一过程中，很多预设值会变成绝对值，比如<code>red</code>会变成<code>rgb(255,0,0)</code>；相对单位会变成绝对单位，比如<code>em</code>会变成<code>px</code>。这一步完成后，会得到一棵带有样式的 DOM 树。</p><hr><p>接下来是 <mark>布局</mark> ，布局完成后会得到布局树。布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含块的位置。大部分时候，DOM 树和布局树并非一一对应。</p><p>比如<code>display:none</code>的节点没有几何信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然 DOM 树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。</p><hr><p>下一步是 <mark>分层</mark>。主线程会使用一套复杂的策略对整个布局树中进行分层。分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率。滚动条、堆叠上下文、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过<code>will-change</code>属性更大程度的影响分层结果。</p><hr><p>再下一步是 <mark>绘制</mark> 。主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。</p><hr><p>完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。合成线程首先对每个图层进行分块，将其划分为更多的小区域。它会从线程池中拿取多个线程来完成分块工作。</p><hr><p>分块完成后，进入 <mark>光栅化</mark> 阶段。合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化。</p><p>GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。光栅化的结果，就是一块一块的位图</p><hr><p>最后一个阶段就是 <mark>画</mark> 了。合成线程拿到每个层、每个块的位图后，生成一个个「指引（quad）」信息。</p><p>指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。变形发生在合成线程，与渲染主线程无关，这就是<code>transform</code>效率高的本质原因。合成线程会把 quad 提交给 GPU 进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像。</p><h2 id="二、什么是-reflow" tabindex="-1"><a class="header-anchor" href="#二、什么是-reflow"><span>二、什么是 reflow？</span></a></h2><p>reflow 的本质就是重新计算 layout 树。当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout。</p><p>为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算。所以，改动属性造成的 reflow 是异步完成的。也同样因为如此，当 JS 获取布局属性时，就可能造成无法获取到最新的布局信息。浏览器在反复权衡下，最终决定获取属性立即 reflow。</p><h2 id="三、什么是-repaint" tabindex="-1"><a class="header-anchor" href="#三、什么是-repaint"><span>三、什么是 repaint？</span></a></h2><p>repaint 的本质就是重新根据分层信息计算了绘制指令。当改动了可见样式后，就需要重新计算，会引发 repaint。</p><p>由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint。</p><h2 id="四、为什么-transform-的效率高" tabindex="-1"><a class="header-anchor" href="#四、为什么-transform-的效率高"><span>四、为什么 transform 的效率高？</span></a></h2><p>因为 transform 既不会影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个「draw」阶段</p><p>由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化。</p><h2 id="五、浏览器输入-url-地址之后" tabindex="-1"><a class="header-anchor" href="#五、浏览器输入-url-地址之后"><span>五、浏览器输入 URL 地址之后</span></a></h2><blockquote><p>在浏览器地址栏输入地址，并按下回车键后，发生了哪些事情？</p></blockquote><ol><li>浏览器自动补全协议、端口</li><li>浏览器自动完成 url 编码</li><li>浏览器根据 url 地址查找本地缓存，根据缓存规则看是否命中缓存，若命中缓存则直接使用缓存，不再发出请求</li><li>通过 DNS 解析找到服务器的 IP 地址</li><li>浏览器向服务器发出建立 TCP 连接的申请，完成三次握手后，连接通道建立</li><li>若使用了 HTTPS 协议，则还会进行 SSL 握手，建立加密信道。使用 SSL 握手时，会确定是否使用 HTTP2</li><li>浏览器决定要附带哪些 cookie 到请求头中</li><li>浏览器自动设置好请求头、协议版本、cookie，发出 GET 请求</li><li>服务器处理请求，进入后端处理流程。完成处理后，服务器响应一个 HTTP 报文给浏览器。</li><li>浏览器根据使用的协议版本，以及 Connection 字段的约定，决定是否要保留 TCP 连接。</li><li>浏览器根据响应状态码决定如何处理这一次响应</li><li>浏览器根据响应头中的 Content-Type 字段识别响应类型，如果是 text/html，则对响应体的内容进行 HTML 解析，否则做其他处理</li><li>浏览器根据响应头的其他内容完成缓存、cookie 的设置</li><li>浏览器开始从上到下解析 HTML，若遇到外部资源链接，则进一步请求资源</li><li>解析过程中生成 DOM 树、CSSOM 树，然后一边生成，一边把二者合并为渲染树（rendering tree），随后对渲染树中的每个节点计算位置和大小（reflow），最后把每个节点利用 GPU 绘制到屏幕（repaint）</li><li>在解析过程中还会触发一系列的事件，当 DOM 树完成后会触发 DOMContentLoaded 事件，当所有资源加载完毕后会触发 load 事件</li></ol>',40)]))}const d=r(l,[["render",n],["__file","02_render.html.vue"]]),s=JSON.parse('{"path":"/browser_internet/Browser/02_render.html","title":"浏览器是如何工作的","lang":"zh-CN","frontmatter":{"order":2,"category":["前端"],"tag":["浏览器渲染原理"],"description":"浏览器是如何工作的 一、浏览器是如何渲染页面的 当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。 整个渲染流程分为多个阶段，分别是： HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画。每个阶段都有明确的输入输出，上一个阶...","head":[["meta",{"property":"og:url","content":"https://github.com/browser_internet/Browser/02_render.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"浏览器是如何工作的"}],["meta",{"property":"og:description","content":"浏览器是如何工作的 一、浏览器是如何渲染页面的 当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。 整个渲染流程分为多个阶段，分别是： HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画。每个阶段都有明确的输入输出，上一个阶..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-03T11:20:13.000Z"}],["meta",{"property":"article:tag","content":"浏览器渲染原理"}],["meta",{"property":"article:modified_time","content":"2024-12-03T11:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"浏览器是如何工作的\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-03T11:20:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、浏览器是如何渲染页面的","slug":"一、浏览器是如何渲染页面的","link":"#一、浏览器是如何渲染页面的","children":[]},{"level":2,"title":"二、什么是 reflow？","slug":"二、什么是-reflow","link":"#二、什么是-reflow","children":[]},{"level":2,"title":"三、什么是 repaint？","slug":"三、什么是-repaint","link":"#三、什么是-repaint","children":[]},{"level":2,"title":"四、为什么 transform 的效率高？","slug":"四、为什么-transform-的效率高","link":"#四、为什么-transform-的效率高","children":[]},{"level":2,"title":"五、浏览器输入 URL 地址之后","slug":"五、浏览器输入-url-地址之后","link":"#五、浏览器输入-url-地址之后","children":[]}],"git":{"createdTime":1710854012000,"updatedTime":1733224813000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":3}]},"readingTime":{"minutes":6.91,"words":2074},"filePathRelative":"browser_internet/Browser/02_render.md","localizedDate":"2024年3月19日","excerpt":"\\n<h2>一、浏览器是如何渲染页面的</h2>\\n<p>当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。</p>","autoDesc":true}');export{d as comp,s as data};
