import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,a as n,b as s,d as p,e as a}from"./app-D5q1vSCD.js";const l="/dcblog/assets/20220428165634-Btk9WOaI.png",u="/dcblog/assets/get-BTtsMuKy.gif",r="/dcblog/assets/post-BLnagiqJ.gif",d="/dcblog/assets/json-CIvlGp_0.gif",k="/dcblog/assets/ieCache--_pLqJwM.gif",v="/dcblog/assets/timeout-BglmAnKm.gif",m="/dcblog/assets/offline-ComzzB0b.png",b="/dcblog/assets/cancel-DFYsNBE4.gif",g="/dcblog/assets/repost-DNhwG3ZG.gif",h="/dcblog/assets/request-GGF87c6W.png",f="/dcblog/assets/console-CE7-DvaC.png",y="/dcblog/assets/image-20200417161014030-BVGwuXRJ.png",x="/dcblog/assets/image-20200417161950450-CpHfqT8K.png",j={},_=a('<h2 id="一、用户代理" tabindex="-1"><a class="header-anchor" href="#一、用户代理"><span>一、用户代理</span></a></h2><p>浏览器可以代替用户完成http请求，代替用户解析响应结果，所以我们称之为：</p><p><strong>用户代理 user agent</strong></p><p>在网络层面，对于前端开发者，必须要知道浏览器拥有的两大核心能力：</p><ul><li>自动发出请求的能力</li><li>自动解析响应的能力</li></ul><h3 id="_1-自动发出请求的能力" tabindex="-1"><a class="header-anchor" href="#_1-自动发出请求的能力"><span>1. 自动发出请求的能力</span></a></h3><p>当一些事情发生的时候，浏览器会代替用户自动发出http请求，常见的包括：</p><ol><li><p><strong>用户在地址栏输入了一个url地址，并按下了回车</strong></p><p>浏览器会自动解析URL，并发出一个<code>GET</code>请求，同时抛弃当前页面。</p></li><li><p><strong>当用户点击了页面中的a元素</strong></p><p>浏览器会拿到a元素的href地址，并发出一个<code>GET</code>请求，同时抛弃当前页面。</p></li><li><p><strong>当用户点击了提交按钮<code>&lt;button type=&quot;submit&quot;&gt;...&lt;/button&gt;</code></strong></p><p>浏览器会获取按钮所在的<code>&lt;form&gt;</code>元素，拿到它的<code>action</code>属性地址，同时拿到它<code>method</code>属性值，然后把表单中的数据组织到请求体中，发出<code>指定方法</code>的请求，同时抛弃当前页面。</p><blockquote><p>这种方式的提交现在越来越少见了</p></blockquote></li><li><p><strong>当解析HTML时遇到了<code>&lt;link&gt; &lt;img&gt; &lt;script&gt; &lt;video&gt; &lt;audio&gt;</code>等元素</strong></p><p>浏览器会拿到对应的地址，发出<code>GET</code>请求</p></li><li><p><strong>当用户点击了刷新</strong></p><p>浏览器会拿到当前页面的地址，以及当前页面的请求方法，重新发一次请求，同时抛弃当前页面。</p></li></ol><blockquote><p>浏览器在发出请求时，会自动附带一些请求头</p></blockquote><p><mark>重点来了</mark></p><p>从古至今，浏览器都有一个约定：</p><p><strong>当发送GET请求时，浏览器不会附带请求体</strong></p><p>这个约定深刻的影响着后续的前后端各种应用，现在，几乎所有人都在潜意识中认同了这一点，无论是前端开发人员还是后端开发人员。</p><p>由于前后端程序的默认行为，逐步造成了GET和POST的各种差异：</p><ol><li><p>浏览器在发送 GET 请求时，不会附带请求体</p></li><li><p>GET 请求的传递信息量有限，适合传递少量数据；POST 请求的传递信息量是没有限制的，适合传输大量数据。</p></li><li><p>GET 请求只能传递 ASCII 数据，遇到非 ASCII 数据需要进行编码；POST 请求没有限制</p></li><li><p>大部分 GET 请求传递的数据都附带在 path 参数中，能够通过分享地址完整的重现页面，但同时也暴露了数据，若有敏感数据传递，不应该使用 GET 请求，至少不应该放到 path 中</p></li><li><p>POST 不会被保存到浏览器的历史记录中</p></li><li><p>刷新页面时，若当前的页面是通过 POST 请求得到的，则浏览器会提示用户是否重新提交。若是 GET 请求得到的页面则没有提示。</p></li></ol><h3 id="_2-自动解析响应的能力" tabindex="-1"><a class="header-anchor" href="#_2-自动解析响应的能力"><span>2. 自动解析响应的能力</span></a></h3><p>浏览器不仅能发送请求，还能够针对服务器的各种响应结果做出不同的自动处理</p><p>常见的处理有：</p><ol><li><p><strong>识别响应码</strong></p><p>浏览器能够自动识别响应码，当出现一些特殊的响应码时浏览器会自动完成处理，比如<code>301、302</code></p></li><li><p><strong>根据响应结果做不同的处理</strong></p><p>浏览器能够自动分析响应头中的<code>Content-Type</code>，根据不同的值进行不同处理，比如：</p><ul><li><p><code>text/plain</code>: 普通的纯文本，浏览器通常会将响应体原封不动的显示到页面上</p></li><li><p><code>text/html</code>：html文档，浏览器通常会将响应体作为页面进行渲染</p></li><li><p><code>text/javascript</code>或<code>application/javascript</code>：js代码，浏览器通常会使用JS执行引擎将它解析执行</p></li><li><p><code>text/css</code>：css代码，浏览器会将它视为样式</p></li><li><p><code>image/jpeg</code>：浏览器会将它视为jpg图片</p></li><li><p><code>application/octet-stream</code>：二进制数据，会触发浏览器下载功能</p></li><li><p><code>attachment</code>：附件，会触发下载功能</p><p>该值和其他值不同，应放到<code>Content-Disposition</code>头中。</p></li></ul></li></ol><h3 id="_3-基本流程" tabindex="-1"><a class="header-anchor" href="#_3-基本流程"><span>3. 基本流程</span></a></h3><blockquote><p>访问：https://oss.duyiedu.com/test/index.html</p></blockquote><figure><img src="'+l+`" alt="image-20220428165629557" tabindex="0" loading="lazy"><figcaption>image-20220428165629557</figcaption></figure><h2 id="二、ajax" tabindex="-1"><a class="header-anchor" href="#二、ajax"><span>二、AJAX</span></a></h2><blockquote><p>浏览器本身就具备网络通信的能力，但在早期，浏览器并没有把这个能力开放给JS。</p><p>最早是微软在IE浏览器中把这一能力向JS开放，让JS可以在代码中实现发送请求，并不会刷新页面，这项技术在2005年被正式命名为AJAX（<strong>A</strong>synchronous <strong>J</strong>avascript <strong>A</strong>nd <strong>X</strong>ML）</p></blockquote><p>AJAX 就是指在web应用程序中异步向服务器发送请求。</p><p>AJAX 最主要的两个特性：</p><ul><li>在不重新加载页面的情况下发送请求给服务器。</li><li>接受并使用从服务器发来的数据。</li></ul><p>AJAX的优点</p><ul><li>可以无需刷新页面而与服务器端进行通信</li><li>允许你根据用户事件来更新部分页面内容</li></ul><p>AJAX缺点</p><ul><li><p>没有浏览历史，不能回退</p></li><li><p>存在跨域问题</p></li><li><p>SEO不友好（爬虫爬不到）</p></li></ul><p>它的实现方式有两种，<code>XMLHttpRequest 简称XHR</code>和<code>Fetch</code></p><p>以下是两者的对比</p><table><thead><tr><th>功能点</th><th>XHR</th><th>Fetch</th></tr></thead><tbody><tr><td>基本的请求能力</td><td>✅</td><td>✅</td></tr><tr><td>基本的获取响应能力</td><td>✅</td><td>✅</td></tr><tr><td>监控请求进度</td><td>✅</td><td>❌</td></tr><tr><td>监控响应进度</td><td>✅</td><td>✅</td></tr><tr><td>Service Worker中是否可用</td><td>❌</td><td>✅</td></tr><tr><td>控制cookie的携带</td><td>❌</td><td>✅</td></tr><tr><td>控制重定向</td><td>❌</td><td>✅</td></tr><tr><td>请求取消</td><td>✅</td><td>✅</td></tr><tr><td>自定义referrer</td><td>❌</td><td>✅</td></tr><tr><td>流</td><td>❌</td><td>✅</td></tr><tr><td>API风格</td><td><code>Event</code></td><td><code>Promise</code></td></tr><tr><td>活跃度</td><td>停止更新</td><td>不断更新</td></tr></tbody></table><h3 id="_1-express的简单使用" tabindex="-1"><a class="header-anchor" href="#_1-express的简单使用"><span>1.express的简单使用</span></a></h3><p>​ 我们使用express来模拟后台服务端，下述步骤124为固定步骤，在后续的操作中我们主要针对步骤3进行修改。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//1. 引入express</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2. 创建应用对象</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//3. 创建路由规则</span>
<span class="token comment">// request 是对请求报文的封装</span>
<span class="token comment">// response 是对响应报文的封装</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">//设置响应</span>
    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;HELLO EXPRESS&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//4. 监听端口启动服务</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;服务已经启动, 8000 端口监听中....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>打开终端，键入命令 <code>node js文件名</code>，开始监听端口开启服务</li></ul><h3 id="_2-原生ajax的实现" tabindex="-1"><a class="header-anchor" href="#_2-原生ajax的实现"><span>2.原生AJAX的实现</span></a></h3><h4 id="_1-服务端的基本流程" tabindex="-1"><a class="header-anchor" href="#_1-服务端的基本流程"><span>1.服务端的基本流程</span></a></h4><ol><li><p>获取元素对象</p></li><li><p>为元素对象绑定事件</p></li><li><p>创建XMLHttpRequest对象</p></li><li><p>发送http请求</p><ul><li>初始化请求参数 <code>open（http请求方法（大写）,URL,是否异步）</code></li><li>发送请求 <code>send（body）</code><ul><li>get 请求不传 body 参数，只有 post 请求使用</li></ul></li></ul></li><li><p>为XMLHttpRequest对象绑定事件，处理服务端响应</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token comment">//当redystate状态值发生变化时触发</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>0 (未初始化) or (<strong>请求还未初始化</strong>)</li><li>1 (正在加载) or (<strong>已建立服务器链接</strong>)</li><li>2 (加载成功) or (<strong>请求已接受</strong>)</li><li>3 (交互) or (<strong>正在处理请求</strong>)</li><li>4 (完成) or (<strong>请求已完成并且响应已准备好</strong>)</li></ul></li><li><p>当服务器正常进行响应时处理响应结果</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//判断响应状态码 200  404  403 401 500</span>
    <span class="token comment">// 2xx 成功</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">//处理结果</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token comment">//异常处理</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>xhr.status</code> //状态码OK</li><li><code>xhr.statusText</code> //状态字符串200</li><li><code>xhr.getAllResponseHeaders()</code> //所有响应头</li><li><code>xhr.response</code> //响应体</li></ul></li></ol><h4 id="_2-get请求" tabindex="-1"><a class="header-anchor" href="#_2-get请求"><span>2.GET请求</span></a></h4><p>要求：点击按钮时获取响应内容显示在result框中</p><ul><li><p>网页端</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//获取button元素</span>
<span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;result&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//绑定事件</span>
btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//1. 创建对象</span>
    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//2. 初始化 设置请求方法和 url</span>
    <span class="token comment">//（HTTP请求方法--大写，url，是否异步）</span>
    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://127.0.0.1:8000/server?a=100&amp;b=200&amp;c=300&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//3. 发送</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//4. 事件绑定 处理服务端返回的结果</span>
    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//判断 (服务端返回了所有的结果)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">//设置 result 的文本</span>
                result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>URL拼接<code>?a=100&amp;b=200&amp;c=300</code>传参</li></ul></li><li><p>服务端</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/server&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//设置响应头  设置允许跨域</span>
    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Origin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//设置响应体</span>
    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;HELLO AJAX&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>跨域问题后面会详细说明，此处不做讲解</li></ul></li><li><p>效果</p><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><h4 id="_3-post请求" tabindex="-1"><a class="header-anchor" href="#_3-post请求"><span>3.POST请求</span></a></h4><p>要求：当鼠标移入result框中时获取响应内容显示在result框中</p><ul><li><p>网页端</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;result&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
result<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mouseover&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://127.0.0.1:8000/server&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//设置请求头</span>
    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;application/x-www-form-urlencoded&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;ggbond&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;a=100&amp;b=200&amp;c=300&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传参</span>
    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>设置请求头部分为了解决跨域问题，后续统一讲解</li></ul></li><li><p>服务端</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//可以接收任意类型的请求 </span>
app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">&#39;/server&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//设置响应头  设置允许跨域</span>
    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Origin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//响应头</span>
    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Headers&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//设置响应体</span>
    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;HELLO AJAX POST&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>效果</p></li></ul><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_4-服务端响应json格式的数据" tabindex="-1"><a class="header-anchor" href="#_4-服务端响应json格式的数据"><span>4.服务端响应json格式的数据</span></a></h4><ul><li><p>服务端</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">&#39;/json-server&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//设置响应头  设置允许跨域</span>
    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Origin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Headers&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//响应一个数据</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;wahaha&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">//对对象进行字符串转换</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>网页端</p><ol><li><p>手动对数据进行转化</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> data<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>自动转换</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//设置响应体数据的类型</span>
xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">;</span>
result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>自动转换结果</p><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><h4 id="_5-ie缓存问题" tabindex="-1"><a class="header-anchor" href="#_5-ie缓存问题"><span>5.ie缓存问题</span></a></h4><p>旧版的ie浏览器会自动将ajax的响应缓存起来，导致服务器端的数据变化网页端无法进行同步更新。</p><ul><li><p>解决方案</p><p>在初始化http请求参数时给URL添加如下参数：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;http://127.0.0.1:8000/ie?t=&#39;</span><span class="token operator">+</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Date.now()获取的时间戳每时每刻都不相同，则浏览器将这样的请求视为不同的请求而不会读入缓存</li></ul></li><li><p>效果</p><figure><img src="`+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><h4 id="_6-超时与网络异常" tabindex="-1"><a class="header-anchor" href="#_6-超时与网络异常"><span>6.超时与网络异常</span></a></h4><ul><li><p>超时设置</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//超时设置 2s 设置</span>
xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>

<span class="token comment">//超时回调</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">ontimeout</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;网络异常, 请稍后重试!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>服务端使用<code>setTimeout</code>模拟耗时较长的操作</p></li><li><p>效果</p><figure><img src="`+v+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul></li><li><p>网络异常设置</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//网络异常回调</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;你的网络似乎出了一些问题!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>使用浏览器自带的调试器模拟离线操作</p><figure><img src="`+m+`" alt="image-20220930105508809" tabindex="0" loading="lazy"><figcaption>image-20220930105508809</figcaption></figure></li></ul></li></ul><h4 id="_7-取消请求" tabindex="-1"><a class="header-anchor" href="#_7-取消请求"><span>7.取消请求</span></a></h4><ul><li><p>网页端</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
btns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;http://127.0.0.1:8000/delay&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// abort 取消请求</span>
btns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    xhr<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>效果</p><figure><img src="`+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><h4 id="_8-重复请求问题" tabindex="-1"><a class="header-anchor" href="#_8-重复请求问题"><span>8.重复请求问题</span></a></h4><p>当多次点击发送请求时会增加服务器的负担，因此可以将多次重复的请求默认只获取一次</p><ul><li><p>网页端</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token comment">//标识变量</span>
<span class="token keyword">let</span> isSending <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 是否正在发送AJAX请求</span>
btns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//判断标识变量</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>isSending<span class="token punctuation">)</span> x<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果正在发送, 则取消该请求, 创建一个新的请求</span>

    x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//修改 标识变量的值</span>
    isSending <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    x<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;http://127.0.0.1:8000/delay&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    x<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    x<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//修改标识变量</span>
            isSending <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// abort</span>
btns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    x<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>效果</p></li></ul><figure><img src="`+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-axios-ajax的实现" tabindex="-1"><a class="header-anchor" href="#_3-axios-ajax的实现"><span>3.axios-AJAX的实现</span></a></h3>',62),w={href:"https://github.com/axios/axios",target:"_blank",rel:"noopener noreferrer"},q=a(`<p>首先npm安装axios或者直接用script引用静态资源</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i axios
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>jsdeliver是一个国外的静态资源网站，也可以改用其他国内的资源以提升访问速度</li></ul><h4 id="_1-get请求" tabindex="-1"><a class="header-anchor" href="#_1-get请求"><span>1.get请求</span></a></h4><ul><li><code>axios.get(url[,config])</code></li><li>函数返回结果是一个<code>promise</code>对象，用<code>then</code>回调处理</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">&#39;http://127.0.0.1:8000/&#39;</span><span class="token punctuation">;</span>
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/axios-server&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">//请求参数（加在url后面）</span>
    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
        <span class="token literal-property property">vip</span><span class="token operator">:</span> <span class="token number">7</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">//请求头</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;wahaha&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>请求参数、头信息</strong></li></ul><figure><img src="`+h+'" alt="image-20220930164358473" tabindex="0" loading="lazy"><figcaption>image-20220930164358473</figcaption></figure><ul><li><p><strong>控制台信息</strong></p><figure><img src="'+f+`" alt="image-20220930164636149" tabindex="0" loading="lazy"><figcaption>image-20220930164636149</figcaption></figure></li></ul><h4 id="_2-post请求" tabindex="-1"><a class="header-anchor" href="#_2-post请求"><span>2.POST请求</span></a></h4><ul><li><p><code>axios.post(url[,data[,config]])</code></p></li><li><p>网页端</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/axios-server&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token comment">//请求体</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">//请求参数 </span>
    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
        <span class="token literal-property property">vip</span><span class="token operator">:</span> <span class="token number">9</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment">//请求头参数</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">180</span><span class="token punctuation">,</span>
        <span class="token literal-property property">weight</span><span class="token operator">:</span> <span class="token number">180</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_3-通用方法" tabindex="-1"><a class="header-anchor" href="#_3-通用方法"><span>3.通用方法</span></a></h4><ul><li><p>网页端</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">&#39;http://127.0.0.1:8000/&#39;</span><span class="token punctuation">;</span>
<span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">//请求方法</span>
    <span class="token literal-property property">method</span> <span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>

    <span class="token comment">//url</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/axios-server&#39;</span><span class="token punctuation">,</span>

    <span class="token comment">//url参数</span>
    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">vip</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span>
        <span class="token literal-property property">level</span><span class="token operator">:</span><span class="token number">30</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment">//头信息</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span>
        <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">200</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment">//请求体参数</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">//响应状态码</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//响应状态字符串</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//响应头信息</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//响应体</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_4-fetch-ajax的实现" tabindex="-1"><a class="header-anchor" href="#_4-fetch-ajax的实现"><span>4.fetch-AJAX的实现</span></a></h3><p>fetch：window的全局对象</p>`,16),T={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/fetch",target:"_blank",rel:"noopener noreferrer"},A=a(`<ul><li><p>网页端</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;http://127.0.0.1:8000/server-fetch?a=100&amp;b=100&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">// 请求方法</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 请求头</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>
        <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">400</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 请求体</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">&#39;e=500&amp;f=600&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//指定响应的返回类型</span>
    <span class="token comment">// return response.text();</span>
    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="三、实战" tabindex="-1"><a class="header-anchor" href="#三、实战"><span>三、实战</span></a></h2><h3 id="_1-请求并获取响应数据" tabindex="-1"><a class="header-anchor" href="#_1-请求并获取响应数据"><span>1. 请求并获取响应数据</span></a></h3><p>请求地址：https://study.duyiedu.com/api/herolist</p><p>请求方法：GET</p><p>响应类型：application/json</p><p>响应结果：王者荣耀英雄数据</p><h3 id="_2-上传文件并监控进度" tabindex="-1"><a class="header-anchor" href="#_2-上传文件并监控进度"><span>2. 上传文件并监控进度</span></a></h3><h4 id="准备工作-启动本地文件上传服务器" tabindex="-1"><a class="header-anchor" href="#准备工作-启动本地文件上传服务器"><span>准备工作：启动本地文件上传服务器</span></a></h4><p><strong>如果没有安装node</strong></p><ol><li><p>下载安装node，https://nodejs.org/zh-cn/</p></li><li><p>打开命令行工具，设置淘宝源</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p><strong>安装依赖</strong></p><ol><li>在命令行进入<code>upload-server</code>目录</li><li>运行<code>npm i</code></li></ol><p><strong>启动服务器</strong></p><ol><li>在命令行进入<code>upload-server</code>目录</li><li>运行<code>npm start</code></li></ol><h4 id="上传接口" tabindex="-1"><a class="header-anchor" href="#上传接口"><span>上传接口</span></a></h4><p>请求地址：<code>http://localhost:9527/upload/single</code></p><p>请求方法：<code>POST</code></p><p>消息格式：<code>multipart/form-data</code></p><p>字段名称：<code>avatar</code></p><p>允许的后缀名：<code>[&#39;.jpg&#39;, &#39;.jpeg&#39;, &#39;.bmp&#39;, &#39;.webp&#39;, &#39;.gif&#39;, &#39;.png&#39;]</code></p><p>最大尺寸：<code>1M</code></p><p>响应格式：<code>JSON</code></p><p>响应结果示例：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token comment">// 成功</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token string">&quot;文件的访问地址&quot;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 失败：后缀名不符号要求</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;errCode&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">&quot;errMsg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;后缀名不符合要求&quot;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 失败：文件过大</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;errCode&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token property">&quot;errMsg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;文件过大&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-登录和鉴权" tabindex="-1"><a class="header-anchor" href="#_3-登录和鉴权"><span>3. 登录和鉴权</span></a></h3><p>由于HTTP协议的特点，每次「请求-响应」都是独立的，这就会导致身份信息丢失的问题</p><figure><img src="`+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="http://mdrs.yuanjin.tech/img/image-20200417161244373.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个问题可以使用<code>token</code>令牌解决</p><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在使用AJAX时可以按照这样一种通用模式处理：</p><ol><li>在处理响应结果时，只要服务器给我的响应头中包含了<code>token</code>，就将其保存在<code>localStorage</code>中</li><li>在请求时，只要<code>localStorage</code>中有<code>token</code>，就将其代入到响应头发送到服务器。</li></ol><h4 id="接口参考" tabindex="-1"><a class="header-anchor" href="#接口参考"><span>接口参考</span></a></h4><p>登录：https://yapi.duyiedu.com/project/72/interface/api/105</p><p>获取账号信息：https://yapi.duyiedu.com/project/72/interface/api/114</p><p>获取聊天记录：https://yapi.duyiedu.com/project/72/interface/api/117</p><p>发送聊天消息：https://yapi.duyiedu.com/project/72/interface/api/120</p><h2 id="思考" tabindex="-1"><a class="header-anchor" href="#思考"><span>思考</span></a></h2><p>不要写代码，思考一个问题：</p><p>你开发了一个网站，你能否在你的网站中写入一段JS脚本，获取淘宝网站保存的<code>localStorage</code>的值？</p><p>如果你觉得应该进行限制，那么使用怎样的限制规则是合理的？</p>',42);function S(E,L){const t=o("ExternalLinkIcon");return c(),i("div",null,[_,n("p",null,[s("github地址: "),n("a",w,[s("https://github.com/axios/axios"),p(t)])]),q,n("p",null,[s("文档地址："),n("a",T,[s("https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/fetch"),p(t)])]),A])}const X=e(j,[["render",S],["__file","browser.html.vue"]]),G=JSON.parse('{"path":"/browser_internet/network/browser.html","title":"浏览器的通信能力","lang":"zh-CN","frontmatter":{"title":"浏览器的通信能力","order":2,"description":"一、用户代理 浏览器可以代替用户完成http请求，代替用户解析响应结果，所以我们称之为： 用户代理 user agent 在网络层面，对于前端开发者，必须要知道浏览器拥有的两大核心能力： 自动发出请求的能力 自动解析响应的能力 1. 自动发出请求的能力 当一些事情发生的时候，浏览器会代替用户自动发出http请求，常见的包括： 用户在地址栏输入了一个ur...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/browser_internet/network/browser.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"浏览器的通信能力"}],["meta",{"property":"og:description","content":"一、用户代理 浏览器可以代替用户完成http请求，代替用户解析响应结果，所以我们称之为： 用户代理 user agent 在网络层面，对于前端开发者，必须要知道浏览器拥有的两大核心能力： 自动发出请求的能力 自动解析响应的能力 1. 自动发出请求的能力 当一些事情发生的时候，浏览器会代替用户自动发出http请求，常见的包括： 用户在地址栏输入了一个ur..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://mdrs.yuanjin.tech/img/image-20200417161244373.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T13:13:32.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-03-19T13:13:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"浏览器的通信能力\\",\\"image\\":[\\"http://mdrs.yuanjin.tech/img/image-20200417161244373.png\\"],\\"dateModified\\":\\"2024-03-19T13:13:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、用户代理","slug":"一、用户代理","link":"#一、用户代理","children":[{"level":3,"title":"1. 自动发出请求的能力","slug":"_1-自动发出请求的能力","link":"#_1-自动发出请求的能力","children":[]},{"level":3,"title":"2. 自动解析响应的能力","slug":"_2-自动解析响应的能力","link":"#_2-自动解析响应的能力","children":[]},{"level":3,"title":"3. 基本流程","slug":"_3-基本流程","link":"#_3-基本流程","children":[]}]},{"level":2,"title":"二、AJAX","slug":"二、ajax","link":"#二、ajax","children":[{"level":3,"title":"1.express的简单使用","slug":"_1-express的简单使用","link":"#_1-express的简单使用","children":[]},{"level":3,"title":"2.原生AJAX的实现","slug":"_2-原生ajax的实现","link":"#_2-原生ajax的实现","children":[]},{"level":3,"title":"3.axios-AJAX的实现","slug":"_3-axios-ajax的实现","link":"#_3-axios-ajax的实现","children":[]},{"level":3,"title":"4.fetch-AJAX的实现","slug":"_4-fetch-ajax的实现","link":"#_4-fetch-ajax的实现","children":[]}]},{"level":2,"title":"三、实战","slug":"三、实战","link":"#三、实战","children":[{"level":3,"title":"1. 请求并获取响应数据","slug":"_1-请求并获取响应数据","link":"#_1-请求并获取响应数据","children":[]},{"level":3,"title":"2. 上传文件并监控进度","slug":"_2-上传文件并监控进度","link":"#_2-上传文件并监控进度","children":[]},{"level":3,"title":"3. 登录和鉴权","slug":"_3-登录和鉴权","link":"#_3-登录和鉴权","children":[]}]},{"level":2,"title":"思考","slug":"思考","link":"#思考","children":[]}],"git":{"createdTime":1710854012000,"updatedTime":1710854012000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":1}]},"readingTime":{"minutes":11.92,"words":3576},"filePathRelative":"browser_internet/network/browser.md","localizedDate":"2024年3月19日","excerpt":"<h2>一、用户代理</h2>\\n<p>浏览器可以代替用户完成http请求，代替用户解析响应结果，所以我们称之为：</p>\\n<p><strong>用户代理 user agent</strong></p>\\n<p>在网络层面，对于前端开发者，必须要知道浏览器拥有的两大核心能力：</p>\\n<ul>\\n<li>自动发出请求的能力</li>\\n<li>自动解析响应的能力</li>\\n</ul>\\n<h3>1. 自动发出请求的能力</h3>\\n<p>当一些事情发生的时候，浏览器会代替用户自动发出http请求，常见的包括：</p>\\n<ol>\\n<li>\\n<p><strong>用户在地址栏输入了一个url地址，并按下了回车</strong></p>\\n<p>浏览器会自动解析URL，并发出一个<code>GET</code>请求，同时抛弃当前页面。</p>\\n</li>\\n<li>\\n<p><strong>当用户点击了页面中的a元素</strong></p>\\n<p>浏览器会拿到a元素的href地址，并发出一个<code>GET</code>请求，同时抛弃当前页面。</p>\\n</li>\\n<li>\\n<p><strong>当用户点击了提交按钮<code>&lt;button type=\\"submit\\"&gt;...&lt;/button&gt;</code></strong></p>\\n<p>浏览器会获取按钮所在的<code>&lt;form&gt;</code>元素，拿到它的<code>action</code>属性地址，同时拿到它<code>method</code>属性值，然后把表单中的数据组织到请求体中，发出<code>指定方法</code>的请求，同时抛弃当前页面。</p>\\n<blockquote>\\n<p>这种方式的提交现在越来越少见了</p>\\n</blockquote>\\n</li>\\n<li>\\n<p><strong>当解析HTML时遇到了<code>&lt;link&gt; &lt;img&gt; &lt;script&gt; &lt;video&gt; &lt;audio&gt;</code>等元素</strong></p>\\n<p>浏览器会拿到对应的地址，发出<code>GET</code>请求</p>\\n</li>\\n<li>\\n<p><strong>当用户点击了刷新</strong></p>\\n<p>浏览器会拿到当前页面的地址，以及当前页面的请求方法，重新发一次请求，同时抛弃当前页面。</p>\\n</li>\\n</ol>","autoDesc":true}');export{X as comp,G as data};
