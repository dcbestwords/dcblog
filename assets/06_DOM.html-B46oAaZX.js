import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,e as a,a as s,b as o,d as l,o as c,r as i}from"./app-CULaNOg7.js";const u="/dcblog/assets/15114136097082-C7ScNT9X.jpg",k="/dcblog/assets/15150600257192-BzHtjBUg.jpg",d="/dcblog/assets/15114181733929-6DaoRpP-.jpg",r="/dcblog/assets/2018-12-18-C4YlgJ5I.gif",g="/dcblog/assets/15114908294731-BMB4S1L6.jpg",m="/dcblog/assets/15114846215529-CMsOZqL0.jpg",v="/dcblog/assets/15114297013675-XMs3vNfI.jpg",b="/dcblog/assets/15114297667923-D_tHtux3.jpg",h="/dcblog/assets/15114299224163-DgtymdBr.jpg",q="/dcblog/assets/15270712656278-BtVVkYTr.jpg",y={},f={href:"https://developer.mozilla.org/zh-CN/docs/Web/Events",target:"_blank",rel:"noopener noreferrer"};function x(w,n){const t=i("ExternalLinkIcon");return c(),e("div",null,[n[1]||(n[1]=a(`<h2 id="一、document-object-model文档对象模型。" tabindex="-1"><a class="header-anchor" href="#一、document-object-model文档对象模型。"><span>一、Document Object Model文档对象模型。</span></a></h2><ul><li><p>文档：文档表示的就是整个的HTML网页文档</p></li><li><p>对象：对象表示将网页中的每一个部分都转换为了一个对象。</p><ul><li>DOM 里面的对象属于宿主对象，需要浏览器来作为宿主。一旦离开了浏览器这个环境，那么该对象将不复存在。</li></ul></li><li><p>模型：使用模型来表示对象之间的关系，这样方便我们获取对象</p></li></ul><p>DOM 的作用如下：</p><ul><li>浏览器提供的操纵 HTML 文档内容的应用程序接口</li><li>用于对文档进行动态操作，如增加文档内容，删除文档内容，修改文档内容等等</li></ul><h2 id="二、-节点" tabindex="-1"><a class="header-anchor" href="#二、-节点"><span>二、 节点</span></a></h2><h3 id="_1-文档节点-document" tabindex="-1"><a class="header-anchor" href="#_1-文档节点-document"><span>1. 文档节点（document）</span></a></h3><p>表示整个文档。<code>document</code>对象作为window对象的属性存在的，我们不用获取可以直接使用。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">;</span><span class="token comment">//获取body标签</span>
<span class="token keyword">var</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;body&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> html <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span><span class="token comment">//保存着html根标签</span>
<span class="token keyword">var</span> all <span class="token operator">=</span> document<span class="token punctuation">.</span>all<span class="token punctuation">;</span><span class="token comment">//代表页面中的所有元素</span>
<span class="token keyword">var</span> all <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-元素节点-element" tabindex="-1"><a class="header-anchor" href="#_2-元素节点-element"><span>2. 元素节点（element）</span></a></h3><p>浏览器会将页面中所有的标签都转换为一个元素节点，我们可以通过document的方法来获取元素节点。</p><p><strong>获取元素节点的方法</strong></p><ul><li><code>document.getElementsByClassName()</code><ul><li>返回文档中所有指定类名的元素集合，作为NodeList对象。</li></ul></li><li><code>document.getElementById()</code><ul><li>返回对拥有指定 id 的第一个对象的引用。</li></ul></li><li><code>document.getElementsByName()</code><ul><li>返回带有指定名称的对象集合。</li></ul></li><li><code>document.getElementsByTagName()</code><ul><li>返回带有指定标签名的对象集合（类数组对象）。</li></ul></li><li><code>document.querySelector()</code><ul><li>需要一个选择器的字符串作为参数，可以根据一个CSS选择器来查询元素节点对象</li><li>使用该方法总会返回唯一的一个元素，如果满足条件的元素有多个，那么它只会返回第一个</li></ul></li><li><code>document.querySelectorAll()</code><ul><li>该方法和querySelector()用法类似，不同的是它会将符合条件的元素封装到一个数组中返回</li><li>即使符合条件的元素只有一个，它也会返回数组</li></ul></li></ul><blockquote><ul><li>在所有的得到类数组的方法中，除了<code>querySelectorAll</code>，其他的方法都是实时更新的。</li><li>书写了id的元素，会自动成为window对象的属性。它是一个实时的单对象。事实上的标准。不推荐使用。</li><li><code>getElementsByTagName</code>、<code>getElementsByClassName</code>、<code>querySelector</code>、<code>querySelectorAll</code>，可以作为其他元素节点对象的方法使用</li></ul></blockquote><p><strong>获取元素节点的子节点</strong></p><ul><li><p><code>element.childNodes</code> 返回元素的一个子节点的数组</p><ul><li>childNodes属性会获取包括文本节点，空白节点在内的所有节点。</li></ul></li><li><p><code>element.children</code> 返回元素的子元素的集合</p><ul><li>children属性只返回一个节点下面的所有子元素节点，所以会忽略所有的文本节点和空白节点。</li></ul></li><li><p><code>element.firstChild</code> 返回元素的第一个子节点（包括空白文本节点）</p></li><li><p><code>element.lastChild</code> 返回元素的最后一个子节点（包括空白文本节点）</p><ul><li><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>abc<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Lorem ipsum dolor sit amet.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Lorem ipsum dolor sit amet.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>abc<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>链接1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>item1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>item2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>item3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">let</span> i <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;test3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p><figure><img src="`+u+`" alt="-w64" tabindex="0" loading="lazy"><figcaption>-w64</figcaption></figure><p>可以看到这里就访问到了 ul 下面的第一个子节点，但是这个节点是一个空白节点。什么意思呢？</p><p>就是说在 DOM 里面会将空格和换行也视为是一个节点。这样的节点叫做空白节点。如果我现在将 ul 元素和 li 元素之间的空白给删除掉，那么第一个子元素就应该为 ul 下面的第一个 li。</p><p>具体示例如下：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>abc<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Lorem ipsum dolor sit amet.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Lorem ipsum dolor sit amet.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>abc<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>链接1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>item1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>item2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>item3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">let</span> i <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;test3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：这时<code>&lt;ul&gt;</code>下面的第一个子元素就变为了第一个<code>&lt;li&gt;</code>元素。</p><figure><img src="`+k+`" alt="-w114" tabindex="0" loading="lazy"><figcaption>-w114</figcaption></figure><p>如果想要在保持之前的 HTML 结构的基础上获取第一个<code>&lt;li&gt;</code>元素的内容的话，就只有层层往下找。</p><p>具体示例如下：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>abc<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Lorem ipsum dolor sit amet.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Lorem ipsum dolor sit amet.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>abc<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>链接1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>item1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>item2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>item3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">let</span> i <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;test3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span>nextSibling<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p><figure><img src="`+d+`" alt="-w65" tabindex="0" loading="lazy"><figcaption>-w65</figcaption></figure></li></ul></li><li><p><code>element.getElementsByTagName()</code> 返回指定标签名的所有子元素集合。</p></li><li><p><code>element.getElementsByClassName()</code> 返回文档中所有指定类名的元素集合，作为 NodeList 对象。</p></li></ul><p><strong>获取元素节点的父节点和兄弟节点</strong></p><ul><li><code>element.parentNode</code> 返回当前节点的父节点</li><li><code>element.previousSibling</code> 返回当前节点的前一个兄弟节点（包括空白文本节点）</li><li><code>element.nextSibling</code> 返回当前节点的后一个兄弟节点（包括空白文本节点）</li><li><code>element.previousElementSibling</code></li><li><code>element.nextElementSibling</code><ul><li>把前后的换行也算作是一个空白节点，这样的处理确实也有太麻烦了。所以，现在添加上了previousElementSibling和nextElementSibling这两个属性，直接用于查询某一个节点的上一个或者下一个元素节点。</li></ul></li></ul><blockquote><p>💡 <strong>HTMLCollection 与 NodeList</strong></p></blockquote><p>当我们使用上述方法获取节点时，有的返回的是 HTMLCollection，而有的返回的是 NodeList。那么这两者之间有什么区别呢？</p><p>其最大的区别就在于，如果使用的是以前的 DOM 方法，例如<code>document.getElementsByTagName()</code>来获取到的节点集合，返回的为 HTMLCollection ，<strong>这是一个实时集合</strong>。</p><p>而使用新的<code>querySelectorAll()</code>方法获取到的节点集合，返回的为 NodeList ，<strong>这不是一个实时集合</strong>。</p><p>具体的示例如下：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>添加段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Lorem ipsum dolor sit amet.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Lorem ipsum dolor sit amet.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Lorem ipsum dolor sit amet.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">let</span> HTMLCollection <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> NodeList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>HTMLCollection<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>NodeList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 向文档新添加一个段落</span>
        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 创建一个新的 p 元素</span>
            <span class="token keyword">let</span> newP <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//创建一个文本节点</span>
            <span class="token keyword">let</span> newContent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&quot;这是一个测试&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//将文本节点添加给 p 元素节点作为子节点</span>
            newP<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//获取 body 节点</span>
            <span class="token keyword">let</span> doc <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
            <span class="token comment">//为 body 节点添加子节点</span>
            doc<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newP<span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>HTMLCollection<span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>NodeList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+'" alt="2018-12-18 10.05.36-w1119" tabindex="0" loading="lazy"><figcaption>2018-12-18 10.05.36-w1119</figcaption></figure><h3 id="_3-属性节点-attribute" tabindex="-1"><a class="header-anchor" href="#_3-属性节点-attribute"><span>3. 属性节点（attribute）</span></a></h3><ul><li><p>属性节点并非是元素节点的子节点，只能算作是元素节点的一个附属节点，如下图：可以通过元素节点来获取指定的属性节点。</p><figure><img src="'+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><code>element.getAttributeNode()</code> 返回指定属性节点</p></li><li><p>我们一般不使用属性节点</p></li></ul><h3 id="_4-文本节点-text" tabindex="-1"><a class="header-anchor" href="#_4-文本节点-text"><span>4. 文本节点（text）</span></a></h3><p>获取文本节点时，一般先要获取元素节点。在通过元素节点获取文本节点。</p><ul><li><code>text.nodeValue</code></li><li><code>element.textContent</code> 设置或返回一个节点和它的文本内容</li></ul><h2 id="三、-dom对html的增删改" tabindex="-1"><a class="header-anchor" href="#三、-dom对html的增删改"><span>三、 dom对html的增删改</span></a></h2><p>操作节点其实就有点像操作数据库数据一样，无非就是对节点进行增删改查，当然查就是前面我们所讲的查找节点，接下来我们来看一下对节点的增删改的操作。</p><hr><h4 id="创建元素节点对象" tabindex="-1"><a class="header-anchor" href="#创建元素节点对象"><span>创建元素节点对象</span></a></h4><ul><li><code>document.createElement()</code><ul><li>它需要一个标签名作为参数，将会根据该标签名创建元素节点对象，并将创建好的对象作为返回值返回</li></ul></li></ul><h4 id="创建文本节点对象" tabindex="-1"><a class="header-anchor" href="#创建文本节点对象"><span>创建文本节点对象</span></a></h4><ul><li><code>document.createTextNode()</code><ul><li>需要一个文本内容作为参数，将会根据该内容创建文本节点，并将新的节点返回</li></ul></li></ul><h4 id="将某节点设置为另一节点的子节点" tabindex="-1"><a class="header-anchor" href="#将某节点设置为另一节点的子节点"><span>将某节点设置为另一节点的子节点</span></a></h4><ul><li><code>element.appendChild()</code><ul><li>用法：父节点.appendChild(子节点);</li></ul></li></ul><h4 id="在指定的子节点前插入新的子节点" tabindex="-1"><a class="header-anchor" href="#在指定的子节点前插入新的子节点"><span>在指定的子节点前插入新的子节点</span></a></h4><ul><li><code>insertBefore()</code><ul><li>用法：父节点.insertBefore(新节点,旧节点);</li></ul></li></ul><h4 id="文档碎片" tabindex="-1"><a class="header-anchor" href="#文档碎片"><span>文档碎片</span></a></h4><p>在前面，我们已经学会了向文档里面添加节点，但是存在一个问题，那就是如果要添加大量节点的话，这种逐个添加的方法会显得效率很低，因为添加一个节点就会刷新一次页面。</p><p>这个时候，我们就可以使用 DOM 里面提供的<code>createElementFragment()</code>方法，将节点先添加在一个文档碎片里面，然后最后再一次性添加到文档里面。</p><p>具体的示例如下：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>abc<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Lorem ipsum dolor sit amet.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>qwe<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Lorem ipsum dolor sit amet.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>abc<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>链接1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>item1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>qwe<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>item2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>item3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">let</span>  arrText <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;second&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;third&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> oF <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arrText<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 创建元素节点 p</span>
            <span class="token keyword">let</span> oP <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 给元素节点添加文本内容</span>
            oP<span class="token punctuation">.</span>innerText <span class="token operator">=</span> arrText<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 将元素节点添加到文档碎片里面</span>
            oF<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oP<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 将 oF 里面所有的节点一次性添加到文档上面</span>
        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oF<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p><figure><img src="`+m+`" alt="-w230" tabindex="0" loading="lazy"><figcaption>-w230</figcaption></figure><hr><h4 id="可以删除一个子节点" tabindex="-1"><a class="header-anchor" href="#可以删除一个子节点"><span>可以删除一个子节点</span></a></h4><ul><li><p><code>removeChild()</code></p><ul><li><p>语法：父节点.removeChild(子节点);</p></li><li><p>常用：bj.parentNode.removeChild(bj);</p></li><li><p>删除最后一个会报错，添加return false；点击超链接以后，超链接会跳转页面，这个是超链接的默认行为，但是此时我们不希望出现默认行为，可以通过在响应函数的最后return false来取消默认行为。</p></li></ul></li><li><p><code>元素对象.remove()</code></p><ul><li>除了使用父元素节点删除子节点的方式之外，我们元素对象本身其实就有一个remove方法,可以把自己直接删除</li></ul></li></ul><hr><h4 id="使用指定的子节点替换已有的子节点" tabindex="-1"><a class="header-anchor" href="#使用指定的子节点替换已有的子节点"><span>使用指定的子节点替换已有的子节点</span></a></h4><ul><li><code>replaceChild()</code></li><li>语法：父节点.replaceChild(新节点,旧节点);</li></ul><h4 id="克隆节点" tabindex="-1"><a class="header-anchor" href="#克隆节点"><span>克隆节点</span></a></h4><p>有些时候，我们不想创建和插入一个完全新的元素，而是想复制某个节点，这时就轮到克隆节点登场了。</p><p>克隆节点分为<strong>浅克隆</strong>和<strong>深克隆</strong>，只需要向<code>cloneNode()</code>方法传入一个布尔值即可实现浅克隆和深克隆。克隆节点的语法如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>节点.cloneNode(布尔值)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>**浅克隆：**所谓浅克隆，就是指指克隆某一个节点，仅仅是克隆该节点而已，方法参数传入 false。</p><p>具体的示例如下：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>abc<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Lorem ipsum dolor sit amet.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Lorem ipsum dolor sit amet.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>abc<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>链接1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>item1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>item2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>item3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token comment">// 获取 ul 元素节点</span>
        <span class="token keyword">let</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;test3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 进行浅克隆</span>
        <span class="token keyword">let</span> newUl <span class="token operator">=</span> ul<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 添加到文档上面</span>
        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newUl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p><figure><img src="`+v+'" alt="-w232" tabindex="0" loading="lazy"><figcaption>-w232</figcaption></figure><p>光看上面的效果，我们感觉好像没有克隆成功，但实际上是克隆成功了的，我们打开开发者工具进行查看</p><figure><img src="'+b+`" alt="-w447" tabindex="0" loading="lazy"><figcaption>-w447</figcaption></figure><p>可以看到，打开开发者工具以后我们看到确实对 ul 进行了克隆。</p><p>**深克隆：**所谓深克隆，就是指复制某个节点和其子节点，需要传入的布尔值为 true。</p><p>具体的示例如下：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>abc<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Lorem ipsum dolor sit amet.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Lorem ipsum dolor sit amet.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>abc<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>链接1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>item1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>item2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>item3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token comment">// 获取 ul 元素节点</span>
        <span class="token keyword">let</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;test3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 进行深克隆,只需要将 false 改为 true</span>
        <span class="token keyword">let</span> newUl <span class="token operator">=</span> ul<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 添加到文档上面</span>
        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newUl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p><figure><img src="`+h+`" alt="-w228" tabindex="0" loading="lazy"><figcaption>-w228</figcaption></figure><p>可以看到，我们不用打开开发者工具，直接从页面上就能直观的感受到区别，这里已经将 ul 以及下面的子元素进行了完完整整的复制。</p><hr><h4 id="使用innerhtml完成dom的增删改的相关操作" tabindex="-1"><a class="header-anchor" href="#使用innerhtml完成dom的增删改的相关操作"><span>使用innerHTML完成DOM的增删改的相关操作</span></a></h4><p>通过前面的学习，现在我们已经能够对文档中的节点进行基本的增删改操作了。但是前面所介绍的方式，我不得不承认实在是相当的繁琐。我明明只是想新增一个节点，却需要好几个步骤才能实现。</p><p>那么，有没有一种方式可以让我们更加快捷简便的操作节点呢？答案是有的，就是通过直接修改节点内部信息来简化节点的操作步骤。在 DOM 中，我们可以通过<code>innerHTML</code>和<code>innerText</code>来获取到节点内部的信息。</p><ul><li><code>innerText</code>用于获取元素节点的文本值</li><li><code>innerHTML</code>则用于用户元素节点下面的所有东西，包括 HTML 标签。</li><li><code>textContent</code>属性。可以直接获取到一个元素节点的文本内容。</li></ul><p><code>innerText</code>和<code>textContent</code>方法的区别</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>textContent：会获取&#39;style= &quot;display:none&quot;&#39;中的文本，而 innerText 不会。
textContent：会获取 style 标签里面的文本，而 innerText 不会。
innerText：对 Internet Explorer 的兼容性较好。 
textContent：虽然作为标准方法，但是只支持 Internet Explorer 8+ 以上的浏览器。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们来看一个具体的例子，示例如下：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 此代码只是作为测试，无任何实际含义 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">*</span><span class="token punctuation">{</span><span class="token property">margin</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>item1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>item2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>item3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">let</span> testDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我是textContent输出的&quot;</span> <span class="token operator">+</span> testDiv<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我是innerText输出的&quot;</span> <span class="token operator">+</span> testDiv<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p><figure><img src="`+q+`" alt="-w288" tabindex="0" loading="lazy"><figcaption>-w288</figcaption></figure><hr><ul><li><code>city.innerHTML += &quot;&lt;li&gt;广州&lt;/li&gt;&quot;</code>;//会将整个innerHTML重新设置（之前的删掉）</li><li>采取一种折中的方式：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建属性节点</span>
li<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&quot;广州&quot;</span><span class="token punctuation">;</span><span class="token comment">//向li中设置文本</span>
city<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将li添加到city中</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、-dom操作属性和类" tabindex="-1"><a class="header-anchor" href="#四、-dom操作属性和类"><span>四、 dom操作属性和类</span></a></h2><ul><li><code>getAttribute()</code><ul><li>element.getAttribute()，获取元素节点的属性值</li></ul></li><li><code>setAttribute()</code><ul><li>element.setAttribute()，设置元素节点的属性</li></ul></li><li><code>removeAttribute()</code><ul><li>element.setAttribute()，删除元素节点的属性</li></ul></li></ul><hr><ul><li><code>element.class</code>、<code>element.classList</code>（类数组）、<code>element.className</code>（字符串）</li><li><code>element.classList.add() </code>给一个元素节点添加类</li><li><code>element.classList.remove()</code>移除一个元素节点的类</li><li><code>element.classList.contains()</code>检测一个元素节点是否含有指定的某一个类。</li><li><code>element.classList.toggle()</code><ul><li>用来对类进行切换。如果元素节点没有给出的类，就添加该类，如果有该类，就删除该类。</li></ul></li></ul><hr><p>对于一些自定义属性，按照 HTML 5 的规范应该尽量使用<code>data-</code>作为前缀，比如给 p 元素添加一个自定义属性 power，应该设置为<code>data-power</code>。</p><p>这样设置之后，有一种新的方式可以访问这个属性，即使用标签中的<code>dataset</code>属性</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>test1<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>power <span class="token operator">=</span> <span class="token string">&#39;high speed&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个 dataset 是每个元素节点都有的属性，它指向所有以<code>data-</code>开头的属性集合。</p><h2 id="五、-dom修改元素的样式" tabindex="-1"><a class="header-anchor" href="#五、-dom修改元素的样式"><span>五、 dom修改元素的样式</span></a></h2><h4 id="方式一-元素-style-样式名-新的样式值" tabindex="-1"><a class="header-anchor" href="#方式一-元素-style-样式名-新的样式值"><span>方式一：元素.style.样式名 = 新的样式值；</span></a></h4><ul><li>如果CSS的样式名中含有<code>-</code>，这种名称在JS中是不合法的比如<code>background-color</code>，需要将这种样式名修改为驼峰命名法，去掉<code>-</code>，然后将<code>-</code>后的字母大写，或者直接使用中括号来表示css属性。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">&quot;yellow&quot;</span><span class="token punctuation">;</span>
box1<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">&#39;background-color&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;yellow&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过<code>style</code>属性设置和读取的都是内联样式，无法读取样式表中的样式。也就是说，如果我们使用<code>style</code>来获取元素节点的属性的时候，它排除了最常用的来自于外部样式表的样式，<strong>不仅外部样式表的样式获取不到，连内嵌的样式也同样无法获取</strong>。</li></ul><h4 id="方式二-元素-currentstyle-样式名" tabindex="-1"><a class="header-anchor" href="#方式二-元素-currentstyle-样式名"><span>方式二：元素.currentStyle.样式名</span></a></h4><ul><li>用来读取当前元素正在显示的样式，如果当前元素没有设置该样式，则获取它的默认值</li><li><strong>currentStyle只有IE浏览器支持</strong>，其他的浏览器都不支持</li></ul><h4 id="方式三-getcomputedstyle-使用这个方法来获取元素当前的样式" tabindex="-1"><a class="header-anchor" href="#方式三-getcomputedstyle-使用这个方法来获取元素当前的样式"><span>方式三：getComputedStyle() 使用这个方法来获取元素当前的样式</span></a></h4><ul><li>这个方法是window的方法(<strong style="color:red;">只读</strong>)，可以直接使用</li><li>需要两个参数，第一个为要获取样式的元素；第二个可以传递一个伪元素，一般都传null</li><li>返回一个对象，对象中封装了当前元素对应的样式，可以通过对象.样式名来读取样式，若获取的样式没有设置，则会获取到真实的值，而不是默认值。</li><li><code>getComputedStyle(box1,null).backgroundColor</code></li></ul><h4 id="方式四-document-stylesheets-来获取到一个网页中所有样式表的引用。" tabindex="-1"><a class="header-anchor" href="#方式四-document-stylesheets-来获取到一个网页中所有样式表的引用。"><span>方式四：document.styleSheets 来获取到一个网页中所有样式表的引用。</span></a></h4><blockquote><p>虽然我们可以通过 DOM 提供的接口轻松的改变元素节点的样式，但是，<strong>动态的改变元素的类，并且将每个类的相关样式保存在单独的样式表里面才是更好的做法</strong>。</p></blockquote><h2 id="六、一些api的记录" tabindex="-1"><a class="header-anchor" href="#六、一些api的记录"><span>六、一些API的记录</span></a></h2>`,106)),s("blockquote",null,[s("p",null,[s("a",f,[n[0]||(n[0]=o("事件参考 | MDN ")),l(t)])])]),n[2]||(n[2]=a(`<h3 id="_1-page-visible-api" tabindex="-1"><a class="header-anchor" href="#_1-page-visible-api"><span>1. page visible api</span></a></h3><ul><li><code>Document.hidden</code>（只读属性） <ul><li>返回布尔值，表示页面是（true）否（false）隐藏。</li></ul></li><li><code>visibilitychange</code>（事件） <ul><li>当其选项卡的内容变得可见或被隐藏时，会在文档上触发 <code>visibilitychange</code> (能见度更改) 事件。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 在文档可见时开始播放音乐曲目，在文档不再可见时暂停音乐。</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;visibilitychange&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>hidden<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        backgroundMusic<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        backgroundMusic<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3))])}const L=p(y,[["render",x],["__file","06_DOM.html.vue"]]),j=JSON.parse('{"path":"/basic_language/javaScript/06_DOM.html","title":"DOM","lang":"zh-CN","frontmatter":{"title":"DOM","order":6,"description":"一、Document Object Model文档对象模型。 文档：文档表示的就是整个的HTML网页文档 对象：对象表示将网页中的每一个部分都转换为了一个对象。 DOM 里面的对象属于宿主对象，需要浏览器来作为宿主。一旦离开了浏览器这个环境，那么该对象将不复存在。 模型：使用模型来表示对象之间的关系，这样方便我们获取对象 DOM 的作用如下： 浏览器提...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/basic_language/javaScript/06_DOM.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"DOM"}],["meta",{"property":"og:description","content":"一、Document Object Model文档对象模型。 文档：文档表示的就是整个的HTML网页文档 对象：对象表示将网页中的每一个部分都转换为了一个对象。 DOM 里面的对象属于宿主对象，需要浏览器来作为宿主。一旦离开了浏览器这个环境，那么该对象将不复存在。 模型：使用模型来表示对象之间的关系，这样方便我们获取对象 DOM 的作用如下： 浏览器提..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T13:13:32.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-03-19T13:13:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DOM\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-19T13:13:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、Document Object Model文档对象模型。","slug":"一、document-object-model文档对象模型。","link":"#一、document-object-model文档对象模型。","children":[]},{"level":2,"title":"二、 节点","slug":"二、-节点","link":"#二、-节点","children":[{"level":3,"title":"1. 文档节点（document）","slug":"_1-文档节点-document","link":"#_1-文档节点-document","children":[]},{"level":3,"title":"2. 元素节点（element）","slug":"_2-元素节点-element","link":"#_2-元素节点-element","children":[]},{"level":3,"title":"3. 属性节点（attribute）","slug":"_3-属性节点-attribute","link":"#_3-属性节点-attribute","children":[]},{"level":3,"title":"4. 文本节点（text）","slug":"_4-文本节点-text","link":"#_4-文本节点-text","children":[]}]},{"level":2,"title":"三、 dom对html的增删改","slug":"三、-dom对html的增删改","link":"#三、-dom对html的增删改","children":[]},{"level":2,"title":"四、 dom操作属性和类","slug":"四、-dom操作属性和类","link":"#四、-dom操作属性和类","children":[]},{"level":2,"title":"五、 dom修改元素的样式","slug":"五、-dom修改元素的样式","link":"#五、-dom修改元素的样式","children":[]},{"level":2,"title":"六、一些API的记录","slug":"六、一些api的记录","link":"#六、一些api的记录","children":[{"level":3,"title":"1. page visible api","slug":"_1-page-visible-api","link":"#_1-page-visible-api","children":[]}]}],"git":{"createdTime":1710854012000,"updatedTime":1710854012000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":1}]},"readingTime":{"minutes":13.8,"words":4139},"filePathRelative":"basic_language/javaScript/06_DOM.md","localizedDate":"2024年3月19日","excerpt":"<h2>一、Document Object Model文档对象模型。</h2>\\n<ul>\\n<li>\\n<p>文档：文档表示的就是整个的HTML网页文档</p>\\n</li>\\n<li>\\n<p>对象：对象表示将网页中的每一个部分都转换为了一个对象。</p>\\n<ul>\\n<li>DOM 里面的对象属于宿主对象，需要浏览器来作为宿主。一旦离开了浏览器这个环境，那么该对象将不复存在。</li>\\n</ul>\\n</li>\\n<li>\\n<p>模型：使用模型来表示对象之间的关系，这样方便我们获取对象</p>\\n</li>\\n</ul>\\n<p>DOM 的作用如下：</p>\\n<ul>\\n<li>浏览器提供的操纵 HTML 文档内容的应用程序接口</li>\\n<li>用于对文档进行动态操作，如增加文档内容，删除文档内容，修改文档内容等等</li>\\n</ul>","autoDesc":true}');export{L as comp,j as data};
