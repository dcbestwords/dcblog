import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as e,c as o,a as n,b as s,d as c,e as l}from"./app-D2A2dDWt.js";const i="/dcblog/assets/stat-vkY1dCFJ.png",u="/dcblog/assets/req_1-C2CrD93c.jpg",r="/dcblog/assets/req_2-DJKv5I31.jpg",d="/dcblog/assets/req_3-nm7atnOH.jpg",k="/dcblog/assets/req_4-B-FHV4lQ.jpg",v="/dcblog/assets/res_1-BsW5o6aH.jpg",m="/dcblog/assets/res_2-v_rcOmP6.jpg",g="/dcblog/assets/urlParse-D6g5cmjS.png",b="/dcblog/assets/URL-tX756C1-.png",h={},f=n("h1",{id:"nodejs内置模块",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nodejs内置模块"},[n("span",null,"nodejs内置模块")])],-1),y={href:"https://nodejs.cn/api/",target:"_blank",rel:"noopener noreferrer"},x=l(`<p>Node.js 应用由模块组成，采用 CommonJS 模块规范。Node.js中的模块分为三种：</p><ul><li>内置模块</li><li>第三方模块</li><li>自定义模块</li></ul><p>关于 Node.js 的内置模块和常见API，可以看官方文档，下面介绍几种常用的模块。</p><h2 id="一、fs文件系统" tabindex="-1"><a class="header-anchor" href="#一、fs文件系统"><span>一、fs文件系统</span></a></h2><blockquote><p>fs 全称为 <code>file system</code> ，称之为 <code>文件系统</code> ，是 Node.js 中的 <code>内置模块</code> ，可以对计算机中的磁盘进行操作。</p></blockquote><p><strong>Node.js 中的同步和异步的区别</strong></p><p>fs模块对文件的几乎所有操作都有同步和异步两种形式。例如：readFileSync()和readFile() 。</p><p>区别：</p><ul><li>同步调用会阻塞代码的执行，异步则不会。</li><li>异步调用会将 读取任务 下达到任务队列，直到任务执行完成才会回调。</li><li>异常处理方面：同步必须使用 try catch 方式，异步可以通过回调函数的第一个参数。【重要】</li></ul><h3 id="_1-文件写入" tabindex="-1"><a class="header-anchor" href="#_1-文件写入"><span>1. 文件写入</span></a></h3><blockquote><p>文件写入就是将 <span style="color:red;">数据</span> 保存到 <span style="color:red;">文件</span> 中，我们可以使用如下几个方法来实现该效果</p></blockquote><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>writeFile</td><td>异步写入</td></tr><tr><td>writeFileSync</td><td>同步写入</td></tr><tr><td>appendFile / appendFileSync</td><td>追加写入</td></tr><tr><td>createWriteStream</td><td>流式写入</td></tr></tbody></table><h4 id="writefile-异步写入" tabindex="-1"><a class="header-anchor" href="#writefile-异步写入"><span>writeFile 异步写入</span></a></h4><p><strong>语法</strong>： <code>fs.writeFile(file, data[, options], callback)</code></p><p><strong>参数说明</strong>：</p><ul><li><p>file 文件名</p></li><li><p>data 待写入的数据</p></li><li><p>options 选项设置 <code>（可选）</code></p></li><li><p>callback 写入回调</p></li></ul><p><strong>返回值</strong>： <code>undefined</code></p><p><strong>代码示例</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 将 [三人行，必有我师焉。] 写入到当前文件夹下的 [座右铭.txt] 文件中</span>
fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">&#39;./座右铭.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;三人行，必有我师焉。&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;写入成功&#39;</span><span class="token punctuation">)</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="writefilesync-同步写入" tabindex="-1"><a class="header-anchor" href="#writefilesync-同步写入"><span>writeFileSync 同步写入</span></a></h4><p><strong>语法:</strong> <code>fs.writeFileSync(file, data[, options])</code></p><p>参数与 <code>fs.writeFile</code> 大体一致，只是没有 callback 参数</p><p><strong>返回值：</strong><code>undefined</code></p><p>代码示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">try</span><span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./座右铭.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;三人行，必有我师焉。&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件写入成功&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果文件不存在，则创建文件；如果文件存在，则覆盖文件内容；</li></ul><blockquote><p>Node.js 中的磁盘操作是由其他 <code>线程</code> 完成的，结果的处理有两种模式:</p><ul><li>同步处理 JavaScript 主线程 <code>会等待</code> 其线程的执行结果，然后再继续执行主线程的代码，<code>效率较低</code></li><li>异步处理 JavaScript 主线程 <code>不会等待</code> 其线程的执行结果，直接执行后续的主线程代码，<code>效率较好</code></li></ul></blockquote><h4 id="appendfile-appendfilesync-追加写入" tabindex="-1"><a class="header-anchor" href="#appendfile-appendfilesync-追加写入"><span>appendFile/appendFileSync 追加写入</span></a></h4><blockquote><p><code>appendFile</code> 作用是在文件尾部追加内容，<code>appendFile</code> 语法与 <code>writeFile</code> 语法完全相同</p></blockquote><p><strong>语法</strong>:</p><p><code>fs.appendFile(file, data[, options], callback)</code></p><p><code>fs.appendFileSync(file, data[, options])</code></p><p><strong>返回值</strong>：二者都为 <code>undefined</code></p><p>实例代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;./座右铭.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;则其善者而从之，其不善者而改之。&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;追加成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">appendFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./座右铭.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;\\r\\n温故而知新，可以为师矣&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="createwritestream-流式写入" tabindex="-1"><a class="header-anchor" href="#createwritestream-流式写入"><span>createWriteStream 流式写入</span></a></h4><p><strong>语法</strong>：<code>fs.createWriteStream(path[, options])</code></p><p><strong>参数说明</strong>：</p><ul><li><p><code>path</code> 文件路径</p></li><li><p><code>options</code> 选项配置（ <code>可选</code> ）</p></li></ul><p>**返回值: **<code>Object</code></p><p>代码示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;./观书有感.txt&#39;</span><span class="token punctuation">)</span>

<span class="token comment">//写入数据到流</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;半亩方塘一鉴开\\r\\n&#39;</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;天光云影共徘徊\\r\\n&#39;</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;问渠那得清如许\\r\\n&#39;</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;为有源头活水来\\r\\n&#39;</span><span class="token punctuation">)</span>

<span class="token comment">//关闭写入流，表明已没有数据要被写入可写流</span>
ws<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><span style="color:red;">程序打开一个文件是需要消耗资源的</span>，流式写入可以减少打开关闭文件的次数。</p><p>流式写入方式适用于 <span style="color:red;">大文件写入或者频繁写入</span>的场景，<code>writeFile</code>适合于 <span style="color:red;">写入频率较低的场景</span></p></blockquote><h4 id="写入文件的场景" tabindex="-1"><a class="header-anchor" href="#写入文件的场景"><span>写入文件的场景</span></a></h4><p><code>文件写入</code> 在计算机中是一个非常常见的操作，下面的场景都用到了文件写入</p><ul><li><p>下载文件</p></li><li><p>安装软件</p></li><li><p>保存程序日志，如 Git</p></li><li><p>编辑器保存文件</p></li><li><p>视频录制</p></li></ul><blockquote><p>当 <span style="color:red;">需要持久化保存数据</span> 的时候，应该想到 <code>文件写入</code></p></blockquote><h3 id="_2-文件读取" tabindex="-1"><a class="header-anchor" href="#_2-文件读取"><span>2. 文件读取</span></a></h3><blockquote><p>文件读取顾名思义，就是通过程序从文件中取出其中的数据，我们可以使用如下几种方式：</p></blockquote><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>readFile</td><td>异步读取</td></tr><tr><td>readFileSync</td><td>同步读取</td></tr><tr><td>createReadStream</td><td>流式读取</td></tr></tbody></table><h4 id="readfile-异步读取" tabindex="-1"><a class="header-anchor" href="#readfile-异步读取"><span>readFile 异步读取</span></a></h4><p><strong>语法</strong>: <code>fs.readFile(path[, options], callback)</code></p><p><strong>参数说明</strong>：</p><ul><li><p>path 文件路径</p></li><li><p>options 选项配置</p></li><li><p>callback 回调函数</p></li></ul><p><strong>返 回 值 ：</strong> <code>undefined</code></p><p>代码示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 导入 fs 模块</span>

fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./座右铭.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./座右铭.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;uft-8&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="readfilesync-同步读取" tabindex="-1"><a class="header-anchor" href="#readfilesync-同步读取"><span>readFileSync 同步读取</span></a></h4><p><strong>语法：</strong><code>fs.readFileSync(path[, options])</code></p><p><strong>参数说明：</strong></p><ul><li><p>path 文件路径</p></li><li><p>options 选项配置</p></li></ul><p><strong>返 回 值 ：</strong><code>string | Buffer</code></p><p>代码示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./座右铭.txt&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./座右铭.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="createreadstream-流式读取" tabindex="-1"><a class="header-anchor" href="#createreadstream-流式读取"><span>createReadStream 流式读取</span></a></h4><p><strong>语法：</strong><code>fs.createReadStream(path[, options])</code></p><p><strong>参数说明：</strong></p><ul><li><p>path 文件路径</p></li><li><p>options 选项配置（ <code>可选</code> ）</p></li></ul><p><strong>返回值：</strong><code>Object</code></p><p>代码示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 创建读取流对象</span>
<span class="token keyword">let</span> rs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;./观书有感.txt&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 每次取出 64k 数据后执行一次 data 回调</span>
<span class="token comment">// 绑定一个 data 事件  chunk 块儿  大块儿</span>
rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token parameter">chunk</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 读取完毕后，执行 end 回调 (可选事件)</span>
rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;读取完毕&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="读取文件应用场景" tabindex="-1"><a class="header-anchor" href="#读取文件应用场景"><span>读取文件应用场景</span></a></h4><ul><li><p>电脑开机</p></li><li><p>程序运行</p></li><li><p>编辑器打开文件</p></li><li><p>查看图片</p></li><li><p>播放视频</p></li><li><p>播放音乐</p></li><li><p>Git 查看日志</p></li><li><p>上传文件</p></li><li><p>查看聊天记录</p></li></ul><h3 id="_3-文件移动与重命名" tabindex="-1"><a class="header-anchor" href="#_3-文件移动与重命名"><span>3. 文件移动与重命名</span></a></h3><blockquote><p>在 Node.js 中，我们可以使用 <code>rename</code> 或 <code>renameSync</code> 来移动或重命名 <code>文件或文件夹</code></p></blockquote><p><strong>语法：</strong></p><p><code>fs.rename(oldPath, newPath, callback)</code></p><p><code>fs.renameSync(oldPath, newPath)</code></p><p><strong>参数说明：</strong></p><ul><li><p>oldPath 文件当前的路径</p></li><li><p>newPath 文件新的路径</p></li><li><p>callback 操作后的回调</p></li></ul><p>代码示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">&#39;./观书有感.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./论语/观书有感.txt&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;移动完成&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">renameSync</span><span class="token punctuation">(</span><span class="token string">&#39;./座右铭.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./论语/.我的座右铭.txt&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注</strong>: 如果还是移动到当前路径，但是修改了名字，就是重命名了</p></blockquote><h3 id="_4-文件删除" tabindex="-1"><a class="header-anchor" href="#_4-文件删除"><span>4. 文件删除</span></a></h3><blockquote><p>在 Node.js 中，我们可以使用 <code>unlink</code> 或 <code>unlinkSync</code> 来删除文件</p></blockquote><p><strong>语法:</strong></p><p><code>fs.unlink(path, callback)</code></p><p><code>fs.unlinkSync(path)</code></p><p><strong>参数说明</strong>：</p><ul><li><p>path 文件路径</p></li><li><p>callback 操作后的回调</p></li></ul><p>代码示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">&#39;./test.txt&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;删除成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">unlinkSync</span><span class="token punctuation">(</span><span class="token string">&#39;./test2.txt&#39;</span><span class="token punctuation">)</span>


<span class="token comment">// 调用 rm 方法  14.4   同步 rmSync</span>
fs<span class="token punctuation">.</span><span class="token function">rm</span><span class="token punctuation">(</span><span class="token string">&#39;./论语.txt&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;删除失败&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;删除成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-文件夹操作" tabindex="-1"><a class="header-anchor" href="#_5-文件夹操作"><span>5. 文件夹操作</span></a></h3><blockquote><p>借助 Node.js 的能力，我们可以对文件夹进行 <code>创建</code> 、<code>读取</code> 、<code>删除</code> 等操作</p></blockquote><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>mkdir / mkdirSync</td><td>创建文件夹</td></tr><tr><td>readdir / readdirSync</td><td>读取文件夹</td></tr><tr><td>rmdir / rmdirSync</td><td>删除文件夹</td></tr></tbody></table><h4 id="mkdir-创建文件夹" tabindex="-1"><a class="header-anchor" href="#mkdir-创建文件夹"><span>mkdir 创建文件夹</span></a></h4><blockquote><p>在 Node.js 中，我们可以使用 <code>mkdir</code> 或 <code>mkdirSync</code> 来创建文件夹</p></blockquote><p><strong>语法</strong>:</p><p><code>fs.mkdir(path[, options], callback)</code></p><p><code>fs.mkdirSync(path[, options])</code></p><p><strong>参数说明</strong>：</p><ul><li><p>path 文件夹路径</p></li><li><p>options 选项配置（ <code>可选</code> ）</p></li><li><p>callback 操作后的回调</p></li></ul><p>示例代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 异步创建文件夹  mk  make  制作   dir  directory  文件夹</span>
fs<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">&#39;./page&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;创建成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 递归异步创建</span>
fs<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">&#39;./1/2/3&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">recursive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;递归创建成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 递归同步创建文件夹</span>
fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;./x/y/z&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">recursive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="readdir-读取文件夹" tabindex="-1"><a class="header-anchor" href="#readdir-读取文件夹"><span>readdir 读取文件夹</span></a></h4><blockquote><p>在 Node.js 中，我们可以使用 <code>readdir</code> 或 <code>readdirSync</code> 来读取文件夹</p></blockquote><p><strong>语法：</strong></p><p><code>fs.readdir(path[, options], callback)</code></p><p><code>fs.readdirSync(path[, options])</code></p><p><strong>参数说明：</strong></p><ul><li><p>path 文件夹路径</p></li><li><p>options 选项配置（ <code>可选</code> ）</p></li><li><p>callback 操作后的回调</p></li></ul><p>示例代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 异步读取</span>
fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token string">&#39;./论语&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 同步读取 </span>
<span class="token keyword">let</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;./论语&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rmdir-删除文件夹" tabindex="-1"><a class="header-anchor" href="#rmdir-删除文件夹"><span>rmdir 删除文件夹</span></a></h4><blockquote><p>在 Node.js 中，我们可以使用 <code>rmdir</code> 或 <code>rmdirSync</code> 来删除文件夹</p></blockquote><p><strong>语法</strong>：</p><p><code>fs.rmdir(path[, options], callback)</code></p><p><code>fs.redirSync(path[, options])</code></p><p><strong>参数说明</strong>：</p><ul><li><p>path 文件夹路径</p></li><li><p>options 选项配置（ 可选 ）</p></li><li><p>callback 操作后的回调</p></li></ul><p>示例代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 异步删除文件夹  rm  remove 移除</span>
fs<span class="token punctuation">.</span><span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token string">&#39;./page&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;删除成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//异步递归删除文件夹  不推荐</span>
<span class="token comment">//=&gt;DeprecationWarning: In future versions of Node.js, fs.rmdir(path, { recursive: true }) will be removed. Use fs.rm(path, { recursive: true }) instead</span>
fs<span class="token punctuation">.</span><span class="token function">rmdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;./1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">recursive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span> 
    	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;递归删除&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//同步递归删除文件夹</span>
fs<span class="token punctuation">.</span><span class="token function">rmdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;./x&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">recursive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 建议使用</span>
fs<span class="token punctuation">.</span><span class="token function">rm</span><span class="token punctuation">(</span><span class="token string">&#39;./a&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">recursive</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;删除成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-查看资源状态" tabindex="-1"><a class="header-anchor" href="#_6-查看资源状态"><span>6. 查看资源状态</span></a></h3><blockquote><p>在 Node.js 中，我们可以使用 <code>stat</code> 或 <code>statSync</code> 来查看资源的详细信息</p></blockquote><p><strong>语法</strong>：</p><p><code>fs.stat(path[, options], callback)</code></p><p><code>fs.statSync(path[, options])</code></p><p><strong>参数说明</strong>：</p><ul><li><p>path 文件夹路径</p></li><li><p>options 选项配置（ 可选 ）</p></li><li><p>callback 操作后的回调</p></li></ul><p>示例代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 异步获取状态</span>
<span class="token comment">// stat  方法  status 缩写 状态</span>
fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span><span class="token string">&#39;/data.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 同步获取状态</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span><span class="token string">&#39;./data.txt&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+i+`" alt="image-20230321144242912" tabindex="0" loading="lazy"><figcaption>image-20230321144242912</figcaption></figure><p><strong>结果值对象结构</strong>：</p><ul><li><p>size 文件体积</p></li><li><p>birthtime 创建时间</p></li><li><p>mtime 最后修改时间</p></li><li><p>isFile 检测是否为文件</p></li><li><p>isDirectory 检测是否为文件夹</p></li><li><p>....</p></li></ul><h3 id="_7-相对路径问题" tabindex="-1"><a class="header-anchor" href="#_7-相对路径问题"><span>7. 相对路径问题</span></a></h3><p>fs 模块对资源进行操作时，路径的写法有两种：</p><ul><li><p>相对路径</p><ul><li><code>./座右铭.txt</code> 当前目录下的 座右铭.txt</li><li><code>座右铭.txt</code> 等效于上面的写法</li><li><code>../座右铭.txt</code> 当前目录的上一级目录中的 座右铭.txt</li></ul></li><li><p>绝对路径</p><ul><li><code>D:/Program Files</code> windows 系统下的绝对路径</li><li><code>/user/bin</code> Linux 系统下的绝对路径</li></ul></li></ul><blockquote><p>相对路径中所谓的 <code>当前目录</code> ，指的是 <code>命名行的工作目录</code> ，而并非是文件的所在目录</p><p>所以当命名行的工作目录与文件所在目录不一致时，会出现一些 Bug</p></blockquote><h3 id="_8-dirname" tabindex="-1"><a class="header-anchor" href="#_8-dirname"><span>8. __dirname</span></a></h3><p><code>__dirname</code> 与 <code>require</code> 类似，都是 Node.js 环境中的 &#39;全局&#39; 变量</p><p><code>__dirname</code> 保存着 <span style="color:red;">当前文件夹所在目录的绝对路径</span>，可以使用 <code>__dirname</code> 与文件名拼接成绝对路径</p><p>代码示例:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//=&gt;__dirname + &#39;/data.txt&#39;  === &#39;D:\\\\Desktop\\\\Node\\\\code\\\\03-fs模块/data.txt&#39;</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">&#39;/data.txt&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用 fs 模块的时候，尽量使用 <code>__dirname</code> 路径转换为绝对路径，这样可以避免相对路径产生的 Bug</p></blockquote><h3 id="_9-练习" tabindex="-1"><a class="header-anchor" href="#_9-练习"><span>9. 练习</span></a></h3><p>编写一个 JS 文件，实现复制文件的功能</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* 
 *  需求:
 *    复制  资料文件夹下的  [笑看风云.mp4]
 */</span>
<span class="token comment">// 导入 fs 模块</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 方式一  readFile</span>
<span class="token comment">// 读取文件内容</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./资料/笑看风云.mp4&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 写入文件</span>
fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./资料/笑看风云2.mp4&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>

<span class="token comment">// 方式二 流式操作</span>
<span class="token comment">// 创建读取流对象</span>
<span class="token keyword">const</span> rs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;./资料/笑看风云.mp4&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 创建一个写入流对象</span>
<span class="token keyword">const</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;./资料/笑看风云3.mp4&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 绑定data事件</span>
<span class="token comment">// 理想状态下，读取 64k 就写入 64 k，这样消耗的内存最少，实际上读取的速度大于写入的速度</span>
rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token parameter">chunk</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//  绑定data事件 ==== rs.pipe(ws)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件重命名</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 1. 导入 fs 模块</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 读取 03-fs模块 文件夹</span>
<span class="token keyword">const</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;../03-fs模块&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 遍历数组</span>
files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 判断</span>
  <span class="token keyword">let</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> name<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    num <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">+</span> num
  <span class="token punctuation">}</span>
  <span class="token comment">// 创建新的文件名</span>
  <span class="token keyword">let</span> newName <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> name
  <span class="token comment">// 重命名</span>
  fs<span class="token punctuation">.</span><span class="token function">renameSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">../03-fs模块/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">../03-fs模块/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、path模块" tabindex="-1"><a class="header-anchor" href="#二、path模块"><span>二、path模块</span></a></h2><blockquote><p><code>path</code> 模块提供了 <code>操作路径</code> 的功能，我们将介绍如下几个较为常用的几个 API：</p></blockquote><table><thead><tr><th><strong>API</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>path.resolve</td><td>拼接规范的绝对路径 <code>常用</code></td></tr><tr><td>path.sep</td><td>获取操作系统的路径分隔符</td></tr><tr><td>path.parse</td><td>解析路径并返回对象</td></tr><tr><td>path.basename</td><td>获取路径的文件名（带后缀）</td></tr><tr><td>path.dirname</td><td>获取路径的目录名</td></tr><tr><td>path.extname</td><td>获得路径的扩展名</td></tr></tbody></table><p>代码示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 写入文件</span>
fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">&#39;/index.html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;love&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">&#39;/index.html&#39;</span><span class="token punctuation">)</span> 
<span class="token comment">//=&gt;D:\\Desktop\\Node\\code\\04-path/index.html</span>

<span class="token comment">// resolve 解决问题  拼接绝对路径</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token comment">//=&gt;D:\\Desktop\\Node\\code\\04-path\\index.html</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token comment">//=&gt;D:\\Desktop\\Node\\code\\04-path\\index.html</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;/index.html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token comment">//=&gt;D:\\index.html\\test</span>

<span class="token comment">// sep 获取路径分隔符</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>sep<span class="token punctuation">)</span> 
<span class="token comment">//=&gt; window \\  linux /</span>

<span class="token comment">// parse 方法  __filename  &#39;全局变量&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span> 
<span class="token comment">//=&gt;文件的绝对路径 //=&gt;D:\\Desktop\\Node\\code\\04-path\\01-path.js</span>

<span class="token comment">// 解析路径</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;D:\\\\Desktop\\\\Node\\\\code\\\\04-path\\\\01-path.js&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">/*
    {
      root: &#39;D:\\\\&#39;,
      dir: &#39;D:\\\\Desktop\\\\Node\\\\code\\\\04-path&#39;,
      base: &#39;01-path.js&#39;,
      ext: &#39;.js&#39;,
      name: &#39;01-path&#39;
    }
*/</span>

<span class="token comment">// 获取路径基础名称</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//01-path.js</span>
<span class="token comment">//01-path</span>

<span class="token comment">// 获取路径的目录名</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//D:\\\\Desktop\\\\Node\\\\code\\\\04-path</span>

<span class="token comment">// 获取路径的拓展名</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//.js</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、http模块" tabindex="-1"><a class="header-anchor" href="#三、http模块"><span>三、HTTP模块</span></a></h2><h3 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念"><span>1. 概念</span></a></h3><blockquote><p>HTTP（hypertext transport protocol）协议；中文叫 <span style="color:red;">超文本传输协议</span>，是一种基于TCP/IP的应用层通信协议</p></blockquote><p>这个协议详细规定了 <code>浏览器</code> 和 万维网 <code>服务器</code> 之间互相通信的规则</p><p>协议中主要规定了两个方面的内容:</p><ul><li><p>客户端：用来向服务器发送数据，可以被称之为 <span style="color:red;">请求报文</span></p></li><li><p>服务端：向客户端返回数据，可以被称之为 <span style="color:red;">响应报文</span></p></li></ul><blockquote><p>报文：可以简单理解为就是一堆字符串</p></blockquote><h3 id="_2-请求报文的组成" tabindex="-1"><a class="header-anchor" href="#_2-请求报文的组成"><span>2. 请求报文的组成</span></a></h3><ul><li>请求行</li><li>请求头</li><li>空行</li><li>请求体</li></ul><h4 id="http-的请求行" tabindex="-1"><a class="header-anchor" href="#http-的请求行"><span><strong>HTTP</strong> 的请求行</span></a></h4><ul><li><p>请求方法（get、post、put、delete等）</p></li><li><p>请求 URL（统一资源定位器）</p><p>例如：http://www.baidu.com/index.html?a=100&amp;b=200#logo</p><ul><li>http: 协议 (https、ftp、ssh等)</li><li>www.baidu.com 域名</li><li>80 端口号</li><li>/index.html 路径</li><li>a=100&amp;b=200 查询字符串</li><li>#logo 哈希 (锚点链接)</li></ul></li><li><p>HTTP协议版本号</p></li></ul><h4 id="http-请求头" tabindex="-1"><a class="header-anchor" href="#http-请求头"><span>HTTP 请求头</span></a></h4><p>格式：『头名：头值』</p><p>常见的请求头有：</p><table><thead><tr><th>请求头</th><th>解释</th></tr></thead><tbody><tr><td>Host</td><td>主机名</td></tr><tr><td>Connection</td><td>连接的设置 keep-alive（保持连接）；close（关闭连接）</td></tr><tr><td>Cache-Control</td><td>缓存控制 max-age = 0 （没有缓存）</td></tr><tr><td>Upgrade-Insecure-Requests</td><td>将网页中的http请求转化为 https 请求（很少用）老网站升级</td></tr><tr><td>User-Agent</td><td>用户代理，客户端字符串标识，服务器可以通过这个标识来识别这个请求来自哪个客户端 ，一般在PC端和手机端的区分</td></tr><tr><td>Accept</td><td>设置浏览器接收的数据类型</td></tr><tr><td>Accept-Encoding</td><td>设置接收的压缩方式</td></tr><tr><td>Accept-Language</td><td>设置接收的语言 q=0.7 为喜好系数，满分为1</td></tr><tr><td>Cookie</td><td>后面单独讲</td></tr></tbody></table><h4 id="http-的请求体" tabindex="-1"><a class="header-anchor" href="#http-的请求体"><span>HTTP 的请求体</span></a></h4><p>请求体内容的格式是非常灵活的，</p><p>（可以是空）==&gt; GET请求，</p><p>（也可以是字符串，还可以是JSON）===&gt; POST请求</p><p>例如：</p><ul><li><p>字符串：<code>keywords=手机&amp;price=2000</code></p></li><li><p>JSON：<code>{&quot;keywords&quot;:&quot;手机&quot;,&quot;price&quot;:2000}</code></p></li></ul><h3 id="_3-响应报文的组成" tabindex="-1"><a class="header-anchor" href="#_3-响应报文的组成"><span>3. 响应报文的组成</span></a></h3><ul><li><p>响应行: <code>HTTP/1.1 200 OK</code></p><ul><li><p>HTTP/1.1：HTTP协议版本号</p></li><li><p>200：响应状态码 404 Not Found 500 Internal Server Error</p><p>还有一些状态码，参考：https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status</p><p>OK：响应状态描述</p></li></ul></li></ul><blockquote><p>响应状态码 和 响应字符串 关系是 一一对应 的。</p></blockquote><ul><li><p>响应头</p><ul><li><code>Cache-Control</code>: 缓存控制 private 私有的，只允许客户端缓存数据</li><li><code>Connection</code>: 链接设置</li><li><code>Content-Type:text/html;charset=utf-8</code>: 设置响应体的数据类型以及字符集,响应体为html，字符集utf-8</li><li><code>Content-Length</code>: 响应体的长度，单位为字节</li></ul></li><li><p>空行</p></li><li><p>响应体</p><p>响应体内容的类型是非常灵活的，常见的类型有 HTML、CSS、JS、图片、JSON</p></li></ul><h3 id="_4-创建-http-服务" tabindex="-1"><a class="header-anchor" href="#_4-创建-http-服务"><span>4. 创建 <strong>HTTP</strong> 服务</span></a></h3><p>使用 nodejs 创建 HTTP 服务</p><h4 id="操作步骤" tabindex="-1"><a class="header-anchor" href="#操作步骤"><span>操作步骤</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//1. 导入 http 模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2. 创建服务对象 create 创建 server 服务</span>
<span class="token comment">// request 意为请求. 是对请求报文的封装对象, 通过 request 对象可以获得请求报文的数据</span>
<span class="token comment">// response 意为响应. 是对响应报文的封装对象, 通过 response 对象可以设置响应报文</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 		
    <span class="token comment">// 设置响应体</span>
    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;Hello HTTP server&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//=&gt;返回结果是一个对象</span>

<span class="token comment">//3. 监听端口, 启动服务</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务已经启动, 端口 9000 监听中...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>http.createServer</code> 里的回调函数的执行时机： <span style="color:red;">当接收到 HTTP 请求的时候，就会执行</span></p></blockquote><h4 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h4><p>浏览器请求对应端口</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">9000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h4><ol><li><p>命令行 <code>ctrl + c</code> 停止服务</p></li><li><p>当服务启动后，更新代码 <span style="color:red;">必须重启服务才能生效</span></p></li><li><p>响应内容中文乱码的解决办法</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 设置响应头</span>
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;content-type&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;text/html;charset=utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>端口号被占用</p><p><code>Error: listen EADDRINUSE: address already in use :::9000</code></p><p>1）关闭当前正在运行监听端口的服务 （ <span style="color:red;">使用较多</span> ）</p><p>2）修改其他端口号</p></li><li><p><code>HTTP</code> 协议<span style="color:red;">默认端口</span>是 <code>80</code> 。<code>HTTPS</code> 协议的<span style="color:red;">默认端口</span>是 <code>443</code>, HTTP 服务开发常用端口有 <code>3000</code>，<code>8080</code>，<code>8090</code>，<code>9000</code> 等</p></li></ol><blockquote><p>如果端口被其他程序占用，可以使用 <span style="color:red;">资源监视器</span> 找到占用端口的程序，然后使用 <span style="color:red;">任务管理器</span> 关闭对应的程序</p></blockquote><h3 id="_5-浏览器查看-http-报文" tabindex="-1"><a class="header-anchor" href="#_5-浏览器查看-http-报文"><span>5. 浏览器查看 HTTP 报文</span></a></h3><figure><img src="`+u+'" alt="04_HTTP协议" tabindex="0" loading="lazy"><figcaption>04_HTTP协议</figcaption></figure><h4 id="查看请求行与请求头" tabindex="-1"><a class="header-anchor" href="#查看请求行与请求头"><span>查看请求行与请求头</span></a></h4><figure><img src="'+r+'" alt="04_HTTP协议" tabindex="0" loading="lazy"><figcaption>04_HTTP协议</figcaption></figure><h4 id="查看请求体" tabindex="-1"><a class="header-anchor" href="#查看请求体"><span>查看请求体</span></a></h4><figure><img src="'+d+'" alt="8-2" tabindex="0" loading="lazy"><figcaption>8-2</figcaption></figure><h4 id="查看-url-查询字符串" tabindex="-1"><a class="header-anchor" href="#查看-url-查询字符串"><span>查看 <strong>URL</strong> 查询字符串</span></a></h4><figure><img src="'+k+'" alt="8-3" tabindex="0" loading="lazy"><figcaption>8-3</figcaption></figure><h4 id="查看响应行与响应头" tabindex="-1"><a class="header-anchor" href="#查看响应行与响应头"><span>查看响应行与响应头</span></a></h4><figure><img src="'+v+'" alt="8-4" tabindex="0" loading="lazy"><figcaption>8-4</figcaption></figure><h4 id="查看响应体" tabindex="-1"><a class="header-anchor" href="#查看响应体"><span>查看响应体</span></a></h4><figure><img src="'+m+`" alt="8-5" tabindex="0" loading="lazy"><figcaption>8-5</figcaption></figure><h3 id="_6-获取-http-请求报文" tabindex="-1"><a class="header-anchor" href="#_6-获取-http-请求报文"><span>6. 获取 HTTP 请求报文</span></a></h3><table><thead><tr><th style="text-align:left;">含义</th><th style="text-align:left;">语法</th><th style="text-align:left;">重点掌握</th></tr></thead><tbody><tr><td style="text-align:left;">请求方法</td><td style="text-align:left;"><code>request.method</code></td><td style="text-align:left;">*****</td></tr><tr><td style="text-align:left;">请求版本</td><td style="text-align:left;"><code>request.httpVersion</code></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">请求路径</td><td style="text-align:left;"><code>request.url</code></td><td style="text-align:left;">*****</td></tr><tr><td style="text-align:left;">URL 路径</td><td style="text-align:left;"><code>require(&#39;url&#39;).parse(request.url).pathname</code></td><td style="text-align:left;">*****</td></tr><tr><td style="text-align:left;">URL 查询字符串</td><td style="text-align:left;"><code>require(&#39;url&#39;).parse(request.url, true).query</code></td><td style="text-align:left;">*****</td></tr><tr><td style="text-align:left;">请求头</td><td style="text-align:left;"><code>request.headers</code></td><td style="text-align:left;">*****</td></tr><tr><td style="text-align:left;">请求体</td><td style="text-align:left;"><code>request.on(&#39;data&#39;, function(chunk){})</code><br><code>request.on(&#39;end&#39;, function(){})</code></td><td style="text-align:left;"></td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 1. 导入 http 模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 2. 创建服务对象</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取请求的方法</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>method<span class="token punctuation">)</span>  <span class="token comment">//=&gt;GET</span>
  <span class="token comment">// 获取请求的 url</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token comment">// 只包含 url 中的 路径 与查询字符串</span>
  <span class="token comment">// 获取 http 协议的版本号</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>httpVersion<span class="token punctuation">)</span>  <span class="token comment">//=&gt; 1.1</span>
  <span class="token comment">// 获取 http 的请求头</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span> <span class="token comment">//=&gt;结果是一个对象</span>
  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span> <span class="token comment">//=&gt;设置响应体</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 3. 监听端口，启动服务</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务已经启动...&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项：</strong></p><ol><li><code>request.url</code> 只能获取路径以及查询字符串，无法获取 URL 中的域名以及协议的内容</li><li><code>request.headers</code> 将请求信息转化成一个对象，并将属性名都转化成了『小写』</li><li>关于路径：如果访问网站的时候，只填写了 IP 地址或者是域名信息，此时请求的路径为『 <code>/</code> 』</li><li>关于 <code>favicon.ico</code>：这个请求是属于浏览器自动发送的请求</li></ol><h4 id="提取-http-报文的请求体" tabindex="-1"><a class="header-anchor" href="#提取-http-报文的请求体"><span>提取 http 报文的请求体</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 1. 导入 http 模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 2. 创建服务对象</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 声明一个变量</span>
  <span class="token keyword">let</span> body <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  <span class="token comment">// 2. 绑定 data 事件</span>
  request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token parameter">chunk</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    body <span class="token operator">+=</span> chunk
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 3. 绑定 end 事件</span>
  request<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>  <span class="token comment">//=&gt;&#39;username=111&amp;password=111&#39;</span>
    <span class="token comment">// 响应</span>
    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;Hello Http&#39;</span><span class="token punctuation">)</span> <span class="token comment">//=&gt;设置响应体 </span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 3. 监听端口，启动服务</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务已经启动...&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="提取-http-报文中-url的路径-与-查询字符串" tabindex="-1"><a class="header-anchor" href="#提取-http-报文中-url的路径-与-查询字符串"><span>提取 http 报文中 url的路径 与 查询字符串</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 导入 http 模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 1. 导入 url 模块</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 创建服务对象</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 2. 解析 request.url</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>   <span class="token comment">//=&gt;/search?keyword=h5</span>
  <span class="token comment">// 使用 parse 解析 request.url 的内容</span>
  <span class="token comment">// true 将 query 属性将会设置为一个 对象</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment">// 如下图所示，为一个对象</span>
    
  <span class="token comment">// 路径</span>
  <span class="token keyword">let</span> pathname <span class="token operator">=</span> res<span class="token punctuation">.</span>pathname
  <span class="token comment">// 查询字符串</span>
  <span class="token keyword">let</span> keyword <span class="token operator">=</span> res<span class="token punctuation">.</span>query<span class="token punctuation">.</span>keyword
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span>   <span class="token comment">//=&gt;h5</span>
  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 监听端口，启动服务</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务已经启动...&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+g+`" alt="image-20230322162535711" tabindex="0" loading="lazy"><figcaption>image-20230322162535711</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 导入 http 模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 创建服务对象</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 实例化 url 对象</span>
  <span class="token comment">// let url = new URL(&#39;/search?a=100&amp;b=200&#39;,&#39;http://127.0.0.1:9000&#39;)</span>
  <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token string">&#39;http://127.0.0.1&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token comment">//=&gt;如图所示，为一个对象</span>
  <span class="token comment">// 输出路径</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span>  <span class="token comment">//=&gt;/search</span>
  <span class="token comment">// 输出 keyword 查询字符串</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//=&gt; 100</span>
  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;url new&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 监听端口，启动服务</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务已经启动...&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+b+`" alt="image-20230322162034273" tabindex="0" loading="lazy"><figcaption>image-20230322162034273</figcaption></figure><h4 id="练习" tabindex="-1"><a class="header-anchor" href="#练习"><span>练习</span></a></h4><p>按照以下要求搭建 HTTP 服务</p><table><thead><tr><th>请求类型**(<strong>方法</strong>)**</th><th>请求地址</th><th>响应体结果</th></tr></thead><tbody><tr><td>get</td><td>/login</td><td>登录页面</td></tr><tr><td>get</td><td>/reg</td><td>注册页面</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//1、引入http模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2、建立服务</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> 
    <span class="token keyword">let</span> <span class="token punctuation">{</span>url<span class="token punctuation">,</span> method<span class="token punctuation">}</span> <span class="token operator">=</span> request<span class="token punctuation">;</span> <span class="token comment">//对象的解构赋值</span>

	<span class="token comment">//设置响应头信息</span>
	<span class="token comment">//解决中文乱码</span>
	response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span> 
    <span class="token keyword">if</span><span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token string">&quot;/register&quot;</span> <span class="token operator">&amp;&amp;</span> method <span class="token operator">==</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;注册页面&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>url<span class="token operator">==</span><span class="token string">&quot;/login&quot;</span> <span class="token operator">&amp;&amp;</span> method <span class="token operator">==</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;登录页面&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
		response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;404 Not Found&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//3、监听端口</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务启动中....&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-设置-http-响应报文" tabindex="-1"><a class="header-anchor" href="#_7-设置-http-响应报文"><span>7. 设置 <strong>HTTP</strong> 响应报文</span></a></h3><table><thead><tr><th>作用</th><th>语法</th></tr></thead><tbody><tr><td>设置响应状态码</td><td>response.statusCode</td></tr><tr><td>设置响应状态描述</td><td>response.statusMessage （ 用的非常少 ）</td></tr><tr><td>设置响应头信息</td><td>response.setHeader(&#39;头名&#39;, &#39;头值&#39;) (<code>可以自定义</code>)</td></tr><tr><td>设置响应体</td><td>response.write(&#39;xx&#39;)<br>response.end(&#39;xxx&#39;)</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 1. 设置响应状态码</span>
response<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">203</span>
<span class="token comment">// 2. 响应状态的描述</span>
response<span class="token punctuation">.</span>statusMessage <span class="token operator">=</span> <span class="token string">&#39;i love you&#39;</span>
<span class="token comment">// 3. 响应头</span>
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;content-type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text/html;charset=utf-8&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 自定义响应头</span>
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;myHeader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;test test&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 设置多个同名的响应头</span>
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// write 和 end 的两种使用情况：</span>
<span class="token comment">// 1. write 和 end 的结合使用 响应体相对分散</span>
response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;xx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;xx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;xx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//每一个请求，在处理的时候必须要执行 end 方法的</span>

<span class="token comment">//2. 单独使用 end 方法 响应体相对集中</span>
response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="练习-1" tabindex="-1"><a class="header-anchor" href="#练习-1"><span>练习</span></a></h4><p>搭建 HTTP 服务，响应一个 4 行 3 列的表格，并且要求表格有 <code>隔行换色效果</code> ，且 <code>点击</code> 单元格能 <code>高亮显示</code></p><p><strong>方法一</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 导入 http 模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 创建服务对象</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;content-type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text/html;charset=utf-8&#39;</span><span class="token punctuation">)</span>
  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;!DOCTYPE html&gt;
    &lt;html lang=&quot;en&quot;&gt;

    &lt;head&gt;
      &lt;meta charset=&quot;UTF-8&quot;&gt;
      &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
      &lt;title&gt;Document&lt;/title&gt;
      &lt;style&gt;
        td {
          padding: 20px 40px;
        }

        table tr:nth-child(odd) {
          background-color: #aef;
        }

        table tr:nth-child(even) {
          background-color: #fcb;
        }

        table,
        td {
          border-collapse: collapse;
        }
      &lt;/style&gt;
    &lt;/head&gt;

    &lt;body&gt;
      &lt;table border=&quot;1&quot;&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;
      &lt;script&gt;
        const tds = document.querySelectorAll(&#39;td&#39;)
        tds.forEach(item =&gt; {
          item.addEventListener(&#39;click&#39;, function () {
            this.style.backgroundColor = &#39;#000&#39;
          })
        })
      &lt;/script&gt;
    &lt;/body&gt;

    &lt;/html&gt;
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 监听端口，启动服务器</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务器已经启动...&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法二</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 导入 http 模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 创建服务对象</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;content-type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text/html;charset=utf-8&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 读取文件内容</span>
  <span class="token keyword">let</span> html <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">&#39;/table.html&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// end 方法的参数可以是字符串也可以是Buffer</span>
  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 监听端口，启动服务器</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务器已经启动...&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>table.html</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token selector">td</span> <span class="token punctuation">{</span>
      <span class="token property">padding</span><span class="token punctuation">:</span> 20px 40px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector">table tr:nth-child(odd)</span> <span class="token punctuation">{</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> #aef<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector">table tr:nth-child(even)</span> <span class="token punctuation">{</span>
      <span class="token property">background-color</span><span class="token punctuation">:</span> #fcb<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector">table,
    td</span> <span class="token punctuation">{</span>
      <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> tds <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;td&#39;</span><span class="token punctuation">)</span>
    tds<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      item<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">&#39;#000&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-静态资源服务" tabindex="-1"><a class="header-anchor" href="#_8-静态资源服务"><span>8. 静态资源服务</span></a></h3><p><code>静态资源</code> 是指 <span style="color:red;">内容长时间不发生改变的资源</span> ，例如图片，视频，CSS 文件，JS文件，HTML文件，字体文件等</p><p><code>动态资源</code> 是指 <span style="color:red;">内容经常更新的资源</span> ，例如百度首页，网易首页，京东搜索列表页面等</p><h3 id="_9-网站根目录或静态资源目录" tabindex="-1"><a class="header-anchor" href="#_9-网站根目录或静态资源目录"><span>9. 网站根目录或静态资源目录</span></a></h3><p>HTTP 服务在哪个文件夹中寻找静态资源，那个文件夹就是 <span style="color:red;">静态资源目录</span> ，也称之为 <span style="color:red;">网站根目录</span></p><blockquote><p>思考：vscode 中使用 live-server 访问 HTML 时， 它启动的服务中网站根目录是谁？</p><ul><li>该文件所处的文件夹</li></ul></blockquote><h3 id="_10-网页中的-url" tabindex="-1"><a class="header-anchor" href="#_10-网页中的-url"><span>10. 网页中的 <strong>URL</strong></span></a></h3><p>网页中的 URL 主要分为两大类：<code>相对路径</code> 与 <code>绝对路径</code></p><h4 id="绝对路径" tabindex="-1"><a class="header-anchor" href="#绝对路径"><span>绝对路径</span></a></h4><p>绝对路径可靠性强，而且相对容易理解，在项目中运用较多</p><table><thead><tr><th>形式</th><th>特点</th></tr></thead><tbody><tr><td>http://atguigu.com/web</td><td>直接向目标资源发送请求，容易理解。网站的外链会用到此形式</td></tr><tr><td>//atguigu.com/web</td><td>与页面 URL 的协议拼接形成完整 URL 再发送请求。大型网站用的比较多</td></tr><tr><td>/web</td><td>与页面 URL 的协议、主机名、端口拼接形成完整 URL 再发送请求。中小型网站</td></tr></tbody></table><h4 id="相对路径" tabindex="-1"><a class="header-anchor" href="#相对路径"><span>相对路径</span></a></h4><p>相对路径在发送请求时，需要与当前页面 URL 路径进行 <code>计算</code> ，得到完整 URL 后，再发送请求，学习阶段用的较多</p><p>例如当前网页 url 为 http://www.atguigu.com/course/h5.html</p><table><thead><tr><th>形式</th><th>最终的 <strong>URL</strong></th></tr></thead><tbody><tr><td>./css/app.css</td><td>http://www.atguigu.com/course/css/app.css</td></tr><tr><td>js/app.js</td><td>http://www.atguigu.com/course/js/app.js</td></tr><tr><td>../img/logo.png</td><td>http://www.atguigu.com/img/logo.png</td></tr><tr><td>../../mp4/show.mp4</td><td>http://www.atguigu.com/mp4/show.mp4</td></tr></tbody></table><h4 id="网页中使用-url-的场景小结" tabindex="-1"><a class="header-anchor" href="#网页中使用-url-的场景小结"><span>网页中使用 <strong>URL</strong> 的场景小结</span></a></h4><p>包括但不限于如下场景：</p><ul><li>a 标签 href</li><li>link 标签 href</li><li>script 标签 src</li><li>img 标签 src</li><li>video audio 标签 src</li><li>form 中的 action</li><li>AJAX 请求中的 URL</li></ul><h3 id="_11-设置资源类型-mime类型" tabindex="-1"><a class="header-anchor" href="#_11-设置资源类型-mime类型"><span>11. 设置资源类型（<strong>mime</strong>类型）</span></a></h3><p><code>媒体类型</code>（通常称为 Multipurpose Internet Mail Extensions 或 MIME 类型 ）是一种标准，用来表示文档、文件或字节流的性质和格式。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>mime 类型结构： [type]/[subType]

例如： text/html text/css image/jpeg image/png application/json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HTTP 服务可以设置响应头 Content-Type 来表明响应体的 MIME 类型，浏览器会根据该类型决定如何处理资源</p><p>下面是常见文件对应的 mime 类型</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">html</span><span class="token operator">:</span> <span class="token string">&#39;text/html&#39;</span><span class="token punctuation">,</span>
<span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token string">&#39;text/css&#39;</span><span class="token punctuation">,</span>
<span class="token literal-property property">js</span><span class="token operator">:</span> <span class="token string">&#39;text/javascript&#39;</span><span class="token punctuation">,</span>
<span class="token literal-property property">png</span><span class="token operator">:</span> <span class="token string">&#39;image/png&#39;</span><span class="token punctuation">,</span>
<span class="token literal-property property">jpg</span><span class="token operator">:</span> <span class="token string">&#39;image/jpeg&#39;</span><span class="token punctuation">,</span> 
<span class="token literal-property property">gif</span><span class="token operator">:</span> <span class="token string">&#39;image/gif&#39;</span><span class="token punctuation">,</span>
<span class="token literal-property property">mp4</span><span class="token operator">:</span> <span class="token string">&#39;video/mp4&#39;</span><span class="token punctuation">,</span>
<span class="token literal-property property">mp3</span><span class="token operator">:</span> <span class="token string">&#39;audio/mpeg&#39;</span><span class="token punctuation">,</span>
<span class="token literal-property property">json</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>对于未知的资源类型，可以选择 <code>application/octet-stream</code> 类型，浏览器在遇到该类型的响应时，会对响应体内容进行独立存储，也就是我们常见的 <code>下载</code> 效果</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	<span class="token comment">//获取请求的方法已经路径</span>
	<span class="token keyword">let</span> <span class="token punctuation">{</span>url<span class="token punctuation">,</span>method<span class="token punctuation">}</span> <span class="token operator">=</span> request<span class="token punctuation">;</span>
	<span class="token comment">//判断请求方式以及请求路径</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>method <span class="token operator">==</span> <span class="token string">&quot;GET&quot;</span> <span class="token operator">&amp;&amp;</span> url <span class="token operator">==</span> <span class="token string">&quot;/index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">//需要响应文件中的内容</span>
		<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span> dirname <span class="token operator">+</span> <span class="token string">&#39;/index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>method <span class="token operator">==</span> <span class="token string">&quot;GET&quot;</span> <span class="token operator">&amp;&amp;</span> url <span class="token operator">==</span> <span class="token string">&quot;/css/app.css&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">//需要响应文件中的内容</span>
		<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span> dirname <span class="token operator">+</span> <span class="token string">&#39;/public/css/app.css&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>method <span class="token operator">==</span> <span class="token string">&quot;GET&quot;</span> <span class="token operator">&amp;&amp;</span> url <span class="token operator">==</span> <span class="token string">&quot;/js/app.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">//需要响应文件中的内容</span>
		<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span> dirname <span class="token operator">+</span> <span class="token string">&#39;/public/js/app.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
		<span class="token comment">//404响应</span>
         response<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>
		response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;404 Not Found&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;80端口正在启动中....&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很明显上面的代码，当只要有一个请求路径就需要进行判断，显然这种方式不够完美，那么我们需要封装</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	<span class="token comment">//获取请求的方法已经路径</span>
	<span class="token keyword">let</span> <span class="token punctuation">{</span>url<span class="token punctuation">,</span>method<span class="token punctuation">}</span> <span class="token operator">=</span> request<span class="token punctuation">;</span>
	<span class="token comment">//文件夹路径  根路径</span>
	<span class="token keyword">let</span> rootDir <span class="token operator">=</span> dirname <span class="token operator">+</span> <span class="token string">&#39;/public&#39;</span><span class="token punctuation">;</span>
	<span class="token comment">//拼接文件路径</span>
	<span class="token keyword">let</span> filePath <span class="token operator">=</span> rootDir <span class="token operator">+</span> url<span class="token punctuation">;</span>
	<span class="token comment">//读取文件内容</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
		<span class="token comment">//判断</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token comment">//如果出现错误，响应404状态码</span>
            response<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span> 
            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
			<span class="token comment">//响应文件内容</span>
            response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;80端口正在启动中....&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-get-和-post-请求场景小结" tabindex="-1"><a class="header-anchor" href="#_12-get-和-post-请求场景小结"><span>12. GET <strong>和</strong> POST <strong>请求场景小结</strong></span></a></h3><p>GET 请求的情况：</p><ul><li>在地址栏直接输入 url 访问</li><li>点击 a 链接</li><li>link 标签引入 css</li><li>script 标签引入 js</li><li>img 标签引入图片</li><li>form 标签中的 method 为 get （不区分大小写）</li><li>ajax 中的 get 请求</li></ul><p>POST 请求的情况：</p><ul><li><p>form 标签中的 method 为 post（不区分大小写）</p></li><li><p>AJAX 的 post 请求</p></li></ul><h3 id="_13-get和post请求的区别-实现层面" tabindex="-1"><a class="header-anchor" href="#_13-get和post请求的区别-实现层面"><span>13. <strong>GET</strong>和<strong>POST</strong>请求的区别（实现层面）</span></a></h3><p><code>GET</code> 和 <code>POST</code> 是 HTTP 协议请求的两种方式。</p><ul><li><code>GET</code> 主要用来获取数据，<code>POST</code> 主要用来提交数据</li><li><code>GET</code> 带参数请求是将参数缀到 URL 之后，在地址栏中输入 url 访问网站就是 GET 请求，<code>POST</code> 带参数请求是将参数放到请求体中</li><li><code>POST</code> 请求相对 <code>GET</code> 安全一些，因为在浏览器中参数会暴露在地址栏</li><li><code>GET</code> 请求大小有限制，一般为 2K，而 POST 请求则没有</li></ul>`,266);function j(w,q){const a=p("ExternalLinkIcon");return e(),o("div",null,[f,n("p",null,[s("Node.js的API文档（中文）："),n("a",y,[s("https://nodejs.cn/api/"),c(a)])]),x])}const S=t(h,[["render",j],["__file","05_innermodule.html.vue"]]),P=JSON.parse('{"path":"/Server/nodeJS/05_innermodule.html","title":"nodejs内置模块","lang":"zh-CN","frontmatter":{"order":4,"description":"nodejs内置模块 Node.js的API文档（中文）：https://nodejs.cn/api/ Node.js 应用由模块组成，采用 CommonJS 模块规范。Node.js中的模块分为三种： 内置模块 第三方模块 自定义模块 关于 Node.js 的内置模块和常见API，可以看官方文档，下面介绍几种常用的模块。 一、fs文件系统 fs 全称...","head":[["meta",{"property":"og:url","content":"https://github.com/dcblog/Server/nodeJS/05_innermodule.html"}],["meta",{"property":"og:site_name","content":"dcBlog"}],["meta",{"property":"og:title","content":"nodejs内置模块"}],["meta",{"property":"og:description","content":"nodejs内置模块 Node.js的API文档（中文）：https://nodejs.cn/api/ Node.js 应用由模块组成，采用 CommonJS 模块规范。Node.js中的模块分为三种： 内置模块 第三方模块 自定义模块 关于 Node.js 的内置模块和常见API，可以看官方文档，下面介绍几种常用的模块。 一、fs文件系统 fs 全称..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-20T08:14:58.000Z"}],["meta",{"property":"article:author","content":"Dachao"}],["meta",{"property":"article:modified_time","content":"2024-03-20T08:14:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"nodejs内置模块\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-20T08:14:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Dachao\\",\\"email\\":\\"wyc168hard@163.com\\"}]}"]]},"headers":[{"level":2,"title":"一、fs文件系统","slug":"一、fs文件系统","link":"#一、fs文件系统","children":[{"level":3,"title":"1. 文件写入","slug":"_1-文件写入","link":"#_1-文件写入","children":[]},{"level":3,"title":"2. 文件读取","slug":"_2-文件读取","link":"#_2-文件读取","children":[]},{"level":3,"title":"3. 文件移动与重命名","slug":"_3-文件移动与重命名","link":"#_3-文件移动与重命名","children":[]},{"level":3,"title":"4. 文件删除","slug":"_4-文件删除","link":"#_4-文件删除","children":[]},{"level":3,"title":"5. 文件夹操作","slug":"_5-文件夹操作","link":"#_5-文件夹操作","children":[]},{"level":3,"title":"6. 查看资源状态","slug":"_6-查看资源状态","link":"#_6-查看资源状态","children":[]},{"level":3,"title":"7. 相对路径问题","slug":"_7-相对路径问题","link":"#_7-相对路径问题","children":[]},{"level":3,"title":"8. __dirname","slug":"_8-dirname","link":"#_8-dirname","children":[]},{"level":3,"title":"9. 练习","slug":"_9-练习","link":"#_9-练习","children":[]}]},{"level":2,"title":"二、path模块","slug":"二、path模块","link":"#二、path模块","children":[]},{"level":2,"title":"三、HTTP模块","slug":"三、http模块","link":"#三、http模块","children":[{"level":3,"title":"1. 概念","slug":"_1-概念","link":"#_1-概念","children":[]},{"level":3,"title":"2. 请求报文的组成","slug":"_2-请求报文的组成","link":"#_2-请求报文的组成","children":[]},{"level":3,"title":"3. 响应报文的组成","slug":"_3-响应报文的组成","link":"#_3-响应报文的组成","children":[]},{"level":3,"title":"4. 创建 HTTP 服务","slug":"_4-创建-http-服务","link":"#_4-创建-http-服务","children":[]},{"level":3,"title":"5. 浏览器查看 HTTP 报文","slug":"_5-浏览器查看-http-报文","link":"#_5-浏览器查看-http-报文","children":[]},{"level":3,"title":"6. 获取 HTTP 请求报文","slug":"_6-获取-http-请求报文","link":"#_6-获取-http-请求报文","children":[]},{"level":3,"title":"7. 设置 HTTP 响应报文","slug":"_7-设置-http-响应报文","link":"#_7-设置-http-响应报文","children":[]},{"level":3,"title":"8. 静态资源服务","slug":"_8-静态资源服务","link":"#_8-静态资源服务","children":[]},{"level":3,"title":"9. 网站根目录或静态资源目录","slug":"_9-网站根目录或静态资源目录","link":"#_9-网站根目录或静态资源目录","children":[]},{"level":3,"title":"10. 网页中的 URL","slug":"_10-网页中的-url","link":"#_10-网页中的-url","children":[]},{"level":3,"title":"11. 设置资源类型（mime类型）","slug":"_11-设置资源类型-mime类型","link":"#_11-设置资源类型-mime类型","children":[]},{"level":3,"title":"12. GET 和 POST 请求场景小结","slug":"_12-get-和-post-请求场景小结","link":"#_12-get-和-post-请求场景小结","children":[]},{"level":3,"title":"13. GET和POST请求的区别（实现层面）","slug":"_13-get和post请求的区别-实现层面","link":"#_13-get和post请求的区别-实现层面","children":[]}]}],"git":{"createdTime":1710854012000,"updatedTime":1710922498000,"contributors":[{"name":"dachao","email":"1114686398@qq.com","commits":2}]},"readingTime":{"minutes":22.61,"words":6784},"filePathRelative":"Server/nodeJS/05_innermodule.md","localizedDate":"2024年3月19日","excerpt":"\\n<p>Node.js的API文档（中文）：<a href=\\"https://nodejs.cn/api/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://nodejs.cn/api/</a></p>\\n<p>Node.js 应用由模块组成，采用 CommonJS 模块规范。Node.js中的模块分为三种：</p>\\n<ul>\\n<li>内置模块</li>\\n<li>第三方模块</li>\\n<li>自定义模块</li>\\n</ul>\\n<p>关于 Node.js 的内置模块和常见API，可以看官方文档，下面介绍几种常用的模块。</p>\\n<h2>一、fs文件系统</h2>","autoDesc":true}');export{S as comp,P as data};
